{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"a2d72813e742ff2e626eb989525431d83f1b56f8","modified":1577442771941},{"_id":"themes/next/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1577442700912},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1577114533913},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1577114533914},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1577114533914},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1577114533923},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1577114533922},{"_id":"themes/next/README.md","hash":"dc026053a4d9fb97a58dbc3e9060e480f6852b23","modified":1577114533923},{"_id":"themes/next/_config.yml","hash":"78911799c614ac516706cc91cbf0513203d12718","modified":1578896683875},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1577114533936},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1577114533923},{"_id":"themes/next/package.json","hash":"61aa2ac422e92ad435d1bfedea8d41824f5fe85e","modified":1577114533972},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1577114533925},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1577114533922},{"_id":"source/_posts/21-Day-Challenge-01.md","hash":"c582b670b15a2ebcbc0d233043286ae5464f5a62","modified":1585797612362},{"_id":"source/_posts/Algorithm.md","hash":"76f58f05b5cc1298f62148f385acda0e70e3d699","modified":1585797612363},{"_id":"source/_posts/0-vuecli-3-component.md","hash":"e4192b4aa7321bb7dd694033dccc598827c9ec84","modified":1587009539674},{"_id":"source/_posts/CSS-Triangle-Circle.md","hash":"605f0beea13ac23e46d696876fd37158ba31f948","modified":1585797612365},{"_id":"source/_posts/Electron-Offline-Build.md","hash":"08c9f9ee4b9d760476148e473e90a0cadbd30b93","modified":1586962922851},{"_id":"source/_posts/Es6-arrowFunc-arguments.md","hash":"829f74e336bc684a02d1e973749e73940006722b","modified":1579678469919},{"_id":"source/_posts/FE-guide-ArrayOprs.md","hash":"cb474c1109da0461d5fd6aa0c2be34bece33bbee","modified":1578210441437},{"_id":"source/_posts/FE-guide-Generator.md","hash":"5f20e19e358c8ba69d18550b0a027f645cd3b013","modified":1585797612368},{"_id":"source/_posts/FE-guide-Map-FlatMap-Reduce.md","hash":"47d68b6b53382edef36e61c6ffa38cfd5b27ced9","modified":1585797612369},{"_id":"source/_posts/FE-guide-Module.md","hash":"e22719c1458bd2aa6a7fedbb28a73ebb31e6bd9f","modified":1585797612372},{"_id":"source/_posts/FE-guide-Net.md","hash":"a66986d07d85c474d8e4f42ca35c43a64f6fbfe0","modified":1585797612376},{"_id":"source/_posts/FE-guide-Promise.md","hash":"080bd18ae62063d983da28a8e05d4da1afa04847","modified":1585797612377},{"_id":"source/_posts/FE-guide-async-Proxy.md","hash":"771220f40af61e196616ed26f0512db9fc93ac01","modified":1585797612377},{"_id":"source/_posts/FE-guide-about-reduce.md","hash":"15db0553e599a20f078adfa40955cccdf59d4182","modified":1578214433962},{"_id":"source/_posts/FE-guide-async-await.md","hash":"f62118bcbb7a3a374ba90e72bdc4b1127ae7cc67","modified":1585797612378},{"_id":"source/_posts/FE-guide-call-apply-bind.md","hash":"017df0a53c588adc85afe034a62d7b092efd25b0","modified":1585797612380},{"_id":"source/_posts/FE-guide-copy.md","hash":"f47dcd97e4becf016a18823c1da04f209f0555aa","modified":1585797612382},{"_id":"source/_posts/FE-guide-currying.md","hash":"75bc4dcfe4f608a2fd7cfd7ebfd290623809f707","modified":1585797612384},{"_id":"source/_posts/FE-guide-Closure.md","hash":"101e1eec920f75d417c9f56b0fd66c1b07483d97","modified":1585797612367},{"_id":"source/_posts/FE-guide-debounce-throttle.md","hash":"75941448f40fd415bde1d7f989a55ff59f677278","modified":1585797612391},{"_id":"source/_posts/FE-guide-data-structure.md","hash":"ce5642ba5865ec480361b1968d3603e53cae9fe1","modified":1585797612385},{"_id":"source/_posts/FE-guide-inherit.md","hash":"bbcd065505b39f081bade32a1bf7de97a88c31f9","modified":1585797612393},{"_id":"source/_posts/FE-guide-dataType.md","hash":"145bec65481a9e64842141fc92ca6d77ba01c27a","modified":1585797612387},{"_id":"source/_posts/FE-guide-inherit2.md","hash":"e3a5e004b3cb73501034acdff16d9be8da206d89","modified":1585797612395},{"_id":"source/_posts/FE-guide-instanceof.md","hash":"02d1df5615989558d3ca2cd698753ab8047d2928","modified":1585797612397},{"_id":"source/_posts/FE-guide-new.md","hash":"f9eca32efec7d1e8d01fd161d5280ed7961c59dd","modified":1585797612398},{"_id":"source/_posts/FE-guide-prototype.md","hash":"76cc59af9d7d2e51f16284b590bd29e6d35b45b1","modified":1585797612402},{"_id":"source/_posts/FE-guide-store.md","hash":"051cd87805a6ff04fb52e58dec8b3550e3633476","modified":1585797612407},{"_id":"source/_posts/FE-guide-safe.md","hash":"620b912ca86645d356728ba5cb6de990e5d8ef0b","modified":1585797612403},{"_id":"source/_posts/FE-guide-this.md","hash":"4acfe5e067661025a7ebbc7da92f517dbd325082","modified":1585797612410},{"_id":"source/_posts/FE-guide-vuepress.md","hash":"8b493457a61b00c4e33f2033f92fafb7613427bd","modified":1585797612411},{"_id":"source/_posts/Git-Shell.md","hash":"5d8087821916ca944377acf6f71994ffe7c790e0","modified":1577788737467},{"_id":"source/_posts/FE-guide-执行上下文.md","hash":"4d6061c7747dc422c7f9f7c0e74df0e63288f019","modified":1585797612411},{"_id":"source/_posts/GoodBye-2019.md","hash":"99136befeba8594f46ae1e7e62427d7d472531ba","modified":1585797612412},{"_id":"source/_posts/Hello-2020.md","hash":"d338e5086aba1535d7843bf91734a6e63901703b","modified":1585797612413},{"_id":"source/_posts/Implementation-of-the-vue-response-principle.md","hash":"eb8960e16d41173497ea255559bf2173cd3d965b","modified":1582444710113},{"_id":"source/_posts/Javascript-Design-Pattern.md","hash":"3d3529121c816bca01919723781c6c2e8f878fd2","modified":1585797612414},{"_id":"source/_posts/Read-High-Performance-JavaScript.md","hash":"eaa02b6905442af824cb6a853179c7093d10e5af","modified":1585797612414},{"_id":"source/_posts/Prettier-Setting.md","hash":"bcf8af8bdcd8965c5e729ae7d055f3e1c9dcfe81","modified":1591665502685},{"_id":"source/_posts/Read-Let-your-boss-promote-you.md","hash":"60ca2d2660335ccc567e8013ff44d196dd3ad5c2","modified":1585797612415},{"_id":"source/_posts/Read-The-miracle-of-the-morning-journal.md","hash":"9eb66a3c733bec3e93e7df301829f8083f736bdd","modified":1585797612417},{"_id":"source/_posts/SSR.md","hash":"0fd9b7ee6b5f8cc295c67881d12351e57cc9034c","modified":1585797612418},{"_id":"source/_posts/Speeding-up-brew-with-Ali-mirroring.md","hash":"583d75b9e31ffbcca15f91a54f8b814dc5f19d41","modified":1585797612419},{"_id":"source/_posts/V8-engine-memory-management-and-optimization.md","hash":"dbab25f3a295d1205f7c945b8f952a0067eeac2c","modified":1582444638745},{"_id":"source/_posts/VSCode-ESLint.md","hash":"dafc2a49e4dc386df6bd940610d8a8192c333e51","modified":1585797612420},{"_id":"source/_posts/Vue-Component-Communication.md","hash":"24d5c8a4ef3a55fc6607b6391ae7543fec7f1946","modified":1585797612421},{"_id":"source/_posts/Vue-VSCode-Snippets.md","hash":"c43f75b93e2fa2a3f92a10c8ff987a0dd887cbbb","modified":1585797612425},{"_id":"source/_posts/Vue-basic.md","hash":"7228c61e06843cf4f99af8e6ed001e169e832a8d","modified":1585797612426},{"_id":"source/_posts/Vue-plug-in-development.md","hash":"e56a33acdfb71989c8f6d0000c40620ae1feb265","modified":1585797612428},{"_id":"source/_posts/Wepack-Tips.md","hash":"f45abbcd10708fbaf7c0291d21920519d8f61a38","modified":1585797612430},{"_id":"source/_posts/begin-learn-java.md","hash":"423e59b990972b1eda29aab8863b7480cddcec5d","modified":1585797612433},{"_id":"source/_posts/browser-incompatibility-problem-solution.md","hash":"a25450e991bb2f446ce96dd6f50135a2a4cf1dbc","modified":1585797612434},{"_id":"source/_posts/css3-pointer-events.md","hash":"b2de113fbfba501542e48e10aa1303dd8f4c8bb8","modified":1591665502686},{"_id":"source/_posts/career.md","hash":"57077b683ad4f24553c48ea43b6b12dc66824b52","modified":1585797612436},{"_id":"source/_posts/develop-custom-cli-tools-using-node.md","hash":"3e24ffae37e589a9014f582257f120489ade5fe3","modified":1585797612451},{"_id":"source/_posts/do-it-yourselfery-async-await.md","hash":"fc759fa8a21cc4186745c6991950c9509e0dc3fb","modified":1585797612453},{"_id":"source/_posts/do-it-yourselfery-EventEmitter.md","hash":"987fdfbfe26cda15664b3a06dec354643c32d8d2","modified":1585797612452},{"_id":"source/_posts/do-it-yourselfery-call-apply.md","hash":"9873f511069dff77ff5841621037b8dd1686e2a0","modified":1585797612453},{"_id":"source/_posts/do-it-yourselfery-create.md","hash":"7dd551c48154df08fe8fcb0a21aee2a1fd68a5b7","modified":1585797612462},{"_id":"source/_posts/do-it-yourselfery-flat.md","hash":"00b50e1d7d081ef3cfff51266b059495030bacc0","modified":1585797612462},{"_id":"source/_posts/do-it-yourselfery-isArray.md","hash":"0376a06aef3aa9655457e7e140273695f5dd84ea","modified":1585797612463},{"_id":"source/_posts/do-it-yourselfery-jsonp.md","hash":"c61fb4aaa74d91a8e7d8290c72ee05cd73feb410","modified":1585797612464},{"_id":"source/_posts/do-it-yourselfery-new.md","hash":"6ffcb569e51fb0f730c42d1ad9bb19744a3349d4","modified":1585797612467},{"_id":"source/_posts/do-it-yourselfery-map.md","hash":"1c271ff7508eb5548d8043743f7a765ba7239953","modified":1585797612467},{"_id":"source/_posts/do-it-yourselfery-promise.md","hash":"540a5a145a90ba42d500dec5de3dbe44d27e9dd4","modified":1585797612467},{"_id":"source/_posts/do-it-yourselfery-reduce.md","hash":"f7ee6db8d95fcd979c23282d5d969fae9d5f648c","modified":1585797612468},{"_id":"source/_posts/do-it-yourselfery-双向绑定.md","hash":"03216688ff6ee6e6785f3b085d53fc1e2ae80602","modified":1585797612469},{"_id":"source/_posts/do-it-yourselfery-事件代理.md","hash":"9029de0a93f0f11e2a05c76d2270eac76cc765af","modified":1585797612468},{"_id":"source/_posts/gitlab-cicd.md","hash":"f05948102b0051b5ceaad8dcc512a081b1c848f4","modified":1577781828358},{"_id":"source/_posts/hexo-search.md","hash":"41f45184cff3e45fe17982538b2e20584f5b8af7","modified":1585797612470},{"_id":"source/_posts/learn-go.md","hash":"ba61b18683a0137d48f0feaa00916c0abcfe9db9","modified":1605019356679},{"_id":"source/_posts/learn-cordova.md","hash":"8a7b6b5be0ef63602ae08e5b0cba414307fbc5a1","modified":1605019945390},{"_id":"source/_posts/node-sass-slow-problem.md","hash":"0842b0d93ec34b7e86b216ccfb6a55d6b6be314c","modified":1586964255284},{"_id":"source/_posts/npm-source.md","hash":"3796b29972d3fec849d867beda4eddbb2d8015df","modified":1585797612470},{"_id":"source/_posts/path-join-vs-path-resolve.md","hash":"0830bb4fb5583542c770c4c621c58510f14b02ce","modified":1585797612477},{"_id":"source/_posts/print-table-problem.md","hash":"430e5624b413b4498f8df32d864006dc794d6232","modified":1581467328449},{"_id":"source/_posts/restful-architecture.md","hash":"49c522c35b91eed7a5cb658181f941ca37ff84bb","modified":1582452028743},{"_id":"source/_posts/solve-get-params-so-long-problem.md","hash":"cc5a76f63f31d37070a15b6d20665e4d064b65fb","modified":1585797612478},{"_id":"source/_posts/talk-about-full-stack-big-fd.md","hash":"8b925e14e0b63a1222964cf5d2bdfe708d2e9f01","modified":1586965882987},{"_id":"source/_posts/us-gitment.md","hash":"8d9466ee5242117d36ef022f27c2f36dca7cc109","modified":1585797612478},{"_id":"source/_posts/use-GitHub-Hexo-Next-make-blog.md","hash":"feb35c42b3c91d21cdbb6f1c2b57bc5680883323","modified":1585797612479},{"_id":"source/_posts/source-code-react-diff.md","hash":"8ed545e97ca77c7e7fe30d0d69f6f3228efbe92c","modified":1585883685573},{"_id":"source/_posts/vue-proxyTable-problem.md","hash":"7b4e80324e6f310fde3c5039fbff35ad158503d1","modified":1582121835561},{"_id":"source/_posts/web-quanzhan.md","hash":"7045b5623c83753bc379544047b56cc7229a11bb","modified":1585797612479},{"_id":"source/_posts/webpack-uglifyjsplugin.md","hash":"8669dff3992f2b356b762a1d7b432ce75cf87cd1","modified":1586962922852},{"_id":"source/_posts/webpack-learning-1.md","hash":"4a442d9d697d8a391d6f88104b60f7d2177bff98","modified":1585797612482},{"_id":"source/_posts/weichat-h5-compatibility.md","hash":"1a3d79926094097d6c98d96be0a0f5239db9e191","modified":1585797612482},{"_id":"source/_posts/what-is-npx.md","hash":"a8d167106dbc667d90bd00edf96b9cc6ba64d5cb","modified":1586995947544},{"_id":"source/_posts/why-0.1-plus-0.2-not-equals-0.3.md","hash":"10382f166a514b8cd14e16988fe7cb8146853d63","modified":1578024621361},{"_id":"source/categories/index.md","hash":"213bdff66bf9db012149beef7a58c0be29322a84","modified":1577442543348},{"_id":"source/about/index.md","hash":"cba2a6db134451d2fd2455a9b180e7d505f5fcde","modified":1577441744356},{"_id":"source/tags/index.md","hash":"aa97b1e3dac0a5f54012c7e9b1bc3b24e7839ab4","modified":1577442557041},{"_id":"source/uploads/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1577442569190},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1577114533915},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ef63f34bd3b6bd4d7304d48ce5e0e3e2bead385","modified":1577114533915},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"715dcf9b0429a4a4c7107d6d1d00a34e4cf9aa99","modified":1577114533918},{"_id":"source/_posts/Actions.md","hash":"d1ee52d73e433379c6f2551f3db39b406db4e4aa","modified":1577714259185},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1577114533919},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1577114533919},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1577114533920},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1577114533920},{"_id":"themes/next/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1577114533921},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1577114533921},{"_id":"themes/next/.github/config.yml","hash":"e4f4b9afe59bc508c4f7634895b33d7d460a7cb1","modified":1577114533919},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1577114533926},{"_id":"themes/next/docs/DATA-FILES.md","hash":"af95594c3cfd92bc1dfdd5368b06b97d202e765e","modified":1577114533927},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1577114533926},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1577114533927},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1577114533927},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1577114533928},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1577114533928},{"_id":"themes/next/docs/MATH.md","hash":"f520b336f16665e164d6edf075bdcc6aa17b31bc","modified":1577114533929},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"682937d48bf5d243842a76190921322e26c75247","modified":1577114533930},{"_id":"themes/next/languages/default.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1577114533937},{"_id":"themes/next/languages/en.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1577114533937},{"_id":"themes/next/languages/es.yml","hash":"3bd0977225a9b9dc3cdc856161b3a77e5993ac4a","modified":1577114533937},{"_id":"themes/next/languages/fa.yml","hash":"35468531ad0236df5b188f28bd1b4bb0c0537faf","modified":1577114533938},{"_id":"themes/next/languages/fr.yml","hash":"5fe560d14824c71ea90b2a76d0c17b2332b9d08a","modified":1577114533938},{"_id":"themes/next/languages/hu.yml","hash":"dd9e4cd2873ed9a9ae7cb89962eeff911de396b4","modified":1577114533938},{"_id":"themes/next/languages/id.yml","hash":"80c3db4c2dbbea0703f6c8f1191218f692899507","modified":1577114533939},{"_id":"themes/next/languages/it.yml","hash":"68ac5a0aa361210f51915e101c842ed1c9464889","modified":1577114533939},{"_id":"themes/next/languages/ja.yml","hash":"e61529ddf80426a5362ed07642216027615bd740","modified":1577114533939},{"_id":"themes/next/languages/ko.yml","hash":"14a162509dc71bb364335c20281d3bccbd2a51f3","modified":1577114533939},{"_id":"themes/next/languages/nl.yml","hash":"4d9b09aff03648cbbbfeb0c51a2d1214320b5ec6","modified":1577114533940},{"_id":"themes/next/languages/pt-BR.yml","hash":"024dcdeb30c93e57cd1ba4cd707f8988dcad2468","modified":1577114533940},{"_id":"themes/next/languages/pt.yml","hash":"88fb58e537a949c013a2adcdaebcbe09543c0bd2","modified":1577114533940},{"_id":"themes/next/languages/ru.yml","hash":"f7d5efd6289845f2375bbee8fe883813de745767","modified":1577114533941},{"_id":"themes/next/languages/tr.yml","hash":"e08d8d6ee9507a7c7d4450bc1c76b435470a3739","modified":1577114533941},{"_id":"themes/next/languages/uk.yml","hash":"e58393cf726401bf50a772392e23507d9e11049e","modified":1577114533941},{"_id":"themes/next/languages/vi.yml","hash":"0c0890ccffcb5cca0893de63ebad66e3ce740707","modified":1577114533942},{"_id":"themes/next/languages/zh-CN.yml","hash":"4b36a51556e87d236c6ac6ee6975de1beb95724c","modified":1577114533942},{"_id":"themes/next/languages/zh-HK.yml","hash":"6d83daf9df1811e3ae6cde5ad778c888d8027b13","modified":1577114533942},{"_id":"themes/next/languages/zh-TW.yml","hash":"5e395cb492a0b6284f8d2ffdd93f7380db31486f","modified":1577114533943},{"_id":"themes/next/layout/_layout.swig","hash":"29ee038b0d5ffdb45327598733ea968588367769","modified":1577114533944},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1577114533970},{"_id":"themes/next/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1577114533970},{"_id":"themes/next/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1577114533971},{"_id":"themes/next/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1577114533971},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1577114533971},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1577114533981},{"_id":"themes/next/languages/de.yml","hash":"285b294b1dd2ce49b0694beb4fd75ed05dc20ccb","modified":1577114533936},{"_id":"themes/next/layout/archive.swig","hash":"26526c09a4334099e2141456697696fcd1f9783f","modified":1577114533970},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"ddc1f18952151f3c90f3b9043f2c5dddda857af2","modified":1577114533916},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"5e55946ee51cf5b20f5a77510a2ea16c26e40642","modified":1577114533916},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"c9bb152643af4692af65b93c4a00690e61131c89","modified":1577114533917},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"a5c007b5aa6007cb6cd4a669cf3b59c3e6628fc1","modified":1577114533917},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"86ed18d428189bf47978eaa21deb4648f99390f3","modified":1577114533931},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1577114533931},{"_id":"themes/next/docs/ru/README.md","hash":"41b1bef32fb991410ebf559b4c45022549f95215","modified":1577114533932},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1577114533932},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1577114533933},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1577114533933},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"17d7203e85a8ce9760c42a853dee0f26a8f7ee4e","modified":1577114533934},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"69ce4e0fe171d008b10f4f3f5eb0c3957cbecc2a","modified":1577114533934},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"0b0b9ec6ec4a89e701a3b91f8d7d95752d3e241b","modified":1577114533935},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1577114533934},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"f0ffb74de522749c9f2fda46970a61bdafbfbc24","modified":1577114533935},{"_id":"themes/next/docs/zh-CN/README.md","hash":"b6a3611d40863c12804c5846994786119ce3b79f","modified":1577114533935},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"7f37327bbcae7ed7d04d187fd5e9bc6bbf14926a","modified":1577114533935},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1577114533944},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1577114533945},{"_id":"themes/next/layout/_macro/post.swig","hash":"049caf88e2cb8dde780b0c6196db984c7bc3a4cc","modified":1577114533945},{"_id":"themes/next/layout/_partials/comments.swig","hash":"0c4914a5fd08f15beec71940218c814ad9a89f3f","modified":1577114533945},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1ee6335c12773dc43f8b92136770cb10d460c25c","modified":1577114533946},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1577114533950},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1577114533954},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1577114533954},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1577114533955},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"9675acc599ffa546f05a60375c1637b0327be4fd","modified":1577114533956},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1577114533957},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1577114533958},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1577114533960},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1577114533964},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1577114533966},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1577114533966},{"_id":"themes/next/scripts/events/index.js","hash":"9047d8ae2670e43429b16a7919a08a0a0a81afe0","modified":1577114533973},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1577114533976},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1577114533977},{"_id":"themes/next/scripts/filters/locals.js","hash":"5bbfdc1c373542159660b7a68ed0b57ca18ad10b","modified":1577114533977},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1577114533977},{"_id":"themes/next/scripts/filters/post.js","hash":"5e5035372b3d94a65309334c93303c858e072012","modified":1577114533978},{"_id":"themes/next/scripts/helpers/engine.js","hash":"c8c8afde59df587f883dd9b47a3c629042bc4c6e","modified":1577114533979},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1577114533980},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1577114533980},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1577114533981},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1577114533982},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1577114533982},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1577114533983},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1577114533983},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1577114533983},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1577114533983},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1577114533984},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1577114533984},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1577114533984},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1577114534016},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1577114534016},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1577114534016},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1577114534017},{"_id":"themes/next/source/images/avatar.jpg","hash":"1f8e687244a5c866f683afeeef95a9a07ae9f0b1","modified":1577442784537},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1577114534017},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1577114534017},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1577114534018},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1577114534018},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1577114534018},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1577114534019},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1577114534019},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1577114534019},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1577114534020},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1577114534020},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1577114534020},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1577114534020},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1577114534024},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1577114534021},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1577114534021},{"_id":"themes/next/source/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1577114534022},{"_id":"themes/next/source/js/motion.js","hash":"09f8be6bcc6920546bb06e3f8c0181ec62c70b90","modified":1577114534022},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1577114534022},{"_id":"themes/next/source/js/utils.js","hash":"41fa3f7cc18e028263b6fa524a3a95fc93b1b81e","modified":1577114534024},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577114534007},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577114534007},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"1638483d2d2dad1da4c841a6fb9f6ee96b850187","modified":1577114533947},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"0172055d118d1d7f4c8379c8495c1ee1aa50c7d9","modified":1577114533947},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1577114533948},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1577114533948},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"54ba9508a901c295a02c8e34e9cece7c7dcad518","modified":1577114533949},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"bbf0c8e42491fac70f4f8165224f1d7d92a040d7","modified":1577114533949},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"e6076865dba066c5f0008e22217efb850d5af69c","modified":1577114533948},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1577114533950},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1577114533950},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1577114533951},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1577114533952},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1577114533952},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"78cb2077f50bc3b81130a516ffc04bc1fcea5834","modified":1577114533952},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1577114533953},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1577114533953},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1577114533953},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"716b78cd90addc4216413719554721cb362b0c18","modified":1577114533954},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"d5a5f45ef0b41332cad069d263df2c449e2f1e7e","modified":1577114533955},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1577114533956},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1577114533956},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1577114533957},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1577114533957},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1577114533959},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1577114533959},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1577114533959},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1577114533959},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1577114533960},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1577114533960},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1577114533961},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"d3dc3e051e6816cdd576d00cc70b18b8a4c6a495","modified":1577114533961},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1ef172bc041d6f6b6c8c642ea64496a188d79029","modified":1577114533961},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"0992d51dff4b8f4f4e69834c8cd1604593536c5d","modified":1577114533962},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1577114533963},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4d6f9e09ca4056ff6a5d4923e202126a75242183","modified":1577114533963},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1577114533964},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1577114533965},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1577114533965},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1577114533966},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1577114533967},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1577114533967},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1577114533967},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1577114533968},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1577114533968},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"0ea0bac09b0747bc16fde852164c0eaab2efe02c","modified":1577114533968},{"_id":"themes/next/scripts/events/lib/config.js","hash":"436c5597dc7dae91ed20e3f4134db94d91c84b49","modified":1577114533973},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"4a7207c6f9ab0e56ea8f59aca3ed4c2cb2fb7450","modified":1577114533969},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1577114533969},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1577114533969},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1577114533973},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1577114533974},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1577114533974},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1577114533974},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1577114533975},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"5ba0480c2dbb0626501c90c920be85ce2308103c","modified":1577114533975},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1577114533975},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1577114533976},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1577114533976},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"e24c4dd78f6e4adee0e7c15eb8bca12eb92452e4","modified":1577114533976},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1577114534007},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1577114534007},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1577114534008},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1577114534014},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1577114534014},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1577114534015},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1577114534015},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d4e817e2b238ace5d7ac568ce0c5380196a6d039","modified":1577114534015},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1577114534025},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1577114534025},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1577114534025},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1577114534025},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1577114534026},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1577114534033},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1577114534032},{"_id":"themes/next/source/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1577114534023},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"52d139e6f3bc212c8c9b71bc9e57e931920434a6","modified":1577114534023},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"e728120f6a79dc89775f7859be255ee58ed4c7a6","modified":1577443455623},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1577114533985},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1577114533985},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1577114533985},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"41c7cd1b63d49476ed5fbdd26ab9411d8f44bd05","modified":1577114533991},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1577114533991},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1577114533998},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1577114533998},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4f7879a50d4608c46cc2061c725a2564597a45bd","modified":1577114534001},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1577114534002},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1577114534002},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1577114534003},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1577114534004},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1577114534004},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"2b52b0eb4c66e06762cf115450da0ca1dd435e75","modified":1577114534004},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1577114534007},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"1693ec6b53758ac15d2c7798c789d6ae8af913ea","modified":1577114534008},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4fb385d8533877678440c8faa08b68fa793cb1a2","modified":1577114534009},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1577114534009},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1577114534009},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1577114534010},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1577114534010},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1577114534010},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1577114534011},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c6905c694c6fbbf372b53456a0d219701010a110","modified":1577114534011},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1577114534011},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1577114534011},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1577114534012},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1577114534012},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f5abb2ea7746586738fb4e82107fceed041708ee","modified":1577114534012},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"71a3d7f2242706f7a6b79933a67ef3664cca3a24","modified":1577114534013},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d7587df06b30042091316d8b1cc58ba361211492","modified":1577114534013},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1577114534013},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1577114534014},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1577114534026},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1577114534027},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1577114534027},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1577114534032},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1577114534031},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1577114533985},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1577114533986},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1577114533986},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1577114533986},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1577114533986},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1577114533987},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"98227b4de364b48b11e21efcf4f1beb2ed3ab329","modified":1577114533987},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"5d5c022aa3b2f89c2f2a178212338bb64804dd75","modified":1577114533988},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1577114533987},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1577114533988},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"bcba503e956e4b737b062faa66341bd880f16c10","modified":1577114533989},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9df5ba77e6cf36129bddc270407215c23c60ff38","modified":1577114533989},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1577114533989},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1577114533989},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1577114533990},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1577114533992},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"284249dcfa3b49c5d76210bbb0f74f65fc2f12ea","modified":1577114533991},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1577114533990},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1577114533992},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1577114533993},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2d9d68a431a334626d463bb1bdfbcd2ea8242e94","modified":1577114533993},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1577114533993},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f5821481440a0624c8aec5fc85f093de1527095f","modified":1577114533994},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1577114533995},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1577114533995},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1577114533995},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1577114533997},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1577114533996},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1577114533997},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"c27b3056d5e22d3c66d8a152a23634314d5c4a60","modified":1577114533997},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1577114533999},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1577114533998},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1577114533999},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1577114533999},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1577114533999},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"e2ad7ccf1865a45548e3f31c70fac2c65d6ef534","modified":1577114534000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"1db4ce981fe9fcb9ee4279395c29553efbb43947","modified":1577114533999},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1577114534000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"c83d750238d6ac13b65869a909465fe621c464c3","modified":1577114534000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1577114534001},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"b492a45422773ab2af06ee345d527ba4c6bbc608","modified":1577114534002},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1577114534002},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"b4923515ca8e44aa62e839ce948f759cfd1f896f","modified":1577114534003},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1577114534003},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1577114534005},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1577114534005},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1577114534005},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1577114534006},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1577114534006},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"d2f0f2171722533bba308f944a2ec727b083582c","modified":1577114534006},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"1a14c1b92d8a4dd8aabb5949333ac0ac79094c6c","modified":1577114534006},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1577114534030}],"Category":[{"name":"杂记随感","_id":"ckhc3grux0004ooa68pfecml3"},{"name":"Vue","_id":"ckhc3grva000aooa6a6ny050r"},{"name":"CSS","_id":"ckhc3grvs000gooa692al4oqp"},{"name":"Electron","_id":"ckhc3grw4000mooa69ul35u8k"},{"name":"前端技术","_id":"ckhc3grwb000sooa690yvd16z"},{"name":"前端常见知识点整理","parent":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3grye0026ooa6h2nya4pz"},{"name":"计算机通识","parent":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs1f003uooa6d81a1zmp"},{"name":"效率工具","_id":"ckhc3gs54006fooa6h7d6brd4"},{"name":"源码原理","_id":"ckhc3gs5h006mooa6b1xh7fcq"},{"name":"读书笔记","_id":"ckhc3gs5k006uooa65fwuel5z"},{"name":"海外提速","_id":"ckhc3gs5y007hooa6ct8ch125"},{"name":"前端框架","_id":"ckhc3gs69007vooa66to73nls"},{"name":"前端工程化","_id":"ckhc3gs6d008cooa6ahn516yq"},{"name":"自我提升","_id":"ckhc3gs6f008hooa6529pdrg6"},{"name":"博客技巧","_id":"ckhc3gs6y009sooa62az87z62"},{"name":"node","_id":"ckhc3gs78009xooa6352yavh8"},{"name":"移动开发","_id":"ckhc3gs7900a2ooa6c8xdgi7u"},{"name":"Nodejs","_id":"ckhc3gs7a00a6ooa6h1k9gwdy"},{"name":"前端问题","_id":"ckhc3gs7d00aeooa662rl3qef"},{"name":"大前端","_id":"ckhc3gs7h00apooa67k2yfqx5"},{"name":"源码解析","_id":"ckhc3gs7m00awooa6eoe3geq1"},{"name":"webpack","_id":"ckhc3gs7o00b2ooa6dqeyf4hx"},{"name":"Webpack","_id":"ckhc3gs7o00b4ooa618qb95kt"},{"name":"VSCode插件","parent":"ckhc3gs54006fooa6h7d6brd4","_id":"ckhc3gs7p00b7ooa6hjy661kk"},{"name":"VUE","parent":"ckhc3gs69007vooa66to73nls","_id":"ckhc3gs7q00baooa6c1a0gjh4"},{"name":"Webpack","parent":"ckhc3gs6d008cooa6ahn516yq","_id":"ckhc3gs7t00bhooa60acx5esv"},{"name":"自己动手实现系列","parent":"ckhc3gs5h006mooa6b1xh7fcq","_id":"ckhc3gs7t00blooa6dau75fpp"},{"name":"Npm","parent":"ckhc3gs7a00a6ooa6h1k9gwdy","_id":"ckhc3gs8900cnooa6b9t0c9ok"},{"name":"全栈","parent":"ckhc3gs7h00apooa67k2yfqx5","_id":"ckhc3gs8a00crooa62yk43pp3"},{"name":"React","parent":"ckhc3gs7m00awooa6eoe3geq1","_id":"ckhc3gs8a00cuooa61jvt35ix"}],"Data":[],"Page":[{"title":"分类","date":"2017-08-29T09:40:17.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-08-29 17:40:17\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-12-27T10:29:03.348Z","path":"categories/index.html","layout":"page","_id":"ckhc3groe0001ooa6f7441wu2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2019-04-15T01:00:00.000Z","_content":"# 李旭光\n> 华宇（大连）信息服务有限公司\n> 前端开发工程师 8年\n> 手机: 15641181846\n> 邮箱: lixuguang316@foxmail.com\n> github: https://github.com/lixuguang\n> 技术博客: https://lixuguang.github.io\n> 住址: 大连沙河口区黄河路852号\n## 技能掌握\n- 熟练使用Html/Css/Javascript/Jq，响应式开发，移动端Web开发\n- 熟练使用VUE/vuex/axios/vue-router/element-ui等vue全家桶完成项目/组件开发\n- 熟练进行前后端分离开发，前后端接口联调，基于git的版本管理，CICD开发等。\n- 熟练使用chrome-dev对项目进行前端代码调试/调优\n- 掌握Nodejs/Electron/React/less/sass/bootstrap等开发\n- 掌握webpack基本配置，npm包管理等前端工程化开发方式\n- 掌握前端架构方法，对前端规范性要求非常熟悉，能够根据产品/项目需求给出最优技术选型方案。\n- 熟练使用svn/git等代码版本管理工具及gitflow管理方式进行代码管理\n\n- 8年前端开发经验，参与过100+的项目开发。\n- 善于团队协作，自我驱动，持续学习，热爱工作，责任心强。\n## 工作经历\n> 华宇（大连）信息服务有限公司：主要面向政府、公检法机关及互联网市场大客户。\n> 2014.5-至今\n> 资深前端开发工程师 团队规模：30人 公司规模：600人\n> 主要职责: \n- 编写代码\n  - 完成正常项目任务\n    - 累计完成项目超过150个\n    - 参与项目类型包括pcWeb、padWeb、手机Web、微信Web、触摸屏、指挥控制大屏\n    - 业务类型涉及政府、公检法各个领域\n    - 使用技术包含HTML4/5、CSS2/3、ES5/6、bootstrap、framework7、Angular、Vue以及Artery框架等\n  - 极短时间内完成任务\n    - 竞标项目如：\n      - 5天60个页面带领一个初级前端和一个中级前端完成。\n      - 3天完成一个问卷调查包含各种交互的特效。\n      - 封闭1星期同3位开发共同完成canvas画板功能，支持检察官记录员实现档案卷宗实时编辑。\n    - 演示项目如：\n      - 1个月带领一个初级前端一个初级开发完成整个系统包含业务逻辑除后台的所有功能，实现超高保真原型。\n    - 救火任务如：\n      - 上线前2天解决其他人无法解决的问题，此类情况居多。\n      - 项目工期提前，顶着压力加班完成任务。如1天13个页面。\n  - 新技术框架研究应用\n    - 前后端分离技术\n      - 组织前端团队学习前后端分离思想，研究前后端分离所要学习的新技能知识，面向对象的思想以及面向接口的思想等。\n    - 前端自动化构建、自动检测\n      - 组织前端团队学习前端自动化构建如：npm包管理工具、各种cli工具使用、eslint、stylint等自动化检查工具，以及webpack和gulp等打包工具使用。\n    - MVVM框架等新技术\n      - 组织学习研究Angular2、Vue2等数据驱动的MVVM框架，并在实际项目中使用VUE框架。\n  - 组织构建基础服务\n    - 前端通用组件库\n    - Vue组件库\n    - 前端题库\n    - ...\n- 制定规范\n  - 前端编码规范\n    - 包括HTML规范、CSS规范、JS规范、Vue规范、通用规范等。\n  - 团队协作制度\n    - 包括代码管理制度、团队协作规范制度。\n  - 代码审查规范\n    - 人工审核\n    - 自动化检测工具审核\n  - 知识考核规范\n    - 前端知识点地图\n    - 前端技能栈思维导图\n    - 前端考试平台\n- 团队建设\n  - 面试官\n    - 从原来的2人前端团队发展至16人前端团队，4年流失率仅为3人。\n  - 组织师傅帮带\n    - 组织先进带后进，高级带初级，建立前端梯队，组织共同学习。\n  - 前端兴趣小组\n    - 每周二组织前端兴趣小组，了解当下最新的前端知识，组织分享活动。\n  - 前端培训\n    - 不定期组织学习公司将要使用的新技术以及开发过程中遇到的问题解决方案\n    - 定期组织基础知识、中级知识、高级知识、实践应用四个层面的培训。\n- 人才培养\n  - 人员考核\n    - 根据建立的知识点地图建立考点地图，建立试卷进行考评，关系到员工晋升。\n  - 建立人才档案，定期谈话\n    - 根据不同人的特点建立对应的人才档案，通过季度谈话的方式了解员工最新动态，根据员工特点设立学习方向和目标，引导员工成长。\n  - 参与人才晋升考官\n    - 参与员工晋升考核，给出努力方向。\n---\n> 大连新桥科技发展有限公司：面向教育系统提供整体服务。\n> 2013.1-2014.1\n> 用户体验团队负责人 团队规模：6人 公司规模：50人\n> 主要职责：\n- 接访客户\n  - 去客户现场或客户到工作现场，负责接待客户，了解客户需求。\n- 设计、编写代码\n  - 根据客户或领导需求完成需求分析、视觉设计、代码编写等任务。涉及pcWeb、padWeb、手机Web等。\n- 团队管理\n  - 根据任务量分配工作，协调团队资源。\n---\n> 百维数元信息科技（北京）有限公司：一斑网在线调研平台。\n> 2011.9-2012.12\n> 开发工程师 团队规模：3人 公司规模：8人\n> 主要职责：\n- 设计、前后台代码编写、运营、客服\n  - 初创公司，开发运营团队3人，主要负责设计工作、前端开发、部分后端开发、运营、客服等工作。\n## 教育经历\n> 大连外国语大学\n> 2008.9-2012.6\n> 信息系统与信息管理（日英双语强化）\n> 本科\n> 主要职务：\n  - 计算机部部长\n    - 组织计算机竞赛、考级\n  - 团支书\n    - 组织班级党员发展、思想工作。\n  - 网络协会核心成员\n    - 为在校生提供vod服务，翻译日英影音资料供大家学习。\n> 主要荣誉：\n  - 学习标兵\n  - 优秀团支书\n  - 优秀毕业生\n  - 每一季度奖学金（一、二、三等均获得过）\n## 项目经历\n- ERP系统\n  - 法院执行线索分析系统v2.1-v2.2\n  - 数据质量检查系统v2.0-v2.3\n  - 法官办案辅助系统\n  - 量刑规范化服务系统\n  - 裁判文书上网直报系统V2.0\n  - 律师阅卷管理系统\n  - ... 100+\n- CMS网站\n  - 诉讼服务网系列 50+\n  - 法院官网 20+\n  - ... 30+\n- pad、手机、触控屏系统\n  - 信息引导侦查系列产品\n  - 远程视频会见系统2.1\n  - 领导驾驶舱\n  - 移动办案APP\n  - ... 30+\n- 普通网站\n  - 企业官网、政府官网 10+\n  \n> 涉及技术包含：\n**语言：**\nHTML4/5、CSS2/3、ES5/6、JSP...\n**框架：**\nJQ、bootstarp、mui、framework7、VUE...\n**理论：**\n前后端分离(面向对象OOB + 异步请求ajax + 面向接口api)\n## 自我介绍\n从2011年算起我已经从事前端开发8年、设计2年（重叠）、团队管理4年（重叠），参与各类大小项目200+，涉及各个业务领域包括公检法政、教育、调研，覆盖目前主流的前端技术（游戏向不包含）。基础能力扎实，能够解决绝大多数普通问题和部分棘手问题，从小在军营成长让我对团队纪律与制度有着深刻的认识，知道规范与制度的重要性，这为我建立高效优质的团队提供了良好土壤。谦逊使我可以与团队中以及团队之间有着良好的沟通，好学让我不断逃出舒适区，让自己不断的学习进步。有着个人荣誉感与集体荣誉感，让我对工作和团队认真负责。抗压能力强，让领导放心把最紧急最重要的工作交给我做，加班也毫无怨言。工作久了让我总结了一些工作中常见的问题，我会讲这些分享给他人，让大家一同进步，将问题扼杀在摇篮里。愿意组织活动参加活动，喜欢阅读，跑步，骑行，篮球。","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-04-15 09:00:00\n---\n# 李旭光\n> 华宇（大连）信息服务有限公司\n> 前端开发工程师 8年\n> 手机: 15641181846\n> 邮箱: lixuguang316@foxmail.com\n> github: https://github.com/lixuguang\n> 技术博客: https://lixuguang.github.io\n> 住址: 大连沙河口区黄河路852号\n## 技能掌握\n- 熟练使用Html/Css/Javascript/Jq，响应式开发，移动端Web开发\n- 熟练使用VUE/vuex/axios/vue-router/element-ui等vue全家桶完成项目/组件开发\n- 熟练进行前后端分离开发，前后端接口联调，基于git的版本管理，CICD开发等。\n- 熟练使用chrome-dev对项目进行前端代码调试/调优\n- 掌握Nodejs/Electron/React/less/sass/bootstrap等开发\n- 掌握webpack基本配置，npm包管理等前端工程化开发方式\n- 掌握前端架构方法，对前端规范性要求非常熟悉，能够根据产品/项目需求给出最优技术选型方案。\n- 熟练使用svn/git等代码版本管理工具及gitflow管理方式进行代码管理\n\n- 8年前端开发经验，参与过100+的项目开发。\n- 善于团队协作，自我驱动，持续学习，热爱工作，责任心强。\n## 工作经历\n> 华宇（大连）信息服务有限公司：主要面向政府、公检法机关及互联网市场大客户。\n> 2014.5-至今\n> 资深前端开发工程师 团队规模：30人 公司规模：600人\n> 主要职责: \n- 编写代码\n  - 完成正常项目任务\n    - 累计完成项目超过150个\n    - 参与项目类型包括pcWeb、padWeb、手机Web、微信Web、触摸屏、指挥控制大屏\n    - 业务类型涉及政府、公检法各个领域\n    - 使用技术包含HTML4/5、CSS2/3、ES5/6、bootstrap、framework7、Angular、Vue以及Artery框架等\n  - 极短时间内完成任务\n    - 竞标项目如：\n      - 5天60个页面带领一个初级前端和一个中级前端完成。\n      - 3天完成一个问卷调查包含各种交互的特效。\n      - 封闭1星期同3位开发共同完成canvas画板功能，支持检察官记录员实现档案卷宗实时编辑。\n    - 演示项目如：\n      - 1个月带领一个初级前端一个初级开发完成整个系统包含业务逻辑除后台的所有功能，实现超高保真原型。\n    - 救火任务如：\n      - 上线前2天解决其他人无法解决的问题，此类情况居多。\n      - 项目工期提前，顶着压力加班完成任务。如1天13个页面。\n  - 新技术框架研究应用\n    - 前后端分离技术\n      - 组织前端团队学习前后端分离思想，研究前后端分离所要学习的新技能知识，面向对象的思想以及面向接口的思想等。\n    - 前端自动化构建、自动检测\n      - 组织前端团队学习前端自动化构建如：npm包管理工具、各种cli工具使用、eslint、stylint等自动化检查工具，以及webpack和gulp等打包工具使用。\n    - MVVM框架等新技术\n      - 组织学习研究Angular2、Vue2等数据驱动的MVVM框架，并在实际项目中使用VUE框架。\n  - 组织构建基础服务\n    - 前端通用组件库\n    - Vue组件库\n    - 前端题库\n    - ...\n- 制定规范\n  - 前端编码规范\n    - 包括HTML规范、CSS规范、JS规范、Vue规范、通用规范等。\n  - 团队协作制度\n    - 包括代码管理制度、团队协作规范制度。\n  - 代码审查规范\n    - 人工审核\n    - 自动化检测工具审核\n  - 知识考核规范\n    - 前端知识点地图\n    - 前端技能栈思维导图\n    - 前端考试平台\n- 团队建设\n  - 面试官\n    - 从原来的2人前端团队发展至16人前端团队，4年流失率仅为3人。\n  - 组织师傅帮带\n    - 组织先进带后进，高级带初级，建立前端梯队，组织共同学习。\n  - 前端兴趣小组\n    - 每周二组织前端兴趣小组，了解当下最新的前端知识，组织分享活动。\n  - 前端培训\n    - 不定期组织学习公司将要使用的新技术以及开发过程中遇到的问题解决方案\n    - 定期组织基础知识、中级知识、高级知识、实践应用四个层面的培训。\n- 人才培养\n  - 人员考核\n    - 根据建立的知识点地图建立考点地图，建立试卷进行考评，关系到员工晋升。\n  - 建立人才档案，定期谈话\n    - 根据不同人的特点建立对应的人才档案，通过季度谈话的方式了解员工最新动态，根据员工特点设立学习方向和目标，引导员工成长。\n  - 参与人才晋升考官\n    - 参与员工晋升考核，给出努力方向。\n---\n> 大连新桥科技发展有限公司：面向教育系统提供整体服务。\n> 2013.1-2014.1\n> 用户体验团队负责人 团队规模：6人 公司规模：50人\n> 主要职责：\n- 接访客户\n  - 去客户现场或客户到工作现场，负责接待客户，了解客户需求。\n- 设计、编写代码\n  - 根据客户或领导需求完成需求分析、视觉设计、代码编写等任务。涉及pcWeb、padWeb、手机Web等。\n- 团队管理\n  - 根据任务量分配工作，协调团队资源。\n---\n> 百维数元信息科技（北京）有限公司：一斑网在线调研平台。\n> 2011.9-2012.12\n> 开发工程师 团队规模：3人 公司规模：8人\n> 主要职责：\n- 设计、前后台代码编写、运营、客服\n  - 初创公司，开发运营团队3人，主要负责设计工作、前端开发、部分后端开发、运营、客服等工作。\n## 教育经历\n> 大连外国语大学\n> 2008.9-2012.6\n> 信息系统与信息管理（日英双语强化）\n> 本科\n> 主要职务：\n  - 计算机部部长\n    - 组织计算机竞赛、考级\n  - 团支书\n    - 组织班级党员发展、思想工作。\n  - 网络协会核心成员\n    - 为在校生提供vod服务，翻译日英影音资料供大家学习。\n> 主要荣誉：\n  - 学习标兵\n  - 优秀团支书\n  - 优秀毕业生\n  - 每一季度奖学金（一、二、三等均获得过）\n## 项目经历\n- ERP系统\n  - 法院执行线索分析系统v2.1-v2.2\n  - 数据质量检查系统v2.0-v2.3\n  - 法官办案辅助系统\n  - 量刑规范化服务系统\n  - 裁判文书上网直报系统V2.0\n  - 律师阅卷管理系统\n  - ... 100+\n- CMS网站\n  - 诉讼服务网系列 50+\n  - 法院官网 20+\n  - ... 30+\n- pad、手机、触控屏系统\n  - 信息引导侦查系列产品\n  - 远程视频会见系统2.1\n  - 领导驾驶舱\n  - 移动办案APP\n  - ... 30+\n- 普通网站\n  - 企业官网、政府官网 10+\n  \n> 涉及技术包含：\n**语言：**\nHTML4/5、CSS2/3、ES5/6、JSP...\n**框架：**\nJQ、bootstarp、mui、framework7、VUE...\n**理论：**\n前后端分离(面向对象OOB + 异步请求ajax + 面向接口api)\n## 自我介绍\n从2011年算起我已经从事前端开发8年、设计2年（重叠）、团队管理4年（重叠），参与各类大小项目200+，涉及各个业务领域包括公检法政、教育、调研，覆盖目前主流的前端技术（游戏向不包含）。基础能力扎实，能够解决绝大多数普通问题和部分棘手问题，从小在军营成长让我对团队纪律与制度有着深刻的认识，知道规范与制度的重要性，这为我建立高效优质的团队提供了良好土壤。谦逊使我可以与团队中以及团队之间有着良好的沟通，好学让我不断逃出舒适区，让自己不断的学习进步。有着个人荣誉感与集体荣誉感，让我对工作和团队认真负责。抗压能力强，让领导放心把最紧急最重要的工作交给我做，加班也毫无怨言。工作久了让我总结了一些工作中常见的问题，我会讲这些分享给他人，让大家一同进步，将问题扼杀在摇篮里。愿意组织活动参加活动，喜欢阅读，跑步，骑行，篮球。","updated":"2019-12-27T10:15:44.356Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckhc3gruw0003ooa61r9q4t4v","content":"<h1 id=\"李旭光\"><a href=\"#李旭光\" class=\"headerlink\" title=\"李旭光\"></a>李旭光</h1><blockquote>\n<p>华宇（大连）信息服务有限公司<br>前端开发工程师 8年<br>手机: 15641181846<br>邮箱: <a href=\"mailto:lixuguang316@foxmail.com\">lixuguang316@foxmail.com</a><br>github: <a href=\"https://github.com/lixuguang\" target=\"_blank\" rel=\"noopener\">https://github.com/lixuguang</a><br>技术博客: <a href=\"https://lixuguang.github.io\">https://lixuguang.github.io</a><br>住址: 大连沙河口区黄河路852号</p>\n</blockquote>\n<h2 id=\"技能掌握\"><a href=\"#技能掌握\" class=\"headerlink\" title=\"技能掌握\"></a>技能掌握</h2><ul>\n<li><p>熟练使用Html/Css/Javascript/Jq，响应式开发，移动端Web开发</p>\n</li>\n<li><p>熟练使用VUE/vuex/axios/vue-router/element-ui等vue全家桶完成项目/组件开发</p>\n</li>\n<li><p>熟练进行前后端分离开发，前后端接口联调，基于git的版本管理，CICD开发等。</p>\n</li>\n<li><p>熟练使用chrome-dev对项目进行前端代码调试/调优</p>\n</li>\n<li><p>掌握Nodejs/Electron/React/less/sass/bootstrap等开发</p>\n</li>\n<li><p>掌握webpack基本配置，npm包管理等前端工程化开发方式</p>\n</li>\n<li><p>掌握前端架构方法，对前端规范性要求非常熟悉，能够根据产品/项目需求给出最优技术选型方案。</p>\n</li>\n<li><p>熟练使用svn/git等代码版本管理工具及gitflow管理方式进行代码管理</p>\n</li>\n<li><p>8年前端开发经验，参与过100+的项目开发。</p>\n</li>\n<li><p>善于团队协作，自我驱动，持续学习，热爱工作，责任心强。</p>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><blockquote>\n<p>华宇（大连）信息服务有限公司：主要面向政府、公检法机关及互联网市场大客户。<br>2014.5-至今<br>资深前端开发工程师 团队规模：30人 公司规模：600人<br>主要职责: </p>\n</blockquote>\n</li>\n<li><p>编写代码</p>\n<ul>\n<li>完成正常项目任务<ul>\n<li>累计完成项目超过150个</li>\n<li>参与项目类型包括pcWeb、padWeb、手机Web、微信Web、触摸屏、指挥控制大屏</li>\n<li>业务类型涉及政府、公检法各个领域</li>\n<li>使用技术包含HTML4/5、CSS2/3、ES5/6、bootstrap、framework7、Angular、Vue以及Artery框架等</li>\n</ul>\n</li>\n<li>极短时间内完成任务<ul>\n<li>竞标项目如：<ul>\n<li>5天60个页面带领一个初级前端和一个中级前端完成。</li>\n<li>3天完成一个问卷调查包含各种交互的特效。</li>\n<li>封闭1星期同3位开发共同完成canvas画板功能，支持检察官记录员实现档案卷宗实时编辑。</li>\n</ul>\n</li>\n<li>演示项目如：<ul>\n<li>1个月带领一个初级前端一个初级开发完成整个系统包含业务逻辑除后台的所有功能，实现超高保真原型。</li>\n</ul>\n</li>\n<li>救火任务如：<ul>\n<li>上线前2天解决其他人无法解决的问题，此类情况居多。</li>\n<li>项目工期提前，顶着压力加班完成任务。如1天13个页面。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>新技术框架研究应用<ul>\n<li>前后端分离技术<ul>\n<li>组织前端团队学习前后端分离思想，研究前后端分离所要学习的新技能知识，面向对象的思想以及面向接口的思想等。</li>\n</ul>\n</li>\n<li>前端自动化构建、自动检测<ul>\n<li>组织前端团队学习前端自动化构建如：npm包管理工具、各种cli工具使用、eslint、stylint等自动化检查工具，以及webpack和gulp等打包工具使用。</li>\n</ul>\n</li>\n<li>MVVM框架等新技术<ul>\n<li>组织学习研究Angular2、Vue2等数据驱动的MVVM框架，并在实际项目中使用VUE框架。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>组织构建基础服务<ul>\n<li>前端通用组件库</li>\n<li>Vue组件库</li>\n<li>前端题库</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>制定规范</p>\n<ul>\n<li>前端编码规范<ul>\n<li>包括HTML规范、CSS规范、JS规范、Vue规范、通用规范等。</li>\n</ul>\n</li>\n<li>团队协作制度<ul>\n<li>包括代码管理制度、团队协作规范制度。</li>\n</ul>\n</li>\n<li>代码审查规范<ul>\n<li>人工审核</li>\n<li>自动化检测工具审核</li>\n</ul>\n</li>\n<li>知识考核规范<ul>\n<li>前端知识点地图</li>\n<li>前端技能栈思维导图</li>\n<li>前端考试平台</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>团队建设</p>\n<ul>\n<li>面试官<ul>\n<li>从原来的2人前端团队发展至16人前端团队，4年流失率仅为3人。</li>\n</ul>\n</li>\n<li>组织师傅帮带<ul>\n<li>组织先进带后进，高级带初级，建立前端梯队，组织共同学习。</li>\n</ul>\n</li>\n<li>前端兴趣小组<ul>\n<li>每周二组织前端兴趣小组，了解当下最新的前端知识，组织分享活动。</li>\n</ul>\n</li>\n<li>前端培训<ul>\n<li>不定期组织学习公司将要使用的新技术以及开发过程中遇到的问题解决方案</li>\n<li>定期组织基础知识、中级知识、高级知识、实践应用四个层面的培训。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>人才培养</p>\n<ul>\n<li>人员考核<ul>\n<li>根据建立的知识点地图建立考点地图，建立试卷进行考评，关系到员工晋升。</li>\n</ul>\n</li>\n<li>建立人才档案，定期谈话<ul>\n<li>根据不同人的特点建立对应的人才档案，通过季度谈话的方式了解员工最新动态，根据员工特点设立学习方向和目标，引导员工成长。</li>\n</ul>\n</li>\n<li>参与人才晋升考官<ul>\n<li>参与员工晋升考核，给出努力方向。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<blockquote>\n<p>大连新桥科技发展有限公司：面向教育系统提供整体服务。<br>2013.1-2014.1<br>用户体验团队负责人 团队规模：6人 公司规模：50人<br>主要职责：</p>\n</blockquote>\n<ul>\n<li>接访客户<ul>\n<li>去客户现场或客户到工作现场，负责接待客户，了解客户需求。</li>\n</ul>\n</li>\n<li>设计、编写代码<ul>\n<li>根据客户或领导需求完成需求分析、视觉设计、代码编写等任务。涉及pcWeb、padWeb、手机Web等。</li>\n</ul>\n</li>\n<li>团队管理<ul>\n<li>根据任务量分配工作，协调团队资源。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<blockquote>\n<p>百维数元信息科技（北京）有限公司：一斑网在线调研平台。<br>2011.9-2012.12<br>开发工程师 团队规模：3人 公司规模：8人<br>主要职责：</p>\n</blockquote>\n<ul>\n<li>设计、前后台代码编写、运营、客服<ul>\n<li>初创公司，开发运营团队3人，主要负责设计工作、前端开发、部分后端开发、运营、客服等工作。<h2 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h2><blockquote>\n<p>大连外国语大学<br>2008.9-2012.6<br>信息系统与信息管理（日英双语强化）<br>本科<br>主要职务：</p>\n</blockquote>\n</li>\n<li>计算机部部长<ul>\n<li>组织计算机竞赛、考级</li>\n</ul>\n</li>\n<li>团支书<ul>\n<li>组织班级党员发展、思想工作。</li>\n</ul>\n</li>\n<li>网络协会核心成员<ul>\n<li>为在校生提供vod服务，翻译日英影音资料供大家学习。<blockquote>\n<p>主要荣誉：</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>学习标兵</li>\n<li>优秀团支书</li>\n<li>优秀毕业生</li>\n<li>每一季度奖学金（一、二、三等均获得过）<h2 id=\"项目经历\"><a href=\"#项目经历\" class=\"headerlink\" title=\"项目经历\"></a>项目经历</h2></li>\n</ul>\n</li>\n<li>ERP系统<ul>\n<li>法院执行线索分析系统v2.1-v2.2</li>\n<li>数据质量检查系统v2.0-v2.3</li>\n<li>法官办案辅助系统</li>\n<li>量刑规范化服务系统</li>\n<li>裁判文书上网直报系统V2.0</li>\n<li>律师阅卷管理系统</li>\n<li>… 100+</li>\n</ul>\n</li>\n<li>CMS网站<ul>\n<li>诉讼服务网系列 50+</li>\n<li>法院官网 20+</li>\n<li>… 30+</li>\n</ul>\n</li>\n<li>pad、手机、触控屏系统<ul>\n<li>信息引导侦查系列产品</li>\n<li>远程视频会见系统2.1</li>\n<li>领导驾驶舱</li>\n<li>移动办案APP</li>\n<li>… 30+</li>\n</ul>\n</li>\n<li>普通网站<ul>\n<li>企业官网、政府官网 10+</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>涉及技术包含：<br><strong>语言：</strong><br>HTML4/5、CSS2/3、ES5/6、JSP…<br><strong>框架：</strong><br>JQ、bootstarp、mui、framework7、VUE…<br><strong>理论：</strong><br>前后端分离(面向对象OOB + 异步请求ajax + 面向接口api)</p>\n</blockquote>\n<h2 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h2><p>从2011年算起我已经从事前端开发8年、设计2年（重叠）、团队管理4年（重叠），参与各类大小项目200+，涉及各个业务领域包括公检法政、教育、调研，覆盖目前主流的前端技术（游戏向不包含）。基础能力扎实，能够解决绝大多数普通问题和部分棘手问题，从小在军营成长让我对团队纪律与制度有着深刻的认识，知道规范与制度的重要性，这为我建立高效优质的团队提供了良好土壤。谦逊使我可以与团队中以及团队之间有着良好的沟通，好学让我不断逃出舒适区，让自己不断的学习进步。有着个人荣誉感与集体荣誉感，让我对工作和团队认真负责。抗压能力强，让领导放心把最紧急最重要的工作交给我做，加班也毫无怨言。工作久了让我总结了一些工作中常见的问题，我会讲这些分享给他人，让大家一同进步，将问题扼杀在摇篮里。愿意组织活动参加活动，喜欢阅读，跑步，骑行，篮球。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"李旭光\"><a href=\"#李旭光\" class=\"headerlink\" title=\"李旭光\"></a>李旭光</h1><blockquote>\n<p>华宇（大连）信息服务有限公司<br>前端开发工程师 8年<br>手机: 15641181846<br>邮箱: <a href=\"mailto:lixuguang316@foxmail.com\">lixuguang316@foxmail.com</a><br>github: <a href=\"https://github.com/lixuguang\" target=\"_blank\" rel=\"noopener\">https://github.com/lixuguang</a><br>技术博客: <a href=\"https://lixuguang.github.io\">https://lixuguang.github.io</a><br>住址: 大连沙河口区黄河路852号</p>\n</blockquote>\n<h2 id=\"技能掌握\"><a href=\"#技能掌握\" class=\"headerlink\" title=\"技能掌握\"></a>技能掌握</h2><ul>\n<li><p>熟练使用Html/Css/Javascript/Jq，响应式开发，移动端Web开发</p>\n</li>\n<li><p>熟练使用VUE/vuex/axios/vue-router/element-ui等vue全家桶完成项目/组件开发</p>\n</li>\n<li><p>熟练进行前后端分离开发，前后端接口联调，基于git的版本管理，CICD开发等。</p>\n</li>\n<li><p>熟练使用chrome-dev对项目进行前端代码调试/调优</p>\n</li>\n<li><p>掌握Nodejs/Electron/React/less/sass/bootstrap等开发</p>\n</li>\n<li><p>掌握webpack基本配置，npm包管理等前端工程化开发方式</p>\n</li>\n<li><p>掌握前端架构方法，对前端规范性要求非常熟悉，能够根据产品/项目需求给出最优技术选型方案。</p>\n</li>\n<li><p>熟练使用svn/git等代码版本管理工具及gitflow管理方式进行代码管理</p>\n</li>\n<li><p>8年前端开发经验，参与过100+的项目开发。</p>\n</li>\n<li><p>善于团队协作，自我驱动，持续学习，热爱工作，责任心强。</p>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><blockquote>\n<p>华宇（大连）信息服务有限公司：主要面向政府、公检法机关及互联网市场大客户。<br>2014.5-至今<br>资深前端开发工程师 团队规模：30人 公司规模：600人<br>主要职责: </p>\n</blockquote>\n</li>\n<li><p>编写代码</p>\n<ul>\n<li>完成正常项目任务<ul>\n<li>累计完成项目超过150个</li>\n<li>参与项目类型包括pcWeb、padWeb、手机Web、微信Web、触摸屏、指挥控制大屏</li>\n<li>业务类型涉及政府、公检法各个领域</li>\n<li>使用技术包含HTML4/5、CSS2/3、ES5/6、bootstrap、framework7、Angular、Vue以及Artery框架等</li>\n</ul>\n</li>\n<li>极短时间内完成任务<ul>\n<li>竞标项目如：<ul>\n<li>5天60个页面带领一个初级前端和一个中级前端完成。</li>\n<li>3天完成一个问卷调查包含各种交互的特效。</li>\n<li>封闭1星期同3位开发共同完成canvas画板功能，支持检察官记录员实现档案卷宗实时编辑。</li>\n</ul>\n</li>\n<li>演示项目如：<ul>\n<li>1个月带领一个初级前端一个初级开发完成整个系统包含业务逻辑除后台的所有功能，实现超高保真原型。</li>\n</ul>\n</li>\n<li>救火任务如：<ul>\n<li>上线前2天解决其他人无法解决的问题，此类情况居多。</li>\n<li>项目工期提前，顶着压力加班完成任务。如1天13个页面。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>新技术框架研究应用<ul>\n<li>前后端分离技术<ul>\n<li>组织前端团队学习前后端分离思想，研究前后端分离所要学习的新技能知识，面向对象的思想以及面向接口的思想等。</li>\n</ul>\n</li>\n<li>前端自动化构建、自动检测<ul>\n<li>组织前端团队学习前端自动化构建如：npm包管理工具、各种cli工具使用、eslint、stylint等自动化检查工具，以及webpack和gulp等打包工具使用。</li>\n</ul>\n</li>\n<li>MVVM框架等新技术<ul>\n<li>组织学习研究Angular2、Vue2等数据驱动的MVVM框架，并在实际项目中使用VUE框架。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>组织构建基础服务<ul>\n<li>前端通用组件库</li>\n<li>Vue组件库</li>\n<li>前端题库</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>制定规范</p>\n<ul>\n<li>前端编码规范<ul>\n<li>包括HTML规范、CSS规范、JS规范、Vue规范、通用规范等。</li>\n</ul>\n</li>\n<li>团队协作制度<ul>\n<li>包括代码管理制度、团队协作规范制度。</li>\n</ul>\n</li>\n<li>代码审查规范<ul>\n<li>人工审核</li>\n<li>自动化检测工具审核</li>\n</ul>\n</li>\n<li>知识考核规范<ul>\n<li>前端知识点地图</li>\n<li>前端技能栈思维导图</li>\n<li>前端考试平台</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>团队建设</p>\n<ul>\n<li>面试官<ul>\n<li>从原来的2人前端团队发展至16人前端团队，4年流失率仅为3人。</li>\n</ul>\n</li>\n<li>组织师傅帮带<ul>\n<li>组织先进带后进，高级带初级，建立前端梯队，组织共同学习。</li>\n</ul>\n</li>\n<li>前端兴趣小组<ul>\n<li>每周二组织前端兴趣小组，了解当下最新的前端知识，组织分享活动。</li>\n</ul>\n</li>\n<li>前端培训<ul>\n<li>不定期组织学习公司将要使用的新技术以及开发过程中遇到的问题解决方案</li>\n<li>定期组织基础知识、中级知识、高级知识、实践应用四个层面的培训。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>人才培养</p>\n<ul>\n<li>人员考核<ul>\n<li>根据建立的知识点地图建立考点地图，建立试卷进行考评，关系到员工晋升。</li>\n</ul>\n</li>\n<li>建立人才档案，定期谈话<ul>\n<li>根据不同人的特点建立对应的人才档案，通过季度谈话的方式了解员工最新动态，根据员工特点设立学习方向和目标，引导员工成长。</li>\n</ul>\n</li>\n<li>参与人才晋升考官<ul>\n<li>参与员工晋升考核，给出努力方向。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<blockquote>\n<p>大连新桥科技发展有限公司：面向教育系统提供整体服务。<br>2013.1-2014.1<br>用户体验团队负责人 团队规模：6人 公司规模：50人<br>主要职责：</p>\n</blockquote>\n<ul>\n<li>接访客户<ul>\n<li>去客户现场或客户到工作现场，负责接待客户，了解客户需求。</li>\n</ul>\n</li>\n<li>设计、编写代码<ul>\n<li>根据客户或领导需求完成需求分析、视觉设计、代码编写等任务。涉及pcWeb、padWeb、手机Web等。</li>\n</ul>\n</li>\n<li>团队管理<ul>\n<li>根据任务量分配工作，协调团队资源。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<blockquote>\n<p>百维数元信息科技（北京）有限公司：一斑网在线调研平台。<br>2011.9-2012.12<br>开发工程师 团队规模：3人 公司规模：8人<br>主要职责：</p>\n</blockquote>\n<ul>\n<li>设计、前后台代码编写、运营、客服<ul>\n<li>初创公司，开发运营团队3人，主要负责设计工作、前端开发、部分后端开发、运营、客服等工作。<h2 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h2><blockquote>\n<p>大连外国语大学<br>2008.9-2012.6<br>信息系统与信息管理（日英双语强化）<br>本科<br>主要职务：</p>\n</blockquote>\n</li>\n<li>计算机部部长<ul>\n<li>组织计算机竞赛、考级</li>\n</ul>\n</li>\n<li>团支书<ul>\n<li>组织班级党员发展、思想工作。</li>\n</ul>\n</li>\n<li>网络协会核心成员<ul>\n<li>为在校生提供vod服务，翻译日英影音资料供大家学习。<blockquote>\n<p>主要荣誉：</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>学习标兵</li>\n<li>优秀团支书</li>\n<li>优秀毕业生</li>\n<li>每一季度奖学金（一、二、三等均获得过）<h2 id=\"项目经历\"><a href=\"#项目经历\" class=\"headerlink\" title=\"项目经历\"></a>项目经历</h2></li>\n</ul>\n</li>\n<li>ERP系统<ul>\n<li>法院执行线索分析系统v2.1-v2.2</li>\n<li>数据质量检查系统v2.0-v2.3</li>\n<li>法官办案辅助系统</li>\n<li>量刑规范化服务系统</li>\n<li>裁判文书上网直报系统V2.0</li>\n<li>律师阅卷管理系统</li>\n<li>… 100+</li>\n</ul>\n</li>\n<li>CMS网站<ul>\n<li>诉讼服务网系列 50+</li>\n<li>法院官网 20+</li>\n<li>… 30+</li>\n</ul>\n</li>\n<li>pad、手机、触控屏系统<ul>\n<li>信息引导侦查系列产品</li>\n<li>远程视频会见系统2.1</li>\n<li>领导驾驶舱</li>\n<li>移动办案APP</li>\n<li>… 30+</li>\n</ul>\n</li>\n<li>普通网站<ul>\n<li>企业官网、政府官网 10+</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>涉及技术包含：<br><strong>语言：</strong><br>HTML4/5、CSS2/3、ES5/6、JSP…<br><strong>框架：</strong><br>JQ、bootstarp、mui、framework7、VUE…<br><strong>理论：</strong><br>前后端分离(面向对象OOB + 异步请求ajax + 面向接口api)</p>\n</blockquote>\n<h2 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h2><p>从2011年算起我已经从事前端开发8年、设计2年（重叠）、团队管理4年（重叠），参与各类大小项目200+，涉及各个业务领域包括公检法政、教育、调研，覆盖目前主流的前端技术（游戏向不包含）。基础能力扎实，能够解决绝大多数普通问题和部分棘手问题，从小在军营成长让我对团队纪律与制度有着深刻的认识，知道规范与制度的重要性，这为我建立高效优质的团队提供了良好土壤。谦逊使我可以与团队中以及团队之间有着良好的沟通，好学让我不断逃出舒适区，让自己不断的学习进步。有着个人荣誉感与集体荣誉感，让我对工作和团队认真负责。抗压能力强，让领导放心把最紧急最重要的工作交给我做，加班也毫无怨言。工作久了让我总结了一些工作中常见的问题，我会讲这些分享给他人，让大家一同进步，将问题扼杀在摇篮里。愿意组织活动参加活动，喜欢阅读，跑步，骑行，篮球。</p>\n"},{"title":"标签","date":"2017-08-29T09:59:00.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-08-29 17:59:00\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-12-27T10:29:17.041Z","path":"tags/index.html","layout":"page","_id":"ckhc3grv40006ooa6f42a9rul","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2020年21天主题挑战之灵感篇-Day 1-写下自己期待中的生平","date":"2020-01-02T04:24:49.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n还记得我19年总结最下面的那张照片么，那个同事送的的本子，对，就是下面这张图，这本子叫做《One In A Million》中文叫做极少数手册，是一个管理时间用的管理手册，英文如果直译的话应该是叫做万里挑一，实话说我并不是很自信，虽然我觉得自己还算可以，但远远达不到万里挑一的程度，所以，我打算好好利用这个本子，让自己尽可能成为百里挑一，千里挑一，最后万里挑一的人。\n\n本子里有一个栏目叫做21天主题挑战，21-Day Challenge，每个月21天都会给你列出一些主题，越往后列出来的主题越少，更多的需要个人去补充，我想去挑战这些内容，让自己的生活变得有目标，让自己变得更好。\n<!-- more -->\n\n# 1月份21天主题挑战之灵感Inspiration\n> 设定一个挑战主题，让自己更富有创造力，连续21天挑战，让灵感乍现，唤醒天赋。\n\n# 第一天 Day 1 写下自己期待中的生平\n看到这个题目之后，我闭上了眼睛，努力的回想我自己曾经的梦想是什么，什么时候丢掉了梦想，儿时的梦想，上学时的梦想，长大以后的梦想，现在的梦想，我努力回想了好久好久，儿时的梦想我想起来了，上学时的梦想我想起来了，长大后的梦想我也想起来了，但是我没能一下子找到我现在的梦想，也许现在说梦想有些奢侈，也许也有点贴不上今天的主题期待中的人生，我不太会写文章，但是想到哪里写哪里吧，我先写下我之前的那些个梦想。\n\n## 小时候的梦想-成为科学家\n小时候的梦想说出来很简单，但是是那么真诚，真诚就容易打动人，说实话我记性不是太好，已经忘掉了小时候的梦想，所以我问了我妈，我妈笑话我，说我咋不记得小时候那伟大的梦想了，妈妈说我儿时的梦想是当科学家，那会应该是上小学吧，妈妈说学校老师让写作文，标题就是我的梦想，我的作文里写的是成为科学家，这个科学家不像是别人写的，比如造火箭，造大炮又或者是造卫星造原子弹，我的梦想现在说起来与其说是科学家，不如说是药剂师更贴切，妈妈笑着跟我说我当时的梦想是做一个科学家，要研究出来一种长生不老的药，然后让爸爸妈妈吃下以后就可以永远健康年轻，妈妈说那个时候她总逗我，看到路上漂亮的阿姨就会问我，那个阿姨漂亮么，起初我会说漂亮，然后妈妈就会说那让她给你当妈妈好不好，我呢会说不好，妈妈说后来她再问的时候，我就再也不会说我要漂亮阿姨当妈妈的话了，我现在想想也许就是那时，就是因为发现妈妈越来越胖，辛苦操劳后年轻也渐渐不在我才有了这个想法吧，说实话上小学期间我一直认为自己长大能够成为一个科学家，能够造出那长生不老的药让爸妈吃下，这样我就再也不会需要一个漂亮阿姨当妈妈了。我那时希望快快长大，长大了以后我就能做科学家了。\n\n上了初中高中以后，也许是进了大城市，也许是长大了，我知道了原来的梦想可能有些遥远，学业的压力让我有些透不过气，从海岛到城市，落后了3年的时间，我通过补习班慢慢追赶，终于能够追到了班级还算靠前的位置，那个时候我的梦想很小，也很简单，那就是考个好大学找个好工作，让爸爸妈妈早点不用那么操劳，早点享福。\n\n## 18岁的梦想 --- 找个好工作，让爸妈早点享福\n努力的学习，懵懂的感情，初中4年+高中3年的生活，最终我并没能特别出色的考上985/211大学，而是上了离家只有1小时车程的大外，学了计算机加日语英语，学费不便宜，每年16000，说实话没自己工作的时候不知道这16000对于一个下岗自己在家开小卖店的父母是多大的负担，工作后我才终于知道这笔钱有多少。好在原来在爸爸单位的时候接触电脑还算比较早，而我对这个新鲜玩意也算是感兴趣，大学学业上并没给我带来太大的压力，但是我也确实不是个聪明的孩子，日语仅仅过了N2，而英语则一直只是CET-4，现在回想起来，原来应该多努努力，也许现在的生活就会更好了，多想回到过去跟自己说，你要努力啊！一晃4年的大学生活就结束了，这时我终于离开了父母身边，只身去往了大城市北京，开启了我的工作生涯。\n\n## 20岁的人生 --- 多挣钱，快速成长\n工作了以后，我就像海绵一样不断的吸收着周围的水分，学习工作中需要的技能，学习如何才能让领导器重，学习如何才能快速积累人生的财富，因为我想着，想着能快快独立反哺我的爸妈。20岁，我跟媳妇儿谈了场异地的恋爱，后来她到北京找我，再后来我们就一起回了大连。北京是个大城市，大的有时候让人迷茫，虽然工作机会比较多，但是租房的压力，环境的恶劣，家里的呼唤，最终让我选择了回到我熟悉的城市，另外找了份工资不高的工作，我不满足，我想能成为顶天立地的男子汉，后来我就来到了现在的公司华宇，而且一待就是5年。\n\n## 华宇的职业生涯 --- 5年工作，9年经验\n网上有个段子我记得，一个人面试拿出简历，工作时间是2年却写着3年工作经验，面试官问他是不是写错了，他答不是，因为加班加出来的。这算是对前公司的吐槽吧。\n\n来到大连华宇时，公司还不足120人，我所在的团队还是个交互组，只有三个人，前端的话只有我和另外一个刚毕业的大学生，记得刚来公司的第一年，我参与了140个项目的开发工作，现在想想这个数字有些惊人，但是因为只是些前端切图仔的工作，对我来说感觉难度并不大，不过还是要感谢刚开始这2年，让我的基础非常扎实，再后来公司引入了前后端分离，引入了Vue框架，越来越多的业务要写，数据处理要写，加班成了家常便饭，后面这三年，我几乎没有休过除了元旦和春节的任何法定节假日，每年5天的年假也几乎都没休成，说实话每次加班加到要崩溃时候，我都会想我到底为了啥这么拼命。要不我还是换一家比较轻松一点的工作吧，工资还能涨点。说实话这段时间工作就是生活的全部，每天到家都10点以后，到家老人孩子都睡了，有时候我都睡不着，想着我的生活难道就这样了么，我不甘心，不服输。很多人劝我别那么拼命，别把公司当成自己家的，只是个打工的而已，但是有时候想着下面还有那么多新人信任着我依赖着我，我就没法撒手不管。终于时间到了19年年底，5年来培养的前端团队最后还是没守护住，要拆到各项目团队了，一开始真的难以接受，不过公司领导层已经决定了，作为一线员工只能服从，我希望大家能够把心中的担忧都能消除掉，在新的团队里开启新的篇章，也许会有更好的发展，如果有一天离开了华宇，也要江湖相望，常聚聚。\n\n## 2020年31岁踏上新的旅途\n还是感谢小可爱的这个本子，让我能够有主题想想我未来到底想要什么样的生活，说句实在话，我向往不为钱发愁工作的日子，可以在做好自己工作之外的时间里多陪陪家人，带着孩子常出去走走，见见外面的世界，说实话已经31岁了，除了谈恋爱时去找媳妇儿去过江浙苏杭，工作原因去过北京/青海，好像这些年也就去了趟南京，现在的我已经有些不知道什么叫做生活了，我希望自己的空闲时间是可以让兴趣填满的，可以和朋友同事同学多聚聚，但是怕打扰大家我又从来不会主动去约别人，小时候没有听从爸妈的话培养自己的兴趣，现在有些后悔，真的空闲下来都不知道该用什么填满这时间，都是躺在床上刷手机，看电视，我不喜欢这样的生活，但是我不知道该过怎么样的生活。看到那些会做饭的视频，做顿丰盛的饭菜给家人吃，看到他们的幸福笑脸，我想做那样的事；看到带着家人过着一路向前增长见闻的旅途生活，我想也尝试一下那样的人生，我感觉为了钱我被束缚在了工作上，2020年我想过一种不为工作所累，不为钱所累，能够享受生活，陪伴家人的生活，保重身体，每天快快乐乐的，多发现生活中的美好，感恩，努力，成长。期待自己成为更好的人。\n\n# 写在最后\n我所期待中的生平，成为一个不被工作强迫，不被金钱所累，爱家顾家，孝敬父母，人缘好朋友多，兴趣广泛，感恩的人。","source":"_posts/21-Day-Challenge-01.md","raw":"---\ntitle: 2020年21天主题挑战之灵感篇-Day 1-写下自己期待中的生平\ndate: 2020-01-02 12:24:49\ncategories: \n\t- 杂记随感\n---\n> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n还记得我19年总结最下面的那张照片么，那个同事送的的本子，对，就是下面这张图，这本子叫做《One In A Million》中文叫做极少数手册，是一个管理时间用的管理手册，英文如果直译的话应该是叫做万里挑一，实话说我并不是很自信，虽然我觉得自己还算可以，但远远达不到万里挑一的程度，所以，我打算好好利用这个本子，让自己尽可能成为百里挑一，千里挑一，最后万里挑一的人。\n\n本子里有一个栏目叫做21天主题挑战，21-Day Challenge，每个月21天都会给你列出一些主题，越往后列出来的主题越少，更多的需要个人去补充，我想去挑战这些内容，让自己的生活变得有目标，让自己变得更好。\n<!-- more -->\n\n# 1月份21天主题挑战之灵感Inspiration\n> 设定一个挑战主题，让自己更富有创造力，连续21天挑战，让灵感乍现，唤醒天赋。\n\n# 第一天 Day 1 写下自己期待中的生平\n看到这个题目之后，我闭上了眼睛，努力的回想我自己曾经的梦想是什么，什么时候丢掉了梦想，儿时的梦想，上学时的梦想，长大以后的梦想，现在的梦想，我努力回想了好久好久，儿时的梦想我想起来了，上学时的梦想我想起来了，长大后的梦想我也想起来了，但是我没能一下子找到我现在的梦想，也许现在说梦想有些奢侈，也许也有点贴不上今天的主题期待中的人生，我不太会写文章，但是想到哪里写哪里吧，我先写下我之前的那些个梦想。\n\n## 小时候的梦想-成为科学家\n小时候的梦想说出来很简单，但是是那么真诚，真诚就容易打动人，说实话我记性不是太好，已经忘掉了小时候的梦想，所以我问了我妈，我妈笑话我，说我咋不记得小时候那伟大的梦想了，妈妈说我儿时的梦想是当科学家，那会应该是上小学吧，妈妈说学校老师让写作文，标题就是我的梦想，我的作文里写的是成为科学家，这个科学家不像是别人写的，比如造火箭，造大炮又或者是造卫星造原子弹，我的梦想现在说起来与其说是科学家，不如说是药剂师更贴切，妈妈笑着跟我说我当时的梦想是做一个科学家，要研究出来一种长生不老的药，然后让爸爸妈妈吃下以后就可以永远健康年轻，妈妈说那个时候她总逗我，看到路上漂亮的阿姨就会问我，那个阿姨漂亮么，起初我会说漂亮，然后妈妈就会说那让她给你当妈妈好不好，我呢会说不好，妈妈说后来她再问的时候，我就再也不会说我要漂亮阿姨当妈妈的话了，我现在想想也许就是那时，就是因为发现妈妈越来越胖，辛苦操劳后年轻也渐渐不在我才有了这个想法吧，说实话上小学期间我一直认为自己长大能够成为一个科学家，能够造出那长生不老的药让爸妈吃下，这样我就再也不会需要一个漂亮阿姨当妈妈了。我那时希望快快长大，长大了以后我就能做科学家了。\n\n上了初中高中以后，也许是进了大城市，也许是长大了，我知道了原来的梦想可能有些遥远，学业的压力让我有些透不过气，从海岛到城市，落后了3年的时间，我通过补习班慢慢追赶，终于能够追到了班级还算靠前的位置，那个时候我的梦想很小，也很简单，那就是考个好大学找个好工作，让爸爸妈妈早点不用那么操劳，早点享福。\n\n## 18岁的梦想 --- 找个好工作，让爸妈早点享福\n努力的学习，懵懂的感情，初中4年+高中3年的生活，最终我并没能特别出色的考上985/211大学，而是上了离家只有1小时车程的大外，学了计算机加日语英语，学费不便宜，每年16000，说实话没自己工作的时候不知道这16000对于一个下岗自己在家开小卖店的父母是多大的负担，工作后我才终于知道这笔钱有多少。好在原来在爸爸单位的时候接触电脑还算比较早，而我对这个新鲜玩意也算是感兴趣，大学学业上并没给我带来太大的压力，但是我也确实不是个聪明的孩子，日语仅仅过了N2，而英语则一直只是CET-4，现在回想起来，原来应该多努努力，也许现在的生活就会更好了，多想回到过去跟自己说，你要努力啊！一晃4年的大学生活就结束了，这时我终于离开了父母身边，只身去往了大城市北京，开启了我的工作生涯。\n\n## 20岁的人生 --- 多挣钱，快速成长\n工作了以后，我就像海绵一样不断的吸收着周围的水分，学习工作中需要的技能，学习如何才能让领导器重，学习如何才能快速积累人生的财富，因为我想着，想着能快快独立反哺我的爸妈。20岁，我跟媳妇儿谈了场异地的恋爱，后来她到北京找我，再后来我们就一起回了大连。北京是个大城市，大的有时候让人迷茫，虽然工作机会比较多，但是租房的压力，环境的恶劣，家里的呼唤，最终让我选择了回到我熟悉的城市，另外找了份工资不高的工作，我不满足，我想能成为顶天立地的男子汉，后来我就来到了现在的公司华宇，而且一待就是5年。\n\n## 华宇的职业生涯 --- 5年工作，9年经验\n网上有个段子我记得，一个人面试拿出简历，工作时间是2年却写着3年工作经验，面试官问他是不是写错了，他答不是，因为加班加出来的。这算是对前公司的吐槽吧。\n\n来到大连华宇时，公司还不足120人，我所在的团队还是个交互组，只有三个人，前端的话只有我和另外一个刚毕业的大学生，记得刚来公司的第一年，我参与了140个项目的开发工作，现在想想这个数字有些惊人，但是因为只是些前端切图仔的工作，对我来说感觉难度并不大，不过还是要感谢刚开始这2年，让我的基础非常扎实，再后来公司引入了前后端分离，引入了Vue框架，越来越多的业务要写，数据处理要写，加班成了家常便饭，后面这三年，我几乎没有休过除了元旦和春节的任何法定节假日，每年5天的年假也几乎都没休成，说实话每次加班加到要崩溃时候，我都会想我到底为了啥这么拼命。要不我还是换一家比较轻松一点的工作吧，工资还能涨点。说实话这段时间工作就是生活的全部，每天到家都10点以后，到家老人孩子都睡了，有时候我都睡不着，想着我的生活难道就这样了么，我不甘心，不服输。很多人劝我别那么拼命，别把公司当成自己家的，只是个打工的而已，但是有时候想着下面还有那么多新人信任着我依赖着我，我就没法撒手不管。终于时间到了19年年底，5年来培养的前端团队最后还是没守护住，要拆到各项目团队了，一开始真的难以接受，不过公司领导层已经决定了，作为一线员工只能服从，我希望大家能够把心中的担忧都能消除掉，在新的团队里开启新的篇章，也许会有更好的发展，如果有一天离开了华宇，也要江湖相望，常聚聚。\n\n## 2020年31岁踏上新的旅途\n还是感谢小可爱的这个本子，让我能够有主题想想我未来到底想要什么样的生活，说句实在话，我向往不为钱发愁工作的日子，可以在做好自己工作之外的时间里多陪陪家人，带着孩子常出去走走，见见外面的世界，说实话已经31岁了，除了谈恋爱时去找媳妇儿去过江浙苏杭，工作原因去过北京/青海，好像这些年也就去了趟南京，现在的我已经有些不知道什么叫做生活了，我希望自己的空闲时间是可以让兴趣填满的，可以和朋友同事同学多聚聚，但是怕打扰大家我又从来不会主动去约别人，小时候没有听从爸妈的话培养自己的兴趣，现在有些后悔，真的空闲下来都不知道该用什么填满这时间，都是躺在床上刷手机，看电视，我不喜欢这样的生活，但是我不知道该过怎么样的生活。看到那些会做饭的视频，做顿丰盛的饭菜给家人吃，看到他们的幸福笑脸，我想做那样的事；看到带着家人过着一路向前增长见闻的旅途生活，我想也尝试一下那样的人生，我感觉为了钱我被束缚在了工作上，2020年我想过一种不为工作所累，不为钱所累，能够享受生活，陪伴家人的生活，保重身体，每天快快乐乐的，多发现生活中的美好，感恩，努力，成长。期待自己成为更好的人。\n\n# 写在最后\n我所期待中的生平，成为一个不被工作强迫，不被金钱所累，爱家顾家，孝敬父母，人缘好朋友多，兴趣广泛，感恩的人。","slug":"21-Day-Challenge-01","published":1,"updated":"2020-04-02T03:20:12.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gro70000ooa618gf2x94","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>还记得我19年总结最下面的那张照片么，那个同事送的的本子，对，就是下面这张图，这本子叫做《One In A Million》中文叫做极少数手册，是一个管理时间用的管理手册，英文如果直译的话应该是叫做万里挑一，实话说我并不是很自信，虽然我觉得自己还算可以，但远远达不到万里挑一的程度，所以，我打算好好利用这个本子，让自己尽可能成为百里挑一，千里挑一，最后万里挑一的人。</p>\n<p>本子里有一个栏目叫做21天主题挑战，21-Day Challenge，每个月21天都会给你列出一些主题，越往后列出来的主题越少，更多的需要个人去补充，我想去挑战这些内容，让自己的生活变得有目标，让自己变得更好。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"1月份21天主题挑战之灵感Inspiration\"><a href=\"#1月份21天主题挑战之灵感Inspiration\" class=\"headerlink\" title=\"1月份21天主题挑战之灵感Inspiration\"></a>1月份21天主题挑战之灵感Inspiration</h1><blockquote>\n<p>设定一个挑战主题，让自己更富有创造力，连续21天挑战，让灵感乍现，唤醒天赋。</p>\n</blockquote>\n<h1 id=\"第一天-Day-1-写下自己期待中的生平\"><a href=\"#第一天-Day-1-写下自己期待中的生平\" class=\"headerlink\" title=\"第一天 Day 1 写下自己期待中的生平\"></a>第一天 Day 1 写下自己期待中的生平</h1><p>看到这个题目之后，我闭上了眼睛，努力的回想我自己曾经的梦想是什么，什么时候丢掉了梦想，儿时的梦想，上学时的梦想，长大以后的梦想，现在的梦想，我努力回想了好久好久，儿时的梦想我想起来了，上学时的梦想我想起来了，长大后的梦想我也想起来了，但是我没能一下子找到我现在的梦想，也许现在说梦想有些奢侈，也许也有点贴不上今天的主题期待中的人生，我不太会写文章，但是想到哪里写哪里吧，我先写下我之前的那些个梦想。</p>\n<h2 id=\"小时候的梦想-成为科学家\"><a href=\"#小时候的梦想-成为科学家\" class=\"headerlink\" title=\"小时候的梦想-成为科学家\"></a>小时候的梦想-成为科学家</h2><p>小时候的梦想说出来很简单，但是是那么真诚，真诚就容易打动人，说实话我记性不是太好，已经忘掉了小时候的梦想，所以我问了我妈，我妈笑话我，说我咋不记得小时候那伟大的梦想了，妈妈说我儿时的梦想是当科学家，那会应该是上小学吧，妈妈说学校老师让写作文，标题就是我的梦想，我的作文里写的是成为科学家，这个科学家不像是别人写的，比如造火箭，造大炮又或者是造卫星造原子弹，我的梦想现在说起来与其说是科学家，不如说是药剂师更贴切，妈妈笑着跟我说我当时的梦想是做一个科学家，要研究出来一种长生不老的药，然后让爸爸妈妈吃下以后就可以永远健康年轻，妈妈说那个时候她总逗我，看到路上漂亮的阿姨就会问我，那个阿姨漂亮么，起初我会说漂亮，然后妈妈就会说那让她给你当妈妈好不好，我呢会说不好，妈妈说后来她再问的时候，我就再也不会说我要漂亮阿姨当妈妈的话了，我现在想想也许就是那时，就是因为发现妈妈越来越胖，辛苦操劳后年轻也渐渐不在我才有了这个想法吧，说实话上小学期间我一直认为自己长大能够成为一个科学家，能够造出那长生不老的药让爸妈吃下，这样我就再也不会需要一个漂亮阿姨当妈妈了。我那时希望快快长大，长大了以后我就能做科学家了。</p>\n<p>上了初中高中以后，也许是进了大城市，也许是长大了，我知道了原来的梦想可能有些遥远，学业的压力让我有些透不过气，从海岛到城市，落后了3年的时间，我通过补习班慢慢追赶，终于能够追到了班级还算靠前的位置，那个时候我的梦想很小，也很简单，那就是考个好大学找个好工作，让爸爸妈妈早点不用那么操劳，早点享福。</p>\n<h2 id=\"18岁的梦想-—-找个好工作，让爸妈早点享福\"><a href=\"#18岁的梦想-—-找个好工作，让爸妈早点享福\" class=\"headerlink\" title=\"18岁的梦想 — 找个好工作，让爸妈早点享福\"></a>18岁的梦想 — 找个好工作，让爸妈早点享福</h2><p>努力的学习，懵懂的感情，初中4年+高中3年的生活，最终我并没能特别出色的考上985/211大学，而是上了离家只有1小时车程的大外，学了计算机加日语英语，学费不便宜，每年16000，说实话没自己工作的时候不知道这16000对于一个下岗自己在家开小卖店的父母是多大的负担，工作后我才终于知道这笔钱有多少。好在原来在爸爸单位的时候接触电脑还算比较早，而我对这个新鲜玩意也算是感兴趣，大学学业上并没给我带来太大的压力，但是我也确实不是个聪明的孩子，日语仅仅过了N2，而英语则一直只是CET-4，现在回想起来，原来应该多努努力，也许现在的生活就会更好了，多想回到过去跟自己说，你要努力啊！一晃4年的大学生活就结束了，这时我终于离开了父母身边，只身去往了大城市北京，开启了我的工作生涯。</p>\n<h2 id=\"20岁的人生-—-多挣钱，快速成长\"><a href=\"#20岁的人生-—-多挣钱，快速成长\" class=\"headerlink\" title=\"20岁的人生 — 多挣钱，快速成长\"></a>20岁的人生 — 多挣钱，快速成长</h2><p>工作了以后，我就像海绵一样不断的吸收着周围的水分，学习工作中需要的技能，学习如何才能让领导器重，学习如何才能快速积累人生的财富，因为我想着，想着能快快独立反哺我的爸妈。20岁，我跟媳妇儿谈了场异地的恋爱，后来她到北京找我，再后来我们就一起回了大连。北京是个大城市，大的有时候让人迷茫，虽然工作机会比较多，但是租房的压力，环境的恶劣，家里的呼唤，最终让我选择了回到我熟悉的城市，另外找了份工资不高的工作，我不满足，我想能成为顶天立地的男子汉，后来我就来到了现在的公司华宇，而且一待就是5年。</p>\n<h2 id=\"华宇的职业生涯-—-5年工作，9年经验\"><a href=\"#华宇的职业生涯-—-5年工作，9年经验\" class=\"headerlink\" title=\"华宇的职业生涯 — 5年工作，9年经验\"></a>华宇的职业生涯 — 5年工作，9年经验</h2><p>网上有个段子我记得，一个人面试拿出简历，工作时间是2年却写着3年工作经验，面试官问他是不是写错了，他答不是，因为加班加出来的。这算是对前公司的吐槽吧。</p>\n<p>来到大连华宇时，公司还不足120人，我所在的团队还是个交互组，只有三个人，前端的话只有我和另外一个刚毕业的大学生，记得刚来公司的第一年，我参与了140个项目的开发工作，现在想想这个数字有些惊人，但是因为只是些前端切图仔的工作，对我来说感觉难度并不大，不过还是要感谢刚开始这2年，让我的基础非常扎实，再后来公司引入了前后端分离，引入了Vue框架，越来越多的业务要写，数据处理要写，加班成了家常便饭，后面这三年，我几乎没有休过除了元旦和春节的任何法定节假日，每年5天的年假也几乎都没休成，说实话每次加班加到要崩溃时候，我都会想我到底为了啥这么拼命。要不我还是换一家比较轻松一点的工作吧，工资还能涨点。说实话这段时间工作就是生活的全部，每天到家都10点以后，到家老人孩子都睡了，有时候我都睡不着，想着我的生活难道就这样了么，我不甘心，不服输。很多人劝我别那么拼命，别把公司当成自己家的，只是个打工的而已，但是有时候想着下面还有那么多新人信任着我依赖着我，我就没法撒手不管。终于时间到了19年年底，5年来培养的前端团队最后还是没守护住，要拆到各项目团队了，一开始真的难以接受，不过公司领导层已经决定了，作为一线员工只能服从，我希望大家能够把心中的担忧都能消除掉，在新的团队里开启新的篇章，也许会有更好的发展，如果有一天离开了华宇，也要江湖相望，常聚聚。</p>\n<h2 id=\"2020年31岁踏上新的旅途\"><a href=\"#2020年31岁踏上新的旅途\" class=\"headerlink\" title=\"2020年31岁踏上新的旅途\"></a>2020年31岁踏上新的旅途</h2><p>还是感谢小可爱的这个本子，让我能够有主题想想我未来到底想要什么样的生活，说句实在话，我向往不为钱发愁工作的日子，可以在做好自己工作之外的时间里多陪陪家人，带着孩子常出去走走，见见外面的世界，说实话已经31岁了，除了谈恋爱时去找媳妇儿去过江浙苏杭，工作原因去过北京/青海，好像这些年也就去了趟南京，现在的我已经有些不知道什么叫做生活了，我希望自己的空闲时间是可以让兴趣填满的，可以和朋友同事同学多聚聚，但是怕打扰大家我又从来不会主动去约别人，小时候没有听从爸妈的话培养自己的兴趣，现在有些后悔，真的空闲下来都不知道该用什么填满这时间，都是躺在床上刷手机，看电视，我不喜欢这样的生活，但是我不知道该过怎么样的生活。看到那些会做饭的视频，做顿丰盛的饭菜给家人吃，看到他们的幸福笑脸，我想做那样的事；看到带着家人过着一路向前增长见闻的旅途生活，我想也尝试一下那样的人生，我感觉为了钱我被束缚在了工作上，2020年我想过一种不为工作所累，不为钱所累，能够享受生活，陪伴家人的生活，保重身体，每天快快乐乐的，多发现生活中的美好，感恩，努力，成长。期待自己成为更好的人。</p>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>我所期待中的生平，成为一个不被工作强迫，不被金钱所累，爱家顾家，孝敬父母，人缘好朋友多，兴趣广泛，感恩的人。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>还记得我19年总结最下面的那张照片么，那个同事送的的本子，对，就是下面这张图，这本子叫做《One In A Million》中文叫做极少数手册，是一个管理时间用的管理手册，英文如果直译的话应该是叫做万里挑一，实话说我并不是很自信，虽然我觉得自己还算可以，但远远达不到万里挑一的程度，所以，我打算好好利用这个本子，让自己尽可能成为百里挑一，千里挑一，最后万里挑一的人。</p>\n<p>本子里有一个栏目叫做21天主题挑战，21-Day Challenge，每个月21天都会给你列出一些主题，越往后列出来的主题越少，更多的需要个人去补充，我想去挑战这些内容，让自己的生活变得有目标，让自己变得更好。</p>","more":"<h1 id=\"1月份21天主题挑战之灵感Inspiration\"><a href=\"#1月份21天主题挑战之灵感Inspiration\" class=\"headerlink\" title=\"1月份21天主题挑战之灵感Inspiration\"></a>1月份21天主题挑战之灵感Inspiration</h1><blockquote>\n<p>设定一个挑战主题，让自己更富有创造力，连续21天挑战，让灵感乍现，唤醒天赋。</p>\n</blockquote>\n<h1 id=\"第一天-Day-1-写下自己期待中的生平\"><a href=\"#第一天-Day-1-写下自己期待中的生平\" class=\"headerlink\" title=\"第一天 Day 1 写下自己期待中的生平\"></a>第一天 Day 1 写下自己期待中的生平</h1><p>看到这个题目之后，我闭上了眼睛，努力的回想我自己曾经的梦想是什么，什么时候丢掉了梦想，儿时的梦想，上学时的梦想，长大以后的梦想，现在的梦想，我努力回想了好久好久，儿时的梦想我想起来了，上学时的梦想我想起来了，长大后的梦想我也想起来了，但是我没能一下子找到我现在的梦想，也许现在说梦想有些奢侈，也许也有点贴不上今天的主题期待中的人生，我不太会写文章，但是想到哪里写哪里吧，我先写下我之前的那些个梦想。</p>\n<h2 id=\"小时候的梦想-成为科学家\"><a href=\"#小时候的梦想-成为科学家\" class=\"headerlink\" title=\"小时候的梦想-成为科学家\"></a>小时候的梦想-成为科学家</h2><p>小时候的梦想说出来很简单，但是是那么真诚，真诚就容易打动人，说实话我记性不是太好，已经忘掉了小时候的梦想，所以我问了我妈，我妈笑话我，说我咋不记得小时候那伟大的梦想了，妈妈说我儿时的梦想是当科学家，那会应该是上小学吧，妈妈说学校老师让写作文，标题就是我的梦想，我的作文里写的是成为科学家，这个科学家不像是别人写的，比如造火箭，造大炮又或者是造卫星造原子弹，我的梦想现在说起来与其说是科学家，不如说是药剂师更贴切，妈妈笑着跟我说我当时的梦想是做一个科学家，要研究出来一种长生不老的药，然后让爸爸妈妈吃下以后就可以永远健康年轻，妈妈说那个时候她总逗我，看到路上漂亮的阿姨就会问我，那个阿姨漂亮么，起初我会说漂亮，然后妈妈就会说那让她给你当妈妈好不好，我呢会说不好，妈妈说后来她再问的时候，我就再也不会说我要漂亮阿姨当妈妈的话了，我现在想想也许就是那时，就是因为发现妈妈越来越胖，辛苦操劳后年轻也渐渐不在我才有了这个想法吧，说实话上小学期间我一直认为自己长大能够成为一个科学家，能够造出那长生不老的药让爸妈吃下，这样我就再也不会需要一个漂亮阿姨当妈妈了。我那时希望快快长大，长大了以后我就能做科学家了。</p>\n<p>上了初中高中以后，也许是进了大城市，也许是长大了，我知道了原来的梦想可能有些遥远，学业的压力让我有些透不过气，从海岛到城市，落后了3年的时间，我通过补习班慢慢追赶，终于能够追到了班级还算靠前的位置，那个时候我的梦想很小，也很简单，那就是考个好大学找个好工作，让爸爸妈妈早点不用那么操劳，早点享福。</p>\n<h2 id=\"18岁的梦想-—-找个好工作，让爸妈早点享福\"><a href=\"#18岁的梦想-—-找个好工作，让爸妈早点享福\" class=\"headerlink\" title=\"18岁的梦想 — 找个好工作，让爸妈早点享福\"></a>18岁的梦想 — 找个好工作，让爸妈早点享福</h2><p>努力的学习，懵懂的感情，初中4年+高中3年的生活，最终我并没能特别出色的考上985/211大学，而是上了离家只有1小时车程的大外，学了计算机加日语英语，学费不便宜，每年16000，说实话没自己工作的时候不知道这16000对于一个下岗自己在家开小卖店的父母是多大的负担，工作后我才终于知道这笔钱有多少。好在原来在爸爸单位的时候接触电脑还算比较早，而我对这个新鲜玩意也算是感兴趣，大学学业上并没给我带来太大的压力，但是我也确实不是个聪明的孩子，日语仅仅过了N2，而英语则一直只是CET-4，现在回想起来，原来应该多努努力，也许现在的生活就会更好了，多想回到过去跟自己说，你要努力啊！一晃4年的大学生活就结束了，这时我终于离开了父母身边，只身去往了大城市北京，开启了我的工作生涯。</p>\n<h2 id=\"20岁的人生-—-多挣钱，快速成长\"><a href=\"#20岁的人生-—-多挣钱，快速成长\" class=\"headerlink\" title=\"20岁的人生 — 多挣钱，快速成长\"></a>20岁的人生 — 多挣钱，快速成长</h2><p>工作了以后，我就像海绵一样不断的吸收着周围的水分，学习工作中需要的技能，学习如何才能让领导器重，学习如何才能快速积累人生的财富，因为我想着，想着能快快独立反哺我的爸妈。20岁，我跟媳妇儿谈了场异地的恋爱，后来她到北京找我，再后来我们就一起回了大连。北京是个大城市，大的有时候让人迷茫，虽然工作机会比较多，但是租房的压力，环境的恶劣，家里的呼唤，最终让我选择了回到我熟悉的城市，另外找了份工资不高的工作，我不满足，我想能成为顶天立地的男子汉，后来我就来到了现在的公司华宇，而且一待就是5年。</p>\n<h2 id=\"华宇的职业生涯-—-5年工作，9年经验\"><a href=\"#华宇的职业生涯-—-5年工作，9年经验\" class=\"headerlink\" title=\"华宇的职业生涯 — 5年工作，9年经验\"></a>华宇的职业生涯 — 5年工作，9年经验</h2><p>网上有个段子我记得，一个人面试拿出简历，工作时间是2年却写着3年工作经验，面试官问他是不是写错了，他答不是，因为加班加出来的。这算是对前公司的吐槽吧。</p>\n<p>来到大连华宇时，公司还不足120人，我所在的团队还是个交互组，只有三个人，前端的话只有我和另外一个刚毕业的大学生，记得刚来公司的第一年，我参与了140个项目的开发工作，现在想想这个数字有些惊人，但是因为只是些前端切图仔的工作，对我来说感觉难度并不大，不过还是要感谢刚开始这2年，让我的基础非常扎实，再后来公司引入了前后端分离，引入了Vue框架，越来越多的业务要写，数据处理要写，加班成了家常便饭，后面这三年，我几乎没有休过除了元旦和春节的任何法定节假日，每年5天的年假也几乎都没休成，说实话每次加班加到要崩溃时候，我都会想我到底为了啥这么拼命。要不我还是换一家比较轻松一点的工作吧，工资还能涨点。说实话这段时间工作就是生活的全部，每天到家都10点以后，到家老人孩子都睡了，有时候我都睡不着，想着我的生活难道就这样了么，我不甘心，不服输。很多人劝我别那么拼命，别把公司当成自己家的，只是个打工的而已，但是有时候想着下面还有那么多新人信任着我依赖着我，我就没法撒手不管。终于时间到了19年年底，5年来培养的前端团队最后还是没守护住，要拆到各项目团队了，一开始真的难以接受，不过公司领导层已经决定了，作为一线员工只能服从，我希望大家能够把心中的担忧都能消除掉，在新的团队里开启新的篇章，也许会有更好的发展，如果有一天离开了华宇，也要江湖相望，常聚聚。</p>\n<h2 id=\"2020年31岁踏上新的旅途\"><a href=\"#2020年31岁踏上新的旅途\" class=\"headerlink\" title=\"2020年31岁踏上新的旅途\"></a>2020年31岁踏上新的旅途</h2><p>还是感谢小可爱的这个本子，让我能够有主题想想我未来到底想要什么样的生活，说句实在话，我向往不为钱发愁工作的日子，可以在做好自己工作之外的时间里多陪陪家人，带着孩子常出去走走，见见外面的世界，说实话已经31岁了，除了谈恋爱时去找媳妇儿去过江浙苏杭，工作原因去过北京/青海，好像这些年也就去了趟南京，现在的我已经有些不知道什么叫做生活了，我希望自己的空闲时间是可以让兴趣填满的，可以和朋友同事同学多聚聚，但是怕打扰大家我又从来不会主动去约别人，小时候没有听从爸妈的话培养自己的兴趣，现在有些后悔，真的空闲下来都不知道该用什么填满这时间，都是躺在床上刷手机，看电视，我不喜欢这样的生活，但是我不知道该过怎么样的生活。看到那些会做饭的视频，做顿丰盛的饭菜给家人吃，看到他们的幸福笑脸，我想做那样的事；看到带着家人过着一路向前增长见闻的旅途生活，我想也尝试一下那样的人生，我感觉为了钱我被束缚在了工作上，2020年我想过一种不为工作所累，不为钱所累，能够享受生活，陪伴家人的生活，保重身体，每天快快乐乐的，多发现生活中的美好，感恩，努力，成长。期待自己成为更好的人。</p>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>我所期待中的生平，成为一个不被工作强迫，不被金钱所累，爱家顾家，孝敬父母，人缘好朋友多，兴趣广泛，感恩的人。</p>"},{"title":"从零开始：Vue cli3 库模式搭建组件库并发布到npm【转载】","date":"2020-04-15T16:00:00.000Z","_content":"\n> 作者：李旭光\n> 引用请标明出处\n\n## 前言\n\n市面上目前已有各种各样的UI组件库，比如 Element 和 iView，他们的强大毋庸置疑。但是我们面临的情况是需求越来越复杂，当它们不能再满足我们需求的时候，这个时候就有必要开发一套属于自己团队的组件库了。\n\n所以本文的目的就是让读者能通过此文，小能做一个简单的插件供人使用，大能架构和维护一个组件库不在话下。\n\n以下一个简单的颜色选择器插件vColorPicker讲述从开发到上线到npm的流程。\n\n[vColorPicker 插件 DEMO](http://vue-color-picker.rxshc.com/)\n<!-- more -->\n## 一、技术栈\n如何通过新版脚手架创建项目，这里就不提了，自行看官方文档。\n\n- Vue-cli3: 新版脚手架的库模式，可以让我们很轻松的创建打包一个库\n- npm：组件库将存放在npm\n- webpack：修改配置需要一点 webapck 的知识。\n\n## 二、大纲\n想要搭建一个组件库，我们必须先要有一个大概的思路。\n\n1. 规划目录结构\n2. 配置项目以支持目录结构\n3. 编写组件\n4. 编写示例\n5. 配置使用库模式打包编译\n6. 发布到npm\n\n## 三、规划目录结构\n### 1、创建项目\n在指定目录中使用命令创建一个默认的项目，或者根据自己需要自己选择。\n``` js\n$ vue create .\n```\n### 2、调整目录\n我们需要一个目录存放组件，一个目录存放示例，按照以下方式对目录进行改造。\n``` js\n.\n...\n|-- examples      // 原 src 目录，改成 examples 用作示例展示\n|-- packages      // 新增 packages 用于编写存放组件\n...\n.\n```\n## 四、配置项目以支持新的目录结构\n我们通过上一步的目录改造后，会遇到两个问题。\n\n1. src目录更名为examples，导致项目无法运行\n2. 新增packages目录，该目录未加入webpack编译\n\n**注：cli3 提供一个可选的 vue.config.js 配置文件。如果这个文件存在则他会被自动加载，所有的对项目和webpack的配置，都在这个文件中。**\n\n### 1、重新配置入口，修改配置中的 pages 选项\n新版 Vue CLI 支持使用 vue.config.js 中的 pages 选项构建一个多页面的应用。\n\n这里使用 pages 修改入口到 examples\n``` js\nmodule.exports = {\n  // 修改 src 为 examples\n  pages: {\n    index: {\n      entry: 'examples/main.js',\n      template: 'public/index.html',\n      filename: 'index.html'\n    }\n  }\n}\n```\n### 2、支持对 packages 目录的处理，修改配置中的 chainWebpack 选项\npackages 是我们新增的一个目录，默认是不被 webpack 处理的，所以需要添加配置对该目录的支持。\n\nchainWebpack 是一个函数，会接收一个基于 webpack-chain 的 ChainableConfig 实例。允许对内部的 webpack 配置进行更细粒度的修改。\n``` js\nmodule.exports = {\n  // 修改 src 为 examples\n  pages: {\n    index: {\n      entry: 'examples/main.js',\n      template: 'public/index.html',\n      filename: 'index.html'\n    }\n  },\n  // 扩展 webpack 配置，使 packages 加入编译\n  chainWebpack: config => {\n    config.module\n      .rule('js')\n      .include\n        .add('packages')\n        .end()\n      .use('babel')\n        .loader('babel-loader')\n        .tap(options => {\n          // 修改它的选项...\n          return options\n        })\n  }\n}\n```\n[链式操作](https://cli.vuejs.org/zh/guide/webpack.html#%E9%93%BE%E5%BC%8F%E6%93%8D%E4%BD%9C-%E9%AB%98%E7%BA%A7)\n[webpack-chain](https://github.com/neutrinojs/webpack-chain)\n\n## 五、编写组件\n以上我们已配置好对新目录架构的支持，接下来我们尝试编写组件。以下我们以一个已发布到 npm 的小插件作为示例。\n[GitHub - 颜色选择器：vcolorpicker](https://github.com/zuley/vue-color-picker)\n\n### 1. 创建一个新组件\n1. 在 packages 目录下，所有的单个组件都以文件夹的形式存储，所有这里创建一个目录 color-picker/\n2. 在 color-picker/ 目录下创建 src/ 目录存储组件源码\n3. 在 /color-picker 目录下创建 index.js 文件对外提供对组件的引用。\n修改 /packages/color-picker/index.js文件，对外提供引用。\n\n``` js\n// ./packages/color-picker/index.js\n\n// 导入组件，组件必须声明 name\nimport colorPicker from './src/color-picker.vue'\n\n// 为组件提供 install 安装方法，供按需引入\ncolorPicker = function (Vue) {\n  Vue.component(colorPicker.name, colorPicker)\n}\n\n// 默认导出组件\nexport default colorPicker\n```\n### 2. 整合所有的组件，对外导出，即一个完整的组件库\n修改 /packages/index.js 文件，对整个组件库进行导出。\n\n``` js\n// ./packages/index.js\n\n// 导入颜色选择器组件\nimport colorPicker from './color-picker'\n\n// 存储组件列表\nconst components = [\n  colorPicker\n]\n\n// 定义 install 方法，接收 Vue 作为参数。如果使用 use 注册插件，则所有的组件都将被注册\nconst install = function (Vue) {\n  // 判断是否安装\n  if (install.installed) return\n  // 遍历注册全局组件\n  components.map(component => Vue.component(component.name, component))\n}\n\n// 判断是否是直接引入文件\nif (typeof window !== 'undefined' && window.Vue) {\n  install(window.Vue)\n}\n\nexport default {\n  // 导出的对象必须具有 install，才能被 Vue.use() 方法安装\n  install,\n  // 以下是具体的组件列表\n  colorPicker\n}\n```\n## 六、编写示例\n### 1、在示例中导入组件库\n``` js\nimport Vue from 'vue'\nimport App from './App.vue'\n\n// 导入组件库\nimport ColorPicker from './../packages/index'\n// 注册组件库\nVue.use(ColorPicker)\n\nVue.config.productionTip = false\n\nnew Vue({\n  render: h => h(App)\n}).$mount('#app')\n```\n### 2、在示例中使用组件库中的组件\n在上一步用使用 Vue.use() 全局注册后，即可在任意页面直接使用了，而不需另外引入。当然也可以按需引入。\n\n``` js\n<template>\n\t<colorPicker v-model=\"color\" v-on:change=\"headleChangeColor\"></colorPicker>\n</template>\n\n<script>\nexport default {\n\tdata () {\n\t\treturn {\n\t\t\tcolor: '#ff0000'\n\t\t}\n\t},\n\tmethods: {\n\t\theadleChangeColor () {\n\t\t\tconsole.log('颜色改变')\n\t\t}\n\t}\n}\n</script>\n```\n## 七、发布到 npm，方便直接在项目中引用\n到此为止我们一个完整的组件库已经开发完成了，接下来就是发布到 npm 以供后期使用。\n\n### 1、package.js 中新增一条编译为库的命令\n在库模式中，Vue是外置的，这意味着即使在代码中引入了 Vue，打包后的文件也是不包含Vue的。\n\n[Vue Cli3 构建目标：库](https://cli.vuejs.org/zh/guide/build-targets.html#%E5%BA%93)\n\n以下我们在 scripts 中新增一条命令\n\n- --target: 构建目标，默认为应用模式。这里修改为 lib 启用库模式。\n- --dest : 输出目录，默认 dist。这里我们改成 lib\n- [entry]: 最后一个参数为入口文件，默认为 src/App.vue。这里我们指定编译 packages/ 组件库目录。\n``` js\n\"script\": {\n\t// ...\n\t\"lib\": \"vue-cli-service build --target lib --name vcolorpicker --dest lib packages/index.js\"\n}\n```\n**执行编译库命令**\n``` bash\n$ npm run lib\n```\n### 2、配置 package.json 文件中发布到 npm 的字段\n- name: 包名，该名字是唯一的。可在 npm 官网搜索名字，如果存在则需换个名字。\n- version: 版本号，每次发布至 npm 需要修改版本号，不能和历史版本号相同。\n- description: 描述。\n- main: 入口文件，该字段需指向我们最终编译后的包文件。\n- keyword：关键字，以空格分离希望用户最终搜索的词。\n- author：作者\n- private：是否私有，需要修改为 false 才能发布到 npm\n- license： 开源协议\n\n以下为参考设置\n\n``` json\n{\n  \"name\": \"vcolorpicker\",\n  \"version\": \"0.1.5\",\n  \"description\": \"基于 Vue 的颜色选择器\",\n  \"main\": \"lib/vcolorpicker.umd.min.js\",\n  \"keyword\": \"vcolorpicker colorpicker color-picker\",\n  \"private\": false\n }\n```\n### 3、添加 .npmignore 文件，设置忽略发布文件\n我们发布到 npm 中，只有编译后的 lib 目录、package.json、README.md才是需要被发布的。所以我们需要设置忽略目录和文件。\n\n和 .gitignore 的语法一样，具体需要提交什么文件，看各自的实际情况。\n\n``` bash\n# 忽略目录\nexamples/\npackages/\npublic/\n\n# 忽略指定文件\nvue.config.js\nbabel.config.js\n*.map\n```\n### 4、登录到 npm\n首先需要到 npm 上注册一个账号，注册过程略。\n\n如果配置了淘宝镜像，先设置回npm镜像：\n``` bash\n$ npm config set registry http://registry.npmjs.org\n```\n然后在终端执行登录命令，输入用户名、密码、邮箱即可登录。\n``` bash\n$ npm login\n```\n\n### 5、发布到 npm\n执行发布命令，发布组件到 npm\n``` bash\n$ npm publish\n```\n\n### 6、发布成功\n发布成功后稍等几分钟，即可在 npm 官网搜索到。以下是刚提交的 vcolorpicker\n\n### 7、使用新发布的组件库\n安装\n``` bash\n$ npm install vcolorpicker -S\n```\n使用\n``` js\n// 在 main.js 引入并注册\nimport vcolorpicker from 'vcolorpicker'\nVue.use(vcolorpicker)\n\n// 在组件中使用\n<template>\n  <colorPicker v-model=\"color\" />\n</template>\n<script>\n  export default {\n    data () {\n      return {\n        color: '#ff0000'\n      }\n    }\n  }\n</script>\n```\n暂时没有做包含多个组件的时候的按需加载，以后研究了再补充。\n\n## 八、项目地址\n[Github 地址：https://github.com/zuley/vue-color-picker](https://github.com/zuley/vue-color-picker)\n[npm 地址：https://www.npmjs.com/package/vcolorpicker](https://www.npmjs.com/package/vcolorpicker)\n[DEMO 演示：http://vue-color-picker.rxshc.com](http://vue-color-picker.rxshc.com)\n\n## 九、参考文章\n[从零开始搭建Vue组件库 VV-UI](https://zhuanlan.zhihu.com/p/30948290)\n[Vue插件开发](https://cn.vuejs.org/v2/guide/plugins.html#%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6)\n[组件基础](https://cn.vuejs.org/v2/guide/components.html)","source":"_posts/0-vuecli-3-component.md","raw":"---\ntitle: 从零开始：Vue cli3 库模式搭建组件库并发布到npm【转载】\ndate: 2020-04-16\ncategories: \n  - Vue\ntags: \n  - 打包\n---\n\n> 作者：李旭光\n> 引用请标明出处\n\n## 前言\n\n市面上目前已有各种各样的UI组件库，比如 Element 和 iView，他们的强大毋庸置疑。但是我们面临的情况是需求越来越复杂，当它们不能再满足我们需求的时候，这个时候就有必要开发一套属于自己团队的组件库了。\n\n所以本文的目的就是让读者能通过此文，小能做一个简单的插件供人使用，大能架构和维护一个组件库不在话下。\n\n以下一个简单的颜色选择器插件vColorPicker讲述从开发到上线到npm的流程。\n\n[vColorPicker 插件 DEMO](http://vue-color-picker.rxshc.com/)\n<!-- more -->\n## 一、技术栈\n如何通过新版脚手架创建项目，这里就不提了，自行看官方文档。\n\n- Vue-cli3: 新版脚手架的库模式，可以让我们很轻松的创建打包一个库\n- npm：组件库将存放在npm\n- webpack：修改配置需要一点 webapck 的知识。\n\n## 二、大纲\n想要搭建一个组件库，我们必须先要有一个大概的思路。\n\n1. 规划目录结构\n2. 配置项目以支持目录结构\n3. 编写组件\n4. 编写示例\n5. 配置使用库模式打包编译\n6. 发布到npm\n\n## 三、规划目录结构\n### 1、创建项目\n在指定目录中使用命令创建一个默认的项目，或者根据自己需要自己选择。\n``` js\n$ vue create .\n```\n### 2、调整目录\n我们需要一个目录存放组件，一个目录存放示例，按照以下方式对目录进行改造。\n``` js\n.\n...\n|-- examples      // 原 src 目录，改成 examples 用作示例展示\n|-- packages      // 新增 packages 用于编写存放组件\n...\n.\n```\n## 四、配置项目以支持新的目录结构\n我们通过上一步的目录改造后，会遇到两个问题。\n\n1. src目录更名为examples，导致项目无法运行\n2. 新增packages目录，该目录未加入webpack编译\n\n**注：cli3 提供一个可选的 vue.config.js 配置文件。如果这个文件存在则他会被自动加载，所有的对项目和webpack的配置，都在这个文件中。**\n\n### 1、重新配置入口，修改配置中的 pages 选项\n新版 Vue CLI 支持使用 vue.config.js 中的 pages 选项构建一个多页面的应用。\n\n这里使用 pages 修改入口到 examples\n``` js\nmodule.exports = {\n  // 修改 src 为 examples\n  pages: {\n    index: {\n      entry: 'examples/main.js',\n      template: 'public/index.html',\n      filename: 'index.html'\n    }\n  }\n}\n```\n### 2、支持对 packages 目录的处理，修改配置中的 chainWebpack 选项\npackages 是我们新增的一个目录，默认是不被 webpack 处理的，所以需要添加配置对该目录的支持。\n\nchainWebpack 是一个函数，会接收一个基于 webpack-chain 的 ChainableConfig 实例。允许对内部的 webpack 配置进行更细粒度的修改。\n``` js\nmodule.exports = {\n  // 修改 src 为 examples\n  pages: {\n    index: {\n      entry: 'examples/main.js',\n      template: 'public/index.html',\n      filename: 'index.html'\n    }\n  },\n  // 扩展 webpack 配置，使 packages 加入编译\n  chainWebpack: config => {\n    config.module\n      .rule('js')\n      .include\n        .add('packages')\n        .end()\n      .use('babel')\n        .loader('babel-loader')\n        .tap(options => {\n          // 修改它的选项...\n          return options\n        })\n  }\n}\n```\n[链式操作](https://cli.vuejs.org/zh/guide/webpack.html#%E9%93%BE%E5%BC%8F%E6%93%8D%E4%BD%9C-%E9%AB%98%E7%BA%A7)\n[webpack-chain](https://github.com/neutrinojs/webpack-chain)\n\n## 五、编写组件\n以上我们已配置好对新目录架构的支持，接下来我们尝试编写组件。以下我们以一个已发布到 npm 的小插件作为示例。\n[GitHub - 颜色选择器：vcolorpicker](https://github.com/zuley/vue-color-picker)\n\n### 1. 创建一个新组件\n1. 在 packages 目录下，所有的单个组件都以文件夹的形式存储，所有这里创建一个目录 color-picker/\n2. 在 color-picker/ 目录下创建 src/ 目录存储组件源码\n3. 在 /color-picker 目录下创建 index.js 文件对外提供对组件的引用。\n修改 /packages/color-picker/index.js文件，对外提供引用。\n\n``` js\n// ./packages/color-picker/index.js\n\n// 导入组件，组件必须声明 name\nimport colorPicker from './src/color-picker.vue'\n\n// 为组件提供 install 安装方法，供按需引入\ncolorPicker = function (Vue) {\n  Vue.component(colorPicker.name, colorPicker)\n}\n\n// 默认导出组件\nexport default colorPicker\n```\n### 2. 整合所有的组件，对外导出，即一个完整的组件库\n修改 /packages/index.js 文件，对整个组件库进行导出。\n\n``` js\n// ./packages/index.js\n\n// 导入颜色选择器组件\nimport colorPicker from './color-picker'\n\n// 存储组件列表\nconst components = [\n  colorPicker\n]\n\n// 定义 install 方法，接收 Vue 作为参数。如果使用 use 注册插件，则所有的组件都将被注册\nconst install = function (Vue) {\n  // 判断是否安装\n  if (install.installed) return\n  // 遍历注册全局组件\n  components.map(component => Vue.component(component.name, component))\n}\n\n// 判断是否是直接引入文件\nif (typeof window !== 'undefined' && window.Vue) {\n  install(window.Vue)\n}\n\nexport default {\n  // 导出的对象必须具有 install，才能被 Vue.use() 方法安装\n  install,\n  // 以下是具体的组件列表\n  colorPicker\n}\n```\n## 六、编写示例\n### 1、在示例中导入组件库\n``` js\nimport Vue from 'vue'\nimport App from './App.vue'\n\n// 导入组件库\nimport ColorPicker from './../packages/index'\n// 注册组件库\nVue.use(ColorPicker)\n\nVue.config.productionTip = false\n\nnew Vue({\n  render: h => h(App)\n}).$mount('#app')\n```\n### 2、在示例中使用组件库中的组件\n在上一步用使用 Vue.use() 全局注册后，即可在任意页面直接使用了，而不需另外引入。当然也可以按需引入。\n\n``` js\n<template>\n\t<colorPicker v-model=\"color\" v-on:change=\"headleChangeColor\"></colorPicker>\n</template>\n\n<script>\nexport default {\n\tdata () {\n\t\treturn {\n\t\t\tcolor: '#ff0000'\n\t\t}\n\t},\n\tmethods: {\n\t\theadleChangeColor () {\n\t\t\tconsole.log('颜色改变')\n\t\t}\n\t}\n}\n</script>\n```\n## 七、发布到 npm，方便直接在项目中引用\n到此为止我们一个完整的组件库已经开发完成了，接下来就是发布到 npm 以供后期使用。\n\n### 1、package.js 中新增一条编译为库的命令\n在库模式中，Vue是外置的，这意味着即使在代码中引入了 Vue，打包后的文件也是不包含Vue的。\n\n[Vue Cli3 构建目标：库](https://cli.vuejs.org/zh/guide/build-targets.html#%E5%BA%93)\n\n以下我们在 scripts 中新增一条命令\n\n- --target: 构建目标，默认为应用模式。这里修改为 lib 启用库模式。\n- --dest : 输出目录，默认 dist。这里我们改成 lib\n- [entry]: 最后一个参数为入口文件，默认为 src/App.vue。这里我们指定编译 packages/ 组件库目录。\n``` js\n\"script\": {\n\t// ...\n\t\"lib\": \"vue-cli-service build --target lib --name vcolorpicker --dest lib packages/index.js\"\n}\n```\n**执行编译库命令**\n``` bash\n$ npm run lib\n```\n### 2、配置 package.json 文件中发布到 npm 的字段\n- name: 包名，该名字是唯一的。可在 npm 官网搜索名字，如果存在则需换个名字。\n- version: 版本号，每次发布至 npm 需要修改版本号，不能和历史版本号相同。\n- description: 描述。\n- main: 入口文件，该字段需指向我们最终编译后的包文件。\n- keyword：关键字，以空格分离希望用户最终搜索的词。\n- author：作者\n- private：是否私有，需要修改为 false 才能发布到 npm\n- license： 开源协议\n\n以下为参考设置\n\n``` json\n{\n  \"name\": \"vcolorpicker\",\n  \"version\": \"0.1.5\",\n  \"description\": \"基于 Vue 的颜色选择器\",\n  \"main\": \"lib/vcolorpicker.umd.min.js\",\n  \"keyword\": \"vcolorpicker colorpicker color-picker\",\n  \"private\": false\n }\n```\n### 3、添加 .npmignore 文件，设置忽略发布文件\n我们发布到 npm 中，只有编译后的 lib 目录、package.json、README.md才是需要被发布的。所以我们需要设置忽略目录和文件。\n\n和 .gitignore 的语法一样，具体需要提交什么文件，看各自的实际情况。\n\n``` bash\n# 忽略目录\nexamples/\npackages/\npublic/\n\n# 忽略指定文件\nvue.config.js\nbabel.config.js\n*.map\n```\n### 4、登录到 npm\n首先需要到 npm 上注册一个账号，注册过程略。\n\n如果配置了淘宝镜像，先设置回npm镜像：\n``` bash\n$ npm config set registry http://registry.npmjs.org\n```\n然后在终端执行登录命令，输入用户名、密码、邮箱即可登录。\n``` bash\n$ npm login\n```\n\n### 5、发布到 npm\n执行发布命令，发布组件到 npm\n``` bash\n$ npm publish\n```\n\n### 6、发布成功\n发布成功后稍等几分钟，即可在 npm 官网搜索到。以下是刚提交的 vcolorpicker\n\n### 7、使用新发布的组件库\n安装\n``` bash\n$ npm install vcolorpicker -S\n```\n使用\n``` js\n// 在 main.js 引入并注册\nimport vcolorpicker from 'vcolorpicker'\nVue.use(vcolorpicker)\n\n// 在组件中使用\n<template>\n  <colorPicker v-model=\"color\" />\n</template>\n<script>\n  export default {\n    data () {\n      return {\n        color: '#ff0000'\n      }\n    }\n  }\n</script>\n```\n暂时没有做包含多个组件的时候的按需加载，以后研究了再补充。\n\n## 八、项目地址\n[Github 地址：https://github.com/zuley/vue-color-picker](https://github.com/zuley/vue-color-picker)\n[npm 地址：https://www.npmjs.com/package/vcolorpicker](https://www.npmjs.com/package/vcolorpicker)\n[DEMO 演示：http://vue-color-picker.rxshc.com](http://vue-color-picker.rxshc.com)\n\n## 九、参考文章\n[从零开始搭建Vue组件库 VV-UI](https://zhuanlan.zhihu.com/p/30948290)\n[Vue插件开发](https://cn.vuejs.org/v2/guide/plugins.html#%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6)\n[组件基础](https://cn.vuejs.org/v2/guide/components.html)","slug":"0-vuecli-3-component","published":1,"updated":"2020-04-16T03:58:59.674Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grus0002ooa6fdq83et0","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>市面上目前已有各种各样的UI组件库，比如 Element 和 iView，他们的强大毋庸置疑。但是我们面临的情况是需求越来越复杂，当它们不能再满足我们需求的时候，这个时候就有必要开发一套属于自己团队的组件库了。</p>\n<p>所以本文的目的就是让读者能通过此文，小能做一个简单的插件供人使用，大能架构和维护一个组件库不在话下。</p>\n<p>以下一个简单的颜色选择器插件vColorPicker讲述从开发到上线到npm的流程。</p>\n<p><a href=\"http://vue-color-picker.rxshc.com/\" target=\"_blank\" rel=\"noopener\">vColorPicker 插件 DEMO</a></p>\n<a id=\"more\"></a>\n<h2 id=\"一、技术栈\"><a href=\"#一、技术栈\" class=\"headerlink\" title=\"一、技术栈\"></a>一、技术栈</h2><p>如何通过新版脚手架创建项目，这里就不提了，自行看官方文档。</p>\n<ul>\n<li>Vue-cli3: 新版脚手架的库模式，可以让我们很轻松的创建打包一个库</li>\n<li>npm：组件库将存放在npm</li>\n<li>webpack：修改配置需要一点 webapck 的知识。</li>\n</ul>\n<h2 id=\"二、大纲\"><a href=\"#二、大纲\" class=\"headerlink\" title=\"二、大纲\"></a>二、大纲</h2><p>想要搭建一个组件库，我们必须先要有一个大概的思路。</p>\n<ol>\n<li>规划目录结构</li>\n<li>配置项目以支持目录结构</li>\n<li>编写组件</li>\n<li>编写示例</li>\n<li>配置使用库模式打包编译</li>\n<li>发布到npm</li>\n</ol>\n<h2 id=\"三、规划目录结构\"><a href=\"#三、规划目录结构\" class=\"headerlink\" title=\"三、规划目录结构\"></a>三、规划目录结构</h2><h3 id=\"1、创建项目\"><a href=\"#1、创建项目\" class=\"headerlink\" title=\"1、创建项目\"></a>1、创建项目</h3><p>在指定目录中使用命令创建一个默认的项目，或者根据自己需要自己选择。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vue create .</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、调整目录\"><a href=\"#2、调整目录\" class=\"headerlink\" title=\"2、调整目录\"></a>2、调整目录</h3><p>我们需要一个目录存放组件，一个目录存放示例，按照以下方式对目录进行改造。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">...</span><br><span class=\"line\">|-- examples      <span class=\"comment\">// 原 src 目录，改成 examples 用作示例展示</span></span><br><span class=\"line\">|-- packages      <span class=\"comment\">// 新增 packages 用于编写存放组件</span></span><br><span class=\"line\">...</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、配置项目以支持新的目录结构\"><a href=\"#四、配置项目以支持新的目录结构\" class=\"headerlink\" title=\"四、配置项目以支持新的目录结构\"></a>四、配置项目以支持新的目录结构</h2><p>我们通过上一步的目录改造后，会遇到两个问题。</p>\n<ol>\n<li>src目录更名为examples，导致项目无法运行</li>\n<li>新增packages目录，该目录未加入webpack编译</li>\n</ol>\n<p><strong>注：cli3 提供一个可选的 vue.config.js 配置文件。如果这个文件存在则他会被自动加载，所有的对项目和webpack的配置，都在这个文件中。</strong></p>\n<h3 id=\"1、重新配置入口，修改配置中的-pages-选项\"><a href=\"#1、重新配置入口，修改配置中的-pages-选项\" class=\"headerlink\" title=\"1、重新配置入口，修改配置中的 pages 选项\"></a>1、重新配置入口，修改配置中的 pages 选项</h3><p>新版 Vue CLI 支持使用 vue.config.js 中的 pages 选项构建一个多页面的应用。</p>\n<p>这里使用 pages 修改入口到 examples</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 修改 src 为 examples</span></span><br><span class=\"line\">  pages: &#123;</span><br><span class=\"line\">    index: &#123;</span><br><span class=\"line\">      entry: <span class=\"string\">'examples/main.js'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'public/index.html'</span>,</span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、支持对-packages-目录的处理，修改配置中的-chainWebpack-选项\"><a href=\"#2、支持对-packages-目录的处理，修改配置中的-chainWebpack-选项\" class=\"headerlink\" title=\"2、支持对 packages 目录的处理，修改配置中的 chainWebpack 选项\"></a>2、支持对 packages 目录的处理，修改配置中的 chainWebpack 选项</h3><p>packages 是我们新增的一个目录，默认是不被 webpack 处理的，所以需要添加配置对该目录的支持。</p>\n<p>chainWebpack 是一个函数，会接收一个基于 webpack-chain 的 ChainableConfig 实例。允许对内部的 webpack 配置进行更细粒度的修改。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 修改 src 为 examples</span></span><br><span class=\"line\">  pages: &#123;</span><br><span class=\"line\">    index: &#123;</span><br><span class=\"line\">      entry: <span class=\"string\">'examples/main.js'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'public/index.html'</span>,</span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 扩展 webpack 配置，使 packages 加入编译</span></span><br><span class=\"line\">  chainWebpack: <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">    config.module</span><br><span class=\"line\">      .rule(<span class=\"string\">'js'</span>)</span><br><span class=\"line\">      .include</span><br><span class=\"line\">        .add(<span class=\"string\">'packages'</span>)</span><br><span class=\"line\">        .end()</span><br><span class=\"line\">      .use(<span class=\"string\">'babel'</span>)</span><br><span class=\"line\">        .loader(<span class=\"string\">'babel-loader'</span>)</span><br><span class=\"line\">        .tap(<span class=\"function\"><span class=\"params\">options</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 修改它的选项...</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> options</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://cli.vuejs.org/zh/guide/webpack.html#%E9%93%BE%E5%BC%8F%E6%93%8D%E4%BD%9C-%E9%AB%98%E7%BA%A7\" target=\"_blank\" rel=\"noopener\">链式操作</a><br><a href=\"https://github.com/neutrinojs/webpack-chain\" target=\"_blank\" rel=\"noopener\">webpack-chain</a></p>\n<h2 id=\"五、编写组件\"><a href=\"#五、编写组件\" class=\"headerlink\" title=\"五、编写组件\"></a>五、编写组件</h2><p>以上我们已配置好对新目录架构的支持，接下来我们尝试编写组件。以下我们以一个已发布到 npm 的小插件作为示例。<br><a href=\"https://github.com/zuley/vue-color-picker\" target=\"_blank\" rel=\"noopener\">GitHub - 颜色选择器：vcolorpicker</a></p>\n<h3 id=\"1-创建一个新组件\"><a href=\"#1-创建一个新组件\" class=\"headerlink\" title=\"1. 创建一个新组件\"></a>1. 创建一个新组件</h3><ol>\n<li>在 packages 目录下，所有的单个组件都以文件夹的形式存储，所有这里创建一个目录 color-picker/</li>\n<li>在 color-picker/ 目录下创建 src/ 目录存储组件源码</li>\n<li>在 /color-picker 目录下创建 index.js 文件对外提供对组件的引用。<br>修改 /packages/color-picker/index.js文件，对外提供引用。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./packages/color-picker/index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导入组件，组件必须声明 name</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> colorPicker <span class=\"keyword\">from</span> <span class=\"string\">'./src/color-picker.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为组件提供 install 安装方法，供按需引入</span></span><br><span class=\"line\">colorPicker = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue</span>) </span>&#123;</span><br><span class=\"line\">  Vue.component(colorPicker.name, colorPicker)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认导出组件</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> colorPicker</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-整合所有的组件，对外导出，即一个完整的组件库\"><a href=\"#2-整合所有的组件，对外导出，即一个完整的组件库\" class=\"headerlink\" title=\"2. 整合所有的组件，对外导出，即一个完整的组件库\"></a>2. 整合所有的组件，对外导出，即一个完整的组件库</h3><p>修改 /packages/index.js 文件，对整个组件库进行导出。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./packages/index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导入颜色选择器组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> colorPicker <span class=\"keyword\">from</span> <span class=\"string\">'./color-picker'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 存储组件列表</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> components = [</span><br><span class=\"line\">  colorPicker</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义 install 方法，接收 Vue 作为参数。如果使用 use 注册插件，则所有的组件都将被注册</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断是否安装</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (install.installed) <span class=\"keyword\">return</span></span><br><span class=\"line\">  <span class=\"comment\">// 遍历注册全局组件</span></span><br><span class=\"line\">  components.map(<span class=\"function\"><span class=\"params\">component</span> =&gt;</span> Vue.component(component.name, component))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断是否是直接引入文件</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span> &amp;&amp; <span class=\"built_in\">window</span>.Vue) &#123;</span><br><span class=\"line\">  install(<span class=\"built_in\">window</span>.Vue)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 导出的对象必须具有 install，才能被 Vue.use() 方法安装</span></span><br><span class=\"line\">  install,</span><br><span class=\"line\">  <span class=\"comment\">// 以下是具体的组件列表</span></span><br><span class=\"line\">  colorPicker</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、编写示例\"><a href=\"#六、编写示例\" class=\"headerlink\" title=\"六、编写示例\"></a>六、编写示例</h2><h3 id=\"1、在示例中导入组件库\"><a href=\"#1、在示例中导入组件库\" class=\"headerlink\" title=\"1、在示例中导入组件库\"></a>1、在示例中导入组件库</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导入组件库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ColorPicker <span class=\"keyword\">from</span> <span class=\"string\">'./../packages/index'</span></span><br><span class=\"line\"><span class=\"comment\">// 注册组件库</span></span><br><span class=\"line\">Vue.use(ColorPicker)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、在示例中使用组件库中的组件\"><a href=\"#2、在示例中使用组件库中的组件\" class=\"headerlink\" title=\"2、在示例中使用组件库中的组件\"></a>2、在示例中使用组件库中的组件</h3><p>在上一步用使用 Vue.use() 全局注册后，即可在任意页面直接使用了，而不需另外引入。当然也可以按需引入。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;colorPicker v-model=<span class=\"string\">\"color\"</span> v-on:change=<span class=\"string\">\"headleChangeColor\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">colorPicker</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tdata () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\treturn &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tcolor: '#ff0000'</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">\tmethods: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\theadleChangeColor () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tconsole.log('颜色改变')</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"七、发布到-npm，方便直接在项目中引用\"><a href=\"#七、发布到-npm，方便直接在项目中引用\" class=\"headerlink\" title=\"七、发布到 npm，方便直接在项目中引用\"></a>七、发布到 npm，方便直接在项目中引用</h2><p>到此为止我们一个完整的组件库已经开发完成了，接下来就是发布到 npm 以供后期使用。</p>\n<h3 id=\"1、package-js-中新增一条编译为库的命令\"><a href=\"#1、package-js-中新增一条编译为库的命令\" class=\"headerlink\" title=\"1、package.js 中新增一条编译为库的命令\"></a>1、package.js 中新增一条编译为库的命令</h3><p>在库模式中，Vue是外置的，这意味着即使在代码中引入了 Vue，打包后的文件也是不包含Vue的。</p>\n<p><a href=\"https://cli.vuejs.org/zh/guide/build-targets.html#%E5%BA%93\" target=\"_blank\" rel=\"noopener\">Vue Cli3 构建目标：库</a></p>\n<p>以下我们在 scripts 中新增一条命令</p>\n<ul>\n<li>–target: 构建目标，默认为应用模式。这里修改为 lib 启用库模式。</li>\n<li>–dest : 输出目录，默认 dist。这里我们改成 lib</li>\n<li>[entry]: 最后一个参数为入口文件，默认为 src/App.vue。这里我们指定编译 packages/ 组件库目录。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"script\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t<span class=\"string\">\"lib\"</span>: <span class=\"string\">\"vue-cli-service build --target lib --name vcolorpicker --dest lib packages/index.js\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>执行编译库命令</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm run lib</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、配置-package-json-文件中发布到-npm-的字段\"><a href=\"#2、配置-package-json-文件中发布到-npm-的字段\" class=\"headerlink\" title=\"2、配置 package.json 文件中发布到 npm 的字段\"></a>2、配置 package.json 文件中发布到 npm 的字段</h3><ul>\n<li>name: 包名，该名字是唯一的。可在 npm 官网搜索名字，如果存在则需换个名字。</li>\n<li>version: 版本号，每次发布至 npm 需要修改版本号，不能和历史版本号相同。</li>\n<li>description: 描述。</li>\n<li>main: 入口文件，该字段需指向我们最终编译后的包文件。</li>\n<li>keyword：关键字，以空格分离希望用户最终搜索的词。</li>\n<li>author：作者</li>\n<li>private：是否私有，需要修改为 false 才能发布到 npm</li>\n<li>license： 开源协议</li>\n</ul>\n<p>以下为参考设置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"vcolorpicker\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.5\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"基于 Vue 的颜色选择器\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"lib/vcolorpicker.umd.min.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"keyword\"</span>: <span class=\"string\">\"vcolorpicker colorpicker color-picker\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"private\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、添加-npmignore-文件，设置忽略发布文件\"><a href=\"#3、添加-npmignore-文件，设置忽略发布文件\" class=\"headerlink\" title=\"3、添加 .npmignore 文件，设置忽略发布文件\"></a>3、添加 .npmignore 文件，设置忽略发布文件</h3><p>我们发布到 npm 中，只有编译后的 lib 目录、package.json、README.md才是需要被发布的。所以我们需要设置忽略目录和文件。</p>\n<p>和 .gitignore 的语法一样，具体需要提交什么文件，看各自的实际情况。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 忽略目录</span></span><br><span class=\"line\">examples/</span><br><span class=\"line\">packages/</span><br><span class=\"line\">public/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 忽略指定文件</span></span><br><span class=\"line\">vue.config.js</span><br><span class=\"line\">babel.config.js</span><br><span class=\"line\">*.map</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、登录到-npm\"><a href=\"#4、登录到-npm\" class=\"headerlink\" title=\"4、登录到 npm\"></a>4、登录到 npm</h3><p>首先需要到 npm 上注册一个账号，注册过程略。</p>\n<p>如果配置了淘宝镜像，先设置回npm镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm config <span class=\"built_in\">set</span> registry http://registry.npmjs.org</span><br></pre></td></tr></table></figure>\n<p>然后在终端执行登录命令，输入用户名、密码、邮箱即可登录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm login</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、发布到-npm\"><a href=\"#5、发布到-npm\" class=\"headerlink\" title=\"5、发布到 npm\"></a>5、发布到 npm</h3><p>执行发布命令，发布组件到 npm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm publish</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、发布成功\"><a href=\"#6、发布成功\" class=\"headerlink\" title=\"6、发布成功\"></a>6、发布成功</h3><p>发布成功后稍等几分钟，即可在 npm 官网搜索到。以下是刚提交的 vcolorpicker</p>\n<h3 id=\"7、使用新发布的组件库\"><a href=\"#7、使用新发布的组件库\" class=\"headerlink\" title=\"7、使用新发布的组件库\"></a>7、使用新发布的组件库</h3><p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install vcolorpicker -S</span><br></pre></td></tr></table></figure>\n<p>使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在 main.js 引入并注册</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> vcolorpicker <span class=\"keyword\">from</span> <span class=\"string\">'vcolorpicker'</span></span><br><span class=\"line\">Vue.use(vcolorpicker)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在组件中使用</span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;colorPicker v-model=<span class=\"string\">\"color\"</span> /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    data () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        color: '#ff0000'</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>\n<p>暂时没有做包含多个组件的时候的按需加载，以后研究了再补充。</p>\n<h2 id=\"八、项目地址\"><a href=\"#八、项目地址\" class=\"headerlink\" title=\"八、项目地址\"></a>八、项目地址</h2><p><a href=\"https://github.com/zuley/vue-color-picker\" target=\"_blank\" rel=\"noopener\">Github 地址：https://github.com/zuley/vue-color-picker</a><br><a href=\"https://www.npmjs.com/package/vcolorpicker\" target=\"_blank\" rel=\"noopener\">npm 地址：https://www.npmjs.com/package/vcolorpicker</a><br><a href=\"http://vue-color-picker.rxshc.com\" target=\"_blank\" rel=\"noopener\">DEMO 演示：http://vue-color-picker.rxshc.com</a></p>\n<h2 id=\"九、参考文章\"><a href=\"#九、参考文章\" class=\"headerlink\" title=\"九、参考文章\"></a>九、参考文章</h2><p><a href=\"https://zhuanlan.zhihu.com/p/30948290\" target=\"_blank\" rel=\"noopener\">从零开始搭建Vue组件库 VV-UI</a><br><a href=\"https://cn.vuejs.org/v2/guide/plugins.html#%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6\" target=\"_blank\" rel=\"noopener\">Vue插件开发</a><br><a href=\"https://cn.vuejs.org/v2/guide/components.html\" target=\"_blank\" rel=\"noopener\">组件基础</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>市面上目前已有各种各样的UI组件库，比如 Element 和 iView，他们的强大毋庸置疑。但是我们面临的情况是需求越来越复杂，当它们不能再满足我们需求的时候，这个时候就有必要开发一套属于自己团队的组件库了。</p>\n<p>所以本文的目的就是让读者能通过此文，小能做一个简单的插件供人使用，大能架构和维护一个组件库不在话下。</p>\n<p>以下一个简单的颜色选择器插件vColorPicker讲述从开发到上线到npm的流程。</p>\n<p><a href=\"http://vue-color-picker.rxshc.com/\" target=\"_blank\" rel=\"noopener\">vColorPicker 插件 DEMO</a></p>","more":"<h2 id=\"一、技术栈\"><a href=\"#一、技术栈\" class=\"headerlink\" title=\"一、技术栈\"></a>一、技术栈</h2><p>如何通过新版脚手架创建项目，这里就不提了，自行看官方文档。</p>\n<ul>\n<li>Vue-cli3: 新版脚手架的库模式，可以让我们很轻松的创建打包一个库</li>\n<li>npm：组件库将存放在npm</li>\n<li>webpack：修改配置需要一点 webapck 的知识。</li>\n</ul>\n<h2 id=\"二、大纲\"><a href=\"#二、大纲\" class=\"headerlink\" title=\"二、大纲\"></a>二、大纲</h2><p>想要搭建一个组件库，我们必须先要有一个大概的思路。</p>\n<ol>\n<li>规划目录结构</li>\n<li>配置项目以支持目录结构</li>\n<li>编写组件</li>\n<li>编写示例</li>\n<li>配置使用库模式打包编译</li>\n<li>发布到npm</li>\n</ol>\n<h2 id=\"三、规划目录结构\"><a href=\"#三、规划目录结构\" class=\"headerlink\" title=\"三、规划目录结构\"></a>三、规划目录结构</h2><h3 id=\"1、创建项目\"><a href=\"#1、创建项目\" class=\"headerlink\" title=\"1、创建项目\"></a>1、创建项目</h3><p>在指定目录中使用命令创建一个默认的项目，或者根据自己需要自己选择。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vue create .</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、调整目录\"><a href=\"#2、调整目录\" class=\"headerlink\" title=\"2、调整目录\"></a>2、调整目录</h3><p>我们需要一个目录存放组件，一个目录存放示例，按照以下方式对目录进行改造。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">...</span><br><span class=\"line\">|-- examples      <span class=\"comment\">// 原 src 目录，改成 examples 用作示例展示</span></span><br><span class=\"line\">|-- packages      <span class=\"comment\">// 新增 packages 用于编写存放组件</span></span><br><span class=\"line\">...</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、配置项目以支持新的目录结构\"><a href=\"#四、配置项目以支持新的目录结构\" class=\"headerlink\" title=\"四、配置项目以支持新的目录结构\"></a>四、配置项目以支持新的目录结构</h2><p>我们通过上一步的目录改造后，会遇到两个问题。</p>\n<ol>\n<li>src目录更名为examples，导致项目无法运行</li>\n<li>新增packages目录，该目录未加入webpack编译</li>\n</ol>\n<p><strong>注：cli3 提供一个可选的 vue.config.js 配置文件。如果这个文件存在则他会被自动加载，所有的对项目和webpack的配置，都在这个文件中。</strong></p>\n<h3 id=\"1、重新配置入口，修改配置中的-pages-选项\"><a href=\"#1、重新配置入口，修改配置中的-pages-选项\" class=\"headerlink\" title=\"1、重新配置入口，修改配置中的 pages 选项\"></a>1、重新配置入口，修改配置中的 pages 选项</h3><p>新版 Vue CLI 支持使用 vue.config.js 中的 pages 选项构建一个多页面的应用。</p>\n<p>这里使用 pages 修改入口到 examples</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 修改 src 为 examples</span></span><br><span class=\"line\">  pages: &#123;</span><br><span class=\"line\">    index: &#123;</span><br><span class=\"line\">      entry: <span class=\"string\">'examples/main.js'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'public/index.html'</span>,</span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、支持对-packages-目录的处理，修改配置中的-chainWebpack-选项\"><a href=\"#2、支持对-packages-目录的处理，修改配置中的-chainWebpack-选项\" class=\"headerlink\" title=\"2、支持对 packages 目录的处理，修改配置中的 chainWebpack 选项\"></a>2、支持对 packages 目录的处理，修改配置中的 chainWebpack 选项</h3><p>packages 是我们新增的一个目录，默认是不被 webpack 处理的，所以需要添加配置对该目录的支持。</p>\n<p>chainWebpack 是一个函数，会接收一个基于 webpack-chain 的 ChainableConfig 实例。允许对内部的 webpack 配置进行更细粒度的修改。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 修改 src 为 examples</span></span><br><span class=\"line\">  pages: &#123;</span><br><span class=\"line\">    index: &#123;</span><br><span class=\"line\">      entry: <span class=\"string\">'examples/main.js'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'public/index.html'</span>,</span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 扩展 webpack 配置，使 packages 加入编译</span></span><br><span class=\"line\">  chainWebpack: <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">    config.module</span><br><span class=\"line\">      .rule(<span class=\"string\">'js'</span>)</span><br><span class=\"line\">      .include</span><br><span class=\"line\">        .add(<span class=\"string\">'packages'</span>)</span><br><span class=\"line\">        .end()</span><br><span class=\"line\">      .use(<span class=\"string\">'babel'</span>)</span><br><span class=\"line\">        .loader(<span class=\"string\">'babel-loader'</span>)</span><br><span class=\"line\">        .tap(<span class=\"function\"><span class=\"params\">options</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 修改它的选项...</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> options</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://cli.vuejs.org/zh/guide/webpack.html#%E9%93%BE%E5%BC%8F%E6%93%8D%E4%BD%9C-%E9%AB%98%E7%BA%A7\" target=\"_blank\" rel=\"noopener\">链式操作</a><br><a href=\"https://github.com/neutrinojs/webpack-chain\" target=\"_blank\" rel=\"noopener\">webpack-chain</a></p>\n<h2 id=\"五、编写组件\"><a href=\"#五、编写组件\" class=\"headerlink\" title=\"五、编写组件\"></a>五、编写组件</h2><p>以上我们已配置好对新目录架构的支持，接下来我们尝试编写组件。以下我们以一个已发布到 npm 的小插件作为示例。<br><a href=\"https://github.com/zuley/vue-color-picker\" target=\"_blank\" rel=\"noopener\">GitHub - 颜色选择器：vcolorpicker</a></p>\n<h3 id=\"1-创建一个新组件\"><a href=\"#1-创建一个新组件\" class=\"headerlink\" title=\"1. 创建一个新组件\"></a>1. 创建一个新组件</h3><ol>\n<li>在 packages 目录下，所有的单个组件都以文件夹的形式存储，所有这里创建一个目录 color-picker/</li>\n<li>在 color-picker/ 目录下创建 src/ 目录存储组件源码</li>\n<li>在 /color-picker 目录下创建 index.js 文件对外提供对组件的引用。<br>修改 /packages/color-picker/index.js文件，对外提供引用。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./packages/color-picker/index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导入组件，组件必须声明 name</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> colorPicker <span class=\"keyword\">from</span> <span class=\"string\">'./src/color-picker.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为组件提供 install 安装方法，供按需引入</span></span><br><span class=\"line\">colorPicker = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue</span>) </span>&#123;</span><br><span class=\"line\">  Vue.component(colorPicker.name, colorPicker)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认导出组件</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> colorPicker</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-整合所有的组件，对外导出，即一个完整的组件库\"><a href=\"#2-整合所有的组件，对外导出，即一个完整的组件库\" class=\"headerlink\" title=\"2. 整合所有的组件，对外导出，即一个完整的组件库\"></a>2. 整合所有的组件，对外导出，即一个完整的组件库</h3><p>修改 /packages/index.js 文件，对整个组件库进行导出。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./packages/index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导入颜色选择器组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> colorPicker <span class=\"keyword\">from</span> <span class=\"string\">'./color-picker'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 存储组件列表</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> components = [</span><br><span class=\"line\">  colorPicker</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义 install 方法，接收 Vue 作为参数。如果使用 use 注册插件，则所有的组件都将被注册</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断是否安装</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (install.installed) <span class=\"keyword\">return</span></span><br><span class=\"line\">  <span class=\"comment\">// 遍历注册全局组件</span></span><br><span class=\"line\">  components.map(<span class=\"function\"><span class=\"params\">component</span> =&gt;</span> Vue.component(component.name, component))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断是否是直接引入文件</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span> &amp;&amp; <span class=\"built_in\">window</span>.Vue) &#123;</span><br><span class=\"line\">  install(<span class=\"built_in\">window</span>.Vue)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 导出的对象必须具有 install，才能被 Vue.use() 方法安装</span></span><br><span class=\"line\">  install,</span><br><span class=\"line\">  <span class=\"comment\">// 以下是具体的组件列表</span></span><br><span class=\"line\">  colorPicker</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、编写示例\"><a href=\"#六、编写示例\" class=\"headerlink\" title=\"六、编写示例\"></a>六、编写示例</h2><h3 id=\"1、在示例中导入组件库\"><a href=\"#1、在示例中导入组件库\" class=\"headerlink\" title=\"1、在示例中导入组件库\"></a>1、在示例中导入组件库</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导入组件库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ColorPicker <span class=\"keyword\">from</span> <span class=\"string\">'./../packages/index'</span></span><br><span class=\"line\"><span class=\"comment\">// 注册组件库</span></span><br><span class=\"line\">Vue.use(ColorPicker)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、在示例中使用组件库中的组件\"><a href=\"#2、在示例中使用组件库中的组件\" class=\"headerlink\" title=\"2、在示例中使用组件库中的组件\"></a>2、在示例中使用组件库中的组件</h3><p>在上一步用使用 Vue.use() 全局注册后，即可在任意页面直接使用了，而不需另外引入。当然也可以按需引入。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;colorPicker v-model=<span class=\"string\">\"color\"</span> v-on:change=<span class=\"string\">\"headleChangeColor\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">colorPicker</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tdata () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\treturn &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tcolor: '#ff0000'</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">\tmethods: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\theadleChangeColor () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tconsole.log('颜色改变')</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"七、发布到-npm，方便直接在项目中引用\"><a href=\"#七、发布到-npm，方便直接在项目中引用\" class=\"headerlink\" title=\"七、发布到 npm，方便直接在项目中引用\"></a>七、发布到 npm，方便直接在项目中引用</h2><p>到此为止我们一个完整的组件库已经开发完成了，接下来就是发布到 npm 以供后期使用。</p>\n<h3 id=\"1、package-js-中新增一条编译为库的命令\"><a href=\"#1、package-js-中新增一条编译为库的命令\" class=\"headerlink\" title=\"1、package.js 中新增一条编译为库的命令\"></a>1、package.js 中新增一条编译为库的命令</h3><p>在库模式中，Vue是外置的，这意味着即使在代码中引入了 Vue，打包后的文件也是不包含Vue的。</p>\n<p><a href=\"https://cli.vuejs.org/zh/guide/build-targets.html#%E5%BA%93\" target=\"_blank\" rel=\"noopener\">Vue Cli3 构建目标：库</a></p>\n<p>以下我们在 scripts 中新增一条命令</p>\n<ul>\n<li>–target: 构建目标，默认为应用模式。这里修改为 lib 启用库模式。</li>\n<li>–dest : 输出目录，默认 dist。这里我们改成 lib</li>\n<li>[entry]: 最后一个参数为入口文件，默认为 src/App.vue。这里我们指定编译 packages/ 组件库目录。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"script\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t<span class=\"string\">\"lib\"</span>: <span class=\"string\">\"vue-cli-service build --target lib --name vcolorpicker --dest lib packages/index.js\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>执行编译库命令</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm run lib</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、配置-package-json-文件中发布到-npm-的字段\"><a href=\"#2、配置-package-json-文件中发布到-npm-的字段\" class=\"headerlink\" title=\"2、配置 package.json 文件中发布到 npm 的字段\"></a>2、配置 package.json 文件中发布到 npm 的字段</h3><ul>\n<li>name: 包名，该名字是唯一的。可在 npm 官网搜索名字，如果存在则需换个名字。</li>\n<li>version: 版本号，每次发布至 npm 需要修改版本号，不能和历史版本号相同。</li>\n<li>description: 描述。</li>\n<li>main: 入口文件，该字段需指向我们最终编译后的包文件。</li>\n<li>keyword：关键字，以空格分离希望用户最终搜索的词。</li>\n<li>author：作者</li>\n<li>private：是否私有，需要修改为 false 才能发布到 npm</li>\n<li>license： 开源协议</li>\n</ul>\n<p>以下为参考设置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"vcolorpicker\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.5\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"基于 Vue 的颜色选择器\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"lib/vcolorpicker.umd.min.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"keyword\"</span>: <span class=\"string\">\"vcolorpicker colorpicker color-picker\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"private\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、添加-npmignore-文件，设置忽略发布文件\"><a href=\"#3、添加-npmignore-文件，设置忽略发布文件\" class=\"headerlink\" title=\"3、添加 .npmignore 文件，设置忽略发布文件\"></a>3、添加 .npmignore 文件，设置忽略发布文件</h3><p>我们发布到 npm 中，只有编译后的 lib 目录、package.json、README.md才是需要被发布的。所以我们需要设置忽略目录和文件。</p>\n<p>和 .gitignore 的语法一样，具体需要提交什么文件，看各自的实际情况。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 忽略目录</span></span><br><span class=\"line\">examples/</span><br><span class=\"line\">packages/</span><br><span class=\"line\">public/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 忽略指定文件</span></span><br><span class=\"line\">vue.config.js</span><br><span class=\"line\">babel.config.js</span><br><span class=\"line\">*.map</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、登录到-npm\"><a href=\"#4、登录到-npm\" class=\"headerlink\" title=\"4、登录到 npm\"></a>4、登录到 npm</h3><p>首先需要到 npm 上注册一个账号，注册过程略。</p>\n<p>如果配置了淘宝镜像，先设置回npm镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm config <span class=\"built_in\">set</span> registry http://registry.npmjs.org</span><br></pre></td></tr></table></figure>\n<p>然后在终端执行登录命令，输入用户名、密码、邮箱即可登录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm login</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、发布到-npm\"><a href=\"#5、发布到-npm\" class=\"headerlink\" title=\"5、发布到 npm\"></a>5、发布到 npm</h3><p>执行发布命令，发布组件到 npm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm publish</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、发布成功\"><a href=\"#6、发布成功\" class=\"headerlink\" title=\"6、发布成功\"></a>6、发布成功</h3><p>发布成功后稍等几分钟，即可在 npm 官网搜索到。以下是刚提交的 vcolorpicker</p>\n<h3 id=\"7、使用新发布的组件库\"><a href=\"#7、使用新发布的组件库\" class=\"headerlink\" title=\"7、使用新发布的组件库\"></a>7、使用新发布的组件库</h3><p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install vcolorpicker -S</span><br></pre></td></tr></table></figure>\n<p>使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在 main.js 引入并注册</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> vcolorpicker <span class=\"keyword\">from</span> <span class=\"string\">'vcolorpicker'</span></span><br><span class=\"line\">Vue.use(vcolorpicker)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在组件中使用</span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;colorPicker v-model=<span class=\"string\">\"color\"</span> /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    data () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        color: '#ff0000'</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>\n<p>暂时没有做包含多个组件的时候的按需加载，以后研究了再补充。</p>\n<h2 id=\"八、项目地址\"><a href=\"#八、项目地址\" class=\"headerlink\" title=\"八、项目地址\"></a>八、项目地址</h2><p><a href=\"https://github.com/zuley/vue-color-picker\" target=\"_blank\" rel=\"noopener\">Github 地址：https://github.com/zuley/vue-color-picker</a><br><a href=\"https://www.npmjs.com/package/vcolorpicker\" target=\"_blank\" rel=\"noopener\">npm 地址：https://www.npmjs.com/package/vcolorpicker</a><br><a href=\"http://vue-color-picker.rxshc.com\" target=\"_blank\" rel=\"noopener\">DEMO 演示：http://vue-color-picker.rxshc.com</a></p>\n<h2 id=\"九、参考文章\"><a href=\"#九、参考文章\" class=\"headerlink\" title=\"九、参考文章\"></a>九、参考文章</h2><p><a href=\"https://zhuanlan.zhihu.com/p/30948290\" target=\"_blank\" rel=\"noopener\">从零开始搭建Vue组件库 VV-UI</a><br><a href=\"https://cn.vuejs.org/v2/guide/plugins.html#%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6\" target=\"_blank\" rel=\"noopener\">Vue插件开发</a><br><a href=\"https://cn.vuejs.org/v2/guide/components.html\" target=\"_blank\" rel=\"noopener\">组件基础</a></p>"},{"title":"CSS border三角、圆角图形生成技术详解","date":"2013-06-26T14:22:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n利用CSS的border属性可以生成一些图形，例如三角或是圆角。纯粹的CSS2的内容，没有兼容性的问题，我之前在纯CSS实现各类气球泡泡对话框效果一文中算是比较详细的讲述了CSS border属性生成三角的原理，以及实例。我觉得此技术相当实用的，故本文再次简单叙述一下，另外，本文还将展示可能并不为众人所知的CSS border圆角生成技术。好了，裹脚布的话就不说了，直接进入正题。\n<!-- more -->\n\n# CSS border生成三角技术简介\n## 效果抢鲜\n下图为使用CSS的border属性实现的三角效果：\n```\n// css 代码\n.test{\n  width: 0; \n  height: 0; \n  border-width: 20px 10px; \n  border-style: solid; \n  border-color: #ff3300 #ff3300 #ffffff #ffffff;\n}\n```\n如何实现的，为何会有这样的效果，不急，take it easy!\n## 梯形图案\n看下面这段样式：\n```\n.test{\n  width: 10px; \n  height: 10px; \n  border: 10px solid; \n  border-color: #ff3300 #0000ff #339966 #00ff00\n}\n```\n当某个div应用了上面这个样式后，结果会如何？见下图（截自Firefox3.5，IE浏览器有细节上的差异）：\n## 更进一步 – 部分边框透明\n现在，设想一下，如果我们现在只保留一个一个上边框，其余边框均transparent透明（或与背景色同色），那么是不是就只显示一个上面红色的边框了，我们测试下，与上面类似的代码，只是修改下其余三个边框的颜色。\n```\n.test{\n  width:10px; \n  height:10px; \n  border:10px solid; \n  border-color:#ff3300 #ffffff #ffffff #ffffff;\n}\n```\n结果如下图（截自Firefox3.5）：\n## 从梯形到三角\n上面的是梯形，我要想得到一个三角图案该怎么办呢？显然，很简单，把div的高宽都变成0，只留一边，不就是三角了吗？如下代码：\n\n```\n.test{\n  width: 0; \n  height: 0; \n  border: 10px solid; \n  border-color: #ff3300 #ffffff #ffffff #ffffff;}\n```\n结果如下（依旧截图自Firefox3.5）：\n## 从等腰直角三角形到普通等腰三角\n上图为等腰直角三角形，之所以为等腰直角，是因为所有的边框宽度是一样的，如果我们将边框宽度设置为不同，那会怎样？则会形成等腰三角形。如下代码：\n```\n.test{\n  width: 0; \n  height: 0; \n  border-width: 20px 10px; \n  border-style: solid; \n  border-color: #ff3300 #ffffff #ffffff #ffffff;}\n```\n得到的结果如下图：\n## 从等腰到不等腰\n我们可以不局限于保留一条边框，我们可以保留两条，于是我们可以告别等腰，得到更加锐利的三角，正如一开始所展示的那个三角：\n```\n.test{\n  width: 0; \n  height: 0; \n  border-width: 20px 10px; \n  border-style: solid; \n  border-color: #ff3300 #ff3300 #ffffff #ffffff;}\n```\n## 实际的应用\n关于应用，不多说，直接看图：\n说明：\n以上的测试代码纯粹为了说明原理，所以使用#ffffff白色边框，通过于背景融合来隐藏边框。在实际的操作中，应该使用transparent透明属性，例如border-color:#ff3300 #ff3300 transparent transparent;，这同样会有问题，IE6浏览器不支持transparent透明属性，不过没有关系，就border生成三角技术而言，直接设置对应的透明边框的border-style属性为dotted或是dashed即可解决这一问题，为什么使用dotted和dashed可以修复此问题呢？您有兴趣可以参见默尘的这篇文章Dotted&Dashed终极分析及IE6透明边框。\n\n# CSS border圆角生成技术简介\n## 我看圆角\n一提到圆角，我脑中闪过的词就是“定位”，“嵌套”，“模拟”，“渐进增强”，“滥用”。\n- 定位，也就是切四个角上下左右定位，这是淘宝首页的做法，但是面对IE6的奇偶bug只能当作看客；\n- 使用“嵌套”则不会有此问题，“嵌套”分图片背景嵌套和CSS边框嵌套，使用图片嵌套则图片的重用性，大小优化有待加强，边框嵌套则技术实现上有些难度；\n- 或使用“渐进增强”，CSS3 border-radius属性，而不要去鸟IE这类自我感觉良好的浏览器；\n- 或是学习Google使用CSS模拟，而一般的CSS模拟都是使用左右边框+背景色的方式1像素1像素的拼合成的。这类方法各有优缺点，需根据实际情况采用。对于满眼圆角的设计图我是很不喜欢的，该用则用，切勿为了圆角而圆角。\n\n## border圆角图案生成法\n这里介绍的实现圆角的得到与上面提到的都是不一样的，虽然也属于CSS模拟的范畴，但是其高效的程度确实相当惊人的，可谓最佳实践之一。\n我们先看看效果，见下图，截自Firefox3.6：\n上述效果的实现仅仅使用了三个标签，如下代码：\n```\n// html 代码\n<div class=\"box\">\n  <div class=\"top\"></div>\n  <div class=\"center\">我是一只小小鸟、小小鸟！</div>\n  <div class=\"bot\"></div>\n</div>\n\n// css 代码\n.box{\n  width:500px;\n}\n.top{\n  border-bottom:3px solid; \n  border-top-color:#cc0000; \n  border-bottom-color:#cc0000; \n  border-left:3px dotted transparent; \n  border-right:3px dotted transparent;\n}\n.center{\n  padding:10px 20px; \n  color:white; \n  font-size:14px; \n  background:#cc0000;\n}\n.bot{\n  border-top:3px solid; \n  border-top-color:#cc0000; \n  border-bottom-color:#cccccc; \n  border-left:3px dotted transparent; \n  border-right:3px dotted transparent;\n}\n```\n我们看看这段代码在IE6下的效果：\n\n这里的高效在于，仅仅使用了一层标签就模拟了3像素的圆角，按照曾经我对CSS圆角模拟的理解，模拟1像素的圆角需要一层标签(background+borderLeft+borderRight)，两像素的需要两层标签，三像素的需要三层标签。\n\n有点神奇，但是就像看刘谦的魔术一样，说穿了也就那么回事，其实这里的圆角模拟在本文的上面已经展示了，就是这样图片：\n\n您可能会疑问，是不是搞错图片啦，这显然不是一个模样的，非也非也，就本质上而言，圆角的实现与上面的梯形图就是同样的东西。现在，盯着上面这张图，我们想象一下，用力的想象，用想花姑娘的那番劲头想象——上面的梯形宽度越来越宽（不是拉伸），一直宽到500像素，是不是与上面实现的圆角的下边缘一致啊？\n\n也就是说，那个含有“我是一只小小鸟……”文字的圆角图形是有一个上梯形+矩形+下梯形组成的。参见下面的分离效果图：\n您可以狠狠地点击这里：CSS border圆角生成demo\n\n## 局限性\n人无完人，金无足赤，此方法虽然简洁高效，兼容性上佳，但是依然有局限性，在实现实色背景的圆角效果时，此方法可谓首选；如果是纯粹的圆角边框，此方法也可以实现，需要用到边框重叠，但是标签数几乎要翻倍，其权衡效用将大打折扣，反不如其他圆角方法来的实在。\n\n# 结语\n如果在web制作中，需要用的一些直接可以使用CSS+单标签模拟的图片，我的建议是“毫不犹豫使用CSS模拟”，例如实色的三角，或是实现实色的圆角效果，这可以说是最高效，最利于扩展维护的前端实现方法了。我们需要开阔的思维，而不要仅仅局限于眼前的技术，武侠中所谓的“无招胜有招”还是有着一定的哲学道理的，长远来看，意识与海纳百川的心态比当下的一点技术更来得重要。\n","source":"_posts/CSS-Triangle-Circle.md","raw":"---\ntitle: CSS border三角、圆角图形生成技术详解\ndate: 2013-06-26 22:22:22\ncategories: \n\t- CSS\ntags: \n\t- CSS技巧\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n利用CSS的border属性可以生成一些图形，例如三角或是圆角。纯粹的CSS2的内容，没有兼容性的问题，我之前在纯CSS实现各类气球泡泡对话框效果一文中算是比较详细的讲述了CSS border属性生成三角的原理，以及实例。我觉得此技术相当实用的，故本文再次简单叙述一下，另外，本文还将展示可能并不为众人所知的CSS border圆角生成技术。好了，裹脚布的话就不说了，直接进入正题。\n<!-- more -->\n\n# CSS border生成三角技术简介\n## 效果抢鲜\n下图为使用CSS的border属性实现的三角效果：\n```\n// css 代码\n.test{\n  width: 0; \n  height: 0; \n  border-width: 20px 10px; \n  border-style: solid; \n  border-color: #ff3300 #ff3300 #ffffff #ffffff;\n}\n```\n如何实现的，为何会有这样的效果，不急，take it easy!\n## 梯形图案\n看下面这段样式：\n```\n.test{\n  width: 10px; \n  height: 10px; \n  border: 10px solid; \n  border-color: #ff3300 #0000ff #339966 #00ff00\n}\n```\n当某个div应用了上面这个样式后，结果会如何？见下图（截自Firefox3.5，IE浏览器有细节上的差异）：\n## 更进一步 – 部分边框透明\n现在，设想一下，如果我们现在只保留一个一个上边框，其余边框均transparent透明（或与背景色同色），那么是不是就只显示一个上面红色的边框了，我们测试下，与上面类似的代码，只是修改下其余三个边框的颜色。\n```\n.test{\n  width:10px; \n  height:10px; \n  border:10px solid; \n  border-color:#ff3300 #ffffff #ffffff #ffffff;\n}\n```\n结果如下图（截自Firefox3.5）：\n## 从梯形到三角\n上面的是梯形，我要想得到一个三角图案该怎么办呢？显然，很简单，把div的高宽都变成0，只留一边，不就是三角了吗？如下代码：\n\n```\n.test{\n  width: 0; \n  height: 0; \n  border: 10px solid; \n  border-color: #ff3300 #ffffff #ffffff #ffffff;}\n```\n结果如下（依旧截图自Firefox3.5）：\n## 从等腰直角三角形到普通等腰三角\n上图为等腰直角三角形，之所以为等腰直角，是因为所有的边框宽度是一样的，如果我们将边框宽度设置为不同，那会怎样？则会形成等腰三角形。如下代码：\n```\n.test{\n  width: 0; \n  height: 0; \n  border-width: 20px 10px; \n  border-style: solid; \n  border-color: #ff3300 #ffffff #ffffff #ffffff;}\n```\n得到的结果如下图：\n## 从等腰到不等腰\n我们可以不局限于保留一条边框，我们可以保留两条，于是我们可以告别等腰，得到更加锐利的三角，正如一开始所展示的那个三角：\n```\n.test{\n  width: 0; \n  height: 0; \n  border-width: 20px 10px; \n  border-style: solid; \n  border-color: #ff3300 #ff3300 #ffffff #ffffff;}\n```\n## 实际的应用\n关于应用，不多说，直接看图：\n说明：\n以上的测试代码纯粹为了说明原理，所以使用#ffffff白色边框，通过于背景融合来隐藏边框。在实际的操作中，应该使用transparent透明属性，例如border-color:#ff3300 #ff3300 transparent transparent;，这同样会有问题，IE6浏览器不支持transparent透明属性，不过没有关系，就border生成三角技术而言，直接设置对应的透明边框的border-style属性为dotted或是dashed即可解决这一问题，为什么使用dotted和dashed可以修复此问题呢？您有兴趣可以参见默尘的这篇文章Dotted&Dashed终极分析及IE6透明边框。\n\n# CSS border圆角生成技术简介\n## 我看圆角\n一提到圆角，我脑中闪过的词就是“定位”，“嵌套”，“模拟”，“渐进增强”，“滥用”。\n- 定位，也就是切四个角上下左右定位，这是淘宝首页的做法，但是面对IE6的奇偶bug只能当作看客；\n- 使用“嵌套”则不会有此问题，“嵌套”分图片背景嵌套和CSS边框嵌套，使用图片嵌套则图片的重用性，大小优化有待加强，边框嵌套则技术实现上有些难度；\n- 或使用“渐进增强”，CSS3 border-radius属性，而不要去鸟IE这类自我感觉良好的浏览器；\n- 或是学习Google使用CSS模拟，而一般的CSS模拟都是使用左右边框+背景色的方式1像素1像素的拼合成的。这类方法各有优缺点，需根据实际情况采用。对于满眼圆角的设计图我是很不喜欢的，该用则用，切勿为了圆角而圆角。\n\n## border圆角图案生成法\n这里介绍的实现圆角的得到与上面提到的都是不一样的，虽然也属于CSS模拟的范畴，但是其高效的程度确实相当惊人的，可谓最佳实践之一。\n我们先看看效果，见下图，截自Firefox3.6：\n上述效果的实现仅仅使用了三个标签，如下代码：\n```\n// html 代码\n<div class=\"box\">\n  <div class=\"top\"></div>\n  <div class=\"center\">我是一只小小鸟、小小鸟！</div>\n  <div class=\"bot\"></div>\n</div>\n\n// css 代码\n.box{\n  width:500px;\n}\n.top{\n  border-bottom:3px solid; \n  border-top-color:#cc0000; \n  border-bottom-color:#cc0000; \n  border-left:3px dotted transparent; \n  border-right:3px dotted transparent;\n}\n.center{\n  padding:10px 20px; \n  color:white; \n  font-size:14px; \n  background:#cc0000;\n}\n.bot{\n  border-top:3px solid; \n  border-top-color:#cc0000; \n  border-bottom-color:#cccccc; \n  border-left:3px dotted transparent; \n  border-right:3px dotted transparent;\n}\n```\n我们看看这段代码在IE6下的效果：\n\n这里的高效在于，仅仅使用了一层标签就模拟了3像素的圆角，按照曾经我对CSS圆角模拟的理解，模拟1像素的圆角需要一层标签(background+borderLeft+borderRight)，两像素的需要两层标签，三像素的需要三层标签。\n\n有点神奇，但是就像看刘谦的魔术一样，说穿了也就那么回事，其实这里的圆角模拟在本文的上面已经展示了，就是这样图片：\n\n您可能会疑问，是不是搞错图片啦，这显然不是一个模样的，非也非也，就本质上而言，圆角的实现与上面的梯形图就是同样的东西。现在，盯着上面这张图，我们想象一下，用力的想象，用想花姑娘的那番劲头想象——上面的梯形宽度越来越宽（不是拉伸），一直宽到500像素，是不是与上面实现的圆角的下边缘一致啊？\n\n也就是说，那个含有“我是一只小小鸟……”文字的圆角图形是有一个上梯形+矩形+下梯形组成的。参见下面的分离效果图：\n您可以狠狠地点击这里：CSS border圆角生成demo\n\n## 局限性\n人无完人，金无足赤，此方法虽然简洁高效，兼容性上佳，但是依然有局限性，在实现实色背景的圆角效果时，此方法可谓首选；如果是纯粹的圆角边框，此方法也可以实现，需要用到边框重叠，但是标签数几乎要翻倍，其权衡效用将大打折扣，反不如其他圆角方法来的实在。\n\n# 结语\n如果在web制作中，需要用的一些直接可以使用CSS+单标签模拟的图片，我的建议是“毫不犹豫使用CSS模拟”，例如实色的三角，或是实现实色的圆角效果，这可以说是最高效，最利于扩展维护的前端实现方法了。我们需要开阔的思维，而不要仅仅局限于眼前的技术，武侠中所谓的“无招胜有招”还是有着一定的哲学道理的，长远来看，意识与海纳百川的心态比当下的一点技术更来得重要。\n","slug":"CSS-Triangle-Circle","published":1,"updated":"2020-04-02T03:20:12.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grv10005ooa65wbd588y","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>利用CSS的border属性可以生成一些图形，例如三角或是圆角。纯粹的CSS2的内容，没有兼容性的问题，我之前在纯CSS实现各类气球泡泡对话框效果一文中算是比较详细的讲述了CSS border属性生成三角的原理，以及实例。我觉得此技术相当实用的，故本文再次简单叙述一下，另外，本文还将展示可能并不为众人所知的CSS border圆角生成技术。好了，裹脚布的话就不说了，直接进入正题。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"CSS-border生成三角技术简介\"><a href=\"#CSS-border生成三角技术简介\" class=\"headerlink\" title=\"CSS border生成三角技术简介\"></a>CSS border生成三角技术简介</h1><h2 id=\"效果抢鲜\"><a href=\"#效果抢鲜\" class=\"headerlink\" title=\"效果抢鲜\"></a>效果抢鲜</h2><p>下图为使用CSS的border属性实现的三角效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; css 代码</span><br><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width: 0; </span><br><span class=\"line\">  height: 0; </span><br><span class=\"line\">  border-width: 20px 10px; </span><br><span class=\"line\">  border-style: solid; </span><br><span class=\"line\">  border-color: #ff3300 #ff3300 #ffffff #ffffff;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何实现的，为何会有这样的效果，不急，take it easy!</p>\n<h2 id=\"梯形图案\"><a href=\"#梯形图案\" class=\"headerlink\" title=\"梯形图案\"></a>梯形图案</h2><p>看下面这段样式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width: 10px; </span><br><span class=\"line\">  height: 10px; </span><br><span class=\"line\">  border: 10px solid; </span><br><span class=\"line\">  border-color: #ff3300 #0000ff #339966 #00ff00</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当某个div应用了上面这个样式后，结果会如何？见下图（截自Firefox3.5，IE浏览器有细节上的差异）：</p>\n<h2 id=\"更进一步-–-部分边框透明\"><a href=\"#更进一步-–-部分边框透明\" class=\"headerlink\" title=\"更进一步 – 部分边框透明\"></a>更进一步 – 部分边框透明</h2><p>现在，设想一下，如果我们现在只保留一个一个上边框，其余边框均transparent透明（或与背景色同色），那么是不是就只显示一个上面红色的边框了，我们测试下，与上面类似的代码，只是修改下其余三个边框的颜色。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width:10px; </span><br><span class=\"line\">  height:10px; </span><br><span class=\"line\">  border:10px solid; </span><br><span class=\"line\">  border-color:#ff3300 #ffffff #ffffff #ffffff;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下图（截自Firefox3.5）：</p>\n<h2 id=\"从梯形到三角\"><a href=\"#从梯形到三角\" class=\"headerlink\" title=\"从梯形到三角\"></a>从梯形到三角</h2><p>上面的是梯形，我要想得到一个三角图案该怎么办呢？显然，很简单，把div的高宽都变成0，只留一边，不就是三角了吗？如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width: 0; </span><br><span class=\"line\">  height: 0; </span><br><span class=\"line\">  border: 10px solid; </span><br><span class=\"line\">  border-color: #ff3300 #ffffff #ffffff #ffffff;&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下（依旧截图自Firefox3.5）：</p>\n<h2 id=\"从等腰直角三角形到普通等腰三角\"><a href=\"#从等腰直角三角形到普通等腰三角\" class=\"headerlink\" title=\"从等腰直角三角形到普通等腰三角\"></a>从等腰直角三角形到普通等腰三角</h2><p>上图为等腰直角三角形，之所以为等腰直角，是因为所有的边框宽度是一样的，如果我们将边框宽度设置为不同，那会怎样？则会形成等腰三角形。如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width: 0; </span><br><span class=\"line\">  height: 0; </span><br><span class=\"line\">  border-width: 20px 10px; </span><br><span class=\"line\">  border-style: solid; </span><br><span class=\"line\">  border-color: #ff3300 #ffffff #ffffff #ffffff;&#125;</span><br></pre></td></tr></table></figure>\n<p>得到的结果如下图：</p>\n<h2 id=\"从等腰到不等腰\"><a href=\"#从等腰到不等腰\" class=\"headerlink\" title=\"从等腰到不等腰\"></a>从等腰到不等腰</h2><p>我们可以不局限于保留一条边框，我们可以保留两条，于是我们可以告别等腰，得到更加锐利的三角，正如一开始所展示的那个三角：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width: 0; </span><br><span class=\"line\">  height: 0; </span><br><span class=\"line\">  border-width: 20px 10px; </span><br><span class=\"line\">  border-style: solid; </span><br><span class=\"line\">  border-color: #ff3300 #ff3300 #ffffff #ffffff;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实际的应用\"><a href=\"#实际的应用\" class=\"headerlink\" title=\"实际的应用\"></a>实际的应用</h2><p>关于应用，不多说，直接看图：<br>说明：<br>以上的测试代码纯粹为了说明原理，所以使用#ffffff白色边框，通过于背景融合来隐藏边框。在实际的操作中，应该使用transparent透明属性，例如border-color:#ff3300 #ff3300 transparent transparent;，这同样会有问题，IE6浏览器不支持transparent透明属性，不过没有关系，就border生成三角技术而言，直接设置对应的透明边框的border-style属性为dotted或是dashed即可解决这一问题，为什么使用dotted和dashed可以修复此问题呢？您有兴趣可以参见默尘的这篇文章Dotted&amp;Dashed终极分析及IE6透明边框。</p>\n<h1 id=\"CSS-border圆角生成技术简介\"><a href=\"#CSS-border圆角生成技术简介\" class=\"headerlink\" title=\"CSS border圆角生成技术简介\"></a>CSS border圆角生成技术简介</h1><h2 id=\"我看圆角\"><a href=\"#我看圆角\" class=\"headerlink\" title=\"我看圆角\"></a>我看圆角</h2><p>一提到圆角，我脑中闪过的词就是“定位”，“嵌套”，“模拟”，“渐进增强”，“滥用”。</p>\n<ul>\n<li>定位，也就是切四个角上下左右定位，这是淘宝首页的做法，但是面对IE6的奇偶bug只能当作看客；</li>\n<li>使用“嵌套”则不会有此问题，“嵌套”分图片背景嵌套和CSS边框嵌套，使用图片嵌套则图片的重用性，大小优化有待加强，边框嵌套则技术实现上有些难度；</li>\n<li>或使用“渐进增强”，CSS3 border-radius属性，而不要去鸟IE这类自我感觉良好的浏览器；</li>\n<li>或是学习Google使用CSS模拟，而一般的CSS模拟都是使用左右边框+背景色的方式1像素1像素的拼合成的。这类方法各有优缺点，需根据实际情况采用。对于满眼圆角的设计图我是很不喜欢的，该用则用，切勿为了圆角而圆角。</li>\n</ul>\n<h2 id=\"border圆角图案生成法\"><a href=\"#border圆角图案生成法\" class=\"headerlink\" title=\"border圆角图案生成法\"></a>border圆角图案生成法</h2><p>这里介绍的实现圆角的得到与上面提到的都是不一样的，虽然也属于CSS模拟的范畴，但是其高效的程度确实相当惊人的，可谓最佳实践之一。<br>我们先看看效果，见下图，截自Firefox3.6：<br>上述效果的实现仅仅使用了三个标签，如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; html 代码</span><br><span class=\"line\">&lt;div class&#x3D;&quot;box&quot;&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;top&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;center&quot;&gt;我是一只小小鸟、小小鸟！&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;bot&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; css 代码</span><br><span class=\"line\">.box&#123;</span><br><span class=\"line\">  width:500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.top&#123;</span><br><span class=\"line\">  border-bottom:3px solid; </span><br><span class=\"line\">  border-top-color:#cc0000; </span><br><span class=\"line\">  border-bottom-color:#cc0000; </span><br><span class=\"line\">  border-left:3px dotted transparent; </span><br><span class=\"line\">  border-right:3px dotted transparent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.center&#123;</span><br><span class=\"line\">  padding:10px 20px; </span><br><span class=\"line\">  color:white; </span><br><span class=\"line\">  font-size:14px; </span><br><span class=\"line\">  background:#cc0000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.bot&#123;</span><br><span class=\"line\">  border-top:3px solid; </span><br><span class=\"line\">  border-top-color:#cc0000; </span><br><span class=\"line\">  border-bottom-color:#cccccc; </span><br><span class=\"line\">  border-left:3px dotted transparent; </span><br><span class=\"line\">  border-right:3px dotted transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们看看这段代码在IE6下的效果：</p>\n<p>这里的高效在于，仅仅使用了一层标签就模拟了3像素的圆角，按照曾经我对CSS圆角模拟的理解，模拟1像素的圆角需要一层标签(background+borderLeft+borderRight)，两像素的需要两层标签，三像素的需要三层标签。</p>\n<p>有点神奇，但是就像看刘谦的魔术一样，说穿了也就那么回事，其实这里的圆角模拟在本文的上面已经展示了，就是这样图片：</p>\n<p>您可能会疑问，是不是搞错图片啦，这显然不是一个模样的，非也非也，就本质上而言，圆角的实现与上面的梯形图就是同样的东西。现在，盯着上面这张图，我们想象一下，用力的想象，用想花姑娘的那番劲头想象——上面的梯形宽度越来越宽（不是拉伸），一直宽到500像素，是不是与上面实现的圆角的下边缘一致啊？</p>\n<p>也就是说，那个含有“我是一只小小鸟……”文字的圆角图形是有一个上梯形+矩形+下梯形组成的。参见下面的分离效果图：<br>您可以狠狠地点击这里：CSS border圆角生成demo</p>\n<h2 id=\"局限性\"><a href=\"#局限性\" class=\"headerlink\" title=\"局限性\"></a>局限性</h2><p>人无完人，金无足赤，此方法虽然简洁高效，兼容性上佳，但是依然有局限性，在实现实色背景的圆角效果时，此方法可谓首选；如果是纯粹的圆角边框，此方法也可以实现，需要用到边框重叠，但是标签数几乎要翻倍，其权衡效用将大打折扣，反不如其他圆角方法来的实在。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>如果在web制作中，需要用的一些直接可以使用CSS+单标签模拟的图片，我的建议是“毫不犹豫使用CSS模拟”，例如实色的三角，或是实现实色的圆角效果，这可以说是最高效，最利于扩展维护的前端实现方法了。我们需要开阔的思维，而不要仅仅局限于眼前的技术，武侠中所谓的“无招胜有招”还是有着一定的哲学道理的，长远来看，意识与海纳百川的心态比当下的一点技术更来得重要。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>利用CSS的border属性可以生成一些图形，例如三角或是圆角。纯粹的CSS2的内容，没有兼容性的问题，我之前在纯CSS实现各类气球泡泡对话框效果一文中算是比较详细的讲述了CSS border属性生成三角的原理，以及实例。我觉得此技术相当实用的，故本文再次简单叙述一下，另外，本文还将展示可能并不为众人所知的CSS border圆角生成技术。好了，裹脚布的话就不说了，直接进入正题。</p>","more":"<h1 id=\"CSS-border生成三角技术简介\"><a href=\"#CSS-border生成三角技术简介\" class=\"headerlink\" title=\"CSS border生成三角技术简介\"></a>CSS border生成三角技术简介</h1><h2 id=\"效果抢鲜\"><a href=\"#效果抢鲜\" class=\"headerlink\" title=\"效果抢鲜\"></a>效果抢鲜</h2><p>下图为使用CSS的border属性实现的三角效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; css 代码</span><br><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width: 0; </span><br><span class=\"line\">  height: 0; </span><br><span class=\"line\">  border-width: 20px 10px; </span><br><span class=\"line\">  border-style: solid; </span><br><span class=\"line\">  border-color: #ff3300 #ff3300 #ffffff #ffffff;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何实现的，为何会有这样的效果，不急，take it easy!</p>\n<h2 id=\"梯形图案\"><a href=\"#梯形图案\" class=\"headerlink\" title=\"梯形图案\"></a>梯形图案</h2><p>看下面这段样式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width: 10px; </span><br><span class=\"line\">  height: 10px; </span><br><span class=\"line\">  border: 10px solid; </span><br><span class=\"line\">  border-color: #ff3300 #0000ff #339966 #00ff00</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当某个div应用了上面这个样式后，结果会如何？见下图（截自Firefox3.5，IE浏览器有细节上的差异）：</p>\n<h2 id=\"更进一步-–-部分边框透明\"><a href=\"#更进一步-–-部分边框透明\" class=\"headerlink\" title=\"更进一步 – 部分边框透明\"></a>更进一步 – 部分边框透明</h2><p>现在，设想一下，如果我们现在只保留一个一个上边框，其余边框均transparent透明（或与背景色同色），那么是不是就只显示一个上面红色的边框了，我们测试下，与上面类似的代码，只是修改下其余三个边框的颜色。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width:10px; </span><br><span class=\"line\">  height:10px; </span><br><span class=\"line\">  border:10px solid; </span><br><span class=\"line\">  border-color:#ff3300 #ffffff #ffffff #ffffff;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下图（截自Firefox3.5）：</p>\n<h2 id=\"从梯形到三角\"><a href=\"#从梯形到三角\" class=\"headerlink\" title=\"从梯形到三角\"></a>从梯形到三角</h2><p>上面的是梯形，我要想得到一个三角图案该怎么办呢？显然，很简单，把div的高宽都变成0，只留一边，不就是三角了吗？如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width: 0; </span><br><span class=\"line\">  height: 0; </span><br><span class=\"line\">  border: 10px solid; </span><br><span class=\"line\">  border-color: #ff3300 #ffffff #ffffff #ffffff;&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下（依旧截图自Firefox3.5）：</p>\n<h2 id=\"从等腰直角三角形到普通等腰三角\"><a href=\"#从等腰直角三角形到普通等腰三角\" class=\"headerlink\" title=\"从等腰直角三角形到普通等腰三角\"></a>从等腰直角三角形到普通等腰三角</h2><p>上图为等腰直角三角形，之所以为等腰直角，是因为所有的边框宽度是一样的，如果我们将边框宽度设置为不同，那会怎样？则会形成等腰三角形。如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width: 0; </span><br><span class=\"line\">  height: 0; </span><br><span class=\"line\">  border-width: 20px 10px; </span><br><span class=\"line\">  border-style: solid; </span><br><span class=\"line\">  border-color: #ff3300 #ffffff #ffffff #ffffff;&#125;</span><br></pre></td></tr></table></figure>\n<p>得到的结果如下图：</p>\n<h2 id=\"从等腰到不等腰\"><a href=\"#从等腰到不等腰\" class=\"headerlink\" title=\"从等腰到不等腰\"></a>从等腰到不等腰</h2><p>我们可以不局限于保留一条边框，我们可以保留两条，于是我们可以告别等腰，得到更加锐利的三角，正如一开始所展示的那个三角：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width: 0; </span><br><span class=\"line\">  height: 0; </span><br><span class=\"line\">  border-width: 20px 10px; </span><br><span class=\"line\">  border-style: solid; </span><br><span class=\"line\">  border-color: #ff3300 #ff3300 #ffffff #ffffff;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实际的应用\"><a href=\"#实际的应用\" class=\"headerlink\" title=\"实际的应用\"></a>实际的应用</h2><p>关于应用，不多说，直接看图：<br>说明：<br>以上的测试代码纯粹为了说明原理，所以使用#ffffff白色边框，通过于背景融合来隐藏边框。在实际的操作中，应该使用transparent透明属性，例如border-color:#ff3300 #ff3300 transparent transparent;，这同样会有问题，IE6浏览器不支持transparent透明属性，不过没有关系，就border生成三角技术而言，直接设置对应的透明边框的border-style属性为dotted或是dashed即可解决这一问题，为什么使用dotted和dashed可以修复此问题呢？您有兴趣可以参见默尘的这篇文章Dotted&amp;Dashed终极分析及IE6透明边框。</p>\n<h1 id=\"CSS-border圆角生成技术简介\"><a href=\"#CSS-border圆角生成技术简介\" class=\"headerlink\" title=\"CSS border圆角生成技术简介\"></a>CSS border圆角生成技术简介</h1><h2 id=\"我看圆角\"><a href=\"#我看圆角\" class=\"headerlink\" title=\"我看圆角\"></a>我看圆角</h2><p>一提到圆角，我脑中闪过的词就是“定位”，“嵌套”，“模拟”，“渐进增强”，“滥用”。</p>\n<ul>\n<li>定位，也就是切四个角上下左右定位，这是淘宝首页的做法，但是面对IE6的奇偶bug只能当作看客；</li>\n<li>使用“嵌套”则不会有此问题，“嵌套”分图片背景嵌套和CSS边框嵌套，使用图片嵌套则图片的重用性，大小优化有待加强，边框嵌套则技术实现上有些难度；</li>\n<li>或使用“渐进增强”，CSS3 border-radius属性，而不要去鸟IE这类自我感觉良好的浏览器；</li>\n<li>或是学习Google使用CSS模拟，而一般的CSS模拟都是使用左右边框+背景色的方式1像素1像素的拼合成的。这类方法各有优缺点，需根据实际情况采用。对于满眼圆角的设计图我是很不喜欢的，该用则用，切勿为了圆角而圆角。</li>\n</ul>\n<h2 id=\"border圆角图案生成法\"><a href=\"#border圆角图案生成法\" class=\"headerlink\" title=\"border圆角图案生成法\"></a>border圆角图案生成法</h2><p>这里介绍的实现圆角的得到与上面提到的都是不一样的，虽然也属于CSS模拟的范畴，但是其高效的程度确实相当惊人的，可谓最佳实践之一。<br>我们先看看效果，见下图，截自Firefox3.6：<br>上述效果的实现仅仅使用了三个标签，如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; html 代码</span><br><span class=\"line\">&lt;div class&#x3D;&quot;box&quot;&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;top&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;center&quot;&gt;我是一只小小鸟、小小鸟！&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;bot&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; css 代码</span><br><span class=\"line\">.box&#123;</span><br><span class=\"line\">  width:500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.top&#123;</span><br><span class=\"line\">  border-bottom:3px solid; </span><br><span class=\"line\">  border-top-color:#cc0000; </span><br><span class=\"line\">  border-bottom-color:#cc0000; </span><br><span class=\"line\">  border-left:3px dotted transparent; </span><br><span class=\"line\">  border-right:3px dotted transparent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.center&#123;</span><br><span class=\"line\">  padding:10px 20px; </span><br><span class=\"line\">  color:white; </span><br><span class=\"line\">  font-size:14px; </span><br><span class=\"line\">  background:#cc0000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.bot&#123;</span><br><span class=\"line\">  border-top:3px solid; </span><br><span class=\"line\">  border-top-color:#cc0000; </span><br><span class=\"line\">  border-bottom-color:#cccccc; </span><br><span class=\"line\">  border-left:3px dotted transparent; </span><br><span class=\"line\">  border-right:3px dotted transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们看看这段代码在IE6下的效果：</p>\n<p>这里的高效在于，仅仅使用了一层标签就模拟了3像素的圆角，按照曾经我对CSS圆角模拟的理解，模拟1像素的圆角需要一层标签(background+borderLeft+borderRight)，两像素的需要两层标签，三像素的需要三层标签。</p>\n<p>有点神奇，但是就像看刘谦的魔术一样，说穿了也就那么回事，其实这里的圆角模拟在本文的上面已经展示了，就是这样图片：</p>\n<p>您可能会疑问，是不是搞错图片啦，这显然不是一个模样的，非也非也，就本质上而言，圆角的实现与上面的梯形图就是同样的东西。现在，盯着上面这张图，我们想象一下，用力的想象，用想花姑娘的那番劲头想象——上面的梯形宽度越来越宽（不是拉伸），一直宽到500像素，是不是与上面实现的圆角的下边缘一致啊？</p>\n<p>也就是说，那个含有“我是一只小小鸟……”文字的圆角图形是有一个上梯形+矩形+下梯形组成的。参见下面的分离效果图：<br>您可以狠狠地点击这里：CSS border圆角生成demo</p>\n<h2 id=\"局限性\"><a href=\"#局限性\" class=\"headerlink\" title=\"局限性\"></a>局限性</h2><p>人无完人，金无足赤，此方法虽然简洁高效，兼容性上佳，但是依然有局限性，在实现实色背景的圆角效果时，此方法可谓首选；如果是纯粹的圆角边框，此方法也可以实现，需要用到边框重叠，但是标签数几乎要翻倍，其权衡效用将大打折扣，反不如其他圆角方法来的实在。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>如果在web制作中，需要用的一些直接可以使用CSS+单标签模拟的图片，我的建议是“毫不犹豫使用CSS模拟”，例如实色的三角，或是实现实色的圆角效果，这可以说是最高效，最利于扩展维护的前端实现方法了。我们需要开阔的思维，而不要仅仅局限于眼前的技术，武侠中所谓的“无招胜有招”还是有着一定的哲学道理的，长远来看，意识与海纳百川的心态比当下的一点技术更来得重要。</p>"},{"title":"国内配置Electron开发环境的正确方式【转载】","date":"2020-04-07T10:22:22.000Z","_content":"\n# 前言\n\n最近在做electron相关开发，疲于网络环境的种种限制，找遍了互联网相关资料，终于找到一篇比较全面的文章，怕丢了转过来。\n<!-- more -->\n[转载](https://blog.yasking.org/a/zh-install-electron-development-2020.html)","source":"_posts/Electron-Offline-Build.md","raw":"---\ntitle: 国内配置Electron开发环境的正确方式【转载】\ndate: 2020-04-07 18:22:22\ncategories: \n\t- Electron\n---\n\n# 前言\n\n最近在做electron相关开发，疲于网络环境的种种限制，找遍了互联网相关资料，终于找到一篇比较全面的文章，怕丢了转过来。\n<!-- more -->\n[转载](https://blog.yasking.org/a/zh-install-electron-development-2020.html)","slug":"Electron-Offline-Build","published":1,"updated":"2020-04-15T15:02:02.851Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grv70008ooa6e3ma6tsp","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在做electron相关开发，疲于网络环境的种种限制，找遍了互联网相关资料，终于找到一篇比较全面的文章，怕丢了转过来。</p>\n<a id=\"more\"></a>\n<p><a href=\"https://blog.yasking.org/a/zh-install-electron-development-2020.html\" target=\"_blank\" rel=\"noopener\">转载</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在做electron相关开发，疲于网络环境的种种限制，找遍了互联网相关资料，终于找到一篇比较全面的文章，怕丢了转过来。</p>","more":"<p><a href=\"https://blog.yasking.org/a/zh-install-electron-development-2020.html\" target=\"_blank\" rel=\"noopener\">转载</a></p>"},{"title":"es6中箭头函数没了arguments怎么办？","date":"2020-01-22T06:50:21.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\nes6中，arguments被取消掉了，但是函数还是会有参数不确定的时候，那么我们该怎么办呢，接下来将介绍一下如何在es6中完成arguments一样的效果。\n<!-- more -->\n\n## 剩余运算符\n``` js\n// js代码\n\nlet func = (...rest) => {\n  console.log(rest)\n  //[1,2,3]\n}\n\nfunc(1,2,3)\n```\n\n看上面的代码，有的朋友会问，这`...`的操作不应该是展开运算符么？是的，扩展运算符与剩余操作符都是以三点开头的操作符，二者长的很像，只是在用法上有些差别。它们已经被 ES6 数组支持，能解决很多之前 arguments 解决起来很麻烦的问题。\n\n简单来说剩余运算是在参数上使用的。\n","source":"_posts/Es6-arrowFunc-arguments.md","raw":"---\ntitle: es6中箭头函数没了arguments怎么办？\ndate: 2020-01-22 14:50:21\ncategories: \n\t- 前端技术\ntags: \n\t- es6\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\nes6中，arguments被取消掉了，但是函数还是会有参数不确定的时候，那么我们该怎么办呢，接下来将介绍一下如何在es6中完成arguments一样的效果。\n<!-- more -->\n\n## 剩余运算符\n``` js\n// js代码\n\nlet func = (...rest) => {\n  console.log(rest)\n  //[1,2,3]\n}\n\nfunc(1,2,3)\n```\n\n看上面的代码，有的朋友会问，这`...`的操作不应该是展开运算符么？是的，扩展运算符与剩余操作符都是以三点开头的操作符，二者长的很像，只是在用法上有些差别。它们已经被 ES6 数组支持，能解决很多之前 arguments 解决起来很麻烦的问题。\n\n简单来说剩余运算是在参数上使用的。\n","slug":"Es6-arrowFunc-arguments","published":1,"updated":"2020-01-22T07:34:29.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grv90009ooa63gw57laq","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>es6中，arguments被取消掉了，但是函数还是会有参数不确定的时候，那么我们该怎么办呢，接下来将介绍一下如何在es6中完成arguments一样的效果。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"剩余运算符\"><a href=\"#剩余运算符\" class=\"headerlink\" title=\"剩余运算符\"></a>剩余运算符</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"function\">(<span class=\"params\">...rest</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(rest)</span><br><span class=\"line\">  <span class=\"comment\">//[1,2,3]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<p>看上面的代码，有的朋友会问，这<code>...</code>的操作不应该是展开运算符么？是的，扩展运算符与剩余操作符都是以三点开头的操作符，二者长的很像，只是在用法上有些差别。它们已经被 ES6 数组支持，能解决很多之前 arguments 解决起来很麻烦的问题。</p>\n<p>简单来说剩余运算是在参数上使用的。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>es6中，arguments被取消掉了，但是函数还是会有参数不确定的时候，那么我们该怎么办呢，接下来将介绍一下如何在es6中完成arguments一样的效果。</p>","more":"<h2 id=\"剩余运算符\"><a href=\"#剩余运算符\" class=\"headerlink\" title=\"剩余运算符\"></a>剩余运算符</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"function\">(<span class=\"params\">...rest</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(rest)</span><br><span class=\"line\">  <span class=\"comment\">//[1,2,3]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<p>看上面的代码，有的朋友会问，这<code>...</code>的操作不应该是展开运算符么？是的，扩展运算符与剩余操作符都是以三点开头的操作符，二者长的很像，只是在用法上有些差别。它们已经被 ES6 数组支持，能解决很多之前 arguments 解决起来很麻烦的问题。</p>\n<p>简单来说剩余运算是在参数上使用的。</p>"},{"title":"数组常见操作 ---- 去重、扁平、取最大最小值","date":"2020-01-05T03:05:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 去重\n## 1. 利用 `Object` 的 `Key` 唯一特性\n开辟一个外部存储空间用于标示元素是否出现过。\n```\n// js代码\n\nconst unique = (array)=> {\n    var container = {};\n    return array.filter((item, index) =>  container.hasOwnProperty(item) ? false : (container[item] = true));\n}\n\n```\n\n## 2. 利用 `indexOf` 的返回值数值进行去重\n原理是 `indexOf` 获取元素时如果返回值不等于下标说明已经有了，配合 `filter` 更美味\n```\n// js代码\n\nconst unique = arr => arr.filter((e,i) => \n  arr.indexOf(e) === i // 如果元素找到的当前下标和当前索引相同说明是同一个，不同说明不是唯一\n);\n```\n\n还有一种变形方法利用 `lastIndexOf` 方法\n> lastIndexOf() 方法返回指定元素（也即有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 fromIndex 处开始。\n\n```\n// js代码\n\nconst filterNonUnique = arr => arr.filter(e => \n  arr.indexOf(e) === arr.lastIndexOf(e) // 判断一个元素出现时的第一次下标和最后一次下标是否相同，如果相同那么就唯一\n)\n```\n## 3. 利用 `Set` 特性去重\n`Set` 是 `ES6` 中新的数据类型，它的特点就是元素唯一性，且可以和数组进行转换\n```\n// js代码\n\nconst unique = arr => Array.from(new Set(arr)); // Array.from 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。\n\n// 优化\n\nconst unique = arr => [...new Set(arr)]; // 利用 `ES6` 中展开操作\n\n```\n## 4. 排序后判断前后两项是否相等去重\n通过比较相邻数字是否重复，将排序后的数组进行去重。\n```\n// js代码\n\nconst unique = (array) => {\n  array.sort((a, b) => a - b);\n  let pre = 0;\n  const result = [];\n  for (let i = 0; i < array.length; i++) {\n    if (!i || array[i] != array[pre]) {\n      result.push(array[i]);\n    }\n    pre = i;\n  }\n  return result;\n}\n```\n\n# 扁平\n## 1. 普通方法\n通过递归的方式判断数组中的项是否是数组，如果不是就加入到新的扁平数组，如果是就递归调用逐层判断，直到全部结束\n```\n// js代码\n\nconst flatten = (array) => { // array 原数组\n  let result = []; // 定义新的扁平数组\n  for (let i = 0; i < array.length; i++) {\n    if (Array.isArray(array[i])) { // 判断子元素是否是数组\n      result = result.concat(flatten(array[i])); // 递归判断\n    } else {\n      result.push(array[i]); // 加入新数组\n    }\n  }\n  return result;\n}\n```\n\n## 2. 使用reduce简化上述方法\n> reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。\n> reducer 函数接收4个参数:\n- Accumulator (acc) (累计器)\n- Current Value (cur) (当前值)\n- Current Index (idx) (当前索引)\n- Source Array (src) (源数组)\n- 您的 reducer 函数的返回值分配给累计器，该返回值在数组的每个迭代中被记住，并最后成为最终的单个结果值。\n\n先看一段 reduce 的示例函数\n```\n// js代码\n\nconst array1 = [1, 2, 3, 4];\nconst reducer = (accumulator, currentValue) => accumulator + currentValue; // 定义一个累计器函数，作用是将数组前后累计值与当前值累加\n\n// 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer)); // 没有初始值用第一个元素\n// expected output: 10\n\n// 5 + 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer, 5)); // 有初始值从初始值开始\n// expected output: 15\n\n```\n这下大家应该对 reduce 函数认识了，接下来看看怎么简化\n```\n// js代码\n\nfunction flatten(array) {\n  return array.reduce((newArray, current) => // 新数组，当前项\n    Array.isArray(current) ? // 判断当前项是否为数组\n      newArray.concat(flatten(current)) : // 是的话 递归调用\n      newArray.concat(current) // 不是的话加进新数组\n  , []) // 初始化新数组为空\n}\n```\n这里我们再变一个形，增加一个变量，变成可指定深度操作数组\n```\n// js代码\n\nfunction flattenByDeep(array, deep = 1) { // 默认一层\n  return array.reduce(\n    (target, current) =>\n      Array.isArray(current) && deep > 1 ?\n        target.concat(flattenByDeep(current, deep - 1)) : // 下一次减一层\n        target.concat(current)\n    , [])\n}\n```\n# 最值\n## 利用 `reduce`\n`reduce` 函数真的是超级好用，\n\n```\n// js代码\n\narray.reduce((c,n) => Math.max(c,n))\n```\n\n## Math.max\n`Math.max` 参数原本是一组数字，只需要让他可以接收数组即可。\n```\n// js代码\n\nconst array = [3,2,1,4,5];\nMath.max.apply(null,array);\nMath.max(...array);\n\n```","source":"_posts/FE-guide-ArrayOprs.md","raw":"---\ntitle: 数组常见操作 ---- 去重、扁平、取最大最小值\ndate: 2020-01-05 11:05:00\ncategories: \n\t- 前端技术\ntags: \n\t- 面试\n\t- 知识点\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 去重\n## 1. 利用 `Object` 的 `Key` 唯一特性\n开辟一个外部存储空间用于标示元素是否出现过。\n```\n// js代码\n\nconst unique = (array)=> {\n    var container = {};\n    return array.filter((item, index) =>  container.hasOwnProperty(item) ? false : (container[item] = true));\n}\n\n```\n\n## 2. 利用 `indexOf` 的返回值数值进行去重\n原理是 `indexOf` 获取元素时如果返回值不等于下标说明已经有了，配合 `filter` 更美味\n```\n// js代码\n\nconst unique = arr => arr.filter((e,i) => \n  arr.indexOf(e) === i // 如果元素找到的当前下标和当前索引相同说明是同一个，不同说明不是唯一\n);\n```\n\n还有一种变形方法利用 `lastIndexOf` 方法\n> lastIndexOf() 方法返回指定元素（也即有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 fromIndex 处开始。\n\n```\n// js代码\n\nconst filterNonUnique = arr => arr.filter(e => \n  arr.indexOf(e) === arr.lastIndexOf(e) // 判断一个元素出现时的第一次下标和最后一次下标是否相同，如果相同那么就唯一\n)\n```\n## 3. 利用 `Set` 特性去重\n`Set` 是 `ES6` 中新的数据类型，它的特点就是元素唯一性，且可以和数组进行转换\n```\n// js代码\n\nconst unique = arr => Array.from(new Set(arr)); // Array.from 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。\n\n// 优化\n\nconst unique = arr => [...new Set(arr)]; // 利用 `ES6` 中展开操作\n\n```\n## 4. 排序后判断前后两项是否相等去重\n通过比较相邻数字是否重复，将排序后的数组进行去重。\n```\n// js代码\n\nconst unique = (array) => {\n  array.sort((a, b) => a - b);\n  let pre = 0;\n  const result = [];\n  for (let i = 0; i < array.length; i++) {\n    if (!i || array[i] != array[pre]) {\n      result.push(array[i]);\n    }\n    pre = i;\n  }\n  return result;\n}\n```\n\n# 扁平\n## 1. 普通方法\n通过递归的方式判断数组中的项是否是数组，如果不是就加入到新的扁平数组，如果是就递归调用逐层判断，直到全部结束\n```\n// js代码\n\nconst flatten = (array) => { // array 原数组\n  let result = []; // 定义新的扁平数组\n  for (let i = 0; i < array.length; i++) {\n    if (Array.isArray(array[i])) { // 判断子元素是否是数组\n      result = result.concat(flatten(array[i])); // 递归判断\n    } else {\n      result.push(array[i]); // 加入新数组\n    }\n  }\n  return result;\n}\n```\n\n## 2. 使用reduce简化上述方法\n> reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。\n> reducer 函数接收4个参数:\n- Accumulator (acc) (累计器)\n- Current Value (cur) (当前值)\n- Current Index (idx) (当前索引)\n- Source Array (src) (源数组)\n- 您的 reducer 函数的返回值分配给累计器，该返回值在数组的每个迭代中被记住，并最后成为最终的单个结果值。\n\n先看一段 reduce 的示例函数\n```\n// js代码\n\nconst array1 = [1, 2, 3, 4];\nconst reducer = (accumulator, currentValue) => accumulator + currentValue; // 定义一个累计器函数，作用是将数组前后累计值与当前值累加\n\n// 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer)); // 没有初始值用第一个元素\n// expected output: 10\n\n// 5 + 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer, 5)); // 有初始值从初始值开始\n// expected output: 15\n\n```\n这下大家应该对 reduce 函数认识了，接下来看看怎么简化\n```\n// js代码\n\nfunction flatten(array) {\n  return array.reduce((newArray, current) => // 新数组，当前项\n    Array.isArray(current) ? // 判断当前项是否为数组\n      newArray.concat(flatten(current)) : // 是的话 递归调用\n      newArray.concat(current) // 不是的话加进新数组\n  , []) // 初始化新数组为空\n}\n```\n这里我们再变一个形，增加一个变量，变成可指定深度操作数组\n```\n// js代码\n\nfunction flattenByDeep(array, deep = 1) { // 默认一层\n  return array.reduce(\n    (target, current) =>\n      Array.isArray(current) && deep > 1 ?\n        target.concat(flattenByDeep(current, deep - 1)) : // 下一次减一层\n        target.concat(current)\n    , [])\n}\n```\n# 最值\n## 利用 `reduce`\n`reduce` 函数真的是超级好用，\n\n```\n// js代码\n\narray.reduce((c,n) => Math.max(c,n))\n```\n\n## Math.max\n`Math.max` 参数原本是一组数字，只需要让他可以接收数组即可。\n```\n// js代码\n\nconst array = [3,2,1,4,5];\nMath.max.apply(null,array);\nMath.max(...array);\n\n```","slug":"FE-guide-ArrayOprs","published":1,"updated":"2020-01-05T07:47:21.437Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grva000booa63zp57ez3","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"去重\"><a href=\"#去重\" class=\"headerlink\" title=\"去重\"></a>去重</h1><h2 id=\"1-利用-Object-的-Key-唯一特性\"><a href=\"#1-利用-Object-的-Key-唯一特性\" class=\"headerlink\" title=\"1. 利用 Object 的 Key 唯一特性\"></a>1. 利用 <code>Object</code> 的 <code>Key</code> 唯一特性</h2><p>开辟一个外部存储空间用于标示元素是否出现过。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">const unique &#x3D; (array)&#x3D;&gt; &#123;</span><br><span class=\"line\">    var container &#x3D; &#123;&#125;;</span><br><span class=\"line\">    return array.filter((item, index) &#x3D;&gt;  container.hasOwnProperty(item) ? false : (container[item] &#x3D; true));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-利用-indexOf-的返回值数值进行去重\"><a href=\"#2-利用-indexOf-的返回值数值进行去重\" class=\"headerlink\" title=\"2. 利用 indexOf 的返回值数值进行去重\"></a>2. 利用 <code>indexOf</code> 的返回值数值进行去重</h2><p>原理是 <code>indexOf</code> 获取元素时如果返回值不等于下标说明已经有了，配合 <code>filter</code> 更美味</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">const unique &#x3D; arr &#x3D;&gt; arr.filter((e,i) &#x3D;&gt; </span><br><span class=\"line\">  arr.indexOf(e) &#x3D;&#x3D;&#x3D; i &#x2F;&#x2F; 如果元素找到的当前下标和当前索引相同说明是同一个，不同说明不是唯一</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>还有一种变形方法利用 <code>lastIndexOf</code> 方法</p>\n<blockquote>\n<p>lastIndexOf() 方法返回指定元素（也即有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 fromIndex 处开始。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">const filterNonUnique &#x3D; arr &#x3D;&gt; arr.filter(e &#x3D;&gt; </span><br><span class=\"line\">  arr.indexOf(e) &#x3D;&#x3D;&#x3D; arr.lastIndexOf(e) &#x2F;&#x2F; 判断一个元素出现时的第一次下标和最后一次下标是否相同，如果相同那么就唯一</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-利用-Set-特性去重\"><a href=\"#3-利用-Set-特性去重\" class=\"headerlink\" title=\"3. 利用 Set 特性去重\"></a>3. 利用 <code>Set</code> 特性去重</h2><p><code>Set</code> 是 <code>ES6</code> 中新的数据类型，它的特点就是元素唯一性，且可以和数组进行转换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">const unique &#x3D; arr &#x3D;&gt; Array.from(new Set(arr)); &#x2F;&#x2F; Array.from 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 优化</span><br><span class=\"line\"></span><br><span class=\"line\">const unique &#x3D; arr &#x3D;&gt; [...new Set(arr)]; &#x2F;&#x2F; 利用 &#96;ES6&#96; 中展开操作</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-排序后判断前后两项是否相等去重\"><a href=\"#4-排序后判断前后两项是否相等去重\" class=\"headerlink\" title=\"4. 排序后判断前后两项是否相等去重\"></a>4. 排序后判断前后两项是否相等去重</h2><p>通过比较相邻数字是否重复，将排序后的数组进行去重。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">const unique &#x3D; (array) &#x3D;&gt; &#123;</span><br><span class=\"line\">  array.sort((a, b) &#x3D;&gt; a - b);</span><br><span class=\"line\">  let pre &#x3D; 0;</span><br><span class=\"line\">  const result &#x3D; [];</span><br><span class=\"line\">  for (let i &#x3D; 0; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    if (!i || array[i] !&#x3D; array[pre]) &#123;</span><br><span class=\"line\">      result.push(array[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pre &#x3D; i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"扁平\"><a href=\"#扁平\" class=\"headerlink\" title=\"扁平\"></a>扁平</h1><h2 id=\"1-普通方法\"><a href=\"#1-普通方法\" class=\"headerlink\" title=\"1. 普通方法\"></a>1. 普通方法</h2><p>通过递归的方式判断数组中的项是否是数组，如果不是就加入到新的扁平数组，如果是就递归调用逐层判断，直到全部结束</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">const flatten &#x3D; (array) &#x3D;&gt; &#123; &#x2F;&#x2F; array 原数组</span><br><span class=\"line\">  let result &#x3D; []; &#x2F;&#x2F; 定义新的扁平数组</span><br><span class=\"line\">  for (let i &#x3D; 0; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    if (Array.isArray(array[i])) &#123; &#x2F;&#x2F; 判断子元素是否是数组</span><br><span class=\"line\">      result &#x3D; result.concat(flatten(array[i])); &#x2F;&#x2F; 递归判断</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      result.push(array[i]); &#x2F;&#x2F; 加入新数组</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-使用reduce简化上述方法\"><a href=\"#2-使用reduce简化上述方法\" class=\"headerlink\" title=\"2. 使用reduce简化上述方法\"></a>2. 使用reduce简化上述方法</h2><blockquote>\n<p>reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。<br>reducer 函数接收4个参数:</p>\n</blockquote>\n<ul>\n<li>Accumulator (acc) (累计器)</li>\n<li>Current Value (cur) (当前值)</li>\n<li>Current Index (idx) (当前索引)</li>\n<li>Source Array (src) (源数组)</li>\n<li>您的 reducer 函数的返回值分配给累计器，该返回值在数组的每个迭代中被记住，并最后成为最终的单个结果值。</li>\n</ul>\n<p>先看一段 reduce 的示例函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">const array1 &#x3D; [1, 2, 3, 4];</span><br><span class=\"line\">const reducer &#x3D; (accumulator, currentValue) &#x3D;&gt; accumulator + currentValue; &#x2F;&#x2F; 定义一个累计器函数，作用是将数组前后累计值与当前值累加</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 1 + 2 + 3 + 4</span><br><span class=\"line\">console.log(array1.reduce(reducer)); &#x2F;&#x2F; 没有初始值用第一个元素</span><br><span class=\"line\">&#x2F;&#x2F; expected output: 10</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 5 + 1 + 2 + 3 + 4</span><br><span class=\"line\">console.log(array1.reduce(reducer, 5)); &#x2F;&#x2F; 有初始值从初始值开始</span><br><span class=\"line\">&#x2F;&#x2F; expected output: 15</span><br></pre></td></tr></table></figure>\n<p>这下大家应该对 reduce 函数认识了，接下来看看怎么简化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function flatten(array) &#123;</span><br><span class=\"line\">  return array.reduce((newArray, current) &#x3D;&gt; &#x2F;&#x2F; 新数组，当前项</span><br><span class=\"line\">    Array.isArray(current) ? &#x2F;&#x2F; 判断当前项是否为数组</span><br><span class=\"line\">      newArray.concat(flatten(current)) : &#x2F;&#x2F; 是的话 递归调用</span><br><span class=\"line\">      newArray.concat(current) &#x2F;&#x2F; 不是的话加进新数组</span><br><span class=\"line\">  , []) &#x2F;&#x2F; 初始化新数组为空</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们再变一个形，增加一个变量，变成可指定深度操作数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function flattenByDeep(array, deep &#x3D; 1) &#123; &#x2F;&#x2F; 默认一层</span><br><span class=\"line\">  return array.reduce(</span><br><span class=\"line\">    (target, current) &#x3D;&gt;</span><br><span class=\"line\">      Array.isArray(current) &amp;&amp; deep &gt; 1 ?</span><br><span class=\"line\">        target.concat(flattenByDeep(current, deep - 1)) : &#x2F;&#x2F; 下一次减一层</span><br><span class=\"line\">        target.concat(current)</span><br><span class=\"line\">    , [])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"最值\"><a href=\"#最值\" class=\"headerlink\" title=\"最值\"></a>最值</h1><h2 id=\"利用-reduce\"><a href=\"#利用-reduce\" class=\"headerlink\" title=\"利用 reduce\"></a>利用 <code>reduce</code></h2><p><code>reduce</code> 函数真的是超级好用，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">array.reduce((c,n) &#x3D;&gt; Math.max(c,n))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Math-max\"><a href=\"#Math-max\" class=\"headerlink\" title=\"Math.max\"></a>Math.max</h2><p><code>Math.max</code> 参数原本是一组数字，只需要让他可以接收数组即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">const array &#x3D; [3,2,1,4,5];</span><br><span class=\"line\">Math.max.apply(null,array);</span><br><span class=\"line\">Math.max(...array);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"去重\"><a href=\"#去重\" class=\"headerlink\" title=\"去重\"></a>去重</h1><h2 id=\"1-利用-Object-的-Key-唯一特性\"><a href=\"#1-利用-Object-的-Key-唯一特性\" class=\"headerlink\" title=\"1. 利用 Object 的 Key 唯一特性\"></a>1. 利用 <code>Object</code> 的 <code>Key</code> 唯一特性</h2><p>开辟一个外部存储空间用于标示元素是否出现过。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">const unique &#x3D; (array)&#x3D;&gt; &#123;</span><br><span class=\"line\">    var container &#x3D; &#123;&#125;;</span><br><span class=\"line\">    return array.filter((item, index) &#x3D;&gt;  container.hasOwnProperty(item) ? false : (container[item] &#x3D; true));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-利用-indexOf-的返回值数值进行去重\"><a href=\"#2-利用-indexOf-的返回值数值进行去重\" class=\"headerlink\" title=\"2. 利用 indexOf 的返回值数值进行去重\"></a>2. 利用 <code>indexOf</code> 的返回值数值进行去重</h2><p>原理是 <code>indexOf</code> 获取元素时如果返回值不等于下标说明已经有了，配合 <code>filter</code> 更美味</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">const unique &#x3D; arr &#x3D;&gt; arr.filter((e,i) &#x3D;&gt; </span><br><span class=\"line\">  arr.indexOf(e) &#x3D;&#x3D;&#x3D; i &#x2F;&#x2F; 如果元素找到的当前下标和当前索引相同说明是同一个，不同说明不是唯一</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>还有一种变形方法利用 <code>lastIndexOf</code> 方法</p>\n<blockquote>\n<p>lastIndexOf() 方法返回指定元素（也即有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 fromIndex 处开始。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">const filterNonUnique &#x3D; arr &#x3D;&gt; arr.filter(e &#x3D;&gt; </span><br><span class=\"line\">  arr.indexOf(e) &#x3D;&#x3D;&#x3D; arr.lastIndexOf(e) &#x2F;&#x2F; 判断一个元素出现时的第一次下标和最后一次下标是否相同，如果相同那么就唯一</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-利用-Set-特性去重\"><a href=\"#3-利用-Set-特性去重\" class=\"headerlink\" title=\"3. 利用 Set 特性去重\"></a>3. 利用 <code>Set</code> 特性去重</h2><p><code>Set</code> 是 <code>ES6</code> 中新的数据类型，它的特点就是元素唯一性，且可以和数组进行转换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">const unique &#x3D; arr &#x3D;&gt; Array.from(new Set(arr)); &#x2F;&#x2F; Array.from 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 优化</span><br><span class=\"line\"></span><br><span class=\"line\">const unique &#x3D; arr &#x3D;&gt; [...new Set(arr)]; &#x2F;&#x2F; 利用 &#96;ES6&#96; 中展开操作</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-排序后判断前后两项是否相等去重\"><a href=\"#4-排序后判断前后两项是否相等去重\" class=\"headerlink\" title=\"4. 排序后判断前后两项是否相等去重\"></a>4. 排序后判断前后两项是否相等去重</h2><p>通过比较相邻数字是否重复，将排序后的数组进行去重。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">const unique &#x3D; (array) &#x3D;&gt; &#123;</span><br><span class=\"line\">  array.sort((a, b) &#x3D;&gt; a - b);</span><br><span class=\"line\">  let pre &#x3D; 0;</span><br><span class=\"line\">  const result &#x3D; [];</span><br><span class=\"line\">  for (let i &#x3D; 0; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    if (!i || array[i] !&#x3D; array[pre]) &#123;</span><br><span class=\"line\">      result.push(array[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pre &#x3D; i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"扁平\"><a href=\"#扁平\" class=\"headerlink\" title=\"扁平\"></a>扁平</h1><h2 id=\"1-普通方法\"><a href=\"#1-普通方法\" class=\"headerlink\" title=\"1. 普通方法\"></a>1. 普通方法</h2><p>通过递归的方式判断数组中的项是否是数组，如果不是就加入到新的扁平数组，如果是就递归调用逐层判断，直到全部结束</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">const flatten &#x3D; (array) &#x3D;&gt; &#123; &#x2F;&#x2F; array 原数组</span><br><span class=\"line\">  let result &#x3D; []; &#x2F;&#x2F; 定义新的扁平数组</span><br><span class=\"line\">  for (let i &#x3D; 0; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    if (Array.isArray(array[i])) &#123; &#x2F;&#x2F; 判断子元素是否是数组</span><br><span class=\"line\">      result &#x3D; result.concat(flatten(array[i])); &#x2F;&#x2F; 递归判断</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      result.push(array[i]); &#x2F;&#x2F; 加入新数组</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-使用reduce简化上述方法\"><a href=\"#2-使用reduce简化上述方法\" class=\"headerlink\" title=\"2. 使用reduce简化上述方法\"></a>2. 使用reduce简化上述方法</h2><blockquote>\n<p>reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。<br>reducer 函数接收4个参数:</p>\n</blockquote>\n<ul>\n<li>Accumulator (acc) (累计器)</li>\n<li>Current Value (cur) (当前值)</li>\n<li>Current Index (idx) (当前索引)</li>\n<li>Source Array (src) (源数组)</li>\n<li>您的 reducer 函数的返回值分配给累计器，该返回值在数组的每个迭代中被记住，并最后成为最终的单个结果值。</li>\n</ul>\n<p>先看一段 reduce 的示例函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">const array1 &#x3D; [1, 2, 3, 4];</span><br><span class=\"line\">const reducer &#x3D; (accumulator, currentValue) &#x3D;&gt; accumulator + currentValue; &#x2F;&#x2F; 定义一个累计器函数，作用是将数组前后累计值与当前值累加</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 1 + 2 + 3 + 4</span><br><span class=\"line\">console.log(array1.reduce(reducer)); &#x2F;&#x2F; 没有初始值用第一个元素</span><br><span class=\"line\">&#x2F;&#x2F; expected output: 10</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 5 + 1 + 2 + 3 + 4</span><br><span class=\"line\">console.log(array1.reduce(reducer, 5)); &#x2F;&#x2F; 有初始值从初始值开始</span><br><span class=\"line\">&#x2F;&#x2F; expected output: 15</span><br></pre></td></tr></table></figure>\n<p>这下大家应该对 reduce 函数认识了，接下来看看怎么简化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function flatten(array) &#123;</span><br><span class=\"line\">  return array.reduce((newArray, current) &#x3D;&gt; &#x2F;&#x2F; 新数组，当前项</span><br><span class=\"line\">    Array.isArray(current) ? &#x2F;&#x2F; 判断当前项是否为数组</span><br><span class=\"line\">      newArray.concat(flatten(current)) : &#x2F;&#x2F; 是的话 递归调用</span><br><span class=\"line\">      newArray.concat(current) &#x2F;&#x2F; 不是的话加进新数组</span><br><span class=\"line\">  , []) &#x2F;&#x2F; 初始化新数组为空</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们再变一个形，增加一个变量，变成可指定深度操作数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function flattenByDeep(array, deep &#x3D; 1) &#123; &#x2F;&#x2F; 默认一层</span><br><span class=\"line\">  return array.reduce(</span><br><span class=\"line\">    (target, current) &#x3D;&gt;</span><br><span class=\"line\">      Array.isArray(current) &amp;&amp; deep &gt; 1 ?</span><br><span class=\"line\">        target.concat(flattenByDeep(current, deep - 1)) : &#x2F;&#x2F; 下一次减一层</span><br><span class=\"line\">        target.concat(current)</span><br><span class=\"line\">    , [])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"最值\"><a href=\"#最值\" class=\"headerlink\" title=\"最值\"></a>最值</h1><h2 id=\"利用-reduce\"><a href=\"#利用-reduce\" class=\"headerlink\" title=\"利用 reduce\"></a>利用 <code>reduce</code></h2><p><code>reduce</code> 函数真的是超级好用，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">array.reduce((c,n) &#x3D;&gt; Math.max(c,n))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Math-max\"><a href=\"#Math-max\" class=\"headerlink\" title=\"Math.max\"></a>Math.max</h2><p><code>Math.max</code> 参数原本是一组数字，只需要让他可以接收数组即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">const array &#x3D; [3,2,1,4,5];</span><br><span class=\"line\">Math.max.apply(null,array);</span><br><span class=\"line\">Math.max(...array);</span><br></pre></td></tr></table></figure>"},{"title":"前端常见知识点整理 ---- Generator 生成器","date":"2020-01-03T03:05:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# `Generator` 实现\n`Generator` 是 `ES6` 中新增的语法，和 `Promise` 一样，都可以用来异步编程\n```\n// js代码\n\n// 使用 * 表示这是一个 Generator 函数\n// 内部可以通过 yield 暂停代码\n// 通过调用 next 恢复执行\nfunction* test() {\n  let a = 1 + 2;\n  yield 2;\n  yield 3;\n}\nlet b = test();\nconsole.log(b.next()); // >  { value: 2, done: false }\nconsole.log(b.next()); // >  { value: 3, done: false }\nconsole.log(b.next()); // >  { value: undefined, done: true }\n\n```\n从以上代码可以发现，加上 `*` 的函数执行后拥有了 `next` 函数，也就是说函数执行后返回了一个对象。每次调用 `next` 函数可以继续执行被暂停的代码。以下是 `Generator` 函数的简单实现\n\n```\n// js代码\n\n// cb 也就是编译过的 test 函数\nfunction generator(cb) {\n  return (function() {\n    var object = {\n      next: 0,\n      stop: function() {}\n    };\n\n    return {\n      next: function() {\n        var ret = cb(object);\n        if (ret === undefined) return { value: undefined, done: true };\n        return {\n          value: ret,\n          done: false\n        };\n      }\n    };\n  })();\n}\n// 如果你使用 babel 编译后可以发现 test 函数变成了这样\nfunction test() {\n  var a;\n  return generator(function(_context) {\n    while (1) {\n      switch ((_context.prev = _context.next)) {\n        // 可以发现通过 yield 将代码分割成几块\n        // 每次执行 next 函数就执行一块代码\n        // 并且表明下次需要执行哪块代码\n        case 0:\n          a = 1 + 2;\n          _context.next = 4;\n          return 2;\n        case 4:\n          _context.next = 6;\n          return 3;\n\t\t// 执行完毕\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}\n```","source":"_posts/FE-guide-Generator.md","raw":"---\ntitle: 前端常见知识点整理 ---- Generator 生成器\ndate: 2020-01-03 11:05:00\ncategories: \n  - 前端技术\n  - 前端常见知识点整理\ntags: \n\t- 面试\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# `Generator` 实现\n`Generator` 是 `ES6` 中新增的语法，和 `Promise` 一样，都可以用来异步编程\n```\n// js代码\n\n// 使用 * 表示这是一个 Generator 函数\n// 内部可以通过 yield 暂停代码\n// 通过调用 next 恢复执行\nfunction* test() {\n  let a = 1 + 2;\n  yield 2;\n  yield 3;\n}\nlet b = test();\nconsole.log(b.next()); // >  { value: 2, done: false }\nconsole.log(b.next()); // >  { value: 3, done: false }\nconsole.log(b.next()); // >  { value: undefined, done: true }\n\n```\n从以上代码可以发现，加上 `*` 的函数执行后拥有了 `next` 函数，也就是说函数执行后返回了一个对象。每次调用 `next` 函数可以继续执行被暂停的代码。以下是 `Generator` 函数的简单实现\n\n```\n// js代码\n\n// cb 也就是编译过的 test 函数\nfunction generator(cb) {\n  return (function() {\n    var object = {\n      next: 0,\n      stop: function() {}\n    };\n\n    return {\n      next: function() {\n        var ret = cb(object);\n        if (ret === undefined) return { value: undefined, done: true };\n        return {\n          value: ret,\n          done: false\n        };\n      }\n    };\n  })();\n}\n// 如果你使用 babel 编译后可以发现 test 函数变成了这样\nfunction test() {\n  var a;\n  return generator(function(_context) {\n    while (1) {\n      switch ((_context.prev = _context.next)) {\n        // 可以发现通过 yield 将代码分割成几块\n        // 每次执行 next 函数就执行一块代码\n        // 并且表明下次需要执行哪块代码\n        case 0:\n          a = 1 + 2;\n          _context.next = 4;\n          return 2;\n        case 4:\n          _context.next = 6;\n          return 3;\n\t\t// 执行完毕\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}\n```","slug":"FE-guide-Generator","published":1,"updated":"2020-04-02T03:20:12.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grvc000eooa6f3jw2mdy","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"Generator-实现\"><a href=\"#Generator-实现\" class=\"headerlink\" title=\"Generator 实现\"></a><code>Generator</code> 实现</h1><p><code>Generator</code> 是 <code>ES6</code> 中新增的语法，和 <code>Promise</code> 一样，都可以用来异步编程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 使用 * 表示这是一个 Generator 函数</span><br><span class=\"line\">&#x2F;&#x2F; 内部可以通过 yield 暂停代码</span><br><span class=\"line\">&#x2F;&#x2F; 通过调用 next 恢复执行</span><br><span class=\"line\">function* test() &#123;</span><br><span class=\"line\">  let a &#x3D; 1 + 2;</span><br><span class=\"line\">  yield 2;</span><br><span class=\"line\">  yield 3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let b &#x3D; test();</span><br><span class=\"line\">console.log(b.next()); &#x2F;&#x2F; &gt;  &#123; value: 2, done: false &#125;</span><br><span class=\"line\">console.log(b.next()); &#x2F;&#x2F; &gt;  &#123; value: 3, done: false &#125;</span><br><span class=\"line\">console.log(b.next()); &#x2F;&#x2F; &gt;  &#123; value: undefined, done: true &#125;</span><br></pre></td></tr></table></figure>\n<p>从以上代码可以发现，加上 <code>*</code> 的函数执行后拥有了 <code>next</code> 函数，也就是说函数执行后返回了一个对象。每次调用 <code>next</code> 函数可以继续执行被暂停的代码。以下是 <code>Generator</code> 函数的简单实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; cb 也就是编译过的 test 函数</span><br><span class=\"line\">function generator(cb) &#123;</span><br><span class=\"line\">  return (function() &#123;</span><br><span class=\"line\">    var object &#x3D; &#123;</span><br><span class=\"line\">      next: 0,</span><br><span class=\"line\">      stop: function() &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      next: function() &#123;</span><br><span class=\"line\">        var ret &#x3D; cb(object);</span><br><span class=\"line\">        if (ret &#x3D;&#x3D;&#x3D; undefined) return &#123; value: undefined, done: true &#125;;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">          value: ret,</span><br><span class=\"line\">          done: false</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;)();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; 如果你使用 babel 编译后可以发现 test 函数变成了这样</span><br><span class=\"line\">function test() &#123;</span><br><span class=\"line\">  var a;</span><br><span class=\"line\">  return generator(function(_context) &#123;</span><br><span class=\"line\">    while (1) &#123;</span><br><span class=\"line\">      switch ((_context.prev &#x3D; _context.next)) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 可以发现通过 yield 将代码分割成几块</span><br><span class=\"line\">        &#x2F;&#x2F; 每次执行 next 函数就执行一块代码</span><br><span class=\"line\">        &#x2F;&#x2F; 并且表明下次需要执行哪块代码</span><br><span class=\"line\">        case 0:</span><br><span class=\"line\">          a &#x3D; 1 + 2;</span><br><span class=\"line\">          _context.next &#x3D; 4;</span><br><span class=\"line\">          return 2;</span><br><span class=\"line\">        case 4:</span><br><span class=\"line\">          _context.next &#x3D; 6;</span><br><span class=\"line\">          return 3;</span><br><span class=\"line\">\t\t&#x2F;&#x2F; 执行完毕</span><br><span class=\"line\">        case 6:</span><br><span class=\"line\">        case &quot;end&quot;:</span><br><span class=\"line\">          return _context.stop();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"Generator-实现\"><a href=\"#Generator-实现\" class=\"headerlink\" title=\"Generator 实现\"></a><code>Generator</code> 实现</h1><p><code>Generator</code> 是 <code>ES6</code> 中新增的语法，和 <code>Promise</code> 一样，都可以用来异步编程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 使用 * 表示这是一个 Generator 函数</span><br><span class=\"line\">&#x2F;&#x2F; 内部可以通过 yield 暂停代码</span><br><span class=\"line\">&#x2F;&#x2F; 通过调用 next 恢复执行</span><br><span class=\"line\">function* test() &#123;</span><br><span class=\"line\">  let a &#x3D; 1 + 2;</span><br><span class=\"line\">  yield 2;</span><br><span class=\"line\">  yield 3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let b &#x3D; test();</span><br><span class=\"line\">console.log(b.next()); &#x2F;&#x2F; &gt;  &#123; value: 2, done: false &#125;</span><br><span class=\"line\">console.log(b.next()); &#x2F;&#x2F; &gt;  &#123; value: 3, done: false &#125;</span><br><span class=\"line\">console.log(b.next()); &#x2F;&#x2F; &gt;  &#123; value: undefined, done: true &#125;</span><br></pre></td></tr></table></figure>\n<p>从以上代码可以发现，加上 <code>*</code> 的函数执行后拥有了 <code>next</code> 函数，也就是说函数执行后返回了一个对象。每次调用 <code>next</code> 函数可以继续执行被暂停的代码。以下是 <code>Generator</code> 函数的简单实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; cb 也就是编译过的 test 函数</span><br><span class=\"line\">function generator(cb) &#123;</span><br><span class=\"line\">  return (function() &#123;</span><br><span class=\"line\">    var object &#x3D; &#123;</span><br><span class=\"line\">      next: 0,</span><br><span class=\"line\">      stop: function() &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      next: function() &#123;</span><br><span class=\"line\">        var ret &#x3D; cb(object);</span><br><span class=\"line\">        if (ret &#x3D;&#x3D;&#x3D; undefined) return &#123; value: undefined, done: true &#125;;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">          value: ret,</span><br><span class=\"line\">          done: false</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;)();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; 如果你使用 babel 编译后可以发现 test 函数变成了这样</span><br><span class=\"line\">function test() &#123;</span><br><span class=\"line\">  var a;</span><br><span class=\"line\">  return generator(function(_context) &#123;</span><br><span class=\"line\">    while (1) &#123;</span><br><span class=\"line\">      switch ((_context.prev &#x3D; _context.next)) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 可以发现通过 yield 将代码分割成几块</span><br><span class=\"line\">        &#x2F;&#x2F; 每次执行 next 函数就执行一块代码</span><br><span class=\"line\">        &#x2F;&#x2F; 并且表明下次需要执行哪块代码</span><br><span class=\"line\">        case 0:</span><br><span class=\"line\">          a &#x3D; 1 + 2;</span><br><span class=\"line\">          _context.next &#x3D; 4;</span><br><span class=\"line\">          return 2;</span><br><span class=\"line\">        case 4:</span><br><span class=\"line\">          _context.next &#x3D; 6;</span><br><span class=\"line\">          return 3;</span><br><span class=\"line\">\t\t&#x2F;&#x2F; 执行完毕</span><br><span class=\"line\">        case 6:</span><br><span class=\"line\">        case &quot;end&quot;:</span><br><span class=\"line\">          return _context.stop();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"前端常见知识点整理 ---- Map、FlatMap 和 Reduce","date":"2020-01-03T03:35:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# Map、FlatMap 和 Reduce\n## `Map`\n`Map` 作用是生成一个新数组，遍历原数组，将每个元素拿出来做一些变换然后 `append` 到新的数组中。\n\n```\n// js代码\n\n[1, 2, 3].map((v) => v + 1) // -> [2, 3, 4]\n```\n`Map` 有三个参数，分别是***当前索引元素***，***索引***，***原数组***\n## `FlatMap`\n`FlatMap` 和 `map` 的作用几乎是相同的，但是对于多维数组来说，会将原数组降维。可以将 `FlatMap` 看成是 `map + flatten` ，目前该函数在浏览器中还不支持。\n\n\n```\n// js代码\n\n[1, [2], 3].flatMap((v) => v + 1) // -> [2, 3, 4]\n```\n如果想将一个多维数组彻底的降维，可以这样实现\n\n```\nconst flattenDeep = (arr) => Array.isArray(arr)\n  ? arr.reduce( (a, b) => [...a, ...flattenDeep(b)] , [])\n  : [arr]\n\nflattenDeep([1, [[2], [3, [4]], 5]])\n```\n\n## Reduce 升序执行\n`Reduce` 作用是数组中的值组合起来，最终得到一个值\n`reduce()` 方法对数组中的每个元素执行一个由您提供的 `reducer` 函数(升序执行)，将其结果汇总为单个返回值。\n\n`reducer` 函数接收4个参数:\n\n- Accumulator (acc) (累计器)\n- Current Value (cur) (当前值)\n- Current Index (idx) (当前索引)\n- Source Array (src) (源数组)\n您的 `reducer` 函数的返回值分配给累计器，该返回值在数组的每个迭代中被记住，并最后成为最终的单个结果值。\n\n```\n// js代码\n\nfunction a() {\n    console.log(1);\n}\n\nfunction b() {\n    console.log(2);\n}\n\n[a, b].reduce((a, b) => a(b()))\n// -> 2 1\n```","source":"_posts/FE-guide-Map-FlatMap-Reduce.md","raw":"---\ntitle: 前端常见知识点整理 ---- Map、FlatMap 和 Reduce\ndate: 2020-01-03 11:35:00\ncategories: \n  - 前端技术\n  - 前端常见知识点整理\ntags: \n\t- 面试\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# Map、FlatMap 和 Reduce\n## `Map`\n`Map` 作用是生成一个新数组，遍历原数组，将每个元素拿出来做一些变换然后 `append` 到新的数组中。\n\n```\n// js代码\n\n[1, 2, 3].map((v) => v + 1) // -> [2, 3, 4]\n```\n`Map` 有三个参数，分别是***当前索引元素***，***索引***，***原数组***\n## `FlatMap`\n`FlatMap` 和 `map` 的作用几乎是相同的，但是对于多维数组来说，会将原数组降维。可以将 `FlatMap` 看成是 `map + flatten` ，目前该函数在浏览器中还不支持。\n\n\n```\n// js代码\n\n[1, [2], 3].flatMap((v) => v + 1) // -> [2, 3, 4]\n```\n如果想将一个多维数组彻底的降维，可以这样实现\n\n```\nconst flattenDeep = (arr) => Array.isArray(arr)\n  ? arr.reduce( (a, b) => [...a, ...flattenDeep(b)] , [])\n  : [arr]\n\nflattenDeep([1, [[2], [3, [4]], 5]])\n```\n\n## Reduce 升序执行\n`Reduce` 作用是数组中的值组合起来，最终得到一个值\n`reduce()` 方法对数组中的每个元素执行一个由您提供的 `reducer` 函数(升序执行)，将其结果汇总为单个返回值。\n\n`reducer` 函数接收4个参数:\n\n- Accumulator (acc) (累计器)\n- Current Value (cur) (当前值)\n- Current Index (idx) (当前索引)\n- Source Array (src) (源数组)\n您的 `reducer` 函数的返回值分配给累计器，该返回值在数组的每个迭代中被记住，并最后成为最终的单个结果值。\n\n```\n// js代码\n\nfunction a() {\n    console.log(1);\n}\n\nfunction b() {\n    console.log(2);\n}\n\n[a, b].reduce((a, b) => a(b()))\n// -> 2 1\n```","slug":"FE-guide-Map-FlatMap-Reduce","published":1,"updated":"2020-04-02T03:20:12.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grvv000hooa66n2ygun2","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"Map、FlatMap-和-Reduce\"><a href=\"#Map、FlatMap-和-Reduce\" class=\"headerlink\" title=\"Map、FlatMap 和 Reduce\"></a>Map、FlatMap 和 Reduce</h1><h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a><code>Map</code></h2><p><code>Map</code> 作用是生成一个新数组，遍历原数组，将每个元素拿出来做一些变换然后 <code>append</code> 到新的数组中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">[1, 2, 3].map((v) &#x3D;&gt; v + 1) &#x2F;&#x2F; -&gt; [2, 3, 4]</span><br></pre></td></tr></table></figure>\n<p><code>Map</code> 有三个参数，分别是<strong><em>当前索引元素</em></strong>，<strong><em>索引</em></strong>，<strong><em>原数组</em></strong></p>\n<h2 id=\"FlatMap\"><a href=\"#FlatMap\" class=\"headerlink\" title=\"FlatMap\"></a><code>FlatMap</code></h2><p><code>FlatMap</code> 和 <code>map</code> 的作用几乎是相同的，但是对于多维数组来说，会将原数组降维。可以将 <code>FlatMap</code> 看成是 <code>map + flatten</code> ，目前该函数在浏览器中还不支持。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">[1, [2], 3].flatMap((v) &#x3D;&gt; v + 1) &#x2F;&#x2F; -&gt; [2, 3, 4]</span><br></pre></td></tr></table></figure>\n<p>如果想将一个多维数组彻底的降维，可以这样实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const flattenDeep &#x3D; (arr) &#x3D;&gt; Array.isArray(arr)</span><br><span class=\"line\">  ? arr.reduce( (a, b) &#x3D;&gt; [...a, ...flattenDeep(b)] , [])</span><br><span class=\"line\">  : [arr]</span><br><span class=\"line\"></span><br><span class=\"line\">flattenDeep([1, [[2], [3, [4]], 5]])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reduce-升序执行\"><a href=\"#Reduce-升序执行\" class=\"headerlink\" title=\"Reduce 升序执行\"></a>Reduce 升序执行</h2><p><code>Reduce</code> 作用是数组中的值组合起来，最终得到一个值<br><code>reduce()</code> 方法对数组中的每个元素执行一个由您提供的 <code>reducer</code> 函数(升序执行)，将其结果汇总为单个返回值。</p>\n<p><code>reducer</code> 函数接收4个参数:</p>\n<ul>\n<li>Accumulator (acc) (累计器)</li>\n<li>Current Value (cur) (当前值)</li>\n<li>Current Index (idx) (当前索引)</li>\n<li>Source Array (src) (源数组)<br>您的 <code>reducer</code> 函数的返回值分配给累计器，该返回值在数组的每个迭代中被记住，并最后成为最终的单个结果值。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function a() &#123;</span><br><span class=\"line\">    console.log(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function b() &#123;</span><br><span class=\"line\">    console.log(2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[a, b].reduce((a, b) &#x3D;&gt; a(b()))</span><br><span class=\"line\">&#x2F;&#x2F; -&gt; 2 1</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"Map、FlatMap-和-Reduce\"><a href=\"#Map、FlatMap-和-Reduce\" class=\"headerlink\" title=\"Map、FlatMap 和 Reduce\"></a>Map、FlatMap 和 Reduce</h1><h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a><code>Map</code></h2><p><code>Map</code> 作用是生成一个新数组，遍历原数组，将每个元素拿出来做一些变换然后 <code>append</code> 到新的数组中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">[1, 2, 3].map((v) &#x3D;&gt; v + 1) &#x2F;&#x2F; -&gt; [2, 3, 4]</span><br></pre></td></tr></table></figure>\n<p><code>Map</code> 有三个参数，分别是<strong><em>当前索引元素</em></strong>，<strong><em>索引</em></strong>，<strong><em>原数组</em></strong></p>\n<h2 id=\"FlatMap\"><a href=\"#FlatMap\" class=\"headerlink\" title=\"FlatMap\"></a><code>FlatMap</code></h2><p><code>FlatMap</code> 和 <code>map</code> 的作用几乎是相同的，但是对于多维数组来说，会将原数组降维。可以将 <code>FlatMap</code> 看成是 <code>map + flatten</code> ，目前该函数在浏览器中还不支持。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">[1, [2], 3].flatMap((v) &#x3D;&gt; v + 1) &#x2F;&#x2F; -&gt; [2, 3, 4]</span><br></pre></td></tr></table></figure>\n<p>如果想将一个多维数组彻底的降维，可以这样实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const flattenDeep &#x3D; (arr) &#x3D;&gt; Array.isArray(arr)</span><br><span class=\"line\">  ? arr.reduce( (a, b) &#x3D;&gt; [...a, ...flattenDeep(b)] , [])</span><br><span class=\"line\">  : [arr]</span><br><span class=\"line\"></span><br><span class=\"line\">flattenDeep([1, [[2], [3, [4]], 5]])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reduce-升序执行\"><a href=\"#Reduce-升序执行\" class=\"headerlink\" title=\"Reduce 升序执行\"></a>Reduce 升序执行</h2><p><code>Reduce</code> 作用是数组中的值组合起来，最终得到一个值<br><code>reduce()</code> 方法对数组中的每个元素执行一个由您提供的 <code>reducer</code> 函数(升序执行)，将其结果汇总为单个返回值。</p>\n<p><code>reducer</code> 函数接收4个参数:</p>\n<ul>\n<li>Accumulator (acc) (累计器)</li>\n<li>Current Value (cur) (当前值)</li>\n<li>Current Index (idx) (当前索引)</li>\n<li>Source Array (src) (源数组)<br>您的 <code>reducer</code> 函数的返回值分配给累计器，该返回值在数组的每个迭代中被记住，并最后成为最终的单个结果值。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function a() &#123;</span><br><span class=\"line\">    console.log(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function b() &#123;</span><br><span class=\"line\">    console.log(2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[a, b].reduce((a, b) &#x3D;&gt; a(b()))</span><br><span class=\"line\">&#x2F;&#x2F; -&gt; 2 1</span><br></pre></td></tr></table></figure>"},{"title":"前端常见知识点整理 ---- 模块化","date":"2020-01-03T00:41:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 模块化\n在有 `Babel` 的情况下，我们可以直接使用 `ES6` 的模块化\n\n```\n// js代码\n\n// file a.js\nexport function a() {}\nexport function b() {}\n// file b.js\nexport default function() {}\n\nimport {a, b} from './a.js'\nimport XXX from './b.js'\n```\n## `CommonJS`\n`CommonJs` 是 `Node` 独有的规范，浏览器中使用就需要用到 `Browserify` 解析了。\n\n```\n// js代码\n\n// a.js\nmodule.exports = {\n    a: 1\n}\n// or\nexports.a = 1\n\n// b.js\nvar module = require('./a.js')\nmodule.a // -> log 1\n```\n在上述代码中， `module.exports` 和 `exports` 很容易混淆，让我们来看看大致内部实现\n\n```\n// js代码\n\nvar module = require('./a.js')\nmodule.a\n// 这里其实就是包装了一层立即执行函数，这样就不会污染全局变量了，\n// 重要的是 module 这里，module 是 Node 独有的一个变量\nmodule.exports = {\n    a: 1\n}\n// 基本实现\nvar module = {\n  exports: {} // exports 就是个空对象\n}\n// 这个是为什么 exports 和 module.exports 用法相似的原因\nvar exports = module.exports\nvar load = function (module) {\n    // 导出的东西\n    var a = 1\n    module.exports = a\n    return module.exports\n};\n```\n再来说说 module.exports 和 exports，用法其实是相似的，但是不能对 exports 直接赋值，不会有任何效果。\n\n对于 CommonJS 和 ES6 中的模块化的两者区别是：\n- 前者支持动态导入，也就是 require(${path}/xx.js)，后者目前不支持，但是已有提案\n- 前者是同步导入，因为用于服务端，文件都在本地，同步导入即使卡住主线程影响也不大。而后者是异步导入，因为用于浏览器，需要下载文件，如果也采用同步导入会对渲染有很大影响\n- 前者在导出时都是值拷贝，就算导出的值变了，导入的值也不会改变，所以如果想更新值，必须重新导入一次。但是后者采用实时绑定的方式，导入导出的值都指向同一个内存地址，所以导入值会跟随导出值变化\n- 后者会编译成 require/exports 来执行的\n\n## AMD\nAMD 是由 `RequireJS` 提出的\n\n```\n// js代码\n\n// AMD\ndefine(['./a', './b'], function(a, b) {\n    a.do()\n    b.do()\n})\ndefine(function(require, exports, module) {\n    var a = require('./a')\n    a.doSomething()\n    var b = require('./b')\n    b.doSomething()\n})\n\n```","source":"_posts/FE-guide-Module.md","raw":"---\ntitle: 前端常见知识点整理 ---- 模块化\ndate: 2020-01-03 08:41:00\ncategories: \n    - 前端技术\n    - 前端常见知识点整理\ntags: \n\t- 面试\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 模块化\n在有 `Babel` 的情况下，我们可以直接使用 `ES6` 的模块化\n\n```\n// js代码\n\n// file a.js\nexport function a() {}\nexport function b() {}\n// file b.js\nexport default function() {}\n\nimport {a, b} from './a.js'\nimport XXX from './b.js'\n```\n## `CommonJS`\n`CommonJs` 是 `Node` 独有的规范，浏览器中使用就需要用到 `Browserify` 解析了。\n\n```\n// js代码\n\n// a.js\nmodule.exports = {\n    a: 1\n}\n// or\nexports.a = 1\n\n// b.js\nvar module = require('./a.js')\nmodule.a // -> log 1\n```\n在上述代码中， `module.exports` 和 `exports` 很容易混淆，让我们来看看大致内部实现\n\n```\n// js代码\n\nvar module = require('./a.js')\nmodule.a\n// 这里其实就是包装了一层立即执行函数，这样就不会污染全局变量了，\n// 重要的是 module 这里，module 是 Node 独有的一个变量\nmodule.exports = {\n    a: 1\n}\n// 基本实现\nvar module = {\n  exports: {} // exports 就是个空对象\n}\n// 这个是为什么 exports 和 module.exports 用法相似的原因\nvar exports = module.exports\nvar load = function (module) {\n    // 导出的东西\n    var a = 1\n    module.exports = a\n    return module.exports\n};\n```\n再来说说 module.exports 和 exports，用法其实是相似的，但是不能对 exports 直接赋值，不会有任何效果。\n\n对于 CommonJS 和 ES6 中的模块化的两者区别是：\n- 前者支持动态导入，也就是 require(${path}/xx.js)，后者目前不支持，但是已有提案\n- 前者是同步导入，因为用于服务端，文件都在本地，同步导入即使卡住主线程影响也不大。而后者是异步导入，因为用于浏览器，需要下载文件，如果也采用同步导入会对渲染有很大影响\n- 前者在导出时都是值拷贝，就算导出的值变了，导入的值也不会改变，所以如果想更新值，必须重新导入一次。但是后者采用实时绑定的方式，导入导出的值都指向同一个内存地址，所以导入值会跟随导出值变化\n- 后者会编译成 require/exports 来执行的\n\n## AMD\nAMD 是由 `RequireJS` 提出的\n\n```\n// js代码\n\n// AMD\ndefine(['./a', './b'], function(a, b) {\n    a.do()\n    b.do()\n})\ndefine(function(require, exports, module) {\n    var a = require('./a')\n    a.doSomething()\n    var b = require('./b')\n    b.doSomething()\n})\n\n```","slug":"FE-guide-Module","published":1,"updated":"2020-04-02T03:20:12.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grw2000jooa6aqv22tf9","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h1><p>在有 <code>Babel</code> 的情况下，我们可以直接使用 <code>ES6</code> 的模块化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; file a.js</span><br><span class=\"line\">export function a() &#123;&#125;</span><br><span class=\"line\">export function b() &#123;&#125;</span><br><span class=\"line\">&#x2F;&#x2F; file b.js</span><br><span class=\"line\">export default function() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123;a, b&#125; from &#39;.&#x2F;a.js&#39;</span><br><span class=\"line\">import XXX from &#39;.&#x2F;b.js&#39;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a><code>CommonJS</code></h2><p><code>CommonJs</code> 是 <code>Node</code> 独有的规范，浏览器中使用就需要用到 <code>Browserify</code> 解析了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; a.js</span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    a: 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; or</span><br><span class=\"line\">exports.a &#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; b.js</span><br><span class=\"line\">var module &#x3D; require(&#39;.&#x2F;a.js&#39;)</span><br><span class=\"line\">module.a &#x2F;&#x2F; -&gt; log 1</span><br></pre></td></tr></table></figure>\n<p>在上述代码中， <code>module.exports</code> 和 <code>exports</code> 很容易混淆，让我们来看看大致内部实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">var module &#x3D; require(&#39;.&#x2F;a.js&#39;)</span><br><span class=\"line\">module.a</span><br><span class=\"line\">&#x2F;&#x2F; 这里其实就是包装了一层立即执行函数，这样就不会污染全局变量了，</span><br><span class=\"line\">&#x2F;&#x2F; 重要的是 module 这里，module 是 Node 独有的一个变量</span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    a: 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; 基本实现</span><br><span class=\"line\">var module &#x3D; &#123;</span><br><span class=\"line\">  exports: &#123;&#125; &#x2F;&#x2F; exports 就是个空对象</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; 这个是为什么 exports 和 module.exports 用法相似的原因</span><br><span class=\"line\">var exports &#x3D; module.exports</span><br><span class=\"line\">var load &#x3D; function (module) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 导出的东西</span><br><span class=\"line\">    var a &#x3D; 1</span><br><span class=\"line\">    module.exports &#x3D; a</span><br><span class=\"line\">    return module.exports</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>再来说说 module.exports 和 exports，用法其实是相似的，但是不能对 exports 直接赋值，不会有任何效果。</p>\n<p>对于 CommonJS 和 ES6 中的模块化的两者区别是：</p>\n<ul>\n<li>前者支持动态导入，也就是 require(${path}/xx.js)，后者目前不支持，但是已有提案</li>\n<li>前者是同步导入，因为用于服务端，文件都在本地，同步导入即使卡住主线程影响也不大。而后者是异步导入，因为用于浏览器，需要下载文件，如果也采用同步导入会对渲染有很大影响</li>\n<li>前者在导出时都是值拷贝，就算导出的值变了，导入的值也不会改变，所以如果想更新值，必须重新导入一次。但是后者采用实时绑定的方式，导入导出的值都指向同一个内存地址，所以导入值会跟随导出值变化</li>\n<li>后者会编译成 require/exports 来执行的</li>\n</ul>\n<h2 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h2><p>AMD 是由 <code>RequireJS</code> 提出的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; AMD</span><br><span class=\"line\">define([&#39;.&#x2F;a&#39;, &#39;.&#x2F;b&#39;], function(a, b) &#123;</span><br><span class=\"line\">    a.do()</span><br><span class=\"line\">    b.do()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">define(function(require, exports, module) &#123;</span><br><span class=\"line\">    var a &#x3D; require(&#39;.&#x2F;a&#39;)</span><br><span class=\"line\">    a.doSomething()</span><br><span class=\"line\">    var b &#x3D; require(&#39;.&#x2F;b&#39;)</span><br><span class=\"line\">    b.doSomething()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h1><p>在有 <code>Babel</code> 的情况下，我们可以直接使用 <code>ES6</code> 的模块化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; file a.js</span><br><span class=\"line\">export function a() &#123;&#125;</span><br><span class=\"line\">export function b() &#123;&#125;</span><br><span class=\"line\">&#x2F;&#x2F; file b.js</span><br><span class=\"line\">export default function() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123;a, b&#125; from &#39;.&#x2F;a.js&#39;</span><br><span class=\"line\">import XXX from &#39;.&#x2F;b.js&#39;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a><code>CommonJS</code></h2><p><code>CommonJs</code> 是 <code>Node</code> 独有的规范，浏览器中使用就需要用到 <code>Browserify</code> 解析了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; a.js</span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    a: 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; or</span><br><span class=\"line\">exports.a &#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; b.js</span><br><span class=\"line\">var module &#x3D; require(&#39;.&#x2F;a.js&#39;)</span><br><span class=\"line\">module.a &#x2F;&#x2F; -&gt; log 1</span><br></pre></td></tr></table></figure>\n<p>在上述代码中， <code>module.exports</code> 和 <code>exports</code> 很容易混淆，让我们来看看大致内部实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">var module &#x3D; require(&#39;.&#x2F;a.js&#39;)</span><br><span class=\"line\">module.a</span><br><span class=\"line\">&#x2F;&#x2F; 这里其实就是包装了一层立即执行函数，这样就不会污染全局变量了，</span><br><span class=\"line\">&#x2F;&#x2F; 重要的是 module 这里，module 是 Node 独有的一个变量</span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    a: 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; 基本实现</span><br><span class=\"line\">var module &#x3D; &#123;</span><br><span class=\"line\">  exports: &#123;&#125; &#x2F;&#x2F; exports 就是个空对象</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; 这个是为什么 exports 和 module.exports 用法相似的原因</span><br><span class=\"line\">var exports &#x3D; module.exports</span><br><span class=\"line\">var load &#x3D; function (module) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 导出的东西</span><br><span class=\"line\">    var a &#x3D; 1</span><br><span class=\"line\">    module.exports &#x3D; a</span><br><span class=\"line\">    return module.exports</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>再来说说 module.exports 和 exports，用法其实是相似的，但是不能对 exports 直接赋值，不会有任何效果。</p>\n<p>对于 CommonJS 和 ES6 中的模块化的两者区别是：</p>\n<ul>\n<li>前者支持动态导入，也就是 require(${path}/xx.js)，后者目前不支持，但是已有提案</li>\n<li>前者是同步导入，因为用于服务端，文件都在本地，同步导入即使卡住主线程影响也不大。而后者是异步导入，因为用于浏览器，需要下载文件，如果也采用同步导入会对渲染有很大影响</li>\n<li>前者在导出时都是值拷贝，就算导出的值变了，导入的值也不会改变，所以如果想更新值，必须重新导入一次。但是后者采用实时绑定的方式，导入导出的值都指向同一个内存地址，所以导入值会跟随导出值变化</li>\n<li>后者会编译成 require/exports 来执行的</li>\n</ul>\n<h2 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h2><p>AMD 是由 <code>RequireJS</code> 提出的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; AMD</span><br><span class=\"line\">define([&#39;.&#x2F;a&#39;, &#39;.&#x2F;b&#39;], function(a, b) &#123;</span><br><span class=\"line\">    a.do()</span><br><span class=\"line\">    b.do()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">define(function(require, exports, module) &#123;</span><br><span class=\"line\">    var a &#x3D; require(&#39;.&#x2F;a&#39;)</span><br><span class=\"line\">    a.doSomething()</span><br><span class=\"line\">    var b &#x3D; require(&#39;.&#x2F;b&#39;)</span><br><span class=\"line\">    b.doSomething()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"title":"前端常见知识点整理 ---- Promise","date":"2020-01-03T02:52:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# `Promise` 实现\n`Promise` 是 `ES6` 新增的语法，解决了回调地狱的问题。\n\n可以把 `Promise` 看成一个状态机。初始是 `pending` 状态，可以通过函数 `resolve` 和 `reject` ，将状态转变为 `resolved` 或者 `rejected` 状态，***状态一旦改变就不能再次变化***。\n\n`then` 函数会返回一个 `Promise` 实例，并且该返回值是一个新的实例而不是之前的实例。因为 `Promise` 规范规定除了 `pending` 状态，其他状态是不可以改变的，如果返回的是一个相同实例的话，多个 `then` 调用就失去意义了。\n\n对于 `then` 来说，本质上可以把它看成是 `flatMap`\n```\n// js代码\n\n// 三种状态\nconst PENDING = \"pending\";\nconst RESOLVED = \"resolved\";\nconst REJECTED = \"rejected\";\n// promise 接收一个函数参数，该函数会立即执行\nfunction MyPromise(fn) {\n  let _this = this;\n  _this.currentState = PENDING;\n  _this.value = undefined;\n  // 用于保存 then 中的回调，只有当 promise\n  // 状态为 pending 时才会缓存，并且每个实例至多缓存一个\n  _this.resolvedCallbacks = [];\n  _this.rejectedCallbacks = [];\n\n  _this.resolve = function (value) {\n    if (value instanceof MyPromise) {\n      // 如果 value 是个 Promise，递归执行\n      return value.then(_this.resolve, _this.reject)\n    }\n    setTimeout(() => { // 异步执行，保证执行顺序\n      if (_this.currentState === PENDING) {\n        _this.currentState = RESOLVED;\n        _this.value = value;\n        _this.resolvedCallbacks.forEach(cb => cb());\n      }\n    })\n  };\n\n  _this.reject = function (reason) {\n    setTimeout(() => { // 异步执行，保证执行顺序\n      if (_this.currentState === PENDING) {\n        _this.currentState = REJECTED;\n        _this.value = reason;\n        _this.rejectedCallbacks.forEach(cb => cb());\n      }\n    })\n  }\n  // 用于解决以下问题\n  // new Promise(() => throw Error('error))\n  try {\n    fn(_this.resolve, _this.reject);\n  } catch (e) {\n    _this.reject(e);\n  }\n}\n\nMyPromise.prototype.then = function (onResolved, onRejected) {\n  var self = this;\n  // 规范 2.2.7，then 必须返回一个新的 promise\n  var promise2;\n  // 规范 2.2.onResolved 和 onRejected 都为可选参数\n  // 如果类型不是函数需要忽略，同时也实现了透传\n  // Promise.resolve(4).then().then((value) => console.log(value))\n  onResolved = typeof onResolved === 'function' ? onResolved : v => v;\n  onRejected = typeof onRejected === 'function' ? onRejected : r => throw r;\n\n  if (self.currentState === RESOLVED) {\n    return (promise2 = new MyPromise(function (resolve, reject) {\n      // 规范 2.2.4，保证 onFulfilled，onRjected 异步执行\n      // 所以用了 setTimeout 包裹下\n      setTimeout(function () {\n        try {\n          var x = onResolved(self.value);\n          resolutionProcedure(promise2, x, resolve, reject);\n        } catch (reason) {\n          reject(reason);\n        }\n      });\n    }));\n  }\n\n  if (self.currentState === REJECTED) {\n    return (promise2 = new MyPromise(function (resolve, reject) {\n      setTimeout(function () {\n        // 异步执行onRejected\n        try {\n          var x = onRejected(self.value);\n          resolutionProcedure(promise2, x, resolve, reject);\n        } catch (reason) {\n          reject(reason);\n        }\n      });\n    }));\n  }\n\n  if (self.currentState === PENDING) {\n    return (promise2 = new MyPromise(function (resolve, reject) {\n      self.resolvedCallbacks.push(function () {\n        // 考虑到可能会有报错，所以使用 try/catch 包裹\n        try {\n          var x = onResolved(self.value);\n          resolutionProcedure(promise2, x, resolve, reject);\n        } catch (r) {\n          reject(r);\n        }\n      });\n\n      self.rejectedCallbacks.push(function () {\n        try {\n          var x = onRejected(self.value);\n          resolutionProcedure(promise2, x, resolve, reject);\n        } catch (r) {\n          reject(r);\n        }\n      });\n    }));\n  }\n};\n// 规范 2.3\nfunction resolutionProcedure(promise2, x, resolve, reject) {\n  // 规范 2.3.1，x 不能和 promise2 相同，避免循环引用\n  if (promise2 === x) {\n    return reject(new TypeError(\"Error\"));\n  }\n  // 规范 2.3.2\n  // 如果 x 为 Promise，状态为 pending 需要继续等待否则执行\n  if (x instanceof MyPromise) {\n    if (x.currentState === PENDING) {\n      x.then(function (value) {\n        // 再次调用该函数是为了确认 x resolve 的\n        // 参数是什么类型，如果是基本类型就再次 resolve\n        // 把值传给下个 then\n        resolutionProcedure(promise2, value, resolve, reject);\n      }, reject);\n    } else {\n      x.then(resolve, reject);\n    }\n    return;\n  }\n  // 规范 2.3.3.3.3\n  // reject 或者 resolve 其中一个执行过得话，忽略其他的\n  let called = false;\n  // 规范 2.3.3，判断 x 是否为对象或者函数\n  if (x !== null && (typeof x === \"object\" || typeof x === \"function\")) {\n    // 规范 2.3.3.2，如果不能取出 then，就 reject\n    try {\n      // 规范 2.3.3.1\n      let then = x.then;\n      // 如果 then 是函数，调用 x.then\n      if (typeof then === \"function\") {\n        // 规范 2.3.3.3\n        then.call(\n          x,\n          y => {\n            if (called) return;\n            called = true;\n            // 规范 2.3.3.3.1\n            resolutionProcedure(promise2, y, resolve, reject);\n          },\n          e => {\n            if (called) return;\n            called = true;\n            reject(e);\n          }\n        );\n      } else {\n        // 规范 2.3.3.4\n        resolve(x);\n      }\n    } catch (e) {\n      if (called) return;\n      called = true;\n      reject(e);\n    }\n  } else {\n    // 规范 2.3.4，x 为基本类型\n    resolve(x);\n  }\n}\n```\n以上就是根据 `Promise / A+` 规范来实现的代码，可以通过 `promises-aplus-tests` 的完整测试\n","source":"_posts/FE-guide-Promise.md","raw":"---\ntitle: 前端常见知识点整理 ---- Promise\ndate: 2020-01-03 10:52:00\ncategories: \n  - 前端技术\n  - 前端常见知识点整理\ntags: \n\t- 面试\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# `Promise` 实现\n`Promise` 是 `ES6` 新增的语法，解决了回调地狱的问题。\n\n可以把 `Promise` 看成一个状态机。初始是 `pending` 状态，可以通过函数 `resolve` 和 `reject` ，将状态转变为 `resolved` 或者 `rejected` 状态，***状态一旦改变就不能再次变化***。\n\n`then` 函数会返回一个 `Promise` 实例，并且该返回值是一个新的实例而不是之前的实例。因为 `Promise` 规范规定除了 `pending` 状态，其他状态是不可以改变的，如果返回的是一个相同实例的话，多个 `then` 调用就失去意义了。\n\n对于 `then` 来说，本质上可以把它看成是 `flatMap`\n```\n// js代码\n\n// 三种状态\nconst PENDING = \"pending\";\nconst RESOLVED = \"resolved\";\nconst REJECTED = \"rejected\";\n// promise 接收一个函数参数，该函数会立即执行\nfunction MyPromise(fn) {\n  let _this = this;\n  _this.currentState = PENDING;\n  _this.value = undefined;\n  // 用于保存 then 中的回调，只有当 promise\n  // 状态为 pending 时才会缓存，并且每个实例至多缓存一个\n  _this.resolvedCallbacks = [];\n  _this.rejectedCallbacks = [];\n\n  _this.resolve = function (value) {\n    if (value instanceof MyPromise) {\n      // 如果 value 是个 Promise，递归执行\n      return value.then(_this.resolve, _this.reject)\n    }\n    setTimeout(() => { // 异步执行，保证执行顺序\n      if (_this.currentState === PENDING) {\n        _this.currentState = RESOLVED;\n        _this.value = value;\n        _this.resolvedCallbacks.forEach(cb => cb());\n      }\n    })\n  };\n\n  _this.reject = function (reason) {\n    setTimeout(() => { // 异步执行，保证执行顺序\n      if (_this.currentState === PENDING) {\n        _this.currentState = REJECTED;\n        _this.value = reason;\n        _this.rejectedCallbacks.forEach(cb => cb());\n      }\n    })\n  }\n  // 用于解决以下问题\n  // new Promise(() => throw Error('error))\n  try {\n    fn(_this.resolve, _this.reject);\n  } catch (e) {\n    _this.reject(e);\n  }\n}\n\nMyPromise.prototype.then = function (onResolved, onRejected) {\n  var self = this;\n  // 规范 2.2.7，then 必须返回一个新的 promise\n  var promise2;\n  // 规范 2.2.onResolved 和 onRejected 都为可选参数\n  // 如果类型不是函数需要忽略，同时也实现了透传\n  // Promise.resolve(4).then().then((value) => console.log(value))\n  onResolved = typeof onResolved === 'function' ? onResolved : v => v;\n  onRejected = typeof onRejected === 'function' ? onRejected : r => throw r;\n\n  if (self.currentState === RESOLVED) {\n    return (promise2 = new MyPromise(function (resolve, reject) {\n      // 规范 2.2.4，保证 onFulfilled，onRjected 异步执行\n      // 所以用了 setTimeout 包裹下\n      setTimeout(function () {\n        try {\n          var x = onResolved(self.value);\n          resolutionProcedure(promise2, x, resolve, reject);\n        } catch (reason) {\n          reject(reason);\n        }\n      });\n    }));\n  }\n\n  if (self.currentState === REJECTED) {\n    return (promise2 = new MyPromise(function (resolve, reject) {\n      setTimeout(function () {\n        // 异步执行onRejected\n        try {\n          var x = onRejected(self.value);\n          resolutionProcedure(promise2, x, resolve, reject);\n        } catch (reason) {\n          reject(reason);\n        }\n      });\n    }));\n  }\n\n  if (self.currentState === PENDING) {\n    return (promise2 = new MyPromise(function (resolve, reject) {\n      self.resolvedCallbacks.push(function () {\n        // 考虑到可能会有报错，所以使用 try/catch 包裹\n        try {\n          var x = onResolved(self.value);\n          resolutionProcedure(promise2, x, resolve, reject);\n        } catch (r) {\n          reject(r);\n        }\n      });\n\n      self.rejectedCallbacks.push(function () {\n        try {\n          var x = onRejected(self.value);\n          resolutionProcedure(promise2, x, resolve, reject);\n        } catch (r) {\n          reject(r);\n        }\n      });\n    }));\n  }\n};\n// 规范 2.3\nfunction resolutionProcedure(promise2, x, resolve, reject) {\n  // 规范 2.3.1，x 不能和 promise2 相同，避免循环引用\n  if (promise2 === x) {\n    return reject(new TypeError(\"Error\"));\n  }\n  // 规范 2.3.2\n  // 如果 x 为 Promise，状态为 pending 需要继续等待否则执行\n  if (x instanceof MyPromise) {\n    if (x.currentState === PENDING) {\n      x.then(function (value) {\n        // 再次调用该函数是为了确认 x resolve 的\n        // 参数是什么类型，如果是基本类型就再次 resolve\n        // 把值传给下个 then\n        resolutionProcedure(promise2, value, resolve, reject);\n      }, reject);\n    } else {\n      x.then(resolve, reject);\n    }\n    return;\n  }\n  // 规范 2.3.3.3.3\n  // reject 或者 resolve 其中一个执行过得话，忽略其他的\n  let called = false;\n  // 规范 2.3.3，判断 x 是否为对象或者函数\n  if (x !== null && (typeof x === \"object\" || typeof x === \"function\")) {\n    // 规范 2.3.3.2，如果不能取出 then，就 reject\n    try {\n      // 规范 2.3.3.1\n      let then = x.then;\n      // 如果 then 是函数，调用 x.then\n      if (typeof then === \"function\") {\n        // 规范 2.3.3.3\n        then.call(\n          x,\n          y => {\n            if (called) return;\n            called = true;\n            // 规范 2.3.3.3.1\n            resolutionProcedure(promise2, y, resolve, reject);\n          },\n          e => {\n            if (called) return;\n            called = true;\n            reject(e);\n          }\n        );\n      } else {\n        // 规范 2.3.3.4\n        resolve(x);\n      }\n    } catch (e) {\n      if (called) return;\n      called = true;\n      reject(e);\n    }\n  } else {\n    // 规范 2.3.4，x 为基本类型\n    resolve(x);\n  }\n}\n```\n以上就是根据 `Promise / A+` 规范来实现的代码，可以通过 `promises-aplus-tests` 的完整测试\n","slug":"FE-guide-Promise","published":1,"updated":"2020-04-02T03:20:12.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grw7000nooa6d0vj1ukr","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"Promise-实现\"><a href=\"#Promise-实现\" class=\"headerlink\" title=\"Promise 实现\"></a><code>Promise</code> 实现</h1><p><code>Promise</code> 是 <code>ES6</code> 新增的语法，解决了回调地狱的问题。</p>\n<p>可以把 <code>Promise</code> 看成一个状态机。初始是 <code>pending</code> 状态，可以通过函数 <code>resolve</code> 和 <code>reject</code> ，将状态转变为 <code>resolved</code> 或者 <code>rejected</code> 状态，<strong><em>状态一旦改变就不能再次变化</em></strong>。</p>\n<p><code>then</code> 函数会返回一个 <code>Promise</code> 实例，并且该返回值是一个新的实例而不是之前的实例。因为 <code>Promise</code> 规范规定除了 <code>pending</code> 状态，其他状态是不可以改变的，如果返回的是一个相同实例的话，多个 <code>then</code> 调用就失去意义了。</p>\n<p>对于 <code>then</code> 来说，本质上可以把它看成是 <code>flatMap</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 三种状态</span><br><span class=\"line\">const PENDING &#x3D; &quot;pending&quot;;</span><br><span class=\"line\">const RESOLVED &#x3D; &quot;resolved&quot;;</span><br><span class=\"line\">const REJECTED &#x3D; &quot;rejected&quot;;</span><br><span class=\"line\">&#x2F;&#x2F; promise 接收一个函数参数，该函数会立即执行</span><br><span class=\"line\">function MyPromise(fn) &#123;</span><br><span class=\"line\">  let _this &#x3D; this;</span><br><span class=\"line\">  _this.currentState &#x3D; PENDING;</span><br><span class=\"line\">  _this.value &#x3D; undefined;</span><br><span class=\"line\">  &#x2F;&#x2F; 用于保存 then 中的回调，只有当 promise</span><br><span class=\"line\">  &#x2F;&#x2F; 状态为 pending 时才会缓存，并且每个实例至多缓存一个</span><br><span class=\"line\">  _this.resolvedCallbacks &#x3D; [];</span><br><span class=\"line\">  _this.rejectedCallbacks &#x3D; [];</span><br><span class=\"line\"></span><br><span class=\"line\">  _this.resolve &#x3D; function (value) &#123;</span><br><span class=\"line\">    if (value instanceof MyPromise) &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 如果 value 是个 Promise，递归执行</span><br><span class=\"line\">      return value.then(_this.resolve, _this.reject)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setTimeout(() &#x3D;&gt; &#123; &#x2F;&#x2F; 异步执行，保证执行顺序</span><br><span class=\"line\">      if (_this.currentState &#x3D;&#x3D;&#x3D; PENDING) &#123;</span><br><span class=\"line\">        _this.currentState &#x3D; RESOLVED;</span><br><span class=\"line\">        _this.value &#x3D; value;</span><br><span class=\"line\">        _this.resolvedCallbacks.forEach(cb &#x3D;&gt; cb());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  _this.reject &#x3D; function (reason) &#123;</span><br><span class=\"line\">    setTimeout(() &#x3D;&gt; &#123; &#x2F;&#x2F; 异步执行，保证执行顺序</span><br><span class=\"line\">      if (_this.currentState &#x3D;&#x3D;&#x3D; PENDING) &#123;</span><br><span class=\"line\">        _this.currentState &#x3D; REJECTED;</span><br><span class=\"line\">        _this.value &#x3D; reason;</span><br><span class=\"line\">        _this.rejectedCallbacks.forEach(cb &#x3D;&gt; cb());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 用于解决以下问题</span><br><span class=\"line\">  &#x2F;&#x2F; new Promise(() &#x3D;&gt; throw Error(&#39;error))</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    fn(_this.resolve, _this.reject);</span><br><span class=\"line\">  &#125; catch (e) &#123;</span><br><span class=\"line\">    _this.reject(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyPromise.prototype.then &#x3D; function (onResolved, onRejected) &#123;</span><br><span class=\"line\">  var self &#x3D; this;</span><br><span class=\"line\">  &#x2F;&#x2F; 规范 2.2.7，then 必须返回一个新的 promise</span><br><span class=\"line\">  var promise2;</span><br><span class=\"line\">  &#x2F;&#x2F; 规范 2.2.onResolved 和 onRejected 都为可选参数</span><br><span class=\"line\">  &#x2F;&#x2F; 如果类型不是函数需要忽略，同时也实现了透传</span><br><span class=\"line\">  &#x2F;&#x2F; Promise.resolve(4).then().then((value) &#x3D;&gt; console.log(value))</span><br><span class=\"line\">  onResolved &#x3D; typeof onResolved &#x3D;&#x3D;&#x3D; &#39;function&#39; ? onResolved : v &#x3D;&gt; v;</span><br><span class=\"line\">  onRejected &#x3D; typeof onRejected &#x3D;&#x3D;&#x3D; &#39;function&#39; ? onRejected : r &#x3D;&gt; throw r;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (self.currentState &#x3D;&#x3D;&#x3D; RESOLVED) &#123;</span><br><span class=\"line\">    return (promise2 &#x3D; new MyPromise(function (resolve, reject) &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 规范 2.2.4，保证 onFulfilled，onRjected 异步执行</span><br><span class=\"line\">      &#x2F;&#x2F; 所以用了 setTimeout 包裹下</span><br><span class=\"line\">      setTimeout(function () &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          var x &#x3D; onResolved(self.value);</span><br><span class=\"line\">          resolutionProcedure(promise2, x, resolve, reject);</span><br><span class=\"line\">        &#125; catch (reason) &#123;</span><br><span class=\"line\">          reject(reason);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (self.currentState &#x3D;&#x3D;&#x3D; REJECTED) &#123;</span><br><span class=\"line\">    return (promise2 &#x3D; new MyPromise(function (resolve, reject) &#123;</span><br><span class=\"line\">      setTimeout(function () &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 异步执行onRejected</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          var x &#x3D; onRejected(self.value);</span><br><span class=\"line\">          resolutionProcedure(promise2, x, resolve, reject);</span><br><span class=\"line\">        &#125; catch (reason) &#123;</span><br><span class=\"line\">          reject(reason);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (self.currentState &#x3D;&#x3D;&#x3D; PENDING) &#123;</span><br><span class=\"line\">    return (promise2 &#x3D; new MyPromise(function (resolve, reject) &#123;</span><br><span class=\"line\">      self.resolvedCallbacks.push(function () &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 考虑到可能会有报错，所以使用 try&#x2F;catch 包裹</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          var x &#x3D; onResolved(self.value);</span><br><span class=\"line\">          resolutionProcedure(promise2, x, resolve, reject);</span><br><span class=\"line\">        &#125; catch (r) &#123;</span><br><span class=\"line\">          reject(r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      self.rejectedCallbacks.push(function () &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          var x &#x3D; onRejected(self.value);</span><br><span class=\"line\">          resolutionProcedure(promise2, x, resolve, reject);</span><br><span class=\"line\">        &#125; catch (r) &#123;</span><br><span class=\"line\">          reject(r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#x2F;&#x2F; 规范 2.3</span><br><span class=\"line\">function resolutionProcedure(promise2, x, resolve, reject) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 规范 2.3.1，x 不能和 promise2 相同，避免循环引用</span><br><span class=\"line\">  if (promise2 &#x3D;&#x3D;&#x3D; x) &#123;</span><br><span class=\"line\">    return reject(new TypeError(&quot;Error&quot;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 规范 2.3.2</span><br><span class=\"line\">  &#x2F;&#x2F; 如果 x 为 Promise，状态为 pending 需要继续等待否则执行</span><br><span class=\"line\">  if (x instanceof MyPromise) &#123;</span><br><span class=\"line\">    if (x.currentState &#x3D;&#x3D;&#x3D; PENDING) &#123;</span><br><span class=\"line\">      x.then(function (value) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 再次调用该函数是为了确认 x resolve 的</span><br><span class=\"line\">        &#x2F;&#x2F; 参数是什么类型，如果是基本类型就再次 resolve</span><br><span class=\"line\">        &#x2F;&#x2F; 把值传给下个 then</span><br><span class=\"line\">        resolutionProcedure(promise2, value, resolve, reject);</span><br><span class=\"line\">      &#125;, reject);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      x.then(resolve, reject);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 规范 2.3.3.3.3</span><br><span class=\"line\">  &#x2F;&#x2F; reject 或者 resolve 其中一个执行过得话，忽略其他的</span><br><span class=\"line\">  let called &#x3D; false;</span><br><span class=\"line\">  &#x2F;&#x2F; 规范 2.3.3，判断 x 是否为对象或者函数</span><br><span class=\"line\">  if (x !&#x3D;&#x3D; null &amp;&amp; (typeof x &#x3D;&#x3D;&#x3D; &quot;object&quot; || typeof x &#x3D;&#x3D;&#x3D; &quot;function&quot;)) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 规范 2.3.3.2，如果不能取出 then，就 reject</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 规范 2.3.3.1</span><br><span class=\"line\">      let then &#x3D; x.then;</span><br><span class=\"line\">      &#x2F;&#x2F; 如果 then 是函数，调用 x.then</span><br><span class=\"line\">      if (typeof then &#x3D;&#x3D;&#x3D; &quot;function&quot;) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 规范 2.3.3.3</span><br><span class=\"line\">        then.call(</span><br><span class=\"line\">          x,</span><br><span class=\"line\">          y &#x3D;&gt; &#123;</span><br><span class=\"line\">            if (called) return;</span><br><span class=\"line\">            called &#x3D; true;</span><br><span class=\"line\">            &#x2F;&#x2F; 规范 2.3.3.3.1</span><br><span class=\"line\">            resolutionProcedure(promise2, y, resolve, reject);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          e &#x3D;&gt; &#123;</span><br><span class=\"line\">            if (called) return;</span><br><span class=\"line\">            called &#x3D; true;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 规范 2.3.3.4</span><br><span class=\"line\">        resolve(x);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; catch (e) &#123;</span><br><span class=\"line\">      if (called) return;</span><br><span class=\"line\">      called &#x3D; true;</span><br><span class=\"line\">      reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 规范 2.3.4，x 为基本类型</span><br><span class=\"line\">    resolve(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上就是根据 <code>Promise / A+</code> 规范来实现的代码，可以通过 <code>promises-aplus-tests</code> 的完整测试</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"Promise-实现\"><a href=\"#Promise-实现\" class=\"headerlink\" title=\"Promise 实现\"></a><code>Promise</code> 实现</h1><p><code>Promise</code> 是 <code>ES6</code> 新增的语法，解决了回调地狱的问题。</p>\n<p>可以把 <code>Promise</code> 看成一个状态机。初始是 <code>pending</code> 状态，可以通过函数 <code>resolve</code> 和 <code>reject</code> ，将状态转变为 <code>resolved</code> 或者 <code>rejected</code> 状态，<strong><em>状态一旦改变就不能再次变化</em></strong>。</p>\n<p><code>then</code> 函数会返回一个 <code>Promise</code> 实例，并且该返回值是一个新的实例而不是之前的实例。因为 <code>Promise</code> 规范规定除了 <code>pending</code> 状态，其他状态是不可以改变的，如果返回的是一个相同实例的话，多个 <code>then</code> 调用就失去意义了。</p>\n<p>对于 <code>then</code> 来说，本质上可以把它看成是 <code>flatMap</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 三种状态</span><br><span class=\"line\">const PENDING &#x3D; &quot;pending&quot;;</span><br><span class=\"line\">const RESOLVED &#x3D; &quot;resolved&quot;;</span><br><span class=\"line\">const REJECTED &#x3D; &quot;rejected&quot;;</span><br><span class=\"line\">&#x2F;&#x2F; promise 接收一个函数参数，该函数会立即执行</span><br><span class=\"line\">function MyPromise(fn) &#123;</span><br><span class=\"line\">  let _this &#x3D; this;</span><br><span class=\"line\">  _this.currentState &#x3D; PENDING;</span><br><span class=\"line\">  _this.value &#x3D; undefined;</span><br><span class=\"line\">  &#x2F;&#x2F; 用于保存 then 中的回调，只有当 promise</span><br><span class=\"line\">  &#x2F;&#x2F; 状态为 pending 时才会缓存，并且每个实例至多缓存一个</span><br><span class=\"line\">  _this.resolvedCallbacks &#x3D; [];</span><br><span class=\"line\">  _this.rejectedCallbacks &#x3D; [];</span><br><span class=\"line\"></span><br><span class=\"line\">  _this.resolve &#x3D; function (value) &#123;</span><br><span class=\"line\">    if (value instanceof MyPromise) &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 如果 value 是个 Promise，递归执行</span><br><span class=\"line\">      return value.then(_this.resolve, _this.reject)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setTimeout(() &#x3D;&gt; &#123; &#x2F;&#x2F; 异步执行，保证执行顺序</span><br><span class=\"line\">      if (_this.currentState &#x3D;&#x3D;&#x3D; PENDING) &#123;</span><br><span class=\"line\">        _this.currentState &#x3D; RESOLVED;</span><br><span class=\"line\">        _this.value &#x3D; value;</span><br><span class=\"line\">        _this.resolvedCallbacks.forEach(cb &#x3D;&gt; cb());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  _this.reject &#x3D; function (reason) &#123;</span><br><span class=\"line\">    setTimeout(() &#x3D;&gt; &#123; &#x2F;&#x2F; 异步执行，保证执行顺序</span><br><span class=\"line\">      if (_this.currentState &#x3D;&#x3D;&#x3D; PENDING) &#123;</span><br><span class=\"line\">        _this.currentState &#x3D; REJECTED;</span><br><span class=\"line\">        _this.value &#x3D; reason;</span><br><span class=\"line\">        _this.rejectedCallbacks.forEach(cb &#x3D;&gt; cb());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 用于解决以下问题</span><br><span class=\"line\">  &#x2F;&#x2F; new Promise(() &#x3D;&gt; throw Error(&#39;error))</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    fn(_this.resolve, _this.reject);</span><br><span class=\"line\">  &#125; catch (e) &#123;</span><br><span class=\"line\">    _this.reject(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyPromise.prototype.then &#x3D; function (onResolved, onRejected) &#123;</span><br><span class=\"line\">  var self &#x3D; this;</span><br><span class=\"line\">  &#x2F;&#x2F; 规范 2.2.7，then 必须返回一个新的 promise</span><br><span class=\"line\">  var promise2;</span><br><span class=\"line\">  &#x2F;&#x2F; 规范 2.2.onResolved 和 onRejected 都为可选参数</span><br><span class=\"line\">  &#x2F;&#x2F; 如果类型不是函数需要忽略，同时也实现了透传</span><br><span class=\"line\">  &#x2F;&#x2F; Promise.resolve(4).then().then((value) &#x3D;&gt; console.log(value))</span><br><span class=\"line\">  onResolved &#x3D; typeof onResolved &#x3D;&#x3D;&#x3D; &#39;function&#39; ? onResolved : v &#x3D;&gt; v;</span><br><span class=\"line\">  onRejected &#x3D; typeof onRejected &#x3D;&#x3D;&#x3D; &#39;function&#39; ? onRejected : r &#x3D;&gt; throw r;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (self.currentState &#x3D;&#x3D;&#x3D; RESOLVED) &#123;</span><br><span class=\"line\">    return (promise2 &#x3D; new MyPromise(function (resolve, reject) &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 规范 2.2.4，保证 onFulfilled，onRjected 异步执行</span><br><span class=\"line\">      &#x2F;&#x2F; 所以用了 setTimeout 包裹下</span><br><span class=\"line\">      setTimeout(function () &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          var x &#x3D; onResolved(self.value);</span><br><span class=\"line\">          resolutionProcedure(promise2, x, resolve, reject);</span><br><span class=\"line\">        &#125; catch (reason) &#123;</span><br><span class=\"line\">          reject(reason);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (self.currentState &#x3D;&#x3D;&#x3D; REJECTED) &#123;</span><br><span class=\"line\">    return (promise2 &#x3D; new MyPromise(function (resolve, reject) &#123;</span><br><span class=\"line\">      setTimeout(function () &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 异步执行onRejected</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          var x &#x3D; onRejected(self.value);</span><br><span class=\"line\">          resolutionProcedure(promise2, x, resolve, reject);</span><br><span class=\"line\">        &#125; catch (reason) &#123;</span><br><span class=\"line\">          reject(reason);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (self.currentState &#x3D;&#x3D;&#x3D; PENDING) &#123;</span><br><span class=\"line\">    return (promise2 &#x3D; new MyPromise(function (resolve, reject) &#123;</span><br><span class=\"line\">      self.resolvedCallbacks.push(function () &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 考虑到可能会有报错，所以使用 try&#x2F;catch 包裹</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          var x &#x3D; onResolved(self.value);</span><br><span class=\"line\">          resolutionProcedure(promise2, x, resolve, reject);</span><br><span class=\"line\">        &#125; catch (r) &#123;</span><br><span class=\"line\">          reject(r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      self.rejectedCallbacks.push(function () &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          var x &#x3D; onRejected(self.value);</span><br><span class=\"line\">          resolutionProcedure(promise2, x, resolve, reject);</span><br><span class=\"line\">        &#125; catch (r) &#123;</span><br><span class=\"line\">          reject(r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#x2F;&#x2F; 规范 2.3</span><br><span class=\"line\">function resolutionProcedure(promise2, x, resolve, reject) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 规范 2.3.1，x 不能和 promise2 相同，避免循环引用</span><br><span class=\"line\">  if (promise2 &#x3D;&#x3D;&#x3D; x) &#123;</span><br><span class=\"line\">    return reject(new TypeError(&quot;Error&quot;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 规范 2.3.2</span><br><span class=\"line\">  &#x2F;&#x2F; 如果 x 为 Promise，状态为 pending 需要继续等待否则执行</span><br><span class=\"line\">  if (x instanceof MyPromise) &#123;</span><br><span class=\"line\">    if (x.currentState &#x3D;&#x3D;&#x3D; PENDING) &#123;</span><br><span class=\"line\">      x.then(function (value) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 再次调用该函数是为了确认 x resolve 的</span><br><span class=\"line\">        &#x2F;&#x2F; 参数是什么类型，如果是基本类型就再次 resolve</span><br><span class=\"line\">        &#x2F;&#x2F; 把值传给下个 then</span><br><span class=\"line\">        resolutionProcedure(promise2, value, resolve, reject);</span><br><span class=\"line\">      &#125;, reject);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      x.then(resolve, reject);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 规范 2.3.3.3.3</span><br><span class=\"line\">  &#x2F;&#x2F; reject 或者 resolve 其中一个执行过得话，忽略其他的</span><br><span class=\"line\">  let called &#x3D; false;</span><br><span class=\"line\">  &#x2F;&#x2F; 规范 2.3.3，判断 x 是否为对象或者函数</span><br><span class=\"line\">  if (x !&#x3D;&#x3D; null &amp;&amp; (typeof x &#x3D;&#x3D;&#x3D; &quot;object&quot; || typeof x &#x3D;&#x3D;&#x3D; &quot;function&quot;)) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 规范 2.3.3.2，如果不能取出 then，就 reject</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 规范 2.3.3.1</span><br><span class=\"line\">      let then &#x3D; x.then;</span><br><span class=\"line\">      &#x2F;&#x2F; 如果 then 是函数，调用 x.then</span><br><span class=\"line\">      if (typeof then &#x3D;&#x3D;&#x3D; &quot;function&quot;) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 规范 2.3.3.3</span><br><span class=\"line\">        then.call(</span><br><span class=\"line\">          x,</span><br><span class=\"line\">          y &#x3D;&gt; &#123;</span><br><span class=\"line\">            if (called) return;</span><br><span class=\"line\">            called &#x3D; true;</span><br><span class=\"line\">            &#x2F;&#x2F; 规范 2.3.3.3.1</span><br><span class=\"line\">            resolutionProcedure(promise2, y, resolve, reject);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          e &#x3D;&gt; &#123;</span><br><span class=\"line\">            if (called) return;</span><br><span class=\"line\">            called &#x3D; true;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 规范 2.3.3.4</span><br><span class=\"line\">        resolve(x);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; catch (e) &#123;</span><br><span class=\"line\">      if (called) return;</span><br><span class=\"line\">      called &#x3D; true;</span><br><span class=\"line\">      reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 规范 2.3.4，x 为基本类型</span><br><span class=\"line\">    resolve(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上就是根据 <code>Promise / A+</code> 规范来实现的代码，可以通过 <code>promises-aplus-tests</code> 的完整测试</p>\n"},{"title":"前端常见知识点整理 ---- 网络","date":"2020-01-09T07:35:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n网络相关的知识虽然平时在编码阶段很少遇到，但是并不是说它不重要，尤其是前端优化层面，能从网络传输过程优化的点有很多，所以，我们需要好好掌握网络相关的知识，接下来，我将会将我了解到的网络相关的知识点进行一一整理\n\n# UDP - User Datagram Protocol - 用户数据报协议\n## 面向报文\nUDP 是一个面向报文（报文可以理解为一段段的数据）的协议。意思就是 UDP 只是报文的搬运工，不会对报文进行任何拆分和拼接操作。\n\n具体来说\n- 在**发送端**，应用层将数据传递给传输层的 `UDP` 协议， `UDP` 只会给数据增加一个 `UDP` 头标识下是 `UDP` 协议，然后就传递给网络层了\n- 在**接收端**，网络层将数据传递给传输层， `UDP` 只去除 `IP` 报文头就传递给应用层，不会任何拼接操作\n\n## 不可靠性\n1.  `UDP` 是无连接的，也就是说通信不需要建立和断开连接。\n2.  `UDP` 也是不可靠的。协议收到什么数据就传递什么数据，并且也不会备份数据，对方能不能收到是不关心的\n3.  `UDP` 没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 `UDP` 而不是 `TCP` 。\n  \n## 高效\n因为 `UDP` 没有 `TCP` 那么复杂，需要保证数据不丢失且有序到达。所以 `UDP` 的头部开销小，只有八字节，相比 `TCP` 的至少二十字节要少得多，在传输数据报文时是很高效的。\n\n头部包含了以下几个数据\n\n- 两个十六位的端口号，分别为**源端口**（可选字段）和**目标端口**\n- 整个数据报文的长度\n- 整个数据报文的检验和（ `IPv4` 可选 字段），该字段用于发现头部信息和数据中的错误\n\n## 传输方式\n`UDP` 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 `UDP` 提供了单播，多播，广播的功能。\n\n# TCP\n## 头部\nTCP 头部比 UDP 头部复杂的多\n\n对于 TCP 头部来说，以下几个字段是很重要的\n\n- `Sequence number`（序号），它保证了 `TCP` 传输的报文都是有序的，对端可以通过序号顺序的拼接报文\n- `Acknowledgement Number`（确认编号），它表示数据接收端期望接收的下一个字节的编号是多少，同时也表示上一个序号的数据已经收到\n- `Window Size`（窗口大小），它表示还能接收多少字节的数据，用于流量控制\n- 标识符\n  - `URG=1`：该字段为一表示本数据报的数据部分包含紧急信息，是一个高优先级数据报文，此时紧急指针有效。紧急数据一定位于当前数据包数据部分的最前面，紧急指针标明了紧急数据的尾部。\n  - `ACK=1`：该字段为一表示确认号字段有效。此外，TCP 还规定在连接建立后传送的所有报文段都必须把 ACK 置为一。\n  - `PSH=1`：该字段为一表示接收端应该立即将数据 push 给应用层，而不是等到缓冲区满后再提交。\n  - `RST=1`：该字段为一表示当前 TCP 连接出现严重问题，可能需要重新建立 TCP 连接，也可以用于拒绝非法的报文段和拒绝连接请求。\n  - `SYN=1`：当SYN=1，ACK=0时，表示当前报文段是一个连接请求报文。当SYN=1，ACK=1时，表示当前报文段是一个同意建立连接的应答报文。\n  - `FIN=1`：该字段为一表示此报文段是一个释放连接的请求报文。\n\n## 状态机\n`HTTP` 是无连接的，所以作为下层的 `TCP` 协议也是无连接的，虽然看似 `TCP` 将两端连接了起来，但是其实只是两端共同维护了一个状态\n\n`TCP` 的状态机是很复杂的，并且与建立断开连接时的握手息息相关，接下来就来详细描述下两种握手。\n在这之前需要了解一个重要的性能指标 `RTT` 。该指标表示发送端发送数据到接收到对端数据所需的往返时间。\n\n### 建立连接三次握手\n在 TCP 协议中，主动发起请求的一端为客户端，被动连接的一端称为服务端。不管是客户端还是服务端，TCP 连接建立完后都能发送和接收数据，所以 TCP 也是一个全双工的协议。\n\n起初，两端都为 CLOSED 状态。在通信开始前，双方都会创建 TCB。 服务器创建完 TCB 后遍进入 LISTEN 状态，此时开始等待客户端发送数据。\n\n#### 第一次握手\n客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态，x 表示客户端的数据通信初始序号。\n\n#### 第二次握手\n服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。\n\n#### 第三次握手\n当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。\n\nPS：第三次握手可以包含数据，通过 TCP 快速打开（TFO）技术。其实只要涉及到握手的协议，都可以使用类似 TFO 的方式，客户端和服务端存储相同 cookie，下次握手时发出 cookie 达到减少 RTT 的目的。\n\n***你是否有疑惑明明两次握手就可以建立起连接，为什么还需要第三次应答？***\n\n因为这是为了防止失效的连接请求报文段被服务端接收，从而产生错误。\n\n可以想象如下场景。客户端发送了一个连接请求 A，但是因为网络原因造成了超时，这时 TCP 会启动超时重传的机制再次发送一个连接请求 B。此时请求顺利到达服务端，服务端应答完就建立了请求。如果连接请求 A 在两端关闭后终于抵达了服务端，那么这时服务端会认为客户端又需要建立 TCP 连接，从而应答了该请求并进入 ESTABLISHED 状态。此时客户端其实是 CLOSED 状态，那么就会导致服务端一直等待，造成资源的浪费。\n\nPS：在建立连接中，任意一端掉线，TCP 都会重发 SYN 包，一般会重试五次，在建立连接中可能会遇到 SYN FLOOD 攻击。遇到这种情况你可以选择调低重试次数或者干脆在不能处理的情况下拒绝请求。\n\n### 断开链接四次握手\nTCP 是全双工的，在断开连接时两端都需要发送 FIN 和 ACK。\n\n#### 第一次握手\n若客户端 A 认为数据发送完成，则它需要向服务端 B 发送连接释放请求。\n\n#### 第二次握手\nB 收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，表示 A 到 B 的连接已经释放，不接收 A 发的数据了。但是因为 TCP 连接时双向的，所以 B 仍旧可以发送数据给 A。\n\n#### 第三次握手\nB 如果此时还有没发完的数据会继续发送，完毕后会向 A 发送连接释放请求，然后 B 便进入 LAST-ACK 状态。\n\nPS：通过延迟确认的技术（通常有时间限制，否则对方会误认为需要重传），可以将第二次和第三次握手合并，延迟 ACK 包的发送。\n\n#### 第四次握手\n\nA 收到释放请求后，向 B 发送确认应答，此时 A 进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有 B 的重发请求的话，就进入 CLOSED 状态。当 B 收到确认应答后，也便进入 CLOSED 状态。\n\n***为什么 A 要进入 TIME-WAIT 状态，等待 2MSL 时间后才进入 CLOSED 状态？***\n\n为了保证 B 能收到 A 的确认应答。若 A 发完确认应答后直接进入 CLOSED 状态，如果确认应答因为网络问题一直没有到达，那么会造成 B 不能正常关闭。\n\n### ARQ 协议\nARQ 协议也就是超时重传机制。通过确认和超时机制保证了数据的正确送达，ARQ 协议包含停止等待 ARQ 和连续 ARQ\n\n#### 停止等待 ARQ\n#### 正常传输过程\n只要 A 向 B 发送一段报文，都要停止发送并启动一个定时器，等待对端回应，在定时器时间内接收到对端应答就取消定时器并发送下一段报文。\n\n#### 报文丢失或出错\n在报文传输的过程中可能会出现丢包。这时候超过定时器设定的时间就会再次发送丢包的数据直到对端响应，所以需要每次都备份发送的数据。\n\n即使报文正常的传输到对端，也可能出现在传输过程中报文出错的问题。这时候对端会抛弃该报文并等待 A 端重传。\n\nPS：一般定时器设定的时间都会大于一个 RTT 的平均时间。\n\n#### ACK 超时或丢失\n\n对端传输的应答也可能出现丢失或超时的情况。那么超过定时器时间 A 端照样会重传报文。这时候 B 端收到相同序号的报文会丢弃该报文并重传应答，直到 A 端发送下一个序号的报文。\n\n在超时的情况下也可能出现应答很迟到达，这时 A 端会判断该序号是否已经接收过，如果接收过只需要丢弃应答即可。\n\n***这个协议的缺点就是传输效率低，在良好的网络环境下每次发送报文都得等待对端的 ACK 。***\n\n#### 连续 ARQ\n在连续 ARQ 中，发送端拥有一个发送窗口，可以在没有收到应答的情况下持续发送窗口内的数据，这样相比停止等待 ARQ 协议来说减少了等待时间，提高了效率。\n\n#### 累计确认\n连续 ARQ 中，接收端会持续不断收到报文。如果和停止等待 ARQ 中接收一个报文就发送一个应答一样，就太浪费资源了。通过累计确认，可以在收到多个报文以后统一回复一个应答报文。报文中的 ACK 可以用来告诉发送端这个序号之前的数据已经全部接收到了，下次请发送这个序号 + 1的数据。\n\n但是累计确认也有一个弊端。在连续接收报文时，可能会遇到接收到序号 5 的报文后，并未接到序号 6 的报文，然而序号 7 以后的报文已经接收。遇到这种情况时，ACK 只能回复 6，这样会造成发送端重复发送数据，这种情况下可以通过 Sack 来解决，这个会在下文说到。\n\n### 滑动窗口\n在上面小节中讲到了发送窗口。在 TCP 中，两端都维护着窗口：分别为发送端窗口和接收端窗口。\n\n发送端窗口包含已发送但未收到应答的数据和可以发送但是未发送的数据。\n\n发送端窗口是由接收窗口剩余大小决定的。接收方会把当前接收窗口的剩余大小写入应答报文，发送端收到应答后根据该值和当前网络拥塞情况设置发送窗口的大小，所以发送窗口的大小是不断变化的。\n\n当发送端接收到应答报文后，会随之将窗口进行滑动\n\n滑动窗口实现了流量控制。接收方通过报文告知发送方还可以发送多少数据，从而保证接收方能够来得及接收数据。\n\n#### Zero 窗口\n在发送报文的过程中，可能会遇到对端出现零窗口的情况。在该情况下，发送端会停止发送数据，并启动 persistent timer 。该定时器会定时发送请求给对端，让对端告知窗口大小。在重试次数超过一定次数后，可能会中断 TCP 链接。\n\n### 拥塞处理\n拥塞处理和流量控制不同，后者是作用于接收方，保证接收方来得及接受数据。而前者是作用于网络，防止过多的数据拥塞网络，避免出现网络负载过大的情况。\n\n拥塞处理包括了四个算法，分别为：**慢开始**，**拥塞避免**，**快速重传**，**快速恢复**。\n\n#### 慢开始算法\n慢开始算法，顾名思义，就是在传输开始时将发送窗口慢慢指数级扩大，从而避免一开始就传输大量数据导致网络拥塞。\n\n慢开始算法步骤具体如下\n\n1. 连接初始设置拥塞窗口（Congestion Window） 为 1 MSS（一个分段的最大数据量）\n2. 每过一个 RTT 就将窗口大小乘二\n3. 指数级增长肯定不能没有限制的，所以有一个阈值限制，当窗口大小大于阈值时就会启动拥塞避免算法。\n\n#### 拥塞避免算法\n拥塞避免算法相比简单点，每过一个 RTT 窗口大小只加一，这样能够避免指数级增长导致网络拥塞，慢慢将大小调整到最佳值。\n\n在传输过程中可能定时器超时的情况，这时候 TCP 会认为网络拥塞了，会马上进行以下步骤：\n\n- 将阈值设为当前拥塞窗口的一半\n- 将拥塞窗口设为 1 MSS\n- 启动拥塞避免算法\n\n#### 快速重传\n快速重传一般和快恢复一起出现。一旦接收端收到的报文出现失序的情况，接收端只会回复最后一个顺序正确的报文序号（没有 Sack 的情况下）。如果收到三个重复的 ACK，无需等待定时器超时再重发而是启动快速重传。具体算法分为两种：\n\n#### TCP Taho 实现如下\n\n- 将阈值设为当前拥塞窗口的一半\n- 将拥塞窗口设为 1 MSS\n- 重新开始慢开始算法\n\n#### TCP Reno 实现如下\n\n- 拥塞窗口减半\n- 将阈值设为当前拥塞窗口\n- 进入快恢复阶段（重发对端需要的包，一旦收到一个新的 ACK 答复就退出该阶段）\n- 使用拥塞避免算法\n\n#### TCP New Ren 改进后的快恢复\nTCP New Reno 算法改进了之前 TCP Reno 算法的缺陷。在之前，快恢复中只要收到一个新的 ACK 包，就会退出快恢复。\n\n在 TCP New Reno 中，TCP 发送方先记下三个重复 ACK 的分段的最大序号。\n\n假如我有一个分段数据是 1 ~ 10 这十个序号的报文，其中丢失了序号为 3 和 7 的报文，那么该分段的最大序号就是 10。发送端只会收到 ACK 序号为 3 的应答。这时候重发序号为 3 的报文，接收方顺利接收并会发送 ACK 序号为 7 的应答。这时候 TCP 知道对端是有多个包未收到，会继续发送序号为 7 的报文，接收方顺利接收并会发送 ACK 序号为 11 的应答，这时发送端认为这个分段接收端已经顺利接收，接下来会退出快恢复阶段。\n\n# HTTP\nHTTP 协议是个无状态协议，不会保存状态。\n\n## `Post` 和 `Get` 的区别\n先引入`副作用`和`幂等`的概念。\n\n> ***副作用***指对服务器上的资源做改变，搜索是无副作用的，注册是副作用的。\n\n> **幂等**指发送 M 和 N 次请求（两者不相同且都大于 1），服务器上资源的状态一致，比如注册 10 个和 11 个帐号是不幂等的，对文章进行更改 10 次和 11 次是幂等的。\n\n在规范的应用场景上说， `Get` 多用于无副作用，幂等的场景，例如搜索关键字。 `Post` 多用于副作用，不幂等的场景，例如注册。\n\n在技术上说：\n- Get 请求能缓存，Post 不能\n- Post 相对 Get 安全一点点，因为Get 请求都包含在 URL 里，且会被浏览器保存历史纪录，Post 不会，但是在抓包的情况下都是一样的。\n- Post 可以通过 request body来传输比 Get 更多的数据，Get 没有这个技术\n- URL有长度限制，会影响 Get 请求，但是这个长度限制是浏览器规定的，不是 RFC 规定的\n- Post 支持更多的编码类型且不对数据类型限制\n\n## 常见状态码\n### 2XX 成功\n200 OK，表示从客户端发来的请求在服务器端被正确处理\n204 No content，表示请求成功，但响应报文不含实体的主体部分\n205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容\n206 Partial Content，进行范围请求\n\n### 3XX 重定向\n301 moved permanently，永久性重定向，表示资源已被分配了新的 URL\n302 found，临时性重定向，表示资源临时被分配了新的 URL\n303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源\n304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况\n307 temporary redirect，临时重定向，和302含义类似，但是期望客户端保持请求方法不变向新的地址发出请求\n\n### 4XX 客户端错误\n400 bad request，请求报文存在语法错误\n401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息\n403 forbidden，表示对请求资源的访问被服务器拒绝\n404 not found，表示在服务器上没有找到请求的资源\n\n### 5XX 服务器错误\n500 internal sever error，表示服务器端在执行请求时发生了错误\n501 Not Implemented，表示服务器不支持当前请求所需要的某个功能\n503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求\n\n## HTTP 首部\n| 通用字段          | 作用                                          |\n| ----------------- | --------------------------------------------- |\n| Cache-Control     | 控制缓存的行为                                |\n| Connection        | 浏览器想要优先使用的连接类型，比如 keep-alive |\n| Date              | 创建报文时间                                  |\n| Pragma            | 报文指令                                      |\n| Via               | 代理服务器相关信息                            |\n| Transfer-Encoding | 传输编码方式                                  |\n| Upgrade           | 要求客户端升级协议                            |\n| Warning           | 在内容中可能存在错误                          |\n\n\n| 请求字段            | 作用                               |\n| ------------------- | ---------------------------------- |\n| Accept              | 能正确接收的媒体类型               |\n| Accept-Charset      | 能正确接收的字符集                 |\n| Accept-Encoding     | 能正确接收的编码格式列表           |\n| Accept-Language     | 能正确接收的语言列表               |\n| Expect              | 期待服务端的指定行为               |\n| From                | 请求方邮箱地址                     |\n| Host                | 服务器的域名                       |\n| If-Match            | 两端资源标记比较                   |\n| If-Modified-Since   | 本地资源未修改返回 304（比较时间） |\n| If-None-Match       | 本地资源未修改返回 304（比较标记） |\n| User-Agent          | 客户端信息                         |\n| Max-Forwards        | 限制可被代理及网关转发的次数       |\n| Proxy-Authorization | 向代理服务器发送验证信息           |\n| Range               | 请求某个内容的一部分               |\n| Referer             | 表示浏览器所访问的前一个页面       |\n| TE                  | 传输编码方式                       |\n\n| 响应字段           | 作用                       |\n| ------------------ | -------------------------- |\n| Accept-Ranges      | 是否支持某些种类的范围     |\n| Age                | 资源在代理缓存中存在的时间 |\n| ETag               | 资源标识                   |\n| Location           | 客户端重定向到某个 URL     |\n| Proxy-Authenticate | 向代理服务器发送验证信息   |\n| Server             | 服务器名字                 |\n| WWW-Authenticate   | 获取资源需要的验证信息     |\n\n| 实体字段         | 作用                           |\n| ---------------- | ------------------------------ |\n| Allow            | 资源的正确请求方式             |\n| Content-Encoding | 内容的编码格式                 |\n| Content-Language | 内容使用的语言                 |\n| Content-Length   | request body 长度              |\n| Content-Location | 返回数据的备用地址             |\n| Content-MD5      | Base64加密格式的内容 MD5检验值 |\n| Content-Range    | 内容的位置范围                 |\n| Content-Type     | 内容的媒体类型                 |\n| Expires          | 内容的过期时间                 |\n| Last_modified    | 内容的最后修改时间             |\n\n# HTTPS\n`HTTPS` 还是通过了 `HTTP` 来传输信息，但是信息通过 `TLS` 协议进行了加密。\n## TLS\n`TLS` 协议位于传输层之上，应用层之下。首次进行 `TLS` 协议传输需要两个 `RTT` ，接下来可以通过 `Session Resumption` 减少到一个 `RTT` 。\n\n在 `TLS` 中使用了两种加密技术，分别为：***对称加密***和***非对称加密***。\n\n**对称加密：**\n对称加密就是两边拥有相同的秘钥，两边都知道如何将密文加密解密。\n\n**非对称加密：**\n有公钥私钥之分，公钥所有人都可以知道，可以将数据用公钥加密，但是将数据解密必须使用私钥解密，私钥只有分发公钥的一方才知道。\n\n**TLS 握手过程如下图：**\n1. 客户端发送一个随机值，需要的协议和加密方式\n2. 服务端收到客户端的随机值，自己也产生一个随机值，并根据客户端需求的协议和加密方式来使用对应的方式，发送自己的证书（如果需要验证客户端证书需要说明）\n3. 客户端收到服务端的证书并验证是否有效，验证通过会再生成一个随机值，通过服务端证书的公钥去加密这个随机值并发送给服务端，如果服务端需要验证客户端证书的话会附带证书\n4. 服务端收到加密过的随机值并使用私钥解密获得第三个随机值，这时候两端都拥有了三个随机值，可以通过这三个随机值按照之前约定的加密方式生成密钥，接下来的通信就可以通过该密钥来加密解密\n\n通过以上步骤可知，在 TLS 握手阶段，两端使用非对称加密的方式来通信，但是因为非对称加密损耗的性能比对称加密大，所以在正式传输数据时，两端使用对称加密的方式通信。\n\nPS：以上说明的都是 TLS 1.2 协议的握手情况，在 1.3 协议中，首次建立连接只需要一个 RTT，后面恢复连接不需要 RTT 了。\n\n# HTTP 2.0\nHTTP 2.0 相比于 HTTP 1.X，可以说是大幅度提高了 web 的性能。\n\n在 HTTP 1.X 中，为了性能考虑，我们会引入雪碧图、将小图内联、使用多个域名等等的方式。这一切都是因为浏览器限制了同一个域名下的请求数量，当页面中需要请求很多资源的时候，队头阻塞（Head of line blocking）会导致在达到最大请求数量时，剩余的资源需要等待其他资源请求完成后才能发起请求。\n\n你可以通过 该链接 感受下 HTTP 2.0 比 HTTP 1.X 到底快了多少。\n\n在 HTTP 1.X 中，因为队头阻塞的原因，你会发现请求是这样的\n![lWJGkt.png](https://s2.ax1x.com/2020/01/09/lWJGkt.png)\n在 HTTP 2.0 中，因为引入了多路复用，你会发现请求是这样的\n![lWJa6g.png](https://s2.ax1x.com/2020/01/09/lWJa6g.png)\n\n## 二进制传输\nHTTP 2.0 中所有加强性能的核心点在于此。在之前的 HTTP 版本中，我们是通过文本的方式传输数据。在 HTTP 2.0 中引入了新的编码机制，所有传输的数据都会被分割，并采用二进制格式编码。\n\n## 多路复用\n在 HTTP 2.0 中，有两个非常重要的概念，分别是**帧（frame）**和**流（stream）**。\n帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。\n\n多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。\n\n## Header 压缩\n在 HTTP 1.X 中，我们使用文本的形式传输 header，在 header 携带 cookie 的情况下，可能每次都需要重复传输几百到几千的字节。\n\n在 HTTP 2.0 中，使用了 HPACK 压缩格式对传输的 header 进行编码，减少了 header 的大小。并在两端维护了索引表，用于记录出现过的 header ，后面在传输过程中就可以传输已经记录过的 header 的键名，对端收到数据后就可以通过键名找到对应的值。\n\n## 服务端 Push\n在 HTTP 2.0 中，服务端可以在客户端某个请求后，主动推送其他资源。\n\n可以想象以下情况，某些资源客户端是一定会请求的，这时就可以采取服务端 push 的技术，提前给客户端推送必要的资源，这样就可以相对减少一点延迟时间。当然在浏览器兼容的情况下你也可以使用 prefetch 。\n\n## QUIC\n这是一个谷歌出品的基于 UDP 实现的同为传输层的协议，目标很远大，希望替代 TCP 协议。\n\n- 该协议支持多路复用，虽然 HTTP 2.0 也支持多路复用，但是下层仍是 TCP，因为 TCP 的重传机制，只要一个包丢失就得判断丢失包并且重传，导致发生队头阻塞的问题，但是 UDP 没有这个机制\n- 实现了自己的加密协议，通过类似 TCP 的 TFO 机制可以实现 0-RTT，当然 TLS 1.3 已经实现了 0-RTT 了\n- 支持重传和纠错机制（向前恢复），在只丢失一个包的情况下不需要重传，使用纠错机制恢复丢失的包\n  - 纠错机制：通过异或的方式，算出发出去的数据的异或值并单独发出一个包，服务端在发现有一个包丢失的情况下，通过其他数据包和异或值包算出丢失包\n  - 在丢失两个包或以上的情况就使用重传机制，因为算不出来了\n\n# DNS\nDNS 的作用就是通过域名查询到具体的 IP。\n\n因为 IP 存在数字和英文的组合（IPv6），很不利于人类记忆，所以就出现了域名。你可以把域名看成是某个 IP 的别名，DNS 就是去查询这个别名的真正名称是什么。\n\n在 TCP 握手之前就已经进行了 DNS 查询，这个查询是操作系统自己做的。当你在浏览器中想访问 www.google.com 时，会进行一下操作：\n\n1. 操作系统会首先在本地缓存中查询\n2. 没有的话会去系统配置的 DNS 服务器中查询\n3. 如果这时候还没得话，会直接去 DNS 根服务器查询，这一步查询会找出负责 com 这个一级域名的服务器\n4. 然后去该服务器查询 google 这个二级域名\n5. 接下来三级域名的查询其实是我们配置的，你可以给 www 这个域名配置一个 IP，然后还可以给别的三级域名配置一个 IP\n\n以上介绍的是 DNS 迭代查询，还有种是递归查询，区别就是前者是由客户端去做请求，后者是由系统配置的 DNS 服务器做请求，得到结果后将数据返回给客户端。\n\nPS：DNS 是基于 UDP 做的查询。\n\n## 从输入 URL 到页面加载完成的过程\n这是一个很经典的面试题，在这题中可以将本文讲得内容都串联起来。\n\n1. 首先做 `DNS` 查询，如果这一步做了智能 `DNS` 解析的话，会提供访问速度最快的 `IP` 地址回来\n2. 接下来是 `TCP` 握手，应用层会下发数据给传输层，这里 `TCP` 协议会指明两端的端口号，然后下发给网络层。网络层中的 `IP` 协议会确定 `IP` 地址，并且指示了数据传输中如何跳转路由器。然后包会再被封装到数据链路层的数据帧结构中，最后就是物理层面的传输了\n3. `TCP` 握手结束后会进行 `TLS` 握手，然后就开始正式的传输数据\n4. 数据在进入服务端之前，可能还会先经过负责负载均衡的服务器，它的作用就是将请求合理的分发到多台服务器上，这时假设服务端会响应一个 `HTML` 文件\n5. 首先浏览器会判断状态码是什么，如果是 `200` 那就继续解析，如果 `400` 或 `500` 的话就会报错，如果 `300` 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错\n6. 浏览器开始解析文件，如果是 `gzip` 格式的话会先解压一下，然后通过文件的编码格式知道该如何去解码文件\n7. 文件解码成功后会正式开始渲染流程，先会根据 `HTML` 构建 `DOM` 树，有 `CSS` 的话会去构建 `CSSOM` 树。如果遇到 `script` 标签的话，会判断是否存在 `async` 或者 `defer` ，前者会并行进行下载并执行 `JS` ，后者会先下载文件，然后等待 `HTML` 解析完成后顺序执行，如果以上都没有，就会阻塞住渲染流程直到 `JS` 执行完毕。遇到文件下载的会去下载文件，这里如果使用 `HTTP 2.0` 协议的话会极大的提高多图的下载效率。\n8. 初始的 `HTML` 被完全加载和解析后会触发 `DOMContentLoaded` 事件\n9. `CSSOM` 树和 `DOM` 树构建完成后会开始生成 `Render` 树，这一步就是确定页面元素的布局、样式等等诸多方面的东西\n10. 在生成 `Render` 树的过程中，浏览器就开始调用 `GPU` 绘制，合成图层，将内容显示在屏幕上了","source":"_posts/FE-guide-Net.md","raw":"---\ntitle: 前端常见知识点整理 ---- 网络\ndate: 2020-01-09 15:35:00\ncategories: \n  - 前端技术\n  - 前端常见知识点整理\n\t- \ntags: \n\t- 面试\n---\n> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n网络相关的知识虽然平时在编码阶段很少遇到，但是并不是说它不重要，尤其是前端优化层面，能从网络传输过程优化的点有很多，所以，我们需要好好掌握网络相关的知识，接下来，我将会将我了解到的网络相关的知识点进行一一整理\n\n# UDP - User Datagram Protocol - 用户数据报协议\n## 面向报文\nUDP 是一个面向报文（报文可以理解为一段段的数据）的协议。意思就是 UDP 只是报文的搬运工，不会对报文进行任何拆分和拼接操作。\n\n具体来说\n- 在**发送端**，应用层将数据传递给传输层的 `UDP` 协议， `UDP` 只会给数据增加一个 `UDP` 头标识下是 `UDP` 协议，然后就传递给网络层了\n- 在**接收端**，网络层将数据传递给传输层， `UDP` 只去除 `IP` 报文头就传递给应用层，不会任何拼接操作\n\n## 不可靠性\n1.  `UDP` 是无连接的，也就是说通信不需要建立和断开连接。\n2.  `UDP` 也是不可靠的。协议收到什么数据就传递什么数据，并且也不会备份数据，对方能不能收到是不关心的\n3.  `UDP` 没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 `UDP` 而不是 `TCP` 。\n  \n## 高效\n因为 `UDP` 没有 `TCP` 那么复杂，需要保证数据不丢失且有序到达。所以 `UDP` 的头部开销小，只有八字节，相比 `TCP` 的至少二十字节要少得多，在传输数据报文时是很高效的。\n\n头部包含了以下几个数据\n\n- 两个十六位的端口号，分别为**源端口**（可选字段）和**目标端口**\n- 整个数据报文的长度\n- 整个数据报文的检验和（ `IPv4` 可选 字段），该字段用于发现头部信息和数据中的错误\n\n## 传输方式\n`UDP` 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 `UDP` 提供了单播，多播，广播的功能。\n\n# TCP\n## 头部\nTCP 头部比 UDP 头部复杂的多\n\n对于 TCP 头部来说，以下几个字段是很重要的\n\n- `Sequence number`（序号），它保证了 `TCP` 传输的报文都是有序的，对端可以通过序号顺序的拼接报文\n- `Acknowledgement Number`（确认编号），它表示数据接收端期望接收的下一个字节的编号是多少，同时也表示上一个序号的数据已经收到\n- `Window Size`（窗口大小），它表示还能接收多少字节的数据，用于流量控制\n- 标识符\n  - `URG=1`：该字段为一表示本数据报的数据部分包含紧急信息，是一个高优先级数据报文，此时紧急指针有效。紧急数据一定位于当前数据包数据部分的最前面，紧急指针标明了紧急数据的尾部。\n  - `ACK=1`：该字段为一表示确认号字段有效。此外，TCP 还规定在连接建立后传送的所有报文段都必须把 ACK 置为一。\n  - `PSH=1`：该字段为一表示接收端应该立即将数据 push 给应用层，而不是等到缓冲区满后再提交。\n  - `RST=1`：该字段为一表示当前 TCP 连接出现严重问题，可能需要重新建立 TCP 连接，也可以用于拒绝非法的报文段和拒绝连接请求。\n  - `SYN=1`：当SYN=1，ACK=0时，表示当前报文段是一个连接请求报文。当SYN=1，ACK=1时，表示当前报文段是一个同意建立连接的应答报文。\n  - `FIN=1`：该字段为一表示此报文段是一个释放连接的请求报文。\n\n## 状态机\n`HTTP` 是无连接的，所以作为下层的 `TCP` 协议也是无连接的，虽然看似 `TCP` 将两端连接了起来，但是其实只是两端共同维护了一个状态\n\n`TCP` 的状态机是很复杂的，并且与建立断开连接时的握手息息相关，接下来就来详细描述下两种握手。\n在这之前需要了解一个重要的性能指标 `RTT` 。该指标表示发送端发送数据到接收到对端数据所需的往返时间。\n\n### 建立连接三次握手\n在 TCP 协议中，主动发起请求的一端为客户端，被动连接的一端称为服务端。不管是客户端还是服务端，TCP 连接建立完后都能发送和接收数据，所以 TCP 也是一个全双工的协议。\n\n起初，两端都为 CLOSED 状态。在通信开始前，双方都会创建 TCB。 服务器创建完 TCB 后遍进入 LISTEN 状态，此时开始等待客户端发送数据。\n\n#### 第一次握手\n客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态，x 表示客户端的数据通信初始序号。\n\n#### 第二次握手\n服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。\n\n#### 第三次握手\n当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。\n\nPS：第三次握手可以包含数据，通过 TCP 快速打开（TFO）技术。其实只要涉及到握手的协议，都可以使用类似 TFO 的方式，客户端和服务端存储相同 cookie，下次握手时发出 cookie 达到减少 RTT 的目的。\n\n***你是否有疑惑明明两次握手就可以建立起连接，为什么还需要第三次应答？***\n\n因为这是为了防止失效的连接请求报文段被服务端接收，从而产生错误。\n\n可以想象如下场景。客户端发送了一个连接请求 A，但是因为网络原因造成了超时，这时 TCP 会启动超时重传的机制再次发送一个连接请求 B。此时请求顺利到达服务端，服务端应答完就建立了请求。如果连接请求 A 在两端关闭后终于抵达了服务端，那么这时服务端会认为客户端又需要建立 TCP 连接，从而应答了该请求并进入 ESTABLISHED 状态。此时客户端其实是 CLOSED 状态，那么就会导致服务端一直等待，造成资源的浪费。\n\nPS：在建立连接中，任意一端掉线，TCP 都会重发 SYN 包，一般会重试五次，在建立连接中可能会遇到 SYN FLOOD 攻击。遇到这种情况你可以选择调低重试次数或者干脆在不能处理的情况下拒绝请求。\n\n### 断开链接四次握手\nTCP 是全双工的，在断开连接时两端都需要发送 FIN 和 ACK。\n\n#### 第一次握手\n若客户端 A 认为数据发送完成，则它需要向服务端 B 发送连接释放请求。\n\n#### 第二次握手\nB 收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，表示 A 到 B 的连接已经释放，不接收 A 发的数据了。但是因为 TCP 连接时双向的，所以 B 仍旧可以发送数据给 A。\n\n#### 第三次握手\nB 如果此时还有没发完的数据会继续发送，完毕后会向 A 发送连接释放请求，然后 B 便进入 LAST-ACK 状态。\n\nPS：通过延迟确认的技术（通常有时间限制，否则对方会误认为需要重传），可以将第二次和第三次握手合并，延迟 ACK 包的发送。\n\n#### 第四次握手\n\nA 收到释放请求后，向 B 发送确认应答，此时 A 进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有 B 的重发请求的话，就进入 CLOSED 状态。当 B 收到确认应答后，也便进入 CLOSED 状态。\n\n***为什么 A 要进入 TIME-WAIT 状态，等待 2MSL 时间后才进入 CLOSED 状态？***\n\n为了保证 B 能收到 A 的确认应答。若 A 发完确认应答后直接进入 CLOSED 状态，如果确认应答因为网络问题一直没有到达，那么会造成 B 不能正常关闭。\n\n### ARQ 协议\nARQ 协议也就是超时重传机制。通过确认和超时机制保证了数据的正确送达，ARQ 协议包含停止等待 ARQ 和连续 ARQ\n\n#### 停止等待 ARQ\n#### 正常传输过程\n只要 A 向 B 发送一段报文，都要停止发送并启动一个定时器，等待对端回应，在定时器时间内接收到对端应答就取消定时器并发送下一段报文。\n\n#### 报文丢失或出错\n在报文传输的过程中可能会出现丢包。这时候超过定时器设定的时间就会再次发送丢包的数据直到对端响应，所以需要每次都备份发送的数据。\n\n即使报文正常的传输到对端，也可能出现在传输过程中报文出错的问题。这时候对端会抛弃该报文并等待 A 端重传。\n\nPS：一般定时器设定的时间都会大于一个 RTT 的平均时间。\n\n#### ACK 超时或丢失\n\n对端传输的应答也可能出现丢失或超时的情况。那么超过定时器时间 A 端照样会重传报文。这时候 B 端收到相同序号的报文会丢弃该报文并重传应答，直到 A 端发送下一个序号的报文。\n\n在超时的情况下也可能出现应答很迟到达，这时 A 端会判断该序号是否已经接收过，如果接收过只需要丢弃应答即可。\n\n***这个协议的缺点就是传输效率低，在良好的网络环境下每次发送报文都得等待对端的 ACK 。***\n\n#### 连续 ARQ\n在连续 ARQ 中，发送端拥有一个发送窗口，可以在没有收到应答的情况下持续发送窗口内的数据，这样相比停止等待 ARQ 协议来说减少了等待时间，提高了效率。\n\n#### 累计确认\n连续 ARQ 中，接收端会持续不断收到报文。如果和停止等待 ARQ 中接收一个报文就发送一个应答一样，就太浪费资源了。通过累计确认，可以在收到多个报文以后统一回复一个应答报文。报文中的 ACK 可以用来告诉发送端这个序号之前的数据已经全部接收到了，下次请发送这个序号 + 1的数据。\n\n但是累计确认也有一个弊端。在连续接收报文时，可能会遇到接收到序号 5 的报文后，并未接到序号 6 的报文，然而序号 7 以后的报文已经接收。遇到这种情况时，ACK 只能回复 6，这样会造成发送端重复发送数据，这种情况下可以通过 Sack 来解决，这个会在下文说到。\n\n### 滑动窗口\n在上面小节中讲到了发送窗口。在 TCP 中，两端都维护着窗口：分别为发送端窗口和接收端窗口。\n\n发送端窗口包含已发送但未收到应答的数据和可以发送但是未发送的数据。\n\n发送端窗口是由接收窗口剩余大小决定的。接收方会把当前接收窗口的剩余大小写入应答报文，发送端收到应答后根据该值和当前网络拥塞情况设置发送窗口的大小，所以发送窗口的大小是不断变化的。\n\n当发送端接收到应答报文后，会随之将窗口进行滑动\n\n滑动窗口实现了流量控制。接收方通过报文告知发送方还可以发送多少数据，从而保证接收方能够来得及接收数据。\n\n#### Zero 窗口\n在发送报文的过程中，可能会遇到对端出现零窗口的情况。在该情况下，发送端会停止发送数据，并启动 persistent timer 。该定时器会定时发送请求给对端，让对端告知窗口大小。在重试次数超过一定次数后，可能会中断 TCP 链接。\n\n### 拥塞处理\n拥塞处理和流量控制不同，后者是作用于接收方，保证接收方来得及接受数据。而前者是作用于网络，防止过多的数据拥塞网络，避免出现网络负载过大的情况。\n\n拥塞处理包括了四个算法，分别为：**慢开始**，**拥塞避免**，**快速重传**，**快速恢复**。\n\n#### 慢开始算法\n慢开始算法，顾名思义，就是在传输开始时将发送窗口慢慢指数级扩大，从而避免一开始就传输大量数据导致网络拥塞。\n\n慢开始算法步骤具体如下\n\n1. 连接初始设置拥塞窗口（Congestion Window） 为 1 MSS（一个分段的最大数据量）\n2. 每过一个 RTT 就将窗口大小乘二\n3. 指数级增长肯定不能没有限制的，所以有一个阈值限制，当窗口大小大于阈值时就会启动拥塞避免算法。\n\n#### 拥塞避免算法\n拥塞避免算法相比简单点，每过一个 RTT 窗口大小只加一，这样能够避免指数级增长导致网络拥塞，慢慢将大小调整到最佳值。\n\n在传输过程中可能定时器超时的情况，这时候 TCP 会认为网络拥塞了，会马上进行以下步骤：\n\n- 将阈值设为当前拥塞窗口的一半\n- 将拥塞窗口设为 1 MSS\n- 启动拥塞避免算法\n\n#### 快速重传\n快速重传一般和快恢复一起出现。一旦接收端收到的报文出现失序的情况，接收端只会回复最后一个顺序正确的报文序号（没有 Sack 的情况下）。如果收到三个重复的 ACK，无需等待定时器超时再重发而是启动快速重传。具体算法分为两种：\n\n#### TCP Taho 实现如下\n\n- 将阈值设为当前拥塞窗口的一半\n- 将拥塞窗口设为 1 MSS\n- 重新开始慢开始算法\n\n#### TCP Reno 实现如下\n\n- 拥塞窗口减半\n- 将阈值设为当前拥塞窗口\n- 进入快恢复阶段（重发对端需要的包，一旦收到一个新的 ACK 答复就退出该阶段）\n- 使用拥塞避免算法\n\n#### TCP New Ren 改进后的快恢复\nTCP New Reno 算法改进了之前 TCP Reno 算法的缺陷。在之前，快恢复中只要收到一个新的 ACK 包，就会退出快恢复。\n\n在 TCP New Reno 中，TCP 发送方先记下三个重复 ACK 的分段的最大序号。\n\n假如我有一个分段数据是 1 ~ 10 这十个序号的报文，其中丢失了序号为 3 和 7 的报文，那么该分段的最大序号就是 10。发送端只会收到 ACK 序号为 3 的应答。这时候重发序号为 3 的报文，接收方顺利接收并会发送 ACK 序号为 7 的应答。这时候 TCP 知道对端是有多个包未收到，会继续发送序号为 7 的报文，接收方顺利接收并会发送 ACK 序号为 11 的应答，这时发送端认为这个分段接收端已经顺利接收，接下来会退出快恢复阶段。\n\n# HTTP\nHTTP 协议是个无状态协议，不会保存状态。\n\n## `Post` 和 `Get` 的区别\n先引入`副作用`和`幂等`的概念。\n\n> ***副作用***指对服务器上的资源做改变，搜索是无副作用的，注册是副作用的。\n\n> **幂等**指发送 M 和 N 次请求（两者不相同且都大于 1），服务器上资源的状态一致，比如注册 10 个和 11 个帐号是不幂等的，对文章进行更改 10 次和 11 次是幂等的。\n\n在规范的应用场景上说， `Get` 多用于无副作用，幂等的场景，例如搜索关键字。 `Post` 多用于副作用，不幂等的场景，例如注册。\n\n在技术上说：\n- Get 请求能缓存，Post 不能\n- Post 相对 Get 安全一点点，因为Get 请求都包含在 URL 里，且会被浏览器保存历史纪录，Post 不会，但是在抓包的情况下都是一样的。\n- Post 可以通过 request body来传输比 Get 更多的数据，Get 没有这个技术\n- URL有长度限制，会影响 Get 请求，但是这个长度限制是浏览器规定的，不是 RFC 规定的\n- Post 支持更多的编码类型且不对数据类型限制\n\n## 常见状态码\n### 2XX 成功\n200 OK，表示从客户端发来的请求在服务器端被正确处理\n204 No content，表示请求成功，但响应报文不含实体的主体部分\n205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容\n206 Partial Content，进行范围请求\n\n### 3XX 重定向\n301 moved permanently，永久性重定向，表示资源已被分配了新的 URL\n302 found，临时性重定向，表示资源临时被分配了新的 URL\n303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源\n304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况\n307 temporary redirect，临时重定向，和302含义类似，但是期望客户端保持请求方法不变向新的地址发出请求\n\n### 4XX 客户端错误\n400 bad request，请求报文存在语法错误\n401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息\n403 forbidden，表示对请求资源的访问被服务器拒绝\n404 not found，表示在服务器上没有找到请求的资源\n\n### 5XX 服务器错误\n500 internal sever error，表示服务器端在执行请求时发生了错误\n501 Not Implemented，表示服务器不支持当前请求所需要的某个功能\n503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求\n\n## HTTP 首部\n| 通用字段          | 作用                                          |\n| ----------------- | --------------------------------------------- |\n| Cache-Control     | 控制缓存的行为                                |\n| Connection        | 浏览器想要优先使用的连接类型，比如 keep-alive |\n| Date              | 创建报文时间                                  |\n| Pragma            | 报文指令                                      |\n| Via               | 代理服务器相关信息                            |\n| Transfer-Encoding | 传输编码方式                                  |\n| Upgrade           | 要求客户端升级协议                            |\n| Warning           | 在内容中可能存在错误                          |\n\n\n| 请求字段            | 作用                               |\n| ------------------- | ---------------------------------- |\n| Accept              | 能正确接收的媒体类型               |\n| Accept-Charset      | 能正确接收的字符集                 |\n| Accept-Encoding     | 能正确接收的编码格式列表           |\n| Accept-Language     | 能正确接收的语言列表               |\n| Expect              | 期待服务端的指定行为               |\n| From                | 请求方邮箱地址                     |\n| Host                | 服务器的域名                       |\n| If-Match            | 两端资源标记比较                   |\n| If-Modified-Since   | 本地资源未修改返回 304（比较时间） |\n| If-None-Match       | 本地资源未修改返回 304（比较标记） |\n| User-Agent          | 客户端信息                         |\n| Max-Forwards        | 限制可被代理及网关转发的次数       |\n| Proxy-Authorization | 向代理服务器发送验证信息           |\n| Range               | 请求某个内容的一部分               |\n| Referer             | 表示浏览器所访问的前一个页面       |\n| TE                  | 传输编码方式                       |\n\n| 响应字段           | 作用                       |\n| ------------------ | -------------------------- |\n| Accept-Ranges      | 是否支持某些种类的范围     |\n| Age                | 资源在代理缓存中存在的时间 |\n| ETag               | 资源标识                   |\n| Location           | 客户端重定向到某个 URL     |\n| Proxy-Authenticate | 向代理服务器发送验证信息   |\n| Server             | 服务器名字                 |\n| WWW-Authenticate   | 获取资源需要的验证信息     |\n\n| 实体字段         | 作用                           |\n| ---------------- | ------------------------------ |\n| Allow            | 资源的正确请求方式             |\n| Content-Encoding | 内容的编码格式                 |\n| Content-Language | 内容使用的语言                 |\n| Content-Length   | request body 长度              |\n| Content-Location | 返回数据的备用地址             |\n| Content-MD5      | Base64加密格式的内容 MD5检验值 |\n| Content-Range    | 内容的位置范围                 |\n| Content-Type     | 内容的媒体类型                 |\n| Expires          | 内容的过期时间                 |\n| Last_modified    | 内容的最后修改时间             |\n\n# HTTPS\n`HTTPS` 还是通过了 `HTTP` 来传输信息，但是信息通过 `TLS` 协议进行了加密。\n## TLS\n`TLS` 协议位于传输层之上，应用层之下。首次进行 `TLS` 协议传输需要两个 `RTT` ，接下来可以通过 `Session Resumption` 减少到一个 `RTT` 。\n\n在 `TLS` 中使用了两种加密技术，分别为：***对称加密***和***非对称加密***。\n\n**对称加密：**\n对称加密就是两边拥有相同的秘钥，两边都知道如何将密文加密解密。\n\n**非对称加密：**\n有公钥私钥之分，公钥所有人都可以知道，可以将数据用公钥加密，但是将数据解密必须使用私钥解密，私钥只有分发公钥的一方才知道。\n\n**TLS 握手过程如下图：**\n1. 客户端发送一个随机值，需要的协议和加密方式\n2. 服务端收到客户端的随机值，自己也产生一个随机值，并根据客户端需求的协议和加密方式来使用对应的方式，发送自己的证书（如果需要验证客户端证书需要说明）\n3. 客户端收到服务端的证书并验证是否有效，验证通过会再生成一个随机值，通过服务端证书的公钥去加密这个随机值并发送给服务端，如果服务端需要验证客户端证书的话会附带证书\n4. 服务端收到加密过的随机值并使用私钥解密获得第三个随机值，这时候两端都拥有了三个随机值，可以通过这三个随机值按照之前约定的加密方式生成密钥，接下来的通信就可以通过该密钥来加密解密\n\n通过以上步骤可知，在 TLS 握手阶段，两端使用非对称加密的方式来通信，但是因为非对称加密损耗的性能比对称加密大，所以在正式传输数据时，两端使用对称加密的方式通信。\n\nPS：以上说明的都是 TLS 1.2 协议的握手情况，在 1.3 协议中，首次建立连接只需要一个 RTT，后面恢复连接不需要 RTT 了。\n\n# HTTP 2.0\nHTTP 2.0 相比于 HTTP 1.X，可以说是大幅度提高了 web 的性能。\n\n在 HTTP 1.X 中，为了性能考虑，我们会引入雪碧图、将小图内联、使用多个域名等等的方式。这一切都是因为浏览器限制了同一个域名下的请求数量，当页面中需要请求很多资源的时候，队头阻塞（Head of line blocking）会导致在达到最大请求数量时，剩余的资源需要等待其他资源请求完成后才能发起请求。\n\n你可以通过 该链接 感受下 HTTP 2.0 比 HTTP 1.X 到底快了多少。\n\n在 HTTP 1.X 中，因为队头阻塞的原因，你会发现请求是这样的\n![lWJGkt.png](https://s2.ax1x.com/2020/01/09/lWJGkt.png)\n在 HTTP 2.0 中，因为引入了多路复用，你会发现请求是这样的\n![lWJa6g.png](https://s2.ax1x.com/2020/01/09/lWJa6g.png)\n\n## 二进制传输\nHTTP 2.0 中所有加强性能的核心点在于此。在之前的 HTTP 版本中，我们是通过文本的方式传输数据。在 HTTP 2.0 中引入了新的编码机制，所有传输的数据都会被分割，并采用二进制格式编码。\n\n## 多路复用\n在 HTTP 2.0 中，有两个非常重要的概念，分别是**帧（frame）**和**流（stream）**。\n帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。\n\n多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。\n\n## Header 压缩\n在 HTTP 1.X 中，我们使用文本的形式传输 header，在 header 携带 cookie 的情况下，可能每次都需要重复传输几百到几千的字节。\n\n在 HTTP 2.0 中，使用了 HPACK 压缩格式对传输的 header 进行编码，减少了 header 的大小。并在两端维护了索引表，用于记录出现过的 header ，后面在传输过程中就可以传输已经记录过的 header 的键名，对端收到数据后就可以通过键名找到对应的值。\n\n## 服务端 Push\n在 HTTP 2.0 中，服务端可以在客户端某个请求后，主动推送其他资源。\n\n可以想象以下情况，某些资源客户端是一定会请求的，这时就可以采取服务端 push 的技术，提前给客户端推送必要的资源，这样就可以相对减少一点延迟时间。当然在浏览器兼容的情况下你也可以使用 prefetch 。\n\n## QUIC\n这是一个谷歌出品的基于 UDP 实现的同为传输层的协议，目标很远大，希望替代 TCP 协议。\n\n- 该协议支持多路复用，虽然 HTTP 2.0 也支持多路复用，但是下层仍是 TCP，因为 TCP 的重传机制，只要一个包丢失就得判断丢失包并且重传，导致发生队头阻塞的问题，但是 UDP 没有这个机制\n- 实现了自己的加密协议，通过类似 TCP 的 TFO 机制可以实现 0-RTT，当然 TLS 1.3 已经实现了 0-RTT 了\n- 支持重传和纠错机制（向前恢复），在只丢失一个包的情况下不需要重传，使用纠错机制恢复丢失的包\n  - 纠错机制：通过异或的方式，算出发出去的数据的异或值并单独发出一个包，服务端在发现有一个包丢失的情况下，通过其他数据包和异或值包算出丢失包\n  - 在丢失两个包或以上的情况就使用重传机制，因为算不出来了\n\n# DNS\nDNS 的作用就是通过域名查询到具体的 IP。\n\n因为 IP 存在数字和英文的组合（IPv6），很不利于人类记忆，所以就出现了域名。你可以把域名看成是某个 IP 的别名，DNS 就是去查询这个别名的真正名称是什么。\n\n在 TCP 握手之前就已经进行了 DNS 查询，这个查询是操作系统自己做的。当你在浏览器中想访问 www.google.com 时，会进行一下操作：\n\n1. 操作系统会首先在本地缓存中查询\n2. 没有的话会去系统配置的 DNS 服务器中查询\n3. 如果这时候还没得话，会直接去 DNS 根服务器查询，这一步查询会找出负责 com 这个一级域名的服务器\n4. 然后去该服务器查询 google 这个二级域名\n5. 接下来三级域名的查询其实是我们配置的，你可以给 www 这个域名配置一个 IP，然后还可以给别的三级域名配置一个 IP\n\n以上介绍的是 DNS 迭代查询，还有种是递归查询，区别就是前者是由客户端去做请求，后者是由系统配置的 DNS 服务器做请求，得到结果后将数据返回给客户端。\n\nPS：DNS 是基于 UDP 做的查询。\n\n## 从输入 URL 到页面加载完成的过程\n这是一个很经典的面试题，在这题中可以将本文讲得内容都串联起来。\n\n1. 首先做 `DNS` 查询，如果这一步做了智能 `DNS` 解析的话，会提供访问速度最快的 `IP` 地址回来\n2. 接下来是 `TCP` 握手，应用层会下发数据给传输层，这里 `TCP` 协议会指明两端的端口号，然后下发给网络层。网络层中的 `IP` 协议会确定 `IP` 地址，并且指示了数据传输中如何跳转路由器。然后包会再被封装到数据链路层的数据帧结构中，最后就是物理层面的传输了\n3. `TCP` 握手结束后会进行 `TLS` 握手，然后就开始正式的传输数据\n4. 数据在进入服务端之前，可能还会先经过负责负载均衡的服务器，它的作用就是将请求合理的分发到多台服务器上，这时假设服务端会响应一个 `HTML` 文件\n5. 首先浏览器会判断状态码是什么，如果是 `200` 那就继续解析，如果 `400` 或 `500` 的话就会报错，如果 `300` 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错\n6. 浏览器开始解析文件，如果是 `gzip` 格式的话会先解压一下，然后通过文件的编码格式知道该如何去解码文件\n7. 文件解码成功后会正式开始渲染流程，先会根据 `HTML` 构建 `DOM` 树，有 `CSS` 的话会去构建 `CSSOM` 树。如果遇到 `script` 标签的话，会判断是否存在 `async` 或者 `defer` ，前者会并行进行下载并执行 `JS` ，后者会先下载文件，然后等待 `HTML` 解析完成后顺序执行，如果以上都没有，就会阻塞住渲染流程直到 `JS` 执行完毕。遇到文件下载的会去下载文件，这里如果使用 `HTTP 2.0` 协议的话会极大的提高多图的下载效率。\n8. 初始的 `HTML` 被完全加载和解析后会触发 `DOMContentLoaded` 事件\n9. `CSSOM` 树和 `DOM` 树构建完成后会开始生成 `Render` 树，这一步就是确定页面元素的布局、样式等等诸多方面的东西\n10. 在生成 `Render` 树的过程中，浏览器就开始调用 `GPU` 绘制，合成图层，将内容显示在屏幕上了","slug":"FE-guide-Net","published":1,"updated":"2020-04-02T03:20:12.376Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grw9000pooa61ej9ejx0","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>网络相关的知识虽然平时在编码阶段很少遇到，但是并不是说它不重要，尤其是前端优化层面，能从网络传输过程优化的点有很多，所以，我们需要好好掌握网络相关的知识，接下来，我将会将我了解到的网络相关的知识点进行一一整理</p>\n<h1 id=\"UDP-User-Datagram-Protocol-用户数据报协议\"><a href=\"#UDP-User-Datagram-Protocol-用户数据报协议\" class=\"headerlink\" title=\"UDP - User Datagram Protocol - 用户数据报协议\"></a>UDP - User Datagram Protocol - 用户数据报协议</h1><h2 id=\"面向报文\"><a href=\"#面向报文\" class=\"headerlink\" title=\"面向报文\"></a>面向报文</h2><p>UDP 是一个面向报文（报文可以理解为一段段的数据）的协议。意思就是 UDP 只是报文的搬运工，不会对报文进行任何拆分和拼接操作。</p>\n<p>具体来说</p>\n<ul>\n<li>在<strong>发送端</strong>，应用层将数据传递给传输层的 <code>UDP</code> 协议， <code>UDP</code> 只会给数据增加一个 <code>UDP</code> 头标识下是 <code>UDP</code> 协议，然后就传递给网络层了</li>\n<li>在<strong>接收端</strong>，网络层将数据传递给传输层， <code>UDP</code> 只去除 <code>IP</code> 报文头就传递给应用层，不会任何拼接操作</li>\n</ul>\n<h2 id=\"不可靠性\"><a href=\"#不可靠性\" class=\"headerlink\" title=\"不可靠性\"></a>不可靠性</h2><ol>\n<li><code>UDP</code> 是无连接的，也就是说通信不需要建立和断开连接。</li>\n<li><code>UDP</code> 也是不可靠的。协议收到什么数据就传递什么数据，并且也不会备份数据，对方能不能收到是不关心的</li>\n<li><code>UDP</code> 没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 <code>UDP</code> 而不是 <code>TCP</code> 。</li>\n</ol>\n<h2 id=\"高效\"><a href=\"#高效\" class=\"headerlink\" title=\"高效\"></a>高效</h2><p>因为 <code>UDP</code> 没有 <code>TCP</code> 那么复杂，需要保证数据不丢失且有序到达。所以 <code>UDP</code> 的头部开销小，只有八字节，相比 <code>TCP</code> 的至少二十字节要少得多，在传输数据报文时是很高效的。</p>\n<p>头部包含了以下几个数据</p>\n<ul>\n<li>两个十六位的端口号，分别为<strong>源端口</strong>（可选字段）和<strong>目标端口</strong></li>\n<li>整个数据报文的长度</li>\n<li>整个数据报文的检验和（ <code>IPv4</code> 可选 字段），该字段用于发现头部信息和数据中的错误</li>\n</ul>\n<h2 id=\"传输方式\"><a href=\"#传输方式\" class=\"headerlink\" title=\"传输方式\"></a>传输方式</h2><p><code>UDP</code> 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 <code>UDP</code> 提供了单播，多播，广播的功能。</p>\n<h1 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h1><h2 id=\"头部\"><a href=\"#头部\" class=\"headerlink\" title=\"头部\"></a>头部</h2><p>TCP 头部比 UDP 头部复杂的多</p>\n<p>对于 TCP 头部来说，以下几个字段是很重要的</p>\n<ul>\n<li><code>Sequence number</code>（序号），它保证了 <code>TCP</code> 传输的报文都是有序的，对端可以通过序号顺序的拼接报文</li>\n<li><code>Acknowledgement Number</code>（确认编号），它表示数据接收端期望接收的下一个字节的编号是多少，同时也表示上一个序号的数据已经收到</li>\n<li><code>Window Size</code>（窗口大小），它表示还能接收多少字节的数据，用于流量控制</li>\n<li>标识符<ul>\n<li><code>URG=1</code>：该字段为一表示本数据报的数据部分包含紧急信息，是一个高优先级数据报文，此时紧急指针有效。紧急数据一定位于当前数据包数据部分的最前面，紧急指针标明了紧急数据的尾部。</li>\n<li><code>ACK=1</code>：该字段为一表示确认号字段有效。此外，TCP 还规定在连接建立后传送的所有报文段都必须把 ACK 置为一。</li>\n<li><code>PSH=1</code>：该字段为一表示接收端应该立即将数据 push 给应用层，而不是等到缓冲区满后再提交。</li>\n<li><code>RST=1</code>：该字段为一表示当前 TCP 连接出现严重问题，可能需要重新建立 TCP 连接，也可以用于拒绝非法的报文段和拒绝连接请求。</li>\n<li><code>SYN=1</code>：当SYN=1，ACK=0时，表示当前报文段是一个连接请求报文。当SYN=1，ACK=1时，表示当前报文段是一个同意建立连接的应答报文。</li>\n<li><code>FIN=1</code>：该字段为一表示此报文段是一个释放连接的请求报文。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"状态机\"><a href=\"#状态机\" class=\"headerlink\" title=\"状态机\"></a>状态机</h2><p><code>HTTP</code> 是无连接的，所以作为下层的 <code>TCP</code> 协议也是无连接的，虽然看似 <code>TCP</code> 将两端连接了起来，但是其实只是两端共同维护了一个状态</p>\n<p><code>TCP</code> 的状态机是很复杂的，并且与建立断开连接时的握手息息相关，接下来就来详细描述下两种握手。<br>在这之前需要了解一个重要的性能指标 <code>RTT</code> 。该指标表示发送端发送数据到接收到对端数据所需的往返时间。</p>\n<h3 id=\"建立连接三次握手\"><a href=\"#建立连接三次握手\" class=\"headerlink\" title=\"建立连接三次握手\"></a>建立连接三次握手</h3><p>在 TCP 协议中，主动发起请求的一端为客户端，被动连接的一端称为服务端。不管是客户端还是服务端，TCP 连接建立完后都能发送和接收数据，所以 TCP 也是一个全双工的协议。</p>\n<p>起初，两端都为 CLOSED 状态。在通信开始前，双方都会创建 TCB。 服务器创建完 TCB 后遍进入 LISTEN 状态，此时开始等待客户端发送数据。</p>\n<h4 id=\"第一次握手\"><a href=\"#第一次握手\" class=\"headerlink\" title=\"第一次握手\"></a>第一次握手</h4><p>客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态，x 表示客户端的数据通信初始序号。</p>\n<h4 id=\"第二次握手\"><a href=\"#第二次握手\" class=\"headerlink\" title=\"第二次握手\"></a>第二次握手</h4><p>服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。</p>\n<h4 id=\"第三次握手\"><a href=\"#第三次握手\" class=\"headerlink\" title=\"第三次握手\"></a>第三次握手</h4><p>当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。</p>\n<p>PS：第三次握手可以包含数据，通过 TCP 快速打开（TFO）技术。其实只要涉及到握手的协议，都可以使用类似 TFO 的方式，客户端和服务端存储相同 cookie，下次握手时发出 cookie 达到减少 RTT 的目的。</p>\n<p><strong><em>你是否有疑惑明明两次握手就可以建立起连接，为什么还需要第三次应答？</em></strong></p>\n<p>因为这是为了防止失效的连接请求报文段被服务端接收，从而产生错误。</p>\n<p>可以想象如下场景。客户端发送了一个连接请求 A，但是因为网络原因造成了超时，这时 TCP 会启动超时重传的机制再次发送一个连接请求 B。此时请求顺利到达服务端，服务端应答完就建立了请求。如果连接请求 A 在两端关闭后终于抵达了服务端，那么这时服务端会认为客户端又需要建立 TCP 连接，从而应答了该请求并进入 ESTABLISHED 状态。此时客户端其实是 CLOSED 状态，那么就会导致服务端一直等待，造成资源的浪费。</p>\n<p>PS：在建立连接中，任意一端掉线，TCP 都会重发 SYN 包，一般会重试五次，在建立连接中可能会遇到 SYN FLOOD 攻击。遇到这种情况你可以选择调低重试次数或者干脆在不能处理的情况下拒绝请求。</p>\n<h3 id=\"断开链接四次握手\"><a href=\"#断开链接四次握手\" class=\"headerlink\" title=\"断开链接四次握手\"></a>断开链接四次握手</h3><p>TCP 是全双工的，在断开连接时两端都需要发送 FIN 和 ACK。</p>\n<h4 id=\"第一次握手-1\"><a href=\"#第一次握手-1\" class=\"headerlink\" title=\"第一次握手\"></a>第一次握手</h4><p>若客户端 A 认为数据发送完成，则它需要向服务端 B 发送连接释放请求。</p>\n<h4 id=\"第二次握手-1\"><a href=\"#第二次握手-1\" class=\"headerlink\" title=\"第二次握手\"></a>第二次握手</h4><p>B 收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，表示 A 到 B 的连接已经释放，不接收 A 发的数据了。但是因为 TCP 连接时双向的，所以 B 仍旧可以发送数据给 A。</p>\n<h4 id=\"第三次握手-1\"><a href=\"#第三次握手-1\" class=\"headerlink\" title=\"第三次握手\"></a>第三次握手</h4><p>B 如果此时还有没发完的数据会继续发送，完毕后会向 A 发送连接释放请求，然后 B 便进入 LAST-ACK 状态。</p>\n<p>PS：通过延迟确认的技术（通常有时间限制，否则对方会误认为需要重传），可以将第二次和第三次握手合并，延迟 ACK 包的发送。</p>\n<h4 id=\"第四次握手\"><a href=\"#第四次握手\" class=\"headerlink\" title=\"第四次握手\"></a>第四次握手</h4><p>A 收到释放请求后，向 B 发送确认应答，此时 A 进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有 B 的重发请求的话，就进入 CLOSED 状态。当 B 收到确认应答后，也便进入 CLOSED 状态。</p>\n<p><strong><em>为什么 A 要进入 TIME-WAIT 状态，等待 2MSL 时间后才进入 CLOSED 状态？</em></strong></p>\n<p>为了保证 B 能收到 A 的确认应答。若 A 发完确认应答后直接进入 CLOSED 状态，如果确认应答因为网络问题一直没有到达，那么会造成 B 不能正常关闭。</p>\n<h3 id=\"ARQ-协议\"><a href=\"#ARQ-协议\" class=\"headerlink\" title=\"ARQ 协议\"></a>ARQ 协议</h3><p>ARQ 协议也就是超时重传机制。通过确认和超时机制保证了数据的正确送达，ARQ 协议包含停止等待 ARQ 和连续 ARQ</p>\n<h4 id=\"停止等待-ARQ\"><a href=\"#停止等待-ARQ\" class=\"headerlink\" title=\"停止等待 ARQ\"></a>停止等待 ARQ</h4><h4 id=\"正常传输过程\"><a href=\"#正常传输过程\" class=\"headerlink\" title=\"正常传输过程\"></a>正常传输过程</h4><p>只要 A 向 B 发送一段报文，都要停止发送并启动一个定时器，等待对端回应，在定时器时间内接收到对端应答就取消定时器并发送下一段报文。</p>\n<h4 id=\"报文丢失或出错\"><a href=\"#报文丢失或出错\" class=\"headerlink\" title=\"报文丢失或出错\"></a>报文丢失或出错</h4><p>在报文传输的过程中可能会出现丢包。这时候超过定时器设定的时间就会再次发送丢包的数据直到对端响应，所以需要每次都备份发送的数据。</p>\n<p>即使报文正常的传输到对端，也可能出现在传输过程中报文出错的问题。这时候对端会抛弃该报文并等待 A 端重传。</p>\n<p>PS：一般定时器设定的时间都会大于一个 RTT 的平均时间。</p>\n<h4 id=\"ACK-超时或丢失\"><a href=\"#ACK-超时或丢失\" class=\"headerlink\" title=\"ACK 超时或丢失\"></a>ACK 超时或丢失</h4><p>对端传输的应答也可能出现丢失或超时的情况。那么超过定时器时间 A 端照样会重传报文。这时候 B 端收到相同序号的报文会丢弃该报文并重传应答，直到 A 端发送下一个序号的报文。</p>\n<p>在超时的情况下也可能出现应答很迟到达，这时 A 端会判断该序号是否已经接收过，如果接收过只需要丢弃应答即可。</p>\n<p><strong><em>这个协议的缺点就是传输效率低，在良好的网络环境下每次发送报文都得等待对端的 ACK 。</em></strong></p>\n<h4 id=\"连续-ARQ\"><a href=\"#连续-ARQ\" class=\"headerlink\" title=\"连续 ARQ\"></a>连续 ARQ</h4><p>在连续 ARQ 中，发送端拥有一个发送窗口，可以在没有收到应答的情况下持续发送窗口内的数据，这样相比停止等待 ARQ 协议来说减少了等待时间，提高了效率。</p>\n<h4 id=\"累计确认\"><a href=\"#累计确认\" class=\"headerlink\" title=\"累计确认\"></a>累计确认</h4><p>连续 ARQ 中，接收端会持续不断收到报文。如果和停止等待 ARQ 中接收一个报文就发送一个应答一样，就太浪费资源了。通过累计确认，可以在收到多个报文以后统一回复一个应答报文。报文中的 ACK 可以用来告诉发送端这个序号之前的数据已经全部接收到了，下次请发送这个序号 + 1的数据。</p>\n<p>但是累计确认也有一个弊端。在连续接收报文时，可能会遇到接收到序号 5 的报文后，并未接到序号 6 的报文，然而序号 7 以后的报文已经接收。遇到这种情况时，ACK 只能回复 6，这样会造成发送端重复发送数据，这种情况下可以通过 Sack 来解决，这个会在下文说到。</p>\n<h3 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h3><p>在上面小节中讲到了发送窗口。在 TCP 中，两端都维护着窗口：分别为发送端窗口和接收端窗口。</p>\n<p>发送端窗口包含已发送但未收到应答的数据和可以发送但是未发送的数据。</p>\n<p>发送端窗口是由接收窗口剩余大小决定的。接收方会把当前接收窗口的剩余大小写入应答报文，发送端收到应答后根据该值和当前网络拥塞情况设置发送窗口的大小，所以发送窗口的大小是不断变化的。</p>\n<p>当发送端接收到应答报文后，会随之将窗口进行滑动</p>\n<p>滑动窗口实现了流量控制。接收方通过报文告知发送方还可以发送多少数据，从而保证接收方能够来得及接收数据。</p>\n<h4 id=\"Zero-窗口\"><a href=\"#Zero-窗口\" class=\"headerlink\" title=\"Zero 窗口\"></a>Zero 窗口</h4><p>在发送报文的过程中，可能会遇到对端出现零窗口的情况。在该情况下，发送端会停止发送数据，并启动 persistent timer 。该定时器会定时发送请求给对端，让对端告知窗口大小。在重试次数超过一定次数后，可能会中断 TCP 链接。</p>\n<h3 id=\"拥塞处理\"><a href=\"#拥塞处理\" class=\"headerlink\" title=\"拥塞处理\"></a>拥塞处理</h3><p>拥塞处理和流量控制不同，后者是作用于接收方，保证接收方来得及接受数据。而前者是作用于网络，防止过多的数据拥塞网络，避免出现网络负载过大的情况。</p>\n<p>拥塞处理包括了四个算法，分别为：<strong>慢开始</strong>，<strong>拥塞避免</strong>，<strong>快速重传</strong>，<strong>快速恢复</strong>。</p>\n<h4 id=\"慢开始算法\"><a href=\"#慢开始算法\" class=\"headerlink\" title=\"慢开始算法\"></a>慢开始算法</h4><p>慢开始算法，顾名思义，就是在传输开始时将发送窗口慢慢指数级扩大，从而避免一开始就传输大量数据导致网络拥塞。</p>\n<p>慢开始算法步骤具体如下</p>\n<ol>\n<li>连接初始设置拥塞窗口（Congestion Window） 为 1 MSS（一个分段的最大数据量）</li>\n<li>每过一个 RTT 就将窗口大小乘二</li>\n<li>指数级增长肯定不能没有限制的，所以有一个阈值限制，当窗口大小大于阈值时就会启动拥塞避免算法。</li>\n</ol>\n<h4 id=\"拥塞避免算法\"><a href=\"#拥塞避免算法\" class=\"headerlink\" title=\"拥塞避免算法\"></a>拥塞避免算法</h4><p>拥塞避免算法相比简单点，每过一个 RTT 窗口大小只加一，这样能够避免指数级增长导致网络拥塞，慢慢将大小调整到最佳值。</p>\n<p>在传输过程中可能定时器超时的情况，这时候 TCP 会认为网络拥塞了，会马上进行以下步骤：</p>\n<ul>\n<li>将阈值设为当前拥塞窗口的一半</li>\n<li>将拥塞窗口设为 1 MSS</li>\n<li>启动拥塞避免算法</li>\n</ul>\n<h4 id=\"快速重传\"><a href=\"#快速重传\" class=\"headerlink\" title=\"快速重传\"></a>快速重传</h4><p>快速重传一般和快恢复一起出现。一旦接收端收到的报文出现失序的情况，接收端只会回复最后一个顺序正确的报文序号（没有 Sack 的情况下）。如果收到三个重复的 ACK，无需等待定时器超时再重发而是启动快速重传。具体算法分为两种：</p>\n<h4 id=\"TCP-Taho-实现如下\"><a href=\"#TCP-Taho-实现如下\" class=\"headerlink\" title=\"TCP Taho 实现如下\"></a>TCP Taho 实现如下</h4><ul>\n<li>将阈值设为当前拥塞窗口的一半</li>\n<li>将拥塞窗口设为 1 MSS</li>\n<li>重新开始慢开始算法</li>\n</ul>\n<h4 id=\"TCP-Reno-实现如下\"><a href=\"#TCP-Reno-实现如下\" class=\"headerlink\" title=\"TCP Reno 实现如下\"></a>TCP Reno 实现如下</h4><ul>\n<li>拥塞窗口减半</li>\n<li>将阈值设为当前拥塞窗口</li>\n<li>进入快恢复阶段（重发对端需要的包，一旦收到一个新的 ACK 答复就退出该阶段）</li>\n<li>使用拥塞避免算法</li>\n</ul>\n<h4 id=\"TCP-New-Ren-改进后的快恢复\"><a href=\"#TCP-New-Ren-改进后的快恢复\" class=\"headerlink\" title=\"TCP New Ren 改进后的快恢复\"></a>TCP New Ren 改进后的快恢复</h4><p>TCP New Reno 算法改进了之前 TCP Reno 算法的缺陷。在之前，快恢复中只要收到一个新的 ACK 包，就会退出快恢复。</p>\n<p>在 TCP New Reno 中，TCP 发送方先记下三个重复 ACK 的分段的最大序号。</p>\n<p>假如我有一个分段数据是 1 ~ 10 这十个序号的报文，其中丢失了序号为 3 和 7 的报文，那么该分段的最大序号就是 10。发送端只会收到 ACK 序号为 3 的应答。这时候重发序号为 3 的报文，接收方顺利接收并会发送 ACK 序号为 7 的应答。这时候 TCP 知道对端是有多个包未收到，会继续发送序号为 7 的报文，接收方顺利接收并会发送 ACK 序号为 11 的应答，这时发送端认为这个分段接收端已经顺利接收，接下来会退出快恢复阶段。</p>\n<h1 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h1><p>HTTP 协议是个无状态协议，不会保存状态。</p>\n<h2 id=\"Post-和-Get-的区别\"><a href=\"#Post-和-Get-的区别\" class=\"headerlink\" title=\"Post 和 Get 的区别\"></a><code>Post</code> 和 <code>Get</code> 的区别</h2><p>先引入<code>副作用</code>和<code>幂等</code>的概念。</p>\n<blockquote>\n<p><strong><em>副作用</em></strong>指对服务器上的资源做改变，搜索是无副作用的，注册是副作用的。</p>\n</blockquote>\n<blockquote>\n<p><strong>幂等</strong>指发送 M 和 N 次请求（两者不相同且都大于 1），服务器上资源的状态一致，比如注册 10 个和 11 个帐号是不幂等的，对文章进行更改 10 次和 11 次是幂等的。</p>\n</blockquote>\n<p>在规范的应用场景上说， <code>Get</code> 多用于无副作用，幂等的场景，例如搜索关键字。 <code>Post</code> 多用于副作用，不幂等的场景，例如注册。</p>\n<p>在技术上说：</p>\n<ul>\n<li>Get 请求能缓存，Post 不能</li>\n<li>Post 相对 Get 安全一点点，因为Get 请求都包含在 URL 里，且会被浏览器保存历史纪录，Post 不会，但是在抓包的情况下都是一样的。</li>\n<li>Post 可以通过 request body来传输比 Get 更多的数据，Get 没有这个技术</li>\n<li>URL有长度限制，会影响 Get 请求，但是这个长度限制是浏览器规定的，不是 RFC 规定的</li>\n<li>Post 支持更多的编码类型且不对数据类型限制</li>\n</ul>\n<h2 id=\"常见状态码\"><a href=\"#常见状态码\" class=\"headerlink\" title=\"常见状态码\"></a>常见状态码</h2><h3 id=\"2XX-成功\"><a href=\"#2XX-成功\" class=\"headerlink\" title=\"2XX 成功\"></a>2XX 成功</h3><p>200 OK，表示从客户端发来的请求在服务器端被正确处理<br>204 No content，表示请求成功，但响应报文不含实体的主体部分<br>205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容<br>206 Partial Content，进行范围请求</p>\n<h3 id=\"3XX-重定向\"><a href=\"#3XX-重定向\" class=\"headerlink\" title=\"3XX 重定向\"></a>3XX 重定向</h3><p>301 moved permanently，永久性重定向，表示资源已被分配了新的 URL<br>302 found，临时性重定向，表示资源临时被分配了新的 URL<br>303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源<br>304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况<br>307 temporary redirect，临时重定向，和302含义类似，但是期望客户端保持请求方法不变向新的地址发出请求</p>\n<h3 id=\"4XX-客户端错误\"><a href=\"#4XX-客户端错误\" class=\"headerlink\" title=\"4XX 客户端错误\"></a>4XX 客户端错误</h3><p>400 bad request，请求报文存在语法错误<br>401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息<br>403 forbidden，表示对请求资源的访问被服务器拒绝<br>404 not found，表示在服务器上没有找到请求的资源</p>\n<h3 id=\"5XX-服务器错误\"><a href=\"#5XX-服务器错误\" class=\"headerlink\" title=\"5XX 服务器错误\"></a>5XX 服务器错误</h3><p>500 internal sever error，表示服务器端在执行请求时发生了错误<br>501 Not Implemented，表示服务器不支持当前请求所需要的某个功能<br>503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求</p>\n<h2 id=\"HTTP-首部\"><a href=\"#HTTP-首部\" class=\"headerlink\" title=\"HTTP 首部\"></a>HTTP 首部</h2><table>\n<thead>\n<tr>\n<th>通用字段</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Cache-Control</td>\n<td>控制缓存的行为</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>浏览器想要优先使用的连接类型，比如 keep-alive</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>创建报文时间</td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>报文指令</td>\n</tr>\n<tr>\n<td>Via</td>\n<td>代理服务器相关信息</td>\n</tr>\n<tr>\n<td>Transfer-Encoding</td>\n<td>传输编码方式</td>\n</tr>\n<tr>\n<td>Upgrade</td>\n<td>要求客户端升级协议</td>\n</tr>\n<tr>\n<td>Warning</td>\n<td>在内容中可能存在错误</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>请求字段</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Accept</td>\n<td>能正确接收的媒体类型</td>\n</tr>\n<tr>\n<td>Accept-Charset</td>\n<td>能正确接收的字符集</td>\n</tr>\n<tr>\n<td>Accept-Encoding</td>\n<td>能正确接收的编码格式列表</td>\n</tr>\n<tr>\n<td>Accept-Language</td>\n<td>能正确接收的语言列表</td>\n</tr>\n<tr>\n<td>Expect</td>\n<td>期待服务端的指定行为</td>\n</tr>\n<tr>\n<td>From</td>\n<td>请求方邮箱地址</td>\n</tr>\n<tr>\n<td>Host</td>\n<td>服务器的域名</td>\n</tr>\n<tr>\n<td>If-Match</td>\n<td>两端资源标记比较</td>\n</tr>\n<tr>\n<td>If-Modified-Since</td>\n<td>本地资源未修改返回 304（比较时间）</td>\n</tr>\n<tr>\n<td>If-None-Match</td>\n<td>本地资源未修改返回 304（比较标记）</td>\n</tr>\n<tr>\n<td>User-Agent</td>\n<td>客户端信息</td>\n</tr>\n<tr>\n<td>Max-Forwards</td>\n<td>限制可被代理及网关转发的次数</td>\n</tr>\n<tr>\n<td>Proxy-Authorization</td>\n<td>向代理服务器发送验证信息</td>\n</tr>\n<tr>\n<td>Range</td>\n<td>请求某个内容的一部分</td>\n</tr>\n<tr>\n<td>Referer</td>\n<td>表示浏览器所访问的前一个页面</td>\n</tr>\n<tr>\n<td>TE</td>\n<td>传输编码方式</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>响应字段</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Accept-Ranges</td>\n<td>是否支持某些种类的范围</td>\n</tr>\n<tr>\n<td>Age</td>\n<td>资源在代理缓存中存在的时间</td>\n</tr>\n<tr>\n<td>ETag</td>\n<td>资源标识</td>\n</tr>\n<tr>\n<td>Location</td>\n<td>客户端重定向到某个 URL</td>\n</tr>\n<tr>\n<td>Proxy-Authenticate</td>\n<td>向代理服务器发送验证信息</td>\n</tr>\n<tr>\n<td>Server</td>\n<td>服务器名字</td>\n</tr>\n<tr>\n<td>WWW-Authenticate</td>\n<td>获取资源需要的验证信息</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>实体字段</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Allow</td>\n<td>资源的正确请求方式</td>\n</tr>\n<tr>\n<td>Content-Encoding</td>\n<td>内容的编码格式</td>\n</tr>\n<tr>\n<td>Content-Language</td>\n<td>内容使用的语言</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>request body 长度</td>\n</tr>\n<tr>\n<td>Content-Location</td>\n<td>返回数据的备用地址</td>\n</tr>\n<tr>\n<td>Content-MD5</td>\n<td>Base64加密格式的内容 MD5检验值</td>\n</tr>\n<tr>\n<td>Content-Range</td>\n<td>内容的位置范围</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>内容的媒体类型</td>\n</tr>\n<tr>\n<td>Expires</td>\n<td>内容的过期时间</td>\n</tr>\n<tr>\n<td>Last_modified</td>\n<td>内容的最后修改时间</td>\n</tr>\n</tbody></table>\n<h1 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h1><p><code>HTTPS</code> 还是通过了 <code>HTTP</code> 来传输信息，但是信息通过 <code>TLS</code> 协议进行了加密。</p>\n<h2 id=\"TLS\"><a href=\"#TLS\" class=\"headerlink\" title=\"TLS\"></a>TLS</h2><p><code>TLS</code> 协议位于传输层之上，应用层之下。首次进行 <code>TLS</code> 协议传输需要两个 <code>RTT</code> ，接下来可以通过 <code>Session Resumption</code> 减少到一个 <code>RTT</code> 。</p>\n<p>在 <code>TLS</code> 中使用了两种加密技术，分别为：<strong><em>对称加密</em></strong>和<strong><em>非对称加密</em></strong>。</p>\n<p><strong>对称加密：</strong><br>对称加密就是两边拥有相同的秘钥，两边都知道如何将密文加密解密。</p>\n<p><strong>非对称加密：</strong><br>有公钥私钥之分，公钥所有人都可以知道，可以将数据用公钥加密，但是将数据解密必须使用私钥解密，私钥只有分发公钥的一方才知道。</p>\n<p><strong>TLS 握手过程如下图：</strong></p>\n<ol>\n<li>客户端发送一个随机值，需要的协议和加密方式</li>\n<li>服务端收到客户端的随机值，自己也产生一个随机值，并根据客户端需求的协议和加密方式来使用对应的方式，发送自己的证书（如果需要验证客户端证书需要说明）</li>\n<li>客户端收到服务端的证书并验证是否有效，验证通过会再生成一个随机值，通过服务端证书的公钥去加密这个随机值并发送给服务端，如果服务端需要验证客户端证书的话会附带证书</li>\n<li>服务端收到加密过的随机值并使用私钥解密获得第三个随机值，这时候两端都拥有了三个随机值，可以通过这三个随机值按照之前约定的加密方式生成密钥，接下来的通信就可以通过该密钥来加密解密</li>\n</ol>\n<p>通过以上步骤可知，在 TLS 握手阶段，两端使用非对称加密的方式来通信，但是因为非对称加密损耗的性能比对称加密大，所以在正式传输数据时，两端使用对称加密的方式通信。</p>\n<p>PS：以上说明的都是 TLS 1.2 协议的握手情况，在 1.3 协议中，首次建立连接只需要一个 RTT，后面恢复连接不需要 RTT 了。</p>\n<h1 id=\"HTTP-2-0\"><a href=\"#HTTP-2-0\" class=\"headerlink\" title=\"HTTP 2.0\"></a>HTTP 2.0</h1><p>HTTP 2.0 相比于 HTTP 1.X，可以说是大幅度提高了 web 的性能。</p>\n<p>在 HTTP 1.X 中，为了性能考虑，我们会引入雪碧图、将小图内联、使用多个域名等等的方式。这一切都是因为浏览器限制了同一个域名下的请求数量，当页面中需要请求很多资源的时候，队头阻塞（Head of line blocking）会导致在达到最大请求数量时，剩余的资源需要等待其他资源请求完成后才能发起请求。</p>\n<p>你可以通过 该链接 感受下 HTTP 2.0 比 HTTP 1.X 到底快了多少。</p>\n<p>在 HTTP 1.X 中，因为队头阻塞的原因，你会发现请求是这样的<br><img src=\"https://s2.ax1x.com/2020/01/09/lWJGkt.png\" alt=\"lWJGkt.png\"><br>在 HTTP 2.0 中，因为引入了多路复用，你会发现请求是这样的<br><img src=\"https://s2.ax1x.com/2020/01/09/lWJa6g.png\" alt=\"lWJa6g.png\"></p>\n<h2 id=\"二进制传输\"><a href=\"#二进制传输\" class=\"headerlink\" title=\"二进制传输\"></a>二进制传输</h2><p>HTTP 2.0 中所有加强性能的核心点在于此。在之前的 HTTP 版本中，我们是通过文本的方式传输数据。在 HTTP 2.0 中引入了新的编码机制，所有传输的数据都会被分割，并采用二进制格式编码。</p>\n<h2 id=\"多路复用\"><a href=\"#多路复用\" class=\"headerlink\" title=\"多路复用\"></a>多路复用</h2><p>在 HTTP 2.0 中，有两个非常重要的概念，分别是<strong>帧（frame）</strong>和<strong>流（stream）</strong>。<br>帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。</p>\n<p>多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。</p>\n<h2 id=\"Header-压缩\"><a href=\"#Header-压缩\" class=\"headerlink\" title=\"Header 压缩\"></a>Header 压缩</h2><p>在 HTTP 1.X 中，我们使用文本的形式传输 header，在 header 携带 cookie 的情况下，可能每次都需要重复传输几百到几千的字节。</p>\n<p>在 HTTP 2.0 中，使用了 HPACK 压缩格式对传输的 header 进行编码，减少了 header 的大小。并在两端维护了索引表，用于记录出现过的 header ，后面在传输过程中就可以传输已经记录过的 header 的键名，对端收到数据后就可以通过键名找到对应的值。</p>\n<h2 id=\"服务端-Push\"><a href=\"#服务端-Push\" class=\"headerlink\" title=\"服务端 Push\"></a>服务端 Push</h2><p>在 HTTP 2.0 中，服务端可以在客户端某个请求后，主动推送其他资源。</p>\n<p>可以想象以下情况，某些资源客户端是一定会请求的，这时就可以采取服务端 push 的技术，提前给客户端推送必要的资源，这样就可以相对减少一点延迟时间。当然在浏览器兼容的情况下你也可以使用 prefetch 。</p>\n<h2 id=\"QUIC\"><a href=\"#QUIC\" class=\"headerlink\" title=\"QUIC\"></a>QUIC</h2><p>这是一个谷歌出品的基于 UDP 实现的同为传输层的协议，目标很远大，希望替代 TCP 协议。</p>\n<ul>\n<li>该协议支持多路复用，虽然 HTTP 2.0 也支持多路复用，但是下层仍是 TCP，因为 TCP 的重传机制，只要一个包丢失就得判断丢失包并且重传，导致发生队头阻塞的问题，但是 UDP 没有这个机制</li>\n<li>实现了自己的加密协议，通过类似 TCP 的 TFO 机制可以实现 0-RTT，当然 TLS 1.3 已经实现了 0-RTT 了</li>\n<li>支持重传和纠错机制（向前恢复），在只丢失一个包的情况下不需要重传，使用纠错机制恢复丢失的包<ul>\n<li>纠错机制：通过异或的方式，算出发出去的数据的异或值并单独发出一个包，服务端在发现有一个包丢失的情况下，通过其他数据包和异或值包算出丢失包</li>\n<li>在丢失两个包或以上的情况就使用重传机制，因为算不出来了</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h1><p>DNS 的作用就是通过域名查询到具体的 IP。</p>\n<p>因为 IP 存在数字和英文的组合（IPv6），很不利于人类记忆，所以就出现了域名。你可以把域名看成是某个 IP 的别名，DNS 就是去查询这个别名的真正名称是什么。</p>\n<p>在 TCP 握手之前就已经进行了 DNS 查询，这个查询是操作系统自己做的。当你在浏览器中想访问 <a href=\"http://www.google.com\" target=\"_blank\" rel=\"noopener\">www.google.com</a> 时，会进行一下操作：</p>\n<ol>\n<li>操作系统会首先在本地缓存中查询</li>\n<li>没有的话会去系统配置的 DNS 服务器中查询</li>\n<li>如果这时候还没得话，会直接去 DNS 根服务器查询，这一步查询会找出负责 com 这个一级域名的服务器</li>\n<li>然后去该服务器查询 google 这个二级域名</li>\n<li>接下来三级域名的查询其实是我们配置的，你可以给 www 这个域名配置一个 IP，然后还可以给别的三级域名配置一个 IP</li>\n</ol>\n<p>以上介绍的是 DNS 迭代查询，还有种是递归查询，区别就是前者是由客户端去做请求，后者是由系统配置的 DNS 服务器做请求，得到结果后将数据返回给客户端。</p>\n<p>PS：DNS 是基于 UDP 做的查询。</p>\n<h2 id=\"从输入-URL-到页面加载完成的过程\"><a href=\"#从输入-URL-到页面加载完成的过程\" class=\"headerlink\" title=\"从输入 URL 到页面加载完成的过程\"></a>从输入 URL 到页面加载完成的过程</h2><p>这是一个很经典的面试题，在这题中可以将本文讲得内容都串联起来。</p>\n<ol>\n<li>首先做 <code>DNS</code> 查询，如果这一步做了智能 <code>DNS</code> 解析的话，会提供访问速度最快的 <code>IP</code> 地址回来</li>\n<li>接下来是 <code>TCP</code> 握手，应用层会下发数据给传输层，这里 <code>TCP</code> 协议会指明两端的端口号，然后下发给网络层。网络层中的 <code>IP</code> 协议会确定 <code>IP</code> 地址，并且指示了数据传输中如何跳转路由器。然后包会再被封装到数据链路层的数据帧结构中，最后就是物理层面的传输了</li>\n<li><code>TCP</code> 握手结束后会进行 <code>TLS</code> 握手，然后就开始正式的传输数据</li>\n<li>数据在进入服务端之前，可能还会先经过负责负载均衡的服务器，它的作用就是将请求合理的分发到多台服务器上，这时假设服务端会响应一个 <code>HTML</code> 文件</li>\n<li>首先浏览器会判断状态码是什么，如果是 <code>200</code> 那就继续解析，如果 <code>400</code> 或 <code>500</code> 的话就会报错，如果 <code>300</code> 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错</li>\n<li>浏览器开始解析文件，如果是 <code>gzip</code> 格式的话会先解压一下，然后通过文件的编码格式知道该如何去解码文件</li>\n<li>文件解码成功后会正式开始渲染流程，先会根据 <code>HTML</code> 构建 <code>DOM</code> 树，有 <code>CSS</code> 的话会去构建 <code>CSSOM</code> 树。如果遇到 <code>script</code> 标签的话，会判断是否存在 <code>async</code> 或者 <code>defer</code> ，前者会并行进行下载并执行 <code>JS</code> ，后者会先下载文件，然后等待 <code>HTML</code> 解析完成后顺序执行，如果以上都没有，就会阻塞住渲染流程直到 <code>JS</code> 执行完毕。遇到文件下载的会去下载文件，这里如果使用 <code>HTTP 2.0</code> 协议的话会极大的提高多图的下载效率。</li>\n<li>初始的 <code>HTML</code> 被完全加载和解析后会触发 <code>DOMContentLoaded</code> 事件</li>\n<li><code>CSSOM</code> 树和 <code>DOM</code> 树构建完成后会开始生成 <code>Render</code> 树，这一步就是确定页面元素的布局、样式等等诸多方面的东西</li>\n<li>在生成 <code>Render</code> 树的过程中，浏览器就开始调用 <code>GPU</code> 绘制，合成图层，将内容显示在屏幕上了</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>网络相关的知识虽然平时在编码阶段很少遇到，但是并不是说它不重要，尤其是前端优化层面，能从网络传输过程优化的点有很多，所以，我们需要好好掌握网络相关的知识，接下来，我将会将我了解到的网络相关的知识点进行一一整理</p>\n<h1 id=\"UDP-User-Datagram-Protocol-用户数据报协议\"><a href=\"#UDP-User-Datagram-Protocol-用户数据报协议\" class=\"headerlink\" title=\"UDP - User Datagram Protocol - 用户数据报协议\"></a>UDP - User Datagram Protocol - 用户数据报协议</h1><h2 id=\"面向报文\"><a href=\"#面向报文\" class=\"headerlink\" title=\"面向报文\"></a>面向报文</h2><p>UDP 是一个面向报文（报文可以理解为一段段的数据）的协议。意思就是 UDP 只是报文的搬运工，不会对报文进行任何拆分和拼接操作。</p>\n<p>具体来说</p>\n<ul>\n<li>在<strong>发送端</strong>，应用层将数据传递给传输层的 <code>UDP</code> 协议， <code>UDP</code> 只会给数据增加一个 <code>UDP</code> 头标识下是 <code>UDP</code> 协议，然后就传递给网络层了</li>\n<li>在<strong>接收端</strong>，网络层将数据传递给传输层， <code>UDP</code> 只去除 <code>IP</code> 报文头就传递给应用层，不会任何拼接操作</li>\n</ul>\n<h2 id=\"不可靠性\"><a href=\"#不可靠性\" class=\"headerlink\" title=\"不可靠性\"></a>不可靠性</h2><ol>\n<li><code>UDP</code> 是无连接的，也就是说通信不需要建立和断开连接。</li>\n<li><code>UDP</code> 也是不可靠的。协议收到什么数据就传递什么数据，并且也不会备份数据，对方能不能收到是不关心的</li>\n<li><code>UDP</code> 没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 <code>UDP</code> 而不是 <code>TCP</code> 。</li>\n</ol>\n<h2 id=\"高效\"><a href=\"#高效\" class=\"headerlink\" title=\"高效\"></a>高效</h2><p>因为 <code>UDP</code> 没有 <code>TCP</code> 那么复杂，需要保证数据不丢失且有序到达。所以 <code>UDP</code> 的头部开销小，只有八字节，相比 <code>TCP</code> 的至少二十字节要少得多，在传输数据报文时是很高效的。</p>\n<p>头部包含了以下几个数据</p>\n<ul>\n<li>两个十六位的端口号，分别为<strong>源端口</strong>（可选字段）和<strong>目标端口</strong></li>\n<li>整个数据报文的长度</li>\n<li>整个数据报文的检验和（ <code>IPv4</code> 可选 字段），该字段用于发现头部信息和数据中的错误</li>\n</ul>\n<h2 id=\"传输方式\"><a href=\"#传输方式\" class=\"headerlink\" title=\"传输方式\"></a>传输方式</h2><p><code>UDP</code> 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 <code>UDP</code> 提供了单播，多播，广播的功能。</p>\n<h1 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h1><h2 id=\"头部\"><a href=\"#头部\" class=\"headerlink\" title=\"头部\"></a>头部</h2><p>TCP 头部比 UDP 头部复杂的多</p>\n<p>对于 TCP 头部来说，以下几个字段是很重要的</p>\n<ul>\n<li><code>Sequence number</code>（序号），它保证了 <code>TCP</code> 传输的报文都是有序的，对端可以通过序号顺序的拼接报文</li>\n<li><code>Acknowledgement Number</code>（确认编号），它表示数据接收端期望接收的下一个字节的编号是多少，同时也表示上一个序号的数据已经收到</li>\n<li><code>Window Size</code>（窗口大小），它表示还能接收多少字节的数据，用于流量控制</li>\n<li>标识符<ul>\n<li><code>URG=1</code>：该字段为一表示本数据报的数据部分包含紧急信息，是一个高优先级数据报文，此时紧急指针有效。紧急数据一定位于当前数据包数据部分的最前面，紧急指针标明了紧急数据的尾部。</li>\n<li><code>ACK=1</code>：该字段为一表示确认号字段有效。此外，TCP 还规定在连接建立后传送的所有报文段都必须把 ACK 置为一。</li>\n<li><code>PSH=1</code>：该字段为一表示接收端应该立即将数据 push 给应用层，而不是等到缓冲区满后再提交。</li>\n<li><code>RST=1</code>：该字段为一表示当前 TCP 连接出现严重问题，可能需要重新建立 TCP 连接，也可以用于拒绝非法的报文段和拒绝连接请求。</li>\n<li><code>SYN=1</code>：当SYN=1，ACK=0时，表示当前报文段是一个连接请求报文。当SYN=1，ACK=1时，表示当前报文段是一个同意建立连接的应答报文。</li>\n<li><code>FIN=1</code>：该字段为一表示此报文段是一个释放连接的请求报文。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"状态机\"><a href=\"#状态机\" class=\"headerlink\" title=\"状态机\"></a>状态机</h2><p><code>HTTP</code> 是无连接的，所以作为下层的 <code>TCP</code> 协议也是无连接的，虽然看似 <code>TCP</code> 将两端连接了起来，但是其实只是两端共同维护了一个状态</p>\n<p><code>TCP</code> 的状态机是很复杂的，并且与建立断开连接时的握手息息相关，接下来就来详细描述下两种握手。<br>在这之前需要了解一个重要的性能指标 <code>RTT</code> 。该指标表示发送端发送数据到接收到对端数据所需的往返时间。</p>\n<h3 id=\"建立连接三次握手\"><a href=\"#建立连接三次握手\" class=\"headerlink\" title=\"建立连接三次握手\"></a>建立连接三次握手</h3><p>在 TCP 协议中，主动发起请求的一端为客户端，被动连接的一端称为服务端。不管是客户端还是服务端，TCP 连接建立完后都能发送和接收数据，所以 TCP 也是一个全双工的协议。</p>\n<p>起初，两端都为 CLOSED 状态。在通信开始前，双方都会创建 TCB。 服务器创建完 TCB 后遍进入 LISTEN 状态，此时开始等待客户端发送数据。</p>\n<h4 id=\"第一次握手\"><a href=\"#第一次握手\" class=\"headerlink\" title=\"第一次握手\"></a>第一次握手</h4><p>客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态，x 表示客户端的数据通信初始序号。</p>\n<h4 id=\"第二次握手\"><a href=\"#第二次握手\" class=\"headerlink\" title=\"第二次握手\"></a>第二次握手</h4><p>服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。</p>\n<h4 id=\"第三次握手\"><a href=\"#第三次握手\" class=\"headerlink\" title=\"第三次握手\"></a>第三次握手</h4><p>当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。</p>\n<p>PS：第三次握手可以包含数据，通过 TCP 快速打开（TFO）技术。其实只要涉及到握手的协议，都可以使用类似 TFO 的方式，客户端和服务端存储相同 cookie，下次握手时发出 cookie 达到减少 RTT 的目的。</p>\n<p><strong><em>你是否有疑惑明明两次握手就可以建立起连接，为什么还需要第三次应答？</em></strong></p>\n<p>因为这是为了防止失效的连接请求报文段被服务端接收，从而产生错误。</p>\n<p>可以想象如下场景。客户端发送了一个连接请求 A，但是因为网络原因造成了超时，这时 TCP 会启动超时重传的机制再次发送一个连接请求 B。此时请求顺利到达服务端，服务端应答完就建立了请求。如果连接请求 A 在两端关闭后终于抵达了服务端，那么这时服务端会认为客户端又需要建立 TCP 连接，从而应答了该请求并进入 ESTABLISHED 状态。此时客户端其实是 CLOSED 状态，那么就会导致服务端一直等待，造成资源的浪费。</p>\n<p>PS：在建立连接中，任意一端掉线，TCP 都会重发 SYN 包，一般会重试五次，在建立连接中可能会遇到 SYN FLOOD 攻击。遇到这种情况你可以选择调低重试次数或者干脆在不能处理的情况下拒绝请求。</p>\n<h3 id=\"断开链接四次握手\"><a href=\"#断开链接四次握手\" class=\"headerlink\" title=\"断开链接四次握手\"></a>断开链接四次握手</h3><p>TCP 是全双工的，在断开连接时两端都需要发送 FIN 和 ACK。</p>\n<h4 id=\"第一次握手-1\"><a href=\"#第一次握手-1\" class=\"headerlink\" title=\"第一次握手\"></a>第一次握手</h4><p>若客户端 A 认为数据发送完成，则它需要向服务端 B 发送连接释放请求。</p>\n<h4 id=\"第二次握手-1\"><a href=\"#第二次握手-1\" class=\"headerlink\" title=\"第二次握手\"></a>第二次握手</h4><p>B 收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，表示 A 到 B 的连接已经释放，不接收 A 发的数据了。但是因为 TCP 连接时双向的，所以 B 仍旧可以发送数据给 A。</p>\n<h4 id=\"第三次握手-1\"><a href=\"#第三次握手-1\" class=\"headerlink\" title=\"第三次握手\"></a>第三次握手</h4><p>B 如果此时还有没发完的数据会继续发送，完毕后会向 A 发送连接释放请求，然后 B 便进入 LAST-ACK 状态。</p>\n<p>PS：通过延迟确认的技术（通常有时间限制，否则对方会误认为需要重传），可以将第二次和第三次握手合并，延迟 ACK 包的发送。</p>\n<h4 id=\"第四次握手\"><a href=\"#第四次握手\" class=\"headerlink\" title=\"第四次握手\"></a>第四次握手</h4><p>A 收到释放请求后，向 B 发送确认应答，此时 A 进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有 B 的重发请求的话，就进入 CLOSED 状态。当 B 收到确认应答后，也便进入 CLOSED 状态。</p>\n<p><strong><em>为什么 A 要进入 TIME-WAIT 状态，等待 2MSL 时间后才进入 CLOSED 状态？</em></strong></p>\n<p>为了保证 B 能收到 A 的确认应答。若 A 发完确认应答后直接进入 CLOSED 状态，如果确认应答因为网络问题一直没有到达，那么会造成 B 不能正常关闭。</p>\n<h3 id=\"ARQ-协议\"><a href=\"#ARQ-协议\" class=\"headerlink\" title=\"ARQ 协议\"></a>ARQ 协议</h3><p>ARQ 协议也就是超时重传机制。通过确认和超时机制保证了数据的正确送达，ARQ 协议包含停止等待 ARQ 和连续 ARQ</p>\n<h4 id=\"停止等待-ARQ\"><a href=\"#停止等待-ARQ\" class=\"headerlink\" title=\"停止等待 ARQ\"></a>停止等待 ARQ</h4><h4 id=\"正常传输过程\"><a href=\"#正常传输过程\" class=\"headerlink\" title=\"正常传输过程\"></a>正常传输过程</h4><p>只要 A 向 B 发送一段报文，都要停止发送并启动一个定时器，等待对端回应，在定时器时间内接收到对端应答就取消定时器并发送下一段报文。</p>\n<h4 id=\"报文丢失或出错\"><a href=\"#报文丢失或出错\" class=\"headerlink\" title=\"报文丢失或出错\"></a>报文丢失或出错</h4><p>在报文传输的过程中可能会出现丢包。这时候超过定时器设定的时间就会再次发送丢包的数据直到对端响应，所以需要每次都备份发送的数据。</p>\n<p>即使报文正常的传输到对端，也可能出现在传输过程中报文出错的问题。这时候对端会抛弃该报文并等待 A 端重传。</p>\n<p>PS：一般定时器设定的时间都会大于一个 RTT 的平均时间。</p>\n<h4 id=\"ACK-超时或丢失\"><a href=\"#ACK-超时或丢失\" class=\"headerlink\" title=\"ACK 超时或丢失\"></a>ACK 超时或丢失</h4><p>对端传输的应答也可能出现丢失或超时的情况。那么超过定时器时间 A 端照样会重传报文。这时候 B 端收到相同序号的报文会丢弃该报文并重传应答，直到 A 端发送下一个序号的报文。</p>\n<p>在超时的情况下也可能出现应答很迟到达，这时 A 端会判断该序号是否已经接收过，如果接收过只需要丢弃应答即可。</p>\n<p><strong><em>这个协议的缺点就是传输效率低，在良好的网络环境下每次发送报文都得等待对端的 ACK 。</em></strong></p>\n<h4 id=\"连续-ARQ\"><a href=\"#连续-ARQ\" class=\"headerlink\" title=\"连续 ARQ\"></a>连续 ARQ</h4><p>在连续 ARQ 中，发送端拥有一个发送窗口，可以在没有收到应答的情况下持续发送窗口内的数据，这样相比停止等待 ARQ 协议来说减少了等待时间，提高了效率。</p>\n<h4 id=\"累计确认\"><a href=\"#累计确认\" class=\"headerlink\" title=\"累计确认\"></a>累计确认</h4><p>连续 ARQ 中，接收端会持续不断收到报文。如果和停止等待 ARQ 中接收一个报文就发送一个应答一样，就太浪费资源了。通过累计确认，可以在收到多个报文以后统一回复一个应答报文。报文中的 ACK 可以用来告诉发送端这个序号之前的数据已经全部接收到了，下次请发送这个序号 + 1的数据。</p>\n<p>但是累计确认也有一个弊端。在连续接收报文时，可能会遇到接收到序号 5 的报文后，并未接到序号 6 的报文，然而序号 7 以后的报文已经接收。遇到这种情况时，ACK 只能回复 6，这样会造成发送端重复发送数据，这种情况下可以通过 Sack 来解决，这个会在下文说到。</p>\n<h3 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h3><p>在上面小节中讲到了发送窗口。在 TCP 中，两端都维护着窗口：分别为发送端窗口和接收端窗口。</p>\n<p>发送端窗口包含已发送但未收到应答的数据和可以发送但是未发送的数据。</p>\n<p>发送端窗口是由接收窗口剩余大小决定的。接收方会把当前接收窗口的剩余大小写入应答报文，发送端收到应答后根据该值和当前网络拥塞情况设置发送窗口的大小，所以发送窗口的大小是不断变化的。</p>\n<p>当发送端接收到应答报文后，会随之将窗口进行滑动</p>\n<p>滑动窗口实现了流量控制。接收方通过报文告知发送方还可以发送多少数据，从而保证接收方能够来得及接收数据。</p>\n<h4 id=\"Zero-窗口\"><a href=\"#Zero-窗口\" class=\"headerlink\" title=\"Zero 窗口\"></a>Zero 窗口</h4><p>在发送报文的过程中，可能会遇到对端出现零窗口的情况。在该情况下，发送端会停止发送数据，并启动 persistent timer 。该定时器会定时发送请求给对端，让对端告知窗口大小。在重试次数超过一定次数后，可能会中断 TCP 链接。</p>\n<h3 id=\"拥塞处理\"><a href=\"#拥塞处理\" class=\"headerlink\" title=\"拥塞处理\"></a>拥塞处理</h3><p>拥塞处理和流量控制不同，后者是作用于接收方，保证接收方来得及接受数据。而前者是作用于网络，防止过多的数据拥塞网络，避免出现网络负载过大的情况。</p>\n<p>拥塞处理包括了四个算法，分别为：<strong>慢开始</strong>，<strong>拥塞避免</strong>，<strong>快速重传</strong>，<strong>快速恢复</strong>。</p>\n<h4 id=\"慢开始算法\"><a href=\"#慢开始算法\" class=\"headerlink\" title=\"慢开始算法\"></a>慢开始算法</h4><p>慢开始算法，顾名思义，就是在传输开始时将发送窗口慢慢指数级扩大，从而避免一开始就传输大量数据导致网络拥塞。</p>\n<p>慢开始算法步骤具体如下</p>\n<ol>\n<li>连接初始设置拥塞窗口（Congestion Window） 为 1 MSS（一个分段的最大数据量）</li>\n<li>每过一个 RTT 就将窗口大小乘二</li>\n<li>指数级增长肯定不能没有限制的，所以有一个阈值限制，当窗口大小大于阈值时就会启动拥塞避免算法。</li>\n</ol>\n<h4 id=\"拥塞避免算法\"><a href=\"#拥塞避免算法\" class=\"headerlink\" title=\"拥塞避免算法\"></a>拥塞避免算法</h4><p>拥塞避免算法相比简单点，每过一个 RTT 窗口大小只加一，这样能够避免指数级增长导致网络拥塞，慢慢将大小调整到最佳值。</p>\n<p>在传输过程中可能定时器超时的情况，这时候 TCP 会认为网络拥塞了，会马上进行以下步骤：</p>\n<ul>\n<li>将阈值设为当前拥塞窗口的一半</li>\n<li>将拥塞窗口设为 1 MSS</li>\n<li>启动拥塞避免算法</li>\n</ul>\n<h4 id=\"快速重传\"><a href=\"#快速重传\" class=\"headerlink\" title=\"快速重传\"></a>快速重传</h4><p>快速重传一般和快恢复一起出现。一旦接收端收到的报文出现失序的情况，接收端只会回复最后一个顺序正确的报文序号（没有 Sack 的情况下）。如果收到三个重复的 ACK，无需等待定时器超时再重发而是启动快速重传。具体算法分为两种：</p>\n<h4 id=\"TCP-Taho-实现如下\"><a href=\"#TCP-Taho-实现如下\" class=\"headerlink\" title=\"TCP Taho 实现如下\"></a>TCP Taho 实现如下</h4><ul>\n<li>将阈值设为当前拥塞窗口的一半</li>\n<li>将拥塞窗口设为 1 MSS</li>\n<li>重新开始慢开始算法</li>\n</ul>\n<h4 id=\"TCP-Reno-实现如下\"><a href=\"#TCP-Reno-实现如下\" class=\"headerlink\" title=\"TCP Reno 实现如下\"></a>TCP Reno 实现如下</h4><ul>\n<li>拥塞窗口减半</li>\n<li>将阈值设为当前拥塞窗口</li>\n<li>进入快恢复阶段（重发对端需要的包，一旦收到一个新的 ACK 答复就退出该阶段）</li>\n<li>使用拥塞避免算法</li>\n</ul>\n<h4 id=\"TCP-New-Ren-改进后的快恢复\"><a href=\"#TCP-New-Ren-改进后的快恢复\" class=\"headerlink\" title=\"TCP New Ren 改进后的快恢复\"></a>TCP New Ren 改进后的快恢复</h4><p>TCP New Reno 算法改进了之前 TCP Reno 算法的缺陷。在之前，快恢复中只要收到一个新的 ACK 包，就会退出快恢复。</p>\n<p>在 TCP New Reno 中，TCP 发送方先记下三个重复 ACK 的分段的最大序号。</p>\n<p>假如我有一个分段数据是 1 ~ 10 这十个序号的报文，其中丢失了序号为 3 和 7 的报文，那么该分段的最大序号就是 10。发送端只会收到 ACK 序号为 3 的应答。这时候重发序号为 3 的报文，接收方顺利接收并会发送 ACK 序号为 7 的应答。这时候 TCP 知道对端是有多个包未收到，会继续发送序号为 7 的报文，接收方顺利接收并会发送 ACK 序号为 11 的应答，这时发送端认为这个分段接收端已经顺利接收，接下来会退出快恢复阶段。</p>\n<h1 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h1><p>HTTP 协议是个无状态协议，不会保存状态。</p>\n<h2 id=\"Post-和-Get-的区别\"><a href=\"#Post-和-Get-的区别\" class=\"headerlink\" title=\"Post 和 Get 的区别\"></a><code>Post</code> 和 <code>Get</code> 的区别</h2><p>先引入<code>副作用</code>和<code>幂等</code>的概念。</p>\n<blockquote>\n<p><strong><em>副作用</em></strong>指对服务器上的资源做改变，搜索是无副作用的，注册是副作用的。</p>\n</blockquote>\n<blockquote>\n<p><strong>幂等</strong>指发送 M 和 N 次请求（两者不相同且都大于 1），服务器上资源的状态一致，比如注册 10 个和 11 个帐号是不幂等的，对文章进行更改 10 次和 11 次是幂等的。</p>\n</blockquote>\n<p>在规范的应用场景上说， <code>Get</code> 多用于无副作用，幂等的场景，例如搜索关键字。 <code>Post</code> 多用于副作用，不幂等的场景，例如注册。</p>\n<p>在技术上说：</p>\n<ul>\n<li>Get 请求能缓存，Post 不能</li>\n<li>Post 相对 Get 安全一点点，因为Get 请求都包含在 URL 里，且会被浏览器保存历史纪录，Post 不会，但是在抓包的情况下都是一样的。</li>\n<li>Post 可以通过 request body来传输比 Get 更多的数据，Get 没有这个技术</li>\n<li>URL有长度限制，会影响 Get 请求，但是这个长度限制是浏览器规定的，不是 RFC 规定的</li>\n<li>Post 支持更多的编码类型且不对数据类型限制</li>\n</ul>\n<h2 id=\"常见状态码\"><a href=\"#常见状态码\" class=\"headerlink\" title=\"常见状态码\"></a>常见状态码</h2><h3 id=\"2XX-成功\"><a href=\"#2XX-成功\" class=\"headerlink\" title=\"2XX 成功\"></a>2XX 成功</h3><p>200 OK，表示从客户端发来的请求在服务器端被正确处理<br>204 No content，表示请求成功，但响应报文不含实体的主体部分<br>205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容<br>206 Partial Content，进行范围请求</p>\n<h3 id=\"3XX-重定向\"><a href=\"#3XX-重定向\" class=\"headerlink\" title=\"3XX 重定向\"></a>3XX 重定向</h3><p>301 moved permanently，永久性重定向，表示资源已被分配了新的 URL<br>302 found，临时性重定向，表示资源临时被分配了新的 URL<br>303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源<br>304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况<br>307 temporary redirect，临时重定向，和302含义类似，但是期望客户端保持请求方法不变向新的地址发出请求</p>\n<h3 id=\"4XX-客户端错误\"><a href=\"#4XX-客户端错误\" class=\"headerlink\" title=\"4XX 客户端错误\"></a>4XX 客户端错误</h3><p>400 bad request，请求报文存在语法错误<br>401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息<br>403 forbidden，表示对请求资源的访问被服务器拒绝<br>404 not found，表示在服务器上没有找到请求的资源</p>\n<h3 id=\"5XX-服务器错误\"><a href=\"#5XX-服务器错误\" class=\"headerlink\" title=\"5XX 服务器错误\"></a>5XX 服务器错误</h3><p>500 internal sever error，表示服务器端在执行请求时发生了错误<br>501 Not Implemented，表示服务器不支持当前请求所需要的某个功能<br>503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求</p>\n<h2 id=\"HTTP-首部\"><a href=\"#HTTP-首部\" class=\"headerlink\" title=\"HTTP 首部\"></a>HTTP 首部</h2><table>\n<thead>\n<tr>\n<th>通用字段</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Cache-Control</td>\n<td>控制缓存的行为</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>浏览器想要优先使用的连接类型，比如 keep-alive</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>创建报文时间</td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>报文指令</td>\n</tr>\n<tr>\n<td>Via</td>\n<td>代理服务器相关信息</td>\n</tr>\n<tr>\n<td>Transfer-Encoding</td>\n<td>传输编码方式</td>\n</tr>\n<tr>\n<td>Upgrade</td>\n<td>要求客户端升级协议</td>\n</tr>\n<tr>\n<td>Warning</td>\n<td>在内容中可能存在错误</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>请求字段</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Accept</td>\n<td>能正确接收的媒体类型</td>\n</tr>\n<tr>\n<td>Accept-Charset</td>\n<td>能正确接收的字符集</td>\n</tr>\n<tr>\n<td>Accept-Encoding</td>\n<td>能正确接收的编码格式列表</td>\n</tr>\n<tr>\n<td>Accept-Language</td>\n<td>能正确接收的语言列表</td>\n</tr>\n<tr>\n<td>Expect</td>\n<td>期待服务端的指定行为</td>\n</tr>\n<tr>\n<td>From</td>\n<td>请求方邮箱地址</td>\n</tr>\n<tr>\n<td>Host</td>\n<td>服务器的域名</td>\n</tr>\n<tr>\n<td>If-Match</td>\n<td>两端资源标记比较</td>\n</tr>\n<tr>\n<td>If-Modified-Since</td>\n<td>本地资源未修改返回 304（比较时间）</td>\n</tr>\n<tr>\n<td>If-None-Match</td>\n<td>本地资源未修改返回 304（比较标记）</td>\n</tr>\n<tr>\n<td>User-Agent</td>\n<td>客户端信息</td>\n</tr>\n<tr>\n<td>Max-Forwards</td>\n<td>限制可被代理及网关转发的次数</td>\n</tr>\n<tr>\n<td>Proxy-Authorization</td>\n<td>向代理服务器发送验证信息</td>\n</tr>\n<tr>\n<td>Range</td>\n<td>请求某个内容的一部分</td>\n</tr>\n<tr>\n<td>Referer</td>\n<td>表示浏览器所访问的前一个页面</td>\n</tr>\n<tr>\n<td>TE</td>\n<td>传输编码方式</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>响应字段</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Accept-Ranges</td>\n<td>是否支持某些种类的范围</td>\n</tr>\n<tr>\n<td>Age</td>\n<td>资源在代理缓存中存在的时间</td>\n</tr>\n<tr>\n<td>ETag</td>\n<td>资源标识</td>\n</tr>\n<tr>\n<td>Location</td>\n<td>客户端重定向到某个 URL</td>\n</tr>\n<tr>\n<td>Proxy-Authenticate</td>\n<td>向代理服务器发送验证信息</td>\n</tr>\n<tr>\n<td>Server</td>\n<td>服务器名字</td>\n</tr>\n<tr>\n<td>WWW-Authenticate</td>\n<td>获取资源需要的验证信息</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>实体字段</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Allow</td>\n<td>资源的正确请求方式</td>\n</tr>\n<tr>\n<td>Content-Encoding</td>\n<td>内容的编码格式</td>\n</tr>\n<tr>\n<td>Content-Language</td>\n<td>内容使用的语言</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>request body 长度</td>\n</tr>\n<tr>\n<td>Content-Location</td>\n<td>返回数据的备用地址</td>\n</tr>\n<tr>\n<td>Content-MD5</td>\n<td>Base64加密格式的内容 MD5检验值</td>\n</tr>\n<tr>\n<td>Content-Range</td>\n<td>内容的位置范围</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>内容的媒体类型</td>\n</tr>\n<tr>\n<td>Expires</td>\n<td>内容的过期时间</td>\n</tr>\n<tr>\n<td>Last_modified</td>\n<td>内容的最后修改时间</td>\n</tr>\n</tbody></table>\n<h1 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h1><p><code>HTTPS</code> 还是通过了 <code>HTTP</code> 来传输信息，但是信息通过 <code>TLS</code> 协议进行了加密。</p>\n<h2 id=\"TLS\"><a href=\"#TLS\" class=\"headerlink\" title=\"TLS\"></a>TLS</h2><p><code>TLS</code> 协议位于传输层之上，应用层之下。首次进行 <code>TLS</code> 协议传输需要两个 <code>RTT</code> ，接下来可以通过 <code>Session Resumption</code> 减少到一个 <code>RTT</code> 。</p>\n<p>在 <code>TLS</code> 中使用了两种加密技术，分别为：<strong><em>对称加密</em></strong>和<strong><em>非对称加密</em></strong>。</p>\n<p><strong>对称加密：</strong><br>对称加密就是两边拥有相同的秘钥，两边都知道如何将密文加密解密。</p>\n<p><strong>非对称加密：</strong><br>有公钥私钥之分，公钥所有人都可以知道，可以将数据用公钥加密，但是将数据解密必须使用私钥解密，私钥只有分发公钥的一方才知道。</p>\n<p><strong>TLS 握手过程如下图：</strong></p>\n<ol>\n<li>客户端发送一个随机值，需要的协议和加密方式</li>\n<li>服务端收到客户端的随机值，自己也产生一个随机值，并根据客户端需求的协议和加密方式来使用对应的方式，发送自己的证书（如果需要验证客户端证书需要说明）</li>\n<li>客户端收到服务端的证书并验证是否有效，验证通过会再生成一个随机值，通过服务端证书的公钥去加密这个随机值并发送给服务端，如果服务端需要验证客户端证书的话会附带证书</li>\n<li>服务端收到加密过的随机值并使用私钥解密获得第三个随机值，这时候两端都拥有了三个随机值，可以通过这三个随机值按照之前约定的加密方式生成密钥，接下来的通信就可以通过该密钥来加密解密</li>\n</ol>\n<p>通过以上步骤可知，在 TLS 握手阶段，两端使用非对称加密的方式来通信，但是因为非对称加密损耗的性能比对称加密大，所以在正式传输数据时，两端使用对称加密的方式通信。</p>\n<p>PS：以上说明的都是 TLS 1.2 协议的握手情况，在 1.3 协议中，首次建立连接只需要一个 RTT，后面恢复连接不需要 RTT 了。</p>\n<h1 id=\"HTTP-2-0\"><a href=\"#HTTP-2-0\" class=\"headerlink\" title=\"HTTP 2.0\"></a>HTTP 2.0</h1><p>HTTP 2.0 相比于 HTTP 1.X，可以说是大幅度提高了 web 的性能。</p>\n<p>在 HTTP 1.X 中，为了性能考虑，我们会引入雪碧图、将小图内联、使用多个域名等等的方式。这一切都是因为浏览器限制了同一个域名下的请求数量，当页面中需要请求很多资源的时候，队头阻塞（Head of line blocking）会导致在达到最大请求数量时，剩余的资源需要等待其他资源请求完成后才能发起请求。</p>\n<p>你可以通过 该链接 感受下 HTTP 2.0 比 HTTP 1.X 到底快了多少。</p>\n<p>在 HTTP 1.X 中，因为队头阻塞的原因，你会发现请求是这样的<br><img src=\"https://s2.ax1x.com/2020/01/09/lWJGkt.png\" alt=\"lWJGkt.png\"><br>在 HTTP 2.0 中，因为引入了多路复用，你会发现请求是这样的<br><img src=\"https://s2.ax1x.com/2020/01/09/lWJa6g.png\" alt=\"lWJa6g.png\"></p>\n<h2 id=\"二进制传输\"><a href=\"#二进制传输\" class=\"headerlink\" title=\"二进制传输\"></a>二进制传输</h2><p>HTTP 2.0 中所有加强性能的核心点在于此。在之前的 HTTP 版本中，我们是通过文本的方式传输数据。在 HTTP 2.0 中引入了新的编码机制，所有传输的数据都会被分割，并采用二进制格式编码。</p>\n<h2 id=\"多路复用\"><a href=\"#多路复用\" class=\"headerlink\" title=\"多路复用\"></a>多路复用</h2><p>在 HTTP 2.0 中，有两个非常重要的概念，分别是<strong>帧（frame）</strong>和<strong>流（stream）</strong>。<br>帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。</p>\n<p>多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。</p>\n<h2 id=\"Header-压缩\"><a href=\"#Header-压缩\" class=\"headerlink\" title=\"Header 压缩\"></a>Header 压缩</h2><p>在 HTTP 1.X 中，我们使用文本的形式传输 header，在 header 携带 cookie 的情况下，可能每次都需要重复传输几百到几千的字节。</p>\n<p>在 HTTP 2.0 中，使用了 HPACK 压缩格式对传输的 header 进行编码，减少了 header 的大小。并在两端维护了索引表，用于记录出现过的 header ，后面在传输过程中就可以传输已经记录过的 header 的键名，对端收到数据后就可以通过键名找到对应的值。</p>\n<h2 id=\"服务端-Push\"><a href=\"#服务端-Push\" class=\"headerlink\" title=\"服务端 Push\"></a>服务端 Push</h2><p>在 HTTP 2.0 中，服务端可以在客户端某个请求后，主动推送其他资源。</p>\n<p>可以想象以下情况，某些资源客户端是一定会请求的，这时就可以采取服务端 push 的技术，提前给客户端推送必要的资源，这样就可以相对减少一点延迟时间。当然在浏览器兼容的情况下你也可以使用 prefetch 。</p>\n<h2 id=\"QUIC\"><a href=\"#QUIC\" class=\"headerlink\" title=\"QUIC\"></a>QUIC</h2><p>这是一个谷歌出品的基于 UDP 实现的同为传输层的协议，目标很远大，希望替代 TCP 协议。</p>\n<ul>\n<li>该协议支持多路复用，虽然 HTTP 2.0 也支持多路复用，但是下层仍是 TCP，因为 TCP 的重传机制，只要一个包丢失就得判断丢失包并且重传，导致发生队头阻塞的问题，但是 UDP 没有这个机制</li>\n<li>实现了自己的加密协议，通过类似 TCP 的 TFO 机制可以实现 0-RTT，当然 TLS 1.3 已经实现了 0-RTT 了</li>\n<li>支持重传和纠错机制（向前恢复），在只丢失一个包的情况下不需要重传，使用纠错机制恢复丢失的包<ul>\n<li>纠错机制：通过异或的方式，算出发出去的数据的异或值并单独发出一个包，服务端在发现有一个包丢失的情况下，通过其他数据包和异或值包算出丢失包</li>\n<li>在丢失两个包或以上的情况就使用重传机制，因为算不出来了</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h1><p>DNS 的作用就是通过域名查询到具体的 IP。</p>\n<p>因为 IP 存在数字和英文的组合（IPv6），很不利于人类记忆，所以就出现了域名。你可以把域名看成是某个 IP 的别名，DNS 就是去查询这个别名的真正名称是什么。</p>\n<p>在 TCP 握手之前就已经进行了 DNS 查询，这个查询是操作系统自己做的。当你在浏览器中想访问 <a href=\"http://www.google.com\" target=\"_blank\" rel=\"noopener\">www.google.com</a> 时，会进行一下操作：</p>\n<ol>\n<li>操作系统会首先在本地缓存中查询</li>\n<li>没有的话会去系统配置的 DNS 服务器中查询</li>\n<li>如果这时候还没得话，会直接去 DNS 根服务器查询，这一步查询会找出负责 com 这个一级域名的服务器</li>\n<li>然后去该服务器查询 google 这个二级域名</li>\n<li>接下来三级域名的查询其实是我们配置的，你可以给 www 这个域名配置一个 IP，然后还可以给别的三级域名配置一个 IP</li>\n</ol>\n<p>以上介绍的是 DNS 迭代查询，还有种是递归查询，区别就是前者是由客户端去做请求，后者是由系统配置的 DNS 服务器做请求，得到结果后将数据返回给客户端。</p>\n<p>PS：DNS 是基于 UDP 做的查询。</p>\n<h2 id=\"从输入-URL-到页面加载完成的过程\"><a href=\"#从输入-URL-到页面加载完成的过程\" class=\"headerlink\" title=\"从输入 URL 到页面加载完成的过程\"></a>从输入 URL 到页面加载完成的过程</h2><p>这是一个很经典的面试题，在这题中可以将本文讲得内容都串联起来。</p>\n<ol>\n<li>首先做 <code>DNS</code> 查询，如果这一步做了智能 <code>DNS</code> 解析的话，会提供访问速度最快的 <code>IP</code> 地址回来</li>\n<li>接下来是 <code>TCP</code> 握手，应用层会下发数据给传输层，这里 <code>TCP</code> 协议会指明两端的端口号，然后下发给网络层。网络层中的 <code>IP</code> 协议会确定 <code>IP</code> 地址，并且指示了数据传输中如何跳转路由器。然后包会再被封装到数据链路层的数据帧结构中，最后就是物理层面的传输了</li>\n<li><code>TCP</code> 握手结束后会进行 <code>TLS</code> 握手，然后就开始正式的传输数据</li>\n<li>数据在进入服务端之前，可能还会先经过负责负载均衡的服务器，它的作用就是将请求合理的分发到多台服务器上，这时假设服务端会响应一个 <code>HTML</code> 文件</li>\n<li>首先浏览器会判断状态码是什么，如果是 <code>200</code> 那就继续解析，如果 <code>400</code> 或 <code>500</code> 的话就会报错，如果 <code>300</code> 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错</li>\n<li>浏览器开始解析文件，如果是 <code>gzip</code> 格式的话会先解压一下，然后通过文件的编码格式知道该如何去解码文件</li>\n<li>文件解码成功后会正式开始渲染流程，先会根据 <code>HTML</code> 构建 <code>DOM</code> 树，有 <code>CSS</code> 的话会去构建 <code>CSSOM</code> 树。如果遇到 <code>script</code> 标签的话，会判断是否存在 <code>async</code> 或者 <code>defer</code> ，前者会并行进行下载并执行 <code>JS</code> ，后者会先下载文件，然后等待 <code>HTML</code> 解析完成后顺序执行，如果以上都没有，就会阻塞住渲染流程直到 <code>JS</code> 执行完毕。遇到文件下载的会去下载文件，这里如果使用 <code>HTTP 2.0</code> 协议的话会极大的提高多图的下载效率。</li>\n<li>初始的 <code>HTML</code> 被完全加载和解析后会触发 <code>DOMContentLoaded</code> 事件</li>\n<li><code>CSSOM</code> 树和 <code>DOM</code> 树构建完成后会开始生成 <code>Render</code> 树，这一步就是确定页面元素的布局、样式等等诸多方面的东西</li>\n<li>在生成 <code>Render</code> 树的过程中，浏览器就开始调用 <code>GPU</code> 绘制，合成图层，将内容显示在屏幕上了</li>\n</ol>\n"},{"title":"前端常见知识点整理 ---- Proxy","date":"2020-01-03T04:00:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# Proxy\n`Proxy` 是 `ES6` 中新增的功能，可以用来自定义对象中的操作\n\n```\n// js代码\n\nlet p = new Proxy(target, handler);\n// `target` 代表需要添加代理的对象\n// `handler` 用来自定义对象中的操作\n```\n可以很方便的使用 `Proxy` 来实现一个数据绑定和监听\n\n```\nlet onWatch = (obj, setBind, getLogger) => {\n  let handler = {\n    get(target, property, receiver) {\n      getLogger(target, property)\n      return Reflect.get(target, property, receiver);\n    },\n    set(target, property, value, receiver) {\n      setBind(value);\n      return Reflect.set(target, property, value);\n    }\n  };\n  return new Proxy(obj, handler);\n};\n\nlet obj = { a: 1 }\nlet value\nlet p = onWatch(obj, (v) => {\n  value = v\n}, (target, property) => {\n  console.log(`Get '${property}' = ${target[property]}`);\n})\np.a = 2 // bind `value` to `2`\np.a // -> Get 'a' = 2\n```","source":"_posts/FE-guide-async-Proxy.md","raw":"---\ntitle: 前端常见知识点整理 ---- Proxy\ndate: 2020-01-03 12:00:00\ncategories: \n  - 前端技术\n  - 前端常见知识点整理\ntags: \n\t- 面试\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# Proxy\n`Proxy` 是 `ES6` 中新增的功能，可以用来自定义对象中的操作\n\n```\n// js代码\n\nlet p = new Proxy(target, handler);\n// `target` 代表需要添加代理的对象\n// `handler` 用来自定义对象中的操作\n```\n可以很方便的使用 `Proxy` 来实现一个数据绑定和监听\n\n```\nlet onWatch = (obj, setBind, getLogger) => {\n  let handler = {\n    get(target, property, receiver) {\n      getLogger(target, property)\n      return Reflect.get(target, property, receiver);\n    },\n    set(target, property, value, receiver) {\n      setBind(value);\n      return Reflect.set(target, property, value);\n    }\n  };\n  return new Proxy(obj, handler);\n};\n\nlet obj = { a: 1 }\nlet value\nlet p = onWatch(obj, (v) => {\n  value = v\n}, (target, property) => {\n  console.log(`Get '${property}' = ${target[property]}`);\n})\np.a = 2 // bind `value` to `2`\np.a // -> Get 'a' = 2\n```","slug":"FE-guide-async-Proxy","published":1,"updated":"2020-04-02T03:20:12.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grwb000tooa6gjzuaqxf","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h1><p><code>Proxy</code> 是 <code>ES6</code> 中新增的功能，可以用来自定义对象中的操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">let p &#x3D; new Proxy(target, handler);</span><br><span class=\"line\">&#x2F;&#x2F; &#96;target&#96; 代表需要添加代理的对象</span><br><span class=\"line\">&#x2F;&#x2F; &#96;handler&#96; 用来自定义对象中的操作</span><br></pre></td></tr></table></figure>\n<p>可以很方便的使用 <code>Proxy</code> 来实现一个数据绑定和监听</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let onWatch &#x3D; (obj, setBind, getLogger) &#x3D;&gt; &#123;</span><br><span class=\"line\">  let handler &#x3D; &#123;</span><br><span class=\"line\">    get(target, property, receiver) &#123;</span><br><span class=\"line\">      getLogger(target, property)</span><br><span class=\"line\">      return Reflect.get(target, property, receiver);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set(target, property, value, receiver) &#123;</span><br><span class=\"line\">      setBind(value);</span><br><span class=\"line\">      return Reflect.set(target, property, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  return new Proxy(obj, handler);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">let obj &#x3D; &#123; a: 1 &#125;</span><br><span class=\"line\">let value</span><br><span class=\"line\">let p &#x3D; onWatch(obj, (v) &#x3D;&gt; &#123;</span><br><span class=\"line\">  value &#x3D; v</span><br><span class=\"line\">&#125;, (target, property) &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#96;Get &#39;$&#123;property&#125;&#39; &#x3D; $&#123;target[property]&#125;&#96;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">p.a &#x3D; 2 &#x2F;&#x2F; bind &#96;value&#96; to &#96;2&#96;</span><br><span class=\"line\">p.a &#x2F;&#x2F; -&gt; Get &#39;a&#39; &#x3D; 2</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h1><p><code>Proxy</code> 是 <code>ES6</code> 中新增的功能，可以用来自定义对象中的操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">let p &#x3D; new Proxy(target, handler);</span><br><span class=\"line\">&#x2F;&#x2F; &#96;target&#96; 代表需要添加代理的对象</span><br><span class=\"line\">&#x2F;&#x2F; &#96;handler&#96; 用来自定义对象中的操作</span><br></pre></td></tr></table></figure>\n<p>可以很方便的使用 <code>Proxy</code> 来实现一个数据绑定和监听</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let onWatch &#x3D; (obj, setBind, getLogger) &#x3D;&gt; &#123;</span><br><span class=\"line\">  let handler &#x3D; &#123;</span><br><span class=\"line\">    get(target, property, receiver) &#123;</span><br><span class=\"line\">      getLogger(target, property)</span><br><span class=\"line\">      return Reflect.get(target, property, receiver);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set(target, property, value, receiver) &#123;</span><br><span class=\"line\">      setBind(value);</span><br><span class=\"line\">      return Reflect.set(target, property, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  return new Proxy(obj, handler);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">let obj &#x3D; &#123; a: 1 &#125;</span><br><span class=\"line\">let value</span><br><span class=\"line\">let p &#x3D; onWatch(obj, (v) &#x3D;&gt; &#123;</span><br><span class=\"line\">  value &#x3D; v</span><br><span class=\"line\">&#125;, (target, property) &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#96;Get &#39;$&#123;property&#125;&#39; &#x3D; $&#123;target[property]&#125;&#96;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">p.a &#x3D; 2 &#x2F;&#x2F; bind &#96;value&#96; to &#96;2&#96;</span><br><span class=\"line\">p.a &#x2F;&#x2F; -&gt; Get &#39;a&#39; &#x3D; 2</span><br></pre></td></tr></table></figure>"},{"title":"reduce函数的妙用 ---- 实现map和filter","date":"2020-01-05T08:55:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n最近看了好多技术文章，好多的代码片段，突然发现好多的代码里都有 `reduce` ，感觉以前都没怎么关注过这个函数，为了弥补这个过失，打算专门写一篇文章说说它。\n\n`reduce` 函数在 MDN 中是这样介绍的\n> reduce() 方法对数组中的***每个元素***执行一个由 ***您*** 提供的 `reducer` 函数(***升序执行***)，将其结果汇总为单个返回值。\n\n说实话看了一脸懵逼，这上面说的叫人话？后来耐着性子看了一些代码后感觉有所理解，如果理解不对，还请斧正。\n首先看一下这里面几个关键词\n\n*** 每个元素： *** 这就是遍历咯，没啥好说的\n***您***提供的 `reducer` 函数：我哪有什么 `reducer` 函数呢，后来理解了，就是回调，有的地方呢叫 `handler` ，这里跟 `reduce` 配合就叫了 `reducer`。\n***升序执行***：就是说是0，1，2下标这样的顺序执行啦。\n将其结果汇总为单个返回值：最后返回的是一个值，当然没说必须是什么类型。\n\n这样解释完了以后，上面这句话就比较好懂了，简单说就是 `reduce` 里传一个回调函数，执行回调函数方法后返回一个值，就是这样。\n\n> reducer 函数接收4个参数:\n- Accumulator (acc) (累计器)\n- Current Value (cur) (当前值)\n- Current Index (idx) (当前索引)\n- Source Array (src) (源数组)\n您的 `reducer` 函数的返回值分配给累计器，该返回值在数组的每个迭代中被记住，并最后成为最终的单个结果值。\n\n看上面的描述一定要注意，这些参数是 `reducer` 的参数，不是 `reduce` 的参数，一共有4个，通常用前两个情况比较多。\n\n那么 `reduce` 函数呢实际上有两个参数，第二个还可以省略 `reducer` 和 `initialValue`，`initialValue`作为第一次调用 `reducer` 函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 ***在没有初始值的空数组上调用 `reduce` 将报错***，这点切记。\n\n终于把前置知识讲清楚了，接下来，我们就用 `reduce` 搞点事情。\n\n## 1. 使用 `reduce` 实现 `map`\n`map` 的话我不想再讲一遍，一句话带过，就是对回调函数中的元素进行加工后返回一个长度一样的新数组。\n那么该如何实现呢，我们来想想原理吧，刚才上面说过了，reduce执行过后的返回值会作为下一次执行的第一个参数放进去，那么就可以先用一个空数组作为初始值来接受每次需要处理的元素的集合，并返回回去，作为下一次传入的第一个参数，这样每次操作完之后就可以push到这个数组中，那么剩下要做的就是处理数组中每一项的函数了，我们叫他 `handler`\n```\n// js代码\n\nArray.prototype.reduceToMap = function (handler) { // 自定义 `map` 函数 `reduceToMap`\n  return this.reduce((target, current, index) => { // this指向调用他的数组\n    target.push(handler.call(this, current, index)) // 这里用了call方法，handler将接受两个参数 current和index\n    return target; // 处理完成后返回新数组\n  }, []) // 初始化空的新数组\n};\n\n```\n就这样我们就用 `reduce`，实现了 `map` 的功能，是不是很好用？\n\n## 2. 使用 `reduce` 实现 `filter`\n`filter` 也是数组常用的方法，同样传入一个回调函数，处理结果返回true或false，最终 `filter` 会返回一个过滤后的函数。\n学会了上面的 `map` 的实现，实际上 `filter` 就会很简单\n```\n// js代码\n\nArray.prototype.reduceToFilter = function (handler) { // 还是自定义方法名\n  return this.reduce((target, current, index) => {\n    if (handler.call(this, current, index)) { // 这里注意 handler 要返回的是布尔类型的值\n      target.push(current); // 符合条件就插入新数组\n    } // 不符合就什么都不做\n    return target; // 最后返回新数组\n  }, []) // 初始化一个空数组\n};\n```\n日后在看到 `reduce` 的妙用之后还会来补充这篇文章，如果实在懒得写，我也会链接一下新文章，希望大家长期关注。","source":"_posts/FE-guide-about-reduce.md","raw":"---\ntitle: reduce函数的妙用 ---- 实现map和filter\ndate: 2020-01-05 16:55:00\ncategories: \n\t- 前端技术\ntags: \n\t- 面试\n\t- 知识点\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n最近看了好多技术文章，好多的代码片段，突然发现好多的代码里都有 `reduce` ，感觉以前都没怎么关注过这个函数，为了弥补这个过失，打算专门写一篇文章说说它。\n\n`reduce` 函数在 MDN 中是这样介绍的\n> reduce() 方法对数组中的***每个元素***执行一个由 ***您*** 提供的 `reducer` 函数(***升序执行***)，将其结果汇总为单个返回值。\n\n说实话看了一脸懵逼，这上面说的叫人话？后来耐着性子看了一些代码后感觉有所理解，如果理解不对，还请斧正。\n首先看一下这里面几个关键词\n\n*** 每个元素： *** 这就是遍历咯，没啥好说的\n***您***提供的 `reducer` 函数：我哪有什么 `reducer` 函数呢，后来理解了，就是回调，有的地方呢叫 `handler` ，这里跟 `reduce` 配合就叫了 `reducer`。\n***升序执行***：就是说是0，1，2下标这样的顺序执行啦。\n将其结果汇总为单个返回值：最后返回的是一个值，当然没说必须是什么类型。\n\n这样解释完了以后，上面这句话就比较好懂了，简单说就是 `reduce` 里传一个回调函数，执行回调函数方法后返回一个值，就是这样。\n\n> reducer 函数接收4个参数:\n- Accumulator (acc) (累计器)\n- Current Value (cur) (当前值)\n- Current Index (idx) (当前索引)\n- Source Array (src) (源数组)\n您的 `reducer` 函数的返回值分配给累计器，该返回值在数组的每个迭代中被记住，并最后成为最终的单个结果值。\n\n看上面的描述一定要注意，这些参数是 `reducer` 的参数，不是 `reduce` 的参数，一共有4个，通常用前两个情况比较多。\n\n那么 `reduce` 函数呢实际上有两个参数，第二个还可以省略 `reducer` 和 `initialValue`，`initialValue`作为第一次调用 `reducer` 函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 ***在没有初始值的空数组上调用 `reduce` 将报错***，这点切记。\n\n终于把前置知识讲清楚了，接下来，我们就用 `reduce` 搞点事情。\n\n## 1. 使用 `reduce` 实现 `map`\n`map` 的话我不想再讲一遍，一句话带过，就是对回调函数中的元素进行加工后返回一个长度一样的新数组。\n那么该如何实现呢，我们来想想原理吧，刚才上面说过了，reduce执行过后的返回值会作为下一次执行的第一个参数放进去，那么就可以先用一个空数组作为初始值来接受每次需要处理的元素的集合，并返回回去，作为下一次传入的第一个参数，这样每次操作完之后就可以push到这个数组中，那么剩下要做的就是处理数组中每一项的函数了，我们叫他 `handler`\n```\n// js代码\n\nArray.prototype.reduceToMap = function (handler) { // 自定义 `map` 函数 `reduceToMap`\n  return this.reduce((target, current, index) => { // this指向调用他的数组\n    target.push(handler.call(this, current, index)) // 这里用了call方法，handler将接受两个参数 current和index\n    return target; // 处理完成后返回新数组\n  }, []) // 初始化空的新数组\n};\n\n```\n就这样我们就用 `reduce`，实现了 `map` 的功能，是不是很好用？\n\n## 2. 使用 `reduce` 实现 `filter`\n`filter` 也是数组常用的方法，同样传入一个回调函数，处理结果返回true或false，最终 `filter` 会返回一个过滤后的函数。\n学会了上面的 `map` 的实现，实际上 `filter` 就会很简单\n```\n// js代码\n\nArray.prototype.reduceToFilter = function (handler) { // 还是自定义方法名\n  return this.reduce((target, current, index) => {\n    if (handler.call(this, current, index)) { // 这里注意 handler 要返回的是布尔类型的值\n      target.push(current); // 符合条件就插入新数组\n    } // 不符合就什么都不做\n    return target; // 最后返回新数组\n  }, []) // 初始化一个空数组\n};\n```\n日后在看到 `reduce` 的妙用之后还会来补充这篇文章，如果实在懒得写，我也会链接一下新文章，希望大家长期关注。","slug":"FE-guide-about-reduce","published":1,"updated":"2020-01-05T08:53:53.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grwg000wooa63xge84ea","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近看了好多技术文章，好多的代码片段，突然发现好多的代码里都有 <code>reduce</code> ，感觉以前都没怎么关注过这个函数，为了弥补这个过失，打算专门写一篇文章说说它。</p>\n<p><code>reduce</code> 函数在 MDN 中是这样介绍的</p>\n<blockquote>\n<p>reduce() 方法对数组中的<strong><em>每个元素</em></strong>执行一个由 <strong><em>您</em></strong> 提供的 <code>reducer</code> 函数(<strong><em>升序执行</em></strong>)，将其结果汇总为单个返回值。</p>\n</blockquote>\n<p>说实话看了一脸懵逼，这上面说的叫人话？后来耐着性子看了一些代码后感觉有所理解，如果理解不对，还请斧正。<br>首先看一下这里面几个关键词</p>\n<p><strong>* 每个元素： *</strong> 这就是遍历咯，没啥好说的<br><strong><em>您</em></strong>提供的 <code>reducer</code> 函数：我哪有什么 <code>reducer</code> 函数呢，后来理解了，就是回调，有的地方呢叫 <code>handler</code> ，这里跟 <code>reduce</code> 配合就叫了 <code>reducer</code>。<br><strong><em>升序执行</em></strong>：就是说是0，1，2下标这样的顺序执行啦。<br>将其结果汇总为单个返回值：最后返回的是一个值，当然没说必须是什么类型。</p>\n<p>这样解释完了以后，上面这句话就比较好懂了，简单说就是 <code>reduce</code> 里传一个回调函数，执行回调函数方法后返回一个值，就是这样。</p>\n<blockquote>\n<p>reducer 函数接收4个参数:</p>\n</blockquote>\n<ul>\n<li>Accumulator (acc) (累计器)</li>\n<li>Current Value (cur) (当前值)</li>\n<li>Current Index (idx) (当前索引)</li>\n<li>Source Array (src) (源数组)<br>您的 <code>reducer</code> 函数的返回值分配给累计器，该返回值在数组的每个迭代中被记住，并最后成为最终的单个结果值。</li>\n</ul>\n<p>看上面的描述一定要注意，这些参数是 <code>reducer</code> 的参数，不是 <code>reduce</code> 的参数，一共有4个，通常用前两个情况比较多。</p>\n<p>那么 <code>reduce</code> 函数呢实际上有两个参数，第二个还可以省略 <code>reducer</code> 和 <code>initialValue</code>，<code>initialValue</code>作为第一次调用 <code>reducer</code> 函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 <strong><em>在没有初始值的空数组上调用 <code>reduce</code> 将报错</em></strong>，这点切记。</p>\n<p>终于把前置知识讲清楚了，接下来，我们就用 <code>reduce</code> 搞点事情。</p>\n<h2 id=\"1-使用-reduce-实现-map\"><a href=\"#1-使用-reduce-实现-map\" class=\"headerlink\" title=\"1. 使用 reduce 实现 map\"></a>1. 使用 <code>reduce</code> 实现 <code>map</code></h2><p><code>map</code> 的话我不想再讲一遍，一句话带过，就是对回调函数中的元素进行加工后返回一个长度一样的新数组。<br>那么该如何实现呢，我们来想想原理吧，刚才上面说过了，reduce执行过后的返回值会作为下一次执行的第一个参数放进去，那么就可以先用一个空数组作为初始值来接受每次需要处理的元素的集合，并返回回去，作为下一次传入的第一个参数，这样每次操作完之后就可以push到这个数组中，那么剩下要做的就是处理数组中每一项的函数了，我们叫他 <code>handler</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">Array.prototype.reduceToMap &#x3D; function (handler) &#123; &#x2F;&#x2F; 自定义 &#96;map&#96; 函数 &#96;reduceToMap&#96;</span><br><span class=\"line\">  return this.reduce((target, current, index) &#x3D;&gt; &#123; &#x2F;&#x2F; this指向调用他的数组</span><br><span class=\"line\">    target.push(handler.call(this, current, index)) &#x2F;&#x2F; 这里用了call方法，handler将接受两个参数 current和index</span><br><span class=\"line\">    return target; &#x2F;&#x2F; 处理完成后返回新数组</span><br><span class=\"line\">  &#125;, []) &#x2F;&#x2F; 初始化空的新数组</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>就这样我们就用 <code>reduce</code>，实现了 <code>map</code> 的功能，是不是很好用？</p>\n<h2 id=\"2-使用-reduce-实现-filter\"><a href=\"#2-使用-reduce-实现-filter\" class=\"headerlink\" title=\"2. 使用 reduce 实现 filter\"></a>2. 使用 <code>reduce</code> 实现 <code>filter</code></h2><p><code>filter</code> 也是数组常用的方法，同样传入一个回调函数，处理结果返回true或false，最终 <code>filter</code> 会返回一个过滤后的函数。<br>学会了上面的 <code>map</code> 的实现，实际上 <code>filter</code> 就会很简单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">Array.prototype.reduceToFilter &#x3D; function (handler) &#123; &#x2F;&#x2F; 还是自定义方法名</span><br><span class=\"line\">  return this.reduce((target, current, index) &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (handler.call(this, current, index)) &#123; &#x2F;&#x2F; 这里注意 handler 要返回的是布尔类型的值</span><br><span class=\"line\">      target.push(current); &#x2F;&#x2F; 符合条件就插入新数组</span><br><span class=\"line\">    &#125; &#x2F;&#x2F; 不符合就什么都不做</span><br><span class=\"line\">    return target; &#x2F;&#x2F; 最后返回新数组</span><br><span class=\"line\">  &#125;, []) &#x2F;&#x2F; 初始化一个空数组</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>日后在看到 <code>reduce</code> 的妙用之后还会来补充这篇文章，如果实在懒得写，我也会链接一下新文章，希望大家长期关注。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近看了好多技术文章，好多的代码片段，突然发现好多的代码里都有 <code>reduce</code> ，感觉以前都没怎么关注过这个函数，为了弥补这个过失，打算专门写一篇文章说说它。</p>\n<p><code>reduce</code> 函数在 MDN 中是这样介绍的</p>\n<blockquote>\n<p>reduce() 方法对数组中的<strong><em>每个元素</em></strong>执行一个由 <strong><em>您</em></strong> 提供的 <code>reducer</code> 函数(<strong><em>升序执行</em></strong>)，将其结果汇总为单个返回值。</p>\n</blockquote>\n<p>说实话看了一脸懵逼，这上面说的叫人话？后来耐着性子看了一些代码后感觉有所理解，如果理解不对，还请斧正。<br>首先看一下这里面几个关键词</p>\n<p><strong>* 每个元素： *</strong> 这就是遍历咯，没啥好说的<br><strong><em>您</em></strong>提供的 <code>reducer</code> 函数：我哪有什么 <code>reducer</code> 函数呢，后来理解了，就是回调，有的地方呢叫 <code>handler</code> ，这里跟 <code>reduce</code> 配合就叫了 <code>reducer</code>。<br><strong><em>升序执行</em></strong>：就是说是0，1，2下标这样的顺序执行啦。<br>将其结果汇总为单个返回值：最后返回的是一个值，当然没说必须是什么类型。</p>\n<p>这样解释完了以后，上面这句话就比较好懂了，简单说就是 <code>reduce</code> 里传一个回调函数，执行回调函数方法后返回一个值，就是这样。</p>\n<blockquote>\n<p>reducer 函数接收4个参数:</p>\n</blockquote>\n<ul>\n<li>Accumulator (acc) (累计器)</li>\n<li>Current Value (cur) (当前值)</li>\n<li>Current Index (idx) (当前索引)</li>\n<li>Source Array (src) (源数组)<br>您的 <code>reducer</code> 函数的返回值分配给累计器，该返回值在数组的每个迭代中被记住，并最后成为最终的单个结果值。</li>\n</ul>\n<p>看上面的描述一定要注意，这些参数是 <code>reducer</code> 的参数，不是 <code>reduce</code> 的参数，一共有4个，通常用前两个情况比较多。</p>\n<p>那么 <code>reduce</code> 函数呢实际上有两个参数，第二个还可以省略 <code>reducer</code> 和 <code>initialValue</code>，<code>initialValue</code>作为第一次调用 <code>reducer</code> 函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 <strong><em>在没有初始值的空数组上调用 <code>reduce</code> 将报错</em></strong>，这点切记。</p>\n<p>终于把前置知识讲清楚了，接下来，我们就用 <code>reduce</code> 搞点事情。</p>\n<h2 id=\"1-使用-reduce-实现-map\"><a href=\"#1-使用-reduce-实现-map\" class=\"headerlink\" title=\"1. 使用 reduce 实现 map\"></a>1. 使用 <code>reduce</code> 实现 <code>map</code></h2><p><code>map</code> 的话我不想再讲一遍，一句话带过，就是对回调函数中的元素进行加工后返回一个长度一样的新数组。<br>那么该如何实现呢，我们来想想原理吧，刚才上面说过了，reduce执行过后的返回值会作为下一次执行的第一个参数放进去，那么就可以先用一个空数组作为初始值来接受每次需要处理的元素的集合，并返回回去，作为下一次传入的第一个参数，这样每次操作完之后就可以push到这个数组中，那么剩下要做的就是处理数组中每一项的函数了，我们叫他 <code>handler</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">Array.prototype.reduceToMap &#x3D; function (handler) &#123; &#x2F;&#x2F; 自定义 &#96;map&#96; 函数 &#96;reduceToMap&#96;</span><br><span class=\"line\">  return this.reduce((target, current, index) &#x3D;&gt; &#123; &#x2F;&#x2F; this指向调用他的数组</span><br><span class=\"line\">    target.push(handler.call(this, current, index)) &#x2F;&#x2F; 这里用了call方法，handler将接受两个参数 current和index</span><br><span class=\"line\">    return target; &#x2F;&#x2F; 处理完成后返回新数组</span><br><span class=\"line\">  &#125;, []) &#x2F;&#x2F; 初始化空的新数组</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>就这样我们就用 <code>reduce</code>，实现了 <code>map</code> 的功能，是不是很好用？</p>\n<h2 id=\"2-使用-reduce-实现-filter\"><a href=\"#2-使用-reduce-实现-filter\" class=\"headerlink\" title=\"2. 使用 reduce 实现 filter\"></a>2. 使用 <code>reduce</code> 实现 <code>filter</code></h2><p><code>filter</code> 也是数组常用的方法，同样传入一个回调函数，处理结果返回true或false，最终 <code>filter</code> 会返回一个过滤后的函数。<br>学会了上面的 <code>map</code> 的实现，实际上 <code>filter</code> 就会很简单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">Array.prototype.reduceToFilter &#x3D; function (handler) &#123; &#x2F;&#x2F; 还是自定义方法名</span><br><span class=\"line\">  return this.reduce((target, current, index) &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (handler.call(this, current, index)) &#123; &#x2F;&#x2F; 这里注意 handler 要返回的是布尔类型的值</span><br><span class=\"line\">      target.push(current); &#x2F;&#x2F; 符合条件就插入新数组</span><br><span class=\"line\">    &#125; &#x2F;&#x2F; 不符合就什么都不做</span><br><span class=\"line\">    return target; &#x2F;&#x2F; 最后返回新数组</span><br><span class=\"line\">  &#125;, []) &#x2F;&#x2F; 初始化一个空数组</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>日后在看到 <code>reduce</code> 的妙用之后还会来补充这篇文章，如果实在懒得写，我也会链接一下新文章，希望大家长期关注。</p>\n"},{"title":"前端常见知识点整理 ---- async 和 await","date":"2020-01-03T03:52:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# async 和 await\n一个函数如果加上 `async` ，那么该函数就会返回一个 `Promise`\n\n``` js\nasync function test() {\n  return \"1\";\n}\nconsole.log(test()); // -> Promise {<resolved>: \"1\"}\n```\n可以把 `async` 看成将函数返回值使用 `Promise.resolve()` 包裹了下。\n`await` 只能在 `async` 函数中使用\n\n``` js\nfunction sleep() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      console.log('finish')\n      resolve(\"sleep\");\n    }, 2000);\n  });\n}\nasync function test() {\n  let value = await sleep();\n  console.log(\"object\");\n}\ntest()\n```\n\n上面代码会先打印 `finish` 然后再打印 `object` 。因为 `await` 会等待 `sleep` 函数 `resolve` ，所以即使后面是同步代码，也不会先去执行同步代码再来执行异步代码。\n\n`async` 和 `await` 相比直接使用 `Promise` 来说，优势在于处理 `then` 的调用链，能够更清晰准确的写出代码。缺点在于滥用 `await` 可能会导致性能问题，因为 `await` 会阻塞代码，也许之后的异步代码并不依赖于前者，但仍然需要等待前者完成，导致代码失去了并发性。\n\n下面来看一个使用 `await` 的代码。\n``` js\nvar a = 0\nvar b = async () => {\n  a = a + await 10\n  console.log('2', a) // -> '2' 10\n  a = (await 10) + a\n  console.log('3', a) // -> '3' 20\n}\nb()\na++\nconsole.log('1', a) // -> '1' 1\n```\n\n对于以上代码你可能会有疑惑，这里说明下原理\n\n- 首先函数 `b` 先执行，在执行到 `await 10` 之前变量 `a` 还是 0，因为在 `await` 内部实现了 `generators` ， `generators` 会保留堆栈中东西，所以这时候 `a = 0` 被保存了下来\n- 因为 `await` 是异步操作，遇到 `await` 就会立即返回一个 `pending` 状态的 `Promise` 对象，暂时返回执行代码的控制权，使得函数外的代码得以继续执行，所以会先执行 `console.log('1', a)`\n- 这时候同步代码执行完毕，开始执行异步代码，将保存下来的值拿出来使用，这时候 `a = 10`\n- 然后后面就是常规执行代码了","source":"_posts/FE-guide-async-await.md","raw":"---\ntitle: 前端常见知识点整理 ---- async 和 await\ndate: 2020-01-03 11:52:00\ncategories: \n  - 前端技术\n  - 前端常见知识点整理\ntags: \n\t- 面试\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# async 和 await\n一个函数如果加上 `async` ，那么该函数就会返回一个 `Promise`\n\n``` js\nasync function test() {\n  return \"1\";\n}\nconsole.log(test()); // -> Promise {<resolved>: \"1\"}\n```\n可以把 `async` 看成将函数返回值使用 `Promise.resolve()` 包裹了下。\n`await` 只能在 `async` 函数中使用\n\n``` js\nfunction sleep() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      console.log('finish')\n      resolve(\"sleep\");\n    }, 2000);\n  });\n}\nasync function test() {\n  let value = await sleep();\n  console.log(\"object\");\n}\ntest()\n```\n\n上面代码会先打印 `finish` 然后再打印 `object` 。因为 `await` 会等待 `sleep` 函数 `resolve` ，所以即使后面是同步代码，也不会先去执行同步代码再来执行异步代码。\n\n`async` 和 `await` 相比直接使用 `Promise` 来说，优势在于处理 `then` 的调用链，能够更清晰准确的写出代码。缺点在于滥用 `await` 可能会导致性能问题，因为 `await` 会阻塞代码，也许之后的异步代码并不依赖于前者，但仍然需要等待前者完成，导致代码失去了并发性。\n\n下面来看一个使用 `await` 的代码。\n``` js\nvar a = 0\nvar b = async () => {\n  a = a + await 10\n  console.log('2', a) // -> '2' 10\n  a = (await 10) + a\n  console.log('3', a) // -> '3' 20\n}\nb()\na++\nconsole.log('1', a) // -> '1' 1\n```\n\n对于以上代码你可能会有疑惑，这里说明下原理\n\n- 首先函数 `b` 先执行，在执行到 `await 10` 之前变量 `a` 还是 0，因为在 `await` 内部实现了 `generators` ， `generators` 会保留堆栈中东西，所以这时候 `a = 0` 被保存了下来\n- 因为 `await` 是异步操作，遇到 `await` 就会立即返回一个 `pending` 状态的 `Promise` 对象，暂时返回执行代码的控制权，使得函数外的代码得以继续执行，所以会先执行 `console.log('1', a)`\n- 这时候同步代码执行完毕，开始执行异步代码，将保存下来的值拿出来使用，这时候 `a = 10`\n- 然后后面就是常规执行代码了","slug":"FE-guide-async-await","published":1,"updated":"2020-04-02T03:20:12.378Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grwj000zooa6g44c8yfv","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"async-和-await\"><a href=\"#async-和-await\" class=\"headerlink\" title=\"async 和 await\"></a>async 和 await</h1><p>一个函数如果加上 <code>async</code> ，那么该函数就会返回一个 <code>Promise</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"1\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test()); <span class=\"comment\">// -&gt; Promise &#123;&lt;resolved&gt;: \"1\"&#125;</span></span><br></pre></td></tr></table></figure>\n<p>可以把 <code>async</code> 看成将函数返回值使用 <code>Promise.resolve()</code> 包裹了下。<br><code>await</code> 只能在 <code>async</code> 函数中使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleep</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'finish'</span>)</span><br><span class=\"line\">      resolve(<span class=\"string\">\"sleep\"</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = <span class=\"keyword\">await</span> sleep();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"object\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test()</span><br></pre></td></tr></table></figure>\n\n<p>上面代码会先打印 <code>finish</code> 然后再打印 <code>object</code> 。因为 <code>await</code> 会等待 <code>sleep</code> 函数 <code>resolve</code> ，所以即使后面是同步代码，也不会先去执行同步代码再来执行异步代码。</p>\n<p><code>async</code> 和 <code>await</code> 相比直接使用 <code>Promise</code> 来说，优势在于处理 <code>then</code> 的调用链，能够更清晰准确的写出代码。缺点在于滥用 <code>await</code> 可能会导致性能问题，因为 <code>await</code> 会阻塞代码，也许之后的异步代码并不依赖于前者，但仍然需要等待前者完成，导致代码失去了并发性。</p>\n<p>下面来看一个使用 <code>await</code> 的代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  a = a + <span class=\"keyword\">await</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'2'</span>, a) <span class=\"comment\">// -&gt; '2' 10</span></span><br><span class=\"line\">  a = (<span class=\"keyword\">await</span> <span class=\"number\">10</span>) + a</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'3'</span>, a) <span class=\"comment\">// -&gt; '3' 20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b()</span><br><span class=\"line\">a++</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>, a) <span class=\"comment\">// -&gt; '1' 1</span></span><br></pre></td></tr></table></figure>\n\n<p>对于以上代码你可能会有疑惑，这里说明下原理</p>\n<ul>\n<li>首先函数 <code>b</code> 先执行，在执行到 <code>await 10</code> 之前变量 <code>a</code> 还是 0，因为在 <code>await</code> 内部实现了 <code>generators</code> ， <code>generators</code> 会保留堆栈中东西，所以这时候 <code>a = 0</code> 被保存了下来</li>\n<li>因为 <code>await</code> 是异步操作，遇到 <code>await</code> 就会立即返回一个 <code>pending</code> 状态的 <code>Promise</code> 对象，暂时返回执行代码的控制权，使得函数外的代码得以继续执行，所以会先执行 <code>console.log(&#39;1&#39;, a)</code></li>\n<li>这时候同步代码执行完毕，开始执行异步代码，将保存下来的值拿出来使用，这时候 <code>a = 10</code></li>\n<li>然后后面就是常规执行代码了</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"async-和-await\"><a href=\"#async-和-await\" class=\"headerlink\" title=\"async 和 await\"></a>async 和 await</h1><p>一个函数如果加上 <code>async</code> ，那么该函数就会返回一个 <code>Promise</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"1\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test()); <span class=\"comment\">// -&gt; Promise &#123;&lt;resolved&gt;: \"1\"&#125;</span></span><br></pre></td></tr></table></figure>\n<p>可以把 <code>async</code> 看成将函数返回值使用 <code>Promise.resolve()</code> 包裹了下。<br><code>await</code> 只能在 <code>async</code> 函数中使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleep</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'finish'</span>)</span><br><span class=\"line\">      resolve(<span class=\"string\">\"sleep\"</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = <span class=\"keyword\">await</span> sleep();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"object\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test()</span><br></pre></td></tr></table></figure>\n\n<p>上面代码会先打印 <code>finish</code> 然后再打印 <code>object</code> 。因为 <code>await</code> 会等待 <code>sleep</code> 函数 <code>resolve</code> ，所以即使后面是同步代码，也不会先去执行同步代码再来执行异步代码。</p>\n<p><code>async</code> 和 <code>await</code> 相比直接使用 <code>Promise</code> 来说，优势在于处理 <code>then</code> 的调用链，能够更清晰准确的写出代码。缺点在于滥用 <code>await</code> 可能会导致性能问题，因为 <code>await</code> 会阻塞代码，也许之后的异步代码并不依赖于前者，但仍然需要等待前者完成，导致代码失去了并发性。</p>\n<p>下面来看一个使用 <code>await</code> 的代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  a = a + <span class=\"keyword\">await</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'2'</span>, a) <span class=\"comment\">// -&gt; '2' 10</span></span><br><span class=\"line\">  a = (<span class=\"keyword\">await</span> <span class=\"number\">10</span>) + a</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'3'</span>, a) <span class=\"comment\">// -&gt; '3' 20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b()</span><br><span class=\"line\">a++</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>, a) <span class=\"comment\">// -&gt; '1' 1</span></span><br></pre></td></tr></table></figure>\n\n<p>对于以上代码你可能会有疑惑，这里说明下原理</p>\n<ul>\n<li>首先函数 <code>b</code> 先执行，在执行到 <code>await 10</code> 之前变量 <code>a</code> 还是 0，因为在 <code>await</code> 内部实现了 <code>generators</code> ， <code>generators</code> 会保留堆栈中东西，所以这时候 <code>a = 0</code> 被保存了下来</li>\n<li>因为 <code>await</code> 是异步操作，遇到 <code>await</code> 就会立即返回一个 <code>pending</code> 状态的 <code>Promise</code> 对象，暂时返回执行代码的控制权，使得函数外的代码得以继续执行，所以会先执行 <code>console.log(&#39;1&#39;, a)</code></li>\n<li>这时候同步代码执行完毕，开始执行异步代码，将保存下来的值拿出来使用，这时候 <code>a = 10</code></li>\n<li>然后后面就是常规执行代码了</li>\n</ul>\n"},{"title":"前端常见知识点整理 ---- call, apply, bind 区别","date":"2020-01-03T02:19:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# call, apply, bind 区别\n首先说下前两者的异同。\n相同： `call` 和 `apply` 都是为了解决改变 `this` 的指向。\n不同：传参的方式不同，除了第一个参数外， `call` 可以接收一个参数***列表***， `apply` 只接受一个参数***数组***。\n```\n// js代码\nlet anObj = {\n    value: 1\n}\nfunction getValue(name, age) {\n    console.log(name)\n    console.log(age)\n    console.log(this.value)\n}\ngetValue.call(anObj, 'lixuguang', '31')\ngetValue.apply(anObj, ['lixuguang', '31'])\n```\n## 模拟实现 `call` 和 `apply`\n\n可以从以下几点来考虑如何实现\n- 不传入第一个参数，那么默认为 `window`\n- 改变了 `this` 指向，让新的对象可以执行该函数。那么思路是否可以变成给新的对象添加一个函数，然后在执行完以后删除？\n```\n// js代码\n\nFunction.prototype.myCall = function (context) {\n  var context = context || window // 有入参用入参，没有给 window\n  context.fn = this  // 给 context 添加一个属性，getValue.call(anObj, 'lixuguang', '31') => anObj.fn = getValue\n  var args = [...arguments].slice(1) // 将 context 后面的参数取出来\n  var result = context.fn(...args) // getValue.call(anObj, 'lixuguang', '31') => anObj.fn('yck', '24')\n  delete context.fn // 删除 fn\n  return result\n}\n```\n以上就是 call 的思路，apply 的实现也类似\n```\n// js代码\n\nFunction.prototype.Apply = function (context) {\n  var context = context || window // 有入参用入参，没有给 window\n  context.fn = this  // 给 context 添加一个属性，getValue.call(anObj, 'lixuguang', '31') => anObj.fn = getValue\n  var args = arguments[1] // 将 context 后面的参数取出来\n  var result = args?context.fn(...args):context.fn() // getValue.call(anObj, ['lixuguang', '31']) => anObj.fn('yck', '24')\n  delete context.fn // 删除 fn\n  return result\n}\n```\n`bind` 和其他两个方法作用也是一致的，只是该方法会返回一个函数。并且我们可以通过 `bind` 实现柯里化。\n\n同样的，也来模拟实现下 `bind`\n```\n// js代码\n\nFunction.prototype.myBind = function (context) {\n  if (typeof this !== 'function') {\n    throw new TypeError('Error')\n  }\n  var _this = this\n  var args = [...arguments].slice(1)\n  \n  return function F() { // 返回一个函数，这是 `bind` 和 `call` ， `apply` 的区别\n    if (this instanceof F) { // 因为返回了一个函数，我们可以 new F()，所以需要判断\n      return new _this(...args, ...arguments)\n    }\n    return _this.apply(context, args.concat(...arguments))\n  }\n}\n```","source":"_posts/FE-guide-call-apply-bind.md","raw":"---\ntitle: 前端常见知识点整理 ---- call, apply, bind 区别\ndate: 2020-01-03 10:19:00\ncategories: \n  - 前端技术\n  - 前端常见知识点整理\ntags: \n\t- 面试\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# call, apply, bind 区别\n首先说下前两者的异同。\n相同： `call` 和 `apply` 都是为了解决改变 `this` 的指向。\n不同：传参的方式不同，除了第一个参数外， `call` 可以接收一个参数***列表***， `apply` 只接受一个参数***数组***。\n```\n// js代码\nlet anObj = {\n    value: 1\n}\nfunction getValue(name, age) {\n    console.log(name)\n    console.log(age)\n    console.log(this.value)\n}\ngetValue.call(anObj, 'lixuguang', '31')\ngetValue.apply(anObj, ['lixuguang', '31'])\n```\n## 模拟实现 `call` 和 `apply`\n\n可以从以下几点来考虑如何实现\n- 不传入第一个参数，那么默认为 `window`\n- 改变了 `this` 指向，让新的对象可以执行该函数。那么思路是否可以变成给新的对象添加一个函数，然后在执行完以后删除？\n```\n// js代码\n\nFunction.prototype.myCall = function (context) {\n  var context = context || window // 有入参用入参，没有给 window\n  context.fn = this  // 给 context 添加一个属性，getValue.call(anObj, 'lixuguang', '31') => anObj.fn = getValue\n  var args = [...arguments].slice(1) // 将 context 后面的参数取出来\n  var result = context.fn(...args) // getValue.call(anObj, 'lixuguang', '31') => anObj.fn('yck', '24')\n  delete context.fn // 删除 fn\n  return result\n}\n```\n以上就是 call 的思路，apply 的实现也类似\n```\n// js代码\n\nFunction.prototype.Apply = function (context) {\n  var context = context || window // 有入参用入参，没有给 window\n  context.fn = this  // 给 context 添加一个属性，getValue.call(anObj, 'lixuguang', '31') => anObj.fn = getValue\n  var args = arguments[1] // 将 context 后面的参数取出来\n  var result = args?context.fn(...args):context.fn() // getValue.call(anObj, ['lixuguang', '31']) => anObj.fn('yck', '24')\n  delete context.fn // 删除 fn\n  return result\n}\n```\n`bind` 和其他两个方法作用也是一致的，只是该方法会返回一个函数。并且我们可以通过 `bind` 实现柯里化。\n\n同样的，也来模拟实现下 `bind`\n```\n// js代码\n\nFunction.prototype.myBind = function (context) {\n  if (typeof this !== 'function') {\n    throw new TypeError('Error')\n  }\n  var _this = this\n  var args = [...arguments].slice(1)\n  \n  return function F() { // 返回一个函数，这是 `bind` 和 `call` ， `apply` 的区别\n    if (this instanceof F) { // 因为返回了一个函数，我们可以 new F()，所以需要判断\n      return new _this(...args, ...arguments)\n    }\n    return _this.apply(context, args.concat(...arguments))\n  }\n}\n```","slug":"FE-guide-call-apply-bind","published":1,"updated":"2020-04-02T03:20:12.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grwr0011ooa6hpbdawsf","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"call-apply-bind-区别\"><a href=\"#call-apply-bind-区别\" class=\"headerlink\" title=\"call, apply, bind 区别\"></a>call, apply, bind 区别</h1><p>首先说下前两者的异同。<br>相同： <code>call</code> 和 <code>apply</code> 都是为了解决改变 <code>this</code> 的指向。<br>不同：传参的方式不同，除了第一个参数外， <code>call</code> 可以接收一个参数<strong><em>列表</em></strong>， <code>apply</code> 只接受一个参数<strong><em>数组</em></strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">let anObj &#x3D; &#123;</span><br><span class=\"line\">    value: 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getValue(name, age) &#123;</span><br><span class=\"line\">    console.log(name)</span><br><span class=\"line\">    console.log(age)</span><br><span class=\"line\">    console.log(this.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getValue.call(anObj, &#39;lixuguang&#39;, &#39;31&#39;)</span><br><span class=\"line\">getValue.apply(anObj, [&#39;lixuguang&#39;, &#39;31&#39;])</span><br></pre></td></tr></table></figure>\n<h2 id=\"模拟实现-call-和-apply\"><a href=\"#模拟实现-call-和-apply\" class=\"headerlink\" title=\"模拟实现 call 和 apply\"></a>模拟实现 <code>call</code> 和 <code>apply</code></h2><p>可以从以下几点来考虑如何实现</p>\n<ul>\n<li>不传入第一个参数，那么默认为 <code>window</code></li>\n<li>改变了 <code>this</code> 指向，让新的对象可以执行该函数。那么思路是否可以变成给新的对象添加一个函数，然后在执行完以后删除？<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">Function.prototype.myCall &#x3D; function (context) &#123;</span><br><span class=\"line\">  var context &#x3D; context || window &#x2F;&#x2F; 有入参用入参，没有给 window</span><br><span class=\"line\">  context.fn &#x3D; this  &#x2F;&#x2F; 给 context 添加一个属性，getValue.call(anObj, &#39;lixuguang&#39;, &#39;31&#39;) &#x3D;&gt; anObj.fn &#x3D; getValue</span><br><span class=\"line\">  var args &#x3D; [...arguments].slice(1) &#x2F;&#x2F; 将 context 后面的参数取出来</span><br><span class=\"line\">  var result &#x3D; context.fn(...args) &#x2F;&#x2F; getValue.call(anObj, &#39;lixuguang&#39;, &#39;31&#39;) &#x3D;&gt; anObj.fn(&#39;yck&#39;, &#39;24&#39;)</span><br><span class=\"line\">  delete context.fn &#x2F;&#x2F; 删除 fn</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n以上就是 call 的思路，apply 的实现也类似<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">Function.prototype.Apply &#x3D; function (context) &#123;</span><br><span class=\"line\">  var context &#x3D; context || window &#x2F;&#x2F; 有入参用入参，没有给 window</span><br><span class=\"line\">  context.fn &#x3D; this  &#x2F;&#x2F; 给 context 添加一个属性，getValue.call(anObj, &#39;lixuguang&#39;, &#39;31&#39;) &#x3D;&gt; anObj.fn &#x3D; getValue</span><br><span class=\"line\">  var args &#x3D; arguments[1] &#x2F;&#x2F; 将 context 后面的参数取出来</span><br><span class=\"line\">  var result &#x3D; args?context.fn(...args):context.fn() &#x2F;&#x2F; getValue.call(anObj, [&#39;lixuguang&#39;, &#39;31&#39;]) &#x3D;&gt; anObj.fn(&#39;yck&#39;, &#39;24&#39;)</span><br><span class=\"line\">  delete context.fn &#x2F;&#x2F; 删除 fn</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<code>bind</code> 和其他两个方法作用也是一致的，只是该方法会返回一个函数。并且我们可以通过 <code>bind</code> 实现柯里化。</li>\n</ul>\n<p>同样的，也来模拟实现下 <code>bind</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">Function.prototype.myBind &#x3D; function (context) &#123;</span><br><span class=\"line\">  if (typeof this !&#x3D;&#x3D; &#39;function&#39;) &#123;</span><br><span class=\"line\">    throw new TypeError(&#39;Error&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var _this &#x3D; this</span><br><span class=\"line\">  var args &#x3D; [...arguments].slice(1)</span><br><span class=\"line\">  </span><br><span class=\"line\">  return function F() &#123; &#x2F;&#x2F; 返回一个函数，这是 &#96;bind&#96; 和 &#96;call&#96; ， &#96;apply&#96; 的区别</span><br><span class=\"line\">    if (this instanceof F) &#123; &#x2F;&#x2F; 因为返回了一个函数，我们可以 new F()，所以需要判断</span><br><span class=\"line\">      return new _this(...args, ...arguments)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return _this.apply(context, args.concat(...arguments))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"call-apply-bind-区别\"><a href=\"#call-apply-bind-区别\" class=\"headerlink\" title=\"call, apply, bind 区别\"></a>call, apply, bind 区别</h1><p>首先说下前两者的异同。<br>相同： <code>call</code> 和 <code>apply</code> 都是为了解决改变 <code>this</code> 的指向。<br>不同：传参的方式不同，除了第一个参数外， <code>call</code> 可以接收一个参数<strong><em>列表</em></strong>， <code>apply</code> 只接受一个参数<strong><em>数组</em></strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">let anObj &#x3D; &#123;</span><br><span class=\"line\">    value: 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function getValue(name, age) &#123;</span><br><span class=\"line\">    console.log(name)</span><br><span class=\"line\">    console.log(age)</span><br><span class=\"line\">    console.log(this.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getValue.call(anObj, &#39;lixuguang&#39;, &#39;31&#39;)</span><br><span class=\"line\">getValue.apply(anObj, [&#39;lixuguang&#39;, &#39;31&#39;])</span><br></pre></td></tr></table></figure>\n<h2 id=\"模拟实现-call-和-apply\"><a href=\"#模拟实现-call-和-apply\" class=\"headerlink\" title=\"模拟实现 call 和 apply\"></a>模拟实现 <code>call</code> 和 <code>apply</code></h2><p>可以从以下几点来考虑如何实现</p>\n<ul>\n<li>不传入第一个参数，那么默认为 <code>window</code></li>\n<li>改变了 <code>this</code> 指向，让新的对象可以执行该函数。那么思路是否可以变成给新的对象添加一个函数，然后在执行完以后删除？<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">Function.prototype.myCall &#x3D; function (context) &#123;</span><br><span class=\"line\">  var context &#x3D; context || window &#x2F;&#x2F; 有入参用入参，没有给 window</span><br><span class=\"line\">  context.fn &#x3D; this  &#x2F;&#x2F; 给 context 添加一个属性，getValue.call(anObj, &#39;lixuguang&#39;, &#39;31&#39;) &#x3D;&gt; anObj.fn &#x3D; getValue</span><br><span class=\"line\">  var args &#x3D; [...arguments].slice(1) &#x2F;&#x2F; 将 context 后面的参数取出来</span><br><span class=\"line\">  var result &#x3D; context.fn(...args) &#x2F;&#x2F; getValue.call(anObj, &#39;lixuguang&#39;, &#39;31&#39;) &#x3D;&gt; anObj.fn(&#39;yck&#39;, &#39;24&#39;)</span><br><span class=\"line\">  delete context.fn &#x2F;&#x2F; 删除 fn</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n以上就是 call 的思路，apply 的实现也类似<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">Function.prototype.Apply &#x3D; function (context) &#123;</span><br><span class=\"line\">  var context &#x3D; context || window &#x2F;&#x2F; 有入参用入参，没有给 window</span><br><span class=\"line\">  context.fn &#x3D; this  &#x2F;&#x2F; 给 context 添加一个属性，getValue.call(anObj, &#39;lixuguang&#39;, &#39;31&#39;) &#x3D;&gt; anObj.fn &#x3D; getValue</span><br><span class=\"line\">  var args &#x3D; arguments[1] &#x2F;&#x2F; 将 context 后面的参数取出来</span><br><span class=\"line\">  var result &#x3D; args?context.fn(...args):context.fn() &#x2F;&#x2F; getValue.call(anObj, [&#39;lixuguang&#39;, &#39;31&#39;]) &#x3D;&gt; anObj.fn(&#39;yck&#39;, &#39;24&#39;)</span><br><span class=\"line\">  delete context.fn &#x2F;&#x2F; 删除 fn</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<code>bind</code> 和其他两个方法作用也是一致的，只是该方法会返回一个函数。并且我们可以通过 <code>bind</code> 实现柯里化。</li>\n</ul>\n<p>同样的，也来模拟实现下 <code>bind</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">Function.prototype.myBind &#x3D; function (context) &#123;</span><br><span class=\"line\">  if (typeof this !&#x3D;&#x3D; &#39;function&#39;) &#123;</span><br><span class=\"line\">    throw new TypeError(&#39;Error&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var _this &#x3D; this</span><br><span class=\"line\">  var args &#x3D; [...arguments].slice(1)</span><br><span class=\"line\">  </span><br><span class=\"line\">  return function F() &#123; &#x2F;&#x2F; 返回一个函数，这是 &#96;bind&#96; 和 &#96;call&#96; ， &#96;apply&#96; 的区别</span><br><span class=\"line\">    if (this instanceof F) &#123; &#x2F;&#x2F; 因为返回了一个函数，我们可以 new F()，所以需要判断</span><br><span class=\"line\">      return new _this(...args, ...arguments)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return _this.apply(context, args.concat(...arguments))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"前端常见知识点整理 ---- 深浅拷贝","date":"2020-01-03T00:05:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 深浅拷贝\n``` js\nlet a = {\n  age: 1\n}\nlet b = a\na.age = 2\nconsole.log(b.age) // 2\n```\n从上述例子中我们可以发现，如果给一个变量赋值一个对象，那么两者的值会是同一个引用，其中一方改变，另一方也会相应改变。\n通常在开发中我们不希望出现这样的问题，我们可以使用浅拷贝来解决这个问题。\n\n## 浅拷贝\n首先可以通过 `Object.assign` 来解决这个问题。\n``` js\n// js代码\n\nlet a = {\n  age: 1\n}\nlet b = Object.assign({}, a)\na.age = 2\nconsole.log(b.age) // => 1\n```\n当然我们也可以通过展开运算符（…）来解决\n\n``` js\nlet a = {\n  age: 1\n}\nlet b = {...a}\na.age = 2\nconsole.log(b.age) // => 1\n```\n我们还可以用很多简单的方法都能实现浅拷贝：\n``` js\narr.slice();\narr.concat();\n```\n\n通常浅拷贝就能解决大部分问题了，但是当我们遇到如下情况就需要使用到深拷贝了\n\n``` js\n// js代码\n\nlet a = {\n  age: 1,\n  jobs: {\n    first: 'FE'\n  }\n}\nlet b = {...a}\na.jobs.first = 'native'\nconsole.log(b.jobs.first) // native\n```\n浅拷贝只解决了第一层的问题，如果接下去的值中还有对象的话，那么就又回到刚开始的话题了，两者享有相同的引用。要解决这个问题，我们需要引入深拷贝。\n\n## 深拷贝\n这个问题通常可以通过 `JSON.parse(JSON.stringify(object))` 来解决，这也是最好用最简单的方法，俗称乞丐版。\n***乞丐版***\n\n``` js\n// js代码\n\nlet a = {\n    age: 1,\n    jobs: {\n        first: 'FE'\n    }\n}\nlet b = JSON.parse(JSON.stringify(a))\na.jobs.first = 'native'\nconsole.log(b.jobs.first) // FE\n```\n但是该方法也是有局限性的：\n- 会忽略 `undefined`\n- 会忽略 `symbol`\n- 不能序列化函数\n- 不能解决循环引用的对象\n\n举个栗子：\n``` js\n// js代码\n\nlet obj = {\n  a: 1,\n  b: {\n    c: 2,\n    d: 3,\n  },\n}\n\nobj.c = obj.b\nobj.e = obj.a\nobj.b.c = obj.c\nobj.b.d = obj.b\nobj.b.e = obj.b.c\n\nlet newObj = JSON.parse(JSON.stringify(obj))\nconsole.log(newObj) // => Uncaught TypeError: Converting circular structure to JSON\n```\n如果你有这么一个循环引用对象，你会发现你不能通过该方法深拷贝\n在遇到函数、 `undefined` 或者 `symbol` 的时候，该对象也不能正常的序列化\n\n``` js\n// js代码\n\nlet a = {\n  age: undefined,\n  sex: Symbol('fmale'),\n  jobs: function() {},\n  name: 'lixuguang'\n}\nlet b = JSON.parse(JSON.stringify(a))\nconsole.log(b) // => {name: \"lixuang\"}\n```\n\n你会发现在上述情况中，该方法会忽略掉函数和 `undefined` 。\n但是在通常情况下，复杂数据都是可以序列化的，所以这个函数可以解决大部分问题，并且该函数是内置函数中处理深拷贝***性能最快***的。\n\n那么是否可以解决函数和循环引用的问题呢？答案是肯定可以解决，接下来是基础版本的改造\n***基础版***\n``` js\nfunction myClone(target){\n  if(typeof target === 'object'){ // 判断传入目标是否是object类型\n    let cloneTarget = {}; // 创建克隆对象\n    for(const key in target){ // 遍历目标对象\n      cloneTarget[key] = myClone(target[key]) // 递归调用 clone 方法\n    }\n    return cloneTarget;\n  } else {\n    return target // 如果不是 object 返回\n  }\n}\n```\n写到这里已经可以帮助你应付一些面试官考察你的递归解决问题的能力。但是显然，这个深拷贝函数还是有一些问题。\n这里只考虑了对象，没有考虑数组。\n下面我们来做一个强化版的深拷贝，同时考虑对象、数组还有循环引用的问题。\n***强化版***\n``` js\nfunction myClone(target, map = new WeakMap()) { // WeakMap => 键对象弱引用， 可被垃圾回收\n  if(typeof target === 'object'){ // 判断是否是对象\n    let cloneTarget = Array.isArray(target) ? [] : {}; // 判断是是数组还是对象\n    if(map.get(target)) {\n      return target;\n    }\n\n    map.set(target, cloneTarget);\n\n    for(const key in target) {\n      cloneTarget[key] = myClone(target[key], map)\n    }\n    return cloneTarget;\n  } else {\n    return target;\n  }\n}\n\n```\n当然如果你的数据中含有以上三种情况下，可以使用 `lodash` 的深拷贝函数。\n如果你所需拷贝的对象含有内置类型并且不包含函数，可以使用 `MessageChannel`\n``` js\n// js代码\n\nfunction structuralClone(obj) {\n  return new Promise(resolve => {\n    const {port1, port2} = new MessageChannel();\n    port2.onmessage = ev => resolve(ev.data);\n    port1.postMessage(obj);\n  });\n}\n\nvar obj = {\n  a: 1, \n  b: {\n    c: b\n  }\n}\n// 注意该方法是异步的\n// 可以处理 undefined 和循环引用对象\n(async () => {\n  const clone = await structuralClone(obj)\n})()\n```\n\n深拷贝实现方式2，可以深拷贝 `function` 、`symbol`，等等，堪称终极版\n***终极版***\n\n``` js\n// js代码\n\nconst mapTag = '[object Map]';\nconst setTag = '[object Set]';\nconst arrayTag = '[object Array]';\nconst objectTag = '[object Object]';\nconst argsTag = '[object Arguments]';\n\nconst boolTag = '[object Boolean]';\nconst dateTag = '[object Date]';\nconst numberTag = '[object Number]';\nconst stringTag = '[object String]';\nconst symbolTag = '[object Symbol]';\nconst errorTag = '[object Error]';\nconst regexpTag = '[object RegExp]';\nconst funcTag = '[object Function]';\n\nconst deepTag = [mapTag, setTag, arrayTag, objectTag, argsTag];\nfunction forEach(array, iteratee) {\n  let index = -1;\n  const length = array.length;\n  while (++index < length) {\n    iteratee(array[index], index);\n  }\n  return array;\n}\n\nfunction isObject(target) {\n  const type = typeof target;\n  return target !== null && (type === 'object' || type === 'function');\n}\n\nfunction getType(target) {\n  return Object.prototype.toString.call(target);\n}\n\nfunction getInit(target) {\n  const Ctor = target.constructor;\n  return new Ctor();\n}\n\nfunction cloneSymbol(targe) {\n  return Object(Symbol.prototype.valueOf.call(targe));\n}\n\nfunction cloneReg(targe) {\n  const reFlags = /\\w*$/;\n  const result = new targe.constructor(targe.source, reFlags.exec(targe));\n  result.lastIndex = targe.lastIndex;\n  return result;\n}\n\nfunction cloneFunction(func) {\n  const bodyReg = /(?<={)(.|\\n)+(?=})/m;\n  const paramReg = /(?<=\\().+(?=\\)\\s+{)/;\n  const funcString = func.toString();\n  if (func.prototype) {\n    const param = paramReg.exec(funcString);\n    const body = bodyReg.exec(funcString);\n    if (body) {\n      if (param) {\n        const paramArr = param[0].split(',');\n        return new Function(...paramArr, body[0]);\n      } else {\n        return new Function(body[0]);\n      }\n    } else {\n      return null;\n    }\n  } else {\n    return eval(funcString);\n  }\n}\n\nfunction cloneOtherType(targe, type) {\n  const Ctor = targe.constructor;\n  switch (type) {\n    case boolTag:\n    case numberTag:\n    case stringTag:\n    case errorTag:\n    case dateTag:\n      return new Ctor(targe);\n    case regexpTag:\n      return cloneReg(targe);\n    case symbolTag:\n      return cloneSymbol(targe);\n    case funcTag:\n      return cloneFunction(targe);\n    default:\n      return null;\n  }\n}\n\nfunction clone(target, map = new WeakMap()) {\n  // 克隆原始类型\n  if (!isObject(target)) {\n    return target;\n  }\n\n  // 初始化\n  const type = getType(target);\n  let cloneTarget;\n  if (deepTag.includes(type)) {\n    cloneTarget = getInit(target, type);\n  } else {\n    return cloneOtherType(target, type);\n  }\n\n  // 防止循环引用\n  if (map.get(target)) {\n    return target;\n  }\n  map.set(target, cloneTarget);\n\n  // 克隆set\n  if (type === setTag) {\n    target.forEach(value => {\n      cloneTarget.add(clone(value));\n    });\n    return cloneTarget;\n  }\n\n  // 克隆map\n  if (type === mapTag) {\n    target.forEach((value, key) => {\n      cloneTarget.set(key, clone(value));\n    });\n    return cloneTarget;\n  }\n\n  // 克隆对象和数组\n  const keys = type === arrayTag ? undefined : Object.keys(target);\n  forEach(keys || target, (value, key) => {\n    if (keys) {\n      key = value;\n    }\n    cloneTarget[key] = clone(target[key], map);\n  });\n\n  return cloneTarget;\n}\n\n// 调用方法\nclone(target);\n```","source":"_posts/FE-guide-copy.md","raw":"---\ntitle: 前端常见知识点整理 ---- 深浅拷贝\ndate: 2020-01-03 08:05:00\ncategories: \n    - 前端技术\n    - 前端常见知识点整理\ntags: \n\t- 面试\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 深浅拷贝\n``` js\nlet a = {\n  age: 1\n}\nlet b = a\na.age = 2\nconsole.log(b.age) // 2\n```\n从上述例子中我们可以发现，如果给一个变量赋值一个对象，那么两者的值会是同一个引用，其中一方改变，另一方也会相应改变。\n通常在开发中我们不希望出现这样的问题，我们可以使用浅拷贝来解决这个问题。\n\n## 浅拷贝\n首先可以通过 `Object.assign` 来解决这个问题。\n``` js\n// js代码\n\nlet a = {\n  age: 1\n}\nlet b = Object.assign({}, a)\na.age = 2\nconsole.log(b.age) // => 1\n```\n当然我们也可以通过展开运算符（…）来解决\n\n``` js\nlet a = {\n  age: 1\n}\nlet b = {...a}\na.age = 2\nconsole.log(b.age) // => 1\n```\n我们还可以用很多简单的方法都能实现浅拷贝：\n``` js\narr.slice();\narr.concat();\n```\n\n通常浅拷贝就能解决大部分问题了，但是当我们遇到如下情况就需要使用到深拷贝了\n\n``` js\n// js代码\n\nlet a = {\n  age: 1,\n  jobs: {\n    first: 'FE'\n  }\n}\nlet b = {...a}\na.jobs.first = 'native'\nconsole.log(b.jobs.first) // native\n```\n浅拷贝只解决了第一层的问题，如果接下去的值中还有对象的话，那么就又回到刚开始的话题了，两者享有相同的引用。要解决这个问题，我们需要引入深拷贝。\n\n## 深拷贝\n这个问题通常可以通过 `JSON.parse(JSON.stringify(object))` 来解决，这也是最好用最简单的方法，俗称乞丐版。\n***乞丐版***\n\n``` js\n// js代码\n\nlet a = {\n    age: 1,\n    jobs: {\n        first: 'FE'\n    }\n}\nlet b = JSON.parse(JSON.stringify(a))\na.jobs.first = 'native'\nconsole.log(b.jobs.first) // FE\n```\n但是该方法也是有局限性的：\n- 会忽略 `undefined`\n- 会忽略 `symbol`\n- 不能序列化函数\n- 不能解决循环引用的对象\n\n举个栗子：\n``` js\n// js代码\n\nlet obj = {\n  a: 1,\n  b: {\n    c: 2,\n    d: 3,\n  },\n}\n\nobj.c = obj.b\nobj.e = obj.a\nobj.b.c = obj.c\nobj.b.d = obj.b\nobj.b.e = obj.b.c\n\nlet newObj = JSON.parse(JSON.stringify(obj))\nconsole.log(newObj) // => Uncaught TypeError: Converting circular structure to JSON\n```\n如果你有这么一个循环引用对象，你会发现你不能通过该方法深拷贝\n在遇到函数、 `undefined` 或者 `symbol` 的时候，该对象也不能正常的序列化\n\n``` js\n// js代码\n\nlet a = {\n  age: undefined,\n  sex: Symbol('fmale'),\n  jobs: function() {},\n  name: 'lixuguang'\n}\nlet b = JSON.parse(JSON.stringify(a))\nconsole.log(b) // => {name: \"lixuang\"}\n```\n\n你会发现在上述情况中，该方法会忽略掉函数和 `undefined` 。\n但是在通常情况下，复杂数据都是可以序列化的，所以这个函数可以解决大部分问题，并且该函数是内置函数中处理深拷贝***性能最快***的。\n\n那么是否可以解决函数和循环引用的问题呢？答案是肯定可以解决，接下来是基础版本的改造\n***基础版***\n``` js\nfunction myClone(target){\n  if(typeof target === 'object'){ // 判断传入目标是否是object类型\n    let cloneTarget = {}; // 创建克隆对象\n    for(const key in target){ // 遍历目标对象\n      cloneTarget[key] = myClone(target[key]) // 递归调用 clone 方法\n    }\n    return cloneTarget;\n  } else {\n    return target // 如果不是 object 返回\n  }\n}\n```\n写到这里已经可以帮助你应付一些面试官考察你的递归解决问题的能力。但是显然，这个深拷贝函数还是有一些问题。\n这里只考虑了对象，没有考虑数组。\n下面我们来做一个强化版的深拷贝，同时考虑对象、数组还有循环引用的问题。\n***强化版***\n``` js\nfunction myClone(target, map = new WeakMap()) { // WeakMap => 键对象弱引用， 可被垃圾回收\n  if(typeof target === 'object'){ // 判断是否是对象\n    let cloneTarget = Array.isArray(target) ? [] : {}; // 判断是是数组还是对象\n    if(map.get(target)) {\n      return target;\n    }\n\n    map.set(target, cloneTarget);\n\n    for(const key in target) {\n      cloneTarget[key] = myClone(target[key], map)\n    }\n    return cloneTarget;\n  } else {\n    return target;\n  }\n}\n\n```\n当然如果你的数据中含有以上三种情况下，可以使用 `lodash` 的深拷贝函数。\n如果你所需拷贝的对象含有内置类型并且不包含函数，可以使用 `MessageChannel`\n``` js\n// js代码\n\nfunction structuralClone(obj) {\n  return new Promise(resolve => {\n    const {port1, port2} = new MessageChannel();\n    port2.onmessage = ev => resolve(ev.data);\n    port1.postMessage(obj);\n  });\n}\n\nvar obj = {\n  a: 1, \n  b: {\n    c: b\n  }\n}\n// 注意该方法是异步的\n// 可以处理 undefined 和循环引用对象\n(async () => {\n  const clone = await structuralClone(obj)\n})()\n```\n\n深拷贝实现方式2，可以深拷贝 `function` 、`symbol`，等等，堪称终极版\n***终极版***\n\n``` js\n// js代码\n\nconst mapTag = '[object Map]';\nconst setTag = '[object Set]';\nconst arrayTag = '[object Array]';\nconst objectTag = '[object Object]';\nconst argsTag = '[object Arguments]';\n\nconst boolTag = '[object Boolean]';\nconst dateTag = '[object Date]';\nconst numberTag = '[object Number]';\nconst stringTag = '[object String]';\nconst symbolTag = '[object Symbol]';\nconst errorTag = '[object Error]';\nconst regexpTag = '[object RegExp]';\nconst funcTag = '[object Function]';\n\nconst deepTag = [mapTag, setTag, arrayTag, objectTag, argsTag];\nfunction forEach(array, iteratee) {\n  let index = -1;\n  const length = array.length;\n  while (++index < length) {\n    iteratee(array[index], index);\n  }\n  return array;\n}\n\nfunction isObject(target) {\n  const type = typeof target;\n  return target !== null && (type === 'object' || type === 'function');\n}\n\nfunction getType(target) {\n  return Object.prototype.toString.call(target);\n}\n\nfunction getInit(target) {\n  const Ctor = target.constructor;\n  return new Ctor();\n}\n\nfunction cloneSymbol(targe) {\n  return Object(Symbol.prototype.valueOf.call(targe));\n}\n\nfunction cloneReg(targe) {\n  const reFlags = /\\w*$/;\n  const result = new targe.constructor(targe.source, reFlags.exec(targe));\n  result.lastIndex = targe.lastIndex;\n  return result;\n}\n\nfunction cloneFunction(func) {\n  const bodyReg = /(?<={)(.|\\n)+(?=})/m;\n  const paramReg = /(?<=\\().+(?=\\)\\s+{)/;\n  const funcString = func.toString();\n  if (func.prototype) {\n    const param = paramReg.exec(funcString);\n    const body = bodyReg.exec(funcString);\n    if (body) {\n      if (param) {\n        const paramArr = param[0].split(',');\n        return new Function(...paramArr, body[0]);\n      } else {\n        return new Function(body[0]);\n      }\n    } else {\n      return null;\n    }\n  } else {\n    return eval(funcString);\n  }\n}\n\nfunction cloneOtherType(targe, type) {\n  const Ctor = targe.constructor;\n  switch (type) {\n    case boolTag:\n    case numberTag:\n    case stringTag:\n    case errorTag:\n    case dateTag:\n      return new Ctor(targe);\n    case regexpTag:\n      return cloneReg(targe);\n    case symbolTag:\n      return cloneSymbol(targe);\n    case funcTag:\n      return cloneFunction(targe);\n    default:\n      return null;\n  }\n}\n\nfunction clone(target, map = new WeakMap()) {\n  // 克隆原始类型\n  if (!isObject(target)) {\n    return target;\n  }\n\n  // 初始化\n  const type = getType(target);\n  let cloneTarget;\n  if (deepTag.includes(type)) {\n    cloneTarget = getInit(target, type);\n  } else {\n    return cloneOtherType(target, type);\n  }\n\n  // 防止循环引用\n  if (map.get(target)) {\n    return target;\n  }\n  map.set(target, cloneTarget);\n\n  // 克隆set\n  if (type === setTag) {\n    target.forEach(value => {\n      cloneTarget.add(clone(value));\n    });\n    return cloneTarget;\n  }\n\n  // 克隆map\n  if (type === mapTag) {\n    target.forEach((value, key) => {\n      cloneTarget.set(key, clone(value));\n    });\n    return cloneTarget;\n  }\n\n  // 克隆对象和数组\n  const keys = type === arrayTag ? undefined : Object.keys(target);\n  forEach(keys || target, (value, key) => {\n    if (keys) {\n      key = value;\n    }\n    cloneTarget[key] = clone(target[key], map);\n  });\n\n  return cloneTarget;\n}\n\n// 调用方法\nclone(target);\n```","slug":"FE-guide-copy","published":1,"updated":"2020-04-02T03:20:12.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grx00014ooa61jda4suh","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"深浅拷贝\"><a href=\"#深浅拷贝\" class=\"headerlink\" title=\"深浅拷贝\"></a>深浅拷贝</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  age: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a</span><br><span class=\"line\">a.age = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.age) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>从上述例子中我们可以发现，如果给一个变量赋值一个对象，那么两者的值会是同一个引用，其中一方改变，另一方也会相应改变。<br>通常在开发中我们不希望出现这样的问题，我们可以使用浅拷贝来解决这个问题。</p>\n<h2 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h2><p>首先可以通过 <code>Object.assign</code> 来解决这个问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  age: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, a)</span><br><span class=\"line\">a.age = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.age) <span class=\"comment\">// =&gt; 1</span></span><br></pre></td></tr></table></figure>\n<p>当然我们也可以通过展开运算符（…）来解决</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  age: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123;...a&#125;</span><br><span class=\"line\">a.age = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.age) <span class=\"comment\">// =&gt; 1</span></span><br></pre></td></tr></table></figure>\n<p>我们还可以用很多简单的方法都能实现浅拷贝：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.slice();</span><br><span class=\"line\">arr.concat();</span><br></pre></td></tr></table></figure>\n\n<p>通常浅拷贝就能解决大部分问题了，但是当我们遇到如下情况就需要使用到深拷贝了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  age: <span class=\"number\">1</span>,</span><br><span class=\"line\">  jobs: &#123;</span><br><span class=\"line\">    first: <span class=\"string\">'FE'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123;...a&#125;</span><br><span class=\"line\">a.jobs.first = <span class=\"string\">'native'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.jobs.first) <span class=\"comment\">// native</span></span><br></pre></td></tr></table></figure>\n<p>浅拷贝只解决了第一层的问题，如果接下去的值中还有对象的话，那么就又回到刚开始的话题了，两者享有相同的引用。要解决这个问题，我们需要引入深拷贝。</p>\n<h2 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h2><p>这个问题通常可以通过 <code>JSON.parse(JSON.stringify(object))</code> 来解决，这也是最好用最简单的方法，俗称乞丐版。<br><strong><em>乞丐版</em></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">    age: <span class=\"number\">1</span>,</span><br><span class=\"line\">    jobs: &#123;</span><br><span class=\"line\">        first: <span class=\"string\">'FE'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(a))</span><br><span class=\"line\">a.jobs.first = <span class=\"string\">'native'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.jobs.first) <span class=\"comment\">// FE</span></span><br></pre></td></tr></table></figure>\n<p>但是该方法也是有局限性的：</p>\n<ul>\n<li>会忽略 <code>undefined</code></li>\n<li>会忽略 <code>symbol</code></li>\n<li>不能序列化函数</li>\n<li>不能解决循环引用的对象</li>\n</ul>\n<p>举个栗子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">1</span>,</span><br><span class=\"line\">  b: &#123;</span><br><span class=\"line\">    c: <span class=\"number\">2</span>,</span><br><span class=\"line\">    d: <span class=\"number\">3</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.c = obj.b</span><br><span class=\"line\">obj.e = obj.a</span><br><span class=\"line\">obj.b.c = obj.c</span><br><span class=\"line\">obj.b.d = obj.b</span><br><span class=\"line\">obj.b.e = obj.b.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newObj = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj) <span class=\"comment\">// =&gt; Uncaught TypeError: Converting circular structure to JSON</span></span><br></pre></td></tr></table></figure>\n<p>如果你有这么一个循环引用对象，你会发现你不能通过该方法深拷贝<br>在遇到函数、 <code>undefined</code> 或者 <code>symbol</code> 的时候，该对象也不能正常的序列化</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  age: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">  sex: <span class=\"built_in\">Symbol</span>(<span class=\"string\">'fmale'</span>),</span><br><span class=\"line\">  jobs: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">  name: <span class=\"string\">'lixuguang'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(a))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// =&gt; &#123;name: \"lixuang\"&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>你会发现在上述情况中，该方法会忽略掉函数和 <code>undefined</code> 。<br>但是在通常情况下，复杂数据都是可以序列化的，所以这个函数可以解决大部分问题，并且该函数是内置函数中处理深拷贝<strong><em>性能最快</em></strong>的。</p>\n<p>那么是否可以解决函数和循环引用的问题呢？答案是肯定可以解决，接下来是基础版本的改造<br><strong><em>基础版</em></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myClone</span>(<span class=\"params\">target</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> target === <span class=\"string\">'object'</span>)&#123; <span class=\"comment\">// 判断传入目标是否是object类型</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cloneTarget = &#123;&#125;; <span class=\"comment\">// 创建克隆对象</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> target)&#123; <span class=\"comment\">// 遍历目标对象</span></span><br><span class=\"line\">      cloneTarget[key] = myClone(target[key]) <span class=\"comment\">// 递归调用 clone 方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cloneTarget;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target <span class=\"comment\">// 如果不是 object 返回</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>写到这里已经可以帮助你应付一些面试官考察你的递归解决问题的能力。但是显然，这个深拷贝函数还是有一些问题。<br>这里只考虑了对象，没有考虑数组。<br>下面我们来做一个强化版的深拷贝，同时考虑对象、数组还有循环引用的问题。<br><strong><em>强化版</em></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myClone</span>(<span class=\"params\">target, map = new WeakMap(</span>)) </span>&#123; <span class=\"comment\">// WeakMap =&gt; 键对象弱引用， 可被垃圾回收</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> target === <span class=\"string\">'object'</span>)&#123; <span class=\"comment\">// 判断是否是对象</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cloneTarget = <span class=\"built_in\">Array</span>.isArray(target) ? [] : &#123;&#125;; <span class=\"comment\">// 判断是是数组还是对象</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(map.get(target)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    map.set(target, cloneTarget);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">      cloneTarget[key] = myClone(target[key], map)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cloneTarget;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然如果你的数据中含有以上三种情况下，可以使用 <code>lodash</code> 的深拷贝函数。<br>如果你所需拷贝的对象含有内置类型并且不包含函数，可以使用 <code>MessageChannel</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">structuralClone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;port1, port2&#125; = <span class=\"keyword\">new</span> MessageChannel();</span><br><span class=\"line\">    port2.onmessage = <span class=\"function\"><span class=\"params\">ev</span> =&gt;</span> resolve(ev.data);</span><br><span class=\"line\">    port1.postMessage(obj);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">1</span>, </span><br><span class=\"line\">  b: &#123;</span><br><span class=\"line\">    c: b</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 注意该方法是异步的</span></span><br><span class=\"line\"><span class=\"comment\">// 可以处理 undefined 和循环引用对象</span></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> clone = <span class=\"keyword\">await</span> structuralClone(obj)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<p>深拷贝实现方式2，可以深拷贝 <code>function</code> 、<code>symbol</code>，等等，堪称终极版<br><strong><em>终极版</em></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mapTag = <span class=\"string\">'[object Map]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> setTag = <span class=\"string\">'[object Set]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayTag = <span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> objectTag = <span class=\"string\">'[object Object]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> argsTag = <span class=\"string\">'[object Arguments]'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> boolTag = <span class=\"string\">'[object Boolean]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> dateTag = <span class=\"string\">'[object Date]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> numberTag = <span class=\"string\">'[object Number]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> stringTag = <span class=\"string\">'[object String]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> symbolTag = <span class=\"string\">'[object Symbol]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> errorTag = <span class=\"string\">'[object Error]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> regexpTag = <span class=\"string\">'[object RegExp]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> funcTag = <span class=\"string\">'[object Function]'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> deepTag = [mapTag, setTag, arrayTag, objectTag, argsTag];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">forEach</span>(<span class=\"params\">array, iteratee</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> length = array.length;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (++index &lt; length) &#123;</span><br><span class=\"line\">    iteratee(array[index], index);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> type = <span class=\"keyword\">typeof</span> target;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> target !== <span class=\"literal\">null</span> &amp;&amp; (type === <span class=\"string\">'object'</span> || type === <span class=\"string\">'function'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getType</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(target);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInit</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> Ctor = target.constructor;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Ctor();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneSymbol</span>(<span class=\"params\">targe</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>(<span class=\"built_in\">Symbol</span>.prototype.valueOf.call(targe));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneReg</span>(<span class=\"params\">targe</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reFlags = <span class=\"regexp\">/\\w*$/</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = <span class=\"keyword\">new</span> targe.constructor(targe.source, reFlags.exec(targe));</span><br><span class=\"line\">  result.lastIndex = targe.lastIndex;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneFunction</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> bodyReg = <span class=\"regexp\">/(?&lt;=&#123;)(.|\\n)+(?=&#125;)/m</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> paramReg = <span class=\"regexp\">/(?&lt;=\\().+(?=\\)\\s+&#123;)/</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> funcString = func.toString();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (func.prototype) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> param = paramReg.exec(funcString);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> body = bodyReg.exec(funcString);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (body) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (param) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> paramArr = param[<span class=\"number\">0</span>].split(<span class=\"string\">','</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(...paramArr, body[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(body[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">eval</span>(funcString);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneOtherType</span>(<span class=\"params\">targe, type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> Ctor = targe.constructor;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> boolTag:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> numberTag:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> stringTag:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> errorTag:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> dateTag:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Ctor(targe);</span><br><span class=\"line\">    <span class=\"keyword\">case</span> regexpTag:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cloneReg(targe);</span><br><span class=\"line\">    <span class=\"keyword\">case</span> symbolTag:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cloneSymbol(targe);</span><br><span class=\"line\">    <span class=\"keyword\">case</span> funcTag:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cloneFunction(targe);</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">target, map = new WeakMap(</span>)) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 克隆原始类型</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isObject(target)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> type = getType(target);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cloneTarget;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (deepTag.includes(type)) &#123;</span><br><span class=\"line\">    cloneTarget = getInit(target, type);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cloneOtherType(target, type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 防止循环引用</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (map.get(target)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  map.set(target, cloneTarget);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 克隆set</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (type === setTag) &#123;</span><br><span class=\"line\">    target.forEach(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      cloneTarget.add(clone(value));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cloneTarget;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 克隆map</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (type === mapTag) &#123;</span><br><span class=\"line\">    target.forEach(<span class=\"function\">(<span class=\"params\">value, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      cloneTarget.set(key, clone(value));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cloneTarget;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 克隆对象和数组</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = type === arrayTag ? <span class=\"literal\">undefined</span> : <span class=\"built_in\">Object</span>.keys(target);</span><br><span class=\"line\">  forEach(keys || target, (value, key) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (keys) &#123;</span><br><span class=\"line\">      key = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cloneTarget[key] = clone(target[key], map);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> cloneTarget;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">clone(target);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"深浅拷贝\"><a href=\"#深浅拷贝\" class=\"headerlink\" title=\"深浅拷贝\"></a>深浅拷贝</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  age: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a</span><br><span class=\"line\">a.age = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.age) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>从上述例子中我们可以发现，如果给一个变量赋值一个对象，那么两者的值会是同一个引用，其中一方改变，另一方也会相应改变。<br>通常在开发中我们不希望出现这样的问题，我们可以使用浅拷贝来解决这个问题。</p>\n<h2 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h2><p>首先可以通过 <code>Object.assign</code> 来解决这个问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  age: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, a)</span><br><span class=\"line\">a.age = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.age) <span class=\"comment\">// =&gt; 1</span></span><br></pre></td></tr></table></figure>\n<p>当然我们也可以通过展开运算符（…）来解决</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  age: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123;...a&#125;</span><br><span class=\"line\">a.age = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.age) <span class=\"comment\">// =&gt; 1</span></span><br></pre></td></tr></table></figure>\n<p>我们还可以用很多简单的方法都能实现浅拷贝：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.slice();</span><br><span class=\"line\">arr.concat();</span><br></pre></td></tr></table></figure>\n\n<p>通常浅拷贝就能解决大部分问题了，但是当我们遇到如下情况就需要使用到深拷贝了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  age: <span class=\"number\">1</span>,</span><br><span class=\"line\">  jobs: &#123;</span><br><span class=\"line\">    first: <span class=\"string\">'FE'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = &#123;...a&#125;</span><br><span class=\"line\">a.jobs.first = <span class=\"string\">'native'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.jobs.first) <span class=\"comment\">// native</span></span><br></pre></td></tr></table></figure>\n<p>浅拷贝只解决了第一层的问题，如果接下去的值中还有对象的话，那么就又回到刚开始的话题了，两者享有相同的引用。要解决这个问题，我们需要引入深拷贝。</p>\n<h2 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h2><p>这个问题通常可以通过 <code>JSON.parse(JSON.stringify(object))</code> 来解决，这也是最好用最简单的方法，俗称乞丐版。<br><strong><em>乞丐版</em></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">    age: <span class=\"number\">1</span>,</span><br><span class=\"line\">    jobs: &#123;</span><br><span class=\"line\">        first: <span class=\"string\">'FE'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(a))</span><br><span class=\"line\">a.jobs.first = <span class=\"string\">'native'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.jobs.first) <span class=\"comment\">// FE</span></span><br></pre></td></tr></table></figure>\n<p>但是该方法也是有局限性的：</p>\n<ul>\n<li>会忽略 <code>undefined</code></li>\n<li>会忽略 <code>symbol</code></li>\n<li>不能序列化函数</li>\n<li>不能解决循环引用的对象</li>\n</ul>\n<p>举个栗子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">1</span>,</span><br><span class=\"line\">  b: &#123;</span><br><span class=\"line\">    c: <span class=\"number\">2</span>,</span><br><span class=\"line\">    d: <span class=\"number\">3</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.c = obj.b</span><br><span class=\"line\">obj.e = obj.a</span><br><span class=\"line\">obj.b.c = obj.c</span><br><span class=\"line\">obj.b.d = obj.b</span><br><span class=\"line\">obj.b.e = obj.b.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newObj = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newObj) <span class=\"comment\">// =&gt; Uncaught TypeError: Converting circular structure to JSON</span></span><br></pre></td></tr></table></figure>\n<p>如果你有这么一个循环引用对象，你会发现你不能通过该方法深拷贝<br>在遇到函数、 <code>undefined</code> 或者 <code>symbol</code> 的时候，该对象也不能正常的序列化</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  age: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">  sex: <span class=\"built_in\">Symbol</span>(<span class=\"string\">'fmale'</span>),</span><br><span class=\"line\">  jobs: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">  name: <span class=\"string\">'lixuguang'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(a))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// =&gt; &#123;name: \"lixuang\"&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>你会发现在上述情况中，该方法会忽略掉函数和 <code>undefined</code> 。<br>但是在通常情况下，复杂数据都是可以序列化的，所以这个函数可以解决大部分问题，并且该函数是内置函数中处理深拷贝<strong><em>性能最快</em></strong>的。</p>\n<p>那么是否可以解决函数和循环引用的问题呢？答案是肯定可以解决，接下来是基础版本的改造<br><strong><em>基础版</em></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myClone</span>(<span class=\"params\">target</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> target === <span class=\"string\">'object'</span>)&#123; <span class=\"comment\">// 判断传入目标是否是object类型</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cloneTarget = &#123;&#125;; <span class=\"comment\">// 创建克隆对象</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> target)&#123; <span class=\"comment\">// 遍历目标对象</span></span><br><span class=\"line\">      cloneTarget[key] = myClone(target[key]) <span class=\"comment\">// 递归调用 clone 方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cloneTarget;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target <span class=\"comment\">// 如果不是 object 返回</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>写到这里已经可以帮助你应付一些面试官考察你的递归解决问题的能力。但是显然，这个深拷贝函数还是有一些问题。<br>这里只考虑了对象，没有考虑数组。<br>下面我们来做一个强化版的深拷贝，同时考虑对象、数组还有循环引用的问题。<br><strong><em>强化版</em></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myClone</span>(<span class=\"params\">target, map = new WeakMap(</span>)) </span>&#123; <span class=\"comment\">// WeakMap =&gt; 键对象弱引用， 可被垃圾回收</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> target === <span class=\"string\">'object'</span>)&#123; <span class=\"comment\">// 判断是否是对象</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cloneTarget = <span class=\"built_in\">Array</span>.isArray(target) ? [] : &#123;&#125;; <span class=\"comment\">// 判断是是数组还是对象</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(map.get(target)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    map.set(target, cloneTarget);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">      cloneTarget[key] = myClone(target[key], map)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cloneTarget;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然如果你的数据中含有以上三种情况下，可以使用 <code>lodash</code> 的深拷贝函数。<br>如果你所需拷贝的对象含有内置类型并且不包含函数，可以使用 <code>MessageChannel</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">structuralClone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;port1, port2&#125; = <span class=\"keyword\">new</span> MessageChannel();</span><br><span class=\"line\">    port2.onmessage = <span class=\"function\"><span class=\"params\">ev</span> =&gt;</span> resolve(ev.data);</span><br><span class=\"line\">    port1.postMessage(obj);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">1</span>, </span><br><span class=\"line\">  b: &#123;</span><br><span class=\"line\">    c: b</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 注意该方法是异步的</span></span><br><span class=\"line\"><span class=\"comment\">// 可以处理 undefined 和循环引用对象</span></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> clone = <span class=\"keyword\">await</span> structuralClone(obj)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<p>深拷贝实现方式2，可以深拷贝 <code>function</code> 、<code>symbol</code>，等等，堪称终极版<br><strong><em>终极版</em></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mapTag = <span class=\"string\">'[object Map]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> setTag = <span class=\"string\">'[object Set]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayTag = <span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> objectTag = <span class=\"string\">'[object Object]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> argsTag = <span class=\"string\">'[object Arguments]'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> boolTag = <span class=\"string\">'[object Boolean]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> dateTag = <span class=\"string\">'[object Date]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> numberTag = <span class=\"string\">'[object Number]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> stringTag = <span class=\"string\">'[object String]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> symbolTag = <span class=\"string\">'[object Symbol]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> errorTag = <span class=\"string\">'[object Error]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> regexpTag = <span class=\"string\">'[object RegExp]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> funcTag = <span class=\"string\">'[object Function]'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> deepTag = [mapTag, setTag, arrayTag, objectTag, argsTag];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">forEach</span>(<span class=\"params\">array, iteratee</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> length = array.length;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (++index &lt; length) &#123;</span><br><span class=\"line\">    iteratee(array[index], index);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> type = <span class=\"keyword\">typeof</span> target;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> target !== <span class=\"literal\">null</span> &amp;&amp; (type === <span class=\"string\">'object'</span> || type === <span class=\"string\">'function'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getType</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(target);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInit</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> Ctor = target.constructor;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Ctor();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneSymbol</span>(<span class=\"params\">targe</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>(<span class=\"built_in\">Symbol</span>.prototype.valueOf.call(targe));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneReg</span>(<span class=\"params\">targe</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reFlags = <span class=\"regexp\">/\\w*$/</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = <span class=\"keyword\">new</span> targe.constructor(targe.source, reFlags.exec(targe));</span><br><span class=\"line\">  result.lastIndex = targe.lastIndex;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneFunction</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> bodyReg = <span class=\"regexp\">/(?&lt;=&#123;)(.|\\n)+(?=&#125;)/m</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> paramReg = <span class=\"regexp\">/(?&lt;=\\().+(?=\\)\\s+&#123;)/</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> funcString = func.toString();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (func.prototype) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> param = paramReg.exec(funcString);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> body = bodyReg.exec(funcString);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (body) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (param) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> paramArr = param[<span class=\"number\">0</span>].split(<span class=\"string\">','</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(...paramArr, body[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(body[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">eval</span>(funcString);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneOtherType</span>(<span class=\"params\">targe, type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> Ctor = targe.constructor;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> boolTag:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> numberTag:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> stringTag:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> errorTag:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> dateTag:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Ctor(targe);</span><br><span class=\"line\">    <span class=\"keyword\">case</span> regexpTag:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cloneReg(targe);</span><br><span class=\"line\">    <span class=\"keyword\">case</span> symbolTag:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cloneSymbol(targe);</span><br><span class=\"line\">    <span class=\"keyword\">case</span> funcTag:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cloneFunction(targe);</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">target, map = new WeakMap(</span>)) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 克隆原始类型</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isObject(target)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> type = getType(target);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cloneTarget;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (deepTag.includes(type)) &#123;</span><br><span class=\"line\">    cloneTarget = getInit(target, type);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cloneOtherType(target, type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 防止循环引用</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (map.get(target)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  map.set(target, cloneTarget);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 克隆set</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (type === setTag) &#123;</span><br><span class=\"line\">    target.forEach(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      cloneTarget.add(clone(value));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cloneTarget;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 克隆map</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (type === mapTag) &#123;</span><br><span class=\"line\">    target.forEach(<span class=\"function\">(<span class=\"params\">value, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      cloneTarget.set(key, clone(value));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cloneTarget;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 克隆对象和数组</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = type === arrayTag ? <span class=\"literal\">undefined</span> : <span class=\"built_in\">Object</span>.keys(target);</span><br><span class=\"line\">  forEach(keys || target, (value, key) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (keys) &#123;</span><br><span class=\"line\">      key = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cloneTarget[key] = clone(target[key], map);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> cloneTarget;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">clone(target);</span><br></pre></td></tr></table></figure>"},{"title":"前端常见知识点整理 ---- 柯里化 currying","date":"2020-01-05T09:59:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 定义 \n柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。\n\n柯里化，可以理解为***提前接收部分参数，延迟执行，不立即输出结果，而是返回一个接受剩余参数的函数***。因为这样的特性，也被称为部分计算函数。\n\n通俗易懂的解释：用***闭包***把参数保存起来，当参数的数量足够执行函数了，就开始执行函数。柯里化，是一个逐步接收参数的过程。在接下来的剖析中，你会深刻体会到这一点。\n\n```\n// js代码\n\nfunction currying(fn){\n    var allArgs = [];\n\n    return function next(){\n        var args = [].slice.call(arguments); // 拆成数组元素\n\n        if(args.length > 0){\n            allArgs = allArgs.concat(args);\n            return next;\n        }else{\n            return fn.apply(null, allArgs);\n        }\n    } \n}\n```\n我们来一个简单的实例验证一下：\n\n```\n// js代码\n\nvar add = currying(function(){\n    var sum = 0;\n    for(var i = 0; i < arguments.length; i++){\n        sum += arguments[i];\n    }\n    return sum;\n});\n\nadd(1)(2, 3)(4)() // => 10\n```\n\n# 应用场景\n## 参数复用\n```\n// js代码\n\nfunction getUrl(domain, protocol, path) {\n\treturn protocol + \"://\" + domain + \"/\" + path;\n}\n\nvar page1 = getUrl('http', 'lixuguang.github.io', 'page1.html');\nvar page2 = getUrl('http', 'lixuguang.github.io', 'page2.html');\n```\n我们使用currying来简化它：\n\n```\nvar conardliSite = currying(getUrl)\nvar page1 = conardliSite('page1.html')('http', 'lixuguang.github.io')(); \n```","source":"_posts/FE-guide-currying.md","raw":"---\ntitle: 前端常见知识点整理 ---- 柯里化 currying\ndate: 2020-01-05 17:59:22\ncategories: \n    - 前端技术\n    - 前端常见知识点整理\ntags: \n\t- 面试\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 定义 \n柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。\n\n柯里化，可以理解为***提前接收部分参数，延迟执行，不立即输出结果，而是返回一个接受剩余参数的函数***。因为这样的特性，也被称为部分计算函数。\n\n通俗易懂的解释：用***闭包***把参数保存起来，当参数的数量足够执行函数了，就开始执行函数。柯里化，是一个逐步接收参数的过程。在接下来的剖析中，你会深刻体会到这一点。\n\n```\n// js代码\n\nfunction currying(fn){\n    var allArgs = [];\n\n    return function next(){\n        var args = [].slice.call(arguments); // 拆成数组元素\n\n        if(args.length > 0){\n            allArgs = allArgs.concat(args);\n            return next;\n        }else{\n            return fn.apply(null, allArgs);\n        }\n    } \n}\n```\n我们来一个简单的实例验证一下：\n\n```\n// js代码\n\nvar add = currying(function(){\n    var sum = 0;\n    for(var i = 0; i < arguments.length; i++){\n        sum += arguments[i];\n    }\n    return sum;\n});\n\nadd(1)(2, 3)(4)() // => 10\n```\n\n# 应用场景\n## 参数复用\n```\n// js代码\n\nfunction getUrl(domain, protocol, path) {\n\treturn protocol + \"://\" + domain + \"/\" + path;\n}\n\nvar page1 = getUrl('http', 'lixuguang.github.io', 'page1.html');\nvar page2 = getUrl('http', 'lixuguang.github.io', 'page2.html');\n```\n我们使用currying来简化它：\n\n```\nvar conardliSite = currying(getUrl)\nvar page1 = conardliSite('page1.html')('http', 'lixuguang.github.io')(); \n```","slug":"FE-guide-currying","published":1,"updated":"2020-04-02T03:20:12.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grx20018ooa6c2pkfhyn","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h1><p>柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。</p>\n<p>柯里化，可以理解为<strong><em>提前接收部分参数，延迟执行，不立即输出结果，而是返回一个接受剩余参数的函数</em></strong>。因为这样的特性，也被称为部分计算函数。</p>\n<p>通俗易懂的解释：用<strong><em>闭包</em></strong>把参数保存起来，当参数的数量足够执行函数了，就开始执行函数。柯里化，是一个逐步接收参数的过程。在接下来的剖析中，你会深刻体会到这一点。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function currying(fn)&#123;</span><br><span class=\"line\">    var allArgs &#x3D; [];</span><br><span class=\"line\"></span><br><span class=\"line\">    return function next()&#123;</span><br><span class=\"line\">        var args &#x3D; [].slice.call(arguments); &#x2F;&#x2F; 拆成数组元素</span><br><span class=\"line\"></span><br><span class=\"line\">        if(args.length &gt; 0)&#123;</span><br><span class=\"line\">            allArgs &#x3D; allArgs.concat(args);</span><br><span class=\"line\">            return next;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            return fn.apply(null, allArgs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们来一个简单的实例验证一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">var add &#x3D; currying(function()&#123;</span><br><span class=\"line\">    var sum &#x3D; 0;</span><br><span class=\"line\">    for(var i &#x3D; 0; i &lt; arguments.length; i++)&#123;</span><br><span class=\"line\">        sum +&#x3D; arguments[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return sum;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">add(1)(2, 3)(4)() &#x2F;&#x2F; &#x3D;&gt; 10</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h1><h2 id=\"参数复用\"><a href=\"#参数复用\" class=\"headerlink\" title=\"参数复用\"></a>参数复用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function getUrl(domain, protocol, path) &#123;</span><br><span class=\"line\">\treturn protocol + &quot;:&#x2F;&#x2F;&quot; + domain + &quot;&#x2F;&quot; + path;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var page1 &#x3D; getUrl(&#39;http&#39;, &#39;lixuguang.github.io&#39;, &#39;page1.html&#39;);</span><br><span class=\"line\">var page2 &#x3D; getUrl(&#39;http&#39;, &#39;lixuguang.github.io&#39;, &#39;page2.html&#39;);</span><br></pre></td></tr></table></figure>\n<p>我们使用currying来简化它：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var conardliSite &#x3D; currying(getUrl)</span><br><span class=\"line\">var page1 &#x3D; conardliSite(&#39;page1.html&#39;)(&#39;http&#39;, &#39;lixuguang.github.io&#39;)();</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h1><p>柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。</p>\n<p>柯里化，可以理解为<strong><em>提前接收部分参数，延迟执行，不立即输出结果，而是返回一个接受剩余参数的函数</em></strong>。因为这样的特性，也被称为部分计算函数。</p>\n<p>通俗易懂的解释：用<strong><em>闭包</em></strong>把参数保存起来，当参数的数量足够执行函数了，就开始执行函数。柯里化，是一个逐步接收参数的过程。在接下来的剖析中，你会深刻体会到这一点。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function currying(fn)&#123;</span><br><span class=\"line\">    var allArgs &#x3D; [];</span><br><span class=\"line\"></span><br><span class=\"line\">    return function next()&#123;</span><br><span class=\"line\">        var args &#x3D; [].slice.call(arguments); &#x2F;&#x2F; 拆成数组元素</span><br><span class=\"line\"></span><br><span class=\"line\">        if(args.length &gt; 0)&#123;</span><br><span class=\"line\">            allArgs &#x3D; allArgs.concat(args);</span><br><span class=\"line\">            return next;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            return fn.apply(null, allArgs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们来一个简单的实例验证一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">var add &#x3D; currying(function()&#123;</span><br><span class=\"line\">    var sum &#x3D; 0;</span><br><span class=\"line\">    for(var i &#x3D; 0; i &lt; arguments.length; i++)&#123;</span><br><span class=\"line\">        sum +&#x3D; arguments[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return sum;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">add(1)(2, 3)(4)() &#x2F;&#x2F; &#x3D;&gt; 10</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h1><h2 id=\"参数复用\"><a href=\"#参数复用\" class=\"headerlink\" title=\"参数复用\"></a>参数复用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function getUrl(domain, protocol, path) &#123;</span><br><span class=\"line\">\treturn protocol + &quot;:&#x2F;&#x2F;&quot; + domain + &quot;&#x2F;&quot; + path;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var page1 &#x3D; getUrl(&#39;http&#39;, &#39;lixuguang.github.io&#39;, &#39;page1.html&#39;);</span><br><span class=\"line\">var page2 &#x3D; getUrl(&#39;http&#39;, &#39;lixuguang.github.io&#39;, &#39;page2.html&#39;);</span><br></pre></td></tr></table></figure>\n<p>我们使用currying来简化它：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var conardliSite &#x3D; currying(getUrl)</span><br><span class=\"line\">var page1 &#x3D; conardliSite(&#39;page1.html&#39;)(&#39;http&#39;, &#39;lixuguang.github.io&#39;)();</span><br></pre></td></tr></table></figure>"},{"title":"前端常见知识点整理 ---- 闭包","date":"2020-01-02T13:32:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 闭包`Closure` \n闭包的定义很简单：函数 `A` 返回了一个函数 `B` ，并且函数 `B` 中使用了函数 `A` 的变量，函数 `B` 就被称为闭包。\n\n```\n// js代码\n\nfunction A() {\n  let a = 1\n  function B() {\n      console.log(a)\n  }\n  return B\n}\n```\n你是否会疑惑，为什么函数 `A` 已经弹出调用栈了，为什么函数 `B` 还能引用到函数 `A` 中的变量。因为函数 `A` 中的变量这时候是存储在堆上的。现在的 `JS` 引擎可以通过***逃逸分析***辨别出哪些变量需要存储在堆上，哪些需要存储在栈上。\n\n经典面试题，循环中使用闭包解决 `var` 定义函数的问题\n\n```\n// js代码\n\nfor ( var i=1; i<=5; i++) {\n\tsetTimeout( function timer() {\n\t\tconsole.log( i );\n\t}, i*1000 );\n}\n```\n首先因为 `setTimeout` 是个异步函数，所有会先把循环全部执行完毕，这时候 `i` 就是 6 了，所以会输出一堆 6。\n\n解决办法两种，第一种使用闭包\n\n```\n// js代码\n\nfor (var i = 1; i <= 5; i++) {\n  (function(j) {\n    setTimeout(function timer() {\n      console.log(j);\n    }, j * 1000);\n  })(i);\n}\n```\n第二种就是使用 `setTimeout` 的第三个参数(附加参数，传给 `setTimeout` 中的函数)\n\n```\n// js代码\n\nfor ( var i=1; i<=5; i++) {\n\tsetTimeout( function timer(j) {\n\t\tconsole.log( j );\n\t}, i*1000, i);\n}\n```\n\n第三种就是使用 `let` 定义 `i` 了\n```\n// js代码\n\nfor ( let i=1; i<=5; i++) {\n\tsetTimeout( function timer() {\n\t\tconsole.log( i );\n\t}, i*1000 );\n}\n```\n因为对于 `let` 来说，他会创建一个块级作用域，相当于\n\n```\n// js代码\n\n{ // 形成块级作用域\n  let i = 0\n  {\n    let ii = i\n    setTimeout( function timer() {\n        console.log( ii );\n    }, i*1000 );\n  }\n  i++\n  {\n    let ii = i\n  }\n  i++\n  {\n    let ii = i\n  }\n  ...\n}\n```","source":"_posts/FE-guide-Closure.md","raw":"---\ntitle: 前端常见知识点整理 ---- 闭包\ndate: 2020-01-02 21:32:22\ncategories: \n  - 前端技术\n  - 前端常见知识点整理\ntags: \n\t- 面试\n\t- 知识点\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 闭包`Closure` \n闭包的定义很简单：函数 `A` 返回了一个函数 `B` ，并且函数 `B` 中使用了函数 `A` 的变量，函数 `B` 就被称为闭包。\n\n```\n// js代码\n\nfunction A() {\n  let a = 1\n  function B() {\n      console.log(a)\n  }\n  return B\n}\n```\n你是否会疑惑，为什么函数 `A` 已经弹出调用栈了，为什么函数 `B` 还能引用到函数 `A` 中的变量。因为函数 `A` 中的变量这时候是存储在堆上的。现在的 `JS` 引擎可以通过***逃逸分析***辨别出哪些变量需要存储在堆上，哪些需要存储在栈上。\n\n经典面试题，循环中使用闭包解决 `var` 定义函数的问题\n\n```\n// js代码\n\nfor ( var i=1; i<=5; i++) {\n\tsetTimeout( function timer() {\n\t\tconsole.log( i );\n\t}, i*1000 );\n}\n```\n首先因为 `setTimeout` 是个异步函数，所有会先把循环全部执行完毕，这时候 `i` 就是 6 了，所以会输出一堆 6。\n\n解决办法两种，第一种使用闭包\n\n```\n// js代码\n\nfor (var i = 1; i <= 5; i++) {\n  (function(j) {\n    setTimeout(function timer() {\n      console.log(j);\n    }, j * 1000);\n  })(i);\n}\n```\n第二种就是使用 `setTimeout` 的第三个参数(附加参数，传给 `setTimeout` 中的函数)\n\n```\n// js代码\n\nfor ( var i=1; i<=5; i++) {\n\tsetTimeout( function timer(j) {\n\t\tconsole.log( j );\n\t}, i*1000, i);\n}\n```\n\n第三种就是使用 `let` 定义 `i` 了\n```\n// js代码\n\nfor ( let i=1; i<=5; i++) {\n\tsetTimeout( function timer() {\n\t\tconsole.log( i );\n\t}, i*1000 );\n}\n```\n因为对于 `let` 来说，他会创建一个块级作用域，相当于\n\n```\n// js代码\n\n{ // 形成块级作用域\n  let i = 0\n  {\n    let ii = i\n    setTimeout( function timer() {\n        console.log( ii );\n    }, i*1000 );\n  }\n  i++\n  {\n    let ii = i\n  }\n  i++\n  {\n    let ii = i\n  }\n  ...\n}\n```","slug":"FE-guide-Closure","published":1,"updated":"2020-04-02T03:20:12.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grx4001cooa63x46h2f1","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"闭包Closure\"><a href=\"#闭包Closure\" class=\"headerlink\" title=\"闭包Closure\"></a>闭包<code>Closure</code></h1><p>闭包的定义很简单：函数 <code>A</code> 返回了一个函数 <code>B</code> ，并且函数 <code>B</code> 中使用了函数 <code>A</code> 的变量，函数 <code>B</code> 就被称为闭包。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function A() &#123;</span><br><span class=\"line\">  let a &#x3D; 1</span><br><span class=\"line\">  function B() &#123;</span><br><span class=\"line\">      console.log(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return B</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你是否会疑惑，为什么函数 <code>A</code> 已经弹出调用栈了，为什么函数 <code>B</code> 还能引用到函数 <code>A</code> 中的变量。因为函数 <code>A</code> 中的变量这时候是存储在堆上的。现在的 <code>JS</code> 引擎可以通过<strong><em>逃逸分析</em></strong>辨别出哪些变量需要存储在堆上，哪些需要存储在栈上。</p>\n<p>经典面试题，循环中使用闭包解决 <code>var</code> 定义函数的问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">for ( var i&#x3D;1; i&lt;&#x3D;5; i++) &#123;</span><br><span class=\"line\">\tsetTimeout( function timer() &#123;</span><br><span class=\"line\">\t\tconsole.log( i );</span><br><span class=\"line\">\t&#125;, i*1000 );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先因为 <code>setTimeout</code> 是个异步函数，所有会先把循环全部执行完毕，这时候 <code>i</code> 就是 6 了，所以会输出一堆 6。</p>\n<p>解决办法两种，第一种使用闭包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">for (var i &#x3D; 1; i &lt;&#x3D; 5; i++) &#123;</span><br><span class=\"line\">  (function(j) &#123;</span><br><span class=\"line\">    setTimeout(function timer() &#123;</span><br><span class=\"line\">      console.log(j);</span><br><span class=\"line\">    &#125;, j * 1000);</span><br><span class=\"line\">  &#125;)(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二种就是使用 <code>setTimeout</code> 的第三个参数(附加参数，传给 <code>setTimeout</code> 中的函数)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">for ( var i&#x3D;1; i&lt;&#x3D;5; i++) &#123;</span><br><span class=\"line\">\tsetTimeout( function timer(j) &#123;</span><br><span class=\"line\">\t\tconsole.log( j );</span><br><span class=\"line\">\t&#125;, i*1000, i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第三种就是使用 <code>let</code> 定义 <code>i</code> 了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">for ( let i&#x3D;1; i&lt;&#x3D;5; i++) &#123;</span><br><span class=\"line\">\tsetTimeout( function timer() &#123;</span><br><span class=\"line\">\t\tconsole.log( i );</span><br><span class=\"line\">\t&#125;, i*1000 );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为对于 <code>let</code> 来说，他会创建一个块级作用域，相当于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">&#123; &#x2F;&#x2F; 形成块级作用域</span><br><span class=\"line\">  let i &#x3D; 0</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    let ii &#x3D; i</span><br><span class=\"line\">    setTimeout( function timer() &#123;</span><br><span class=\"line\">        console.log( ii );</span><br><span class=\"line\">    &#125;, i*1000 );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  i++</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    let ii &#x3D; i</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  i++</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    let ii &#x3D; i</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"闭包Closure\"><a href=\"#闭包Closure\" class=\"headerlink\" title=\"闭包Closure\"></a>闭包<code>Closure</code></h1><p>闭包的定义很简单：函数 <code>A</code> 返回了一个函数 <code>B</code> ，并且函数 <code>B</code> 中使用了函数 <code>A</code> 的变量，函数 <code>B</code> 就被称为闭包。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function A() &#123;</span><br><span class=\"line\">  let a &#x3D; 1</span><br><span class=\"line\">  function B() &#123;</span><br><span class=\"line\">      console.log(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return B</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你是否会疑惑，为什么函数 <code>A</code> 已经弹出调用栈了，为什么函数 <code>B</code> 还能引用到函数 <code>A</code> 中的变量。因为函数 <code>A</code> 中的变量这时候是存储在堆上的。现在的 <code>JS</code> 引擎可以通过<strong><em>逃逸分析</em></strong>辨别出哪些变量需要存储在堆上，哪些需要存储在栈上。</p>\n<p>经典面试题，循环中使用闭包解决 <code>var</code> 定义函数的问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">for ( var i&#x3D;1; i&lt;&#x3D;5; i++) &#123;</span><br><span class=\"line\">\tsetTimeout( function timer() &#123;</span><br><span class=\"line\">\t\tconsole.log( i );</span><br><span class=\"line\">\t&#125;, i*1000 );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先因为 <code>setTimeout</code> 是个异步函数，所有会先把循环全部执行完毕，这时候 <code>i</code> 就是 6 了，所以会输出一堆 6。</p>\n<p>解决办法两种，第一种使用闭包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">for (var i &#x3D; 1; i &lt;&#x3D; 5; i++) &#123;</span><br><span class=\"line\">  (function(j) &#123;</span><br><span class=\"line\">    setTimeout(function timer() &#123;</span><br><span class=\"line\">      console.log(j);</span><br><span class=\"line\">    &#125;, j * 1000);</span><br><span class=\"line\">  &#125;)(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二种就是使用 <code>setTimeout</code> 的第三个参数(附加参数，传给 <code>setTimeout</code> 中的函数)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">for ( var i&#x3D;1; i&lt;&#x3D;5; i++) &#123;</span><br><span class=\"line\">\tsetTimeout( function timer(j) &#123;</span><br><span class=\"line\">\t\tconsole.log( j );</span><br><span class=\"line\">\t&#125;, i*1000, i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第三种就是使用 <code>let</code> 定义 <code>i</code> 了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">for ( let i&#x3D;1; i&lt;&#x3D;5; i++) &#123;</span><br><span class=\"line\">\tsetTimeout( function timer() &#123;</span><br><span class=\"line\">\t\tconsole.log( i );</span><br><span class=\"line\">\t&#125;, i*1000 );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为对于 <code>let</code> 来说，他会创建一个块级作用域，相当于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">&#123; &#x2F;&#x2F; 形成块级作用域</span><br><span class=\"line\">  let i &#x3D; 0</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    let ii &#x3D; i</span><br><span class=\"line\">    setTimeout( function timer() &#123;</span><br><span class=\"line\">        console.log( ii );</span><br><span class=\"line\">    &#125;, i*1000 );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  i++</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    let ii &#x3D; i</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  i++</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    let ii &#x3D; i</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"前端常见知识点整理 ---- 函数防抖和节流","date":"2020-01-03T01:04:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 函数防抖和节流\n在前端开发的过程中，我们经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。\n\n通常这种情况下我们怎么去解决的呢？一般来讲，防抖和节流是比较好的解决方案。\n## 防抖\n你是否在日常开发中遇到一个问题，在滚动事件中需要做个复杂计算或者实现一个按钮的防二次点击操作。\n\n这些需求都可以通过函数防抖动来实现。尤其是第一个需求，如果在频繁的事件回调中做复杂计算，很有可能导致页面卡顿，不如将多次计算合并为一次计算，只在一个精确点做操作。\n\nPS：防抖和节流的作用都是防止函数多次调用。区别在于，假设一个用户一直触发这个函数，且每次触发函数的间隔小于wait，防抖的情况下只会调用一次，而节流的 情况会每隔一定时间（参数wait）调用函数。\n\n我们先来看一个袖珍版的防抖理解一下防抖的实现：\n\n``` js\n// js代码\n\n// func是用户传入需要防抖的函数\n// wait是等待时间\nconst debounce = (func, wait = 50) => {\n  // 缓存一个定时器id\n  let timer = 0\n  // 这里返回的函数是每次用户实际调用的防抖函数\n  // 如果已经设定过定时器了就清空上一次的定时器\n  // 开始一个新的定时器，延迟执行用户传入的方法\n  return function(...args) {\n    if (timer) clearTimeout(timer)\n    timer = setTimeout(() => {\n      func.apply(this, args)\n    }, wait)\n  }\n}\n// 不难看出如果用户调用该函数的间隔小于wait的情况下，上一次的时间还未到就被清除了，并不会执行函数\n```\n这是一个简单版的防抖，但是有缺陷，这个防抖只能在最后调用。一般的防抖会有immediate选项，表示是否立即调用。这两者的区别，举个栗子来说：\n- 例如在搜索引擎搜索问题的时候，我们当然是希望用户输入完最后一个字才调用查询接口，这个时候适用延迟执行的防抖函数，它总是在一连串（间隔小于wait的）函数触发之后调用。\n- 例如用户给某系统表单点提交的时候，我们希望用户点第一下的时候就去调用接口，这个情况适用立即执行的防抖函数，它总是在第一次调用，并且下一次调用必须与前一次调用的时间间隔大于wait才会触发。\n\n``` js\n// js代码\n\n// 这个是用来获取当前时间戳的\nfunction now() {\n  return +new Date()\n}\n/**\n * 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行\n *\n * @param  {function} func        回调函数\n * @param  {number}   wait        表示时间窗口的间隔\n * @param  {boolean}  immediate   设置为ture时，是否立即调用函数\n * @return {function}             返回客户调用函数\n */\nfunction debounce (func, wait = 50, immediate = true) {\n  let timer, context, args\n\n  // 延迟执行函数\n  const later = () => setTimeout(() => {\n    // 延迟函数执行完毕，清空缓存的定时器序号\n    timer = null\n    // 延迟执行的情况下，函数会在延迟函数中执行\n    // 使用到之前缓存的参数和上下文\n    if (!immediate) {\n      func.apply(context, args)\n      context = args = null\n    }\n  }, wait)\n\n  // 这里返回的函数是每次实际调用的函数\n  return function(...params) {\n    // 如果没有创建延迟执行函数（later），就创建一个\n    if (!timer) {\n      timer = later()\n      // 如果是立即执行，调用函数\n      // 否则缓存参数和调用上下文\n      if (immediate) {\n        func.apply(this, params)\n      } else {\n        context = this\n        args = params\n      }\n    // 如果已有延迟执行函数（later），调用的时候清除原来的并重新设定一个\n    // 这样做延迟函数会重新计时\n    } else {\n      clearTimeout(timer)\n      timer = later()\n    }\n  }\n}\n```\n整体函数实现的不难，总结一下。\n\n- 对于按钮防点击来说的实现：如果函数是立即执行的，就立即调用，如果函数是延迟执行的，就缓存上下文和参数，放到延迟函数中去执行。一旦我开始一个定时器，只要我定时器还在，你每次点击我都重新计时。一旦你点累了，定时器时间到，定时器重置为 null，就可以再次点击了。\n- 对于延时执行函数来说的实现：清除定时器ID，如果是延迟调用就调用函数\n\n## 节流\n防抖动和节流本质是不一样的。防抖动是将多次执行变为最后一次执行，节流是将多次执行变成每隔一段时间执行。\n\n``` js\n// js代码\n\n/**\n * underscore 节流函数，返回函数连续调用时，func 执行频率限定为 次 / wait\n *\n * @param  {function}   func      回调函数\n * @param  {number}     wait      表示时间窗口的间隔\n * @param  {object}     options   如果想忽略开始函数的的调用，传入{leading: false}。\n *                                如果想忽略结尾函数的调用，传入{trailing: false}\n *                                两者不能共存，否则函数不能执行\n * @return {function}             返回客户调用函数\n */\n_.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    // 之前的时间戳\n    var previous = 0;\n    // 如果 options 没传则设为空对象\n    if (!options) options = {};\n    // 定时器回调函数\n    var later = function() {\n      // 如果设置了 leading，就将 previous 设为 0\n      // 用于下面函数的第一个 if 判断\n      previous = options.leading === false ? 0 : _.now();\n      // 置空一是为了防止内存泄漏，二是为了下面的定时器判断\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      // 获得当前时间戳\n      var now = _.now();\n      // 首次进入前者肯定为 true\n\t  // 如果需要第一次不执行函数\n\t  // 就将上次时间戳设为当前的\n      // 这样在接下来计算 remaining 的值时会大于0\n      if (!previous && options.leading === false) previous = now;\n      // 计算剩余时间\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      // 如果当前调用已经大于上次调用时间 + wait\n      // 或者用户手动调了时间\n \t  // 如果设置了 trailing，只会进入这个条件\n\t  // 如果没有设置 leading，那么第一次会进入这个条件\n\t  // 还有一点，你可能会觉得开启了定时器那么应该不会进入这个 if 条件了\n\t  // 其实还是会进入的，因为定时器的延时\n\t  // 并不是准确的时间，很可能你设置了2秒\n\t  // 但是他需要2.2秒才触发，这时候就会进入这个条件\n      if (remaining <= 0 || remaining > wait) {\n        // 如果存在定时器就清理掉否则会调用二次回调\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        // 判断是否设置了定时器和 trailing\n\t    // 没有的话就开启一个定时器\n        // 并且不能不能同时设置 leading 和 trailing\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n```","source":"_posts/FE-guide-debounce-throttle.md","raw":"---\ntitle: 前端常见知识点整理 ---- 函数防抖和节流\ndate: 2020-01-03 09:04:00\ncategories: \n  - 前端技术\n  - 前端常见知识点整理\ntags: \n\t- 面试\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 函数防抖和节流\n在前端开发的过程中，我们经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。\n\n通常这种情况下我们怎么去解决的呢？一般来讲，防抖和节流是比较好的解决方案。\n## 防抖\n你是否在日常开发中遇到一个问题，在滚动事件中需要做个复杂计算或者实现一个按钮的防二次点击操作。\n\n这些需求都可以通过函数防抖动来实现。尤其是第一个需求，如果在频繁的事件回调中做复杂计算，很有可能导致页面卡顿，不如将多次计算合并为一次计算，只在一个精确点做操作。\n\nPS：防抖和节流的作用都是防止函数多次调用。区别在于，假设一个用户一直触发这个函数，且每次触发函数的间隔小于wait，防抖的情况下只会调用一次，而节流的 情况会每隔一定时间（参数wait）调用函数。\n\n我们先来看一个袖珍版的防抖理解一下防抖的实现：\n\n``` js\n// js代码\n\n// func是用户传入需要防抖的函数\n// wait是等待时间\nconst debounce = (func, wait = 50) => {\n  // 缓存一个定时器id\n  let timer = 0\n  // 这里返回的函数是每次用户实际调用的防抖函数\n  // 如果已经设定过定时器了就清空上一次的定时器\n  // 开始一个新的定时器，延迟执行用户传入的方法\n  return function(...args) {\n    if (timer) clearTimeout(timer)\n    timer = setTimeout(() => {\n      func.apply(this, args)\n    }, wait)\n  }\n}\n// 不难看出如果用户调用该函数的间隔小于wait的情况下，上一次的时间还未到就被清除了，并不会执行函数\n```\n这是一个简单版的防抖，但是有缺陷，这个防抖只能在最后调用。一般的防抖会有immediate选项，表示是否立即调用。这两者的区别，举个栗子来说：\n- 例如在搜索引擎搜索问题的时候，我们当然是希望用户输入完最后一个字才调用查询接口，这个时候适用延迟执行的防抖函数，它总是在一连串（间隔小于wait的）函数触发之后调用。\n- 例如用户给某系统表单点提交的时候，我们希望用户点第一下的时候就去调用接口，这个情况适用立即执行的防抖函数，它总是在第一次调用，并且下一次调用必须与前一次调用的时间间隔大于wait才会触发。\n\n``` js\n// js代码\n\n// 这个是用来获取当前时间戳的\nfunction now() {\n  return +new Date()\n}\n/**\n * 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行\n *\n * @param  {function} func        回调函数\n * @param  {number}   wait        表示时间窗口的间隔\n * @param  {boolean}  immediate   设置为ture时，是否立即调用函数\n * @return {function}             返回客户调用函数\n */\nfunction debounce (func, wait = 50, immediate = true) {\n  let timer, context, args\n\n  // 延迟执行函数\n  const later = () => setTimeout(() => {\n    // 延迟函数执行完毕，清空缓存的定时器序号\n    timer = null\n    // 延迟执行的情况下，函数会在延迟函数中执行\n    // 使用到之前缓存的参数和上下文\n    if (!immediate) {\n      func.apply(context, args)\n      context = args = null\n    }\n  }, wait)\n\n  // 这里返回的函数是每次实际调用的函数\n  return function(...params) {\n    // 如果没有创建延迟执行函数（later），就创建一个\n    if (!timer) {\n      timer = later()\n      // 如果是立即执行，调用函数\n      // 否则缓存参数和调用上下文\n      if (immediate) {\n        func.apply(this, params)\n      } else {\n        context = this\n        args = params\n      }\n    // 如果已有延迟执行函数（later），调用的时候清除原来的并重新设定一个\n    // 这样做延迟函数会重新计时\n    } else {\n      clearTimeout(timer)\n      timer = later()\n    }\n  }\n}\n```\n整体函数实现的不难，总结一下。\n\n- 对于按钮防点击来说的实现：如果函数是立即执行的，就立即调用，如果函数是延迟执行的，就缓存上下文和参数，放到延迟函数中去执行。一旦我开始一个定时器，只要我定时器还在，你每次点击我都重新计时。一旦你点累了，定时器时间到，定时器重置为 null，就可以再次点击了。\n- 对于延时执行函数来说的实现：清除定时器ID，如果是延迟调用就调用函数\n\n## 节流\n防抖动和节流本质是不一样的。防抖动是将多次执行变为最后一次执行，节流是将多次执行变成每隔一段时间执行。\n\n``` js\n// js代码\n\n/**\n * underscore 节流函数，返回函数连续调用时，func 执行频率限定为 次 / wait\n *\n * @param  {function}   func      回调函数\n * @param  {number}     wait      表示时间窗口的间隔\n * @param  {object}     options   如果想忽略开始函数的的调用，传入{leading: false}。\n *                                如果想忽略结尾函数的调用，传入{trailing: false}\n *                                两者不能共存，否则函数不能执行\n * @return {function}             返回客户调用函数\n */\n_.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    // 之前的时间戳\n    var previous = 0;\n    // 如果 options 没传则设为空对象\n    if (!options) options = {};\n    // 定时器回调函数\n    var later = function() {\n      // 如果设置了 leading，就将 previous 设为 0\n      // 用于下面函数的第一个 if 判断\n      previous = options.leading === false ? 0 : _.now();\n      // 置空一是为了防止内存泄漏，二是为了下面的定时器判断\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      // 获得当前时间戳\n      var now = _.now();\n      // 首次进入前者肯定为 true\n\t  // 如果需要第一次不执行函数\n\t  // 就将上次时间戳设为当前的\n      // 这样在接下来计算 remaining 的值时会大于0\n      if (!previous && options.leading === false) previous = now;\n      // 计算剩余时间\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      // 如果当前调用已经大于上次调用时间 + wait\n      // 或者用户手动调了时间\n \t  // 如果设置了 trailing，只会进入这个条件\n\t  // 如果没有设置 leading，那么第一次会进入这个条件\n\t  // 还有一点，你可能会觉得开启了定时器那么应该不会进入这个 if 条件了\n\t  // 其实还是会进入的，因为定时器的延时\n\t  // 并不是准确的时间，很可能你设置了2秒\n\t  // 但是他需要2.2秒才触发，这时候就会进入这个条件\n      if (remaining <= 0 || remaining > wait) {\n        // 如果存在定时器就清理掉否则会调用二次回调\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        // 判断是否设置了定时器和 trailing\n\t    // 没有的话就开启一个定时器\n        // 并且不能不能同时设置 leading 和 trailing\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n```","slug":"FE-guide-debounce-throttle","published":1,"updated":"2020-04-02T03:20:12.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grx7001gooa6amezf1q2","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"函数防抖和节流\"><a href=\"#函数防抖和节流\" class=\"headerlink\" title=\"函数防抖和节流\"></a>函数防抖和节流</h1><p>在前端开发的过程中，我们经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。</p>\n<p>通常这种情况下我们怎么去解决的呢？一般来讲，防抖和节流是比较好的解决方案。</p>\n<h2 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h2><p>你是否在日常开发中遇到一个问题，在滚动事件中需要做个复杂计算或者实现一个按钮的防二次点击操作。</p>\n<p>这些需求都可以通过函数防抖动来实现。尤其是第一个需求，如果在频繁的事件回调中做复杂计算，很有可能导致页面卡顿，不如将多次计算合并为一次计算，只在一个精确点做操作。</p>\n<p>PS：防抖和节流的作用都是防止函数多次调用。区别在于，假设一个用户一直触发这个函数，且每次触发函数的间隔小于wait，防抖的情况下只会调用一次，而节流的 情况会每隔一定时间（参数wait）调用函数。</p>\n<p>我们先来看一个袖珍版的防抖理解一下防抖的实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// func是用户传入需要防抖的函数</span></span><br><span class=\"line\"><span class=\"comment\">// wait是等待时间</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> debounce = <span class=\"function\">(<span class=\"params\">func, wait = <span class=\"number\">50</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 缓存一个定时器id</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"comment\">// 这里返回的函数是每次用户实际调用的防抖函数</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果已经设定过定时器了就清空上一次的定时器</span></span><br><span class=\"line\">  <span class=\"comment\">// 开始一个新的定时器，延迟执行用户传入的方法</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer) clearTimeout(timer)</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      func.apply(<span class=\"keyword\">this</span>, args)</span><br><span class=\"line\">    &#125;, wait)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 不难看出如果用户调用该函数的间隔小于wait的情况下，上一次的时间还未到就被清除了，并不会执行函数</span></span><br></pre></td></tr></table></figure>\n<p>这是一个简单版的防抖，但是有缺陷，这个防抖只能在最后调用。一般的防抖会有immediate选项，表示是否立即调用。这两者的区别，举个栗子来说：</p>\n<ul>\n<li>例如在搜索引擎搜索问题的时候，我们当然是希望用户输入完最后一个字才调用查询接口，这个时候适用延迟执行的防抖函数，它总是在一连串（间隔小于wait的）函数触发之后调用。</li>\n<li>例如用户给某系统表单点提交的时候，我们希望用户点第一下的时候就去调用接口，这个情况适用立即执行的防抖函数，它总是在第一次调用，并且下一次调用必须与前一次调用的时间间隔大于wait才会触发。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个是用来获取当前时间戳的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">now</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;function&#125;</span> </span>func        回调函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;number&#125;</span>   </span>wait        表示时间窗口的间隔</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;boolean&#125;</span>  </span>immediate   设置为ture时，是否立即调用函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;function&#125;</span>             </span>返回客户调用函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span> (<span class=\"params\">func, wait = <span class=\"number\">50</span>, immediate = true</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer, context, args</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 延迟执行函数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> later = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 延迟函数执行完毕，清空缓存的定时器序号</span></span><br><span class=\"line\">    timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">// 延迟执行的情况下，函数会在延迟函数中执行</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用到之前缓存的参数和上下文</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!immediate) &#123;</span><br><span class=\"line\">      func.apply(context, args)</span><br><span class=\"line\">      context = args = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, wait)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 这里返回的函数是每次实际调用的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有创建延迟执行函数（later），就创建一个</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">      timer = later()</span><br><span class=\"line\">      <span class=\"comment\">// 如果是立即执行，调用函数</span></span><br><span class=\"line\">      <span class=\"comment\">// 否则缓存参数和调用上下文</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (immediate) &#123;</span><br><span class=\"line\">        func.apply(<span class=\"keyword\">this</span>, params)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        context = <span class=\"keyword\">this</span></span><br><span class=\"line\">        args = params</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果已有延迟执行函数（later），调用的时候清除原来的并重新设定一个</span></span><br><span class=\"line\">    <span class=\"comment\">// 这样做延迟函数会重新计时</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      clearTimeout(timer)</span><br><span class=\"line\">      timer = later()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>整体函数实现的不难，总结一下。</p>\n<ul>\n<li>对于按钮防点击来说的实现：如果函数是立即执行的，就立即调用，如果函数是延迟执行的，就缓存上下文和参数，放到延迟函数中去执行。一旦我开始一个定时器，只要我定时器还在，你每次点击我都重新计时。一旦你点累了，定时器时间到，定时器重置为 null，就可以再次点击了。</li>\n<li>对于延时执行函数来说的实现：清除定时器ID，如果是延迟调用就调用函数</li>\n</ul>\n<h2 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h2><p>防抖动和节流本质是不一样的。防抖动是将多次执行变为最后一次执行，节流是将多次执行变成每隔一段时间执行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * underscore 节流函数，返回函数连续调用时，func 执行频率限定为 次 / wait</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;function&#125;</span>   </span>func      回调函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;number&#125;</span>     </span>wait      表示时间窗口的间隔</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;object&#125;</span>     </span>options   如果想忽略开始函数的的调用，传入&#123;leading: false&#125;。</span></span><br><span class=\"line\"><span class=\"comment\"> *                                如果想忽略结尾函数的调用，传入&#123;trailing: false&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *                                两者不能共存，否则函数不能执行</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;function&#125;</span>             </span>返回客户调用函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">_.throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context, args, result;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 之前的时间戳</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 options 没传则设为空对象</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!options) options = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 定时器回调函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果设置了 leading，就将 previous 设为 0</span></span><br><span class=\"line\">      <span class=\"comment\">// 用于下面函数的第一个 if 判断</span></span><br><span class=\"line\">      previous = options.leading === <span class=\"literal\">false</span> ? <span class=\"number\">0</span> : _.now();</span><br><span class=\"line\">      <span class=\"comment\">// 置空一是为了防止内存泄漏，二是为了下面的定时器判断</span></span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获得当前时间戳</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> now = _.now();</span><br><span class=\"line\">      <span class=\"comment\">// 首次进入前者肯定为 true</span></span><br><span class=\"line\">\t  <span class=\"comment\">// 如果需要第一次不执行函数</span></span><br><span class=\"line\">\t  <span class=\"comment\">// 就将上次时间戳设为当前的</span></span><br><span class=\"line\">      <span class=\"comment\">// 这样在接下来计算 remaining 的值时会大于0</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!previous &amp;&amp; options.leading === <span class=\"literal\">false</span>) previous = now;</span><br><span class=\"line\">      <span class=\"comment\">// 计算剩余时间</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> remaining = wait - (now - previous);</span><br><span class=\"line\">      context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 如果当前调用已经大于上次调用时间 + wait</span></span><br><span class=\"line\">      <span class=\"comment\">// 或者用户手动调了时间</span></span><br><span class=\"line\"> \t  <span class=\"comment\">// 如果设置了 trailing，只会进入这个条件</span></span><br><span class=\"line\">\t  <span class=\"comment\">// 如果没有设置 leading，那么第一次会进入这个条件</span></span><br><span class=\"line\">\t  <span class=\"comment\">// 还有一点，你可能会觉得开启了定时器那么应该不会进入这个 if 条件了</span></span><br><span class=\"line\">\t  <span class=\"comment\">// 其实还是会进入的，因为定时器的延时</span></span><br><span class=\"line\">\t  <span class=\"comment\">// 并不是准确的时间，很可能你设置了2秒</span></span><br><span class=\"line\">\t  <span class=\"comment\">// 但是他需要2.2秒才触发，这时候就会进入这个条件</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span> || remaining &gt; wait) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果存在定时器就清理掉否则会调用二次回调</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) &#123;</span><br><span class=\"line\">          clearTimeout(timeout);</span><br><span class=\"line\">          timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        previous = now;</span><br><span class=\"line\">        result = func.apply(context, args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!timeout &amp;&amp; options.trailing !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否设置了定时器和 trailing</span></span><br><span class=\"line\">\t    <span class=\"comment\">// 没有的话就开启一个定时器</span></span><br><span class=\"line\">        <span class=\"comment\">// 并且不能不能同时设置 leading 和 trailing</span></span><br><span class=\"line\">        timeout = setTimeout(later, remaining);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"函数防抖和节流\"><a href=\"#函数防抖和节流\" class=\"headerlink\" title=\"函数防抖和节流\"></a>函数防抖和节流</h1><p>在前端开发的过程中，我们经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。</p>\n<p>通常这种情况下我们怎么去解决的呢？一般来讲，防抖和节流是比较好的解决方案。</p>\n<h2 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h2><p>你是否在日常开发中遇到一个问题，在滚动事件中需要做个复杂计算或者实现一个按钮的防二次点击操作。</p>\n<p>这些需求都可以通过函数防抖动来实现。尤其是第一个需求，如果在频繁的事件回调中做复杂计算，很有可能导致页面卡顿，不如将多次计算合并为一次计算，只在一个精确点做操作。</p>\n<p>PS：防抖和节流的作用都是防止函数多次调用。区别在于，假设一个用户一直触发这个函数，且每次触发函数的间隔小于wait，防抖的情况下只会调用一次，而节流的 情况会每隔一定时间（参数wait）调用函数。</p>\n<p>我们先来看一个袖珍版的防抖理解一下防抖的实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// func是用户传入需要防抖的函数</span></span><br><span class=\"line\"><span class=\"comment\">// wait是等待时间</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> debounce = <span class=\"function\">(<span class=\"params\">func, wait = <span class=\"number\">50</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 缓存一个定时器id</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"comment\">// 这里返回的函数是每次用户实际调用的防抖函数</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果已经设定过定时器了就清空上一次的定时器</span></span><br><span class=\"line\">  <span class=\"comment\">// 开始一个新的定时器，延迟执行用户传入的方法</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer) clearTimeout(timer)</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      func.apply(<span class=\"keyword\">this</span>, args)</span><br><span class=\"line\">    &#125;, wait)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 不难看出如果用户调用该函数的间隔小于wait的情况下，上一次的时间还未到就被清除了，并不会执行函数</span></span><br></pre></td></tr></table></figure>\n<p>这是一个简单版的防抖，但是有缺陷，这个防抖只能在最后调用。一般的防抖会有immediate选项，表示是否立即调用。这两者的区别，举个栗子来说：</p>\n<ul>\n<li>例如在搜索引擎搜索问题的时候，我们当然是希望用户输入完最后一个字才调用查询接口，这个时候适用延迟执行的防抖函数，它总是在一连串（间隔小于wait的）函数触发之后调用。</li>\n<li>例如用户给某系统表单点提交的时候，我们希望用户点第一下的时候就去调用接口，这个情况适用立即执行的防抖函数，它总是在第一次调用，并且下一次调用必须与前一次调用的时间间隔大于wait才会触发。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个是用来获取当前时间戳的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">now</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;function&#125;</span> </span>func        回调函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;number&#125;</span>   </span>wait        表示时间窗口的间隔</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;boolean&#125;</span>  </span>immediate   设置为ture时，是否立即调用函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;function&#125;</span>             </span>返回客户调用函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span> (<span class=\"params\">func, wait = <span class=\"number\">50</span>, immediate = true</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer, context, args</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 延迟执行函数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> later = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 延迟函数执行完毕，清空缓存的定时器序号</span></span><br><span class=\"line\">    timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">// 延迟执行的情况下，函数会在延迟函数中执行</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用到之前缓存的参数和上下文</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!immediate) &#123;</span><br><span class=\"line\">      func.apply(context, args)</span><br><span class=\"line\">      context = args = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, wait)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 这里返回的函数是每次实际调用的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有创建延迟执行函数（later），就创建一个</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">      timer = later()</span><br><span class=\"line\">      <span class=\"comment\">// 如果是立即执行，调用函数</span></span><br><span class=\"line\">      <span class=\"comment\">// 否则缓存参数和调用上下文</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (immediate) &#123;</span><br><span class=\"line\">        func.apply(<span class=\"keyword\">this</span>, params)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        context = <span class=\"keyword\">this</span></span><br><span class=\"line\">        args = params</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果已有延迟执行函数（later），调用的时候清除原来的并重新设定一个</span></span><br><span class=\"line\">    <span class=\"comment\">// 这样做延迟函数会重新计时</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      clearTimeout(timer)</span><br><span class=\"line\">      timer = later()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>整体函数实现的不难，总结一下。</p>\n<ul>\n<li>对于按钮防点击来说的实现：如果函数是立即执行的，就立即调用，如果函数是延迟执行的，就缓存上下文和参数，放到延迟函数中去执行。一旦我开始一个定时器，只要我定时器还在，你每次点击我都重新计时。一旦你点累了，定时器时间到，定时器重置为 null，就可以再次点击了。</li>\n<li>对于延时执行函数来说的实现：清除定时器ID，如果是延迟调用就调用函数</li>\n</ul>\n<h2 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h2><p>防抖动和节流本质是不一样的。防抖动是将多次执行变为最后一次执行，节流是将多次执行变成每隔一段时间执行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * underscore 节流函数，返回函数连续调用时，func 执行频率限定为 次 / wait</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;function&#125;</span>   </span>func      回调函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;number&#125;</span>     </span>wait      表示时间窗口的间隔</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;object&#125;</span>     </span>options   如果想忽略开始函数的的调用，传入&#123;leading: false&#125;。</span></span><br><span class=\"line\"><span class=\"comment\"> *                                如果想忽略结尾函数的调用，传入&#123;trailing: false&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *                                两者不能共存，否则函数不能执行</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;function&#125;</span>             </span>返回客户调用函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">_.throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context, args, result;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 之前的时间戳</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 options 没传则设为空对象</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!options) options = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 定时器回调函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果设置了 leading，就将 previous 设为 0</span></span><br><span class=\"line\">      <span class=\"comment\">// 用于下面函数的第一个 if 判断</span></span><br><span class=\"line\">      previous = options.leading === <span class=\"literal\">false</span> ? <span class=\"number\">0</span> : _.now();</span><br><span class=\"line\">      <span class=\"comment\">// 置空一是为了防止内存泄漏，二是为了下面的定时器判断</span></span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获得当前时间戳</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> now = _.now();</span><br><span class=\"line\">      <span class=\"comment\">// 首次进入前者肯定为 true</span></span><br><span class=\"line\">\t  <span class=\"comment\">// 如果需要第一次不执行函数</span></span><br><span class=\"line\">\t  <span class=\"comment\">// 就将上次时间戳设为当前的</span></span><br><span class=\"line\">      <span class=\"comment\">// 这样在接下来计算 remaining 的值时会大于0</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!previous &amp;&amp; options.leading === <span class=\"literal\">false</span>) previous = now;</span><br><span class=\"line\">      <span class=\"comment\">// 计算剩余时间</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> remaining = wait - (now - previous);</span><br><span class=\"line\">      context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 如果当前调用已经大于上次调用时间 + wait</span></span><br><span class=\"line\">      <span class=\"comment\">// 或者用户手动调了时间</span></span><br><span class=\"line\"> \t  <span class=\"comment\">// 如果设置了 trailing，只会进入这个条件</span></span><br><span class=\"line\">\t  <span class=\"comment\">// 如果没有设置 leading，那么第一次会进入这个条件</span></span><br><span class=\"line\">\t  <span class=\"comment\">// 还有一点，你可能会觉得开启了定时器那么应该不会进入这个 if 条件了</span></span><br><span class=\"line\">\t  <span class=\"comment\">// 其实还是会进入的，因为定时器的延时</span></span><br><span class=\"line\">\t  <span class=\"comment\">// 并不是准确的时间，很可能你设置了2秒</span></span><br><span class=\"line\">\t  <span class=\"comment\">// 但是他需要2.2秒才触发，这时候就会进入这个条件</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span> || remaining &gt; wait) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果存在定时器就清理掉否则会调用二次回调</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) &#123;</span><br><span class=\"line\">          clearTimeout(timeout);</span><br><span class=\"line\">          timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        previous = now;</span><br><span class=\"line\">        result = func.apply(context, args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!timeout &amp;&amp; options.trailing !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否设置了定时器和 trailing</span></span><br><span class=\"line\">\t    <span class=\"comment\">// 没有的话就开启一个定时器</span></span><br><span class=\"line\">        <span class=\"comment\">// 并且不能不能同时设置 leading 和 trailing</span></span><br><span class=\"line\">        timeout = setTimeout(later, remaining);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>"},{"title":"计算机通识 ---- 数据结构","date":"2020-01-09T07:35:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n网络相关的知识虽然平时在编码阶段很少遇到，但是并不是说它不重要，尤其是前端优化层面，能从网络传输过程优化的点有很多，所以，我们需要好好掌握网络相关的知识，接下来，我将会将我了解到的网络相关的知识点进行一一整理\n\n# 栈 Heap\n> 栈是一个线性结构，在计算机中是一个相当常见的数据结构。\n> 栈的特点是只能在某一端添加或删除数据，遵循**先进后出(FILO)**的原则\n\n## 实现\n每种数据结构都可以用很多种方式来实现，其实可以把栈看成是数组的一个子集，所以这里使用数组来实现\n```\n// js代码\nclass Stack {\n  constructor() {\n    this.stack = []\n  }\n  push(item) {\n    this.stack.push(item)\n  }\n  pop() {\n    this.stack.pop()\n  }\n  peek() { // 取最后一项\n    return this.stack[this.getCount() - 1]\n  }\n  getCount() {\n    return this.stack.length\n  }\n  isEmpty() {\n    return this.getCount() === 0\n  }\n}\n```\n## 应用\n选取了 [LeetCode 上序号为 20 的题目](https://leetcode-cn.com/problems/valid-parentheses/)\n\n题意是匹配括号，可以通过栈的特性来完成这道题目\n```\nvar isValid = function(str) {\n  let map = {\n    '(': -1,\n    ')': 1,\n    '[': -2,\n    ']': 2,\n    '{': -3,\n    '}': 3\n  }\n  let stack = [] // 空数组\n  for (let i = 0; i < str.length; i++) { // 遍历字符串每个字符\n    if (map[str[i]] < 0) { // 如果是左边括号，入栈\n      stack.push(str[i])\n    } else { // 否则出栈，判断左右括号加到一起是不是0\n      let last = stack.pop()\n      if (map[last] + map[str[i]] != 0) return false\n    }\n  }\n  if (stack.length > 0) return false // 循环完成后，判断数组中时候还有剩下的，有剩下的说明括号没闭合\n  return true // 否则没剩下的，都闭合了\n}\n```\n\n# 队列\n> 队列一个线性结构，特点是在某一端添加数据，在另一端删除数据，遵循**先进先出(FIFO)**的原则。\n\n## 实现\n这里会讲解两种实现队列的方式，分别是**单链队列**和**循环队列**。\n\n- 链队列即队列的链式存储结构，结构上就是一个单链表，但数据只能是头进尾出。链式结构更加的灵活，特别是在存储空间上，基本不会出现溢出的情况，所以不用像循环队列一样判断队列是否已满，且空间的利用率相对较高。\n  - 链队列front指向头结点，头结点不存储数据，rear指向队尾结点。\n\n\n- 循环队列即为头尾相接的队列，它的最大存储空间和顺序队列一样由数组界定，但队列的长度并不一定等同于数组的长度；循环队列的队首和队尾分别由两个指针front、rear标识，于是这样就能做到首尾相接。\n\n- 链队列：为操作方便，给链队列添加一个头结点\n- 循环队列：附设两个指针front和rear分别指示队列头元素及尾元素的位置，每当插入新的队尾元素是，尾指针加1；每当删除队列头元素是，头指针加1\n  - 如果用循环队列，则必须设定一个最大队列长度；若无法确定最大长度，则宜采用链队列。\n\n\n### 单链队列\n```\n// js代码\n\nclass Queue {\n  constructor() {\n    this.queue = []\n  }\n  enQueue(item) {\n    this.queue.push(item)\n  }\n  deQueue() {\n    return this.queue.shift()\n  }\n  getHeader() {\n    return this.queue[0]\n  }\n  getLength() {\n    return this.queue.length\n  }\n  isEmpty() {\n    return this.getLength() === 0\n  }\n}\n```\n因为单链队列在出队操作的时候需要 O(n) 的时间复杂度，所以引入了循环队列。\n循环队列的出队操作平均是 O(1) 的时间复杂度。\n\n### 循环队列\n```\n// js代码\n\nclass SqQueue {\n  constructor(length) {\n    this.queue = new Array(length + 1)\n    // 队头\n    this.first = 0\n    // 队尾\n    this.last = 0\n    // 当前队列大小\n    this.size = 0\n  }\n  enQueue(item) {\n    // 判断队尾 + 1 是否为队头\n    // 如果是就代表需要扩容数组\n    // % this.queue.length 是为了防止数组越界\n    if (this.first === (this.last + 1) % this.queue.length) {\n      this.resize(this.getLength() * 2 + 1)\n    }\n    this.queue[this.last] = item\n    this.size++\n    this.last = (this.last + 1) % this.queue.length\n  }\n  deQueue() {\n    if (this.isEmpty()) {\n      throw Error('Queue is empty')\n    }\n    let r = this.queue[this.first]\n    this.queue[this.first] = null\n    this.first = (this.first + 1) % this.queue.length\n    this.size--\n    // 判断当前队列大小是否过小\n    // 为了保证不浪费空间，在队列空间等于总长度四分之一时\n    // 且不为 2 时缩小总长度为当前的一半\n    if (this.size === this.getLength() / 4 && this.getLength() / 2 !== 0) {\n      this.resize(this.getLength() / 2)\n    }\n    return r\n  }\n  getHeader() {\n    if (this.isEmpty()) {\n      throw Error('Queue is empty')\n    }\n    return this.queue[this.first]\n  }\n  getLength() {\n    return this.queue.length - 1\n  }\n  isEmpty() {\n    return this.first === this.last\n  }\n  resize(length) {\n    let q = new Array(length)\n    for (let i = 0; i < length; i++) {\n      q[i] = this.queue[(i + this.first) % this.queue.length]\n    }\n    this.queue = q\n    this.first = 0\n    this.last = this.size\n  }\n}\n```\n\n# 链表\n> 链表是一个线性结构，同时也是一个天然的递归结构。链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。\n\n## 实现\n单向链表\n```\n// js代码\n\nclass Node {\n  constructor(v, next) {\n    this.value = v\n    this.next = next\n  }\n}\nclass LinkList {\n  constructor() {\n    // 链表长度\n    this.size = 0\n    // 虚拟头部\n    this.dummyNode = new Node(null, null)\n  }\n  find(header, index, currentIndex) {\n    if (index === currentIndex) return header\n    return this.find(header.next, index, currentIndex + 1)\n  }\n  addNode(v, index) {\n    this.checkIndex(index)\n    // 当往链表末尾插入时，prev.next 为空\n    // 其他情况时，因为要插入节点，所以插入的节点\n    // 的 next 应该是 prev.next\n    // 然后设置 prev.next 为插入的节点\n    let prev = this.find(this.dummyNode, index, 0)\n    prev.next = new Node(v, prev.next)\n    this.size++\n    return prev.next\n  }\n  insertNode(v, index) {\n    return this.addNode(v, index)\n  }\n  addToFirst(v) {\n    return this.addNode(v, 0)\n  }\n  addToLast(v) {\n    return this.addNode(v, this.size)\n  }\n  removeNode(index, isLast) {\n    this.checkIndex(index)\n    index = isLast ? index - 1 : index\n    let prev = this.find(this.dummyNode, index, 0)\n    let node = prev.next\n    prev.next = node.next\n    node.next = null\n    this.size--\n    return node\n  }\n  removeFirstNode() {\n    return this.removeNode(0)\n  }\n  removeLastNode() {\n    return this.removeNode(this.size, true)\n  }\n  checkIndex(index) {\n    if (index < 0 || index > this.size) throw Error('Index error')\n  }\n  getNode(index) {\n    this.checkIndex(index)\n    if (this.isEmpty()) return\n    return this.find(this.dummyNode, index, 0).next\n  }\n  isEmpty() {\n    return this.size === 0\n  }\n  getSize() {\n    return this.size\n  }\n}\n```\n\n# 树\n## 二叉树\n树拥有很多种结构，二叉树是树中最常用的结构，同时也是一个天然的递归结构。\n\n二叉树拥有一个根节点，每个节点至多拥有两个子节点，分别为：左节点和右节点。树的最底部节点称之为叶节点，当一颗树的叶数量数量为满时，该树可以称之为满二叉树。\n\n## 二分搜索树\n二分搜索树也是二叉树，拥有二叉树的特性。但是区别在于二分搜索树每个节点的值都比他的左子树的值大，比右子树的值小。\n\n这种存储方式很适合于数据搜索。如下图所示，当需要查找 6 的时候，因为需要查找的值比根节点的值大，所以只需要在根节点的右子树上寻找，大大提高了搜索效率。\n\n### 实现\n```\n// js代码\n\nclass Node {\n  constructor(value) {\n    this.value = value\n    this.left = null\n    this.right = null\n  }\n}\nclass BST {\n  constructor() {\n    this.root = null\n    this.size = 0\n  }\n  getSize() {\n    return this.size\n  }\n  isEmpty() {\n    return this.size === 0\n  }\n  addNode(v) {\n    this.root = this._addChild(this.root, v)\n  }\n  // 添加节点时，需要比较添加的节点值和当前\n  // 节点值的大小\n  _addChild(node, v) {\n    if (!node) {\n      this.size++\n      return new Node(v)\n    }\n    if (node.value > v) {\n      node.left = this._addChild(node.left, v)\n    } else if (node.value < v) {\n      node.right = this._addChild(node.right, v)\n    }\n    return node\n  }\n}\n```\n\n以上是最基本的二分搜索树实现，接下来实现树的遍历。\n\n对于树的遍历来说，有三种遍历方法，分别是**先序遍历**、**中序遍历**、**后序遍历**。\n\n三种遍历的区别在于何时访问节点。在遍历树的过程中，每个节点都会遍历三次，分别是遍历到自己，遍历左子树和遍历右子树。如果需要实现先序遍历，那么只需要第一次遍历到节点时进行操作即可。\n\n以下都是递归实现.\n\n```\n// js代码\n\n// 先序遍历可用于打印树的结构\n// 先序遍历先访问根节点，然后访问左节点，最后访问右节点。\npreTraversal() {\n  this._pre(this.root)\n}\n_pre(node) {\n  if (node) {\n    console.log(node.value)\n    this._pre(node.left)\n    this._pre(node.right)\n  }\n}\n// 中序遍历可用于排序\n// 对于 BST 来说，中序遍历可以实现一次遍历就\n// 得到有序的值\n// 中序遍历表示先访问左节点，然后访问根节点，最后访问右节点。\nmidTraversal() {\n  this._mid(this.root)\n}\n_mid(node) {\n  if (node) {\n    this._mid(node.left)\n    console.log(node.value)\n    this._mid(node.right)\n  }\n}\n// 后序遍历可用于先操作子节点\n// 再操作父节点的场景\n// 后序遍历表示先访问左节点，然后访问右节点，最后访问根节点。\nbackTraversal() {\n  this._back(this.root)\n}\n_back(node) {\n  if (node) {\n    this._back(node.left)\n    this._back(node.right)\n    console.log(node.value)\n  }\n}\n```\n\n以上的这几种遍历都可以称之为深度遍历，对应的还有种遍历叫做广度遍历，也就是一层层地遍历树。对于广度遍历来说，我们需要利用之前讲过的队列结构来完成。\n\n```\n// js代码\n\nbreadthTraversal() {\n  if (!this.root) return null\n  let q = new Queue()\n  // 将根节点入队\n  q.enQueue(this.root)\n  // 循环判断队列是否为空，为空\n  // 代表树遍历完毕\n  while (!q.isEmpty()) {\n    // 将队首出队，判断是否有左右子树\n    // 有的话，就先左后右入队\n    let n = q.deQueue()\n    console.log(n.value)\n    if (n.left) q.enQueue(n.left)\n    if (n.right) q.enQueue(n.right)\n  }\n}\n```\n接下来先介绍如何在树中寻找最小值或最大数。因为二分搜索树的特性，所以最小值一定在根节点的最左边，最大值相反\n\n```\n// js代码\n\ngetMin() {\n  return this._getMin(this.root).value\n}\n_getMin(node) {\n  if (!node.left) return node\n  return this._getMin(node.left)\n}\ngetMax() {\n  return this._getMax(this.root).value\n}\n_getMax(node) {\n  if (!node.right) return node\n  return this._getMin(node.right)\n}\n```\n\n**向上取整和向下取整**，这两个操作是相反的，所以代码也是类似的，这里只介绍如何向下取整。既然是向下取整，那么根据二分搜索树的特性，值一定在根节点的左侧。只需要一直遍历左子树直到当前节点的值不再大于等于需要的值，然后判断节点是否还拥有右子树。如果有的话，继续上面的递归判断。\n\n```\n// js代码\n\nfloor(v) {\n  let node = this._floor(this.root, v)\n  return node ? node.value : null\n}\n_floor(node, v) {\n  if (!node) return null\n  if (node.value === v) return v\n  // 如果当前节点值还比需要的值大，就继续递归\n  if (node.value > v) {\n    return this._floor(node.left, v)\n  }\n  // 判断当前节点是否拥有右子树\n  let right = this._floor(node.right, v)\n  if (right) return right\n  return node\n}\n```\n排名，这是用于获取给定值的排名或者排名第几的节点的值，这两个操作也是相反的，所以这个只介绍如何获取排名第几的节点的值。对于这个操作而言，我们需要略微的改造点代码，让每个节点拥有一个 size 属性。该属性表示该节点下有多少子节点（包含自身）。\n\n```\n// js代码\n\nclass Node {\n  constructor(value) {\n    this.value = value\n    this.left = null\n    this.right = null\n    // 修改代码\n    this.size = 1\n  }\n}\n// 新增代码\n_getSize(node) {\n  return node ? node.size : 0\n}\n_addChild(node, v) {\n  if (!node) {\n    return new Node(v)\n  }\n  if (node.value > v) {\n    // 修改代码\n    node.size++\n    node.left = this._addChild(node.left, v)\n  } else if (node.value < v) {\n    // 修改代码\n    node.size++\n    node.right = this._addChild(node.right, v)\n  }\n  return node\n}\nselect(k) {\n  let node = this._select(this.root, k)\n  return node ? node.value : null\n}\n_select(node, k) {\n  if (!node) return null\n  // 先获取左子树下有几个节点\n  let size = node.left ? node.left.size : 0\n  // 判断 size 是否大于 k\n  // 如果大于 k，代表所需要的节点在左节点\n  if (size > k) return this._select(node.left, k)\n  // 如果小于 k，代表所需要的节点在右节点\n  // 注意这里需要重新计算 k，减去根节点除了右子树的节点数量\n  if (size < k) return this._select(node.right, k - size - 1)\n  return node\n}\n```\n\n接下来讲解的是二分搜索树中最难实现的部分：删除节点。因为对于删除节点来说，会存在以下几种情况\n\n- 需要删除的节点没有子树\n- 需要删除的节点只有一条子树\n- 需要删除的节点有左右两条树\n\n对于前两种情况很好解决，但是第三种情况就有难度了，所以先来实现相对简单的操作：删除最小节点，对于删除最小节点来说，是不存在第三种情况的，删除最大节点操作是和删除最小节点相反的，所以这里也就不再赘述。\n\n```\n// js代码\n\ndelectMin() {\n  this.root = this._delectMin(this.root)\n  console.log(this.root)\n}\n_delectMin(node) {\n  // 一直递归左子树\n  // 如果左子树为空，就判断节点是否拥有右子树\n  // 有右子树的话就把需要删除的节点替换为右子树\n  if ((node != null) & !node.left) return node.right\n  node.left = this._delectMin(node.left)\n  // 最后需要重新维护下节点的 `size`\n  node.size = this._getSize(node.left) + this._getSize(node.right) + 1\n  return node\n}\n```\n\n最后讲解的就是如何删除任意节点了。对于这个操作，T.Hibbard 在 1962 年提出了解决这个难题的办法，也就是如何解决第三种情况。\n\n当遇到这种情况时，需要取出当前节点的后继节点（也就是当前节点右子树的最小节点）来替换需要删除的节点。然后将需要删除节点的左子树赋值给后继结点，右子树删除后继结点后赋值给他。\n\n你如果对于这个解决办法有疑问的话，可以这样考虑。因为二分搜索树的特性，父节点一定比所有左子节点大，比所有右子节点小。那么当需要删除父节点时，势必需要拿出一个比父节点大的节点来替换父节点。这个节点肯定不存在于左子树，必然存在于右子树。然后又需要保持父节点都是比右子节点小的，那么就可以取出右子树中最小的那个节点来替换父节点。\n\n```\n// js代码\n\ndelect(v) {\n  this.root = this._delect(this.root, v)\n}\n_delect(node, v) {\n  if (!node) return null\n  // 寻找的节点比当前节点小，去左子树找\n  if (node.value < v) {\n    node.right = this._delect(node.right, v)\n  } else if (node.value > v) {\n    // 寻找的节点比当前节点大，去右子树找\n    node.left = this._delect(node.left, v)\n  } else {\n    // 进入这个条件说明已经找到节点\n    // 先判断节点是否拥有拥有左右子树中的一个\n    // 是的话，将子树返回出去，这里和 `_delectMin` 的操作一样\n    if (!node.left) return node.right\n    if (!node.right) return node.left\n    // 进入这里，代表节点拥有左右子树\n    // 先取出当前节点的后继结点，也就是取当前节点右子树的最小值\n    let min = this._getMin(node.right)\n    // 取出最小值后，删除最小值\n    // 然后把删除节点后的子树赋值给最小值节点\n    min.right = this._delectMin(node.right)\n    // 左子树不动\n    min.left = node.left\n    node = min\n  }\n  // 维护 size\n  node.size = this._getSize(node.left) + this._getSize(node.right) + 1\n  return node\n}\n```\n\n## AVL 树\n> 二分搜索树实际在业务中是受到限制的，因为并不是严格的 O(logN)，在极端情况下会退化成链表，比如加入一组升序的数字就会造成这种情况。\n\n> AVL 树改进了二分搜索树，在 AVL 树中任意节点的左右子树的高度差都不大于 1，这样保证了时间复杂度是严格的 O(logN)。基于此，对 AVL 树增加或删除节点时可能需要旋转树来达到高度的平衡。\n\n### 实现\n因为 AVL 树是改进了二分搜索树，所以部分代码是于二分搜索树重复的，对于重复内容不作再次解析。\n\n对于 AVL 树来说，添加节点会有四种情况\n![lWB0nf.png](https://s2.ax1x.com/2020/01/09/lWB0nf.png)\n\n对于左左情况来说，新增加的节点位于节点 2 的左侧，这时树已经不平衡，需要旋转。因为搜索树的特性，节点比左节点大，比右节点小，所以旋转以后也要实现这个特性。\n\n旋转之前：new < 2 < C < 3 < B < 5 < A，右旋之后节点 3 为根节点，这时候需要将节点 3 的右节点加到节点 5 的左边，最后还需要更新节点的高度。\n\n对于右右情况来说，相反于左左情况，所以不再赘述。\n\n对于左右情况来说，新增加的节点位于节点 4 的右侧。对于这种情况，需要通过两次旋转来达到目的。\n\n首先对节点的左节点左旋，这时树满足左左的情况，再对节点进行一次右旋就可以达到目的。\n\n```\n// js代码\n\nclass Node {\n  constructor(value) {\n    this.value = value\n    this.left = null\n    this.right = null\n    this.height = 1\n  }\n}\n\nclass AVL {\n  constructor() {\n    this.root = null\n  }\n  addNode(v) {\n    this.root = this._addChild(this.root, v)\n  }\n  _addChild(node, v) {\n    if (!node) {\n      return new Node(v)\n    }\n    if (node.value > v) {\n      node.left = this._addChild(node.left, v)\n    } else if (node.value < v) {\n      node.right = this._addChild(node.right, v)\n    } else {\n      node.value = v\n    }\n    node.height =\n      1 + Math.max(this._getHeight(node.left), this._getHeight(node.right))\n    let factor = this._getBalanceFactor(node)\n    // 当需要右旋时，根节点的左树一定比右树高度高\n    if (factor > 1 && this._getBalanceFactor(node.left) >= 0) {\n      return this._rightRotate(node)\n    }\n    // 当需要左旋时，根节点的左树一定比右树高度矮\n    if (factor < -1 && this._getBalanceFactor(node.right) <= 0) {\n      return this._leftRotate(node)\n    }\n    // 左右情况\n    // 节点的左树比右树高，且节点的左树的右树比节点的左树的左树高\n    if (factor > 1 && this._getBalanceFactor(node.left) < 0) {\n      node.left = this._leftRotate(node.left)\n      return this._rightRotate(node)\n    }\n    // 右左情况\n    // 节点的左树比右树矮，且节点的右树的右树比节点的右树的左树矮\n    if (factor < -1 && this._getBalanceFactor(node.right) > 0) {\n      node.right = this._rightRotate(node.right)\n      return this._leftRotate(node)\n    }\n\n    return node\n  }\n  _getHeight(node) {\n    if (!node) return 0\n    return node.height\n  }\n  _getBalanceFactor(node) {\n    return this._getHeight(node.left) - this._getHeight(node.right)\n  }\n  // 节点右旋\n  //           5                    2\n  //         /   \\                /   \\\n  //        2     6   ==>       1      5\n  //       /  \\               /       /  \\\n  //      1    3             new     3    6\n  //     /\n  //    new\n  _rightRotate(node) {\n    // 旋转后新根节点\n    let newRoot = node.left\n    // 需要移动的节点\n    let moveNode = newRoot.right\n    // 节点 2 的右节点改为节点 5\n    newRoot.right = node\n    // 节点 5 左节点改为节点 3\n    node.left = moveNode\n    // 更新树的高度\n    node.height =\n      1 + Math.max(this._getHeight(node.left), this._getHeight(node.right))\n    newRoot.height =\n      1 +\n      Math.max(this._getHeight(newRoot.left), this._getHeight(newRoot.right))\n\n    return newRoot\n  }\n  // 节点左旋\n  //           4                    6\n  //         /   \\                /   \\\n  //        2     6   ==>       4      7\n  //             /  \\         /   \\      \\\n  //            5     7      2     5      new\n  //                   \\\n  //                    new\n  _leftRotate(node) {\n    // 旋转后新根节点\n    let newRoot = node.right\n    // 需要移动的节点\n    let moveNode = newRoot.left\n    // 节点 6 的左节点改为节点 4\n    newRoot.left = node\n    // 节点 4 右节点改为节点 5\n    node.right = moveNode\n    // 更新树的高度\n    node.height =\n      1 + Math.max(this._getHeight(node.left), this._getHeight(node.right))\n    newRoot.height =\n      1 +\n      Math.max(this._getHeight(newRoot.left), this._getHeight(newRoot.right))\n\n    return newRoot\n  }\n}\n```\n\n# Trie\n> 在计算机科学，trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。\n简单点来说，这个结构的作用大多是为了方便搜索字符串，该树有以下几个特点\n- 根节点代表空字符串，每个节点都有 N（假如搜索英文字符，就有 26 条） 条链接，每条链接代表一个字符\n- 节点不存储字符，只有路径才存储，这点和其他的树结构不同\n- 从根节点开始到任意一个节点，将沿途经过的字符连接起来就是该节点对应的字符串\n\n## 实现\n总得来说 Trie 的实现相比别的树结构来说简单的很多，实现就以搜索英文字符为例。\n\n```\n// js代码\n\nclass TrieNode {\n  constructor() {\n    // 代表每个字符经过节点的次数\n    this.path = 0\n    // 代表到该节点的字符串有几个\n    this.end = 0\n    // 链接\n    this.next = new Array(26).fill(null)\n  }\n}\nclass Trie {\n  constructor() {\n    // 根节点，代表空字符\n    this.root = new TrieNode()\n  }\n  // 插入字符串\n  insert(str) {\n    if (!str) return\n    let node = this.root\n    for (let i = 0; i < str.length; i++) {\n      // 获得字符先对应的索引\n      let index = str[i].charCodeAt() - 'a'.charCodeAt()\n      // 如果索引对应没有值，就创建\n      if (!node.next[index]) {\n        node.next[index] = new TrieNode()\n      }\n      node.path += 1\n      node = node.next[index]\n    }\n    node.end += 1\n  }\n  // 搜索字符串出现的次数\n  search(str) {\n    if (!str) return\n    let node = this.root\n    for (let i = 0; i < str.length; i++) {\n      let index = str[i].charCodeAt() - 'a'.charCodeAt()\n      // 如果索引对应没有值，代表没有需要搜素的字符串\n      if (!node.next[index]) {\n        return 0\n      }\n      node = node.next[index]\n    }\n    return node.end\n  }\n  // 删除字符串\n  delete(str) {\n    if (!this.search(str)) return\n    let node = this.root\n    for (let i = 0; i < str.length; i++) {\n      let index = str[i].charCodeAt() - 'a'.charCodeAt()\n      // 如果索引对应的节点的 Path 为 0，代表经过该节点的字符串\n      // 已经一个，直接删除即可\n      if (--node.next[index].path == 0) {\n        node.next[index] = null\n        return\n      }\n      node = node.next[index]\n    }\n    node.end -= 1\n  }\n}\n```\n\n# 并查集\n> 并查集是一种特殊的树结构，用于处理一些不交集的合并及查询问题。该结构中每个节点都有一个父节点，如果只有当前一个节点，那么该节点的父节点指向自己。\n这个结构中有两个重要的操作，分别是：\n- Find：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子集。\n- Union：将两个子集合并成同一个集合。\n\n## 实现\n```\n// js代码\n\nclass DisjointSet {\n  // 初始化样本\n  constructor(count) {\n    // 初始化时，每个节点的父节点都是自己\n    this.parent = new Array(count)\n    // 用于记录树的深度，优化搜索复杂度\n    this.rank = new Array(count)\n    for (let i = 0; i < count; i++) {\n      this.parent[i] = i\n      this.rank[i] = 1\n    }\n  }\n  find(p) {\n    // 寻找当前节点的父节点是否为自己，不是的话表示还没找到\n    // 开始进行路径压缩优化\n    // 假设当前节点父节点为 A\n    // 将当前节点挂载到 A 节点的父节点上，达到压缩深度的目的\n    while (p != this.parent[p]) {\n      this.parent[p] = this.parent[this.parent[p]]\n      p = this.parent[p]\n    }\n    return p\n  }\n  isConnected(p, q) {\n    return this.find(p) === this.find(q)\n  }\n  // 合并\n  union(p, q) {\n    // 找到两个数字的父节点\n    let i = this.find(p)\n    let j = this.find(q)\n    if (i === j) return\n    // 判断两棵树的深度，深度小的加到深度大的树下面\n    // 如果两棵树深度相等，那就无所谓怎么加\n    if (this.rank[i] < this.rank[j]) {\n      this.parent[i] = j\n    } else if (this.rank[i] > this.rank[j]) {\n      this.parent[j] = i\n    } else {\n      this.parent[i] = j\n      this.rank[j] += 1\n    }\n  }\n}\n```\n\n# 堆\n堆通常是一个可以被看做一棵树的数组对象。\n堆的实现通过构造**二叉堆**，实为二叉树的一种。这种数据结构具有以下性质。\n- 任意节点小于（或大于）它的所有子节点\n- 堆总是一棵完全树。即除了最底层，其他层的节点都被元素填满，且最底层从左到右填入。\n将根节点最大的堆叫做**最大堆**或**大根堆**，根节点最小的堆叫做**最小堆**或**小根堆**。\n优先队列也完全可以用堆来实现，操作是一模一样的。\n\n## 实现大根堆\n堆的每个节点的左边子节点索引是 i * 2 + 1，右边是 i * 2 + 2，父节点是 (i - 1) /2。\n堆有两个核心的操作，分别是 shiftUp 和 shiftDown 。前者用于添加元素，后者用于删除根节点。\nshiftUp 的核心思路是一路将节点与父节点对比大小，如果比父节点大，就和父节点交换位置。\nshiftDown 的核心思路是先将根节点和末尾交换位置，然后移除末尾元素。接下来循环判断父节点和两个子节点的大小，如果子节点大，就把最大的子节点和父节点交换。\n\n```\n// js代码\n\nclass MaxHeap {\n  constructor() {\n    this.heap = []\n  }\n  size() {\n    return this.heap.length\n  }\n  empty() {\n    return this.size() == 0\n  }\n  add(item) {\n    this.heap.push(item)\n    this._shiftUp(this.size() - 1)\n  }\n  removeMax() {\n    this._shiftDown(0)\n  }\n  getParentIndex(k) {\n    return parseInt((k - 1) / 2)\n  }\n  getLeftIndex(k) {\n    return k * 2 + 1\n  }\n  _shiftUp(k) {\n    // 如果当前节点比父节点大，就交换\n    while (this.heap[k] > this.heap[this.getParentIndex(k)]) {\n      this._swap(k, this.getParentIndex(k))\n      // 将索引变成父节点\n      k = this.getParentIndex(k)\n    }\n  }\n  _shiftDown(k) {\n    // 交换首位并删除末尾\n    this._swap(k, this.size() - 1)\n    this.heap.splice(this.size() - 1, 1)\n    // 判断节点是否有左孩子，因为二叉堆的特性，有右必有左\n    while (this.getLeftIndex(k) < this.size()) {\n      let j = this.getLeftIndex(k)\n      // 判断是否有右孩子，并且右孩子是否大于左孩子\n      if (j + 1 < this.size() && this.heap[j + 1] > this.heap[j]) j++\n      // 判断父节点是否已经比子节点都大\n      if (this.heap[k] >= this.heap[j]) break\n      this._swap(k, j)\n      k = j\n    }\n  }\n  _swap(left, right) {\n    let rightValue = this.heap[right]\n    this.heap[right] = this.heap[left]\n    this.heap[left] = rightValue\n  }\n}\n```","source":"_posts/FE-guide-data-structure.md","raw":"---\ntitle: 计算机通识 ---- 数据结构\ndate: 2020-01-09 15:35:00\ncategories: \n\t- 前端技术\n\t- 计算机通识\ntags: \n\t- 面试\n---\n> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n网络相关的知识虽然平时在编码阶段很少遇到，但是并不是说它不重要，尤其是前端优化层面，能从网络传输过程优化的点有很多，所以，我们需要好好掌握网络相关的知识，接下来，我将会将我了解到的网络相关的知识点进行一一整理\n\n# 栈 Heap\n> 栈是一个线性结构，在计算机中是一个相当常见的数据结构。\n> 栈的特点是只能在某一端添加或删除数据，遵循**先进后出(FILO)**的原则\n\n## 实现\n每种数据结构都可以用很多种方式来实现，其实可以把栈看成是数组的一个子集，所以这里使用数组来实现\n```\n// js代码\nclass Stack {\n  constructor() {\n    this.stack = []\n  }\n  push(item) {\n    this.stack.push(item)\n  }\n  pop() {\n    this.stack.pop()\n  }\n  peek() { // 取最后一项\n    return this.stack[this.getCount() - 1]\n  }\n  getCount() {\n    return this.stack.length\n  }\n  isEmpty() {\n    return this.getCount() === 0\n  }\n}\n```\n## 应用\n选取了 [LeetCode 上序号为 20 的题目](https://leetcode-cn.com/problems/valid-parentheses/)\n\n题意是匹配括号，可以通过栈的特性来完成这道题目\n```\nvar isValid = function(str) {\n  let map = {\n    '(': -1,\n    ')': 1,\n    '[': -2,\n    ']': 2,\n    '{': -3,\n    '}': 3\n  }\n  let stack = [] // 空数组\n  for (let i = 0; i < str.length; i++) { // 遍历字符串每个字符\n    if (map[str[i]] < 0) { // 如果是左边括号，入栈\n      stack.push(str[i])\n    } else { // 否则出栈，判断左右括号加到一起是不是0\n      let last = stack.pop()\n      if (map[last] + map[str[i]] != 0) return false\n    }\n  }\n  if (stack.length > 0) return false // 循环完成后，判断数组中时候还有剩下的，有剩下的说明括号没闭合\n  return true // 否则没剩下的，都闭合了\n}\n```\n\n# 队列\n> 队列一个线性结构，特点是在某一端添加数据，在另一端删除数据，遵循**先进先出(FIFO)**的原则。\n\n## 实现\n这里会讲解两种实现队列的方式，分别是**单链队列**和**循环队列**。\n\n- 链队列即队列的链式存储结构，结构上就是一个单链表，但数据只能是头进尾出。链式结构更加的灵活，特别是在存储空间上，基本不会出现溢出的情况，所以不用像循环队列一样判断队列是否已满，且空间的利用率相对较高。\n  - 链队列front指向头结点，头结点不存储数据，rear指向队尾结点。\n\n\n- 循环队列即为头尾相接的队列，它的最大存储空间和顺序队列一样由数组界定，但队列的长度并不一定等同于数组的长度；循环队列的队首和队尾分别由两个指针front、rear标识，于是这样就能做到首尾相接。\n\n- 链队列：为操作方便，给链队列添加一个头结点\n- 循环队列：附设两个指针front和rear分别指示队列头元素及尾元素的位置，每当插入新的队尾元素是，尾指针加1；每当删除队列头元素是，头指针加1\n  - 如果用循环队列，则必须设定一个最大队列长度；若无法确定最大长度，则宜采用链队列。\n\n\n### 单链队列\n```\n// js代码\n\nclass Queue {\n  constructor() {\n    this.queue = []\n  }\n  enQueue(item) {\n    this.queue.push(item)\n  }\n  deQueue() {\n    return this.queue.shift()\n  }\n  getHeader() {\n    return this.queue[0]\n  }\n  getLength() {\n    return this.queue.length\n  }\n  isEmpty() {\n    return this.getLength() === 0\n  }\n}\n```\n因为单链队列在出队操作的时候需要 O(n) 的时间复杂度，所以引入了循环队列。\n循环队列的出队操作平均是 O(1) 的时间复杂度。\n\n### 循环队列\n```\n// js代码\n\nclass SqQueue {\n  constructor(length) {\n    this.queue = new Array(length + 1)\n    // 队头\n    this.first = 0\n    // 队尾\n    this.last = 0\n    // 当前队列大小\n    this.size = 0\n  }\n  enQueue(item) {\n    // 判断队尾 + 1 是否为队头\n    // 如果是就代表需要扩容数组\n    // % this.queue.length 是为了防止数组越界\n    if (this.first === (this.last + 1) % this.queue.length) {\n      this.resize(this.getLength() * 2 + 1)\n    }\n    this.queue[this.last] = item\n    this.size++\n    this.last = (this.last + 1) % this.queue.length\n  }\n  deQueue() {\n    if (this.isEmpty()) {\n      throw Error('Queue is empty')\n    }\n    let r = this.queue[this.first]\n    this.queue[this.first] = null\n    this.first = (this.first + 1) % this.queue.length\n    this.size--\n    // 判断当前队列大小是否过小\n    // 为了保证不浪费空间，在队列空间等于总长度四分之一时\n    // 且不为 2 时缩小总长度为当前的一半\n    if (this.size === this.getLength() / 4 && this.getLength() / 2 !== 0) {\n      this.resize(this.getLength() / 2)\n    }\n    return r\n  }\n  getHeader() {\n    if (this.isEmpty()) {\n      throw Error('Queue is empty')\n    }\n    return this.queue[this.first]\n  }\n  getLength() {\n    return this.queue.length - 1\n  }\n  isEmpty() {\n    return this.first === this.last\n  }\n  resize(length) {\n    let q = new Array(length)\n    for (let i = 0; i < length; i++) {\n      q[i] = this.queue[(i + this.first) % this.queue.length]\n    }\n    this.queue = q\n    this.first = 0\n    this.last = this.size\n  }\n}\n```\n\n# 链表\n> 链表是一个线性结构，同时也是一个天然的递归结构。链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。\n\n## 实现\n单向链表\n```\n// js代码\n\nclass Node {\n  constructor(v, next) {\n    this.value = v\n    this.next = next\n  }\n}\nclass LinkList {\n  constructor() {\n    // 链表长度\n    this.size = 0\n    // 虚拟头部\n    this.dummyNode = new Node(null, null)\n  }\n  find(header, index, currentIndex) {\n    if (index === currentIndex) return header\n    return this.find(header.next, index, currentIndex + 1)\n  }\n  addNode(v, index) {\n    this.checkIndex(index)\n    // 当往链表末尾插入时，prev.next 为空\n    // 其他情况时，因为要插入节点，所以插入的节点\n    // 的 next 应该是 prev.next\n    // 然后设置 prev.next 为插入的节点\n    let prev = this.find(this.dummyNode, index, 0)\n    prev.next = new Node(v, prev.next)\n    this.size++\n    return prev.next\n  }\n  insertNode(v, index) {\n    return this.addNode(v, index)\n  }\n  addToFirst(v) {\n    return this.addNode(v, 0)\n  }\n  addToLast(v) {\n    return this.addNode(v, this.size)\n  }\n  removeNode(index, isLast) {\n    this.checkIndex(index)\n    index = isLast ? index - 1 : index\n    let prev = this.find(this.dummyNode, index, 0)\n    let node = prev.next\n    prev.next = node.next\n    node.next = null\n    this.size--\n    return node\n  }\n  removeFirstNode() {\n    return this.removeNode(0)\n  }\n  removeLastNode() {\n    return this.removeNode(this.size, true)\n  }\n  checkIndex(index) {\n    if (index < 0 || index > this.size) throw Error('Index error')\n  }\n  getNode(index) {\n    this.checkIndex(index)\n    if (this.isEmpty()) return\n    return this.find(this.dummyNode, index, 0).next\n  }\n  isEmpty() {\n    return this.size === 0\n  }\n  getSize() {\n    return this.size\n  }\n}\n```\n\n# 树\n## 二叉树\n树拥有很多种结构，二叉树是树中最常用的结构，同时也是一个天然的递归结构。\n\n二叉树拥有一个根节点，每个节点至多拥有两个子节点，分别为：左节点和右节点。树的最底部节点称之为叶节点，当一颗树的叶数量数量为满时，该树可以称之为满二叉树。\n\n## 二分搜索树\n二分搜索树也是二叉树，拥有二叉树的特性。但是区别在于二分搜索树每个节点的值都比他的左子树的值大，比右子树的值小。\n\n这种存储方式很适合于数据搜索。如下图所示，当需要查找 6 的时候，因为需要查找的值比根节点的值大，所以只需要在根节点的右子树上寻找，大大提高了搜索效率。\n\n### 实现\n```\n// js代码\n\nclass Node {\n  constructor(value) {\n    this.value = value\n    this.left = null\n    this.right = null\n  }\n}\nclass BST {\n  constructor() {\n    this.root = null\n    this.size = 0\n  }\n  getSize() {\n    return this.size\n  }\n  isEmpty() {\n    return this.size === 0\n  }\n  addNode(v) {\n    this.root = this._addChild(this.root, v)\n  }\n  // 添加节点时，需要比较添加的节点值和当前\n  // 节点值的大小\n  _addChild(node, v) {\n    if (!node) {\n      this.size++\n      return new Node(v)\n    }\n    if (node.value > v) {\n      node.left = this._addChild(node.left, v)\n    } else if (node.value < v) {\n      node.right = this._addChild(node.right, v)\n    }\n    return node\n  }\n}\n```\n\n以上是最基本的二分搜索树实现，接下来实现树的遍历。\n\n对于树的遍历来说，有三种遍历方法，分别是**先序遍历**、**中序遍历**、**后序遍历**。\n\n三种遍历的区别在于何时访问节点。在遍历树的过程中，每个节点都会遍历三次，分别是遍历到自己，遍历左子树和遍历右子树。如果需要实现先序遍历，那么只需要第一次遍历到节点时进行操作即可。\n\n以下都是递归实现.\n\n```\n// js代码\n\n// 先序遍历可用于打印树的结构\n// 先序遍历先访问根节点，然后访问左节点，最后访问右节点。\npreTraversal() {\n  this._pre(this.root)\n}\n_pre(node) {\n  if (node) {\n    console.log(node.value)\n    this._pre(node.left)\n    this._pre(node.right)\n  }\n}\n// 中序遍历可用于排序\n// 对于 BST 来说，中序遍历可以实现一次遍历就\n// 得到有序的值\n// 中序遍历表示先访问左节点，然后访问根节点，最后访问右节点。\nmidTraversal() {\n  this._mid(this.root)\n}\n_mid(node) {\n  if (node) {\n    this._mid(node.left)\n    console.log(node.value)\n    this._mid(node.right)\n  }\n}\n// 后序遍历可用于先操作子节点\n// 再操作父节点的场景\n// 后序遍历表示先访问左节点，然后访问右节点，最后访问根节点。\nbackTraversal() {\n  this._back(this.root)\n}\n_back(node) {\n  if (node) {\n    this._back(node.left)\n    this._back(node.right)\n    console.log(node.value)\n  }\n}\n```\n\n以上的这几种遍历都可以称之为深度遍历，对应的还有种遍历叫做广度遍历，也就是一层层地遍历树。对于广度遍历来说，我们需要利用之前讲过的队列结构来完成。\n\n```\n// js代码\n\nbreadthTraversal() {\n  if (!this.root) return null\n  let q = new Queue()\n  // 将根节点入队\n  q.enQueue(this.root)\n  // 循环判断队列是否为空，为空\n  // 代表树遍历完毕\n  while (!q.isEmpty()) {\n    // 将队首出队，判断是否有左右子树\n    // 有的话，就先左后右入队\n    let n = q.deQueue()\n    console.log(n.value)\n    if (n.left) q.enQueue(n.left)\n    if (n.right) q.enQueue(n.right)\n  }\n}\n```\n接下来先介绍如何在树中寻找最小值或最大数。因为二分搜索树的特性，所以最小值一定在根节点的最左边，最大值相反\n\n```\n// js代码\n\ngetMin() {\n  return this._getMin(this.root).value\n}\n_getMin(node) {\n  if (!node.left) return node\n  return this._getMin(node.left)\n}\ngetMax() {\n  return this._getMax(this.root).value\n}\n_getMax(node) {\n  if (!node.right) return node\n  return this._getMin(node.right)\n}\n```\n\n**向上取整和向下取整**，这两个操作是相反的，所以代码也是类似的，这里只介绍如何向下取整。既然是向下取整，那么根据二分搜索树的特性，值一定在根节点的左侧。只需要一直遍历左子树直到当前节点的值不再大于等于需要的值，然后判断节点是否还拥有右子树。如果有的话，继续上面的递归判断。\n\n```\n// js代码\n\nfloor(v) {\n  let node = this._floor(this.root, v)\n  return node ? node.value : null\n}\n_floor(node, v) {\n  if (!node) return null\n  if (node.value === v) return v\n  // 如果当前节点值还比需要的值大，就继续递归\n  if (node.value > v) {\n    return this._floor(node.left, v)\n  }\n  // 判断当前节点是否拥有右子树\n  let right = this._floor(node.right, v)\n  if (right) return right\n  return node\n}\n```\n排名，这是用于获取给定值的排名或者排名第几的节点的值，这两个操作也是相反的，所以这个只介绍如何获取排名第几的节点的值。对于这个操作而言，我们需要略微的改造点代码，让每个节点拥有一个 size 属性。该属性表示该节点下有多少子节点（包含自身）。\n\n```\n// js代码\n\nclass Node {\n  constructor(value) {\n    this.value = value\n    this.left = null\n    this.right = null\n    // 修改代码\n    this.size = 1\n  }\n}\n// 新增代码\n_getSize(node) {\n  return node ? node.size : 0\n}\n_addChild(node, v) {\n  if (!node) {\n    return new Node(v)\n  }\n  if (node.value > v) {\n    // 修改代码\n    node.size++\n    node.left = this._addChild(node.left, v)\n  } else if (node.value < v) {\n    // 修改代码\n    node.size++\n    node.right = this._addChild(node.right, v)\n  }\n  return node\n}\nselect(k) {\n  let node = this._select(this.root, k)\n  return node ? node.value : null\n}\n_select(node, k) {\n  if (!node) return null\n  // 先获取左子树下有几个节点\n  let size = node.left ? node.left.size : 0\n  // 判断 size 是否大于 k\n  // 如果大于 k，代表所需要的节点在左节点\n  if (size > k) return this._select(node.left, k)\n  // 如果小于 k，代表所需要的节点在右节点\n  // 注意这里需要重新计算 k，减去根节点除了右子树的节点数量\n  if (size < k) return this._select(node.right, k - size - 1)\n  return node\n}\n```\n\n接下来讲解的是二分搜索树中最难实现的部分：删除节点。因为对于删除节点来说，会存在以下几种情况\n\n- 需要删除的节点没有子树\n- 需要删除的节点只有一条子树\n- 需要删除的节点有左右两条树\n\n对于前两种情况很好解决，但是第三种情况就有难度了，所以先来实现相对简单的操作：删除最小节点，对于删除最小节点来说，是不存在第三种情况的，删除最大节点操作是和删除最小节点相反的，所以这里也就不再赘述。\n\n```\n// js代码\n\ndelectMin() {\n  this.root = this._delectMin(this.root)\n  console.log(this.root)\n}\n_delectMin(node) {\n  // 一直递归左子树\n  // 如果左子树为空，就判断节点是否拥有右子树\n  // 有右子树的话就把需要删除的节点替换为右子树\n  if ((node != null) & !node.left) return node.right\n  node.left = this._delectMin(node.left)\n  // 最后需要重新维护下节点的 `size`\n  node.size = this._getSize(node.left) + this._getSize(node.right) + 1\n  return node\n}\n```\n\n最后讲解的就是如何删除任意节点了。对于这个操作，T.Hibbard 在 1962 年提出了解决这个难题的办法，也就是如何解决第三种情况。\n\n当遇到这种情况时，需要取出当前节点的后继节点（也就是当前节点右子树的最小节点）来替换需要删除的节点。然后将需要删除节点的左子树赋值给后继结点，右子树删除后继结点后赋值给他。\n\n你如果对于这个解决办法有疑问的话，可以这样考虑。因为二分搜索树的特性，父节点一定比所有左子节点大，比所有右子节点小。那么当需要删除父节点时，势必需要拿出一个比父节点大的节点来替换父节点。这个节点肯定不存在于左子树，必然存在于右子树。然后又需要保持父节点都是比右子节点小的，那么就可以取出右子树中最小的那个节点来替换父节点。\n\n```\n// js代码\n\ndelect(v) {\n  this.root = this._delect(this.root, v)\n}\n_delect(node, v) {\n  if (!node) return null\n  // 寻找的节点比当前节点小，去左子树找\n  if (node.value < v) {\n    node.right = this._delect(node.right, v)\n  } else if (node.value > v) {\n    // 寻找的节点比当前节点大，去右子树找\n    node.left = this._delect(node.left, v)\n  } else {\n    // 进入这个条件说明已经找到节点\n    // 先判断节点是否拥有拥有左右子树中的一个\n    // 是的话，将子树返回出去，这里和 `_delectMin` 的操作一样\n    if (!node.left) return node.right\n    if (!node.right) return node.left\n    // 进入这里，代表节点拥有左右子树\n    // 先取出当前节点的后继结点，也就是取当前节点右子树的最小值\n    let min = this._getMin(node.right)\n    // 取出最小值后，删除最小值\n    // 然后把删除节点后的子树赋值给最小值节点\n    min.right = this._delectMin(node.right)\n    // 左子树不动\n    min.left = node.left\n    node = min\n  }\n  // 维护 size\n  node.size = this._getSize(node.left) + this._getSize(node.right) + 1\n  return node\n}\n```\n\n## AVL 树\n> 二分搜索树实际在业务中是受到限制的，因为并不是严格的 O(logN)，在极端情况下会退化成链表，比如加入一组升序的数字就会造成这种情况。\n\n> AVL 树改进了二分搜索树，在 AVL 树中任意节点的左右子树的高度差都不大于 1，这样保证了时间复杂度是严格的 O(logN)。基于此，对 AVL 树增加或删除节点时可能需要旋转树来达到高度的平衡。\n\n### 实现\n因为 AVL 树是改进了二分搜索树，所以部分代码是于二分搜索树重复的，对于重复内容不作再次解析。\n\n对于 AVL 树来说，添加节点会有四种情况\n![lWB0nf.png](https://s2.ax1x.com/2020/01/09/lWB0nf.png)\n\n对于左左情况来说，新增加的节点位于节点 2 的左侧，这时树已经不平衡，需要旋转。因为搜索树的特性，节点比左节点大，比右节点小，所以旋转以后也要实现这个特性。\n\n旋转之前：new < 2 < C < 3 < B < 5 < A，右旋之后节点 3 为根节点，这时候需要将节点 3 的右节点加到节点 5 的左边，最后还需要更新节点的高度。\n\n对于右右情况来说，相反于左左情况，所以不再赘述。\n\n对于左右情况来说，新增加的节点位于节点 4 的右侧。对于这种情况，需要通过两次旋转来达到目的。\n\n首先对节点的左节点左旋，这时树满足左左的情况，再对节点进行一次右旋就可以达到目的。\n\n```\n// js代码\n\nclass Node {\n  constructor(value) {\n    this.value = value\n    this.left = null\n    this.right = null\n    this.height = 1\n  }\n}\n\nclass AVL {\n  constructor() {\n    this.root = null\n  }\n  addNode(v) {\n    this.root = this._addChild(this.root, v)\n  }\n  _addChild(node, v) {\n    if (!node) {\n      return new Node(v)\n    }\n    if (node.value > v) {\n      node.left = this._addChild(node.left, v)\n    } else if (node.value < v) {\n      node.right = this._addChild(node.right, v)\n    } else {\n      node.value = v\n    }\n    node.height =\n      1 + Math.max(this._getHeight(node.left), this._getHeight(node.right))\n    let factor = this._getBalanceFactor(node)\n    // 当需要右旋时，根节点的左树一定比右树高度高\n    if (factor > 1 && this._getBalanceFactor(node.left) >= 0) {\n      return this._rightRotate(node)\n    }\n    // 当需要左旋时，根节点的左树一定比右树高度矮\n    if (factor < -1 && this._getBalanceFactor(node.right) <= 0) {\n      return this._leftRotate(node)\n    }\n    // 左右情况\n    // 节点的左树比右树高，且节点的左树的右树比节点的左树的左树高\n    if (factor > 1 && this._getBalanceFactor(node.left) < 0) {\n      node.left = this._leftRotate(node.left)\n      return this._rightRotate(node)\n    }\n    // 右左情况\n    // 节点的左树比右树矮，且节点的右树的右树比节点的右树的左树矮\n    if (factor < -1 && this._getBalanceFactor(node.right) > 0) {\n      node.right = this._rightRotate(node.right)\n      return this._leftRotate(node)\n    }\n\n    return node\n  }\n  _getHeight(node) {\n    if (!node) return 0\n    return node.height\n  }\n  _getBalanceFactor(node) {\n    return this._getHeight(node.left) - this._getHeight(node.right)\n  }\n  // 节点右旋\n  //           5                    2\n  //         /   \\                /   \\\n  //        2     6   ==>       1      5\n  //       /  \\               /       /  \\\n  //      1    3             new     3    6\n  //     /\n  //    new\n  _rightRotate(node) {\n    // 旋转后新根节点\n    let newRoot = node.left\n    // 需要移动的节点\n    let moveNode = newRoot.right\n    // 节点 2 的右节点改为节点 5\n    newRoot.right = node\n    // 节点 5 左节点改为节点 3\n    node.left = moveNode\n    // 更新树的高度\n    node.height =\n      1 + Math.max(this._getHeight(node.left), this._getHeight(node.right))\n    newRoot.height =\n      1 +\n      Math.max(this._getHeight(newRoot.left), this._getHeight(newRoot.right))\n\n    return newRoot\n  }\n  // 节点左旋\n  //           4                    6\n  //         /   \\                /   \\\n  //        2     6   ==>       4      7\n  //             /  \\         /   \\      \\\n  //            5     7      2     5      new\n  //                   \\\n  //                    new\n  _leftRotate(node) {\n    // 旋转后新根节点\n    let newRoot = node.right\n    // 需要移动的节点\n    let moveNode = newRoot.left\n    // 节点 6 的左节点改为节点 4\n    newRoot.left = node\n    // 节点 4 右节点改为节点 5\n    node.right = moveNode\n    // 更新树的高度\n    node.height =\n      1 + Math.max(this._getHeight(node.left), this._getHeight(node.right))\n    newRoot.height =\n      1 +\n      Math.max(this._getHeight(newRoot.left), this._getHeight(newRoot.right))\n\n    return newRoot\n  }\n}\n```\n\n# Trie\n> 在计算机科学，trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。\n简单点来说，这个结构的作用大多是为了方便搜索字符串，该树有以下几个特点\n- 根节点代表空字符串，每个节点都有 N（假如搜索英文字符，就有 26 条） 条链接，每条链接代表一个字符\n- 节点不存储字符，只有路径才存储，这点和其他的树结构不同\n- 从根节点开始到任意一个节点，将沿途经过的字符连接起来就是该节点对应的字符串\n\n## 实现\n总得来说 Trie 的实现相比别的树结构来说简单的很多，实现就以搜索英文字符为例。\n\n```\n// js代码\n\nclass TrieNode {\n  constructor() {\n    // 代表每个字符经过节点的次数\n    this.path = 0\n    // 代表到该节点的字符串有几个\n    this.end = 0\n    // 链接\n    this.next = new Array(26).fill(null)\n  }\n}\nclass Trie {\n  constructor() {\n    // 根节点，代表空字符\n    this.root = new TrieNode()\n  }\n  // 插入字符串\n  insert(str) {\n    if (!str) return\n    let node = this.root\n    for (let i = 0; i < str.length; i++) {\n      // 获得字符先对应的索引\n      let index = str[i].charCodeAt() - 'a'.charCodeAt()\n      // 如果索引对应没有值，就创建\n      if (!node.next[index]) {\n        node.next[index] = new TrieNode()\n      }\n      node.path += 1\n      node = node.next[index]\n    }\n    node.end += 1\n  }\n  // 搜索字符串出现的次数\n  search(str) {\n    if (!str) return\n    let node = this.root\n    for (let i = 0; i < str.length; i++) {\n      let index = str[i].charCodeAt() - 'a'.charCodeAt()\n      // 如果索引对应没有值，代表没有需要搜素的字符串\n      if (!node.next[index]) {\n        return 0\n      }\n      node = node.next[index]\n    }\n    return node.end\n  }\n  // 删除字符串\n  delete(str) {\n    if (!this.search(str)) return\n    let node = this.root\n    for (let i = 0; i < str.length; i++) {\n      let index = str[i].charCodeAt() - 'a'.charCodeAt()\n      // 如果索引对应的节点的 Path 为 0，代表经过该节点的字符串\n      // 已经一个，直接删除即可\n      if (--node.next[index].path == 0) {\n        node.next[index] = null\n        return\n      }\n      node = node.next[index]\n    }\n    node.end -= 1\n  }\n}\n```\n\n# 并查集\n> 并查集是一种特殊的树结构，用于处理一些不交集的合并及查询问题。该结构中每个节点都有一个父节点，如果只有当前一个节点，那么该节点的父节点指向自己。\n这个结构中有两个重要的操作，分别是：\n- Find：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子集。\n- Union：将两个子集合并成同一个集合。\n\n## 实现\n```\n// js代码\n\nclass DisjointSet {\n  // 初始化样本\n  constructor(count) {\n    // 初始化时，每个节点的父节点都是自己\n    this.parent = new Array(count)\n    // 用于记录树的深度，优化搜索复杂度\n    this.rank = new Array(count)\n    for (let i = 0; i < count; i++) {\n      this.parent[i] = i\n      this.rank[i] = 1\n    }\n  }\n  find(p) {\n    // 寻找当前节点的父节点是否为自己，不是的话表示还没找到\n    // 开始进行路径压缩优化\n    // 假设当前节点父节点为 A\n    // 将当前节点挂载到 A 节点的父节点上，达到压缩深度的目的\n    while (p != this.parent[p]) {\n      this.parent[p] = this.parent[this.parent[p]]\n      p = this.parent[p]\n    }\n    return p\n  }\n  isConnected(p, q) {\n    return this.find(p) === this.find(q)\n  }\n  // 合并\n  union(p, q) {\n    // 找到两个数字的父节点\n    let i = this.find(p)\n    let j = this.find(q)\n    if (i === j) return\n    // 判断两棵树的深度，深度小的加到深度大的树下面\n    // 如果两棵树深度相等，那就无所谓怎么加\n    if (this.rank[i] < this.rank[j]) {\n      this.parent[i] = j\n    } else if (this.rank[i] > this.rank[j]) {\n      this.parent[j] = i\n    } else {\n      this.parent[i] = j\n      this.rank[j] += 1\n    }\n  }\n}\n```\n\n# 堆\n堆通常是一个可以被看做一棵树的数组对象。\n堆的实现通过构造**二叉堆**，实为二叉树的一种。这种数据结构具有以下性质。\n- 任意节点小于（或大于）它的所有子节点\n- 堆总是一棵完全树。即除了最底层，其他层的节点都被元素填满，且最底层从左到右填入。\n将根节点最大的堆叫做**最大堆**或**大根堆**，根节点最小的堆叫做**最小堆**或**小根堆**。\n优先队列也完全可以用堆来实现，操作是一模一样的。\n\n## 实现大根堆\n堆的每个节点的左边子节点索引是 i * 2 + 1，右边是 i * 2 + 2，父节点是 (i - 1) /2。\n堆有两个核心的操作，分别是 shiftUp 和 shiftDown 。前者用于添加元素，后者用于删除根节点。\nshiftUp 的核心思路是一路将节点与父节点对比大小，如果比父节点大，就和父节点交换位置。\nshiftDown 的核心思路是先将根节点和末尾交换位置，然后移除末尾元素。接下来循环判断父节点和两个子节点的大小，如果子节点大，就把最大的子节点和父节点交换。\n\n```\n// js代码\n\nclass MaxHeap {\n  constructor() {\n    this.heap = []\n  }\n  size() {\n    return this.heap.length\n  }\n  empty() {\n    return this.size() == 0\n  }\n  add(item) {\n    this.heap.push(item)\n    this._shiftUp(this.size() - 1)\n  }\n  removeMax() {\n    this._shiftDown(0)\n  }\n  getParentIndex(k) {\n    return parseInt((k - 1) / 2)\n  }\n  getLeftIndex(k) {\n    return k * 2 + 1\n  }\n  _shiftUp(k) {\n    // 如果当前节点比父节点大，就交换\n    while (this.heap[k] > this.heap[this.getParentIndex(k)]) {\n      this._swap(k, this.getParentIndex(k))\n      // 将索引变成父节点\n      k = this.getParentIndex(k)\n    }\n  }\n  _shiftDown(k) {\n    // 交换首位并删除末尾\n    this._swap(k, this.size() - 1)\n    this.heap.splice(this.size() - 1, 1)\n    // 判断节点是否有左孩子，因为二叉堆的特性，有右必有左\n    while (this.getLeftIndex(k) < this.size()) {\n      let j = this.getLeftIndex(k)\n      // 判断是否有右孩子，并且右孩子是否大于左孩子\n      if (j + 1 < this.size() && this.heap[j + 1] > this.heap[j]) j++\n      // 判断父节点是否已经比子节点都大\n      if (this.heap[k] >= this.heap[j]) break\n      this._swap(k, j)\n      k = j\n    }\n  }\n  _swap(left, right) {\n    let rightValue = this.heap[right]\n    this.heap[right] = this.heap[left]\n    this.heap[left] = rightValue\n  }\n}\n```","slug":"FE-guide-data-structure","published":1,"updated":"2020-04-02T03:20:12.385Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grx9001jooa6ab4u9vkp","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>网络相关的知识虽然平时在编码阶段很少遇到，但是并不是说它不重要，尤其是前端优化层面，能从网络传输过程优化的点有很多，所以，我们需要好好掌握网络相关的知识，接下来，我将会将我了解到的网络相关的知识点进行一一整理</p>\n<h1 id=\"栈-Heap\"><a href=\"#栈-Heap\" class=\"headerlink\" title=\"栈 Heap\"></a>栈 Heap</h1><blockquote>\n<p>栈是一个线性结构，在计算机中是一个相当常见的数据结构。<br>栈的特点是只能在某一端添加或删除数据，遵循<strong>先进后出(FILO)</strong>的原则</p>\n</blockquote>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>每种数据结构都可以用很多种方式来实现，其实可以把栈看成是数组的一个子集，所以这里使用数组来实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">class Stack &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    this.stack &#x3D; []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  push(item) &#123;</span><br><span class=\"line\">    this.stack.push(item)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pop() &#123;</span><br><span class=\"line\">    this.stack.pop()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  peek() &#123; &#x2F;&#x2F; 取最后一项</span><br><span class=\"line\">    return this.stack[this.getCount() - 1]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getCount() &#123;</span><br><span class=\"line\">    return this.stack.length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isEmpty() &#123;</span><br><span class=\"line\">    return this.getCount() &#x3D;&#x3D;&#x3D; 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><p>选取了 <a href=\"https://leetcode-cn.com/problems/valid-parentheses/\" target=\"_blank\" rel=\"noopener\">LeetCode 上序号为 20 的题目</a></p>\n<p>题意是匹配括号，可以通过栈的特性来完成这道题目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var isValid &#x3D; function(str) &#123;</span><br><span class=\"line\">  let map &#x3D; &#123;</span><br><span class=\"line\">    &#39;(&#39;: -1,</span><br><span class=\"line\">    &#39;)&#39;: 1,</span><br><span class=\"line\">    &#39;[&#39;: -2,</span><br><span class=\"line\">    &#39;]&#39;: 2,</span><br><span class=\"line\">    &#39;&#123;&#39;: -3,</span><br><span class=\"line\">    &#39;&#125;&#39;: 3</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  let stack &#x3D; [] &#x2F;&#x2F; 空数组</span><br><span class=\"line\">  for (let i &#x3D; 0; i &lt; str.length; i++) &#123; &#x2F;&#x2F; 遍历字符串每个字符</span><br><span class=\"line\">    if (map[str[i]] &lt; 0) &#123; &#x2F;&#x2F; 如果是左边括号，入栈</span><br><span class=\"line\">      stack.push(str[i])</span><br><span class=\"line\">    &#125; else &#123; &#x2F;&#x2F; 否则出栈，判断左右括号加到一起是不是0</span><br><span class=\"line\">      let last &#x3D; stack.pop()</span><br><span class=\"line\">      if (map[last] + map[str[i]] !&#x3D; 0) return false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (stack.length &gt; 0) return false &#x2F;&#x2F; 循环完成后，判断数组中时候还有剩下的，有剩下的说明括号没闭合</span><br><span class=\"line\">  return true &#x2F;&#x2F; 否则没剩下的，都闭合了</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><blockquote>\n<p>队列一个线性结构，特点是在某一端添加数据，在另一端删除数据，遵循<strong>先进先出(FIFO)</strong>的原则。</p>\n</blockquote>\n<h2 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>这里会讲解两种实现队列的方式，分别是<strong>单链队列</strong>和<strong>循环队列</strong>。</p>\n<ul>\n<li>链队列即队列的链式存储结构，结构上就是一个单链表，但数据只能是头进尾出。链式结构更加的灵活，特别是在存储空间上，基本不会出现溢出的情况，所以不用像循环队列一样判断队列是否已满，且空间的利用率相对较高。<ul>\n<li>链队列front指向头结点，头结点不存储数据，rear指向队尾结点。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>循环队列即为头尾相接的队列，它的最大存储空间和顺序队列一样由数组界定，但队列的长度并不一定等同于数组的长度；循环队列的队首和队尾分别由两个指针front、rear标识，于是这样就能做到首尾相接。</p>\n</li>\n<li><p>链队列：为操作方便，给链队列添加一个头结点</p>\n</li>\n<li><p>循环队列：附设两个指针front和rear分别指示队列头元素及尾元素的位置，每当插入新的队尾元素是，尾指针加1；每当删除队列头元素是，头指针加1</p>\n<ul>\n<li>如果用循环队列，则必须设定一个最大队列长度；若无法确定最大长度，则宜采用链队列。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"单链队列\"><a href=\"#单链队列\" class=\"headerlink\" title=\"单链队列\"></a>单链队列</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">class Queue &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    this.queue &#x3D; []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  enQueue(item) &#123;</span><br><span class=\"line\">    this.queue.push(item)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  deQueue() &#123;</span><br><span class=\"line\">    return this.queue.shift()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getHeader() &#123;</span><br><span class=\"line\">    return this.queue[0]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getLength() &#123;</span><br><span class=\"line\">    return this.queue.length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isEmpty() &#123;</span><br><span class=\"line\">    return this.getLength() &#x3D;&#x3D;&#x3D; 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为单链队列在出队操作的时候需要 O(n) 的时间复杂度，所以引入了循环队列。<br>循环队列的出队操作平均是 O(1) 的时间复杂度。</p>\n<h3 id=\"循环队列\"><a href=\"#循环队列\" class=\"headerlink\" title=\"循环队列\"></a>循环队列</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">class SqQueue &#123;</span><br><span class=\"line\">  constructor(length) &#123;</span><br><span class=\"line\">    this.queue &#x3D; new Array(length + 1)</span><br><span class=\"line\">    &#x2F;&#x2F; 队头</span><br><span class=\"line\">    this.first &#x3D; 0</span><br><span class=\"line\">    &#x2F;&#x2F; 队尾</span><br><span class=\"line\">    this.last &#x3D; 0</span><br><span class=\"line\">    &#x2F;&#x2F; 当前队列大小</span><br><span class=\"line\">    this.size &#x3D; 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  enQueue(item) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 判断队尾 + 1 是否为队头</span><br><span class=\"line\">    &#x2F;&#x2F; 如果是就代表需要扩容数组</span><br><span class=\"line\">    &#x2F;&#x2F; % this.queue.length 是为了防止数组越界</span><br><span class=\"line\">    if (this.first &#x3D;&#x3D;&#x3D; (this.last + 1) % this.queue.length) &#123;</span><br><span class=\"line\">      this.resize(this.getLength() * 2 + 1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.queue[this.last] &#x3D; item</span><br><span class=\"line\">    this.size++</span><br><span class=\"line\">    this.last &#x3D; (this.last + 1) % this.queue.length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  deQueue() &#123;</span><br><span class=\"line\">    if (this.isEmpty()) &#123;</span><br><span class=\"line\">      throw Error(&#39;Queue is empty&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    let r &#x3D; this.queue[this.first]</span><br><span class=\"line\">    this.queue[this.first] &#x3D; null</span><br><span class=\"line\">    this.first &#x3D; (this.first + 1) % this.queue.length</span><br><span class=\"line\">    this.size--</span><br><span class=\"line\">    &#x2F;&#x2F; 判断当前队列大小是否过小</span><br><span class=\"line\">    &#x2F;&#x2F; 为了保证不浪费空间，在队列空间等于总长度四分之一时</span><br><span class=\"line\">    &#x2F;&#x2F; 且不为 2 时缩小总长度为当前的一半</span><br><span class=\"line\">    if (this.size &#x3D;&#x3D;&#x3D; this.getLength() &#x2F; 4 &amp;&amp; this.getLength() &#x2F; 2 !&#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">      this.resize(this.getLength() &#x2F; 2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return r</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getHeader() &#123;</span><br><span class=\"line\">    if (this.isEmpty()) &#123;</span><br><span class=\"line\">      throw Error(&#39;Queue is empty&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return this.queue[this.first]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getLength() &#123;</span><br><span class=\"line\">    return this.queue.length - 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isEmpty() &#123;</span><br><span class=\"line\">    return this.first &#x3D;&#x3D;&#x3D; this.last</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  resize(length) &#123;</span><br><span class=\"line\">    let q &#x3D; new Array(length)</span><br><span class=\"line\">    for (let i &#x3D; 0; i &lt; length; i++) &#123;</span><br><span class=\"line\">      q[i] &#x3D; this.queue[(i + this.first) % this.queue.length]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.queue &#x3D; q</span><br><span class=\"line\">    this.first &#x3D; 0</span><br><span class=\"line\">    this.last &#x3D; this.size</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><blockquote>\n<p>链表是一个线性结构，同时也是一个天然的递归结构。链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。</p>\n</blockquote>\n<h2 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>单向链表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">class Node &#123;</span><br><span class=\"line\">  constructor(v, next) &#123;</span><br><span class=\"line\">    this.value &#x3D; v</span><br><span class=\"line\">    this.next &#x3D; next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class LinkList &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 链表长度</span><br><span class=\"line\">    this.size &#x3D; 0</span><br><span class=\"line\">    &#x2F;&#x2F; 虚拟头部</span><br><span class=\"line\">    this.dummyNode &#x3D; new Node(null, null)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  find(header, index, currentIndex) &#123;</span><br><span class=\"line\">    if (index &#x3D;&#x3D;&#x3D; currentIndex) return header</span><br><span class=\"line\">    return this.find(header.next, index, currentIndex + 1)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  addNode(v, index) &#123;</span><br><span class=\"line\">    this.checkIndex(index)</span><br><span class=\"line\">    &#x2F;&#x2F; 当往链表末尾插入时，prev.next 为空</span><br><span class=\"line\">    &#x2F;&#x2F; 其他情况时，因为要插入节点，所以插入的节点</span><br><span class=\"line\">    &#x2F;&#x2F; 的 next 应该是 prev.next</span><br><span class=\"line\">    &#x2F;&#x2F; 然后设置 prev.next 为插入的节点</span><br><span class=\"line\">    let prev &#x3D; this.find(this.dummyNode, index, 0)</span><br><span class=\"line\">    prev.next &#x3D; new Node(v, prev.next)</span><br><span class=\"line\">    this.size++</span><br><span class=\"line\">    return prev.next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  insertNode(v, index) &#123;</span><br><span class=\"line\">    return this.addNode(v, index)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  addToFirst(v) &#123;</span><br><span class=\"line\">    return this.addNode(v, 0)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  addToLast(v) &#123;</span><br><span class=\"line\">    return this.addNode(v, this.size)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  removeNode(index, isLast) &#123;</span><br><span class=\"line\">    this.checkIndex(index)</span><br><span class=\"line\">    index &#x3D; isLast ? index - 1 : index</span><br><span class=\"line\">    let prev &#x3D; this.find(this.dummyNode, index, 0)</span><br><span class=\"line\">    let node &#x3D; prev.next</span><br><span class=\"line\">    prev.next &#x3D; node.next</span><br><span class=\"line\">    node.next &#x3D; null</span><br><span class=\"line\">    this.size--</span><br><span class=\"line\">    return node</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  removeFirstNode() &#123;</span><br><span class=\"line\">    return this.removeNode(0)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  removeLastNode() &#123;</span><br><span class=\"line\">    return this.removeNode(this.size, true)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  checkIndex(index) &#123;</span><br><span class=\"line\">    if (index &lt; 0 || index &gt; this.size) throw Error(&#39;Index error&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getNode(index) &#123;</span><br><span class=\"line\">    this.checkIndex(index)</span><br><span class=\"line\">    if (this.isEmpty()) return</span><br><span class=\"line\">    return this.find(this.dummyNode, index, 0).next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isEmpty() &#123;</span><br><span class=\"line\">    return this.size &#x3D;&#x3D;&#x3D; 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getSize() &#123;</span><br><span class=\"line\">    return this.size</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><p>树拥有很多种结构，二叉树是树中最常用的结构，同时也是一个天然的递归结构。</p>\n<p>二叉树拥有一个根节点，每个节点至多拥有两个子节点，分别为：左节点和右节点。树的最底部节点称之为叶节点，当一颗树的叶数量数量为满时，该树可以称之为满二叉树。</p>\n<h2 id=\"二分搜索树\"><a href=\"#二分搜索树\" class=\"headerlink\" title=\"二分搜索树\"></a>二分搜索树</h2><p>二分搜索树也是二叉树，拥有二叉树的特性。但是区别在于二分搜索树每个节点的值都比他的左子树的值大，比右子树的值小。</p>\n<p>这种存储方式很适合于数据搜索。如下图所示，当需要查找 6 的时候，因为需要查找的值比根节点的值大，所以只需要在根节点的右子树上寻找，大大提高了搜索效率。</p>\n<h3 id=\"实现-3\"><a href=\"#实现-3\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">class Node &#123;</span><br><span class=\"line\">  constructor(value) &#123;</span><br><span class=\"line\">    this.value &#x3D; value</span><br><span class=\"line\">    this.left &#x3D; null</span><br><span class=\"line\">    this.right &#x3D; null</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class BST &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    this.root &#x3D; null</span><br><span class=\"line\">    this.size &#x3D; 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getSize() &#123;</span><br><span class=\"line\">    return this.size</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isEmpty() &#123;</span><br><span class=\"line\">    return this.size &#x3D;&#x3D;&#x3D; 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  addNode(v) &#123;</span><br><span class=\"line\">    this.root &#x3D; this._addChild(this.root, v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 添加节点时，需要比较添加的节点值和当前</span><br><span class=\"line\">  &#x2F;&#x2F; 节点值的大小</span><br><span class=\"line\">  _addChild(node, v) &#123;</span><br><span class=\"line\">    if (!node) &#123;</span><br><span class=\"line\">      this.size++</span><br><span class=\"line\">      return new Node(v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (node.value &gt; v) &#123;</span><br><span class=\"line\">      node.left &#x3D; this._addChild(node.left, v)</span><br><span class=\"line\">    &#125; else if (node.value &lt; v) &#123;</span><br><span class=\"line\">      node.right &#x3D; this._addChild(node.right, v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return node</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上是最基本的二分搜索树实现，接下来实现树的遍历。</p>\n<p>对于树的遍历来说，有三种遍历方法，分别是<strong>先序遍历</strong>、<strong>中序遍历</strong>、<strong>后序遍历</strong>。</p>\n<p>三种遍历的区别在于何时访问节点。在遍历树的过程中，每个节点都会遍历三次，分别是遍历到自己，遍历左子树和遍历右子树。如果需要实现先序遍历，那么只需要第一次遍历到节点时进行操作即可。</p>\n<p>以下都是递归实现.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 先序遍历可用于打印树的结构</span><br><span class=\"line\">&#x2F;&#x2F; 先序遍历先访问根节点，然后访问左节点，最后访问右节点。</span><br><span class=\"line\">preTraversal() &#123;</span><br><span class=\"line\">  this._pre(this.root)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_pre(node) &#123;</span><br><span class=\"line\">  if (node) &#123;</span><br><span class=\"line\">    console.log(node.value)</span><br><span class=\"line\">    this._pre(node.left)</span><br><span class=\"line\">    this._pre(node.right)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; 中序遍历可用于排序</span><br><span class=\"line\">&#x2F;&#x2F; 对于 BST 来说，中序遍历可以实现一次遍历就</span><br><span class=\"line\">&#x2F;&#x2F; 得到有序的值</span><br><span class=\"line\">&#x2F;&#x2F; 中序遍历表示先访问左节点，然后访问根节点，最后访问右节点。</span><br><span class=\"line\">midTraversal() &#123;</span><br><span class=\"line\">  this._mid(this.root)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_mid(node) &#123;</span><br><span class=\"line\">  if (node) &#123;</span><br><span class=\"line\">    this._mid(node.left)</span><br><span class=\"line\">    console.log(node.value)</span><br><span class=\"line\">    this._mid(node.right)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; 后序遍历可用于先操作子节点</span><br><span class=\"line\">&#x2F;&#x2F; 再操作父节点的场景</span><br><span class=\"line\">&#x2F;&#x2F; 后序遍历表示先访问左节点，然后访问右节点，最后访问根节点。</span><br><span class=\"line\">backTraversal() &#123;</span><br><span class=\"line\">  this._back(this.root)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_back(node) &#123;</span><br><span class=\"line\">  if (node) &#123;</span><br><span class=\"line\">    this._back(node.left)</span><br><span class=\"line\">    this._back(node.right)</span><br><span class=\"line\">    console.log(node.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上的这几种遍历都可以称之为深度遍历，对应的还有种遍历叫做广度遍历，也就是一层层地遍历树。对于广度遍历来说，我们需要利用之前讲过的队列结构来完成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">breadthTraversal() &#123;</span><br><span class=\"line\">  if (!this.root) return null</span><br><span class=\"line\">  let q &#x3D; new Queue()</span><br><span class=\"line\">  &#x2F;&#x2F; 将根节点入队</span><br><span class=\"line\">  q.enQueue(this.root)</span><br><span class=\"line\">  &#x2F;&#x2F; 循环判断队列是否为空，为空</span><br><span class=\"line\">  &#x2F;&#x2F; 代表树遍历完毕</span><br><span class=\"line\">  while (!q.isEmpty()) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 将队首出队，判断是否有左右子树</span><br><span class=\"line\">    &#x2F;&#x2F; 有的话，就先左后右入队</span><br><span class=\"line\">    let n &#x3D; q.deQueue()</span><br><span class=\"line\">    console.log(n.value)</span><br><span class=\"line\">    if (n.left) q.enQueue(n.left)</span><br><span class=\"line\">    if (n.right) q.enQueue(n.right)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来先介绍如何在树中寻找最小值或最大数。因为二分搜索树的特性，所以最小值一定在根节点的最左边，最大值相反</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">getMin() &#123;</span><br><span class=\"line\">  return this._getMin(this.root).value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_getMin(node) &#123;</span><br><span class=\"line\">  if (!node.left) return node</span><br><span class=\"line\">  return this._getMin(node.left)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getMax() &#123;</span><br><span class=\"line\">  return this._getMax(this.root).value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_getMax(node) &#123;</span><br><span class=\"line\">  if (!node.right) return node</span><br><span class=\"line\">  return this._getMin(node.right)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>向上取整和向下取整</strong>，这两个操作是相反的，所以代码也是类似的，这里只介绍如何向下取整。既然是向下取整，那么根据二分搜索树的特性，值一定在根节点的左侧。只需要一直遍历左子树直到当前节点的值不再大于等于需要的值，然后判断节点是否还拥有右子树。如果有的话，继续上面的递归判断。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">floor(v) &#123;</span><br><span class=\"line\">  let node &#x3D; this._floor(this.root, v)</span><br><span class=\"line\">  return node ? node.value : null</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_floor(node, v) &#123;</span><br><span class=\"line\">  if (!node) return null</span><br><span class=\"line\">  if (node.value &#x3D;&#x3D;&#x3D; v) return v</span><br><span class=\"line\">  &#x2F;&#x2F; 如果当前节点值还比需要的值大，就继续递归</span><br><span class=\"line\">  if (node.value &gt; v) &#123;</span><br><span class=\"line\">    return this._floor(node.left, v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 判断当前节点是否拥有右子树</span><br><span class=\"line\">  let right &#x3D; this._floor(node.right, v)</span><br><span class=\"line\">  if (right) return right</span><br><span class=\"line\">  return node</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>排名，这是用于获取给定值的排名或者排名第几的节点的值，这两个操作也是相反的，所以这个只介绍如何获取排名第几的节点的值。对于这个操作而言，我们需要略微的改造点代码，让每个节点拥有一个 size 属性。该属性表示该节点下有多少子节点（包含自身）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">class Node &#123;</span><br><span class=\"line\">  constructor(value) &#123;</span><br><span class=\"line\">    this.value &#x3D; value</span><br><span class=\"line\">    this.left &#x3D; null</span><br><span class=\"line\">    this.right &#x3D; null</span><br><span class=\"line\">    &#x2F;&#x2F; 修改代码</span><br><span class=\"line\">    this.size &#x3D; 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; 新增代码</span><br><span class=\"line\">_getSize(node) &#123;</span><br><span class=\"line\">  return node ? node.size : 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_addChild(node, v) &#123;</span><br><span class=\"line\">  if (!node) &#123;</span><br><span class=\"line\">    return new Node(v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (node.value &gt; v) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 修改代码</span><br><span class=\"line\">    node.size++</span><br><span class=\"line\">    node.left &#x3D; this._addChild(node.left, v)</span><br><span class=\"line\">  &#125; else if (node.value &lt; v) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 修改代码</span><br><span class=\"line\">    node.size++</span><br><span class=\"line\">    node.right &#x3D; this._addChild(node.right, v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return node</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">select(k) &#123;</span><br><span class=\"line\">  let node &#x3D; this._select(this.root, k)</span><br><span class=\"line\">  return node ? node.value : null</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_select(node, k) &#123;</span><br><span class=\"line\">  if (!node) return null</span><br><span class=\"line\">  &#x2F;&#x2F; 先获取左子树下有几个节点</span><br><span class=\"line\">  let size &#x3D; node.left ? node.left.size : 0</span><br><span class=\"line\">  &#x2F;&#x2F; 判断 size 是否大于 k</span><br><span class=\"line\">  &#x2F;&#x2F; 如果大于 k，代表所需要的节点在左节点</span><br><span class=\"line\">  if (size &gt; k) return this._select(node.left, k)</span><br><span class=\"line\">  &#x2F;&#x2F; 如果小于 k，代表所需要的节点在右节点</span><br><span class=\"line\">  &#x2F;&#x2F; 注意这里需要重新计算 k，减去根节点除了右子树的节点数量</span><br><span class=\"line\">  if (size &lt; k) return this._select(node.right, k - size - 1)</span><br><span class=\"line\">  return node</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来讲解的是二分搜索树中最难实现的部分：删除节点。因为对于删除节点来说，会存在以下几种情况</p>\n<ul>\n<li>需要删除的节点没有子树</li>\n<li>需要删除的节点只有一条子树</li>\n<li>需要删除的节点有左右两条树</li>\n</ul>\n<p>对于前两种情况很好解决，但是第三种情况就有难度了，所以先来实现相对简单的操作：删除最小节点，对于删除最小节点来说，是不存在第三种情况的，删除最大节点操作是和删除最小节点相反的，所以这里也就不再赘述。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">delectMin() &#123;</span><br><span class=\"line\">  this.root &#x3D; this._delectMin(this.root)</span><br><span class=\"line\">  console.log(this.root)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_delectMin(node) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 一直递归左子树</span><br><span class=\"line\">  &#x2F;&#x2F; 如果左子树为空，就判断节点是否拥有右子树</span><br><span class=\"line\">  &#x2F;&#x2F; 有右子树的话就把需要删除的节点替换为右子树</span><br><span class=\"line\">  if ((node !&#x3D; null) &amp; !node.left) return node.right</span><br><span class=\"line\">  node.left &#x3D; this._delectMin(node.left)</span><br><span class=\"line\">  &#x2F;&#x2F; 最后需要重新维护下节点的 &#96;size&#96;</span><br><span class=\"line\">  node.size &#x3D; this._getSize(node.left) + this._getSize(node.right) + 1</span><br><span class=\"line\">  return node</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后讲解的就是如何删除任意节点了。对于这个操作，T.Hibbard 在 1962 年提出了解决这个难题的办法，也就是如何解决第三种情况。</p>\n<p>当遇到这种情况时，需要取出当前节点的后继节点（也就是当前节点右子树的最小节点）来替换需要删除的节点。然后将需要删除节点的左子树赋值给后继结点，右子树删除后继结点后赋值给他。</p>\n<p>你如果对于这个解决办法有疑问的话，可以这样考虑。因为二分搜索树的特性，父节点一定比所有左子节点大，比所有右子节点小。那么当需要删除父节点时，势必需要拿出一个比父节点大的节点来替换父节点。这个节点肯定不存在于左子树，必然存在于右子树。然后又需要保持父节点都是比右子节点小的，那么就可以取出右子树中最小的那个节点来替换父节点。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">delect(v) &#123;</span><br><span class=\"line\">  this.root &#x3D; this._delect(this.root, v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_delect(node, v) &#123;</span><br><span class=\"line\">  if (!node) return null</span><br><span class=\"line\">  &#x2F;&#x2F; 寻找的节点比当前节点小，去左子树找</span><br><span class=\"line\">  if (node.value &lt; v) &#123;</span><br><span class=\"line\">    node.right &#x3D; this._delect(node.right, v)</span><br><span class=\"line\">  &#125; else if (node.value &gt; v) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 寻找的节点比当前节点大，去右子树找</span><br><span class=\"line\">    node.left &#x3D; this._delect(node.left, v)</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 进入这个条件说明已经找到节点</span><br><span class=\"line\">    &#x2F;&#x2F; 先判断节点是否拥有拥有左右子树中的一个</span><br><span class=\"line\">    &#x2F;&#x2F; 是的话，将子树返回出去，这里和 &#96;_delectMin&#96; 的操作一样</span><br><span class=\"line\">    if (!node.left) return node.right</span><br><span class=\"line\">    if (!node.right) return node.left</span><br><span class=\"line\">    &#x2F;&#x2F; 进入这里，代表节点拥有左右子树</span><br><span class=\"line\">    &#x2F;&#x2F; 先取出当前节点的后继结点，也就是取当前节点右子树的最小值</span><br><span class=\"line\">    let min &#x3D; this._getMin(node.right)</span><br><span class=\"line\">    &#x2F;&#x2F; 取出最小值后，删除最小值</span><br><span class=\"line\">    &#x2F;&#x2F; 然后把删除节点后的子树赋值给最小值节点</span><br><span class=\"line\">    min.right &#x3D; this._delectMin(node.right)</span><br><span class=\"line\">    &#x2F;&#x2F; 左子树不动</span><br><span class=\"line\">    min.left &#x3D; node.left</span><br><span class=\"line\">    node &#x3D; min</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 维护 size</span><br><span class=\"line\">  node.size &#x3D; this._getSize(node.left) + this._getSize(node.right) + 1</span><br><span class=\"line\">  return node</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AVL-树\"><a href=\"#AVL-树\" class=\"headerlink\" title=\"AVL 树\"></a>AVL 树</h2><blockquote>\n<p>二分搜索树实际在业务中是受到限制的，因为并不是严格的 O(logN)，在极端情况下会退化成链表，比如加入一组升序的数字就会造成这种情况。</p>\n</blockquote>\n<blockquote>\n<p>AVL 树改进了二分搜索树，在 AVL 树中任意节点的左右子树的高度差都不大于 1，这样保证了时间复杂度是严格的 O(logN)。基于此，对 AVL 树增加或删除节点时可能需要旋转树来达到高度的平衡。</p>\n</blockquote>\n<h3 id=\"实现-4\"><a href=\"#实现-4\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>因为 AVL 树是改进了二分搜索树，所以部分代码是于二分搜索树重复的，对于重复内容不作再次解析。</p>\n<p>对于 AVL 树来说，添加节点会有四种情况<br><img src=\"https://s2.ax1x.com/2020/01/09/lWB0nf.png\" alt=\"lWB0nf.png\"></p>\n<p>对于左左情况来说，新增加的节点位于节点 2 的左侧，这时树已经不平衡，需要旋转。因为搜索树的特性，节点比左节点大，比右节点小，所以旋转以后也要实现这个特性。</p>\n<p>旋转之前：new &lt; 2 &lt; C &lt; 3 &lt; B &lt; 5 &lt; A，右旋之后节点 3 为根节点，这时候需要将节点 3 的右节点加到节点 5 的左边，最后还需要更新节点的高度。</p>\n<p>对于右右情况来说，相反于左左情况，所以不再赘述。</p>\n<p>对于左右情况来说，新增加的节点位于节点 4 的右侧。对于这种情况，需要通过两次旋转来达到目的。</p>\n<p>首先对节点的左节点左旋，这时树满足左左的情况，再对节点进行一次右旋就可以达到目的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">class Node &#123;</span><br><span class=\"line\">  constructor(value) &#123;</span><br><span class=\"line\">    this.value &#x3D; value</span><br><span class=\"line\">    this.left &#x3D; null</span><br><span class=\"line\">    this.right &#x3D; null</span><br><span class=\"line\">    this.height &#x3D; 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class AVL &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    this.root &#x3D; null</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  addNode(v) &#123;</span><br><span class=\"line\">    this.root &#x3D; this._addChild(this.root, v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _addChild(node, v) &#123;</span><br><span class=\"line\">    if (!node) &#123;</span><br><span class=\"line\">      return new Node(v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (node.value &gt; v) &#123;</span><br><span class=\"line\">      node.left &#x3D; this._addChild(node.left, v)</span><br><span class=\"line\">    &#125; else if (node.value &lt; v) &#123;</span><br><span class=\"line\">      node.right &#x3D; this._addChild(node.right, v)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      node.value &#x3D; v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node.height &#x3D;</span><br><span class=\"line\">      1 + Math.max(this._getHeight(node.left), this._getHeight(node.right))</span><br><span class=\"line\">    let factor &#x3D; this._getBalanceFactor(node)</span><br><span class=\"line\">    &#x2F;&#x2F; 当需要右旋时，根节点的左树一定比右树高度高</span><br><span class=\"line\">    if (factor &gt; 1 &amp;&amp; this._getBalanceFactor(node.left) &gt;&#x3D; 0) &#123;</span><br><span class=\"line\">      return this._rightRotate(node)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 当需要左旋时，根节点的左树一定比右树高度矮</span><br><span class=\"line\">    if (factor &lt; -1 &amp;&amp; this._getBalanceFactor(node.right) &lt;&#x3D; 0) &#123;</span><br><span class=\"line\">      return this._leftRotate(node)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 左右情况</span><br><span class=\"line\">    &#x2F;&#x2F; 节点的左树比右树高，且节点的左树的右树比节点的左树的左树高</span><br><span class=\"line\">    if (factor &gt; 1 &amp;&amp; this._getBalanceFactor(node.left) &lt; 0) &#123;</span><br><span class=\"line\">      node.left &#x3D; this._leftRotate(node.left)</span><br><span class=\"line\">      return this._rightRotate(node)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 右左情况</span><br><span class=\"line\">    &#x2F;&#x2F; 节点的左树比右树矮，且节点的右树的右树比节点的右树的左树矮</span><br><span class=\"line\">    if (factor &lt; -1 &amp;&amp; this._getBalanceFactor(node.right) &gt; 0) &#123;</span><br><span class=\"line\">      node.right &#x3D; this._rightRotate(node.right)</span><br><span class=\"line\">      return this._leftRotate(node)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return node</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _getHeight(node) &#123;</span><br><span class=\"line\">    if (!node) return 0</span><br><span class=\"line\">    return node.height</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _getBalanceFactor(node) &#123;</span><br><span class=\"line\">    return this._getHeight(node.left) - this._getHeight(node.right)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 节点右旋</span><br><span class=\"line\">  &#x2F;&#x2F;           5                    2</span><br><span class=\"line\">  &#x2F;&#x2F;         &#x2F;   \\                &#x2F;   \\</span><br><span class=\"line\">  &#x2F;&#x2F;        2     6   &#x3D;&#x3D;&gt;       1      5</span><br><span class=\"line\">  &#x2F;&#x2F;       &#x2F;  \\               &#x2F;       &#x2F;  \\</span><br><span class=\"line\">  &#x2F;&#x2F;      1    3             new     3    6</span><br><span class=\"line\">  &#x2F;&#x2F;     &#x2F;</span><br><span class=\"line\">  &#x2F;&#x2F;    new</span><br><span class=\"line\">  _rightRotate(node) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 旋转后新根节点</span><br><span class=\"line\">    let newRoot &#x3D; node.left</span><br><span class=\"line\">    &#x2F;&#x2F; 需要移动的节点</span><br><span class=\"line\">    let moveNode &#x3D; newRoot.right</span><br><span class=\"line\">    &#x2F;&#x2F; 节点 2 的右节点改为节点 5</span><br><span class=\"line\">    newRoot.right &#x3D; node</span><br><span class=\"line\">    &#x2F;&#x2F; 节点 5 左节点改为节点 3</span><br><span class=\"line\">    node.left &#x3D; moveNode</span><br><span class=\"line\">    &#x2F;&#x2F; 更新树的高度</span><br><span class=\"line\">    node.height &#x3D;</span><br><span class=\"line\">      1 + Math.max(this._getHeight(node.left), this._getHeight(node.right))</span><br><span class=\"line\">    newRoot.height &#x3D;</span><br><span class=\"line\">      1 +</span><br><span class=\"line\">      Math.max(this._getHeight(newRoot.left), this._getHeight(newRoot.right))</span><br><span class=\"line\"></span><br><span class=\"line\">    return newRoot</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 节点左旋</span><br><span class=\"line\">  &#x2F;&#x2F;           4                    6</span><br><span class=\"line\">  &#x2F;&#x2F;         &#x2F;   \\                &#x2F;   \\</span><br><span class=\"line\">  &#x2F;&#x2F;        2     6   &#x3D;&#x3D;&gt;       4      7</span><br><span class=\"line\">  &#x2F;&#x2F;             &#x2F;  \\         &#x2F;   \\      \\</span><br><span class=\"line\">  &#x2F;&#x2F;            5     7      2     5      new</span><br><span class=\"line\">  &#x2F;&#x2F;                   \\</span><br><span class=\"line\">  &#x2F;&#x2F;                    new</span><br><span class=\"line\">  _leftRotate(node) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 旋转后新根节点</span><br><span class=\"line\">    let newRoot &#x3D; node.right</span><br><span class=\"line\">    &#x2F;&#x2F; 需要移动的节点</span><br><span class=\"line\">    let moveNode &#x3D; newRoot.left</span><br><span class=\"line\">    &#x2F;&#x2F; 节点 6 的左节点改为节点 4</span><br><span class=\"line\">    newRoot.left &#x3D; node</span><br><span class=\"line\">    &#x2F;&#x2F; 节点 4 右节点改为节点 5</span><br><span class=\"line\">    node.right &#x3D; moveNode</span><br><span class=\"line\">    &#x2F;&#x2F; 更新树的高度</span><br><span class=\"line\">    node.height &#x3D;</span><br><span class=\"line\">      1 + Math.max(this._getHeight(node.left), this._getHeight(node.right))</span><br><span class=\"line\">    newRoot.height &#x3D;</span><br><span class=\"line\">      1 +</span><br><span class=\"line\">      Math.max(this._getHeight(newRoot.left), this._getHeight(newRoot.right))</span><br><span class=\"line\"></span><br><span class=\"line\">    return newRoot</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Trie\"><a href=\"#Trie\" class=\"headerlink\" title=\"Trie\"></a>Trie</h1><blockquote>\n<p>在计算机科学，trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。<br>简单点来说，这个结构的作用大多是为了方便搜索字符串，该树有以下几个特点</p>\n</blockquote>\n<ul>\n<li>根节点代表空字符串，每个节点都有 N（假如搜索英文字符，就有 26 条） 条链接，每条链接代表一个字符</li>\n<li>节点不存储字符，只有路径才存储，这点和其他的树结构不同</li>\n<li>从根节点开始到任意一个节点，将沿途经过的字符连接起来就是该节点对应的字符串</li>\n</ul>\n<h2 id=\"实现-5\"><a href=\"#实现-5\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>总得来说 Trie 的实现相比别的树结构来说简单的很多，实现就以搜索英文字符为例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">class TrieNode &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 代表每个字符经过节点的次数</span><br><span class=\"line\">    this.path &#x3D; 0</span><br><span class=\"line\">    &#x2F;&#x2F; 代表到该节点的字符串有几个</span><br><span class=\"line\">    this.end &#x3D; 0</span><br><span class=\"line\">    &#x2F;&#x2F; 链接</span><br><span class=\"line\">    this.next &#x3D; new Array(26).fill(null)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Trie &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 根节点，代表空字符</span><br><span class=\"line\">    this.root &#x3D; new TrieNode()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 插入字符串</span><br><span class=\"line\">  insert(str) &#123;</span><br><span class=\"line\">    if (!str) return</span><br><span class=\"line\">    let node &#x3D; this.root</span><br><span class=\"line\">    for (let i &#x3D; 0; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 获得字符先对应的索引</span><br><span class=\"line\">      let index &#x3D; str[i].charCodeAt() - &#39;a&#39;.charCodeAt()</span><br><span class=\"line\">      &#x2F;&#x2F; 如果索引对应没有值，就创建</span><br><span class=\"line\">      if (!node.next[index]) &#123;</span><br><span class=\"line\">        node.next[index] &#x3D; new TrieNode()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      node.path +&#x3D; 1</span><br><span class=\"line\">      node &#x3D; node.next[index]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node.end +&#x3D; 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 搜索字符串出现的次数</span><br><span class=\"line\">  search(str) &#123;</span><br><span class=\"line\">    if (!str) return</span><br><span class=\"line\">    let node &#x3D; this.root</span><br><span class=\"line\">    for (let i &#x3D; 0; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">      let index &#x3D; str[i].charCodeAt() - &#39;a&#39;.charCodeAt()</span><br><span class=\"line\">      &#x2F;&#x2F; 如果索引对应没有值，代表没有需要搜素的字符串</span><br><span class=\"line\">      if (!node.next[index]) &#123;</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      node &#x3D; node.next[index]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return node.end</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 删除字符串</span><br><span class=\"line\">  delete(str) &#123;</span><br><span class=\"line\">    if (!this.search(str)) return</span><br><span class=\"line\">    let node &#x3D; this.root</span><br><span class=\"line\">    for (let i &#x3D; 0; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">      let index &#x3D; str[i].charCodeAt() - &#39;a&#39;.charCodeAt()</span><br><span class=\"line\">      &#x2F;&#x2F; 如果索引对应的节点的 Path 为 0，代表经过该节点的字符串</span><br><span class=\"line\">      &#x2F;&#x2F; 已经一个，直接删除即可</span><br><span class=\"line\">      if (--node.next[index].path &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">        node.next[index] &#x3D; null</span><br><span class=\"line\">        return</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      node &#x3D; node.next[index]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node.end -&#x3D; 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h1><blockquote>\n<p>并查集是一种特殊的树结构，用于处理一些不交集的合并及查询问题。该结构中每个节点都有一个父节点，如果只有当前一个节点，那么该节点的父节点指向自己。<br>这个结构中有两个重要的操作，分别是：</p>\n</blockquote>\n<ul>\n<li>Find：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子集。</li>\n<li>Union：将两个子集合并成同一个集合。</li>\n</ul>\n<h2 id=\"实现-6\"><a href=\"#实现-6\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">class DisjointSet &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 初始化样本</span><br><span class=\"line\">  constructor(count) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 初始化时，每个节点的父节点都是自己</span><br><span class=\"line\">    this.parent &#x3D; new Array(count)</span><br><span class=\"line\">    &#x2F;&#x2F; 用于记录树的深度，优化搜索复杂度</span><br><span class=\"line\">    this.rank &#x3D; new Array(count)</span><br><span class=\"line\">    for (let i &#x3D; 0; i &lt; count; i++) &#123;</span><br><span class=\"line\">      this.parent[i] &#x3D; i</span><br><span class=\"line\">      this.rank[i] &#x3D; 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  find(p) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 寻找当前节点的父节点是否为自己，不是的话表示还没找到</span><br><span class=\"line\">    &#x2F;&#x2F; 开始进行路径压缩优化</span><br><span class=\"line\">    &#x2F;&#x2F; 假设当前节点父节点为 A</span><br><span class=\"line\">    &#x2F;&#x2F; 将当前节点挂载到 A 节点的父节点上，达到压缩深度的目的</span><br><span class=\"line\">    while (p !&#x3D; this.parent[p]) &#123;</span><br><span class=\"line\">      this.parent[p] &#x3D; this.parent[this.parent[p]]</span><br><span class=\"line\">      p &#x3D; this.parent[p]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return p</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isConnected(p, q) &#123;</span><br><span class=\"line\">    return this.find(p) &#x3D;&#x3D;&#x3D; this.find(q)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 合并</span><br><span class=\"line\">  union(p, q) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 找到两个数字的父节点</span><br><span class=\"line\">    let i &#x3D; this.find(p)</span><br><span class=\"line\">    let j &#x3D; this.find(q)</span><br><span class=\"line\">    if (i &#x3D;&#x3D;&#x3D; j) return</span><br><span class=\"line\">    &#x2F;&#x2F; 判断两棵树的深度，深度小的加到深度大的树下面</span><br><span class=\"line\">    &#x2F;&#x2F; 如果两棵树深度相等，那就无所谓怎么加</span><br><span class=\"line\">    if (this.rank[i] &lt; this.rank[j]) &#123;</span><br><span class=\"line\">      this.parent[i] &#x3D; j</span><br><span class=\"line\">    &#125; else if (this.rank[i] &gt; this.rank[j]) &#123;</span><br><span class=\"line\">      this.parent[j] &#x3D; i</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      this.parent[i] &#x3D; j</span><br><span class=\"line\">      this.rank[j] +&#x3D; 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1><p>堆通常是一个可以被看做一棵树的数组对象。<br>堆的实现通过构造<strong>二叉堆</strong>，实为二叉树的一种。这种数据结构具有以下性质。</p>\n<ul>\n<li>任意节点小于（或大于）它的所有子节点</li>\n<li>堆总是一棵完全树。即除了最底层，其他层的节点都被元素填满，且最底层从左到右填入。<br>将根节点最大的堆叫做<strong>最大堆</strong>或<strong>大根堆</strong>，根节点最小的堆叫做<strong>最小堆</strong>或<strong>小根堆</strong>。<br>优先队列也完全可以用堆来实现，操作是一模一样的。</li>\n</ul>\n<h2 id=\"实现大根堆\"><a href=\"#实现大根堆\" class=\"headerlink\" title=\"实现大根堆\"></a>实现大根堆</h2><p>堆的每个节点的左边子节点索引是 i * 2 + 1，右边是 i * 2 + 2，父节点是 (i - 1) /2。<br>堆有两个核心的操作，分别是 shiftUp 和 shiftDown 。前者用于添加元素，后者用于删除根节点。<br>shiftUp 的核心思路是一路将节点与父节点对比大小，如果比父节点大，就和父节点交换位置。<br>shiftDown 的核心思路是先将根节点和末尾交换位置，然后移除末尾元素。接下来循环判断父节点和两个子节点的大小，如果子节点大，就把最大的子节点和父节点交换。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">class MaxHeap &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    this.heap &#x3D; []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  size() &#123;</span><br><span class=\"line\">    return this.heap.length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  empty() &#123;</span><br><span class=\"line\">    return this.size() &#x3D;&#x3D; 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  add(item) &#123;</span><br><span class=\"line\">    this.heap.push(item)</span><br><span class=\"line\">    this._shiftUp(this.size() - 1)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  removeMax() &#123;</span><br><span class=\"line\">    this._shiftDown(0)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getParentIndex(k) &#123;</span><br><span class=\"line\">    return parseInt((k - 1) &#x2F; 2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getLeftIndex(k) &#123;</span><br><span class=\"line\">    return k * 2 + 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _shiftUp(k) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 如果当前节点比父节点大，就交换</span><br><span class=\"line\">    while (this.heap[k] &gt; this.heap[this.getParentIndex(k)]) &#123;</span><br><span class=\"line\">      this._swap(k, this.getParentIndex(k))</span><br><span class=\"line\">      &#x2F;&#x2F; 将索引变成父节点</span><br><span class=\"line\">      k &#x3D; this.getParentIndex(k)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _shiftDown(k) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 交换首位并删除末尾</span><br><span class=\"line\">    this._swap(k, this.size() - 1)</span><br><span class=\"line\">    this.heap.splice(this.size() - 1, 1)</span><br><span class=\"line\">    &#x2F;&#x2F; 判断节点是否有左孩子，因为二叉堆的特性，有右必有左</span><br><span class=\"line\">    while (this.getLeftIndex(k) &lt; this.size()) &#123;</span><br><span class=\"line\">      let j &#x3D; this.getLeftIndex(k)</span><br><span class=\"line\">      &#x2F;&#x2F; 判断是否有右孩子，并且右孩子是否大于左孩子</span><br><span class=\"line\">      if (j + 1 &lt; this.size() &amp;&amp; this.heap[j + 1] &gt; this.heap[j]) j++</span><br><span class=\"line\">      &#x2F;&#x2F; 判断父节点是否已经比子节点都大</span><br><span class=\"line\">      if (this.heap[k] &gt;&#x3D; this.heap[j]) break</span><br><span class=\"line\">      this._swap(k, j)</span><br><span class=\"line\">      k &#x3D; j</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _swap(left, right) &#123;</span><br><span class=\"line\">    let rightValue &#x3D; this.heap[right]</span><br><span class=\"line\">    this.heap[right] &#x3D; this.heap[left]</span><br><span class=\"line\">    this.heap[left] &#x3D; rightValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>网络相关的知识虽然平时在编码阶段很少遇到，但是并不是说它不重要，尤其是前端优化层面，能从网络传输过程优化的点有很多，所以，我们需要好好掌握网络相关的知识，接下来，我将会将我了解到的网络相关的知识点进行一一整理</p>\n<h1 id=\"栈-Heap\"><a href=\"#栈-Heap\" class=\"headerlink\" title=\"栈 Heap\"></a>栈 Heap</h1><blockquote>\n<p>栈是一个线性结构，在计算机中是一个相当常见的数据结构。<br>栈的特点是只能在某一端添加或删除数据，遵循<strong>先进后出(FILO)</strong>的原则</p>\n</blockquote>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>每种数据结构都可以用很多种方式来实现，其实可以把栈看成是数组的一个子集，所以这里使用数组来实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">class Stack &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    this.stack &#x3D; []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  push(item) &#123;</span><br><span class=\"line\">    this.stack.push(item)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pop() &#123;</span><br><span class=\"line\">    this.stack.pop()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  peek() &#123; &#x2F;&#x2F; 取最后一项</span><br><span class=\"line\">    return this.stack[this.getCount() - 1]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getCount() &#123;</span><br><span class=\"line\">    return this.stack.length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isEmpty() &#123;</span><br><span class=\"line\">    return this.getCount() &#x3D;&#x3D;&#x3D; 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><p>选取了 <a href=\"https://leetcode-cn.com/problems/valid-parentheses/\" target=\"_blank\" rel=\"noopener\">LeetCode 上序号为 20 的题目</a></p>\n<p>题意是匹配括号，可以通过栈的特性来完成这道题目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var isValid &#x3D; function(str) &#123;</span><br><span class=\"line\">  let map &#x3D; &#123;</span><br><span class=\"line\">    &#39;(&#39;: -1,</span><br><span class=\"line\">    &#39;)&#39;: 1,</span><br><span class=\"line\">    &#39;[&#39;: -2,</span><br><span class=\"line\">    &#39;]&#39;: 2,</span><br><span class=\"line\">    &#39;&#123;&#39;: -3,</span><br><span class=\"line\">    &#39;&#125;&#39;: 3</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  let stack &#x3D; [] &#x2F;&#x2F; 空数组</span><br><span class=\"line\">  for (let i &#x3D; 0; i &lt; str.length; i++) &#123; &#x2F;&#x2F; 遍历字符串每个字符</span><br><span class=\"line\">    if (map[str[i]] &lt; 0) &#123; &#x2F;&#x2F; 如果是左边括号，入栈</span><br><span class=\"line\">      stack.push(str[i])</span><br><span class=\"line\">    &#125; else &#123; &#x2F;&#x2F; 否则出栈，判断左右括号加到一起是不是0</span><br><span class=\"line\">      let last &#x3D; stack.pop()</span><br><span class=\"line\">      if (map[last] + map[str[i]] !&#x3D; 0) return false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (stack.length &gt; 0) return false &#x2F;&#x2F; 循环完成后，判断数组中时候还有剩下的，有剩下的说明括号没闭合</span><br><span class=\"line\">  return true &#x2F;&#x2F; 否则没剩下的，都闭合了</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><blockquote>\n<p>队列一个线性结构，特点是在某一端添加数据，在另一端删除数据，遵循<strong>先进先出(FIFO)</strong>的原则。</p>\n</blockquote>\n<h2 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>这里会讲解两种实现队列的方式，分别是<strong>单链队列</strong>和<strong>循环队列</strong>。</p>\n<ul>\n<li>链队列即队列的链式存储结构，结构上就是一个单链表，但数据只能是头进尾出。链式结构更加的灵活，特别是在存储空间上，基本不会出现溢出的情况，所以不用像循环队列一样判断队列是否已满，且空间的利用率相对较高。<ul>\n<li>链队列front指向头结点，头结点不存储数据，rear指向队尾结点。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>循环队列即为头尾相接的队列，它的最大存储空间和顺序队列一样由数组界定，但队列的长度并不一定等同于数组的长度；循环队列的队首和队尾分别由两个指针front、rear标识，于是这样就能做到首尾相接。</p>\n</li>\n<li><p>链队列：为操作方便，给链队列添加一个头结点</p>\n</li>\n<li><p>循环队列：附设两个指针front和rear分别指示队列头元素及尾元素的位置，每当插入新的队尾元素是，尾指针加1；每当删除队列头元素是，头指针加1</p>\n<ul>\n<li>如果用循环队列，则必须设定一个最大队列长度；若无法确定最大长度，则宜采用链队列。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"单链队列\"><a href=\"#单链队列\" class=\"headerlink\" title=\"单链队列\"></a>单链队列</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">class Queue &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    this.queue &#x3D; []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  enQueue(item) &#123;</span><br><span class=\"line\">    this.queue.push(item)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  deQueue() &#123;</span><br><span class=\"line\">    return this.queue.shift()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getHeader() &#123;</span><br><span class=\"line\">    return this.queue[0]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getLength() &#123;</span><br><span class=\"line\">    return this.queue.length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isEmpty() &#123;</span><br><span class=\"line\">    return this.getLength() &#x3D;&#x3D;&#x3D; 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为单链队列在出队操作的时候需要 O(n) 的时间复杂度，所以引入了循环队列。<br>循环队列的出队操作平均是 O(1) 的时间复杂度。</p>\n<h3 id=\"循环队列\"><a href=\"#循环队列\" class=\"headerlink\" title=\"循环队列\"></a>循环队列</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">class SqQueue &#123;</span><br><span class=\"line\">  constructor(length) &#123;</span><br><span class=\"line\">    this.queue &#x3D; new Array(length + 1)</span><br><span class=\"line\">    &#x2F;&#x2F; 队头</span><br><span class=\"line\">    this.first &#x3D; 0</span><br><span class=\"line\">    &#x2F;&#x2F; 队尾</span><br><span class=\"line\">    this.last &#x3D; 0</span><br><span class=\"line\">    &#x2F;&#x2F; 当前队列大小</span><br><span class=\"line\">    this.size &#x3D; 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  enQueue(item) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 判断队尾 + 1 是否为队头</span><br><span class=\"line\">    &#x2F;&#x2F; 如果是就代表需要扩容数组</span><br><span class=\"line\">    &#x2F;&#x2F; % this.queue.length 是为了防止数组越界</span><br><span class=\"line\">    if (this.first &#x3D;&#x3D;&#x3D; (this.last + 1) % this.queue.length) &#123;</span><br><span class=\"line\">      this.resize(this.getLength() * 2 + 1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.queue[this.last] &#x3D; item</span><br><span class=\"line\">    this.size++</span><br><span class=\"line\">    this.last &#x3D; (this.last + 1) % this.queue.length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  deQueue() &#123;</span><br><span class=\"line\">    if (this.isEmpty()) &#123;</span><br><span class=\"line\">      throw Error(&#39;Queue is empty&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    let r &#x3D; this.queue[this.first]</span><br><span class=\"line\">    this.queue[this.first] &#x3D; null</span><br><span class=\"line\">    this.first &#x3D; (this.first + 1) % this.queue.length</span><br><span class=\"line\">    this.size--</span><br><span class=\"line\">    &#x2F;&#x2F; 判断当前队列大小是否过小</span><br><span class=\"line\">    &#x2F;&#x2F; 为了保证不浪费空间，在队列空间等于总长度四分之一时</span><br><span class=\"line\">    &#x2F;&#x2F; 且不为 2 时缩小总长度为当前的一半</span><br><span class=\"line\">    if (this.size &#x3D;&#x3D;&#x3D; this.getLength() &#x2F; 4 &amp;&amp; this.getLength() &#x2F; 2 !&#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">      this.resize(this.getLength() &#x2F; 2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return r</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getHeader() &#123;</span><br><span class=\"line\">    if (this.isEmpty()) &#123;</span><br><span class=\"line\">      throw Error(&#39;Queue is empty&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return this.queue[this.first]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getLength() &#123;</span><br><span class=\"line\">    return this.queue.length - 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isEmpty() &#123;</span><br><span class=\"line\">    return this.first &#x3D;&#x3D;&#x3D; this.last</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  resize(length) &#123;</span><br><span class=\"line\">    let q &#x3D; new Array(length)</span><br><span class=\"line\">    for (let i &#x3D; 0; i &lt; length; i++) &#123;</span><br><span class=\"line\">      q[i] &#x3D; this.queue[(i + this.first) % this.queue.length]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.queue &#x3D; q</span><br><span class=\"line\">    this.first &#x3D; 0</span><br><span class=\"line\">    this.last &#x3D; this.size</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><blockquote>\n<p>链表是一个线性结构，同时也是一个天然的递归结构。链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。</p>\n</blockquote>\n<h2 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>单向链表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">class Node &#123;</span><br><span class=\"line\">  constructor(v, next) &#123;</span><br><span class=\"line\">    this.value &#x3D; v</span><br><span class=\"line\">    this.next &#x3D; next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class LinkList &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 链表长度</span><br><span class=\"line\">    this.size &#x3D; 0</span><br><span class=\"line\">    &#x2F;&#x2F; 虚拟头部</span><br><span class=\"line\">    this.dummyNode &#x3D; new Node(null, null)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  find(header, index, currentIndex) &#123;</span><br><span class=\"line\">    if (index &#x3D;&#x3D;&#x3D; currentIndex) return header</span><br><span class=\"line\">    return this.find(header.next, index, currentIndex + 1)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  addNode(v, index) &#123;</span><br><span class=\"line\">    this.checkIndex(index)</span><br><span class=\"line\">    &#x2F;&#x2F; 当往链表末尾插入时，prev.next 为空</span><br><span class=\"line\">    &#x2F;&#x2F; 其他情况时，因为要插入节点，所以插入的节点</span><br><span class=\"line\">    &#x2F;&#x2F; 的 next 应该是 prev.next</span><br><span class=\"line\">    &#x2F;&#x2F; 然后设置 prev.next 为插入的节点</span><br><span class=\"line\">    let prev &#x3D; this.find(this.dummyNode, index, 0)</span><br><span class=\"line\">    prev.next &#x3D; new Node(v, prev.next)</span><br><span class=\"line\">    this.size++</span><br><span class=\"line\">    return prev.next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  insertNode(v, index) &#123;</span><br><span class=\"line\">    return this.addNode(v, index)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  addToFirst(v) &#123;</span><br><span class=\"line\">    return this.addNode(v, 0)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  addToLast(v) &#123;</span><br><span class=\"line\">    return this.addNode(v, this.size)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  removeNode(index, isLast) &#123;</span><br><span class=\"line\">    this.checkIndex(index)</span><br><span class=\"line\">    index &#x3D; isLast ? index - 1 : index</span><br><span class=\"line\">    let prev &#x3D; this.find(this.dummyNode, index, 0)</span><br><span class=\"line\">    let node &#x3D; prev.next</span><br><span class=\"line\">    prev.next &#x3D; node.next</span><br><span class=\"line\">    node.next &#x3D; null</span><br><span class=\"line\">    this.size--</span><br><span class=\"line\">    return node</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  removeFirstNode() &#123;</span><br><span class=\"line\">    return this.removeNode(0)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  removeLastNode() &#123;</span><br><span class=\"line\">    return this.removeNode(this.size, true)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  checkIndex(index) &#123;</span><br><span class=\"line\">    if (index &lt; 0 || index &gt; this.size) throw Error(&#39;Index error&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getNode(index) &#123;</span><br><span class=\"line\">    this.checkIndex(index)</span><br><span class=\"line\">    if (this.isEmpty()) return</span><br><span class=\"line\">    return this.find(this.dummyNode, index, 0).next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isEmpty() &#123;</span><br><span class=\"line\">    return this.size &#x3D;&#x3D;&#x3D; 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getSize() &#123;</span><br><span class=\"line\">    return this.size</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><p>树拥有很多种结构，二叉树是树中最常用的结构，同时也是一个天然的递归结构。</p>\n<p>二叉树拥有一个根节点，每个节点至多拥有两个子节点，分别为：左节点和右节点。树的最底部节点称之为叶节点，当一颗树的叶数量数量为满时，该树可以称之为满二叉树。</p>\n<h2 id=\"二分搜索树\"><a href=\"#二分搜索树\" class=\"headerlink\" title=\"二分搜索树\"></a>二分搜索树</h2><p>二分搜索树也是二叉树，拥有二叉树的特性。但是区别在于二分搜索树每个节点的值都比他的左子树的值大，比右子树的值小。</p>\n<p>这种存储方式很适合于数据搜索。如下图所示，当需要查找 6 的时候，因为需要查找的值比根节点的值大，所以只需要在根节点的右子树上寻找，大大提高了搜索效率。</p>\n<h3 id=\"实现-3\"><a href=\"#实现-3\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">class Node &#123;</span><br><span class=\"line\">  constructor(value) &#123;</span><br><span class=\"line\">    this.value &#x3D; value</span><br><span class=\"line\">    this.left &#x3D; null</span><br><span class=\"line\">    this.right &#x3D; null</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class BST &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    this.root &#x3D; null</span><br><span class=\"line\">    this.size &#x3D; 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getSize() &#123;</span><br><span class=\"line\">    return this.size</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isEmpty() &#123;</span><br><span class=\"line\">    return this.size &#x3D;&#x3D;&#x3D; 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  addNode(v) &#123;</span><br><span class=\"line\">    this.root &#x3D; this._addChild(this.root, v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 添加节点时，需要比较添加的节点值和当前</span><br><span class=\"line\">  &#x2F;&#x2F; 节点值的大小</span><br><span class=\"line\">  _addChild(node, v) &#123;</span><br><span class=\"line\">    if (!node) &#123;</span><br><span class=\"line\">      this.size++</span><br><span class=\"line\">      return new Node(v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (node.value &gt; v) &#123;</span><br><span class=\"line\">      node.left &#x3D; this._addChild(node.left, v)</span><br><span class=\"line\">    &#125; else if (node.value &lt; v) &#123;</span><br><span class=\"line\">      node.right &#x3D; this._addChild(node.right, v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return node</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上是最基本的二分搜索树实现，接下来实现树的遍历。</p>\n<p>对于树的遍历来说，有三种遍历方法，分别是<strong>先序遍历</strong>、<strong>中序遍历</strong>、<strong>后序遍历</strong>。</p>\n<p>三种遍历的区别在于何时访问节点。在遍历树的过程中，每个节点都会遍历三次，分别是遍历到自己，遍历左子树和遍历右子树。如果需要实现先序遍历，那么只需要第一次遍历到节点时进行操作即可。</p>\n<p>以下都是递归实现.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 先序遍历可用于打印树的结构</span><br><span class=\"line\">&#x2F;&#x2F; 先序遍历先访问根节点，然后访问左节点，最后访问右节点。</span><br><span class=\"line\">preTraversal() &#123;</span><br><span class=\"line\">  this._pre(this.root)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_pre(node) &#123;</span><br><span class=\"line\">  if (node) &#123;</span><br><span class=\"line\">    console.log(node.value)</span><br><span class=\"line\">    this._pre(node.left)</span><br><span class=\"line\">    this._pre(node.right)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; 中序遍历可用于排序</span><br><span class=\"line\">&#x2F;&#x2F; 对于 BST 来说，中序遍历可以实现一次遍历就</span><br><span class=\"line\">&#x2F;&#x2F; 得到有序的值</span><br><span class=\"line\">&#x2F;&#x2F; 中序遍历表示先访问左节点，然后访问根节点，最后访问右节点。</span><br><span class=\"line\">midTraversal() &#123;</span><br><span class=\"line\">  this._mid(this.root)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_mid(node) &#123;</span><br><span class=\"line\">  if (node) &#123;</span><br><span class=\"line\">    this._mid(node.left)</span><br><span class=\"line\">    console.log(node.value)</span><br><span class=\"line\">    this._mid(node.right)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; 后序遍历可用于先操作子节点</span><br><span class=\"line\">&#x2F;&#x2F; 再操作父节点的场景</span><br><span class=\"line\">&#x2F;&#x2F; 后序遍历表示先访问左节点，然后访问右节点，最后访问根节点。</span><br><span class=\"line\">backTraversal() &#123;</span><br><span class=\"line\">  this._back(this.root)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_back(node) &#123;</span><br><span class=\"line\">  if (node) &#123;</span><br><span class=\"line\">    this._back(node.left)</span><br><span class=\"line\">    this._back(node.right)</span><br><span class=\"line\">    console.log(node.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上的这几种遍历都可以称之为深度遍历，对应的还有种遍历叫做广度遍历，也就是一层层地遍历树。对于广度遍历来说，我们需要利用之前讲过的队列结构来完成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">breadthTraversal() &#123;</span><br><span class=\"line\">  if (!this.root) return null</span><br><span class=\"line\">  let q &#x3D; new Queue()</span><br><span class=\"line\">  &#x2F;&#x2F; 将根节点入队</span><br><span class=\"line\">  q.enQueue(this.root)</span><br><span class=\"line\">  &#x2F;&#x2F; 循环判断队列是否为空，为空</span><br><span class=\"line\">  &#x2F;&#x2F; 代表树遍历完毕</span><br><span class=\"line\">  while (!q.isEmpty()) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 将队首出队，判断是否有左右子树</span><br><span class=\"line\">    &#x2F;&#x2F; 有的话，就先左后右入队</span><br><span class=\"line\">    let n &#x3D; q.deQueue()</span><br><span class=\"line\">    console.log(n.value)</span><br><span class=\"line\">    if (n.left) q.enQueue(n.left)</span><br><span class=\"line\">    if (n.right) q.enQueue(n.right)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来先介绍如何在树中寻找最小值或最大数。因为二分搜索树的特性，所以最小值一定在根节点的最左边，最大值相反</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">getMin() &#123;</span><br><span class=\"line\">  return this._getMin(this.root).value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_getMin(node) &#123;</span><br><span class=\"line\">  if (!node.left) return node</span><br><span class=\"line\">  return this._getMin(node.left)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getMax() &#123;</span><br><span class=\"line\">  return this._getMax(this.root).value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_getMax(node) &#123;</span><br><span class=\"line\">  if (!node.right) return node</span><br><span class=\"line\">  return this._getMin(node.right)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>向上取整和向下取整</strong>，这两个操作是相反的，所以代码也是类似的，这里只介绍如何向下取整。既然是向下取整，那么根据二分搜索树的特性，值一定在根节点的左侧。只需要一直遍历左子树直到当前节点的值不再大于等于需要的值，然后判断节点是否还拥有右子树。如果有的话，继续上面的递归判断。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">floor(v) &#123;</span><br><span class=\"line\">  let node &#x3D; this._floor(this.root, v)</span><br><span class=\"line\">  return node ? node.value : null</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_floor(node, v) &#123;</span><br><span class=\"line\">  if (!node) return null</span><br><span class=\"line\">  if (node.value &#x3D;&#x3D;&#x3D; v) return v</span><br><span class=\"line\">  &#x2F;&#x2F; 如果当前节点值还比需要的值大，就继续递归</span><br><span class=\"line\">  if (node.value &gt; v) &#123;</span><br><span class=\"line\">    return this._floor(node.left, v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 判断当前节点是否拥有右子树</span><br><span class=\"line\">  let right &#x3D; this._floor(node.right, v)</span><br><span class=\"line\">  if (right) return right</span><br><span class=\"line\">  return node</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>排名，这是用于获取给定值的排名或者排名第几的节点的值，这两个操作也是相反的，所以这个只介绍如何获取排名第几的节点的值。对于这个操作而言，我们需要略微的改造点代码，让每个节点拥有一个 size 属性。该属性表示该节点下有多少子节点（包含自身）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">class Node &#123;</span><br><span class=\"line\">  constructor(value) &#123;</span><br><span class=\"line\">    this.value &#x3D; value</span><br><span class=\"line\">    this.left &#x3D; null</span><br><span class=\"line\">    this.right &#x3D; null</span><br><span class=\"line\">    &#x2F;&#x2F; 修改代码</span><br><span class=\"line\">    this.size &#x3D; 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; 新增代码</span><br><span class=\"line\">_getSize(node) &#123;</span><br><span class=\"line\">  return node ? node.size : 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_addChild(node, v) &#123;</span><br><span class=\"line\">  if (!node) &#123;</span><br><span class=\"line\">    return new Node(v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (node.value &gt; v) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 修改代码</span><br><span class=\"line\">    node.size++</span><br><span class=\"line\">    node.left &#x3D; this._addChild(node.left, v)</span><br><span class=\"line\">  &#125; else if (node.value &lt; v) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 修改代码</span><br><span class=\"line\">    node.size++</span><br><span class=\"line\">    node.right &#x3D; this._addChild(node.right, v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return node</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">select(k) &#123;</span><br><span class=\"line\">  let node &#x3D; this._select(this.root, k)</span><br><span class=\"line\">  return node ? node.value : null</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_select(node, k) &#123;</span><br><span class=\"line\">  if (!node) return null</span><br><span class=\"line\">  &#x2F;&#x2F; 先获取左子树下有几个节点</span><br><span class=\"line\">  let size &#x3D; node.left ? node.left.size : 0</span><br><span class=\"line\">  &#x2F;&#x2F; 判断 size 是否大于 k</span><br><span class=\"line\">  &#x2F;&#x2F; 如果大于 k，代表所需要的节点在左节点</span><br><span class=\"line\">  if (size &gt; k) return this._select(node.left, k)</span><br><span class=\"line\">  &#x2F;&#x2F; 如果小于 k，代表所需要的节点在右节点</span><br><span class=\"line\">  &#x2F;&#x2F; 注意这里需要重新计算 k，减去根节点除了右子树的节点数量</span><br><span class=\"line\">  if (size &lt; k) return this._select(node.right, k - size - 1)</span><br><span class=\"line\">  return node</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来讲解的是二分搜索树中最难实现的部分：删除节点。因为对于删除节点来说，会存在以下几种情况</p>\n<ul>\n<li>需要删除的节点没有子树</li>\n<li>需要删除的节点只有一条子树</li>\n<li>需要删除的节点有左右两条树</li>\n</ul>\n<p>对于前两种情况很好解决，但是第三种情况就有难度了，所以先来实现相对简单的操作：删除最小节点，对于删除最小节点来说，是不存在第三种情况的，删除最大节点操作是和删除最小节点相反的，所以这里也就不再赘述。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">delectMin() &#123;</span><br><span class=\"line\">  this.root &#x3D; this._delectMin(this.root)</span><br><span class=\"line\">  console.log(this.root)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_delectMin(node) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 一直递归左子树</span><br><span class=\"line\">  &#x2F;&#x2F; 如果左子树为空，就判断节点是否拥有右子树</span><br><span class=\"line\">  &#x2F;&#x2F; 有右子树的话就把需要删除的节点替换为右子树</span><br><span class=\"line\">  if ((node !&#x3D; null) &amp; !node.left) return node.right</span><br><span class=\"line\">  node.left &#x3D; this._delectMin(node.left)</span><br><span class=\"line\">  &#x2F;&#x2F; 最后需要重新维护下节点的 &#96;size&#96;</span><br><span class=\"line\">  node.size &#x3D; this._getSize(node.left) + this._getSize(node.right) + 1</span><br><span class=\"line\">  return node</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后讲解的就是如何删除任意节点了。对于这个操作，T.Hibbard 在 1962 年提出了解决这个难题的办法，也就是如何解决第三种情况。</p>\n<p>当遇到这种情况时，需要取出当前节点的后继节点（也就是当前节点右子树的最小节点）来替换需要删除的节点。然后将需要删除节点的左子树赋值给后继结点，右子树删除后继结点后赋值给他。</p>\n<p>你如果对于这个解决办法有疑问的话，可以这样考虑。因为二分搜索树的特性，父节点一定比所有左子节点大，比所有右子节点小。那么当需要删除父节点时，势必需要拿出一个比父节点大的节点来替换父节点。这个节点肯定不存在于左子树，必然存在于右子树。然后又需要保持父节点都是比右子节点小的，那么就可以取出右子树中最小的那个节点来替换父节点。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">delect(v) &#123;</span><br><span class=\"line\">  this.root &#x3D; this._delect(this.root, v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_delect(node, v) &#123;</span><br><span class=\"line\">  if (!node) return null</span><br><span class=\"line\">  &#x2F;&#x2F; 寻找的节点比当前节点小，去左子树找</span><br><span class=\"line\">  if (node.value &lt; v) &#123;</span><br><span class=\"line\">    node.right &#x3D; this._delect(node.right, v)</span><br><span class=\"line\">  &#125; else if (node.value &gt; v) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 寻找的节点比当前节点大，去右子树找</span><br><span class=\"line\">    node.left &#x3D; this._delect(node.left, v)</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 进入这个条件说明已经找到节点</span><br><span class=\"line\">    &#x2F;&#x2F; 先判断节点是否拥有拥有左右子树中的一个</span><br><span class=\"line\">    &#x2F;&#x2F; 是的话，将子树返回出去，这里和 &#96;_delectMin&#96; 的操作一样</span><br><span class=\"line\">    if (!node.left) return node.right</span><br><span class=\"line\">    if (!node.right) return node.left</span><br><span class=\"line\">    &#x2F;&#x2F; 进入这里，代表节点拥有左右子树</span><br><span class=\"line\">    &#x2F;&#x2F; 先取出当前节点的后继结点，也就是取当前节点右子树的最小值</span><br><span class=\"line\">    let min &#x3D; this._getMin(node.right)</span><br><span class=\"line\">    &#x2F;&#x2F; 取出最小值后，删除最小值</span><br><span class=\"line\">    &#x2F;&#x2F; 然后把删除节点后的子树赋值给最小值节点</span><br><span class=\"line\">    min.right &#x3D; this._delectMin(node.right)</span><br><span class=\"line\">    &#x2F;&#x2F; 左子树不动</span><br><span class=\"line\">    min.left &#x3D; node.left</span><br><span class=\"line\">    node &#x3D; min</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 维护 size</span><br><span class=\"line\">  node.size &#x3D; this._getSize(node.left) + this._getSize(node.right) + 1</span><br><span class=\"line\">  return node</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AVL-树\"><a href=\"#AVL-树\" class=\"headerlink\" title=\"AVL 树\"></a>AVL 树</h2><blockquote>\n<p>二分搜索树实际在业务中是受到限制的，因为并不是严格的 O(logN)，在极端情况下会退化成链表，比如加入一组升序的数字就会造成这种情况。</p>\n</blockquote>\n<blockquote>\n<p>AVL 树改进了二分搜索树，在 AVL 树中任意节点的左右子树的高度差都不大于 1，这样保证了时间复杂度是严格的 O(logN)。基于此，对 AVL 树增加或删除节点时可能需要旋转树来达到高度的平衡。</p>\n</blockquote>\n<h3 id=\"实现-4\"><a href=\"#实现-4\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>因为 AVL 树是改进了二分搜索树，所以部分代码是于二分搜索树重复的，对于重复内容不作再次解析。</p>\n<p>对于 AVL 树来说，添加节点会有四种情况<br><img src=\"https://s2.ax1x.com/2020/01/09/lWB0nf.png\" alt=\"lWB0nf.png\"></p>\n<p>对于左左情况来说，新增加的节点位于节点 2 的左侧，这时树已经不平衡，需要旋转。因为搜索树的特性，节点比左节点大，比右节点小，所以旋转以后也要实现这个特性。</p>\n<p>旋转之前：new &lt; 2 &lt; C &lt; 3 &lt; B &lt; 5 &lt; A，右旋之后节点 3 为根节点，这时候需要将节点 3 的右节点加到节点 5 的左边，最后还需要更新节点的高度。</p>\n<p>对于右右情况来说，相反于左左情况，所以不再赘述。</p>\n<p>对于左右情况来说，新增加的节点位于节点 4 的右侧。对于这种情况，需要通过两次旋转来达到目的。</p>\n<p>首先对节点的左节点左旋，这时树满足左左的情况，再对节点进行一次右旋就可以达到目的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">class Node &#123;</span><br><span class=\"line\">  constructor(value) &#123;</span><br><span class=\"line\">    this.value &#x3D; value</span><br><span class=\"line\">    this.left &#x3D; null</span><br><span class=\"line\">    this.right &#x3D; null</span><br><span class=\"line\">    this.height &#x3D; 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class AVL &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    this.root &#x3D; null</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  addNode(v) &#123;</span><br><span class=\"line\">    this.root &#x3D; this._addChild(this.root, v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _addChild(node, v) &#123;</span><br><span class=\"line\">    if (!node) &#123;</span><br><span class=\"line\">      return new Node(v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (node.value &gt; v) &#123;</span><br><span class=\"line\">      node.left &#x3D; this._addChild(node.left, v)</span><br><span class=\"line\">    &#125; else if (node.value &lt; v) &#123;</span><br><span class=\"line\">      node.right &#x3D; this._addChild(node.right, v)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      node.value &#x3D; v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node.height &#x3D;</span><br><span class=\"line\">      1 + Math.max(this._getHeight(node.left), this._getHeight(node.right))</span><br><span class=\"line\">    let factor &#x3D; this._getBalanceFactor(node)</span><br><span class=\"line\">    &#x2F;&#x2F; 当需要右旋时，根节点的左树一定比右树高度高</span><br><span class=\"line\">    if (factor &gt; 1 &amp;&amp; this._getBalanceFactor(node.left) &gt;&#x3D; 0) &#123;</span><br><span class=\"line\">      return this._rightRotate(node)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 当需要左旋时，根节点的左树一定比右树高度矮</span><br><span class=\"line\">    if (factor &lt; -1 &amp;&amp; this._getBalanceFactor(node.right) &lt;&#x3D; 0) &#123;</span><br><span class=\"line\">      return this._leftRotate(node)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 左右情况</span><br><span class=\"line\">    &#x2F;&#x2F; 节点的左树比右树高，且节点的左树的右树比节点的左树的左树高</span><br><span class=\"line\">    if (factor &gt; 1 &amp;&amp; this._getBalanceFactor(node.left) &lt; 0) &#123;</span><br><span class=\"line\">      node.left &#x3D; this._leftRotate(node.left)</span><br><span class=\"line\">      return this._rightRotate(node)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 右左情况</span><br><span class=\"line\">    &#x2F;&#x2F; 节点的左树比右树矮，且节点的右树的右树比节点的右树的左树矮</span><br><span class=\"line\">    if (factor &lt; -1 &amp;&amp; this._getBalanceFactor(node.right) &gt; 0) &#123;</span><br><span class=\"line\">      node.right &#x3D; this._rightRotate(node.right)</span><br><span class=\"line\">      return this._leftRotate(node)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return node</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _getHeight(node) &#123;</span><br><span class=\"line\">    if (!node) return 0</span><br><span class=\"line\">    return node.height</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _getBalanceFactor(node) &#123;</span><br><span class=\"line\">    return this._getHeight(node.left) - this._getHeight(node.right)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 节点右旋</span><br><span class=\"line\">  &#x2F;&#x2F;           5                    2</span><br><span class=\"line\">  &#x2F;&#x2F;         &#x2F;   \\                &#x2F;   \\</span><br><span class=\"line\">  &#x2F;&#x2F;        2     6   &#x3D;&#x3D;&gt;       1      5</span><br><span class=\"line\">  &#x2F;&#x2F;       &#x2F;  \\               &#x2F;       &#x2F;  \\</span><br><span class=\"line\">  &#x2F;&#x2F;      1    3             new     3    6</span><br><span class=\"line\">  &#x2F;&#x2F;     &#x2F;</span><br><span class=\"line\">  &#x2F;&#x2F;    new</span><br><span class=\"line\">  _rightRotate(node) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 旋转后新根节点</span><br><span class=\"line\">    let newRoot &#x3D; node.left</span><br><span class=\"line\">    &#x2F;&#x2F; 需要移动的节点</span><br><span class=\"line\">    let moveNode &#x3D; newRoot.right</span><br><span class=\"line\">    &#x2F;&#x2F; 节点 2 的右节点改为节点 5</span><br><span class=\"line\">    newRoot.right &#x3D; node</span><br><span class=\"line\">    &#x2F;&#x2F; 节点 5 左节点改为节点 3</span><br><span class=\"line\">    node.left &#x3D; moveNode</span><br><span class=\"line\">    &#x2F;&#x2F; 更新树的高度</span><br><span class=\"line\">    node.height &#x3D;</span><br><span class=\"line\">      1 + Math.max(this._getHeight(node.left), this._getHeight(node.right))</span><br><span class=\"line\">    newRoot.height &#x3D;</span><br><span class=\"line\">      1 +</span><br><span class=\"line\">      Math.max(this._getHeight(newRoot.left), this._getHeight(newRoot.right))</span><br><span class=\"line\"></span><br><span class=\"line\">    return newRoot</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 节点左旋</span><br><span class=\"line\">  &#x2F;&#x2F;           4                    6</span><br><span class=\"line\">  &#x2F;&#x2F;         &#x2F;   \\                &#x2F;   \\</span><br><span class=\"line\">  &#x2F;&#x2F;        2     6   &#x3D;&#x3D;&gt;       4      7</span><br><span class=\"line\">  &#x2F;&#x2F;             &#x2F;  \\         &#x2F;   \\      \\</span><br><span class=\"line\">  &#x2F;&#x2F;            5     7      2     5      new</span><br><span class=\"line\">  &#x2F;&#x2F;                   \\</span><br><span class=\"line\">  &#x2F;&#x2F;                    new</span><br><span class=\"line\">  _leftRotate(node) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 旋转后新根节点</span><br><span class=\"line\">    let newRoot &#x3D; node.right</span><br><span class=\"line\">    &#x2F;&#x2F; 需要移动的节点</span><br><span class=\"line\">    let moveNode &#x3D; newRoot.left</span><br><span class=\"line\">    &#x2F;&#x2F; 节点 6 的左节点改为节点 4</span><br><span class=\"line\">    newRoot.left &#x3D; node</span><br><span class=\"line\">    &#x2F;&#x2F; 节点 4 右节点改为节点 5</span><br><span class=\"line\">    node.right &#x3D; moveNode</span><br><span class=\"line\">    &#x2F;&#x2F; 更新树的高度</span><br><span class=\"line\">    node.height &#x3D;</span><br><span class=\"line\">      1 + Math.max(this._getHeight(node.left), this._getHeight(node.right))</span><br><span class=\"line\">    newRoot.height &#x3D;</span><br><span class=\"line\">      1 +</span><br><span class=\"line\">      Math.max(this._getHeight(newRoot.left), this._getHeight(newRoot.right))</span><br><span class=\"line\"></span><br><span class=\"line\">    return newRoot</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Trie\"><a href=\"#Trie\" class=\"headerlink\" title=\"Trie\"></a>Trie</h1><blockquote>\n<p>在计算机科学，trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。<br>简单点来说，这个结构的作用大多是为了方便搜索字符串，该树有以下几个特点</p>\n</blockquote>\n<ul>\n<li>根节点代表空字符串，每个节点都有 N（假如搜索英文字符，就有 26 条） 条链接，每条链接代表一个字符</li>\n<li>节点不存储字符，只有路径才存储，这点和其他的树结构不同</li>\n<li>从根节点开始到任意一个节点，将沿途经过的字符连接起来就是该节点对应的字符串</li>\n</ul>\n<h2 id=\"实现-5\"><a href=\"#实现-5\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>总得来说 Trie 的实现相比别的树结构来说简单的很多，实现就以搜索英文字符为例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">class TrieNode &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 代表每个字符经过节点的次数</span><br><span class=\"line\">    this.path &#x3D; 0</span><br><span class=\"line\">    &#x2F;&#x2F; 代表到该节点的字符串有几个</span><br><span class=\"line\">    this.end &#x3D; 0</span><br><span class=\"line\">    &#x2F;&#x2F; 链接</span><br><span class=\"line\">    this.next &#x3D; new Array(26).fill(null)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Trie &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 根节点，代表空字符</span><br><span class=\"line\">    this.root &#x3D; new TrieNode()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 插入字符串</span><br><span class=\"line\">  insert(str) &#123;</span><br><span class=\"line\">    if (!str) return</span><br><span class=\"line\">    let node &#x3D; this.root</span><br><span class=\"line\">    for (let i &#x3D; 0; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 获得字符先对应的索引</span><br><span class=\"line\">      let index &#x3D; str[i].charCodeAt() - &#39;a&#39;.charCodeAt()</span><br><span class=\"line\">      &#x2F;&#x2F; 如果索引对应没有值，就创建</span><br><span class=\"line\">      if (!node.next[index]) &#123;</span><br><span class=\"line\">        node.next[index] &#x3D; new TrieNode()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      node.path +&#x3D; 1</span><br><span class=\"line\">      node &#x3D; node.next[index]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node.end +&#x3D; 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 搜索字符串出现的次数</span><br><span class=\"line\">  search(str) &#123;</span><br><span class=\"line\">    if (!str) return</span><br><span class=\"line\">    let node &#x3D; this.root</span><br><span class=\"line\">    for (let i &#x3D; 0; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">      let index &#x3D; str[i].charCodeAt() - &#39;a&#39;.charCodeAt()</span><br><span class=\"line\">      &#x2F;&#x2F; 如果索引对应没有值，代表没有需要搜素的字符串</span><br><span class=\"line\">      if (!node.next[index]) &#123;</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      node &#x3D; node.next[index]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return node.end</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 删除字符串</span><br><span class=\"line\">  delete(str) &#123;</span><br><span class=\"line\">    if (!this.search(str)) return</span><br><span class=\"line\">    let node &#x3D; this.root</span><br><span class=\"line\">    for (let i &#x3D; 0; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">      let index &#x3D; str[i].charCodeAt() - &#39;a&#39;.charCodeAt()</span><br><span class=\"line\">      &#x2F;&#x2F; 如果索引对应的节点的 Path 为 0，代表经过该节点的字符串</span><br><span class=\"line\">      &#x2F;&#x2F; 已经一个，直接删除即可</span><br><span class=\"line\">      if (--node.next[index].path &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">        node.next[index] &#x3D; null</span><br><span class=\"line\">        return</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      node &#x3D; node.next[index]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node.end -&#x3D; 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h1><blockquote>\n<p>并查集是一种特殊的树结构，用于处理一些不交集的合并及查询问题。该结构中每个节点都有一个父节点，如果只有当前一个节点，那么该节点的父节点指向自己。<br>这个结构中有两个重要的操作，分别是：</p>\n</blockquote>\n<ul>\n<li>Find：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子集。</li>\n<li>Union：将两个子集合并成同一个集合。</li>\n</ul>\n<h2 id=\"实现-6\"><a href=\"#实现-6\" class=\"headerlink\" title=\"实现\"></a>实现</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">class DisjointSet &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 初始化样本</span><br><span class=\"line\">  constructor(count) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 初始化时，每个节点的父节点都是自己</span><br><span class=\"line\">    this.parent &#x3D; new Array(count)</span><br><span class=\"line\">    &#x2F;&#x2F; 用于记录树的深度，优化搜索复杂度</span><br><span class=\"line\">    this.rank &#x3D; new Array(count)</span><br><span class=\"line\">    for (let i &#x3D; 0; i &lt; count; i++) &#123;</span><br><span class=\"line\">      this.parent[i] &#x3D; i</span><br><span class=\"line\">      this.rank[i] &#x3D; 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  find(p) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 寻找当前节点的父节点是否为自己，不是的话表示还没找到</span><br><span class=\"line\">    &#x2F;&#x2F; 开始进行路径压缩优化</span><br><span class=\"line\">    &#x2F;&#x2F; 假设当前节点父节点为 A</span><br><span class=\"line\">    &#x2F;&#x2F; 将当前节点挂载到 A 节点的父节点上，达到压缩深度的目的</span><br><span class=\"line\">    while (p !&#x3D; this.parent[p]) &#123;</span><br><span class=\"line\">      this.parent[p] &#x3D; this.parent[this.parent[p]]</span><br><span class=\"line\">      p &#x3D; this.parent[p]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return p</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isConnected(p, q) &#123;</span><br><span class=\"line\">    return this.find(p) &#x3D;&#x3D;&#x3D; this.find(q)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 合并</span><br><span class=\"line\">  union(p, q) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 找到两个数字的父节点</span><br><span class=\"line\">    let i &#x3D; this.find(p)</span><br><span class=\"line\">    let j &#x3D; this.find(q)</span><br><span class=\"line\">    if (i &#x3D;&#x3D;&#x3D; j) return</span><br><span class=\"line\">    &#x2F;&#x2F; 判断两棵树的深度，深度小的加到深度大的树下面</span><br><span class=\"line\">    &#x2F;&#x2F; 如果两棵树深度相等，那就无所谓怎么加</span><br><span class=\"line\">    if (this.rank[i] &lt; this.rank[j]) &#123;</span><br><span class=\"line\">      this.parent[i] &#x3D; j</span><br><span class=\"line\">    &#125; else if (this.rank[i] &gt; this.rank[j]) &#123;</span><br><span class=\"line\">      this.parent[j] &#x3D; i</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      this.parent[i] &#x3D; j</span><br><span class=\"line\">      this.rank[j] +&#x3D; 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1><p>堆通常是一个可以被看做一棵树的数组对象。<br>堆的实现通过构造<strong>二叉堆</strong>，实为二叉树的一种。这种数据结构具有以下性质。</p>\n<ul>\n<li>任意节点小于（或大于）它的所有子节点</li>\n<li>堆总是一棵完全树。即除了最底层，其他层的节点都被元素填满，且最底层从左到右填入。<br>将根节点最大的堆叫做<strong>最大堆</strong>或<strong>大根堆</strong>，根节点最小的堆叫做<strong>最小堆</strong>或<strong>小根堆</strong>。<br>优先队列也完全可以用堆来实现，操作是一模一样的。</li>\n</ul>\n<h2 id=\"实现大根堆\"><a href=\"#实现大根堆\" class=\"headerlink\" title=\"实现大根堆\"></a>实现大根堆</h2><p>堆的每个节点的左边子节点索引是 i * 2 + 1，右边是 i * 2 + 2，父节点是 (i - 1) /2。<br>堆有两个核心的操作，分别是 shiftUp 和 shiftDown 。前者用于添加元素，后者用于删除根节点。<br>shiftUp 的核心思路是一路将节点与父节点对比大小，如果比父节点大，就和父节点交换位置。<br>shiftDown 的核心思路是先将根节点和末尾交换位置，然后移除末尾元素。接下来循环判断父节点和两个子节点的大小，如果子节点大，就把最大的子节点和父节点交换。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">class MaxHeap &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    this.heap &#x3D; []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  size() &#123;</span><br><span class=\"line\">    return this.heap.length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  empty() &#123;</span><br><span class=\"line\">    return this.size() &#x3D;&#x3D; 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  add(item) &#123;</span><br><span class=\"line\">    this.heap.push(item)</span><br><span class=\"line\">    this._shiftUp(this.size() - 1)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  removeMax() &#123;</span><br><span class=\"line\">    this._shiftDown(0)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getParentIndex(k) &#123;</span><br><span class=\"line\">    return parseInt((k - 1) &#x2F; 2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getLeftIndex(k) &#123;</span><br><span class=\"line\">    return k * 2 + 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _shiftUp(k) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 如果当前节点比父节点大，就交换</span><br><span class=\"line\">    while (this.heap[k] &gt; this.heap[this.getParentIndex(k)]) &#123;</span><br><span class=\"line\">      this._swap(k, this.getParentIndex(k))</span><br><span class=\"line\">      &#x2F;&#x2F; 将索引变成父节点</span><br><span class=\"line\">      k &#x3D; this.getParentIndex(k)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _shiftDown(k) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 交换首位并删除末尾</span><br><span class=\"line\">    this._swap(k, this.size() - 1)</span><br><span class=\"line\">    this.heap.splice(this.size() - 1, 1)</span><br><span class=\"line\">    &#x2F;&#x2F; 判断节点是否有左孩子，因为二叉堆的特性，有右必有左</span><br><span class=\"line\">    while (this.getLeftIndex(k) &lt; this.size()) &#123;</span><br><span class=\"line\">      let j &#x3D; this.getLeftIndex(k)</span><br><span class=\"line\">      &#x2F;&#x2F; 判断是否有右孩子，并且右孩子是否大于左孩子</span><br><span class=\"line\">      if (j + 1 &lt; this.size() &amp;&amp; this.heap[j + 1] &gt; this.heap[j]) j++</span><br><span class=\"line\">      &#x2F;&#x2F; 判断父节点是否已经比子节点都大</span><br><span class=\"line\">      if (this.heap[k] &gt;&#x3D; this.heap[j]) break</span><br><span class=\"line\">      this._swap(k, j)</span><br><span class=\"line\">      k &#x3D; j</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _swap(left, right) &#123;</span><br><span class=\"line\">    let rightValue &#x3D; this.heap[right]</span><br><span class=\"line\">    this.heap[right] &#x3D; this.heap[left]</span><br><span class=\"line\">    this.heap[left] &#x3D; rightValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"前端常见知识点整理 ---- 继承","date":"2020-01-03T01:40:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 继承\n在 ES5 中，我们可以使用如下方式解决继承的问题\n```\n// js代码\nfunction Super() {}\nSuper.prototype.getNumber = function() {\n  return 1\n}\n\nfunction Sub() {}\nlet s = new Sub()\nSub.prototype = Object.create(Super.prototype, {\n  constructor: {\n    value: Sub,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  }\n})\n```\n以上继承实现思路就是将子类的原型设置为父类的原型\n在 `ES6` 中，我们可以通过 `class` 语法轻松解决这个问题\n\n```\n// js代码\n\nclass MyDate extends Date {\n  test() {\n    return this.getTime()\n  }\n}\nlet myDate = new MyDate()\nmyDate.test()\n```\n但是 `ES6` 不是所有浏览器都兼容，所以我们需要使用 `Babel` 来编译这段代码。\n\n如果你使用编译过得代码调用 `myDate.test()` 你会惊奇地发现出现了报错\n\n因为在 `JS` 底层有限制，如果不是由 `Date` 构造出来的实例的话，是不能调用 `Date` 里的函数的。所以这也侧面的说明了：***ES6 中的 class 继承与 ES5 中的一般继承写法是不同的***。\n\n既然底层限制了实例必须由 `Date` 构造出来，那么我们可以改变下思路实现继承\n```\n// js代码\n\nfunction MyData() {\n\n}\nMyData.prototype.test = function () {\n  return this.getTime()\n}\nlet d = new Date() // 父类实例\nObject.setPrototypeOf(d, MyData.prototype)\nObject.setPrototypeOf(MyData.prototype, Date.prototype)\n```\n以上继承实现思路：先创建父类实例 => 改变实例原先的 `__proto__` 转而连接到子类的 `prototype` => 子类的 `prototype` 的 `__proto__` 改为父类的 `prototype`。\n\n通过以上方法实现的继承就可以完美解决 JS 底层的这个限制。","source":"_posts/FE-guide-inherit.md","raw":"---\ntitle: 前端常见知识点整理 ---- 继承\ndate: 2020-01-03 09:40:00\ncategories: \n  - 前端技术\n  - 前端常见知识点整理\ntags: \n\t- 面试\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 继承\n在 ES5 中，我们可以使用如下方式解决继承的问题\n```\n// js代码\nfunction Super() {}\nSuper.prototype.getNumber = function() {\n  return 1\n}\n\nfunction Sub() {}\nlet s = new Sub()\nSub.prototype = Object.create(Super.prototype, {\n  constructor: {\n    value: Sub,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  }\n})\n```\n以上继承实现思路就是将子类的原型设置为父类的原型\n在 `ES6` 中，我们可以通过 `class` 语法轻松解决这个问题\n\n```\n// js代码\n\nclass MyDate extends Date {\n  test() {\n    return this.getTime()\n  }\n}\nlet myDate = new MyDate()\nmyDate.test()\n```\n但是 `ES6` 不是所有浏览器都兼容，所以我们需要使用 `Babel` 来编译这段代码。\n\n如果你使用编译过得代码调用 `myDate.test()` 你会惊奇地发现出现了报错\n\n因为在 `JS` 底层有限制，如果不是由 `Date` 构造出来的实例的话，是不能调用 `Date` 里的函数的。所以这也侧面的说明了：***ES6 中的 class 继承与 ES5 中的一般继承写法是不同的***。\n\n既然底层限制了实例必须由 `Date` 构造出来，那么我们可以改变下思路实现继承\n```\n// js代码\n\nfunction MyData() {\n\n}\nMyData.prototype.test = function () {\n  return this.getTime()\n}\nlet d = new Date() // 父类实例\nObject.setPrototypeOf(d, MyData.prototype)\nObject.setPrototypeOf(MyData.prototype, Date.prototype)\n```\n以上继承实现思路：先创建父类实例 => 改变实例原先的 `__proto__` 转而连接到子类的 `prototype` => 子类的 `prototype` 的 `__proto__` 改为父类的 `prototype`。\n\n通过以上方法实现的继承就可以完美解决 JS 底层的这个限制。","slug":"FE-guide-inherit","published":1,"updated":"2020-04-02T03:20:12.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grxh001mooa6ce2ie6ii","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h1><p>在 ES5 中，我们可以使用如下方式解决继承的问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">function Super() &#123;&#125;</span><br><span class=\"line\">Super.prototype.getNumber &#x3D; function() &#123;</span><br><span class=\"line\">  return 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Sub() &#123;&#125;</span><br><span class=\"line\">let s &#x3D; new Sub()</span><br><span class=\"line\">Sub.prototype &#x3D; Object.create(Super.prototype, &#123;</span><br><span class=\"line\">  constructor: &#123;</span><br><span class=\"line\">    value: Sub,</span><br><span class=\"line\">    enumerable: false,</span><br><span class=\"line\">    writable: true,</span><br><span class=\"line\">    configurable: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>以上继承实现思路就是将子类的原型设置为父类的原型<br>在 <code>ES6</code> 中，我们可以通过 <code>class</code> 语法轻松解决这个问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">class MyDate extends Date &#123;</span><br><span class=\"line\">  test() &#123;</span><br><span class=\"line\">    return this.getTime()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let myDate &#x3D; new MyDate()</span><br><span class=\"line\">myDate.test()</span><br></pre></td></tr></table></figure>\n<p>但是 <code>ES6</code> 不是所有浏览器都兼容，所以我们需要使用 <code>Babel</code> 来编译这段代码。</p>\n<p>如果你使用编译过得代码调用 <code>myDate.test()</code> 你会惊奇地发现出现了报错</p>\n<p>因为在 <code>JS</code> 底层有限制，如果不是由 <code>Date</code> 构造出来的实例的话，是不能调用 <code>Date</code> 里的函数的。所以这也侧面的说明了：<strong><em>ES6 中的 class 继承与 ES5 中的一般继承写法是不同的</em></strong>。</p>\n<p>既然底层限制了实例必须由 <code>Date</code> 构造出来，那么我们可以改变下思路实现继承</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function MyData() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">MyData.prototype.test &#x3D; function () &#123;</span><br><span class=\"line\">  return this.getTime()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let d &#x3D; new Date() &#x2F;&#x2F; 父类实例</span><br><span class=\"line\">Object.setPrototypeOf(d, MyData.prototype)</span><br><span class=\"line\">Object.setPrototypeOf(MyData.prototype, Date.prototype)</span><br></pre></td></tr></table></figure>\n<p>以上继承实现思路：先创建父类实例 =&gt; 改变实例原先的 <code>__proto__</code> 转而连接到子类的 <code>prototype</code> =&gt; 子类的 <code>prototype</code> 的 <code>__proto__</code> 改为父类的 <code>prototype</code>。</p>\n<p>通过以上方法实现的继承就可以完美解决 JS 底层的这个限制。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h1><p>在 ES5 中，我们可以使用如下方式解决继承的问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">function Super() &#123;&#125;</span><br><span class=\"line\">Super.prototype.getNumber &#x3D; function() &#123;</span><br><span class=\"line\">  return 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Sub() &#123;&#125;</span><br><span class=\"line\">let s &#x3D; new Sub()</span><br><span class=\"line\">Sub.prototype &#x3D; Object.create(Super.prototype, &#123;</span><br><span class=\"line\">  constructor: &#123;</span><br><span class=\"line\">    value: Sub,</span><br><span class=\"line\">    enumerable: false,</span><br><span class=\"line\">    writable: true,</span><br><span class=\"line\">    configurable: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>以上继承实现思路就是将子类的原型设置为父类的原型<br>在 <code>ES6</code> 中，我们可以通过 <code>class</code> 语法轻松解决这个问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">class MyDate extends Date &#123;</span><br><span class=\"line\">  test() &#123;</span><br><span class=\"line\">    return this.getTime()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let myDate &#x3D; new MyDate()</span><br><span class=\"line\">myDate.test()</span><br></pre></td></tr></table></figure>\n<p>但是 <code>ES6</code> 不是所有浏览器都兼容，所以我们需要使用 <code>Babel</code> 来编译这段代码。</p>\n<p>如果你使用编译过得代码调用 <code>myDate.test()</code> 你会惊奇地发现出现了报错</p>\n<p>因为在 <code>JS</code> 底层有限制，如果不是由 <code>Date</code> 构造出来的实例的话，是不能调用 <code>Date</code> 里的函数的。所以这也侧面的说明了：<strong><em>ES6 中的 class 继承与 ES5 中的一般继承写法是不同的</em></strong>。</p>\n<p>既然底层限制了实例必须由 <code>Date</code> 构造出来，那么我们可以改变下思路实现继承</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function MyData() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">MyData.prototype.test &#x3D; function () &#123;</span><br><span class=\"line\">  return this.getTime()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let d &#x3D; new Date() &#x2F;&#x2F; 父类实例</span><br><span class=\"line\">Object.setPrototypeOf(d, MyData.prototype)</span><br><span class=\"line\">Object.setPrototypeOf(MyData.prototype, Date.prototype)</span><br></pre></td></tr></table></figure>\n<p>以上继承实现思路：先创建父类实例 =&gt; 改变实例原先的 <code>__proto__</code> 转而连接到子类的 <code>prototype</code> =&gt; 子类的 <code>prototype</code> 的 <code>__proto__</code> 改为父类的 <code>prototype</code>。</p>\n<p>通过以上方法实现的继承就可以完美解决 JS 底层的这个限制。</p>\n"},{"title":"前端常见知识点整理 ---- 数据类型、类型判断、类型转换、类型比较","date":"2020-01-02T08:22:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n> 温故而知新，可以为师矣。   \n>            ———————— 论语\n\n这篇文章主要是把我看过的书中的知识点，还有其他人整理的面试题进行整理，巩固自己的前端开发理论知识，希望其他看到这篇文章的人也能有所帮助。\n<!-- more -->\n\n# JS知识点\n> 当前市场中，如何区分一个好一点的前端开发和一般的前端开发，主要看的就是js能力的差距，好的前端开发，JS玩的转，不仅仅是框架玩的好，还要JS的基础扎实，只有基础与新技术都玩的6的前端开发才是好前端。\n\n上面这句话不是什么名人或者某位知名前端大拿说的，这是我在公司这几年面试招聘的过程中真真切切总结感受的。\n所以可以说得JS者得高级前端，所以下面也主要是写JS的相关知识点。\n\n## JavaScript内置数据类型 --- 数据类型\n无论学什么语言最重要最基础的就是数据类型，《JavaScript权威指南》这本书中详细的介绍了JS中的数据类型，下面总结一下。\n\nJavaScript中数据类型分为两大类共七种内置数据类型，其一是6种***`基本类型`***，其二是1种***`引用类型`***，我发现在面试过程中好多面试者都不会先说有两大类，而是会直接蹦出数字类型、字符串类型。。。对象、数组也会被并排放在一起，这其实不是个掌握知识点的好方法，应该先把数据类型分成上面说的***`基本类型`***、***`引用类型`***这样两个大类之后，再看看这两大类中有什么其他的子类型，在记忆其他子类型之前我觉得应该先了解一下什么是***`基本类型`***和***`引用类型`***，实际上基本类型和引用类型的主要区别是存储的区别，基本类型在栈中，而引用类型的话，引用数据的地址存储在栈中，而对象本身是存储在堆中，引用的数据地址是个16进制的数据值，它就像一把钥匙让你能够找到宝藏在什么地方。这就是基本数据类型和引用类型的区别了。\n\n那么如何记住有哪些基本数据类型和引用数据类型呢，实际上只要记住了6个基本数据类型，其他的都是引用数据类型，而所有的引用数据类型的祖宗都是Object，所以引用数据类型实际上只有Object一个，那么像是Array等其他子类型，都是Object的孩子，不跟Object在一个级别上。\n\n基本数据类型有哪些呢？其实挺好记的，数字，字符串，这两个一个像温柔的文学少女（string），一个像有点精于算计的男生（number），还有一个布尔类型（boolen）他像是班级里正义感爆棚的人，只论对错；另外还有个差生，没头脑似的未定义（Undefined）还有一个失了忆记不起来自己是谁的空（Null），最后还有一个新加入的插班生，总是带着口罩的标志符号（Symbol），这些人构成了这个班级的所有学生，也就是全部的基本类型，那么引用类型的对象Object呢就像及了漂亮爱化妆的班主任老师，有好多副面孔。不知道大家有没有看过一个动漫叫做《黑塔利亚》，他就是把国家都拟人化了，有了各自的性格，我很喜欢看，我觉得这些数据类型也各有各的特点，像这些国家一样，好了脑洞有点挖深了，有人会说我不就是这么几个简单的数据类型嘛，硬记下来不就好了，但是知识总有你硬记不下来的时候，最好的方法也是速记领域最为常用的方法，就是把你不熟悉的知识与你感兴趣的画面或者既往的知识串联起来，这样就能达到很好的记忆，如果你不喜欢动漫（怎么会有不喜欢动漫的人！！！），可以试试用其他的方法记，当然你如果硬要死记硬背那我也没办法，我继续开我的脑洞。\n如果你是学过Java开发的同学（如果是计算机专业出来的，应该都或多或少学过，非计算机专业的我也不知道说啥了。。），数字在Java中是分成 byte/short/int/long 的，但是在Js中没有那么多，就一个Number，它是浮点类型，基于 IEEE 754标准实现，刚才我不是说了Number是个精于算计的男生，精于算计就是说他分毫不差，这样浮点型就很好的记了下来，这个754的标准可以不记，如果非要记的话，你可以记成他是自称IEEE 754团体的成员。最后Number身后还跟着一个小弟，叫做NaN，他虽然是Number的小弟，但他总是说话不算数，自己说过什么都不承认。所以NaN!=NaN。\n老师是个爱化妆的老师，而这些学生也不是普通的学生，在学校他们是老老实实的基本类型，放了学之后一打扮，他们就各有了其他的能力，这个过程叫做装箱，具体的后面再说。（好了快回到现实吧你！）\n\n如果基础数据是字面量类型，那么他们就像是在上课的学生，只是学生而已，而当他们调用方法时，他们就成了下课后各种技能都有的新新人类，这个过程有时候是显示的，就像是有些学生喜欢大声嚷嚷，而更多的是你不自觉中就用到了装箱操作，是Js引擎提供的能力，就像是有些闷骚的学生一样。\n```\n// js代码\nlet aNumber = 111 // 这只是字面量，不是 number 类型\naNumber.toString() // 装箱操作自动转化成数字对象，使用时候才会转换为对象类型\n```\n对象有个深浅拷贝的知识点必须要会，对象因为是引用数据类型，在栈中存储的是地址，当用另一个变量接收了之前的变量，那么就好像把钥匙复制了一把，两把钥匙开的还是同一个门，而深拷贝呢就像是照着原来的样板间又造了一个一模一样的房间，这两个房间长得一样，但就是两个房间，钥匙自然也是不一样的，所以呢，当往房间里搬家具的时候，浅拷贝搬进去的是一个房间，所以两把钥匙打开之后看到的都是多了家具，而深拷贝的话，我只是往样板间搬了家具，所以照着装修的房间里是不可能有的，这就是浅拷贝原数据会受影响，而深拷贝不会。\n```\n// js代码\n\nlet a = { name: 'FE' }\nlet b = a\nb.name = 'EF'\nconsole.log(a.name) // EF 浅拷贝原数据会受影响\n```\n## 内置数据类型检测 Typeof --- 类型判断\n> typeof 对于基本类型，除了 null 都可以显示正确的类型\n\ntypeof 就像是学校的教导主任一样，他有着一双火眼金睛，不管是哪个同学，穿了什么样的衣服，他一问就能问出来这个学生是谁，大家都怕他，但是Null因为失忆了，他也不知道教导主任是谁，所以typeof就拿他也没办法，因为他不怕教导主任，教导主任甚至会以为他是老师呢。\n\n```\n// js代码\n\ntypeof 1 // 'number'\ntypeof '1' // 'string'\ntypeof undefined // 'undefined'\ntypeof true // 'boolean'\ntypeof Symbol() // 'symbol'\ntypeof b // b 没有声明，但是还会显示 undefined\n\ntypeof null // 'object' 这是JS中的bug\n```\n\n> typeof 对于对象，除了函数都会显示 object\n\n```\n// js代码\n\ntypeof [] // 'object'\ntypeof {} // 'object'\ntypeof console.log // 'function'\n```\n\n> 知识扩展：为什么会出现这种情况呢？因为在 JS 的最初版本中，使用的是 32 位系统，为了性能考虑使用低位存储了变量的类型信息，000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。\n\n***如果我们想获得一个变量的正确类型，可以通过 Object.prototype.toString.call(xx)。这样我们就可以获得类似 [object Type] 的字符串。***\n\n> 小知识扩展\n```\nlet a\n// 我们也可以这样判断 undefined\na === undefined\n// 但是 undefined 不是保留字，能够在低版本浏览器被赋值\nlet undefined = 1\n// 这样判断就会出错\n// 所以可以用下面的方式来判断，并且代码量更少\n// 因为 void 后面随便跟上一个组成表达式\n// 返回就是 undefined\na === void 0\n```\n\n## 类型转换\n### 转Boolean\n一句话可以概括\n> 在条件判断时，除了 `undefined`， `null`， `false`， `NaN`， `''`， `0`， `-0`，其他所有值都转为 true，包括所有对象。\n\n从上面这段话可以看出来，`undefined`、`null` 是基本类型之二，而`false`是布尔类型的假值，`NaN`是数字类型的无效值，`''`是字符串类型的空值，而`0`， `-0`都是数字类型的零值，可以看到，除了`0`、`-0`有些特殊，除了插班生`Symbol`，剩下的都是基本类型的假值，由此实际上就很好记了，有时候数字这个容易忘，但是记住“非0既真”这句话就好了。\n\n### 对象转基本类型\n对象在转换基本类型时，首先是先会调用ToPrimitive（原始类型），如果有hint参数调用对应的的类型方法，如果没有那默认先会调用 valueOf 然后调用 toString。如果返回了基本类型，结束。如果都没返回，那么Error***但是注意这两个方法你是可以重写的。***\n\n> Symbol.toPrimitive 是一个内置的 Symbol 值，它是作为对象的函数值属性存在的，当一个对象转换为对应的原始值时，会调用此函数。（来自MDN的解释）\n> 需要解释的关键机制是ToPrimitive函数。该函数是将任意值转换为相应的基本类型值。如果输入的就是一个基本类型值，那么将不做修改，被直接返回。如果值是非基本类型值，它将调用内部方法 [[DefaultValue]] 为对象找到一个默认值。\n> [[DefaultValue]]是每一个对象的内部属性。该方法需要一个可选的参数hint，值是Number或String。如果没有提供hint，则默认为Number(除非该对象是Date，在这种情况下默认为String)。然后将调用toString和valueOf去寻找基本类型值。在这里hint就起到作用了。如果hint参数值为Number，valueOf将先被调用，如果hint是String的话，则toString被先调用。\n> [[DefaultValue]] 返回的值一定是基本类型值。如果不是，一个TypeError 将会被抛出。这就意味着为了在这种情况下有意义，toString和valueOf应该返回基本类型值。\n\n### 四则运算符\n> 只有当***加法***运算时，其中一方是***字符串类型***，就会把另一个也转为字符串类型。其他运算只要其中一方是数字，那么另一方就转为数字。***并且加法运算会触发三种类型转换：将值转换为原始值，转换为数字，转换为字符串。***\n\n```\n// js代码\n\n1 + '1' // '11' 这里会是面试陷阱\n2 * '2' // 4 \n[1, 2] + [2, 1] // '1,22,1'\n// [1, 2].toString() -> '1,2'\n// [2, 1].toString() -> '2,1'\n// '1,2' + '2,1' = '1,22,1'\n```\n***面试陷阱题之 ++ ***\n```\n// 问表达式 'a' + + 'b' 返回结果是什么？\n// 答案是 'aNaN'\n'a' + + 'b' -> // 一元运算符优先级高\n'a' + (+ 'b') -> // +'b'转数字类型，非有效结果是NaN\n'a' + NaN.toString() -> // NaN调用toString（）成字符串'NaN'\n'aNaN' // 字符串接到一起后'aNaN'\n\n// 类似题 '1' + + '4' 返回结果是什么 \n// 其实就是'4' -> 4 -> '4' 最后还是'14'\n```\n\n## == 操作符 --- 类型比较\n> 相等运算符的运算规则如下：\n1、如果两个值类型相同，进行 === 比较。(这个非常好理解，就不多说了)\n（1）数字比大小\n（2）字符串就通过 unicode 字符索引来比较\n2、如果两个值类型不同，他们可能相等。根据下面规则进行类型转换再比较：\n（1）如果一个是null、一个是undefined，那么[相等]。 // 这个有点特殊需要单独记\n（2）如果任一值是字符串，另一个值是数值，在比较相等性之前先将字符串转换为数值；即是调用Number()函数。\n（3）如果任一值时布尔值，则在比较相等性之前先将其转换为数值，即是调用Number()函数。\n（4）如果一个是对象，另一个是数值或字符串，把对象转换成基础类型的值再比较。对象转换成基础类型，利用它的toString或者valueOf方法。 （js核心内置类ToPrimitive，会尝试valueOf先于toString；例外的是Date，Date利用的是toString转换。）\n\n1不说，2（1）的话单独记，其他基本类型转数字比较，引用性数据类型调用ToPrimitive转换成基本数据类型\n\n首先还是一道面试题\n```\n// [] == ![] 结果是什么\n[] == ![] // true\n```\n为什么呢？我们来解析一下，\n1. 首先我们看一下右侧，`![]`肯定是要先转换成boolen类型了吧，那么`[]`的布尔类型是什么呢，上面转换布尔的时候我们说过，除了那五个基本类型的假值以及正负0之外，都是真值，所以`[]` -> `true` `![]` -> `false`\n2. `ToPrimitive(false)`->`0`右边的值得出了数值类型的原始值\n3. 看左边`ToPrimitive([])`->`[]`.toString()->`''`\n4. `Number('')`->`0`\n5. 比较左右 `0 == 0` -> `true`\n\n# 最后\n到这里JS的内置数据类型及类型的转换和比较就讲完了，相信大家看过以后一定会记得住的\nPS：突然好像学画漫画，《JS数据结构们》，一定大火，哈哈哈😂","source":"_posts/FE-guide-dataType.md","raw":"---\ntitle: 前端常见知识点整理 ---- 数据类型、类型判断、类型转换、类型比较\ndate: 2020-01-02 16:22:22\ncategories: \n\t- 前端技术\n\t- 前端常见知识点整理\ntags: \n\t- 面试\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n> 温故而知新，可以为师矣。   \n>            ———————— 论语\n\n这篇文章主要是把我看过的书中的知识点，还有其他人整理的面试题进行整理，巩固自己的前端开发理论知识，希望其他看到这篇文章的人也能有所帮助。\n<!-- more -->\n\n# JS知识点\n> 当前市场中，如何区分一个好一点的前端开发和一般的前端开发，主要看的就是js能力的差距，好的前端开发，JS玩的转，不仅仅是框架玩的好，还要JS的基础扎实，只有基础与新技术都玩的6的前端开发才是好前端。\n\n上面这句话不是什么名人或者某位知名前端大拿说的，这是我在公司这几年面试招聘的过程中真真切切总结感受的。\n所以可以说得JS者得高级前端，所以下面也主要是写JS的相关知识点。\n\n## JavaScript内置数据类型 --- 数据类型\n无论学什么语言最重要最基础的就是数据类型，《JavaScript权威指南》这本书中详细的介绍了JS中的数据类型，下面总结一下。\n\nJavaScript中数据类型分为两大类共七种内置数据类型，其一是6种***`基本类型`***，其二是1种***`引用类型`***，我发现在面试过程中好多面试者都不会先说有两大类，而是会直接蹦出数字类型、字符串类型。。。对象、数组也会被并排放在一起，这其实不是个掌握知识点的好方法，应该先把数据类型分成上面说的***`基本类型`***、***`引用类型`***这样两个大类之后，再看看这两大类中有什么其他的子类型，在记忆其他子类型之前我觉得应该先了解一下什么是***`基本类型`***和***`引用类型`***，实际上基本类型和引用类型的主要区别是存储的区别，基本类型在栈中，而引用类型的话，引用数据的地址存储在栈中，而对象本身是存储在堆中，引用的数据地址是个16进制的数据值，它就像一把钥匙让你能够找到宝藏在什么地方。这就是基本数据类型和引用类型的区别了。\n\n那么如何记住有哪些基本数据类型和引用数据类型呢，实际上只要记住了6个基本数据类型，其他的都是引用数据类型，而所有的引用数据类型的祖宗都是Object，所以引用数据类型实际上只有Object一个，那么像是Array等其他子类型，都是Object的孩子，不跟Object在一个级别上。\n\n基本数据类型有哪些呢？其实挺好记的，数字，字符串，这两个一个像温柔的文学少女（string），一个像有点精于算计的男生（number），还有一个布尔类型（boolen）他像是班级里正义感爆棚的人，只论对错；另外还有个差生，没头脑似的未定义（Undefined）还有一个失了忆记不起来自己是谁的空（Null），最后还有一个新加入的插班生，总是带着口罩的标志符号（Symbol），这些人构成了这个班级的所有学生，也就是全部的基本类型，那么引用类型的对象Object呢就像及了漂亮爱化妆的班主任老师，有好多副面孔。不知道大家有没有看过一个动漫叫做《黑塔利亚》，他就是把国家都拟人化了，有了各自的性格，我很喜欢看，我觉得这些数据类型也各有各的特点，像这些国家一样，好了脑洞有点挖深了，有人会说我不就是这么几个简单的数据类型嘛，硬记下来不就好了，但是知识总有你硬记不下来的时候，最好的方法也是速记领域最为常用的方法，就是把你不熟悉的知识与你感兴趣的画面或者既往的知识串联起来，这样就能达到很好的记忆，如果你不喜欢动漫（怎么会有不喜欢动漫的人！！！），可以试试用其他的方法记，当然你如果硬要死记硬背那我也没办法，我继续开我的脑洞。\n如果你是学过Java开发的同学（如果是计算机专业出来的，应该都或多或少学过，非计算机专业的我也不知道说啥了。。），数字在Java中是分成 byte/short/int/long 的，但是在Js中没有那么多，就一个Number，它是浮点类型，基于 IEEE 754标准实现，刚才我不是说了Number是个精于算计的男生，精于算计就是说他分毫不差，这样浮点型就很好的记了下来，这个754的标准可以不记，如果非要记的话，你可以记成他是自称IEEE 754团体的成员。最后Number身后还跟着一个小弟，叫做NaN，他虽然是Number的小弟，但他总是说话不算数，自己说过什么都不承认。所以NaN!=NaN。\n老师是个爱化妆的老师，而这些学生也不是普通的学生，在学校他们是老老实实的基本类型，放了学之后一打扮，他们就各有了其他的能力，这个过程叫做装箱，具体的后面再说。（好了快回到现实吧你！）\n\n如果基础数据是字面量类型，那么他们就像是在上课的学生，只是学生而已，而当他们调用方法时，他们就成了下课后各种技能都有的新新人类，这个过程有时候是显示的，就像是有些学生喜欢大声嚷嚷，而更多的是你不自觉中就用到了装箱操作，是Js引擎提供的能力，就像是有些闷骚的学生一样。\n```\n// js代码\nlet aNumber = 111 // 这只是字面量，不是 number 类型\naNumber.toString() // 装箱操作自动转化成数字对象，使用时候才会转换为对象类型\n```\n对象有个深浅拷贝的知识点必须要会，对象因为是引用数据类型，在栈中存储的是地址，当用另一个变量接收了之前的变量，那么就好像把钥匙复制了一把，两把钥匙开的还是同一个门，而深拷贝呢就像是照着原来的样板间又造了一个一模一样的房间，这两个房间长得一样，但就是两个房间，钥匙自然也是不一样的，所以呢，当往房间里搬家具的时候，浅拷贝搬进去的是一个房间，所以两把钥匙打开之后看到的都是多了家具，而深拷贝的话，我只是往样板间搬了家具，所以照着装修的房间里是不可能有的，这就是浅拷贝原数据会受影响，而深拷贝不会。\n```\n// js代码\n\nlet a = { name: 'FE' }\nlet b = a\nb.name = 'EF'\nconsole.log(a.name) // EF 浅拷贝原数据会受影响\n```\n## 内置数据类型检测 Typeof --- 类型判断\n> typeof 对于基本类型，除了 null 都可以显示正确的类型\n\ntypeof 就像是学校的教导主任一样，他有着一双火眼金睛，不管是哪个同学，穿了什么样的衣服，他一问就能问出来这个学生是谁，大家都怕他，但是Null因为失忆了，他也不知道教导主任是谁，所以typeof就拿他也没办法，因为他不怕教导主任，教导主任甚至会以为他是老师呢。\n\n```\n// js代码\n\ntypeof 1 // 'number'\ntypeof '1' // 'string'\ntypeof undefined // 'undefined'\ntypeof true // 'boolean'\ntypeof Symbol() // 'symbol'\ntypeof b // b 没有声明，但是还会显示 undefined\n\ntypeof null // 'object' 这是JS中的bug\n```\n\n> typeof 对于对象，除了函数都会显示 object\n\n```\n// js代码\n\ntypeof [] // 'object'\ntypeof {} // 'object'\ntypeof console.log // 'function'\n```\n\n> 知识扩展：为什么会出现这种情况呢？因为在 JS 的最初版本中，使用的是 32 位系统，为了性能考虑使用低位存储了变量的类型信息，000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。\n\n***如果我们想获得一个变量的正确类型，可以通过 Object.prototype.toString.call(xx)。这样我们就可以获得类似 [object Type] 的字符串。***\n\n> 小知识扩展\n```\nlet a\n// 我们也可以这样判断 undefined\na === undefined\n// 但是 undefined 不是保留字，能够在低版本浏览器被赋值\nlet undefined = 1\n// 这样判断就会出错\n// 所以可以用下面的方式来判断，并且代码量更少\n// 因为 void 后面随便跟上一个组成表达式\n// 返回就是 undefined\na === void 0\n```\n\n## 类型转换\n### 转Boolean\n一句话可以概括\n> 在条件判断时，除了 `undefined`， `null`， `false`， `NaN`， `''`， `0`， `-0`，其他所有值都转为 true，包括所有对象。\n\n从上面这段话可以看出来，`undefined`、`null` 是基本类型之二，而`false`是布尔类型的假值，`NaN`是数字类型的无效值，`''`是字符串类型的空值，而`0`， `-0`都是数字类型的零值，可以看到，除了`0`、`-0`有些特殊，除了插班生`Symbol`，剩下的都是基本类型的假值，由此实际上就很好记了，有时候数字这个容易忘，但是记住“非0既真”这句话就好了。\n\n### 对象转基本类型\n对象在转换基本类型时，首先是先会调用ToPrimitive（原始类型），如果有hint参数调用对应的的类型方法，如果没有那默认先会调用 valueOf 然后调用 toString。如果返回了基本类型，结束。如果都没返回，那么Error***但是注意这两个方法你是可以重写的。***\n\n> Symbol.toPrimitive 是一个内置的 Symbol 值，它是作为对象的函数值属性存在的，当一个对象转换为对应的原始值时，会调用此函数。（来自MDN的解释）\n> 需要解释的关键机制是ToPrimitive函数。该函数是将任意值转换为相应的基本类型值。如果输入的就是一个基本类型值，那么将不做修改，被直接返回。如果值是非基本类型值，它将调用内部方法 [[DefaultValue]] 为对象找到一个默认值。\n> [[DefaultValue]]是每一个对象的内部属性。该方法需要一个可选的参数hint，值是Number或String。如果没有提供hint，则默认为Number(除非该对象是Date，在这种情况下默认为String)。然后将调用toString和valueOf去寻找基本类型值。在这里hint就起到作用了。如果hint参数值为Number，valueOf将先被调用，如果hint是String的话，则toString被先调用。\n> [[DefaultValue]] 返回的值一定是基本类型值。如果不是，一个TypeError 将会被抛出。这就意味着为了在这种情况下有意义，toString和valueOf应该返回基本类型值。\n\n### 四则运算符\n> 只有当***加法***运算时，其中一方是***字符串类型***，就会把另一个也转为字符串类型。其他运算只要其中一方是数字，那么另一方就转为数字。***并且加法运算会触发三种类型转换：将值转换为原始值，转换为数字，转换为字符串。***\n\n```\n// js代码\n\n1 + '1' // '11' 这里会是面试陷阱\n2 * '2' // 4 \n[1, 2] + [2, 1] // '1,22,1'\n// [1, 2].toString() -> '1,2'\n// [2, 1].toString() -> '2,1'\n// '1,2' + '2,1' = '1,22,1'\n```\n***面试陷阱题之 ++ ***\n```\n// 问表达式 'a' + + 'b' 返回结果是什么？\n// 答案是 'aNaN'\n'a' + + 'b' -> // 一元运算符优先级高\n'a' + (+ 'b') -> // +'b'转数字类型，非有效结果是NaN\n'a' + NaN.toString() -> // NaN调用toString（）成字符串'NaN'\n'aNaN' // 字符串接到一起后'aNaN'\n\n// 类似题 '1' + + '4' 返回结果是什么 \n// 其实就是'4' -> 4 -> '4' 最后还是'14'\n```\n\n## == 操作符 --- 类型比较\n> 相等运算符的运算规则如下：\n1、如果两个值类型相同，进行 === 比较。(这个非常好理解，就不多说了)\n（1）数字比大小\n（2）字符串就通过 unicode 字符索引来比较\n2、如果两个值类型不同，他们可能相等。根据下面规则进行类型转换再比较：\n（1）如果一个是null、一个是undefined，那么[相等]。 // 这个有点特殊需要单独记\n（2）如果任一值是字符串，另一个值是数值，在比较相等性之前先将字符串转换为数值；即是调用Number()函数。\n（3）如果任一值时布尔值，则在比较相等性之前先将其转换为数值，即是调用Number()函数。\n（4）如果一个是对象，另一个是数值或字符串，把对象转换成基础类型的值再比较。对象转换成基础类型，利用它的toString或者valueOf方法。 （js核心内置类ToPrimitive，会尝试valueOf先于toString；例外的是Date，Date利用的是toString转换。）\n\n1不说，2（1）的话单独记，其他基本类型转数字比较，引用性数据类型调用ToPrimitive转换成基本数据类型\n\n首先还是一道面试题\n```\n// [] == ![] 结果是什么\n[] == ![] // true\n```\n为什么呢？我们来解析一下，\n1. 首先我们看一下右侧，`![]`肯定是要先转换成boolen类型了吧，那么`[]`的布尔类型是什么呢，上面转换布尔的时候我们说过，除了那五个基本类型的假值以及正负0之外，都是真值，所以`[]` -> `true` `![]` -> `false`\n2. `ToPrimitive(false)`->`0`右边的值得出了数值类型的原始值\n3. 看左边`ToPrimitive([])`->`[]`.toString()->`''`\n4. `Number('')`->`0`\n5. 比较左右 `0 == 0` -> `true`\n\n# 最后\n到这里JS的内置数据类型及类型的转换和比较就讲完了，相信大家看过以后一定会记得住的\nPS：突然好像学画漫画，《JS数据结构们》，一定大火，哈哈哈😂","slug":"FE-guide-dataType","published":1,"updated":"2020-04-02T03:20:12.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grxj001pooa677gd389x","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>温故而知新，可以为师矣。<br>           ———————— 论语</p>\n</blockquote>\n<p>这篇文章主要是把我看过的书中的知识点，还有其他人整理的面试题进行整理，巩固自己的前端开发理论知识，希望其他看到这篇文章的人也能有所帮助。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"JS知识点\"><a href=\"#JS知识点\" class=\"headerlink\" title=\"JS知识点\"></a>JS知识点</h1><blockquote>\n<p>当前市场中，如何区分一个好一点的前端开发和一般的前端开发，主要看的就是js能力的差距，好的前端开发，JS玩的转，不仅仅是框架玩的好，还要JS的基础扎实，只有基础与新技术都玩的6的前端开发才是好前端。</p>\n</blockquote>\n<p>上面这句话不是什么名人或者某位知名前端大拿说的，这是我在公司这几年面试招聘的过程中真真切切总结感受的。<br>所以可以说得JS者得高级前端，所以下面也主要是写JS的相关知识点。</p>\n<h2 id=\"JavaScript内置数据类型-—-数据类型\"><a href=\"#JavaScript内置数据类型-—-数据类型\" class=\"headerlink\" title=\"JavaScript内置数据类型 — 数据类型\"></a>JavaScript内置数据类型 — 数据类型</h2><p>无论学什么语言最重要最基础的就是数据类型，《JavaScript权威指南》这本书中详细的介绍了JS中的数据类型，下面总结一下。</p>\n<p>JavaScript中数据类型分为两大类共七种内置数据类型，其一是6种<strong><em><code>基本类型</code></em></strong>，其二是1种<strong><em><code>引用类型</code></em></strong>，我发现在面试过程中好多面试者都不会先说有两大类，而是会直接蹦出数字类型、字符串类型。。。对象、数组也会被并排放在一起，这其实不是个掌握知识点的好方法，应该先把数据类型分成上面说的<strong><em><code>基本类型</code></em></strong>、<strong><em><code>引用类型</code></em></strong>这样两个大类之后，再看看这两大类中有什么其他的子类型，在记忆其他子类型之前我觉得应该先了解一下什么是<strong><em><code>基本类型</code></em></strong>和<strong><em><code>引用类型</code></em></strong>，实际上基本类型和引用类型的主要区别是存储的区别，基本类型在栈中，而引用类型的话，引用数据的地址存储在栈中，而对象本身是存储在堆中，引用的数据地址是个16进制的数据值，它就像一把钥匙让你能够找到宝藏在什么地方。这就是基本数据类型和引用类型的区别了。</p>\n<p>那么如何记住有哪些基本数据类型和引用数据类型呢，实际上只要记住了6个基本数据类型，其他的都是引用数据类型，而所有的引用数据类型的祖宗都是Object，所以引用数据类型实际上只有Object一个，那么像是Array等其他子类型，都是Object的孩子，不跟Object在一个级别上。</p>\n<p>基本数据类型有哪些呢？其实挺好记的，数字，字符串，这两个一个像温柔的文学少女（string），一个像有点精于算计的男生（number），还有一个布尔类型（boolen）他像是班级里正义感爆棚的人，只论对错；另外还有个差生，没头脑似的未定义（Undefined）还有一个失了忆记不起来自己是谁的空（Null），最后还有一个新加入的插班生，总是带着口罩的标志符号（Symbol），这些人构成了这个班级的所有学生，也就是全部的基本类型，那么引用类型的对象Object呢就像及了漂亮爱化妆的班主任老师，有好多副面孔。不知道大家有没有看过一个动漫叫做《黑塔利亚》，他就是把国家都拟人化了，有了各自的性格，我很喜欢看，我觉得这些数据类型也各有各的特点，像这些国家一样，好了脑洞有点挖深了，有人会说我不就是这么几个简单的数据类型嘛，硬记下来不就好了，但是知识总有你硬记不下来的时候，最好的方法也是速记领域最为常用的方法，就是把你不熟悉的知识与你感兴趣的画面或者既往的知识串联起来，这样就能达到很好的记忆，如果你不喜欢动漫（怎么会有不喜欢动漫的人！！！），可以试试用其他的方法记，当然你如果硬要死记硬背那我也没办法，我继续开我的脑洞。<br>如果你是学过Java开发的同学（如果是计算机专业出来的，应该都或多或少学过，非计算机专业的我也不知道说啥了。。），数字在Java中是分成 byte/short/int/long 的，但是在Js中没有那么多，就一个Number，它是浮点类型，基于 IEEE 754标准实现，刚才我不是说了Number是个精于算计的男生，精于算计就是说他分毫不差，这样浮点型就很好的记了下来，这个754的标准可以不记，如果非要记的话，你可以记成他是自称IEEE 754团体的成员。最后Number身后还跟着一个小弟，叫做NaN，他虽然是Number的小弟，但他总是说话不算数，自己说过什么都不承认。所以NaN!=NaN。<br>老师是个爱化妆的老师，而这些学生也不是普通的学生，在学校他们是老老实实的基本类型，放了学之后一打扮，他们就各有了其他的能力，这个过程叫做装箱，具体的后面再说。（好了快回到现实吧你！）</p>\n<p>如果基础数据是字面量类型，那么他们就像是在上课的学生，只是学生而已，而当他们调用方法时，他们就成了下课后各种技能都有的新新人类，这个过程有时候是显示的，就像是有些学生喜欢大声嚷嚷，而更多的是你不自觉中就用到了装箱操作，是Js引擎提供的能力，就像是有些闷骚的学生一样。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">let aNumber &#x3D; 111 &#x2F;&#x2F; 这只是字面量，不是 number 类型</span><br><span class=\"line\">aNumber.toString() &#x2F;&#x2F; 装箱操作自动转化成数字对象，使用时候才会转换为对象类型</span><br></pre></td></tr></table></figure>\n<p>对象有个深浅拷贝的知识点必须要会，对象因为是引用数据类型，在栈中存储的是地址，当用另一个变量接收了之前的变量，那么就好像把钥匙复制了一把，两把钥匙开的还是同一个门，而深拷贝呢就像是照着原来的样板间又造了一个一模一样的房间，这两个房间长得一样，但就是两个房间，钥匙自然也是不一样的，所以呢，当往房间里搬家具的时候，浅拷贝搬进去的是一个房间，所以两把钥匙打开之后看到的都是多了家具，而深拷贝的话，我只是往样板间搬了家具，所以照着装修的房间里是不可能有的，这就是浅拷贝原数据会受影响，而深拷贝不会。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">let a &#x3D; &#123; name: &#39;FE&#39; &#125;</span><br><span class=\"line\">let b &#x3D; a</span><br><span class=\"line\">b.name &#x3D; &#39;EF&#39;</span><br><span class=\"line\">console.log(a.name) &#x2F;&#x2F; EF 浅拷贝原数据会受影响</span><br></pre></td></tr></table></figure>\n<h2 id=\"内置数据类型检测-Typeof-—-类型判断\"><a href=\"#内置数据类型检测-Typeof-—-类型判断\" class=\"headerlink\" title=\"内置数据类型检测 Typeof — 类型判断\"></a>内置数据类型检测 Typeof — 类型判断</h2><blockquote>\n<p>typeof 对于基本类型，除了 null 都可以显示正确的类型</p>\n</blockquote>\n<p>typeof 就像是学校的教导主任一样，他有着一双火眼金睛，不管是哪个同学，穿了什么样的衣服，他一问就能问出来这个学生是谁，大家都怕他，但是Null因为失忆了，他也不知道教导主任是谁，所以typeof就拿他也没办法，因为他不怕教导主任，教导主任甚至会以为他是老师呢。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">typeof 1 &#x2F;&#x2F; &#39;number&#39;</span><br><span class=\"line\">typeof &#39;1&#39; &#x2F;&#x2F; &#39;string&#39;</span><br><span class=\"line\">typeof undefined &#x2F;&#x2F; &#39;undefined&#39;</span><br><span class=\"line\">typeof true &#x2F;&#x2F; &#39;boolean&#39;</span><br><span class=\"line\">typeof Symbol() &#x2F;&#x2F; &#39;symbol&#39;</span><br><span class=\"line\">typeof b &#x2F;&#x2F; b 没有声明，但是还会显示 undefined</span><br><span class=\"line\"></span><br><span class=\"line\">typeof null &#x2F;&#x2F; &#39;object&#39; 这是JS中的bug</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>typeof 对于对象，除了函数都会显示 object</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">typeof [] &#x2F;&#x2F; &#39;object&#39;</span><br><span class=\"line\">typeof &#123;&#125; &#x2F;&#x2F; &#39;object&#39;</span><br><span class=\"line\">typeof console.log &#x2F;&#x2F; &#39;function&#39;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>知识扩展：为什么会出现这种情况呢？因为在 JS 的最初版本中，使用的是 32 位系统，为了性能考虑使用低位存储了变量的类型信息，000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。</p>\n</blockquote>\n<p><strong><em>如果我们想获得一个变量的正确类型，可以通过 Object.prototype.toString.call(xx)。这样我们就可以获得类似 [object Type] 的字符串。</em></strong></p>\n<blockquote>\n<p>小知识扩展</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a</span><br><span class=\"line\">&#x2F;&#x2F; 我们也可以这样判断 undefined</span><br><span class=\"line\">a &#x3D;&#x3D;&#x3D; undefined</span><br><span class=\"line\">&#x2F;&#x2F; 但是 undefined 不是保留字，能够在低版本浏览器被赋值</span><br><span class=\"line\">let undefined &#x3D; 1</span><br><span class=\"line\">&#x2F;&#x2F; 这样判断就会出错</span><br><span class=\"line\">&#x2F;&#x2F; 所以可以用下面的方式来判断，并且代码量更少</span><br><span class=\"line\">&#x2F;&#x2F; 因为 void 后面随便跟上一个组成表达式</span><br><span class=\"line\">&#x2F;&#x2F; 返回就是 undefined</span><br><span class=\"line\">a &#x3D;&#x3D;&#x3D; void 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><h3 id=\"转Boolean\"><a href=\"#转Boolean\" class=\"headerlink\" title=\"转Boolean\"></a>转Boolean</h3><p>一句话可以概括</p>\n<blockquote>\n<p>在条件判断时，除了 <code>undefined</code>， <code>null</code>， <code>false</code>， <code>NaN</code>， <code>&#39;&#39;</code>， <code>0</code>， <code>-0</code>，其他所有值都转为 true，包括所有对象。</p>\n</blockquote>\n<p>从上面这段话可以看出来，<code>undefined</code>、<code>null</code> 是基本类型之二，而<code>false</code>是布尔类型的假值，<code>NaN</code>是数字类型的无效值，<code>&#39;&#39;</code>是字符串类型的空值，而<code>0</code>， <code>-0</code>都是数字类型的零值，可以看到，除了<code>0</code>、<code>-0</code>有些特殊，除了插班生<code>Symbol</code>，剩下的都是基本类型的假值，由此实际上就很好记了，有时候数字这个容易忘，但是记住“非0既真”这句话就好了。</p>\n<h3 id=\"对象转基本类型\"><a href=\"#对象转基本类型\" class=\"headerlink\" title=\"对象转基本类型\"></a>对象转基本类型</h3><p>对象在转换基本类型时，首先是先会调用ToPrimitive（原始类型），如果有hint参数调用对应的的类型方法，如果没有那默认先会调用 valueOf 然后调用 toString。如果返回了基本类型，结束。如果都没返回，那么Error<strong><em>但是注意这两个方法你是可以重写的。</em></strong></p>\n<blockquote>\n<p>Symbol.toPrimitive 是一个内置的 Symbol 值，它是作为对象的函数值属性存在的，当一个对象转换为对应的原始值时，会调用此函数。（来自MDN的解释）<br>需要解释的关键机制是ToPrimitive函数。该函数是将任意值转换为相应的基本类型值。如果输入的就是一个基本类型值，那么将不做修改，被直接返回。如果值是非基本类型值，它将调用内部方法 [[DefaultValue]] 为对象找到一个默认值。<br>[[DefaultValue]]是每一个对象的内部属性。该方法需要一个可选的参数hint，值是Number或String。如果没有提供hint，则默认为Number(除非该对象是Date，在这种情况下默认为String)。然后将调用toString和valueOf去寻找基本类型值。在这里hint就起到作用了。如果hint参数值为Number，valueOf将先被调用，如果hint是String的话，则toString被先调用。<br>[[DefaultValue]] 返回的值一定是基本类型值。如果不是，一个TypeError 将会被抛出。这就意味着为了在这种情况下有意义，toString和valueOf应该返回基本类型值。</p>\n</blockquote>\n<h3 id=\"四则运算符\"><a href=\"#四则运算符\" class=\"headerlink\" title=\"四则运算符\"></a>四则运算符</h3><blockquote>\n<p>只有当<strong><em>加法</em></strong>运算时，其中一方是<strong><em>字符串类型</em></strong>，就会把另一个也转为字符串类型。其他运算只要其中一方是数字，那么另一方就转为数字。<strong><em>并且加法运算会触发三种类型转换：将值转换为原始值，转换为数字，转换为字符串。</em></strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">1 + &#39;1&#39; &#x2F;&#x2F; &#39;11&#39; 这里会是面试陷阱</span><br><span class=\"line\">2 * &#39;2&#39; &#x2F;&#x2F; 4 </span><br><span class=\"line\">[1, 2] + [2, 1] &#x2F;&#x2F; &#39;1,22,1&#39;</span><br><span class=\"line\">&#x2F;&#x2F; [1, 2].toString() -&gt; &#39;1,2&#39;</span><br><span class=\"line\">&#x2F;&#x2F; [2, 1].toString() -&gt; &#39;2,1&#39;</span><br><span class=\"line\">&#x2F;&#x2F; &#39;1,2&#39; + &#39;2,1&#39; &#x3D; &#39;1,22,1&#39;</span><br></pre></td></tr></table></figure>\n<p><strong>*面试陷阱题之 ++ *</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 问表达式 &#39;a&#39; + + &#39;b&#39; 返回结果是什么？</span><br><span class=\"line\">&#x2F;&#x2F; 答案是 &#39;aNaN&#39;</span><br><span class=\"line\">&#39;a&#39; + + &#39;b&#39; -&gt; &#x2F;&#x2F; 一元运算符优先级高</span><br><span class=\"line\">&#39;a&#39; + (+ &#39;b&#39;) -&gt; &#x2F;&#x2F; +&#39;b&#39;转数字类型，非有效结果是NaN</span><br><span class=\"line\">&#39;a&#39; + NaN.toString() -&gt; &#x2F;&#x2F; NaN调用toString（）成字符串&#39;NaN&#39;</span><br><span class=\"line\">&#39;aNaN&#39; &#x2F;&#x2F; 字符串接到一起后&#39;aNaN&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 类似题 &#39;1&#39; + + &#39;4&#39; 返回结果是什么 </span><br><span class=\"line\">&#x2F;&#x2F; 其实就是&#39;4&#39; -&gt; 4 -&gt; &#39;4&#39; 最后还是&#39;14&#39;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"操作符-—-类型比较\"><a href=\"#操作符-—-类型比较\" class=\"headerlink\" title=\"== 操作符 — 类型比较\"></a>== 操作符 — 类型比较</h2><blockquote>\n<p>相等运算符的运算规则如下：<br>1、如果两个值类型相同，进行 === 比较。(这个非常好理解，就不多说了)<br>（1）数字比大小<br>（2）字符串就通过 unicode 字符索引来比较<br>2、如果两个值类型不同，他们可能相等。根据下面规则进行类型转换再比较：<br>（1）如果一个是null、一个是undefined，那么[相等]。 // 这个有点特殊需要单独记<br>（2）如果任一值是字符串，另一个值是数值，在比较相等性之前先将字符串转换为数值；即是调用Number()函数。<br>（3）如果任一值时布尔值，则在比较相等性之前先将其转换为数值，即是调用Number()函数。<br>（4）如果一个是对象，另一个是数值或字符串，把对象转换成基础类型的值再比较。对象转换成基础类型，利用它的toString或者valueOf方法。 （js核心内置类ToPrimitive，会尝试valueOf先于toString；例外的是Date，Date利用的是toString转换。）</p>\n</blockquote>\n<p>1不说，2（1）的话单独记，其他基本类型转数字比较，引用性数据类型调用ToPrimitive转换成基本数据类型</p>\n<p>首先还是一道面试题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; [] &#x3D;&#x3D; ![] 结果是什么</span><br><span class=\"line\">[] &#x3D;&#x3D; ![] &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>\n<p>为什么呢？我们来解析一下，</p>\n<ol>\n<li>首先我们看一下右侧，<code>![]</code>肯定是要先转换成boolen类型了吧，那么<code>[]</code>的布尔类型是什么呢，上面转换布尔的时候我们说过，除了那五个基本类型的假值以及正负0之外，都是真值，所以<code>[]</code> -&gt; <code>true</code> <code>![]</code> -&gt; <code>false</code></li>\n<li><code>ToPrimitive(false)</code>-&gt;<code>0</code>右边的值得出了数值类型的原始值</li>\n<li>看左边<code>ToPrimitive([])</code>-&gt;<code>[]</code>.toString()-&gt;<code>&#39;&#39;</code></li>\n<li><code>Number(&#39;&#39;)</code>-&gt;<code>0</code></li>\n<li>比较左右 <code>0 == 0</code> -&gt; <code>true</code></li>\n</ol>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>到这里JS的内置数据类型及类型的转换和比较就讲完了，相信大家看过以后一定会记得住的<br>PS：突然好像学画漫画，《JS数据结构们》，一定大火，哈哈哈😂</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>温故而知新，可以为师矣。<br>           ———————— 论语</p>\n</blockquote>\n<p>这篇文章主要是把我看过的书中的知识点，还有其他人整理的面试题进行整理，巩固自己的前端开发理论知识，希望其他看到这篇文章的人也能有所帮助。</p>","more":"<h1 id=\"JS知识点\"><a href=\"#JS知识点\" class=\"headerlink\" title=\"JS知识点\"></a>JS知识点</h1><blockquote>\n<p>当前市场中，如何区分一个好一点的前端开发和一般的前端开发，主要看的就是js能力的差距，好的前端开发，JS玩的转，不仅仅是框架玩的好，还要JS的基础扎实，只有基础与新技术都玩的6的前端开发才是好前端。</p>\n</blockquote>\n<p>上面这句话不是什么名人或者某位知名前端大拿说的，这是我在公司这几年面试招聘的过程中真真切切总结感受的。<br>所以可以说得JS者得高级前端，所以下面也主要是写JS的相关知识点。</p>\n<h2 id=\"JavaScript内置数据类型-—-数据类型\"><a href=\"#JavaScript内置数据类型-—-数据类型\" class=\"headerlink\" title=\"JavaScript内置数据类型 — 数据类型\"></a>JavaScript内置数据类型 — 数据类型</h2><p>无论学什么语言最重要最基础的就是数据类型，《JavaScript权威指南》这本书中详细的介绍了JS中的数据类型，下面总结一下。</p>\n<p>JavaScript中数据类型分为两大类共七种内置数据类型，其一是6种<strong><em><code>基本类型</code></em></strong>，其二是1种<strong><em><code>引用类型</code></em></strong>，我发现在面试过程中好多面试者都不会先说有两大类，而是会直接蹦出数字类型、字符串类型。。。对象、数组也会被并排放在一起，这其实不是个掌握知识点的好方法，应该先把数据类型分成上面说的<strong><em><code>基本类型</code></em></strong>、<strong><em><code>引用类型</code></em></strong>这样两个大类之后，再看看这两大类中有什么其他的子类型，在记忆其他子类型之前我觉得应该先了解一下什么是<strong><em><code>基本类型</code></em></strong>和<strong><em><code>引用类型</code></em></strong>，实际上基本类型和引用类型的主要区别是存储的区别，基本类型在栈中，而引用类型的话，引用数据的地址存储在栈中，而对象本身是存储在堆中，引用的数据地址是个16进制的数据值，它就像一把钥匙让你能够找到宝藏在什么地方。这就是基本数据类型和引用类型的区别了。</p>\n<p>那么如何记住有哪些基本数据类型和引用数据类型呢，实际上只要记住了6个基本数据类型，其他的都是引用数据类型，而所有的引用数据类型的祖宗都是Object，所以引用数据类型实际上只有Object一个，那么像是Array等其他子类型，都是Object的孩子，不跟Object在一个级别上。</p>\n<p>基本数据类型有哪些呢？其实挺好记的，数字，字符串，这两个一个像温柔的文学少女（string），一个像有点精于算计的男生（number），还有一个布尔类型（boolen）他像是班级里正义感爆棚的人，只论对错；另外还有个差生，没头脑似的未定义（Undefined）还有一个失了忆记不起来自己是谁的空（Null），最后还有一个新加入的插班生，总是带着口罩的标志符号（Symbol），这些人构成了这个班级的所有学生，也就是全部的基本类型，那么引用类型的对象Object呢就像及了漂亮爱化妆的班主任老师，有好多副面孔。不知道大家有没有看过一个动漫叫做《黑塔利亚》，他就是把国家都拟人化了，有了各自的性格，我很喜欢看，我觉得这些数据类型也各有各的特点，像这些国家一样，好了脑洞有点挖深了，有人会说我不就是这么几个简单的数据类型嘛，硬记下来不就好了，但是知识总有你硬记不下来的时候，最好的方法也是速记领域最为常用的方法，就是把你不熟悉的知识与你感兴趣的画面或者既往的知识串联起来，这样就能达到很好的记忆，如果你不喜欢动漫（怎么会有不喜欢动漫的人！！！），可以试试用其他的方法记，当然你如果硬要死记硬背那我也没办法，我继续开我的脑洞。<br>如果你是学过Java开发的同学（如果是计算机专业出来的，应该都或多或少学过，非计算机专业的我也不知道说啥了。。），数字在Java中是分成 byte/short/int/long 的，但是在Js中没有那么多，就一个Number，它是浮点类型，基于 IEEE 754标准实现，刚才我不是说了Number是个精于算计的男生，精于算计就是说他分毫不差，这样浮点型就很好的记了下来，这个754的标准可以不记，如果非要记的话，你可以记成他是自称IEEE 754团体的成员。最后Number身后还跟着一个小弟，叫做NaN，他虽然是Number的小弟，但他总是说话不算数，自己说过什么都不承认。所以NaN!=NaN。<br>老师是个爱化妆的老师，而这些学生也不是普通的学生，在学校他们是老老实实的基本类型，放了学之后一打扮，他们就各有了其他的能力，这个过程叫做装箱，具体的后面再说。（好了快回到现实吧你！）</p>\n<p>如果基础数据是字面量类型，那么他们就像是在上课的学生，只是学生而已，而当他们调用方法时，他们就成了下课后各种技能都有的新新人类，这个过程有时候是显示的，就像是有些学生喜欢大声嚷嚷，而更多的是你不自觉中就用到了装箱操作，是Js引擎提供的能力，就像是有些闷骚的学生一样。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">let aNumber &#x3D; 111 &#x2F;&#x2F; 这只是字面量，不是 number 类型</span><br><span class=\"line\">aNumber.toString() &#x2F;&#x2F; 装箱操作自动转化成数字对象，使用时候才会转换为对象类型</span><br></pre></td></tr></table></figure>\n<p>对象有个深浅拷贝的知识点必须要会，对象因为是引用数据类型，在栈中存储的是地址，当用另一个变量接收了之前的变量，那么就好像把钥匙复制了一把，两把钥匙开的还是同一个门，而深拷贝呢就像是照着原来的样板间又造了一个一模一样的房间，这两个房间长得一样，但就是两个房间，钥匙自然也是不一样的，所以呢，当往房间里搬家具的时候，浅拷贝搬进去的是一个房间，所以两把钥匙打开之后看到的都是多了家具，而深拷贝的话，我只是往样板间搬了家具，所以照着装修的房间里是不可能有的，这就是浅拷贝原数据会受影响，而深拷贝不会。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">let a &#x3D; &#123; name: &#39;FE&#39; &#125;</span><br><span class=\"line\">let b &#x3D; a</span><br><span class=\"line\">b.name &#x3D; &#39;EF&#39;</span><br><span class=\"line\">console.log(a.name) &#x2F;&#x2F; EF 浅拷贝原数据会受影响</span><br></pre></td></tr></table></figure>\n<h2 id=\"内置数据类型检测-Typeof-—-类型判断\"><a href=\"#内置数据类型检测-Typeof-—-类型判断\" class=\"headerlink\" title=\"内置数据类型检测 Typeof — 类型判断\"></a>内置数据类型检测 Typeof — 类型判断</h2><blockquote>\n<p>typeof 对于基本类型，除了 null 都可以显示正确的类型</p>\n</blockquote>\n<p>typeof 就像是学校的教导主任一样，他有着一双火眼金睛，不管是哪个同学，穿了什么样的衣服，他一问就能问出来这个学生是谁，大家都怕他，但是Null因为失忆了，他也不知道教导主任是谁，所以typeof就拿他也没办法，因为他不怕教导主任，教导主任甚至会以为他是老师呢。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">typeof 1 &#x2F;&#x2F; &#39;number&#39;</span><br><span class=\"line\">typeof &#39;1&#39; &#x2F;&#x2F; &#39;string&#39;</span><br><span class=\"line\">typeof undefined &#x2F;&#x2F; &#39;undefined&#39;</span><br><span class=\"line\">typeof true &#x2F;&#x2F; &#39;boolean&#39;</span><br><span class=\"line\">typeof Symbol() &#x2F;&#x2F; &#39;symbol&#39;</span><br><span class=\"line\">typeof b &#x2F;&#x2F; b 没有声明，但是还会显示 undefined</span><br><span class=\"line\"></span><br><span class=\"line\">typeof null &#x2F;&#x2F; &#39;object&#39; 这是JS中的bug</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>typeof 对于对象，除了函数都会显示 object</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">typeof [] &#x2F;&#x2F; &#39;object&#39;</span><br><span class=\"line\">typeof &#123;&#125; &#x2F;&#x2F; &#39;object&#39;</span><br><span class=\"line\">typeof console.log &#x2F;&#x2F; &#39;function&#39;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>知识扩展：为什么会出现这种情况呢？因为在 JS 的最初版本中，使用的是 32 位系统，为了性能考虑使用低位存储了变量的类型信息，000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。</p>\n</blockquote>\n<p><strong><em>如果我们想获得一个变量的正确类型，可以通过 Object.prototype.toString.call(xx)。这样我们就可以获得类似 [object Type] 的字符串。</em></strong></p>\n<blockquote>\n<p>小知识扩展</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a</span><br><span class=\"line\">&#x2F;&#x2F; 我们也可以这样判断 undefined</span><br><span class=\"line\">a &#x3D;&#x3D;&#x3D; undefined</span><br><span class=\"line\">&#x2F;&#x2F; 但是 undefined 不是保留字，能够在低版本浏览器被赋值</span><br><span class=\"line\">let undefined &#x3D; 1</span><br><span class=\"line\">&#x2F;&#x2F; 这样判断就会出错</span><br><span class=\"line\">&#x2F;&#x2F; 所以可以用下面的方式来判断，并且代码量更少</span><br><span class=\"line\">&#x2F;&#x2F; 因为 void 后面随便跟上一个组成表达式</span><br><span class=\"line\">&#x2F;&#x2F; 返回就是 undefined</span><br><span class=\"line\">a &#x3D;&#x3D;&#x3D; void 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><h3 id=\"转Boolean\"><a href=\"#转Boolean\" class=\"headerlink\" title=\"转Boolean\"></a>转Boolean</h3><p>一句话可以概括</p>\n<blockquote>\n<p>在条件判断时，除了 <code>undefined</code>， <code>null</code>， <code>false</code>， <code>NaN</code>， <code>&#39;&#39;</code>， <code>0</code>， <code>-0</code>，其他所有值都转为 true，包括所有对象。</p>\n</blockquote>\n<p>从上面这段话可以看出来，<code>undefined</code>、<code>null</code> 是基本类型之二，而<code>false</code>是布尔类型的假值，<code>NaN</code>是数字类型的无效值，<code>&#39;&#39;</code>是字符串类型的空值，而<code>0</code>， <code>-0</code>都是数字类型的零值，可以看到，除了<code>0</code>、<code>-0</code>有些特殊，除了插班生<code>Symbol</code>，剩下的都是基本类型的假值，由此实际上就很好记了，有时候数字这个容易忘，但是记住“非0既真”这句话就好了。</p>\n<h3 id=\"对象转基本类型\"><a href=\"#对象转基本类型\" class=\"headerlink\" title=\"对象转基本类型\"></a>对象转基本类型</h3><p>对象在转换基本类型时，首先是先会调用ToPrimitive（原始类型），如果有hint参数调用对应的的类型方法，如果没有那默认先会调用 valueOf 然后调用 toString。如果返回了基本类型，结束。如果都没返回，那么Error<strong><em>但是注意这两个方法你是可以重写的。</em></strong></p>\n<blockquote>\n<p>Symbol.toPrimitive 是一个内置的 Symbol 值，它是作为对象的函数值属性存在的，当一个对象转换为对应的原始值时，会调用此函数。（来自MDN的解释）<br>需要解释的关键机制是ToPrimitive函数。该函数是将任意值转换为相应的基本类型值。如果输入的就是一个基本类型值，那么将不做修改，被直接返回。如果值是非基本类型值，它将调用内部方法 [[DefaultValue]] 为对象找到一个默认值。<br>[[DefaultValue]]是每一个对象的内部属性。该方法需要一个可选的参数hint，值是Number或String。如果没有提供hint，则默认为Number(除非该对象是Date，在这种情况下默认为String)。然后将调用toString和valueOf去寻找基本类型值。在这里hint就起到作用了。如果hint参数值为Number，valueOf将先被调用，如果hint是String的话，则toString被先调用。<br>[[DefaultValue]] 返回的值一定是基本类型值。如果不是，一个TypeError 将会被抛出。这就意味着为了在这种情况下有意义，toString和valueOf应该返回基本类型值。</p>\n</blockquote>\n<h3 id=\"四则运算符\"><a href=\"#四则运算符\" class=\"headerlink\" title=\"四则运算符\"></a>四则运算符</h3><blockquote>\n<p>只有当<strong><em>加法</em></strong>运算时，其中一方是<strong><em>字符串类型</em></strong>，就会把另一个也转为字符串类型。其他运算只要其中一方是数字，那么另一方就转为数字。<strong><em>并且加法运算会触发三种类型转换：将值转换为原始值，转换为数字，转换为字符串。</em></strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">1 + &#39;1&#39; &#x2F;&#x2F; &#39;11&#39; 这里会是面试陷阱</span><br><span class=\"line\">2 * &#39;2&#39; &#x2F;&#x2F; 4 </span><br><span class=\"line\">[1, 2] + [2, 1] &#x2F;&#x2F; &#39;1,22,1&#39;</span><br><span class=\"line\">&#x2F;&#x2F; [1, 2].toString() -&gt; &#39;1,2&#39;</span><br><span class=\"line\">&#x2F;&#x2F; [2, 1].toString() -&gt; &#39;2,1&#39;</span><br><span class=\"line\">&#x2F;&#x2F; &#39;1,2&#39; + &#39;2,1&#39; &#x3D; &#39;1,22,1&#39;</span><br></pre></td></tr></table></figure>\n<p><strong>*面试陷阱题之 ++ *</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 问表达式 &#39;a&#39; + + &#39;b&#39; 返回结果是什么？</span><br><span class=\"line\">&#x2F;&#x2F; 答案是 &#39;aNaN&#39;</span><br><span class=\"line\">&#39;a&#39; + + &#39;b&#39; -&gt; &#x2F;&#x2F; 一元运算符优先级高</span><br><span class=\"line\">&#39;a&#39; + (+ &#39;b&#39;) -&gt; &#x2F;&#x2F; +&#39;b&#39;转数字类型，非有效结果是NaN</span><br><span class=\"line\">&#39;a&#39; + NaN.toString() -&gt; &#x2F;&#x2F; NaN调用toString（）成字符串&#39;NaN&#39;</span><br><span class=\"line\">&#39;aNaN&#39; &#x2F;&#x2F; 字符串接到一起后&#39;aNaN&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 类似题 &#39;1&#39; + + &#39;4&#39; 返回结果是什么 </span><br><span class=\"line\">&#x2F;&#x2F; 其实就是&#39;4&#39; -&gt; 4 -&gt; &#39;4&#39; 最后还是&#39;14&#39;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"操作符-—-类型比较\"><a href=\"#操作符-—-类型比较\" class=\"headerlink\" title=\"== 操作符 — 类型比较\"></a>== 操作符 — 类型比较</h2><blockquote>\n<p>相等运算符的运算规则如下：<br>1、如果两个值类型相同，进行 === 比较。(这个非常好理解，就不多说了)<br>（1）数字比大小<br>（2）字符串就通过 unicode 字符索引来比较<br>2、如果两个值类型不同，他们可能相等。根据下面规则进行类型转换再比较：<br>（1）如果一个是null、一个是undefined，那么[相等]。 // 这个有点特殊需要单独记<br>（2）如果任一值是字符串，另一个值是数值，在比较相等性之前先将字符串转换为数值；即是调用Number()函数。<br>（3）如果任一值时布尔值，则在比较相等性之前先将其转换为数值，即是调用Number()函数。<br>（4）如果一个是对象，另一个是数值或字符串，把对象转换成基础类型的值再比较。对象转换成基础类型，利用它的toString或者valueOf方法。 （js核心内置类ToPrimitive，会尝试valueOf先于toString；例外的是Date，Date利用的是toString转换。）</p>\n</blockquote>\n<p>1不说，2（1）的话单独记，其他基本类型转数字比较，引用性数据类型调用ToPrimitive转换成基本数据类型</p>\n<p>首先还是一道面试题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; [] &#x3D;&#x3D; ![] 结果是什么</span><br><span class=\"line\">[] &#x3D;&#x3D; ![] &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>\n<p>为什么呢？我们来解析一下，</p>\n<ol>\n<li>首先我们看一下右侧，<code>![]</code>肯定是要先转换成boolen类型了吧，那么<code>[]</code>的布尔类型是什么呢，上面转换布尔的时候我们说过，除了那五个基本类型的假值以及正负0之外，都是真值，所以<code>[]</code> -&gt; <code>true</code> <code>![]</code> -&gt; <code>false</code></li>\n<li><code>ToPrimitive(false)</code>-&gt;<code>0</code>右边的值得出了数值类型的原始值</li>\n<li>看左边<code>ToPrimitive([])</code>-&gt;<code>[]</code>.toString()-&gt;<code>&#39;&#39;</code></li>\n<li><code>Number(&#39;&#39;)</code>-&gt;<code>0</code></li>\n<li>比较左右 <code>0 == 0</code> -&gt; <code>true</code></li>\n</ol>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>到这里JS的内置数据类型及类型的转换和比较就讲完了，相信大家看过以后一定会记得住的<br>PS：突然好像学画漫画，《JS数据结构们》，一定大火，哈哈哈😂</p>"},{"title":"前端常见知识点整理 ---- 继承类型","date":"2020-01-13T03:18:22.000Z","_content":"\n> 作者：李旭光\n> 引用请标明出处\n\n继承的操作需要有一个父类，这里使用构造函数外加原型来创建一个：\n有下面两个类，下面实现 Child 继承 Father：\n\n```js\n// js代码\n\nfunction Father() {\n  this.type = 'prople';\n}\n\nFather.prototype.eat = function() {\n  console.log('吃东西啦');\n};\n\nfunction Child(name) {\n  this.name = name;\n  this.color = 'black';\n}\n```\n\n## 原型继承（认贼作父）\n\n> **_关键点_**：子类原型等于父类的实例 `Child.prototype = new Person()`（将父类指向子类的原型）。\n\n```js\n// js代码\nChild.prototype = new Father();\n```\n\n特点：\n实例可继承的属性有：\n\n- 实例的构造函数的属性\n- 父类构造函数的属性\n- 父类原型上的属性\n  **_新实例不会继承父类实例的属性_**\n\n缺点：\n\n- 新实例无法向父类构造函数传参\n- 继承单一\n- 所有新实例都会共享父类实例的属性。--- 原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原型属性也会被修改\n\n## 构造继承（借腹生子）\n\n> 在子类构造函数中调用父类构造函数\n\n```js\n// js代码\nfunction Child(name) {\n  Father.call(this);\n}\n```\n\n**_关键点_**：用 call 或 apply 将父类构造函数引入子类函数（在子类函数中做了父类函数的自执行（复制））Person.call(this, 'reng')\n特点：\n\n- 只继承了父类构造函数的属性，没有继承父类原型的属性\n- 解决了原型链继承的注意事项（缺点）1，2，3\n- 可以继承多个构造函数的属性（call 可以多个）\n- 在子实例中可以向父实例传参\n  缺点：\n- 只能继承父类构造函数的属性\n- 无法实现构造函数的复用。（每次用每次都要重新调用）\n- 每个新实例都有构造函数的副本，臃肿\n  （不能继承父类原型，函数在构造函数中，每个子类实例不能共享函数，浪费内存。）\n\n## 组合继承（原型继承+构造继承）\n\n> 使用构造继承继承父类参数，使用原型继承继承父类函数\n\n```js\n// js代码\nfunction Child(name) {\n  // 构造继承\n  Father.call(this);\n}\n\nChild.prototype = Father.prototype; // Child.prototype = new Person(); // 原型继承\n```\n\n**_关键点_**：结合了两种模式的优点--向父类传参（call）和复用（prototype）\n特点：\n\n- 可以继承父类原型上的属性，可以传参，可复用\n- 每个新实例引入的构造函数属性是私有的\n\n缺点：\n\n- 父类原型和子类原型是同一个对象，无法区分子类真正是由谁构造。\n- 调用了两次父类的构造函数（耗内存）\n- 子类的构造函数会代替原型上的那个父类构造函数（call 相当于拿到了父类构造函数的副本）\n\n## 原型式继承(复制降级)\n\n```js\n// 先封装一个函数容器，用来承载继承的原型和输出对象\nfunction create(obj) {\n  // 寄生\n  function F() {}\n  F.prototype = obj;\n  return new F();\n}\nvar father = new Father();\nvar child = create(father);\nconsole.log(child instanceof Father); // true\nconsole.log(child.job); // frontend\n```\n\n**_关键点_**：用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了可以随意增添属性的实例或对象。Object.create()就是这个原理。\n\n特点：\n\n- 类似于复制一个对象，用函数来包装\n\n注意事项：\n\n- 所有的实例都会继承原型上的属性\n- 无法实现复用。（新实例属性都是后面添加的）\n  `Object.create()`方法规范了原型式继承。这个方法接收两个参数，一个用作新对象原型的对象和（可选的）一个为新对象定义额外属性的对象。\n\n```js\n// 传一个参数的时候\nvar child = Object.create(new Father());\nconsole.log(child.job); // frontend\nconsole.log(child instanceof Father); // true\n// 传两个参数的时候\nvar child = Object.create(new Father(), {\n  name: {\n    value: 'come on'\n  }\n});\nchild.sayHello(); // Hello come on\n```\n\n## 寄生组合继承\n\n它跟`组合继承`一样，都比较常用。\n**_寄生_**：在函数内返回对象然后调用\n**_组合_**：\n\n- 函数的原型等于另一个实例\n- 在函数中用 apply 或 call 引入另一个构造函数，可传参\n\n```js\n// 寄生\nfunction create(obj) {\n  function F() {}\n  F.prototype = obj;\n  return new F();\n}\n// object是F实例的另一种表示方法\nvar obj = create(Father.prototype);\n// obj实例（F实例）的原型继承了父类函数的原型\n// 上述更像是原型链继承，只不过只继承了原型属性\n\n// 组合\nfunction Child() {\n  // 构造\n  this.age = 100;\n  Father.call(this); // 这个继承了父类构造函数的属性\n} // 解决了组合式两次调用构造函数属性的特点\n\n// 重点\nChild.prototype = obj; // 原型\n\nconsole.log(Child.prototype.constructor); // Father\nobj.constructor = Child; // 一定要修复实例\nconsole.log(Child.prototype.constructor); // Child\nvar child = new Child();\n// Child实例就继承了构造函数属性，父类实例，object的函数属性\nconsole.log(child.job); // frontend\nconsole.log(child instanceof Father); // true\n```\n\n**_重点_**：修复了组合继承的问题\n\n在上面的问题中，你可能发现了这么一个注释`obj.constructor = Sub; // 一定要修复实例。`为什么要修正子类的构造函数的指向呢？\n\n因为在不修正这个指向的时候，在获取构造函数返回的时候，在调用同名属性或方法取值上可能造成混乱。比如下面：\n\n```js\nfunction Car() {}\nCar.prototype.orderOneLikeThis = function() {\n  // Clone producing function\n  return new this.constructor();\n};\nCar.prototype.advertise = function() {\n  console.log('I am a generic car.');\n};\n\nfunction BMW() {}\nBMW.prototype = Object.create(Car.prototype);\nBMW.prototype.constructor = BMW; // Resetting the constructor property\nBMW.prototype.advertise = function() {\n  console.log('I am BMW with lots of uber features.');\n};\n\nvar x5 = new BMW();\n\nvar myNewToy = x5.orderOneLikeThis();\n\nmyNewToy.advertise(); // => \"I am BMW ...\" if `BMW.prototype.constructor = BMW;` is not\n// commented; \"I am a generic car.\" otherwise.\n```\n\n`object.create` 在组合继承的基础上，子类继承一个由父类原型生成的空对象。\n\n```js\n// js代码\nfunction Child(name) {\n  Father.call(this);\n}\n\nChild.prototype = Object.create(Father.prototype, {\n  constructor: {\n    value: Child\n  }\n});\n```\n\n### inherits 函数 --- Nodejs util.inherits 函数\n\n```js\n// js代码\n\nfunction inherits = function(ctor, superCtor) {\n  ctor.super_ = superCtor; // super_属性是子类继承父类时构造函数要写入的一个属性值.\n  ctor.prototype = Object.create(superCtor.prototype, {\n    constructor: {\n      value: ctor,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n};\n// 在上面的代码中 ctor 想要继承 superCtor ,我们姑且把 ctor 称作子类, superCtor 称作父类.\n\n// 使用\nfunction Child() {\n  Father.call(this);\n  //...\n}\ninherits(Child, Father);\n\nChild.prototype.fun = ...\n```\n","source":"_posts/FE-guide-inherit2.md","raw":"---\ntitle: 前端常见知识点整理 ---- 继承类型\ndate: 2020-01-13 11:18:22\ncategories: \n  - 前端技术\n  - 前端常见知识点整理\ntags: \n\t- 面试\n---\n\n> 作者：李旭光\n> 引用请标明出处\n\n继承的操作需要有一个父类，这里使用构造函数外加原型来创建一个：\n有下面两个类，下面实现 Child 继承 Father：\n\n```js\n// js代码\n\nfunction Father() {\n  this.type = 'prople';\n}\n\nFather.prototype.eat = function() {\n  console.log('吃东西啦');\n};\n\nfunction Child(name) {\n  this.name = name;\n  this.color = 'black';\n}\n```\n\n## 原型继承（认贼作父）\n\n> **_关键点_**：子类原型等于父类的实例 `Child.prototype = new Person()`（将父类指向子类的原型）。\n\n```js\n// js代码\nChild.prototype = new Father();\n```\n\n特点：\n实例可继承的属性有：\n\n- 实例的构造函数的属性\n- 父类构造函数的属性\n- 父类原型上的属性\n  **_新实例不会继承父类实例的属性_**\n\n缺点：\n\n- 新实例无法向父类构造函数传参\n- 继承单一\n- 所有新实例都会共享父类实例的属性。--- 原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原型属性也会被修改\n\n## 构造继承（借腹生子）\n\n> 在子类构造函数中调用父类构造函数\n\n```js\n// js代码\nfunction Child(name) {\n  Father.call(this);\n}\n```\n\n**_关键点_**：用 call 或 apply 将父类构造函数引入子类函数（在子类函数中做了父类函数的自执行（复制））Person.call(this, 'reng')\n特点：\n\n- 只继承了父类构造函数的属性，没有继承父类原型的属性\n- 解决了原型链继承的注意事项（缺点）1，2，3\n- 可以继承多个构造函数的属性（call 可以多个）\n- 在子实例中可以向父实例传参\n  缺点：\n- 只能继承父类构造函数的属性\n- 无法实现构造函数的复用。（每次用每次都要重新调用）\n- 每个新实例都有构造函数的副本，臃肿\n  （不能继承父类原型，函数在构造函数中，每个子类实例不能共享函数，浪费内存。）\n\n## 组合继承（原型继承+构造继承）\n\n> 使用构造继承继承父类参数，使用原型继承继承父类函数\n\n```js\n// js代码\nfunction Child(name) {\n  // 构造继承\n  Father.call(this);\n}\n\nChild.prototype = Father.prototype; // Child.prototype = new Person(); // 原型继承\n```\n\n**_关键点_**：结合了两种模式的优点--向父类传参（call）和复用（prototype）\n特点：\n\n- 可以继承父类原型上的属性，可以传参，可复用\n- 每个新实例引入的构造函数属性是私有的\n\n缺点：\n\n- 父类原型和子类原型是同一个对象，无法区分子类真正是由谁构造。\n- 调用了两次父类的构造函数（耗内存）\n- 子类的构造函数会代替原型上的那个父类构造函数（call 相当于拿到了父类构造函数的副本）\n\n## 原型式继承(复制降级)\n\n```js\n// 先封装一个函数容器，用来承载继承的原型和输出对象\nfunction create(obj) {\n  // 寄生\n  function F() {}\n  F.prototype = obj;\n  return new F();\n}\nvar father = new Father();\nvar child = create(father);\nconsole.log(child instanceof Father); // true\nconsole.log(child.job); // frontend\n```\n\n**_关键点_**：用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了可以随意增添属性的实例或对象。Object.create()就是这个原理。\n\n特点：\n\n- 类似于复制一个对象，用函数来包装\n\n注意事项：\n\n- 所有的实例都会继承原型上的属性\n- 无法实现复用。（新实例属性都是后面添加的）\n  `Object.create()`方法规范了原型式继承。这个方法接收两个参数，一个用作新对象原型的对象和（可选的）一个为新对象定义额外属性的对象。\n\n```js\n// 传一个参数的时候\nvar child = Object.create(new Father());\nconsole.log(child.job); // frontend\nconsole.log(child instanceof Father); // true\n// 传两个参数的时候\nvar child = Object.create(new Father(), {\n  name: {\n    value: 'come on'\n  }\n});\nchild.sayHello(); // Hello come on\n```\n\n## 寄生组合继承\n\n它跟`组合继承`一样，都比较常用。\n**_寄生_**：在函数内返回对象然后调用\n**_组合_**：\n\n- 函数的原型等于另一个实例\n- 在函数中用 apply 或 call 引入另一个构造函数，可传参\n\n```js\n// 寄生\nfunction create(obj) {\n  function F() {}\n  F.prototype = obj;\n  return new F();\n}\n// object是F实例的另一种表示方法\nvar obj = create(Father.prototype);\n// obj实例（F实例）的原型继承了父类函数的原型\n// 上述更像是原型链继承，只不过只继承了原型属性\n\n// 组合\nfunction Child() {\n  // 构造\n  this.age = 100;\n  Father.call(this); // 这个继承了父类构造函数的属性\n} // 解决了组合式两次调用构造函数属性的特点\n\n// 重点\nChild.prototype = obj; // 原型\n\nconsole.log(Child.prototype.constructor); // Father\nobj.constructor = Child; // 一定要修复实例\nconsole.log(Child.prototype.constructor); // Child\nvar child = new Child();\n// Child实例就继承了构造函数属性，父类实例，object的函数属性\nconsole.log(child.job); // frontend\nconsole.log(child instanceof Father); // true\n```\n\n**_重点_**：修复了组合继承的问题\n\n在上面的问题中，你可能发现了这么一个注释`obj.constructor = Sub; // 一定要修复实例。`为什么要修正子类的构造函数的指向呢？\n\n因为在不修正这个指向的时候，在获取构造函数返回的时候，在调用同名属性或方法取值上可能造成混乱。比如下面：\n\n```js\nfunction Car() {}\nCar.prototype.orderOneLikeThis = function() {\n  // Clone producing function\n  return new this.constructor();\n};\nCar.prototype.advertise = function() {\n  console.log('I am a generic car.');\n};\n\nfunction BMW() {}\nBMW.prototype = Object.create(Car.prototype);\nBMW.prototype.constructor = BMW; // Resetting the constructor property\nBMW.prototype.advertise = function() {\n  console.log('I am BMW with lots of uber features.');\n};\n\nvar x5 = new BMW();\n\nvar myNewToy = x5.orderOneLikeThis();\n\nmyNewToy.advertise(); // => \"I am BMW ...\" if `BMW.prototype.constructor = BMW;` is not\n// commented; \"I am a generic car.\" otherwise.\n```\n\n`object.create` 在组合继承的基础上，子类继承一个由父类原型生成的空对象。\n\n```js\n// js代码\nfunction Child(name) {\n  Father.call(this);\n}\n\nChild.prototype = Object.create(Father.prototype, {\n  constructor: {\n    value: Child\n  }\n});\n```\n\n### inherits 函数 --- Nodejs util.inherits 函数\n\n```js\n// js代码\n\nfunction inherits = function(ctor, superCtor) {\n  ctor.super_ = superCtor; // super_属性是子类继承父类时构造函数要写入的一个属性值.\n  ctor.prototype = Object.create(superCtor.prototype, {\n    constructor: {\n      value: ctor,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n};\n// 在上面的代码中 ctor 想要继承 superCtor ,我们姑且把 ctor 称作子类, superCtor 称作父类.\n\n// 使用\nfunction Child() {\n  Father.call(this);\n  //...\n}\ninherits(Child, Father);\n\nChild.prototype.fun = ...\n```\n","slug":"FE-guide-inherit2","published":1,"updated":"2020-04-02T03:20:12.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grxo001sooa6a10tcccb","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<p>继承的操作需要有一个父类，这里使用构造函数外加原型来创建一个：<br>有下面两个类，下面实现 Child 继承 Father：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.type = <span class=\"string\">'prople'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Father.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'吃东西啦'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color = <span class=\"string\">'black'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"原型继承（认贼作父）\"><a href=\"#原型继承（认贼作父）\" class=\"headerlink\" title=\"原型继承（认贼作父）\"></a>原型继承（认贼作父）</h2><blockquote>\n<p><strong><em>关键点</em></strong>：子类原型等于父类的实例 <code>Child.prototype = new Person()</code>（将父类指向子类的原型）。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Father();</span><br></pre></td></tr></table></figure>\n\n<p>特点：<br>实例可继承的属性有：</p>\n<ul>\n<li>实例的构造函数的属性</li>\n<li>父类构造函数的属性</li>\n<li>父类原型上的属性<br><strong><em>新实例不会继承父类实例的属性</em></strong></li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>新实例无法向父类构造函数传参</li>\n<li>继承单一</li>\n<li>所有新实例都会共享父类实例的属性。— 原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原型属性也会被修改</li>\n</ul>\n<h2 id=\"构造继承（借腹生子）\"><a href=\"#构造继承（借腹生子）\" class=\"headerlink\" title=\"构造继承（借腹生子）\"></a>构造继承（借腹生子）</h2><blockquote>\n<p>在子类构造函数中调用父类构造函数</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  Father.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong><em>关键点</em></strong>：用 call 或 apply 将父类构造函数引入子类函数（在子类函数中做了父类函数的自执行（复制））Person.call(this, ‘reng’)<br>特点：</p>\n<ul>\n<li>只继承了父类构造函数的属性，没有继承父类原型的属性</li>\n<li>解决了原型链继承的注意事项（缺点）1，2，3</li>\n<li>可以继承多个构造函数的属性（call 可以多个）</li>\n<li>在子实例中可以向父实例传参<br>缺点：</li>\n<li>只能继承父类构造函数的属性</li>\n<li>无法实现构造函数的复用。（每次用每次都要重新调用）</li>\n<li>每个新实例都有构造函数的副本，臃肿<br>（不能继承父类原型，函数在构造函数中，每个子类实例不能共享函数，浪费内存。）</li>\n</ul>\n<h2 id=\"组合继承（原型继承-构造继承）\"><a href=\"#组合继承（原型继承-构造继承）\" class=\"headerlink\" title=\"组合继承（原型继承+构造继承）\"></a>组合继承（原型继承+构造继承）</h2><blockquote>\n<p>使用构造继承继承父类参数，使用原型继承继承父类函数</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造继承</span></span><br><span class=\"line\">  Father.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype = Father.prototype; <span class=\"comment\">// Child.prototype = new Person(); // 原型继承</span></span><br></pre></td></tr></table></figure>\n\n<p><strong><em>关键点</em></strong>：结合了两种模式的优点–向父类传参（call）和复用（prototype）<br>特点：</p>\n<ul>\n<li>可以继承父类原型上的属性，可以传参，可复用</li>\n<li>每个新实例引入的构造函数属性是私有的</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>父类原型和子类原型是同一个对象，无法区分子类真正是由谁构造。</li>\n<li>调用了两次父类的构造函数（耗内存）</li>\n<li>子类的构造函数会代替原型上的那个父类构造函数（call 相当于拿到了父类构造函数的副本）</li>\n</ul>\n<h2 id=\"原型式继承-复制降级\"><a href=\"#原型式继承-复制降级\" class=\"headerlink\" title=\"原型式继承(复制降级)\"></a>原型式继承(复制降级)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 先封装一个函数容器，用来承载继承的原型和输出对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 寄生</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  F.prototype = obj;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> father = <span class=\"keyword\">new</span> Father();</span><br><span class=\"line\"><span class=\"keyword\">var</span> child = create(father);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child <span class=\"keyword\">instanceof</span> Father); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.job); <span class=\"comment\">// frontend</span></span><br></pre></td></tr></table></figure>\n\n<p><strong><em>关键点</em></strong>：用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了可以随意增添属性的实例或对象。Object.create()就是这个原理。</p>\n<p>特点：</p>\n<ul>\n<li>类似于复制一个对象，用函数来包装</li>\n</ul>\n<p>注意事项：</p>\n<ul>\n<li>所有的实例都会继承原型上的属性</li>\n<li>无法实现复用。（新实例属性都是后面添加的）<br><code>Object.create()</code>方法规范了原型式继承。这个方法接收两个参数，一个用作新对象原型的对象和（可选的）一个为新对象定义额外属性的对象。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传一个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">new</span> Father());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.job); <span class=\"comment\">// frontend</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child <span class=\"keyword\">instanceof</span> Father); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 传两个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">new</span> Father(), &#123;</span><br><span class=\"line\">  name: &#123;</span><br><span class=\"line\">    value: <span class=\"string\">'come on'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">child.sayHello(); <span class=\"comment\">// Hello come on</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"寄生组合继承\"><a href=\"#寄生组合继承\" class=\"headerlink\" title=\"寄生组合继承\"></a>寄生组合继承</h2><p>它跟<code>组合继承</code>一样，都比较常用。<br><strong><em>寄生</em></strong>：在函数内返回对象然后调用<br><strong><em>组合</em></strong>：</p>\n<ul>\n<li>函数的原型等于另一个实例</li>\n<li>在函数中用 apply 或 call 引入另一个构造函数，可传参</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 寄生</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  F.prototype = obj;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// object是F实例的另一种表示方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = create(Father.prototype);</span><br><span class=\"line\"><span class=\"comment\">// obj实例（F实例）的原型继承了父类函数的原型</span></span><br><span class=\"line\"><span class=\"comment\">// 上述更像是原型链继承，只不过只继承了原型属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组合</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = <span class=\"number\">100</span>;</span><br><span class=\"line\">  Father.call(<span class=\"keyword\">this</span>); <span class=\"comment\">// 这个继承了父类构造函数的属性</span></span><br><span class=\"line\">&#125; <span class=\"comment\">// 解决了组合式两次调用构造函数属性的特点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重点</span></span><br><span class=\"line\">Child.prototype = obj; <span class=\"comment\">// 原型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Child.prototype.constructor); <span class=\"comment\">// Father</span></span><br><span class=\"line\">obj.constructor = Child; <span class=\"comment\">// 一定要修复实例</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Child.prototype.constructor); <span class=\"comment\">// Child</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"><span class=\"comment\">// Child实例就继承了构造函数属性，父类实例，object的函数属性</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.job); <span class=\"comment\">// frontend</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child <span class=\"keyword\">instanceof</span> Father); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong><em>重点</em></strong>：修复了组合继承的问题</p>\n<p>在上面的问题中，你可能发现了这么一个注释<code>obj.constructor = Sub; // 一定要修复实例。</code>为什么要修正子类的构造函数的指向呢？</p>\n<p>因为在不修正这个指向的时候，在获取构造函数返回的时候，在调用同名属性或方法取值上可能造成混乱。比如下面：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Car.prototype.orderOneLikeThis = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Clone producing function</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">this</span>.constructor();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Car.prototype.advertise = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am a generic car.'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BMW</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">BMW.prototype = <span class=\"built_in\">Object</span>.create(Car.prototype);</span><br><span class=\"line\">BMW.prototype.constructor = BMW; <span class=\"comment\">// Resetting the constructor property</span></span><br><span class=\"line\">BMW.prototype.advertise = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am BMW with lots of uber features.'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x5 = <span class=\"keyword\">new</span> BMW();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myNewToy = x5.orderOneLikeThis();</span><br><span class=\"line\"></span><br><span class=\"line\">myNewToy.advertise(); <span class=\"comment\">// =&gt; \"I am BMW ...\" if `BMW.prototype.constructor = BMW;` is not</span></span><br><span class=\"line\"><span class=\"comment\">// commented; \"I am a generic car.\" otherwise.</span></span><br></pre></td></tr></table></figure>\n\n<p><code>object.create</code> 在组合继承的基础上，子类继承一个由父类原型生成的空对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  Father.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype = <span class=\"built_in\">Object</span>.create(Father.prototype, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>: &#123;</span><br><span class=\"line\">    value: Child</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"inherits-函数-—-Nodejs-util-inherits-函数\"><a href=\"#inherits-函数-—-Nodejs-util-inherits-函数\" class=\"headerlink\" title=\"inherits 函数 — Nodejs util.inherits 函数\"></a>inherits 函数 — Nodejs util.inherits 函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherits</span> = <span class=\"title\">function</span>(<span class=\"params\">ctor, superCtor</span>) </span>&#123;</span><br><span class=\"line\">  ctor.super_ = superCtor; <span class=\"comment\">// super_属性是子类继承父类时构造函数要写入的一个属性值.</span></span><br><span class=\"line\">  ctor.prototype = <span class=\"built_in\">Object</span>.create(superCtor.prototype, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: &#123;</span><br><span class=\"line\">      value: ctor,</span><br><span class=\"line\">      enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 在上面的代码中 ctor 想要继承 superCtor ,我们姑且把 ctor 称作子类, superCtor 称作父类.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  Father.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">inherits(Child, Father);</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype.fun = ...</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<p>继承的操作需要有一个父类，这里使用构造函数外加原型来创建一个：<br>有下面两个类，下面实现 Child 继承 Father：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.type = <span class=\"string\">'prople'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Father.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'吃东西啦'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color = <span class=\"string\">'black'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"原型继承（认贼作父）\"><a href=\"#原型继承（认贼作父）\" class=\"headerlink\" title=\"原型继承（认贼作父）\"></a>原型继承（认贼作父）</h2><blockquote>\n<p><strong><em>关键点</em></strong>：子类原型等于父类的实例 <code>Child.prototype = new Person()</code>（将父类指向子类的原型）。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Father();</span><br></pre></td></tr></table></figure>\n\n<p>特点：<br>实例可继承的属性有：</p>\n<ul>\n<li>实例的构造函数的属性</li>\n<li>父类构造函数的属性</li>\n<li>父类原型上的属性<br><strong><em>新实例不会继承父类实例的属性</em></strong></li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>新实例无法向父类构造函数传参</li>\n<li>继承单一</li>\n<li>所有新实例都会共享父类实例的属性。— 原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原型属性也会被修改</li>\n</ul>\n<h2 id=\"构造继承（借腹生子）\"><a href=\"#构造继承（借腹生子）\" class=\"headerlink\" title=\"构造继承（借腹生子）\"></a>构造继承（借腹生子）</h2><blockquote>\n<p>在子类构造函数中调用父类构造函数</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  Father.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong><em>关键点</em></strong>：用 call 或 apply 将父类构造函数引入子类函数（在子类函数中做了父类函数的自执行（复制））Person.call(this, ‘reng’)<br>特点：</p>\n<ul>\n<li>只继承了父类构造函数的属性，没有继承父类原型的属性</li>\n<li>解决了原型链继承的注意事项（缺点）1，2，3</li>\n<li>可以继承多个构造函数的属性（call 可以多个）</li>\n<li>在子实例中可以向父实例传参<br>缺点：</li>\n<li>只能继承父类构造函数的属性</li>\n<li>无法实现构造函数的复用。（每次用每次都要重新调用）</li>\n<li>每个新实例都有构造函数的副本，臃肿<br>（不能继承父类原型，函数在构造函数中，每个子类实例不能共享函数，浪费内存。）</li>\n</ul>\n<h2 id=\"组合继承（原型继承-构造继承）\"><a href=\"#组合继承（原型继承-构造继承）\" class=\"headerlink\" title=\"组合继承（原型继承+构造继承）\"></a>组合继承（原型继承+构造继承）</h2><blockquote>\n<p>使用构造继承继承父类参数，使用原型继承继承父类函数</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造继承</span></span><br><span class=\"line\">  Father.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype = Father.prototype; <span class=\"comment\">// Child.prototype = new Person(); // 原型继承</span></span><br></pre></td></tr></table></figure>\n\n<p><strong><em>关键点</em></strong>：结合了两种模式的优点–向父类传参（call）和复用（prototype）<br>特点：</p>\n<ul>\n<li>可以继承父类原型上的属性，可以传参，可复用</li>\n<li>每个新实例引入的构造函数属性是私有的</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>父类原型和子类原型是同一个对象，无法区分子类真正是由谁构造。</li>\n<li>调用了两次父类的构造函数（耗内存）</li>\n<li>子类的构造函数会代替原型上的那个父类构造函数（call 相当于拿到了父类构造函数的副本）</li>\n</ul>\n<h2 id=\"原型式继承-复制降级\"><a href=\"#原型式继承-复制降级\" class=\"headerlink\" title=\"原型式继承(复制降级)\"></a>原型式继承(复制降级)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 先封装一个函数容器，用来承载继承的原型和输出对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 寄生</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  F.prototype = obj;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> father = <span class=\"keyword\">new</span> Father();</span><br><span class=\"line\"><span class=\"keyword\">var</span> child = create(father);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child <span class=\"keyword\">instanceof</span> Father); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.job); <span class=\"comment\">// frontend</span></span><br></pre></td></tr></table></figure>\n\n<p><strong><em>关键点</em></strong>：用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了可以随意增添属性的实例或对象。Object.create()就是这个原理。</p>\n<p>特点：</p>\n<ul>\n<li>类似于复制一个对象，用函数来包装</li>\n</ul>\n<p>注意事项：</p>\n<ul>\n<li>所有的实例都会继承原型上的属性</li>\n<li>无法实现复用。（新实例属性都是后面添加的）<br><code>Object.create()</code>方法规范了原型式继承。这个方法接收两个参数，一个用作新对象原型的对象和（可选的）一个为新对象定义额外属性的对象。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传一个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">new</span> Father());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.job); <span class=\"comment\">// frontend</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child <span class=\"keyword\">instanceof</span> Father); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 传两个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">new</span> Father(), &#123;</span><br><span class=\"line\">  name: &#123;</span><br><span class=\"line\">    value: <span class=\"string\">'come on'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">child.sayHello(); <span class=\"comment\">// Hello come on</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"寄生组合继承\"><a href=\"#寄生组合继承\" class=\"headerlink\" title=\"寄生组合继承\"></a>寄生组合继承</h2><p>它跟<code>组合继承</code>一样，都比较常用。<br><strong><em>寄生</em></strong>：在函数内返回对象然后调用<br><strong><em>组合</em></strong>：</p>\n<ul>\n<li>函数的原型等于另一个实例</li>\n<li>在函数中用 apply 或 call 引入另一个构造函数，可传参</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 寄生</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  F.prototype = obj;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// object是F实例的另一种表示方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = create(Father.prototype);</span><br><span class=\"line\"><span class=\"comment\">// obj实例（F实例）的原型继承了父类函数的原型</span></span><br><span class=\"line\"><span class=\"comment\">// 上述更像是原型链继承，只不过只继承了原型属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组合</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = <span class=\"number\">100</span>;</span><br><span class=\"line\">  Father.call(<span class=\"keyword\">this</span>); <span class=\"comment\">// 这个继承了父类构造函数的属性</span></span><br><span class=\"line\">&#125; <span class=\"comment\">// 解决了组合式两次调用构造函数属性的特点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重点</span></span><br><span class=\"line\">Child.prototype = obj; <span class=\"comment\">// 原型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Child.prototype.constructor); <span class=\"comment\">// Father</span></span><br><span class=\"line\">obj.constructor = Child; <span class=\"comment\">// 一定要修复实例</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Child.prototype.constructor); <span class=\"comment\">// Child</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"><span class=\"comment\">// Child实例就继承了构造函数属性，父类实例，object的函数属性</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child.job); <span class=\"comment\">// frontend</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child <span class=\"keyword\">instanceof</span> Father); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong><em>重点</em></strong>：修复了组合继承的问题</p>\n<p>在上面的问题中，你可能发现了这么一个注释<code>obj.constructor = Sub; // 一定要修复实例。</code>为什么要修正子类的构造函数的指向呢？</p>\n<p>因为在不修正这个指向的时候，在获取构造函数返回的时候，在调用同名属性或方法取值上可能造成混乱。比如下面：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Car.prototype.orderOneLikeThis = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Clone producing function</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">this</span>.constructor();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Car.prototype.advertise = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am a generic car.'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BMW</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">BMW.prototype = <span class=\"built_in\">Object</span>.create(Car.prototype);</span><br><span class=\"line\">BMW.prototype.constructor = BMW; <span class=\"comment\">// Resetting the constructor property</span></span><br><span class=\"line\">BMW.prototype.advertise = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am BMW with lots of uber features.'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x5 = <span class=\"keyword\">new</span> BMW();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myNewToy = x5.orderOneLikeThis();</span><br><span class=\"line\"></span><br><span class=\"line\">myNewToy.advertise(); <span class=\"comment\">// =&gt; \"I am BMW ...\" if `BMW.prototype.constructor = BMW;` is not</span></span><br><span class=\"line\"><span class=\"comment\">// commented; \"I am a generic car.\" otherwise.</span></span><br></pre></td></tr></table></figure>\n\n<p><code>object.create</code> 在组合继承的基础上，子类继承一个由父类原型生成的空对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  Father.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype = <span class=\"built_in\">Object</span>.create(Father.prototype, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>: &#123;</span><br><span class=\"line\">    value: Child</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"inherits-函数-—-Nodejs-util-inherits-函数\"><a href=\"#inherits-函数-—-Nodejs-util-inherits-函数\" class=\"headerlink\" title=\"inherits 函数 — Nodejs util.inherits 函数\"></a>inherits 函数 — Nodejs util.inherits 函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherits</span> = <span class=\"title\">function</span>(<span class=\"params\">ctor, superCtor</span>) </span>&#123;</span><br><span class=\"line\">  ctor.super_ = superCtor; <span class=\"comment\">// super_属性是子类继承父类时构造函数要写入的一个属性值.</span></span><br><span class=\"line\">  ctor.prototype = <span class=\"built_in\">Object</span>.create(superCtor.prototype, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: &#123;</span><br><span class=\"line\">      value: ctor,</span><br><span class=\"line\">      enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 在上面的代码中 ctor 想要继承 superCtor ,我们姑且把 ctor 称作子类, superCtor 称作父类.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  Father.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">inherits(Child, Father);</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype.fun = ...</span><br></pre></td></tr></table></figure>\n"},{"title":"前端常见知识点整理 ---- instanceof","date":"2020-01-02T12:29:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# `instanceof` \n`instanceof` 可以正确的判断对象的类型，因为内部机制是通过判断对象的原型链中是不是能找到类型的 `prototype`。\n举例：\n``` js\na instanceof Object\n```\n判断 `Object` 的 `prototype` 是否在 `a` 的原型链上。\n\n我们也可以试着实现一下 `instanceof`\n\n``` js\nfunction myInstanceof(left, right) { // left 表示左表达式，right 表示右表达式\n    let prototype = right.prototype // 获得类型的原型\n    left = left.__proto__ // 获得对象的原型\n\t\t\n    while (true) { // 判断对象的类型是否等于类型的原型\n    \tif (left === null)\n    \t\treturn false\n    \tif (prototype === left)\n    \t\treturn true\n    \tleft = left.__proto__\n    }\n}\n```","source":"_posts/FE-guide-instanceof.md","raw":"---\ntitle: 前端常见知识点整理 ---- instanceof\ndate: 2020-01-02 20:29:22\ncategories: \n\t- 前端技术\n\t- 前端常见知识点整理\ntags: \n\t- 面试\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# `instanceof` \n`instanceof` 可以正确的判断对象的类型，因为内部机制是通过判断对象的原型链中是不是能找到类型的 `prototype`。\n举例：\n``` js\na instanceof Object\n```\n判断 `Object` 的 `prototype` 是否在 `a` 的原型链上。\n\n我们也可以试着实现一下 `instanceof`\n\n``` js\nfunction myInstanceof(left, right) { // left 表示左表达式，right 表示右表达式\n    let prototype = right.prototype // 获得类型的原型\n    left = left.__proto__ // 获得对象的原型\n\t\t\n    while (true) { // 判断对象的类型是否等于类型的原型\n    \tif (left === null)\n    \t\treturn false\n    \tif (prototype === left)\n    \t\treturn true\n    \tleft = left.__proto__\n    }\n}\n```","slug":"FE-guide-instanceof","published":1,"updated":"2020-04-02T03:20:12.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grxt001vooa6covfgysw","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a><code>instanceof</code></h1><p><code>instanceof</code> 可以正确的判断对象的类型，因为内部机制是通过判断对象的原型链中是不是能找到类型的 <code>prototype</code>。<br>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span></span><br></pre></td></tr></table></figure>\n<p>判断 <code>Object</code> 的 <code>prototype</code> 是否在 <code>a</code> 的原型链上。</p>\n<p>我们也可以试着实现一下 <code>instanceof</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myInstanceof</span>(<span class=\"params\">left, right</span>) </span>&#123; <span class=\"comment\">// left 表示左表达式，right 表示右表达式</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> prototype = right.prototype <span class=\"comment\">// 获得类型的原型</span></span><br><span class=\"line\">    left = left.__proto__ <span class=\"comment\">// 获得对象的原型</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123; <span class=\"comment\">// 判断对象的类型是否等于类型的原型</span></span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (left === <span class=\"literal\">null</span>)</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (prototype === left)</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    \tleft = left.__proto__</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a><code>instanceof</code></h1><p><code>instanceof</code> 可以正确的判断对象的类型，因为内部机制是通过判断对象的原型链中是不是能找到类型的 <code>prototype</code>。<br>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span></span><br></pre></td></tr></table></figure>\n<p>判断 <code>Object</code> 的 <code>prototype</code> 是否在 <code>a</code> 的原型链上。</p>\n<p>我们也可以试着实现一下 <code>instanceof</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myInstanceof</span>(<span class=\"params\">left, right</span>) </span>&#123; <span class=\"comment\">// left 表示左表达式，right 表示右表达式</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> prototype = right.prototype <span class=\"comment\">// 获得类型的原型</span></span><br><span class=\"line\">    left = left.__proto__ <span class=\"comment\">// 获得对象的原型</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123; <span class=\"comment\">// 判断对象的类型是否等于类型的原型</span></span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (left === <span class=\"literal\">null</span>)</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (prototype === left)</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    \tleft = left.__proto__</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"前端常见知识点整理 ---- new","date":"2020-01-02T12:07:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# `new` 一个对象的过程\n1. 新生成了一个对象\n2. 链接到原型\n3. 绑定 `this`\n4. 返回新对象\n   \n在调用 `new` 的过程中会发生以上四件事情，我们也可以试着来自己实现一个 `new`\n\n```\n// js代码\n\nfunction create() {\n    // 创建一个空的对象\n    let obj = new Object()\n    // 获得构造函数\n    let Con = [].shift.call(arguments)\n    // 链接到原型\n    obj.__proto__ = Con.prototype\n    // 绑定 this，执行构造函数\n    let result = Con.apply(obj, arguments)\n    // 确保 new 出来的是个对象\n    return typeof result === 'object' ? result : obj\n}\n```\n\n对于实例对象来说，都是通过 `new` 产生的，无论是 `function Foo()` 还是 `let a = { b : 1 }` 。\n\n对于创建一个对象来说，更推荐使用字面量的方式创建对象（无论性能上还是可读性）。因为你使用 `new Object()` 的方式创建对象需要通过作用域链一层层找到 `Object`，但是你使用字面量的方式就没这个问题。\n```\n// js代码\n\nfunction Foo() {} // function 就是个语法糖，内部等同于 new Function()\nlet a = { b: 1 } // 这个字面量内部也是使用了 new Object()\n```\n对于 `new` 来说，还需要注意下运算符优先级。\n\n```\n// js代码\n\nfunction Foo() {\n    return this;\n}\nFoo.getName = function () {\n    console.log('1');\n};\nFoo.prototype.getName = function () {\n    console.log('2');\n};\n\nnew Foo.getName();   // -> 1\nnew Foo().getName(); // -> 2\n```\n\n从上图可以看出，`new Foo()` 的优先级大于 `new Foo` ，所以对于上述代码来说可以这样划分执行顺序\n```\n// js代码\n\nnew (Foo.getName());\n(new Foo()).getName();\n```\n\n- 对于第一个函数来说，先执行了 `Foo.getName()` ，所以结果为 1；\n- 对于后者来说，先执行 `new Foo()` 产生了一个实例，然后通过原型链找到了 Foo 上的 getName 函数，所以结果为 2。","source":"_posts/FE-guide-new.md","raw":"---\ntitle: 前端常见知识点整理 ---- new\ndate: 2020-01-02 20:07:22\ncategories: \n    - 前端技术\n    - 前端常见知识点整理\ntags: \n\t- 面试\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# `new` 一个对象的过程\n1. 新生成了一个对象\n2. 链接到原型\n3. 绑定 `this`\n4. 返回新对象\n   \n在调用 `new` 的过程中会发生以上四件事情，我们也可以试着来自己实现一个 `new`\n\n```\n// js代码\n\nfunction create() {\n    // 创建一个空的对象\n    let obj = new Object()\n    // 获得构造函数\n    let Con = [].shift.call(arguments)\n    // 链接到原型\n    obj.__proto__ = Con.prototype\n    // 绑定 this，执行构造函数\n    let result = Con.apply(obj, arguments)\n    // 确保 new 出来的是个对象\n    return typeof result === 'object' ? result : obj\n}\n```\n\n对于实例对象来说，都是通过 `new` 产生的，无论是 `function Foo()` 还是 `let a = { b : 1 }` 。\n\n对于创建一个对象来说，更推荐使用字面量的方式创建对象（无论性能上还是可读性）。因为你使用 `new Object()` 的方式创建对象需要通过作用域链一层层找到 `Object`，但是你使用字面量的方式就没这个问题。\n```\n// js代码\n\nfunction Foo() {} // function 就是个语法糖，内部等同于 new Function()\nlet a = { b: 1 } // 这个字面量内部也是使用了 new Object()\n```\n对于 `new` 来说，还需要注意下运算符优先级。\n\n```\n// js代码\n\nfunction Foo() {\n    return this;\n}\nFoo.getName = function () {\n    console.log('1');\n};\nFoo.prototype.getName = function () {\n    console.log('2');\n};\n\nnew Foo.getName();   // -> 1\nnew Foo().getName(); // -> 2\n```\n\n从上图可以看出，`new Foo()` 的优先级大于 `new Foo` ，所以对于上述代码来说可以这样划分执行顺序\n```\n// js代码\n\nnew (Foo.getName());\n(new Foo()).getName();\n```\n\n- 对于第一个函数来说，先执行了 `Foo.getName()` ，所以结果为 1；\n- 对于后者来说，先执行 `new Foo()` 产生了一个实例，然后通过原型链找到了 Foo 上的 getName 函数，所以结果为 2。","slug":"FE-guide-new","published":1,"updated":"2020-04-02T03:20:12.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grxx001yooa6b6ejf564","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"new-一个对象的过程\"><a href=\"#new-一个对象的过程\" class=\"headerlink\" title=\"new 一个对象的过程\"></a><code>new</code> 一个对象的过程</h1><ol>\n<li>新生成了一个对象</li>\n<li>链接到原型</li>\n<li>绑定 <code>this</code></li>\n<li>返回新对象</li>\n</ol>\n<p>在调用 <code>new</code> 的过程中会发生以上四件事情，我们也可以试着来自己实现一个 <code>new</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function create() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建一个空的对象</span><br><span class=\"line\">    let obj &#x3D; new Object()</span><br><span class=\"line\">    &#x2F;&#x2F; 获得构造函数</span><br><span class=\"line\">    let Con &#x3D; [].shift.call(arguments)</span><br><span class=\"line\">    &#x2F;&#x2F; 链接到原型</span><br><span class=\"line\">    obj.__proto__ &#x3D; Con.prototype</span><br><span class=\"line\">    &#x2F;&#x2F; 绑定 this，执行构造函数</span><br><span class=\"line\">    let result &#x3D; Con.apply(obj, arguments)</span><br><span class=\"line\">    &#x2F;&#x2F; 确保 new 出来的是个对象</span><br><span class=\"line\">    return typeof result &#x3D;&#x3D;&#x3D; &#39;object&#39; ? result : obj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于实例对象来说，都是通过 <code>new</code> 产生的，无论是 <code>function Foo()</code> 还是 <code>let a = { b : 1 }</code> 。</p>\n<p>对于创建一个对象来说，更推荐使用字面量的方式创建对象（无论性能上还是可读性）。因为你使用 <code>new Object()</code> 的方式创建对象需要通过作用域链一层层找到 <code>Object</code>，但是你使用字面量的方式就没这个问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function Foo() &#123;&#125; &#x2F;&#x2F; function 就是个语法糖，内部等同于 new Function()</span><br><span class=\"line\">let a &#x3D; &#123; b: 1 &#125; &#x2F;&#x2F; 这个字面量内部也是使用了 new Object()</span><br></pre></td></tr></table></figure>\n<p>对于 <code>new</code> 来说，还需要注意下运算符优先级。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function Foo() &#123;</span><br><span class=\"line\">    return this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.getName &#x3D; function () &#123;</span><br><span class=\"line\">    console.log(&#39;1&#39;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Foo.prototype.getName &#x3D; function () &#123;</span><br><span class=\"line\">    console.log(&#39;2&#39;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">new Foo.getName();   &#x2F;&#x2F; -&gt; 1</span><br><span class=\"line\">new Foo().getName(); &#x2F;&#x2F; -&gt; 2</span><br></pre></td></tr></table></figure>\n\n<p>从上图可以看出，<code>new Foo()</code> 的优先级大于 <code>new Foo</code> ，所以对于上述代码来说可以这样划分执行顺序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">new (Foo.getName());</span><br><span class=\"line\">(new Foo()).getName();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对于第一个函数来说，先执行了 <code>Foo.getName()</code> ，所以结果为 1；</li>\n<li>对于后者来说，先执行 <code>new Foo()</code> 产生了一个实例，然后通过原型链找到了 Foo 上的 getName 函数，所以结果为 2。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"new-一个对象的过程\"><a href=\"#new-一个对象的过程\" class=\"headerlink\" title=\"new 一个对象的过程\"></a><code>new</code> 一个对象的过程</h1><ol>\n<li>新生成了一个对象</li>\n<li>链接到原型</li>\n<li>绑定 <code>this</code></li>\n<li>返回新对象</li>\n</ol>\n<p>在调用 <code>new</code> 的过程中会发生以上四件事情，我们也可以试着来自己实现一个 <code>new</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function create() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建一个空的对象</span><br><span class=\"line\">    let obj &#x3D; new Object()</span><br><span class=\"line\">    &#x2F;&#x2F; 获得构造函数</span><br><span class=\"line\">    let Con &#x3D; [].shift.call(arguments)</span><br><span class=\"line\">    &#x2F;&#x2F; 链接到原型</span><br><span class=\"line\">    obj.__proto__ &#x3D; Con.prototype</span><br><span class=\"line\">    &#x2F;&#x2F; 绑定 this，执行构造函数</span><br><span class=\"line\">    let result &#x3D; Con.apply(obj, arguments)</span><br><span class=\"line\">    &#x2F;&#x2F; 确保 new 出来的是个对象</span><br><span class=\"line\">    return typeof result &#x3D;&#x3D;&#x3D; &#39;object&#39; ? result : obj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于实例对象来说，都是通过 <code>new</code> 产生的，无论是 <code>function Foo()</code> 还是 <code>let a = { b : 1 }</code> 。</p>\n<p>对于创建一个对象来说，更推荐使用字面量的方式创建对象（无论性能上还是可读性）。因为你使用 <code>new Object()</code> 的方式创建对象需要通过作用域链一层层找到 <code>Object</code>，但是你使用字面量的方式就没这个问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function Foo() &#123;&#125; &#x2F;&#x2F; function 就是个语法糖，内部等同于 new Function()</span><br><span class=\"line\">let a &#x3D; &#123; b: 1 &#125; &#x2F;&#x2F; 这个字面量内部也是使用了 new Object()</span><br></pre></td></tr></table></figure>\n<p>对于 <code>new</code> 来说，还需要注意下运算符优先级。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function Foo() &#123;</span><br><span class=\"line\">    return this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.getName &#x3D; function () &#123;</span><br><span class=\"line\">    console.log(&#39;1&#39;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Foo.prototype.getName &#x3D; function () &#123;</span><br><span class=\"line\">    console.log(&#39;2&#39;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">new Foo.getName();   &#x2F;&#x2F; -&gt; 1</span><br><span class=\"line\">new Foo().getName(); &#x2F;&#x2F; -&gt; 2</span><br></pre></td></tr></table></figure>\n\n<p>从上图可以看出，<code>new Foo()</code> 的优先级大于 <code>new Foo</code> ，所以对于上述代码来说可以这样划分执行顺序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">new (Foo.getName());</span><br><span class=\"line\">(new Foo()).getName();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对于第一个函数来说，先执行了 <code>Foo.getName()</code> ，所以结果为 1；</li>\n<li>对于后者来说，先执行 <code>new Foo()</code> 产生了一个实例，然后通过原型链找到了 Foo 上的 getName 函数，所以结果为 2。</li>\n</ul>\n"},{"title":"前端常见知识点整理 ---- 原型","date":"2020-01-02T11:22:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 原型\n![yuanxing.png](https://i.loli.net/2020/01/02/7ov8I4YDiBkjJyr.png)\n每个***函数***都有 `prototype` 属性，除了 `Function.prototype.bind()`，该属性指向`原型对象`，简称`原型`，`prototype`原型对象里的`constructor`指向构造函数本身。\n每个***对象***都有 `__proto__` 属性，指向了创建该对象的***构造函数的原型***。其实这个属性指向了 `[[prototype]]`，但是 `[[prototype]]` 是内部属性，我们并不能访问到，所以使用 `_proto_` 来访问。\n对象可以通过 `__proto__` 来寻找不属于该对象的属性，`__proto__` 将对象连接起来组成了`原型链`。\n\n<!-- more -->\n![总结](https://pic2.zhimg.com/v2-e722d5325f7d4215169f1d04296e0f89_r.jpg)\n# `prototype` 原型对象\n## 什么是原型？\n每个函数都具有 `prototype` 属性，它被默认成一个对象，即原型对象\n首先来介绍下 `prototype` 属性。这是一个`显式`原型属性，只有`函数`才拥有该属性。基本上所有函数都有这个属性，但是也有一个例外\n```\n// js代码\nlet fun = Function.prototype.bind()\n```\n如果你以上述方法创建一个函数，那么可以发现这个函数是不具有 prototype 属性的。\n\n## `prototype` 如何产生的\n当我们声明一个函数时，这个属性就被自动创建了。\n``` js\n\nfunction Foo() {}\n```\n并且这个属性的值是一个对象（也就是`原型`），只有一个属性 `constructor`\n`constructor` 对应着构造函数，也就是 `Foo`。\n## 什么是原型链？\n当对象使用属性时，先在自身找，有就直接用，没有就沿着__proto__这条链往上找，直到 Object 原型的位置，有就返回相应的值，没有就返回 underfined。\n\n## `constructor` 构造函数\n### 什么是构造函数？\n任何一个函数，只要被 new 操作符使用，就可以是一个构造函数（构造函数建议以大写开头）\n另外，在 JavaScript 的内置对象中，所有的函数对象都是 Function 构造函数的实例，比如：Object、Array等\n\n`constructor` 是一个公有且不可枚举的属性。一旦我们改变了函数的 `prototype` ，那么新对象就没有这个属性了（当然可以通过原型链取到 `constructor`）。\n\n那么你肯定也有一个疑问，这个属性到底有什么用呢？其实这个属性可以说是一个历史遗留问题，在大部分情况下是没用的，在我的理解里，我认为他有两个作用：\n\n1. 让实例对象知道是什么函数构造了它\n2. 如果想给某些类库中的构造函数增加一些自定义的方法，就可以通过 `xx.constructor.method` 来扩展\n\n## `_proto_`\n这是每个对象都有的`隐式原型属性`，指向了创建该对象的`构造函数`的原型。其实这个属性指向了 `[[prototype]]`，但是 `[[prototype]]` 是内部属性，我们并不能访问到，所以使用 `_proto_` 来访问。\n\n因为在 JS 中是没有类的概念的，为了实现类似继承的方式，通过 `_proto_` 将对象和原型联系起来组成原型链，得以让对象可以访问到不属于自己的属性。\n\n### 实例对象的 `_proto_` 如何产生的\n从上图可知，当我们使用 `new` 操作符时，生成的实例对象拥有了 `_proto_` 属性。\n``` js\nfunction Foo() {}\n// 这个函数是 Function 的实例对象\n// function 就是一个语法糖\n// 内部调用了 new Function(...)\n```\n所以可以说，在 `new` 的过程中，新对象被添加了 `_proto_` 并且链接到构造函数的原型上。\n\n### `new` 的过程\n1. 新生成了一个对象\n2. 链接到原型\n3. 绑定 `this`\n4. 返回新对象\n\n在调用 `new` 的过程中会发生以上四件事情，我们也可以试着来自己实现一个 `new`\n``` js\nfunction Person( name ){ \n this.name = name; \n}; \nPerson.prototype.getName = function(){ \n return this.name; \n};\n\nfunction create() {\n\tlet obj = new Object() // 从 Object.prototype 上克隆一个空的对象\n\tlet Con = [].shift.call(arguments) // 获取外部传入的构造器，此例是 Person \n\tobj.__proto__ = Con.prototype\t// 指向正确的原型,链接到原型\n\tlet result = Con.apply(obj, arguments) // 绑定 this，执行构造函数，借用外部传入的构造器给 obj 设置属性\n\treturn typeof result === 'object' ? result : obj // 确保 new 出来的是个对象\n}\n\ncreate(Person,'lixg')\n```\n对于实例对象来说，都是通过 `new` 产生的，无论是 `function Foo()` 还是 `let a = { b : 1 }` 。\n\n对于创建一个对象来说，更推荐使用字面量的方式创建对象。因为你使用 `new Object()` 的方式创建对象需要通过作用域链一层层找到 `Object` ，但是你使用字面量的方式就没这个问题。\n\n``` js\nfunction Foo() {} // function 就是个语法糖,内部等同于 new Function()\nlet a = { b: 1 } // 这个字面量内部也是使用了 new Object()\n```\n\n## Function.__proto__ === Function.prototype\n对于对象来说，`xx.__proto__.contrcutor` 是该对象的构造函数，但是在图中我们可以发现 `Function.__proto__` === `Function.prototype`，难道这代表着 `Function` 自己产生了自己?\n\n答案肯定是否认的，要说明这个问题我们先从 `Object` 说起。\n\n从图中我们可以发现，所有对象都可以通过原型链最终找到 `Object.prototype` ，虽然 `Object.prototype` 也是一个对象，但是这个对象却不是 `Object` 创造的，而是引擎自己创建了 `Object.prototype` 。所以可以这样说，所有实例都是对象，但是对象不一定都是实例。\n\n接下来我们来看 `Function.prototype` 这个特殊的对象，如果你在浏览器将这个对象打印出来，会发现这个对象其实是一个函数。\n\n我们知道函数都是通过 `new Function()` 生成的，难道 `Function.prototype` 也是通过 `new Function()` 产生的吗？答案也是否定的，这个函数也是引擎自己创建的。首先引擎创建了 `Object.prototype` ，然后创建了 `Function.prototype` ，并且通过 `__proto__` 将两者联系了起来。这里也很好的解释了上面的一个问题，为什么 `let fun = Function.prototype.bind()` 没有 prototype 属性。因为 `Function.prototype` 是引擎创建出来的对象，引擎认为不需要给这个对象添加 `prototype` 属性。\n\n***所以我们又可以得出一个结论，不是所有函数都是 `new Function()` 产生的。***\n有了 `Function.prototype` 以后才有了 `function Function()` ，然后其他的构造函数都是 `function Function()` 生成的。\n\n现在可以来解释 `Function.__proto__ === Function.prototype` 这个问题了。因为先有的 `Function.prototype` 以后才有的 `function Function()` ，所以也就不存在鸡生蛋蛋生鸡的悖论问题了。对于为什么 `Function.__proto__` 会等于 `Function.prototype` ，个人的理解是：其他所有的构造函数都可以通过原型链找到 `Function.prototype` ，并且 `function Function()` 本质也是一个函数，为了不产生混乱就将 `function Function()` 的 `__proto__` 联系到了 `Function.prototype` 上。\n\n## 总结\n- `Object` 是所有对象的爸爸，所有对象都可以通过 `__proto__` 找到它\n- `Function` 是所有函数的爸爸，所有函数都可以通过 `__proto__` 找到它\n- `Function.prototype` 和 `Object.prototype` 是两个特殊的对象，他们由引擎来创建\n- 除了以上两个特殊对象，其他对象都是通过构造器 `new` 出来的\n- 函数的 `prototype` 是一个对象，也就是原型\n- 对象的 `__proto__` 指向原型， `__proto__` 将对象和原型连接起来组成了原型链\n![总结](https://img2018.cnblogs.com/blog/1731684/201907/1731684-20190704181143591-516719297.png)\n\n## 归纳\n`ES` 把对象定义为：“无序属性的集合，其属性可以包含基本值，对象和函数”。\n严格来讲，这就相当于说对象是一组没有特定顺序的值。ES 中的构造函数可以用来创建特定类型的对象，用来在创建对象时初始化对象。它的特点是，一般为大写字母开头，使用 `new` 操作符来实例化对象，比如：\n\n``` js\nfunction Person() {}\nvar person = new Person();\nperson.name = \"Kevin\";\nconsole.log(person.name); // Kevin\n```\n\n`Person` 就是构造函数， `person` 就是对象。对于对象而言，每个 `JS` 对象一定对应一个原型对象，并从原型对象继承属性和方法。对象 `__proto__` 属性的值就是它所对应的原型对象。对象的 `__proto__` 指向自己构造函数的 `prototype` 。所以对象的原型链就是 `obj.__proto__.proto__....` 。对于函数而言，只有函数才有 `prototype` 属性， `Person.prototype`  是一个对象，并且有两个属性， 一个是 `constructor` 指向其构造函数 `Person` ， 一个是 `__proto__`  属性：是一个对象，指向上一层的原型。原型链的尽头是 `Object.prototype` 。所有对象均从 `Object.prototype` 继承属性。`Function.prototype` 和 `Function.__proto__` 为同一对象。`Object/Array/String` 等等构造函数本质上和 `Function` 一样，均继承于 `Function.prototype` 。`Function.prototype` 直接继承 `Object.prototype` 。这里的 `Object` 和 `Function` 有点鸡和蛋的问题，总结：先有 `Object.prototype`（原型链顶端），`Function.prototype` 继承 `Object.prototype` 而产生，最后，`Function` 和 `Object` 和其它构造函数继承 `Function.prototype` 而产生。属性查找时，先在对象自己上找，找不到才会一步步根据原型链往上找。\n![继承](https://pic2.zhimg.com/v2-2e8ec703287854d174483ba5f9f937cf_1200x500.jpg)\n## 关联阅读\n[https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n[说说原型（prototype）、原型链和原型继承](https://zhuanlan.zhihu.com/p/35790971)\n\n## 扩展阅读\n[继承](https://lixuguang.github.io/2020/01/13/FE-guide-inherit2/)","source":"_posts/FE-guide-prototype.md","raw":"---\ntitle: 前端常见知识点整理 ---- 原型\ndate: 2020-01-02 19:22:22\ncategories: \n\t- 前端技术\n\t- 前端常见知识点整理\ntags: \n\t- 面试\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 原型\n![yuanxing.png](https://i.loli.net/2020/01/02/7ov8I4YDiBkjJyr.png)\n每个***函数***都有 `prototype` 属性，除了 `Function.prototype.bind()`，该属性指向`原型对象`，简称`原型`，`prototype`原型对象里的`constructor`指向构造函数本身。\n每个***对象***都有 `__proto__` 属性，指向了创建该对象的***构造函数的原型***。其实这个属性指向了 `[[prototype]]`，但是 `[[prototype]]` 是内部属性，我们并不能访问到，所以使用 `_proto_` 来访问。\n对象可以通过 `__proto__` 来寻找不属于该对象的属性，`__proto__` 将对象连接起来组成了`原型链`。\n\n<!-- more -->\n![总结](https://pic2.zhimg.com/v2-e722d5325f7d4215169f1d04296e0f89_r.jpg)\n# `prototype` 原型对象\n## 什么是原型？\n每个函数都具有 `prototype` 属性，它被默认成一个对象，即原型对象\n首先来介绍下 `prototype` 属性。这是一个`显式`原型属性，只有`函数`才拥有该属性。基本上所有函数都有这个属性，但是也有一个例外\n```\n// js代码\nlet fun = Function.prototype.bind()\n```\n如果你以上述方法创建一个函数，那么可以发现这个函数是不具有 prototype 属性的。\n\n## `prototype` 如何产生的\n当我们声明一个函数时，这个属性就被自动创建了。\n``` js\n\nfunction Foo() {}\n```\n并且这个属性的值是一个对象（也就是`原型`），只有一个属性 `constructor`\n`constructor` 对应着构造函数，也就是 `Foo`。\n## 什么是原型链？\n当对象使用属性时，先在自身找，有就直接用，没有就沿着__proto__这条链往上找，直到 Object 原型的位置，有就返回相应的值，没有就返回 underfined。\n\n## `constructor` 构造函数\n### 什么是构造函数？\n任何一个函数，只要被 new 操作符使用，就可以是一个构造函数（构造函数建议以大写开头）\n另外，在 JavaScript 的内置对象中，所有的函数对象都是 Function 构造函数的实例，比如：Object、Array等\n\n`constructor` 是一个公有且不可枚举的属性。一旦我们改变了函数的 `prototype` ，那么新对象就没有这个属性了（当然可以通过原型链取到 `constructor`）。\n\n那么你肯定也有一个疑问，这个属性到底有什么用呢？其实这个属性可以说是一个历史遗留问题，在大部分情况下是没用的，在我的理解里，我认为他有两个作用：\n\n1. 让实例对象知道是什么函数构造了它\n2. 如果想给某些类库中的构造函数增加一些自定义的方法，就可以通过 `xx.constructor.method` 来扩展\n\n## `_proto_`\n这是每个对象都有的`隐式原型属性`，指向了创建该对象的`构造函数`的原型。其实这个属性指向了 `[[prototype]]`，但是 `[[prototype]]` 是内部属性，我们并不能访问到，所以使用 `_proto_` 来访问。\n\n因为在 JS 中是没有类的概念的，为了实现类似继承的方式，通过 `_proto_` 将对象和原型联系起来组成原型链，得以让对象可以访问到不属于自己的属性。\n\n### 实例对象的 `_proto_` 如何产生的\n从上图可知，当我们使用 `new` 操作符时，生成的实例对象拥有了 `_proto_` 属性。\n``` js\nfunction Foo() {}\n// 这个函数是 Function 的实例对象\n// function 就是一个语法糖\n// 内部调用了 new Function(...)\n```\n所以可以说，在 `new` 的过程中，新对象被添加了 `_proto_` 并且链接到构造函数的原型上。\n\n### `new` 的过程\n1. 新生成了一个对象\n2. 链接到原型\n3. 绑定 `this`\n4. 返回新对象\n\n在调用 `new` 的过程中会发生以上四件事情，我们也可以试着来自己实现一个 `new`\n``` js\nfunction Person( name ){ \n this.name = name; \n}; \nPerson.prototype.getName = function(){ \n return this.name; \n};\n\nfunction create() {\n\tlet obj = new Object() // 从 Object.prototype 上克隆一个空的对象\n\tlet Con = [].shift.call(arguments) // 获取外部传入的构造器，此例是 Person \n\tobj.__proto__ = Con.prototype\t// 指向正确的原型,链接到原型\n\tlet result = Con.apply(obj, arguments) // 绑定 this，执行构造函数，借用外部传入的构造器给 obj 设置属性\n\treturn typeof result === 'object' ? result : obj // 确保 new 出来的是个对象\n}\n\ncreate(Person,'lixg')\n```\n对于实例对象来说，都是通过 `new` 产生的，无论是 `function Foo()` 还是 `let a = { b : 1 }` 。\n\n对于创建一个对象来说，更推荐使用字面量的方式创建对象。因为你使用 `new Object()` 的方式创建对象需要通过作用域链一层层找到 `Object` ，但是你使用字面量的方式就没这个问题。\n\n``` js\nfunction Foo() {} // function 就是个语法糖,内部等同于 new Function()\nlet a = { b: 1 } // 这个字面量内部也是使用了 new Object()\n```\n\n## Function.__proto__ === Function.prototype\n对于对象来说，`xx.__proto__.contrcutor` 是该对象的构造函数，但是在图中我们可以发现 `Function.__proto__` === `Function.prototype`，难道这代表着 `Function` 自己产生了自己?\n\n答案肯定是否认的，要说明这个问题我们先从 `Object` 说起。\n\n从图中我们可以发现，所有对象都可以通过原型链最终找到 `Object.prototype` ，虽然 `Object.prototype` 也是一个对象，但是这个对象却不是 `Object` 创造的，而是引擎自己创建了 `Object.prototype` 。所以可以这样说，所有实例都是对象，但是对象不一定都是实例。\n\n接下来我们来看 `Function.prototype` 这个特殊的对象，如果你在浏览器将这个对象打印出来，会发现这个对象其实是一个函数。\n\n我们知道函数都是通过 `new Function()` 生成的，难道 `Function.prototype` 也是通过 `new Function()` 产生的吗？答案也是否定的，这个函数也是引擎自己创建的。首先引擎创建了 `Object.prototype` ，然后创建了 `Function.prototype` ，并且通过 `__proto__` 将两者联系了起来。这里也很好的解释了上面的一个问题，为什么 `let fun = Function.prototype.bind()` 没有 prototype 属性。因为 `Function.prototype` 是引擎创建出来的对象，引擎认为不需要给这个对象添加 `prototype` 属性。\n\n***所以我们又可以得出一个结论，不是所有函数都是 `new Function()` 产生的。***\n有了 `Function.prototype` 以后才有了 `function Function()` ，然后其他的构造函数都是 `function Function()` 生成的。\n\n现在可以来解释 `Function.__proto__ === Function.prototype` 这个问题了。因为先有的 `Function.prototype` 以后才有的 `function Function()` ，所以也就不存在鸡生蛋蛋生鸡的悖论问题了。对于为什么 `Function.__proto__` 会等于 `Function.prototype` ，个人的理解是：其他所有的构造函数都可以通过原型链找到 `Function.prototype` ，并且 `function Function()` 本质也是一个函数，为了不产生混乱就将 `function Function()` 的 `__proto__` 联系到了 `Function.prototype` 上。\n\n## 总结\n- `Object` 是所有对象的爸爸，所有对象都可以通过 `__proto__` 找到它\n- `Function` 是所有函数的爸爸，所有函数都可以通过 `__proto__` 找到它\n- `Function.prototype` 和 `Object.prototype` 是两个特殊的对象，他们由引擎来创建\n- 除了以上两个特殊对象，其他对象都是通过构造器 `new` 出来的\n- 函数的 `prototype` 是一个对象，也就是原型\n- 对象的 `__proto__` 指向原型， `__proto__` 将对象和原型连接起来组成了原型链\n![总结](https://img2018.cnblogs.com/blog/1731684/201907/1731684-20190704181143591-516719297.png)\n\n## 归纳\n`ES` 把对象定义为：“无序属性的集合，其属性可以包含基本值，对象和函数”。\n严格来讲，这就相当于说对象是一组没有特定顺序的值。ES 中的构造函数可以用来创建特定类型的对象，用来在创建对象时初始化对象。它的特点是，一般为大写字母开头，使用 `new` 操作符来实例化对象，比如：\n\n``` js\nfunction Person() {}\nvar person = new Person();\nperson.name = \"Kevin\";\nconsole.log(person.name); // Kevin\n```\n\n`Person` 就是构造函数， `person` 就是对象。对于对象而言，每个 `JS` 对象一定对应一个原型对象，并从原型对象继承属性和方法。对象 `__proto__` 属性的值就是它所对应的原型对象。对象的 `__proto__` 指向自己构造函数的 `prototype` 。所以对象的原型链就是 `obj.__proto__.proto__....` 。对于函数而言，只有函数才有 `prototype` 属性， `Person.prototype`  是一个对象，并且有两个属性， 一个是 `constructor` 指向其构造函数 `Person` ， 一个是 `__proto__`  属性：是一个对象，指向上一层的原型。原型链的尽头是 `Object.prototype` 。所有对象均从 `Object.prototype` 继承属性。`Function.prototype` 和 `Function.__proto__` 为同一对象。`Object/Array/String` 等等构造函数本质上和 `Function` 一样，均继承于 `Function.prototype` 。`Function.prototype` 直接继承 `Object.prototype` 。这里的 `Object` 和 `Function` 有点鸡和蛋的问题，总结：先有 `Object.prototype`（原型链顶端），`Function.prototype` 继承 `Object.prototype` 而产生，最后，`Function` 和 `Object` 和其它构造函数继承 `Function.prototype` 而产生。属性查找时，先在对象自己上找，找不到才会一步步根据原型链往上找。\n![继承](https://pic2.zhimg.com/v2-2e8ec703287854d174483ba5f9f937cf_1200x500.jpg)\n## 关联阅读\n[https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n[说说原型（prototype）、原型链和原型继承](https://zhuanlan.zhihu.com/p/35790971)\n\n## 扩展阅读\n[继承](https://lixuguang.github.io/2020/01/13/FE-guide-inherit2/)","slug":"FE-guide-prototype","published":1,"updated":"2020-04-02T03:20:12.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grxy0020ooa632s0a8j8","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h1><p><img src=\"https://i.loli.net/2020/01/02/7ov8I4YDiBkjJyr.png\" alt=\"yuanxing.png\"><br>每个<strong><em>函数</em></strong>都有 <code>prototype</code> 属性，除了 <code>Function.prototype.bind()</code>，该属性指向<code>原型对象</code>，简称<code>原型</code>，<code>prototype</code>原型对象里的<code>constructor</code>指向构造函数本身。<br>每个<strong><em>对象</em></strong>都有 <code>__proto__</code> 属性，指向了创建该对象的<strong><em>构造函数的原型</em></strong>。其实这个属性指向了 <code>[[prototype]]</code>，但是 <code>[[prototype]]</code> 是内部属性，我们并不能访问到，所以使用 <code>_proto_</code> 来访问。<br>对象可以通过 <code>__proto__</code> 来寻找不属于该对象的属性，<code>__proto__</code> 将对象连接起来组成了<code>原型链</code>。</p>\n<a id=\"more\"></a>\n<p><img src=\"https://pic2.zhimg.com/v2-e722d5325f7d4215169f1d04296e0f89_r.jpg\" alt=\"总结\"></p>\n<h1 id=\"prototype-原型对象\"><a href=\"#prototype-原型对象\" class=\"headerlink\" title=\"prototype 原型对象\"></a><code>prototype</code> 原型对象</h1><h2 id=\"什么是原型？\"><a href=\"#什么是原型？\" class=\"headerlink\" title=\"什么是原型？\"></a>什么是原型？</h2><p>每个函数都具有 <code>prototype</code> 属性，它被默认成一个对象，即原型对象<br>首先来介绍下 <code>prototype</code> 属性。这是一个<code>显式</code>原型属性，只有<code>函数</code>才拥有该属性。基本上所有函数都有这个属性，但是也有一个例外</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">let fun &#x3D; Function.prototype.bind()</span><br></pre></td></tr></table></figure>\n<p>如果你以上述方法创建一个函数，那么可以发现这个函数是不具有 prototype 属性的。</p>\n<h2 id=\"prototype-如何产生的\"><a href=\"#prototype-如何产生的\" class=\"headerlink\" title=\"prototype 如何产生的\"></a><code>prototype</code> 如何产生的</h2><p>当我们声明一个函数时，这个属性就被自动创建了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>并且这个属性的值是一个对象（也就是<code>原型</code>），只有一个属性 <code>constructor</code><br><code>constructor</code> 对应着构造函数，也就是 <code>Foo</code>。</p>\n<h2 id=\"什么是原型链？\"><a href=\"#什么是原型链？\" class=\"headerlink\" title=\"什么是原型链？\"></a>什么是原型链？</h2><p>当对象使用属性时，先在自身找，有就直接用，没有就沿着<strong>proto</strong>这条链往上找，直到 Object 原型的位置，有就返回相应的值，没有就返回 underfined。</p>\n<h2 id=\"constructor-构造函数\"><a href=\"#constructor-构造函数\" class=\"headerlink\" title=\"constructor 构造函数\"></a><code>constructor</code> 构造函数</h2><h3 id=\"什么是构造函数？\"><a href=\"#什么是构造函数？\" class=\"headerlink\" title=\"什么是构造函数？\"></a>什么是构造函数？</h3><p>任何一个函数，只要被 new 操作符使用，就可以是一个构造函数（构造函数建议以大写开头）<br>另外，在 JavaScript 的内置对象中，所有的函数对象都是 Function 构造函数的实例，比如：Object、Array等</p>\n<p><code>constructor</code> 是一个公有且不可枚举的属性。一旦我们改变了函数的 <code>prototype</code> ，那么新对象就没有这个属性了（当然可以通过原型链取到 <code>constructor</code>）。</p>\n<p>那么你肯定也有一个疑问，这个属性到底有什么用呢？其实这个属性可以说是一个历史遗留问题，在大部分情况下是没用的，在我的理解里，我认为他有两个作用：</p>\n<ol>\n<li>让实例对象知道是什么函数构造了它</li>\n<li>如果想给某些类库中的构造函数增加一些自定义的方法，就可以通过 <code>xx.constructor.method</code> 来扩展</li>\n</ol>\n<h2 id=\"proto\"><a href=\"#proto\" class=\"headerlink\" title=\"_proto_\"></a><code>_proto_</code></h2><p>这是每个对象都有的<code>隐式原型属性</code>，指向了创建该对象的<code>构造函数</code>的原型。其实这个属性指向了 <code>[[prototype]]</code>，但是 <code>[[prototype]]</code> 是内部属性，我们并不能访问到，所以使用 <code>_proto_</code> 来访问。</p>\n<p>因为在 JS 中是没有类的概念的，为了实现类似继承的方式，通过 <code>_proto_</code> 将对象和原型联系起来组成原型链，得以让对象可以访问到不属于自己的属性。</p>\n<h3 id=\"实例对象的-proto-如何产生的\"><a href=\"#实例对象的-proto-如何产生的\" class=\"headerlink\" title=\"实例对象的 _proto_ 如何产生的\"></a>实例对象的 <code>_proto_</code> 如何产生的</h3><p>从上图可知，当我们使用 <code>new</code> 操作符时，生成的实例对象拥有了 <code>_proto_</code> 属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这个函数是 Function 的实例对象</span></span><br><span class=\"line\"><span class=\"comment\">// function 就是一个语法糖</span></span><br><span class=\"line\"><span class=\"comment\">// 内部调用了 new Function(...)</span></span><br></pre></td></tr></table></figure>\n<p>所以可以说，在 <code>new</code> 的过程中，新对象被添加了 <code>_proto_</code> 并且链接到构造函数的原型上。</p>\n<h3 id=\"new-的过程\"><a href=\"#new-的过程\" class=\"headerlink\" title=\"new 的过程\"></a><code>new</code> 的过程</h3><ol>\n<li>新生成了一个对象</li>\n<li>链接到原型</li>\n<li>绑定 <code>this</code></li>\n<li>返回新对象</li>\n</ol>\n<p>在调用 <code>new</code> 的过程中会发生以上四件事情，我们也可以试着来自己实现一个 <code>new</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"> name </span>)</span>&#123; </span><br><span class=\"line\"> <span class=\"keyword\">this</span>.name = name; </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\">Person.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>() <span class=\"comment\">// 从 Object.prototype 上克隆一个空的对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> Con = [].shift.call(<span class=\"built_in\">arguments</span>) <span class=\"comment\">// 获取外部传入的构造器，此例是 Person </span></span><br><span class=\"line\">\tobj.__proto__ = Con.prototype\t<span class=\"comment\">// 指向正确的原型,链接到原型</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = Con.apply(obj, <span class=\"built_in\">arguments</span>) <span class=\"comment\">// 绑定 this，执行构造函数，借用外部传入的构造器给 obj 设置属性</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> result === <span class=\"string\">'object'</span> ? result : obj <span class=\"comment\">// 确保 new 出来的是个对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">create(Person,<span class=\"string\">'lixg'</span>)</span><br></pre></td></tr></table></figure>\n<p>对于实例对象来说，都是通过 <code>new</code> 产生的，无论是 <code>function Foo()</code> 还是 <code>let a = { b : 1 }</code> 。</p>\n<p>对于创建一个对象来说，更推荐使用字面量的方式创建对象。因为你使用 <code>new Object()</code> 的方式创建对象需要通过作用域链一层层找到 <code>Object</code> ，但是你使用字面量的方式就没这个问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">// function 就是个语法糖,内部等同于 new Function()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123; <span class=\"attr\">b</span>: <span class=\"number\">1</span> &#125; <span class=\"comment\">// 这个字面量内部也是使用了 new Object()</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Function-proto-Function-prototype\"><a href=\"#Function-proto-Function-prototype\" class=\"headerlink\" title=\"Function.proto === Function.prototype\"></a>Function.<strong>proto</strong> === Function.prototype</h2><p>对于对象来说，<code>xx.__proto__.contrcutor</code> 是该对象的构造函数，但是在图中我们可以发现 <code>Function.__proto__</code> === <code>Function.prototype</code>，难道这代表着 <code>Function</code> 自己产生了自己?</p>\n<p>答案肯定是否认的，要说明这个问题我们先从 <code>Object</code> 说起。</p>\n<p>从图中我们可以发现，所有对象都可以通过原型链最终找到 <code>Object.prototype</code> ，虽然 <code>Object.prototype</code> 也是一个对象，但是这个对象却不是 <code>Object</code> 创造的，而是引擎自己创建了 <code>Object.prototype</code> 。所以可以这样说，所有实例都是对象，但是对象不一定都是实例。</p>\n<p>接下来我们来看 <code>Function.prototype</code> 这个特殊的对象，如果你在浏览器将这个对象打印出来，会发现这个对象其实是一个函数。</p>\n<p>我们知道函数都是通过 <code>new Function()</code> 生成的，难道 <code>Function.prototype</code> 也是通过 <code>new Function()</code> 产生的吗？答案也是否定的，这个函数也是引擎自己创建的。首先引擎创建了 <code>Object.prototype</code> ，然后创建了 <code>Function.prototype</code> ，并且通过 <code>__proto__</code> 将两者联系了起来。这里也很好的解释了上面的一个问题，为什么 <code>let fun = Function.prototype.bind()</code> 没有 prototype 属性。因为 <code>Function.prototype</code> 是引擎创建出来的对象，引擎认为不需要给这个对象添加 <code>prototype</code> 属性。</p>\n<p><strong><em>所以我们又可以得出一个结论，不是所有函数都是 <code>new Function()</code> 产生的。</em></strong><br>有了 <code>Function.prototype</code> 以后才有了 <code>function Function()</code> ，然后其他的构造函数都是 <code>function Function()</code> 生成的。</p>\n<p>现在可以来解释 <code>Function.__proto__ === Function.prototype</code> 这个问题了。因为先有的 <code>Function.prototype</code> 以后才有的 <code>function Function()</code> ，所以也就不存在鸡生蛋蛋生鸡的悖论问题了。对于为什么 <code>Function.__proto__</code> 会等于 <code>Function.prototype</code> ，个人的理解是：其他所有的构造函数都可以通过原型链找到 <code>Function.prototype</code> ，并且 <code>function Function()</code> 本质也是一个函数，为了不产生混乱就将 <code>function Function()</code> 的 <code>__proto__</code> 联系到了 <code>Function.prototype</code> 上。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><code>Object</code> 是所有对象的爸爸，所有对象都可以通过 <code>__proto__</code> 找到它</li>\n<li><code>Function</code> 是所有函数的爸爸，所有函数都可以通过 <code>__proto__</code> 找到它</li>\n<li><code>Function.prototype</code> 和 <code>Object.prototype</code> 是两个特殊的对象，他们由引擎来创建</li>\n<li>除了以上两个特殊对象，其他对象都是通过构造器 <code>new</code> 出来的</li>\n<li>函数的 <code>prototype</code> 是一个对象，也就是原型</li>\n<li>对象的 <code>__proto__</code> 指向原型， <code>__proto__</code> 将对象和原型连接起来组成了原型链<br><img src=\"https://img2018.cnblogs.com/blog/1731684/201907/1731684-20190704181143591-516719297.png\" alt=\"总结\"></li>\n</ul>\n<h2 id=\"归纳\"><a href=\"#归纳\" class=\"headerlink\" title=\"归纳\"></a>归纳</h2><p><code>ES</code> 把对象定义为：“无序属性的集合，其属性可以包含基本值，对象和函数”。<br>严格来讲，这就相当于说对象是一组没有特定顺序的值。ES 中的构造函数可以用来创建特定类型的对象，用来在创建对象时初始化对象。它的特点是，一般为大写字母开头，使用 <code>new</code> 操作符来实例化对象，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">person.name = <span class=\"string\">\"Kevin\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name); <span class=\"comment\">// Kevin</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Person</code> 就是构造函数， <code>person</code> 就是对象。对于对象而言，每个 <code>JS</code> 对象一定对应一个原型对象，并从原型对象继承属性和方法。对象 <code>__proto__</code> 属性的值就是它所对应的原型对象。对象的 <code>__proto__</code> 指向自己构造函数的 <code>prototype</code> 。所以对象的原型链就是 <code>obj.__proto__.proto__....</code> 。对于函数而言，只有函数才有 <code>prototype</code> 属性， <code>Person.prototype</code>  是一个对象，并且有两个属性， 一个是 <code>constructor</code> 指向其构造函数 <code>Person</code> ， 一个是 <code>__proto__</code>  属性：是一个对象，指向上一层的原型。原型链的尽头是 <code>Object.prototype</code> 。所有对象均从 <code>Object.prototype</code> 继承属性。<code>Function.prototype</code> 和 <code>Function.__proto__</code> 为同一对象。<code>Object/Array/String</code> 等等构造函数本质上和 <code>Function</code> 一样，均继承于 <code>Function.prototype</code> 。<code>Function.prototype</code> 直接继承 <code>Object.prototype</code> 。这里的 <code>Object</code> 和 <code>Function</code> 有点鸡和蛋的问题，总结：先有 <code>Object.prototype</code>（原型链顶端），<code>Function.prototype</code> 继承 <code>Object.prototype</code> 而产生，最后，<code>Function</code> 和 <code>Object</code> 和其它构造函数继承 <code>Function.prototype</code> 而产生。属性查找时，先在对象自己上找，找不到才会一步步根据原型链往上找。<br><img src=\"https://pic2.zhimg.com/v2-2e8ec703287854d174483ba5f9f937cf_1200x500.jpg\" alt=\"继承\"></p>\n<h2 id=\"关联阅读\"><a href=\"#关联阅读\" class=\"headerlink\" title=\"关联阅读\"></a>关联阅读</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain</a><br><a href=\"https://zhuanlan.zhihu.com/p/35790971\" target=\"_blank\" rel=\"noopener\">说说原型（prototype）、原型链和原型继承</a></p>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><p><a href=\"https://lixuguang.github.io/2020/01/13/FE-guide-inherit2/\">继承</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h1><p><img src=\"https://i.loli.net/2020/01/02/7ov8I4YDiBkjJyr.png\" alt=\"yuanxing.png\"><br>每个<strong><em>函数</em></strong>都有 <code>prototype</code> 属性，除了 <code>Function.prototype.bind()</code>，该属性指向<code>原型对象</code>，简称<code>原型</code>，<code>prototype</code>原型对象里的<code>constructor</code>指向构造函数本身。<br>每个<strong><em>对象</em></strong>都有 <code>__proto__</code> 属性，指向了创建该对象的<strong><em>构造函数的原型</em></strong>。其实这个属性指向了 <code>[[prototype]]</code>，但是 <code>[[prototype]]</code> 是内部属性，我们并不能访问到，所以使用 <code>_proto_</code> 来访问。<br>对象可以通过 <code>__proto__</code> 来寻找不属于该对象的属性，<code>__proto__</code> 将对象连接起来组成了<code>原型链</code>。</p>","more":"<p><img src=\"https://pic2.zhimg.com/v2-e722d5325f7d4215169f1d04296e0f89_r.jpg\" alt=\"总结\"></p>\n<h1 id=\"prototype-原型对象\"><a href=\"#prototype-原型对象\" class=\"headerlink\" title=\"prototype 原型对象\"></a><code>prototype</code> 原型对象</h1><h2 id=\"什么是原型？\"><a href=\"#什么是原型？\" class=\"headerlink\" title=\"什么是原型？\"></a>什么是原型？</h2><p>每个函数都具有 <code>prototype</code> 属性，它被默认成一个对象，即原型对象<br>首先来介绍下 <code>prototype</code> 属性。这是一个<code>显式</code>原型属性，只有<code>函数</code>才拥有该属性。基本上所有函数都有这个属性，但是也有一个例外</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">let fun &#x3D; Function.prototype.bind()</span><br></pre></td></tr></table></figure>\n<p>如果你以上述方法创建一个函数，那么可以发现这个函数是不具有 prototype 属性的。</p>\n<h2 id=\"prototype-如何产生的\"><a href=\"#prototype-如何产生的\" class=\"headerlink\" title=\"prototype 如何产生的\"></a><code>prototype</code> 如何产生的</h2><p>当我们声明一个函数时，这个属性就被自动创建了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>并且这个属性的值是一个对象（也就是<code>原型</code>），只有一个属性 <code>constructor</code><br><code>constructor</code> 对应着构造函数，也就是 <code>Foo</code>。</p>\n<h2 id=\"什么是原型链？\"><a href=\"#什么是原型链？\" class=\"headerlink\" title=\"什么是原型链？\"></a>什么是原型链？</h2><p>当对象使用属性时，先在自身找，有就直接用，没有就沿着<strong>proto</strong>这条链往上找，直到 Object 原型的位置，有就返回相应的值，没有就返回 underfined。</p>\n<h2 id=\"constructor-构造函数\"><a href=\"#constructor-构造函数\" class=\"headerlink\" title=\"constructor 构造函数\"></a><code>constructor</code> 构造函数</h2><h3 id=\"什么是构造函数？\"><a href=\"#什么是构造函数？\" class=\"headerlink\" title=\"什么是构造函数？\"></a>什么是构造函数？</h3><p>任何一个函数，只要被 new 操作符使用，就可以是一个构造函数（构造函数建议以大写开头）<br>另外，在 JavaScript 的内置对象中，所有的函数对象都是 Function 构造函数的实例，比如：Object、Array等</p>\n<p><code>constructor</code> 是一个公有且不可枚举的属性。一旦我们改变了函数的 <code>prototype</code> ，那么新对象就没有这个属性了（当然可以通过原型链取到 <code>constructor</code>）。</p>\n<p>那么你肯定也有一个疑问，这个属性到底有什么用呢？其实这个属性可以说是一个历史遗留问题，在大部分情况下是没用的，在我的理解里，我认为他有两个作用：</p>\n<ol>\n<li>让实例对象知道是什么函数构造了它</li>\n<li>如果想给某些类库中的构造函数增加一些自定义的方法，就可以通过 <code>xx.constructor.method</code> 来扩展</li>\n</ol>\n<h2 id=\"proto\"><a href=\"#proto\" class=\"headerlink\" title=\"_proto_\"></a><code>_proto_</code></h2><p>这是每个对象都有的<code>隐式原型属性</code>，指向了创建该对象的<code>构造函数</code>的原型。其实这个属性指向了 <code>[[prototype]]</code>，但是 <code>[[prototype]]</code> 是内部属性，我们并不能访问到，所以使用 <code>_proto_</code> 来访问。</p>\n<p>因为在 JS 中是没有类的概念的，为了实现类似继承的方式，通过 <code>_proto_</code> 将对象和原型联系起来组成原型链，得以让对象可以访问到不属于自己的属性。</p>\n<h3 id=\"实例对象的-proto-如何产生的\"><a href=\"#实例对象的-proto-如何产生的\" class=\"headerlink\" title=\"实例对象的 _proto_ 如何产生的\"></a>实例对象的 <code>_proto_</code> 如何产生的</h3><p>从上图可知，当我们使用 <code>new</code> 操作符时，生成的实例对象拥有了 <code>_proto_</code> 属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这个函数是 Function 的实例对象</span></span><br><span class=\"line\"><span class=\"comment\">// function 就是一个语法糖</span></span><br><span class=\"line\"><span class=\"comment\">// 内部调用了 new Function(...)</span></span><br></pre></td></tr></table></figure>\n<p>所以可以说，在 <code>new</code> 的过程中，新对象被添加了 <code>_proto_</code> 并且链接到构造函数的原型上。</p>\n<h3 id=\"new-的过程\"><a href=\"#new-的过程\" class=\"headerlink\" title=\"new 的过程\"></a><code>new</code> 的过程</h3><ol>\n<li>新生成了一个对象</li>\n<li>链接到原型</li>\n<li>绑定 <code>this</code></li>\n<li>返回新对象</li>\n</ol>\n<p>在调用 <code>new</code> 的过程中会发生以上四件事情，我们也可以试着来自己实现一个 <code>new</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"> name </span>)</span>&#123; </span><br><span class=\"line\"> <span class=\"keyword\">this</span>.name = name; </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\">Person.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>() <span class=\"comment\">// 从 Object.prototype 上克隆一个空的对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> Con = [].shift.call(<span class=\"built_in\">arguments</span>) <span class=\"comment\">// 获取外部传入的构造器，此例是 Person </span></span><br><span class=\"line\">\tobj.__proto__ = Con.prototype\t<span class=\"comment\">// 指向正确的原型,链接到原型</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = Con.apply(obj, <span class=\"built_in\">arguments</span>) <span class=\"comment\">// 绑定 this，执行构造函数，借用外部传入的构造器给 obj 设置属性</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> result === <span class=\"string\">'object'</span> ? result : obj <span class=\"comment\">// 确保 new 出来的是个对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">create(Person,<span class=\"string\">'lixg'</span>)</span><br></pre></td></tr></table></figure>\n<p>对于实例对象来说，都是通过 <code>new</code> 产生的，无论是 <code>function Foo()</code> 还是 <code>let a = { b : 1 }</code> 。</p>\n<p>对于创建一个对象来说，更推荐使用字面量的方式创建对象。因为你使用 <code>new Object()</code> 的方式创建对象需要通过作用域链一层层找到 <code>Object</code> ，但是你使用字面量的方式就没这个问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">// function 就是个语法糖,内部等同于 new Function()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123; <span class=\"attr\">b</span>: <span class=\"number\">1</span> &#125; <span class=\"comment\">// 这个字面量内部也是使用了 new Object()</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Function-proto-Function-prototype\"><a href=\"#Function-proto-Function-prototype\" class=\"headerlink\" title=\"Function.proto === Function.prototype\"></a>Function.<strong>proto</strong> === Function.prototype</h2><p>对于对象来说，<code>xx.__proto__.contrcutor</code> 是该对象的构造函数，但是在图中我们可以发现 <code>Function.__proto__</code> === <code>Function.prototype</code>，难道这代表着 <code>Function</code> 自己产生了自己?</p>\n<p>答案肯定是否认的，要说明这个问题我们先从 <code>Object</code> 说起。</p>\n<p>从图中我们可以发现，所有对象都可以通过原型链最终找到 <code>Object.prototype</code> ，虽然 <code>Object.prototype</code> 也是一个对象，但是这个对象却不是 <code>Object</code> 创造的，而是引擎自己创建了 <code>Object.prototype</code> 。所以可以这样说，所有实例都是对象，但是对象不一定都是实例。</p>\n<p>接下来我们来看 <code>Function.prototype</code> 这个特殊的对象，如果你在浏览器将这个对象打印出来，会发现这个对象其实是一个函数。</p>\n<p>我们知道函数都是通过 <code>new Function()</code> 生成的，难道 <code>Function.prototype</code> 也是通过 <code>new Function()</code> 产生的吗？答案也是否定的，这个函数也是引擎自己创建的。首先引擎创建了 <code>Object.prototype</code> ，然后创建了 <code>Function.prototype</code> ，并且通过 <code>__proto__</code> 将两者联系了起来。这里也很好的解释了上面的一个问题，为什么 <code>let fun = Function.prototype.bind()</code> 没有 prototype 属性。因为 <code>Function.prototype</code> 是引擎创建出来的对象，引擎认为不需要给这个对象添加 <code>prototype</code> 属性。</p>\n<p><strong><em>所以我们又可以得出一个结论，不是所有函数都是 <code>new Function()</code> 产生的。</em></strong><br>有了 <code>Function.prototype</code> 以后才有了 <code>function Function()</code> ，然后其他的构造函数都是 <code>function Function()</code> 生成的。</p>\n<p>现在可以来解释 <code>Function.__proto__ === Function.prototype</code> 这个问题了。因为先有的 <code>Function.prototype</code> 以后才有的 <code>function Function()</code> ，所以也就不存在鸡生蛋蛋生鸡的悖论问题了。对于为什么 <code>Function.__proto__</code> 会等于 <code>Function.prototype</code> ，个人的理解是：其他所有的构造函数都可以通过原型链找到 <code>Function.prototype</code> ，并且 <code>function Function()</code> 本质也是一个函数，为了不产生混乱就将 <code>function Function()</code> 的 <code>__proto__</code> 联系到了 <code>Function.prototype</code> 上。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><code>Object</code> 是所有对象的爸爸，所有对象都可以通过 <code>__proto__</code> 找到它</li>\n<li><code>Function</code> 是所有函数的爸爸，所有函数都可以通过 <code>__proto__</code> 找到它</li>\n<li><code>Function.prototype</code> 和 <code>Object.prototype</code> 是两个特殊的对象，他们由引擎来创建</li>\n<li>除了以上两个特殊对象，其他对象都是通过构造器 <code>new</code> 出来的</li>\n<li>函数的 <code>prototype</code> 是一个对象，也就是原型</li>\n<li>对象的 <code>__proto__</code> 指向原型， <code>__proto__</code> 将对象和原型连接起来组成了原型链<br><img src=\"https://img2018.cnblogs.com/blog/1731684/201907/1731684-20190704181143591-516719297.png\" alt=\"总结\"></li>\n</ul>\n<h2 id=\"归纳\"><a href=\"#归纳\" class=\"headerlink\" title=\"归纳\"></a>归纳</h2><p><code>ES</code> 把对象定义为：“无序属性的集合，其属性可以包含基本值，对象和函数”。<br>严格来讲，这就相当于说对象是一组没有特定顺序的值。ES 中的构造函数可以用来创建特定类型的对象，用来在创建对象时初始化对象。它的特点是，一般为大写字母开头，使用 <code>new</code> 操作符来实例化对象，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">person.name = <span class=\"string\">\"Kevin\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name); <span class=\"comment\">// Kevin</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Person</code> 就是构造函数， <code>person</code> 就是对象。对于对象而言，每个 <code>JS</code> 对象一定对应一个原型对象，并从原型对象继承属性和方法。对象 <code>__proto__</code> 属性的值就是它所对应的原型对象。对象的 <code>__proto__</code> 指向自己构造函数的 <code>prototype</code> 。所以对象的原型链就是 <code>obj.__proto__.proto__....</code> 。对于函数而言，只有函数才有 <code>prototype</code> 属性， <code>Person.prototype</code>  是一个对象，并且有两个属性， 一个是 <code>constructor</code> 指向其构造函数 <code>Person</code> ， 一个是 <code>__proto__</code>  属性：是一个对象，指向上一层的原型。原型链的尽头是 <code>Object.prototype</code> 。所有对象均从 <code>Object.prototype</code> 继承属性。<code>Function.prototype</code> 和 <code>Function.__proto__</code> 为同一对象。<code>Object/Array/String</code> 等等构造函数本质上和 <code>Function</code> 一样，均继承于 <code>Function.prototype</code> 。<code>Function.prototype</code> 直接继承 <code>Object.prototype</code> 。这里的 <code>Object</code> 和 <code>Function</code> 有点鸡和蛋的问题，总结：先有 <code>Object.prototype</code>（原型链顶端），<code>Function.prototype</code> 继承 <code>Object.prototype</code> 而产生，最后，<code>Function</code> 和 <code>Object</code> 和其它构造函数继承 <code>Function.prototype</code> 而产生。属性查找时，先在对象自己上找，找不到才会一步步根据原型链往上找。<br><img src=\"https://pic2.zhimg.com/v2-2e8ec703287854d174483ba5f9f937cf_1200x500.jpg\" alt=\"继承\"></p>\n<h2 id=\"关联阅读\"><a href=\"#关联阅读\" class=\"headerlink\" title=\"关联阅读\"></a>关联阅读</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain</a><br><a href=\"https://zhuanlan.zhihu.com/p/35790971\" target=\"_blank\" rel=\"noopener\">说说原型（prototype）、原型链和原型继承</a></p>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><p><a href=\"https://lixuguang.github.io/2020/01/13/FE-guide-inherit2/\">继承</a></p>"},{"title":"前端常见知识点整理 ---- 浏览器存储","date":"2020-01-03T04:37:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# cookie，localStorage，sessionStorage，indexDB\n| 特性         | cookie                                     | localStorage             | sessionStorage | indexDB                  |\n| ------------ | ------------------------------------------ | ------------------------ | -------------- | ------------------------ |\n| 数据生命周期 | 一般由服务器生成，可以设置过期时间         | 除非被清理，否则一直存在 | 页面关闭就清理 | 除非被清理，否则一直存在 |\n| 数据存储大小 | 4K                                         | 5M                       | 5M             | 无限制                   |\n| 与服务端通信 | 每次都会携带在 header 中，对于请求性能影响 | 不参与                   | 不参与         | 不参与                   |\n\n从上表可以看到， `cookie` 已经不建议用于存储。如果没有大量数据存储需求的话，可以使用 `localStorage` 和 `sessionStorage` 。对于不怎么改变的数据尽量使用 `localStorage` 存储，否则可以用 `sessionStorage` 存储。\n\n对于 `cookie` ，我们还需要注意安全性。\n| 属性      | 作用                                                           |\n| --------- | -------------------------------------------------------------- |\n| value     | 如果用于保存用户登录态，应该将该值加密，不能使用明文的用户标识 |\n| http-only | 不能通过 JS 访问 Cookie，减少 XSS 攻击                         |\n| secure    | 只能在协议为 HTTPS 的请求中携带                                |\n| same-site | 规定浏览器不能在跨域请求中携带 Cookie，减少 CSRF 攻击          |\n\n# Service Worker\n> Service workers 本质上充当 Web 应用程序与浏览器之间的代理服务器，也可以在网络可用时作为浏览器和网络间的代理。它们旨在（除其他之外）使得能够创建有效的离线体验，拦截网络请求并基于网络是否可用以及更新的资源是否驻留在服务器上来采取适当的动作。他们还允许访问推送通知和后台同步 API。\n\n目前该技术通常用来做缓存文件，提高首屏速度，可以试着来实现这个功能。\n\n```\n// js代码\n\n// index.js\nif (navigator.serviceWorker) {\n  navigator.serviceWorker\n    .register('sw.js')\n    .then(function(registration) {\n      console.log('service worker 注册成功')\n    })\n    .catch(function(err) {\n      console.log('servcie worker 注册失败')\n    })\n}\n// sw.js\n// 监听 `install` 事件，回调中缓存所需文件\nself.addEventListener('install', e => {\n  e.waitUntil(\n    caches.open('my-cache').then(function(cache) {\n      return cache.addAll(['./index.html', './index.js'])\n    })\n  )\n})\n\n// 拦截所有请求事件\n// 如果缓存中已经有请求的数据就直接用缓存，否则去请求数据\nself.addEventListener('fetch', e => {\n  e.respondWith(\n    caches.match(e.request).then(function(response) {\n      if (response) {\n        return response\n      }\n      console.log('fetch source')\n    })\n  )\n})\n```\n\n打开页面，可以在开发者工具中的 `Application` 看到 `Service Worker` 已经启动了\n在 `Cache` 中也可以发现我们所需的文件已被缓存\n\n当我们重新刷新页面可以发现我们缓存的数据是从 `Service Worker` 中读取的","source":"_posts/FE-guide-store.md","raw":"---\ntitle: 前端常见知识点整理 ---- 浏览器存储\ndate: 2020-01-03 12:37:22\ncategories: \n  - 前端技术\n  - 前端常见知识点整理\ntags: \n\t- 面试\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# cookie，localStorage，sessionStorage，indexDB\n| 特性         | cookie                                     | localStorage             | sessionStorage | indexDB                  |\n| ------------ | ------------------------------------------ | ------------------------ | -------------- | ------------------------ |\n| 数据生命周期 | 一般由服务器生成，可以设置过期时间         | 除非被清理，否则一直存在 | 页面关闭就清理 | 除非被清理，否则一直存在 |\n| 数据存储大小 | 4K                                         | 5M                       | 5M             | 无限制                   |\n| 与服务端通信 | 每次都会携带在 header 中，对于请求性能影响 | 不参与                   | 不参与         | 不参与                   |\n\n从上表可以看到， `cookie` 已经不建议用于存储。如果没有大量数据存储需求的话，可以使用 `localStorage` 和 `sessionStorage` 。对于不怎么改变的数据尽量使用 `localStorage` 存储，否则可以用 `sessionStorage` 存储。\n\n对于 `cookie` ，我们还需要注意安全性。\n| 属性      | 作用                                                           |\n| --------- | -------------------------------------------------------------- |\n| value     | 如果用于保存用户登录态，应该将该值加密，不能使用明文的用户标识 |\n| http-only | 不能通过 JS 访问 Cookie，减少 XSS 攻击                         |\n| secure    | 只能在协议为 HTTPS 的请求中携带                                |\n| same-site | 规定浏览器不能在跨域请求中携带 Cookie，减少 CSRF 攻击          |\n\n# Service Worker\n> Service workers 本质上充当 Web 应用程序与浏览器之间的代理服务器，也可以在网络可用时作为浏览器和网络间的代理。它们旨在（除其他之外）使得能够创建有效的离线体验，拦截网络请求并基于网络是否可用以及更新的资源是否驻留在服务器上来采取适当的动作。他们还允许访问推送通知和后台同步 API。\n\n目前该技术通常用来做缓存文件，提高首屏速度，可以试着来实现这个功能。\n\n```\n// js代码\n\n// index.js\nif (navigator.serviceWorker) {\n  navigator.serviceWorker\n    .register('sw.js')\n    .then(function(registration) {\n      console.log('service worker 注册成功')\n    })\n    .catch(function(err) {\n      console.log('servcie worker 注册失败')\n    })\n}\n// sw.js\n// 监听 `install` 事件，回调中缓存所需文件\nself.addEventListener('install', e => {\n  e.waitUntil(\n    caches.open('my-cache').then(function(cache) {\n      return cache.addAll(['./index.html', './index.js'])\n    })\n  )\n})\n\n// 拦截所有请求事件\n// 如果缓存中已经有请求的数据就直接用缓存，否则去请求数据\nself.addEventListener('fetch', e => {\n  e.respondWith(\n    caches.match(e.request).then(function(response) {\n      if (response) {\n        return response\n      }\n      console.log('fetch source')\n    })\n  )\n})\n```\n\n打开页面，可以在开发者工具中的 `Application` 看到 `Service Worker` 已经启动了\n在 `Cache` 中也可以发现我们所需的文件已被缓存\n\n当我们重新刷新页面可以发现我们缓存的数据是从 `Service Worker` 中读取的","slug":"FE-guide-store","published":1,"updated":"2020-04-02T03:20:12.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gry10023ooa6gkwj98px","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"cookie，localStorage，sessionStorage，indexDB\"><a href=\"#cookie，localStorage，sessionStorage，indexDB\" class=\"headerlink\" title=\"cookie，localStorage，sessionStorage，indexDB\"></a>cookie，localStorage，sessionStorage，indexDB</h1><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>cookie</th>\n<th>localStorage</th>\n<th>sessionStorage</th>\n<th>indexDB</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数据生命周期</td>\n<td>一般由服务器生成，可以设置过期时间</td>\n<td>除非被清理，否则一直存在</td>\n<td>页面关闭就清理</td>\n<td>除非被清理，否则一直存在</td>\n</tr>\n<tr>\n<td>数据存储大小</td>\n<td>4K</td>\n<td>5M</td>\n<td>5M</td>\n<td>无限制</td>\n</tr>\n<tr>\n<td>与服务端通信</td>\n<td>每次都会携带在 header 中，对于请求性能影响</td>\n<td>不参与</td>\n<td>不参与</td>\n<td>不参与</td>\n</tr>\n</tbody></table>\n<p>从上表可以看到， <code>cookie</code> 已经不建议用于存储。如果没有大量数据存储需求的话，可以使用 <code>localStorage</code> 和 <code>sessionStorage</code> 。对于不怎么改变的数据尽量使用 <code>localStorage</code> 存储，否则可以用 <code>sessionStorage</code> 存储。</p>\n<p>对于 <code>cookie</code> ，我们还需要注意安全性。<br>| 属性      | 作用                                                           |<br>| ——— | ————————————————————– |<br>| value     | 如果用于保存用户登录态，应该将该值加密，不能使用明文的用户标识 |<br>| http-only | 不能通过 JS 访问 Cookie，减少 XSS 攻击                         |<br>| secure    | 只能在协议为 HTTPS 的请求中携带                                |<br>| same-site | 规定浏览器不能在跨域请求中携带 Cookie，减少 CSRF 攻击          |</p>\n<h1 id=\"Service-Worker\"><a href=\"#Service-Worker\" class=\"headerlink\" title=\"Service Worker\"></a>Service Worker</h1><blockquote>\n<p>Service workers 本质上充当 Web 应用程序与浏览器之间的代理服务器，也可以在网络可用时作为浏览器和网络间的代理。它们旨在（除其他之外）使得能够创建有效的离线体验，拦截网络请求并基于网络是否可用以及更新的资源是否驻留在服务器上来采取适当的动作。他们还允许访问推送通知和后台同步 API。</p>\n</blockquote>\n<p>目前该技术通常用来做缓存文件，提高首屏速度，可以试着来实现这个功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; index.js</span><br><span class=\"line\">if (navigator.serviceWorker) &#123;</span><br><span class=\"line\">  navigator.serviceWorker</span><br><span class=\"line\">    .register(&#39;sw.js&#39;)</span><br><span class=\"line\">    .then(function(registration) &#123;</span><br><span class=\"line\">      console.log(&#39;service worker 注册成功&#39;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(function(err) &#123;</span><br><span class=\"line\">      console.log(&#39;servcie worker 注册失败&#39;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; sw.js</span><br><span class=\"line\">&#x2F;&#x2F; 监听 &#96;install&#96; 事件，回调中缓存所需文件</span><br><span class=\"line\">self.addEventListener(&#39;install&#39;, e &#x3D;&gt; &#123;</span><br><span class=\"line\">  e.waitUntil(</span><br><span class=\"line\">    caches.open(&#39;my-cache&#39;).then(function(cache) &#123;</span><br><span class=\"line\">      return cache.addAll([&#39;.&#x2F;index.html&#39;, &#39;.&#x2F;index.js&#39;])</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 拦截所有请求事件</span><br><span class=\"line\">&#x2F;&#x2F; 如果缓存中已经有请求的数据就直接用缓存，否则去请求数据</span><br><span class=\"line\">self.addEventListener(&#39;fetch&#39;, e &#x3D;&gt; &#123;</span><br><span class=\"line\">  e.respondWith(</span><br><span class=\"line\">    caches.match(e.request).then(function(response) &#123;</span><br><span class=\"line\">      if (response) &#123;</span><br><span class=\"line\">        return response</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      console.log(&#39;fetch source&#39;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>打开页面，可以在开发者工具中的 <code>Application</code> 看到 <code>Service Worker</code> 已经启动了<br>在 <code>Cache</code> 中也可以发现我们所需的文件已被缓存</p>\n<p>当我们重新刷新页面可以发现我们缓存的数据是从 <code>Service Worker</code> 中读取的</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"cookie，localStorage，sessionStorage，indexDB\"><a href=\"#cookie，localStorage，sessionStorage，indexDB\" class=\"headerlink\" title=\"cookie，localStorage，sessionStorage，indexDB\"></a>cookie，localStorage，sessionStorage，indexDB</h1><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>cookie</th>\n<th>localStorage</th>\n<th>sessionStorage</th>\n<th>indexDB</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数据生命周期</td>\n<td>一般由服务器生成，可以设置过期时间</td>\n<td>除非被清理，否则一直存在</td>\n<td>页面关闭就清理</td>\n<td>除非被清理，否则一直存在</td>\n</tr>\n<tr>\n<td>数据存储大小</td>\n<td>4K</td>\n<td>5M</td>\n<td>5M</td>\n<td>无限制</td>\n</tr>\n<tr>\n<td>与服务端通信</td>\n<td>每次都会携带在 header 中，对于请求性能影响</td>\n<td>不参与</td>\n<td>不参与</td>\n<td>不参与</td>\n</tr>\n</tbody></table>\n<p>从上表可以看到， <code>cookie</code> 已经不建议用于存储。如果没有大量数据存储需求的话，可以使用 <code>localStorage</code> 和 <code>sessionStorage</code> 。对于不怎么改变的数据尽量使用 <code>localStorage</code> 存储，否则可以用 <code>sessionStorage</code> 存储。</p>\n<p>对于 <code>cookie</code> ，我们还需要注意安全性。<br>| 属性      | 作用                                                           |<br>| ——— | ————————————————————– |<br>| value     | 如果用于保存用户登录态，应该将该值加密，不能使用明文的用户标识 |<br>| http-only | 不能通过 JS 访问 Cookie，减少 XSS 攻击                         |<br>| secure    | 只能在协议为 HTTPS 的请求中携带                                |<br>| same-site | 规定浏览器不能在跨域请求中携带 Cookie，减少 CSRF 攻击          |</p>\n<h1 id=\"Service-Worker\"><a href=\"#Service-Worker\" class=\"headerlink\" title=\"Service Worker\"></a>Service Worker</h1><blockquote>\n<p>Service workers 本质上充当 Web 应用程序与浏览器之间的代理服务器，也可以在网络可用时作为浏览器和网络间的代理。它们旨在（除其他之外）使得能够创建有效的离线体验，拦截网络请求并基于网络是否可用以及更新的资源是否驻留在服务器上来采取适当的动作。他们还允许访问推送通知和后台同步 API。</p>\n</blockquote>\n<p>目前该技术通常用来做缓存文件，提高首屏速度，可以试着来实现这个功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; index.js</span><br><span class=\"line\">if (navigator.serviceWorker) &#123;</span><br><span class=\"line\">  navigator.serviceWorker</span><br><span class=\"line\">    .register(&#39;sw.js&#39;)</span><br><span class=\"line\">    .then(function(registration) &#123;</span><br><span class=\"line\">      console.log(&#39;service worker 注册成功&#39;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(function(err) &#123;</span><br><span class=\"line\">      console.log(&#39;servcie worker 注册失败&#39;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; sw.js</span><br><span class=\"line\">&#x2F;&#x2F; 监听 &#96;install&#96; 事件，回调中缓存所需文件</span><br><span class=\"line\">self.addEventListener(&#39;install&#39;, e &#x3D;&gt; &#123;</span><br><span class=\"line\">  e.waitUntil(</span><br><span class=\"line\">    caches.open(&#39;my-cache&#39;).then(function(cache) &#123;</span><br><span class=\"line\">      return cache.addAll([&#39;.&#x2F;index.html&#39;, &#39;.&#x2F;index.js&#39;])</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 拦截所有请求事件</span><br><span class=\"line\">&#x2F;&#x2F; 如果缓存中已经有请求的数据就直接用缓存，否则去请求数据</span><br><span class=\"line\">self.addEventListener(&#39;fetch&#39;, e &#x3D;&gt; &#123;</span><br><span class=\"line\">  e.respondWith(</span><br><span class=\"line\">    caches.match(e.request).then(function(response) &#123;</span><br><span class=\"line\">      if (response) &#123;</span><br><span class=\"line\">        return response</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      console.log(&#39;fetch source&#39;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>打开页面，可以在开发者工具中的 <code>Application</code> 看到 <code>Service Worker</code> 已经启动了<br>在 <code>Cache</code> 中也可以发现我们所需的文件已被缓存</p>\n<p>当我们重新刷新页面可以发现我们缓存的数据是从 <code>Service Worker</code> 中读取的</p>\n"},{"title":"前端常见知识点整理 ---- 网络安全","date":"2020-01-22T06:50:21.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n网络安全是前端不可忽略的一个部分，可惜的是之前我都忽略了，最近发现网络安全已经变得日益重要，所以特别整理一篇文章说说网络安全相关的内容。\n<!-- more -->\n## XSS（Cross-site scripting）跨站脚本攻击\n跨站脚本攻击是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了HTML以及用户端脚本语言。\n\nXSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java，VBScript，ActiveX，Flash或者甚至是普通的HTML。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。\n\nXSS攻击分成两类：\n- 来自内部的攻击\n  - 主要指的是利用程序自身的漏洞，构造跨站语句\n- 来自外部的攻击\n  - 主要指自己构造XSS跨站漏洞网页或者寻找非目标机以外的有跨站漏洞的网页。如当我们要渗透一个站点，我们自己构造一个有跨站漏洞的网页，然后构造跨站语句，通过结合其他技术，如社会工程学等，欺骗目标服务器的管理员打开。\n\nXSS分为：**存储型**和**反射型**\n- 存储型XSS：存储型XSS，持久化，代码是存储在服务其中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，用户访问该页面的时候触发代码执行。这种XSS比较危险，容易造成蠕虫，盗窃cookie（虽然还有种DOM型XSS，但是也还是包括在存储型XSS内）。\n- 反射型XSS：非持久化，需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。\n\n### 攻击手段和目的\n攻击者使被攻击者在浏览器中执行脚本后，如果需要收集来自被攻击者的数据（如cookie或其他敏感信息），可以自行架设一个网站，让被攻击者通过JavaScript等方式把收集好的数据作为参数提交，随后以数据库等形式记录在攻击者自己的服务器上。\n\n常用的XSS攻击手段和目的有：\n- 盗用cookie，获取敏感信息。\n- 利用植入Flash，通过crossdomain权限设置进一步获取更高权限；或者利用Java等得到类似的操作。\n- 利用iframe、frame、XMLHttpRequest或上述Flash等方式，以（被攻击）用户的身份执行一些管理动作，或执行一些一般的如发微博、加好友、发私信等操作。\n- 利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动。\n- 在访问量极大的一些页面上的XSS可以攻击一些小型网站，实现DDoS攻击的效果。\n\n### 漏洞的防御和利用\n#### 过滤特殊字符\n避免XSS的方法之一主要是将用户所提供的内容进行过滤，许多语言都有提供对HTML的过滤：\n- PHP的htmlentities()或是htmlspecialchars()。\n- Python的cgi.escape()。\n- ASP的Server.HTMLEncode()。\n- ASP.NET的Server.HtmlEncode()或功能更强的Microsoft Anti-Cross Site Scripting Library\n- Java的xssprotect (Open Source Library)。\n- Node.js的node-validator。\n\n#### 使用HTTP头指定类型\n很多时候可以使用HTTP头指定内容的类型，使得输出的内容避免被作为HTML解析。如在PHP语言中使用以下代码：\n`<?php header('Content-Type: text/javascript; charset=utf-8'); ?>`\n即可强行指定输出内容为文本/JavaScript脚本（顺便指定了内容编码），而非可以引发攻击的HTML。\n\n#### 用户方面\n包括Internet Explorer、Mozilla Firefox在内的大多数浏览器皆有关闭JavaScript的选项，但关闭功能并非是最好的方法，因为许多网站都需要使用JavaScript语言才能正常运作。通常来说，一个经常有安全更新推出的浏览器，在使用上会比很久都没有更新的浏览器更为安全。\n\n## CRSF（Cross-site request forgery）跨站请求伪造\n跨站请求伪造是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。\n- XSS 利用的是用户对指定网站的信任\n- CSRF 利用的是网站对用户网页浏览器的信任\n\n跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去运行。这利用了web中用户身份验证的一个漏洞：***简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。***\n\n### 例子\n例子\n假如一家银行用以运行转账操作的URL地址如下：\n`http://www.examplebank.com/withdraw?account=AccoutName&amount=1000&for=PayeeName`\n那么，一个恶意攻击者可以在另一个网站上放置如下代码： \n`<img src=\"http://www.examplebank.com/withdraw?account=Alice&amount=1000&for=Badman\">`\n如果有账户名为Alice的用户访问了恶意站点，而她之前刚访问过银行不久，登录信息尚未过期，那么她就会损失1000资金。\n这种恶意的网址可以有很多种形式，藏身于网页中的许多地方。此外，攻击者也不需要控制放置恶意网址的网站。例如他可以将这种地址藏在论坛，博客等任何用户生成内容的网站中。这意味着***如果服务端没有合适的防御措施的话，用户即使访问熟悉的可信网站也有受攻击的危险***。\n透过例子能够看出，攻击者并不能通过CSRF攻击来直接获取用户的账户控制权，也不能直接窃取用户的任何信息。他们能做到的，是***欺骗用户浏览器，让其以用户的名义运行操作。***\n\n### 防御措施\n#### 检查Referer（参照）字段\nHTTP头中有一个Referer字段，这个字段用以标明请求来源于哪个地址。在处理敏感数据请求时，通常来说，Referer字段应和请求的地址位于同一域名下。以上文银行操作为例，Referer字段地址通常应该是转账按钮所在的网页地址，应该也位于www.examplebank.com之下。而如果是CSRF攻击传来的请求，Referer字段会是包含恶意网址的地址，不会位于www.examplebank.com之下，这时候服务器就能识别出恶意的访问。\n这种办法简单易行，工作量低，仅需要在关键访问处增加一步校验。但这种办法也有其局限性，因其完全依赖浏览器发送正确的Referer字段。虽然http协议对此字段的内容有明确的规定，但并无法保证来访的浏览器的具体实现，亦无法保证浏览器没有安全漏洞影响到此字段。并且也存在攻击者攻击某些浏览器，篡改其Referer字段的可能。\n#### 添加校验token\n由于CSRF的本质在于攻击者欺骗用户去访问自己设置的地址，所以如果要求在访问敏感数据请求时，要求用户浏览器提供不保存在cookie中，并且攻击者无法伪造的数据作为校验，那么攻击者就无法再运行CSRF攻击。这种数据通常是窗体中的一个数据项。服务器将其生成并附加在窗体中，其内容是一个伪随机数。当客户端通过窗体提交请求时，这个伪随机数也一并提交上去以供校验。正常的访问时，客户端浏览器能够正确得到并传回这个伪随机数，而通过CSRF传来的欺骗性攻击中，攻击者无从事先得知这个伪随机数的值，服务端就会因为校验token的值为空或者错误，拒绝这个可疑请求。","source":"_posts/FE-guide-safe.md","raw":"---\ntitle: 前端常见知识点整理 ---- 网络安全\ndate: 2020-01-22 14:50:21\ncategories: \n  - 前端技术\n  - 前端常见知识点整理\ntags: \n\t- 网络安全\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n网络安全是前端不可忽略的一个部分，可惜的是之前我都忽略了，最近发现网络安全已经变得日益重要，所以特别整理一篇文章说说网络安全相关的内容。\n<!-- more -->\n## XSS（Cross-site scripting）跨站脚本攻击\n跨站脚本攻击是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了HTML以及用户端脚本语言。\n\nXSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java，VBScript，ActiveX，Flash或者甚至是普通的HTML。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。\n\nXSS攻击分成两类：\n- 来自内部的攻击\n  - 主要指的是利用程序自身的漏洞，构造跨站语句\n- 来自外部的攻击\n  - 主要指自己构造XSS跨站漏洞网页或者寻找非目标机以外的有跨站漏洞的网页。如当我们要渗透一个站点，我们自己构造一个有跨站漏洞的网页，然后构造跨站语句，通过结合其他技术，如社会工程学等，欺骗目标服务器的管理员打开。\n\nXSS分为：**存储型**和**反射型**\n- 存储型XSS：存储型XSS，持久化，代码是存储在服务其中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，用户访问该页面的时候触发代码执行。这种XSS比较危险，容易造成蠕虫，盗窃cookie（虽然还有种DOM型XSS，但是也还是包括在存储型XSS内）。\n- 反射型XSS：非持久化，需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。\n\n### 攻击手段和目的\n攻击者使被攻击者在浏览器中执行脚本后，如果需要收集来自被攻击者的数据（如cookie或其他敏感信息），可以自行架设一个网站，让被攻击者通过JavaScript等方式把收集好的数据作为参数提交，随后以数据库等形式记录在攻击者自己的服务器上。\n\n常用的XSS攻击手段和目的有：\n- 盗用cookie，获取敏感信息。\n- 利用植入Flash，通过crossdomain权限设置进一步获取更高权限；或者利用Java等得到类似的操作。\n- 利用iframe、frame、XMLHttpRequest或上述Flash等方式，以（被攻击）用户的身份执行一些管理动作，或执行一些一般的如发微博、加好友、发私信等操作。\n- 利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动。\n- 在访问量极大的一些页面上的XSS可以攻击一些小型网站，实现DDoS攻击的效果。\n\n### 漏洞的防御和利用\n#### 过滤特殊字符\n避免XSS的方法之一主要是将用户所提供的内容进行过滤，许多语言都有提供对HTML的过滤：\n- PHP的htmlentities()或是htmlspecialchars()。\n- Python的cgi.escape()。\n- ASP的Server.HTMLEncode()。\n- ASP.NET的Server.HtmlEncode()或功能更强的Microsoft Anti-Cross Site Scripting Library\n- Java的xssprotect (Open Source Library)。\n- Node.js的node-validator。\n\n#### 使用HTTP头指定类型\n很多时候可以使用HTTP头指定内容的类型，使得输出的内容避免被作为HTML解析。如在PHP语言中使用以下代码：\n`<?php header('Content-Type: text/javascript; charset=utf-8'); ?>`\n即可强行指定输出内容为文本/JavaScript脚本（顺便指定了内容编码），而非可以引发攻击的HTML。\n\n#### 用户方面\n包括Internet Explorer、Mozilla Firefox在内的大多数浏览器皆有关闭JavaScript的选项，但关闭功能并非是最好的方法，因为许多网站都需要使用JavaScript语言才能正常运作。通常来说，一个经常有安全更新推出的浏览器，在使用上会比很久都没有更新的浏览器更为安全。\n\n## CRSF（Cross-site request forgery）跨站请求伪造\n跨站请求伪造是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。\n- XSS 利用的是用户对指定网站的信任\n- CSRF 利用的是网站对用户网页浏览器的信任\n\n跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去运行。这利用了web中用户身份验证的一个漏洞：***简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。***\n\n### 例子\n例子\n假如一家银行用以运行转账操作的URL地址如下：\n`http://www.examplebank.com/withdraw?account=AccoutName&amount=1000&for=PayeeName`\n那么，一个恶意攻击者可以在另一个网站上放置如下代码： \n`<img src=\"http://www.examplebank.com/withdraw?account=Alice&amount=1000&for=Badman\">`\n如果有账户名为Alice的用户访问了恶意站点，而她之前刚访问过银行不久，登录信息尚未过期，那么她就会损失1000资金。\n这种恶意的网址可以有很多种形式，藏身于网页中的许多地方。此外，攻击者也不需要控制放置恶意网址的网站。例如他可以将这种地址藏在论坛，博客等任何用户生成内容的网站中。这意味着***如果服务端没有合适的防御措施的话，用户即使访问熟悉的可信网站也有受攻击的危险***。\n透过例子能够看出，攻击者并不能通过CSRF攻击来直接获取用户的账户控制权，也不能直接窃取用户的任何信息。他们能做到的，是***欺骗用户浏览器，让其以用户的名义运行操作。***\n\n### 防御措施\n#### 检查Referer（参照）字段\nHTTP头中有一个Referer字段，这个字段用以标明请求来源于哪个地址。在处理敏感数据请求时，通常来说，Referer字段应和请求的地址位于同一域名下。以上文银行操作为例，Referer字段地址通常应该是转账按钮所在的网页地址，应该也位于www.examplebank.com之下。而如果是CSRF攻击传来的请求，Referer字段会是包含恶意网址的地址，不会位于www.examplebank.com之下，这时候服务器就能识别出恶意的访问。\n这种办法简单易行，工作量低，仅需要在关键访问处增加一步校验。但这种办法也有其局限性，因其完全依赖浏览器发送正确的Referer字段。虽然http协议对此字段的内容有明确的规定，但并无法保证来访的浏览器的具体实现，亦无法保证浏览器没有安全漏洞影响到此字段。并且也存在攻击者攻击某些浏览器，篡改其Referer字段的可能。\n#### 添加校验token\n由于CSRF的本质在于攻击者欺骗用户去访问自己设置的地址，所以如果要求在访问敏感数据请求时，要求用户浏览器提供不保存在cookie中，并且攻击者无法伪造的数据作为校验，那么攻击者就无法再运行CSRF攻击。这种数据通常是窗体中的一个数据项。服务器将其生成并附加在窗体中，其内容是一个伪随机数。当客户端通过窗体提交请求时，这个伪随机数也一并提交上去以供校验。正常的访问时，客户端浏览器能够正确得到并传回这个伪随机数，而通过CSRF传来的欺骗性攻击中，攻击者无从事先得知这个伪随机数的值，服务端就会因为校验token的值为空或者错误，拒绝这个可疑请求。","slug":"FE-guide-safe","published":1,"updated":"2020-04-02T03:20:12.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gryc0025ooa65nhxafqz","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>网络安全是前端不可忽略的一个部分，可惜的是之前我都忽略了，最近发现网络安全已经变得日益重要，所以特别整理一篇文章说说网络安全相关的内容。</p>\n<a id=\"more\"></a>\n<h2 id=\"XSS（Cross-site-scripting）跨站脚本攻击\"><a href=\"#XSS（Cross-site-scripting）跨站脚本攻击\" class=\"headerlink\" title=\"XSS（Cross-site scripting）跨站脚本攻击\"></a>XSS（Cross-site scripting）跨站脚本攻击</h2><p>跨站脚本攻击是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了HTML以及用户端脚本语言。</p>\n<p>XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java，VBScript，ActiveX，Flash或者甚至是普通的HTML。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。</p>\n<p>XSS攻击分成两类：</p>\n<ul>\n<li>来自内部的攻击<ul>\n<li>主要指的是利用程序自身的漏洞，构造跨站语句</li>\n</ul>\n</li>\n<li>来自外部的攻击<ul>\n<li>主要指自己构造XSS跨站漏洞网页或者寻找非目标机以外的有跨站漏洞的网页。如当我们要渗透一个站点，我们自己构造一个有跨站漏洞的网页，然后构造跨站语句，通过结合其他技术，如社会工程学等，欺骗目标服务器的管理员打开。</li>\n</ul>\n</li>\n</ul>\n<p>XSS分为：<strong>存储型</strong>和<strong>反射型</strong></p>\n<ul>\n<li>存储型XSS：存储型XSS，持久化，代码是存储在服务其中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，用户访问该页面的时候触发代码执行。这种XSS比较危险，容易造成蠕虫，盗窃cookie（虽然还有种DOM型XSS，但是也还是包括在存储型XSS内）。</li>\n<li>反射型XSS：非持久化，需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。</li>\n</ul>\n<h3 id=\"攻击手段和目的\"><a href=\"#攻击手段和目的\" class=\"headerlink\" title=\"攻击手段和目的\"></a>攻击手段和目的</h3><p>攻击者使被攻击者在浏览器中执行脚本后，如果需要收集来自被攻击者的数据（如cookie或其他敏感信息），可以自行架设一个网站，让被攻击者通过JavaScript等方式把收集好的数据作为参数提交，随后以数据库等形式记录在攻击者自己的服务器上。</p>\n<p>常用的XSS攻击手段和目的有：</p>\n<ul>\n<li>盗用cookie，获取敏感信息。</li>\n<li>利用植入Flash，通过crossdomain权限设置进一步获取更高权限；或者利用Java等得到类似的操作。</li>\n<li>利用iframe、frame、XMLHttpRequest或上述Flash等方式，以（被攻击）用户的身份执行一些管理动作，或执行一些一般的如发微博、加好友、发私信等操作。</li>\n<li>利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动。</li>\n<li>在访问量极大的一些页面上的XSS可以攻击一些小型网站，实现DDoS攻击的效果。</li>\n</ul>\n<h3 id=\"漏洞的防御和利用\"><a href=\"#漏洞的防御和利用\" class=\"headerlink\" title=\"漏洞的防御和利用\"></a>漏洞的防御和利用</h3><h4 id=\"过滤特殊字符\"><a href=\"#过滤特殊字符\" class=\"headerlink\" title=\"过滤特殊字符\"></a>过滤特殊字符</h4><p>避免XSS的方法之一主要是将用户所提供的内容进行过滤，许多语言都有提供对HTML的过滤：</p>\n<ul>\n<li>PHP的htmlentities()或是htmlspecialchars()。</li>\n<li>Python的cgi.escape()。</li>\n<li>ASP的Server.HTMLEncode()。</li>\n<li>ASP.NET的Server.HtmlEncode()或功能更强的Microsoft Anti-Cross Site Scripting Library</li>\n<li>Java的xssprotect (Open Source Library)。</li>\n<li>Node.js的node-validator。</li>\n</ul>\n<h4 id=\"使用HTTP头指定类型\"><a href=\"#使用HTTP头指定类型\" class=\"headerlink\" title=\"使用HTTP头指定类型\"></a>使用HTTP头指定类型</h4><p>很多时候可以使用HTTP头指定内容的类型，使得输出的内容避免被作为HTML解析。如在PHP语言中使用以下代码：<br><code>&lt;?php header(&#39;Content-Type: text/javascript; charset=utf-8&#39;); ?&gt;</code><br>即可强行指定输出内容为文本/JavaScript脚本（顺便指定了内容编码），而非可以引发攻击的HTML。</p>\n<h4 id=\"用户方面\"><a href=\"#用户方面\" class=\"headerlink\" title=\"用户方面\"></a>用户方面</h4><p>包括Internet Explorer、Mozilla Firefox在内的大多数浏览器皆有关闭JavaScript的选项，但关闭功能并非是最好的方法，因为许多网站都需要使用JavaScript语言才能正常运作。通常来说，一个经常有安全更新推出的浏览器，在使用上会比很久都没有更新的浏览器更为安全。</p>\n<h2 id=\"CRSF（Cross-site-request-forgery）跨站请求伪造\"><a href=\"#CRSF（Cross-site-request-forgery）跨站请求伪造\" class=\"headerlink\" title=\"CRSF（Cross-site request forgery）跨站请求伪造\"></a>CRSF（Cross-site request forgery）跨站请求伪造</h2><p>跨站请求伪造是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p>\n<ul>\n<li>XSS 利用的是用户对指定网站的信任</li>\n<li>CSRF 利用的是网站对用户网页浏览器的信任</li>\n</ul>\n<p>跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去运行。这利用了web中用户身份验证的一个漏洞：<strong><em>简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。</em></strong></p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>例子<br>假如一家银行用以运行转账操作的URL地址如下：<br><code>http://www.examplebank.com/withdraw?account=AccoutName&amp;amount=1000&amp;for=PayeeName</code><br>那么，一个恶意攻击者可以在另一个网站上放置如下代码：<br><code>&lt;img src=&quot;http://www.examplebank.com/withdraw?account=Alice&amp;amount=1000&amp;for=Badman&quot;&gt;</code><br>如果有账户名为Alice的用户访问了恶意站点，而她之前刚访问过银行不久，登录信息尚未过期，那么她就会损失1000资金。<br>这种恶意的网址可以有很多种形式，藏身于网页中的许多地方。此外，攻击者也不需要控制放置恶意网址的网站。例如他可以将这种地址藏在论坛，博客等任何用户生成内容的网站中。这意味着<strong><em>如果服务端没有合适的防御措施的话，用户即使访问熟悉的可信网站也有受攻击的危险</em></strong>。<br>透过例子能够看出，攻击者并不能通过CSRF攻击来直接获取用户的账户控制权，也不能直接窃取用户的任何信息。他们能做到的，是<strong><em>欺骗用户浏览器，让其以用户的名义运行操作。</em></strong></p>\n<h3 id=\"防御措施\"><a href=\"#防御措施\" class=\"headerlink\" title=\"防御措施\"></a>防御措施</h3><h4 id=\"检查Referer（参照）字段\"><a href=\"#检查Referer（参照）字段\" class=\"headerlink\" title=\"检查Referer（参照）字段\"></a>检查Referer（参照）字段</h4><p>HTTP头中有一个Referer字段，这个字段用以标明请求来源于哪个地址。在处理敏感数据请求时，通常来说，Referer字段应和请求的地址位于同一域名下。以上文银行操作为例，Referer字段地址通常应该是转账按钮所在的网页地址，应该也位于<a href=\"http://www.examplebank.com之下。而如果是CSRF攻击传来的请求，Referer字段会是包含恶意网址的地址，不会位于www.examplebank.com之下，这时候服务器就能识别出恶意的访问。\" target=\"_blank\" rel=\"noopener\">www.examplebank.com之下。而如果是CSRF攻击传来的请求，Referer字段会是包含恶意网址的地址，不会位于www.examplebank.com之下，这时候服务器就能识别出恶意的访问。</a><br>这种办法简单易行，工作量低，仅需要在关键访问处增加一步校验。但这种办法也有其局限性，因其完全依赖浏览器发送正确的Referer字段。虽然http协议对此字段的内容有明确的规定，但并无法保证来访的浏览器的具体实现，亦无法保证浏览器没有安全漏洞影响到此字段。并且也存在攻击者攻击某些浏览器，篡改其Referer字段的可能。</p>\n<h4 id=\"添加校验token\"><a href=\"#添加校验token\" class=\"headerlink\" title=\"添加校验token\"></a>添加校验token</h4><p>由于CSRF的本质在于攻击者欺骗用户去访问自己设置的地址，所以如果要求在访问敏感数据请求时，要求用户浏览器提供不保存在cookie中，并且攻击者无法伪造的数据作为校验，那么攻击者就无法再运行CSRF攻击。这种数据通常是窗体中的一个数据项。服务器将其生成并附加在窗体中，其内容是一个伪随机数。当客户端通过窗体提交请求时，这个伪随机数也一并提交上去以供校验。正常的访问时，客户端浏览器能够正确得到并传回这个伪随机数，而通过CSRF传来的欺骗性攻击中，攻击者无从事先得知这个伪随机数的值，服务端就会因为校验token的值为空或者错误，拒绝这个可疑请求。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>网络安全是前端不可忽略的一个部分，可惜的是之前我都忽略了，最近发现网络安全已经变得日益重要，所以特别整理一篇文章说说网络安全相关的内容。</p>","more":"<h2 id=\"XSS（Cross-site-scripting）跨站脚本攻击\"><a href=\"#XSS（Cross-site-scripting）跨站脚本攻击\" class=\"headerlink\" title=\"XSS（Cross-site scripting）跨站脚本攻击\"></a>XSS（Cross-site scripting）跨站脚本攻击</h2><p>跨站脚本攻击是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了HTML以及用户端脚本语言。</p>\n<p>XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java，VBScript，ActiveX，Flash或者甚至是普通的HTML。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。</p>\n<p>XSS攻击分成两类：</p>\n<ul>\n<li>来自内部的攻击<ul>\n<li>主要指的是利用程序自身的漏洞，构造跨站语句</li>\n</ul>\n</li>\n<li>来自外部的攻击<ul>\n<li>主要指自己构造XSS跨站漏洞网页或者寻找非目标机以外的有跨站漏洞的网页。如当我们要渗透一个站点，我们自己构造一个有跨站漏洞的网页，然后构造跨站语句，通过结合其他技术，如社会工程学等，欺骗目标服务器的管理员打开。</li>\n</ul>\n</li>\n</ul>\n<p>XSS分为：<strong>存储型</strong>和<strong>反射型</strong></p>\n<ul>\n<li>存储型XSS：存储型XSS，持久化，代码是存储在服务其中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，用户访问该页面的时候触发代码执行。这种XSS比较危险，容易造成蠕虫，盗窃cookie（虽然还有种DOM型XSS，但是也还是包括在存储型XSS内）。</li>\n<li>反射型XSS：非持久化，需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。</li>\n</ul>\n<h3 id=\"攻击手段和目的\"><a href=\"#攻击手段和目的\" class=\"headerlink\" title=\"攻击手段和目的\"></a>攻击手段和目的</h3><p>攻击者使被攻击者在浏览器中执行脚本后，如果需要收集来自被攻击者的数据（如cookie或其他敏感信息），可以自行架设一个网站，让被攻击者通过JavaScript等方式把收集好的数据作为参数提交，随后以数据库等形式记录在攻击者自己的服务器上。</p>\n<p>常用的XSS攻击手段和目的有：</p>\n<ul>\n<li>盗用cookie，获取敏感信息。</li>\n<li>利用植入Flash，通过crossdomain权限设置进一步获取更高权限；或者利用Java等得到类似的操作。</li>\n<li>利用iframe、frame、XMLHttpRequest或上述Flash等方式，以（被攻击）用户的身份执行一些管理动作，或执行一些一般的如发微博、加好友、发私信等操作。</li>\n<li>利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动。</li>\n<li>在访问量极大的一些页面上的XSS可以攻击一些小型网站，实现DDoS攻击的效果。</li>\n</ul>\n<h3 id=\"漏洞的防御和利用\"><a href=\"#漏洞的防御和利用\" class=\"headerlink\" title=\"漏洞的防御和利用\"></a>漏洞的防御和利用</h3><h4 id=\"过滤特殊字符\"><a href=\"#过滤特殊字符\" class=\"headerlink\" title=\"过滤特殊字符\"></a>过滤特殊字符</h4><p>避免XSS的方法之一主要是将用户所提供的内容进行过滤，许多语言都有提供对HTML的过滤：</p>\n<ul>\n<li>PHP的htmlentities()或是htmlspecialchars()。</li>\n<li>Python的cgi.escape()。</li>\n<li>ASP的Server.HTMLEncode()。</li>\n<li>ASP.NET的Server.HtmlEncode()或功能更强的Microsoft Anti-Cross Site Scripting Library</li>\n<li>Java的xssprotect (Open Source Library)。</li>\n<li>Node.js的node-validator。</li>\n</ul>\n<h4 id=\"使用HTTP头指定类型\"><a href=\"#使用HTTP头指定类型\" class=\"headerlink\" title=\"使用HTTP头指定类型\"></a>使用HTTP头指定类型</h4><p>很多时候可以使用HTTP头指定内容的类型，使得输出的内容避免被作为HTML解析。如在PHP语言中使用以下代码：<br><code>&lt;?php header(&#39;Content-Type: text/javascript; charset=utf-8&#39;); ?&gt;</code><br>即可强行指定输出内容为文本/JavaScript脚本（顺便指定了内容编码），而非可以引发攻击的HTML。</p>\n<h4 id=\"用户方面\"><a href=\"#用户方面\" class=\"headerlink\" title=\"用户方面\"></a>用户方面</h4><p>包括Internet Explorer、Mozilla Firefox在内的大多数浏览器皆有关闭JavaScript的选项，但关闭功能并非是最好的方法，因为许多网站都需要使用JavaScript语言才能正常运作。通常来说，一个经常有安全更新推出的浏览器，在使用上会比很久都没有更新的浏览器更为安全。</p>\n<h2 id=\"CRSF（Cross-site-request-forgery）跨站请求伪造\"><a href=\"#CRSF（Cross-site-request-forgery）跨站请求伪造\" class=\"headerlink\" title=\"CRSF（Cross-site request forgery）跨站请求伪造\"></a>CRSF（Cross-site request forgery）跨站请求伪造</h2><p>跨站请求伪造是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p>\n<ul>\n<li>XSS 利用的是用户对指定网站的信任</li>\n<li>CSRF 利用的是网站对用户网页浏览器的信任</li>\n</ul>\n<p>跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去运行。这利用了web中用户身份验证的一个漏洞：<strong><em>简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。</em></strong></p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>例子<br>假如一家银行用以运行转账操作的URL地址如下：<br><code>http://www.examplebank.com/withdraw?account=AccoutName&amp;amount=1000&amp;for=PayeeName</code><br>那么，一个恶意攻击者可以在另一个网站上放置如下代码：<br><code>&lt;img src=&quot;http://www.examplebank.com/withdraw?account=Alice&amp;amount=1000&amp;for=Badman&quot;&gt;</code><br>如果有账户名为Alice的用户访问了恶意站点，而她之前刚访问过银行不久，登录信息尚未过期，那么她就会损失1000资金。<br>这种恶意的网址可以有很多种形式，藏身于网页中的许多地方。此外，攻击者也不需要控制放置恶意网址的网站。例如他可以将这种地址藏在论坛，博客等任何用户生成内容的网站中。这意味着<strong><em>如果服务端没有合适的防御措施的话，用户即使访问熟悉的可信网站也有受攻击的危险</em></strong>。<br>透过例子能够看出，攻击者并不能通过CSRF攻击来直接获取用户的账户控制权，也不能直接窃取用户的任何信息。他们能做到的，是<strong><em>欺骗用户浏览器，让其以用户的名义运行操作。</em></strong></p>\n<h3 id=\"防御措施\"><a href=\"#防御措施\" class=\"headerlink\" title=\"防御措施\"></a>防御措施</h3><h4 id=\"检查Referer（参照）字段\"><a href=\"#检查Referer（参照）字段\" class=\"headerlink\" title=\"检查Referer（参照）字段\"></a>检查Referer（参照）字段</h4><p>HTTP头中有一个Referer字段，这个字段用以标明请求来源于哪个地址。在处理敏感数据请求时，通常来说，Referer字段应和请求的地址位于同一域名下。以上文银行操作为例，Referer字段地址通常应该是转账按钮所在的网页地址，应该也位于<a href=\"http://www.examplebank.com之下。而如果是CSRF攻击传来的请求，Referer字段会是包含恶意网址的地址，不会位于www.examplebank.com之下，这时候服务器就能识别出恶意的访问。\" target=\"_blank\" rel=\"noopener\">www.examplebank.com之下。而如果是CSRF攻击传来的请求，Referer字段会是包含恶意网址的地址，不会位于www.examplebank.com之下，这时候服务器就能识别出恶意的访问。</a><br>这种办法简单易行，工作量低，仅需要在关键访问处增加一步校验。但这种办法也有其局限性，因其完全依赖浏览器发送正确的Referer字段。虽然http协议对此字段的内容有明确的规定，但并无法保证来访的浏览器的具体实现，亦无法保证浏览器没有安全漏洞影响到此字段。并且也存在攻击者攻击某些浏览器，篡改其Referer字段的可能。</p>\n<h4 id=\"添加校验token\"><a href=\"#添加校验token\" class=\"headerlink\" title=\"添加校验token\"></a>添加校验token</h4><p>由于CSRF的本质在于攻击者欺骗用户去访问自己设置的地址，所以如果要求在访问敏感数据请求时，要求用户浏览器提供不保存在cookie中，并且攻击者无法伪造的数据作为校验，那么攻击者就无法再运行CSRF攻击。这种数据通常是窗体中的一个数据项。服务器将其生成并附加在窗体中，其内容是一个伪随机数。当客户端通过窗体提交请求时，这个伪随机数也一并提交上去以供校验。正常的访问时，客户端浏览器能够正确得到并传回这个伪随机数，而通过CSRF传来的欺骗性攻击中，攻击者无从事先得知这个伪随机数的值，服务端就会因为校验token的值为空或者错误，拒绝这个可疑请求。</p>"},{"title":"前端常见知识点整理 ---- this","date":"2020-01-02T12:59:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# `this` \nthis 是很多人会混淆的概念，但是其实他一点都不难，你只需要记住几个规则就可以了。\n\n```\n// js代码\n\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar a = 1\nfoo()\n\nvar obj = {\n\ta: 2,\n\tfoo: foo\n}\nobj.foo()\n\n// 以上两者情况 `this` 只依赖于调用函数前的对象，优先级是第二个情况大于第一个情况\n\n// 以下情况是优先级最高的，`this` 只会绑定在 `c` 上，不会被任何方式修改 `this` 指向\nvar c = new foo()\nc.a = 3\nconsole.log(c.a)\n\n// 还有种就是利用 `call` ， `apply` ， `bind` 改变 `this` ，这个优先级仅次于 `new`\n```\n以上几种情况明白了，很多代码中的 `this` 应该就没什么问题了，下面让我们看看箭头函数中的 `this`\n\n```\n// js代码\n\nfunction a() {\n    return () => {\n        return () => {\n        \tconsole.log(this)\n        }\n    }\n}\nconsole.log(a()()())\n```\n箭头函数其实是没有 `this` 的，这个函数中的 `this` 只取决于他外面的第一个不是箭头函数的函数的 `this` 。在这个例子中，因为调用 `a` 符合前面代码中的第一个情况，所以 `this` 是 `window。并且` this 一旦绑定了上下文，就不会被任何代码改变。\n","source":"_posts/FE-guide-this.md","raw":"---\ntitle: 前端常见知识点整理 ---- this\ndate: 2020-01-02 20:59:22\ncategories: \n\t- 前端技术\n\t- 前端常见知识点整理\ntags: \n\t- 面试\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# `this` \nthis 是很多人会混淆的概念，但是其实他一点都不难，你只需要记住几个规则就可以了。\n\n```\n// js代码\n\nfunction foo() {\n\tconsole.log(this.a)\n}\nvar a = 1\nfoo()\n\nvar obj = {\n\ta: 2,\n\tfoo: foo\n}\nobj.foo()\n\n// 以上两者情况 `this` 只依赖于调用函数前的对象，优先级是第二个情况大于第一个情况\n\n// 以下情况是优先级最高的，`this` 只会绑定在 `c` 上，不会被任何方式修改 `this` 指向\nvar c = new foo()\nc.a = 3\nconsole.log(c.a)\n\n// 还有种就是利用 `call` ， `apply` ， `bind` 改变 `this` ，这个优先级仅次于 `new`\n```\n以上几种情况明白了，很多代码中的 `this` 应该就没什么问题了，下面让我们看看箭头函数中的 `this`\n\n```\n// js代码\n\nfunction a() {\n    return () => {\n        return () => {\n        \tconsole.log(this)\n        }\n    }\n}\nconsole.log(a()()())\n```\n箭头函数其实是没有 `this` 的，这个函数中的 `this` 只取决于他外面的第一个不是箭头函数的函数的 `this` 。在这个例子中，因为调用 `a` 符合前面代码中的第一个情况，所以 `this` 是 `window。并且` this 一旦绑定了上下文，就不会被任何代码改变。\n","slug":"FE-guide-this","published":1,"updated":"2020-04-02T03:20:12.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gryf0028ooa69y5r2yev","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a><code>this</code></h1><p>this 是很多人会混淆的概念，但是其实他一点都不难，你只需要记住几个规则就可以了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a &#x3D; 1</span><br><span class=\"line\">foo()</span><br><span class=\"line\"></span><br><span class=\"line\">var obj &#x3D; &#123;</span><br><span class=\"line\">\ta: 2,</span><br><span class=\"line\">\tfoo: foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.foo()</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 以上两者情况 &#96;this&#96; 只依赖于调用函数前的对象，优先级是第二个情况大于第一个情况</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 以下情况是优先级最高的，&#96;this&#96; 只会绑定在 &#96;c&#96; 上，不会被任何方式修改 &#96;this&#96; 指向</span><br><span class=\"line\">var c &#x3D; new foo()</span><br><span class=\"line\">c.a &#x3D; 3</span><br><span class=\"line\">console.log(c.a)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 还有种就是利用 &#96;call&#96; ， &#96;apply&#96; ， &#96;bind&#96; 改变 &#96;this&#96; ，这个优先级仅次于 &#96;new&#96;</span><br></pre></td></tr></table></figure>\n<p>以上几种情况明白了，很多代码中的 <code>this</code> 应该就没什么问题了，下面让我们看看箭头函数中的 <code>this</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function a() &#123;</span><br><span class=\"line\">    return () &#x3D;&gt; &#123;</span><br><span class=\"line\">        return () &#x3D;&gt; &#123;</span><br><span class=\"line\">        \tconsole.log(this)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(a()()())</span><br></pre></td></tr></table></figure>\n<p>箭头函数其实是没有 <code>this</code> 的，这个函数中的 <code>this</code> 只取决于他外面的第一个不是箭头函数的函数的 <code>this</code> 。在这个例子中，因为调用 <code>a</code> 符合前面代码中的第一个情况，所以 <code>this</code> 是 <code>window。并且</code> this 一旦绑定了上下文，就不会被任何代码改变。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a><code>this</code></h1><p>this 是很多人会混淆的概念，但是其实他一点都不难，你只需要记住几个规则就可以了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">\tconsole.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a &#x3D; 1</span><br><span class=\"line\">foo()</span><br><span class=\"line\"></span><br><span class=\"line\">var obj &#x3D; &#123;</span><br><span class=\"line\">\ta: 2,</span><br><span class=\"line\">\tfoo: foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.foo()</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 以上两者情况 &#96;this&#96; 只依赖于调用函数前的对象，优先级是第二个情况大于第一个情况</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 以下情况是优先级最高的，&#96;this&#96; 只会绑定在 &#96;c&#96; 上，不会被任何方式修改 &#96;this&#96; 指向</span><br><span class=\"line\">var c &#x3D; new foo()</span><br><span class=\"line\">c.a &#x3D; 3</span><br><span class=\"line\">console.log(c.a)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 还有种就是利用 &#96;call&#96; ， &#96;apply&#96; ， &#96;bind&#96; 改变 &#96;this&#96; ，这个优先级仅次于 &#96;new&#96;</span><br></pre></td></tr></table></figure>\n<p>以上几种情况明白了，很多代码中的 <code>this</code> 应该就没什么问题了，下面让我们看看箭头函数中的 <code>this</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">function a() &#123;</span><br><span class=\"line\">    return () &#x3D;&gt; &#123;</span><br><span class=\"line\">        return () &#x3D;&gt; &#123;</span><br><span class=\"line\">        \tconsole.log(this)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(a()()())</span><br></pre></td></tr></table></figure>\n<p>箭头函数其实是没有 <code>this</code> 的，这个函数中的 <code>this</code> 只取决于他外面的第一个不是箭头函数的函数的 <code>this</code> 。在这个例子中，因为调用 <code>a</code> 符合前面代码中的第一个情况，所以 <code>this</code> 是 <code>window。并且</code> this 一旦绑定了上下文，就不会被任何代码改变。</p>\n"},{"title":"介绍一个好用的doc展示库 ---- vuepress","date":"2020-01-05T09:59:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言 \n最近在做公司技术规范，需要能通过 `B/S` 方式进行分发，起初想法是做一个网站，用 `html` 的方式进行书写，但是后面感觉太麻烦了，所以就放弃了，偶然间看到有工具可以直接通过 `md` 文件编译生成网站，就像是 `hexo` 博客这样，我觉得这挺好，极大的节省了开发网站所需要的时间，只需要专注于内容就好了，所以我就研究了下来，整个了解过程中有这么两个工具映入了我的眼帘，一个是 `doctify`，另外一个就是今天的主角 `vuepress` 。\n<!-- more -->\n\n# `vuepress` 何许\n","source":"_posts/FE-guide-vuepress.md","raw":"---\ntitle: 介绍一个好用的doc展示库 ---- vuepress\ndate: 2020-01-05 17:59:22\ncategories: \n\t- 效率工具\ntags: \n\t- 工具分享\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言 \n最近在做公司技术规范，需要能通过 `B/S` 方式进行分发，起初想法是做一个网站，用 `html` 的方式进行书写，但是后面感觉太麻烦了，所以就放弃了，偶然间看到有工具可以直接通过 `md` 文件编译生成网站，就像是 `hexo` 博客这样，我觉得这挺好，极大的节省了开发网站所需要的时间，只需要专注于内容就好了，所以我就研究了下来，整个了解过程中有这么两个工具映入了我的眼帘，一个是 `doctify`，另外一个就是今天的主角 `vuepress` 。\n<!-- more -->\n\n# `vuepress` 何许\n","slug":"FE-guide-vuepress","published":1,"updated":"2020-04-02T03:20:12.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gryg002booa68lsf8m98","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在做公司技术规范，需要能通过 <code>B/S</code> 方式进行分发，起初想法是做一个网站，用 <code>html</code> 的方式进行书写，但是后面感觉太麻烦了，所以就放弃了，偶然间看到有工具可以直接通过 <code>md</code> 文件编译生成网站，就像是 <code>hexo</code> 博客这样，我觉得这挺好，极大的节省了开发网站所需要的时间，只需要专注于内容就好了，所以我就研究了下来，整个了解过程中有这么两个工具映入了我的眼帘，一个是 <code>doctify</code>，另外一个就是今天的主角 <code>vuepress</code> 。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"vuepress-何许\"><a href=\"#vuepress-何许\" class=\"headerlink\" title=\"vuepress 何许\"></a><code>vuepress</code> 何许</h1>","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在做公司技术规范，需要能通过 <code>B/S</code> 方式进行分发，起初想法是做一个网站，用 <code>html</code> 的方式进行书写，但是后面感觉太麻烦了，所以就放弃了，偶然间看到有工具可以直接通过 <code>md</code> 文件编译生成网站，就像是 <code>hexo</code> 博客这样，我觉得这挺好，极大的节省了开发网站所需要的时间，只需要专注于内容就好了，所以我就研究了下来，整个了解过程中有这么两个工具映入了我的眼帘，一个是 <code>doctify</code>，另外一个就是今天的主角 <code>vuepress</code> 。</p>","more":"<h1 id=\"vuepress-何许\"><a href=\"#vuepress-何许\" class=\"headerlink\" title=\"vuepress 何许\"></a><code>vuepress</code> 何许</h1>"},{"title":"Git的常用命令","date":"2017-12-12T12:20:20.000Z","_content":"\n> 作者：李旭光\n> 引用请标明出处\n\n## 指令表\n\n| 指令                                   | 含义                        | 备注      |\n| -------------------------------------- | --------------------------- | --------- |\n| git add .                              | 提示增加文件                | .代表所有 |\n| git commit -m                          | \"说明内容\" 提交到本地服务器 |           |\n| git status                             | 显示修改信息                |           |\n| git pull                               | 从网络服务器拉 更新最新版本 |           |\n| git push                               | 上传最新版本                |           |\n| git branch                             | 查看当前分支                |           |\n| git checkout develop                   | 切换到develop模式           |           |\n| git merge master                       | 从master合并过来            |           |\n| git push origin develop                | 提交                        |           |\n| git clone git@192.168.2.10:bat-web.git | 从服务器克隆                |           |\n","source":"_posts/Git-Shell.md","raw":"---\ntitle: Git的常用命令\ndate: 2017-12-12 20:20:20\ncategories: \n  - 前端技术\ntags: \n  - Git\n---\n\n> 作者：李旭光\n> 引用请标明出处\n\n## 指令表\n\n| 指令                                   | 含义                        | 备注      |\n| -------------------------------------- | --------------------------- | --------- |\n| git add .                              | 提示增加文件                | .代表所有 |\n| git commit -m                          | \"说明内容\" 提交到本地服务器 |           |\n| git status                             | 显示修改信息                |           |\n| git pull                               | 从网络服务器拉 更新最新版本 |           |\n| git push                               | 上传最新版本                |           |\n| git branch                             | 查看当前分支                |           |\n| git checkout develop                   | 切换到develop模式           |           |\n| git merge master                       | 从master合并过来            |           |\n| git push origin develop                | 提交                        |           |\n| git clone git@192.168.2.10:bat-web.git | 从服务器克隆                |           |\n","slug":"Git-Shell","published":1,"updated":"2019-12-31T10:38:57.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gryi002eooa6hdu283mg","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h2 id=\"指令表\"><a href=\"#指令表\" class=\"headerlink\" title=\"指令表\"></a>指令表</h2><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>含义</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git add .</td>\n<td>提示增加文件</td>\n<td>.代表所有</td>\n</tr>\n<tr>\n<td>git commit -m</td>\n<td>“说明内容” 提交到本地服务器</td>\n<td></td>\n</tr>\n<tr>\n<td>git status</td>\n<td>显示修改信息</td>\n<td></td>\n</tr>\n<tr>\n<td>git pull</td>\n<td>从网络服务器拉 更新最新版本</td>\n<td></td>\n</tr>\n<tr>\n<td>git push</td>\n<td>上传最新版本</td>\n<td></td>\n</tr>\n<tr>\n<td>git branch</td>\n<td>查看当前分支</td>\n<td></td>\n</tr>\n<tr>\n<td>git checkout develop</td>\n<td>切换到develop模式</td>\n<td></td>\n</tr>\n<tr>\n<td>git merge master</td>\n<td>从master合并过来</td>\n<td></td>\n</tr>\n<tr>\n<td>git push origin develop</td>\n<td>提交</td>\n<td></td>\n</tr>\n<tr>\n<td>git clone <a href=\"mailto:git@192.168.2.10\">git@192.168.2.10</a>:bat-web.git</td>\n<td>从服务器克隆</td>\n<td></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h2 id=\"指令表\"><a href=\"#指令表\" class=\"headerlink\" title=\"指令表\"></a>指令表</h2><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>含义</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git add .</td>\n<td>提示增加文件</td>\n<td>.代表所有</td>\n</tr>\n<tr>\n<td>git commit -m</td>\n<td>“说明内容” 提交到本地服务器</td>\n<td></td>\n</tr>\n<tr>\n<td>git status</td>\n<td>显示修改信息</td>\n<td></td>\n</tr>\n<tr>\n<td>git pull</td>\n<td>从网络服务器拉 更新最新版本</td>\n<td></td>\n</tr>\n<tr>\n<td>git push</td>\n<td>上传最新版本</td>\n<td></td>\n</tr>\n<tr>\n<td>git branch</td>\n<td>查看当前分支</td>\n<td></td>\n</tr>\n<tr>\n<td>git checkout develop</td>\n<td>切换到develop模式</td>\n<td></td>\n</tr>\n<tr>\n<td>git merge master</td>\n<td>从master合并过来</td>\n<td></td>\n</tr>\n<tr>\n<td>git push origin develop</td>\n<td>提交</td>\n<td></td>\n</tr>\n<tr>\n<td>git clone <a href=\"mailto:git@192.168.2.10\">git@192.168.2.10</a>:bat-web.git</td>\n<td>从服务器克隆</td>\n<td></td>\n</tr>\n</tbody></table>\n"},{"title":"前端常见知识点整理 ---- 执行上下文","date":"2020-01-02T13:18:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 执行上下文\n当执行 `JS` 代码时，会产生三种执行上下文\n\n- 全局执行上下文\n- 函数执行上下文\n- `eval` 执行上下文\n\n每个执行上下文中都有三个重要的属性\n\n- 变量对象（ `VO` ），包含变量、函数声明和函数的形参，该属性只能在全局上下文中访问\n- 作用域链（ `JS` 采用***词法作用域***，也就是说变量的作用域是在定义时就决定了）\n- this\n```\n// js代码\n\nvar a = 10\nfunction foo(i) {\n  var b = 20\n}\nfoo()\n```\n对于上述代码，执行栈中有两个上下文：全局上下文和函数 `foo` 上下文。\n```\n// js代码\n\nstack = [\n    globalContext,\n    fooContext\n]\n```\n对于全局上下文来说， `VO` 大概是这样的\n```\n// js代码\n\nglobalContext.VO === globe\nglobalContext.VO = {\n    a: undefined,\n\tfoo: <Function>,\n}\n```\n对于函数 `foo` 来说， `VO` 不能访问，只能访问到活动对象（ `AO` ）\n```\n// js代码\n\nfooContext.VO === foo.AO\nfooContext.AO {\n    i: undefined,\n\tb: undefined,\n    arguments: <>\n}\n// arguments 是函数独有的对象(箭头函数没有)\n// 该对象是一个伪数组，有 `length` 属性且可以通过下标访问元素\n// 该对象中的 `callee` 属性代表函数本身\n// `caller` 属性代表函数的调用者\n```\n对于作用域链，可以把它理解成包含自身变量对象和上级变量对象的列表，通过 `[[Scope]]` 属性查找上级变量\n```\n// js代码\n\nfooContext.[[Scope]] = [\n    globalContext.VO\n]\nfooContext.Scope = fooContext.[[Scope]] + fooContext.VO\nfooContext.Scope = [\n    fooContext.VO,\n    globalContext.VO\n]\n```\n接下来让我们看一个老生常谈的例子， `var`\n```\n// js代码\n\nb() // call b\nconsole.log(a) // undefined\n\nvar a = 'Hello world'\n\nfunction b() {\n\tconsole.log('call b')\n}\n```\n想必以上的输出大家肯定都已经明白了，这是因为函数和变量提升的原因。通常提升的解释是说将声明的代码移动到了顶部，这其实没有什么错误，便于大家理解。但是更准确的解释应该是：在生成执行上下文时，会有两个阶段。第一个阶段是创建的阶段（具体步骤是创建 `VO` ）， `JS` 解释器会找出需要提升的变量和函数，并且给他们提前在内存中开辟好空间，函数的话会将整个函数存入内存中，变量只声明并且赋值为 `undefined` ，所以在第二个阶段，也就是代码执行阶段，我们可以直接提前使用。\n\n在提升的过程中，相同的函数会覆盖上一个函数，并且函数优先于变量提升\n\n```\n// js代码\n\nb() // call b second\n\nfunction b() {\n\tconsole.log('call b fist')\n}\nfunction b() {\n\tconsole.log('call b second')\n}\nvar b = 'Hello world'\n```\n`var` 会产生很多错误，所以在 `ES6` 中引入了 `let` 。 `let` 不能在声明前使用，但是这并不是常说的 `let` 不会提升， `let` 提升了声明但没有赋值，因为临时死区导致了并不能在声明前使用。\n\n对于非匿名的立即执行函数需要注意以下一点\n\n```\n// js代码\n\nvar foo = 1\n(function foo() {\n    foo = 10\n    console.log(foo)\n}()) // -> ƒ foo() { foo = 10 ; console.log(foo) }\n```\n因为当 `JS` 解释器在遇到非匿名的立即执行函数时，会创建一个辅助的特定对象，然后将函数名称作为这个对象的属性，因此函数内部才可以访问到 `foo` ，但是这个值又是只读的，所以对它的赋值并不生效，所以打印的结果还是这个函数，并且外部的值也没有发生更改。\n\n```\n// js代码\n\nspecialObject = {};\n\nScope = specialObject + Scope;\n\nfoo = new FunctionExpression;\nfoo.[[Scope]] = Scope;\nspecialObject.foo = foo; // {DontDelete}, {ReadOnly}\n\ndelete Scope[0]; // remove specialObject from the front of scope chain\n```","source":"_posts/FE-guide-执行上下文.md","raw":"---\ntitle: 前端常见知识点整理 ---- 执行上下文\ndate: 2020-01-02 21:18:22\ncategories: \n    - 前端技术\n    - 前端常见知识点整理\ntags: \n\t- 面试\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 执行上下文\n当执行 `JS` 代码时，会产生三种执行上下文\n\n- 全局执行上下文\n- 函数执行上下文\n- `eval` 执行上下文\n\n每个执行上下文中都有三个重要的属性\n\n- 变量对象（ `VO` ），包含变量、函数声明和函数的形参，该属性只能在全局上下文中访问\n- 作用域链（ `JS` 采用***词法作用域***，也就是说变量的作用域是在定义时就决定了）\n- this\n```\n// js代码\n\nvar a = 10\nfunction foo(i) {\n  var b = 20\n}\nfoo()\n```\n对于上述代码，执行栈中有两个上下文：全局上下文和函数 `foo` 上下文。\n```\n// js代码\n\nstack = [\n    globalContext,\n    fooContext\n]\n```\n对于全局上下文来说， `VO` 大概是这样的\n```\n// js代码\n\nglobalContext.VO === globe\nglobalContext.VO = {\n    a: undefined,\n\tfoo: <Function>,\n}\n```\n对于函数 `foo` 来说， `VO` 不能访问，只能访问到活动对象（ `AO` ）\n```\n// js代码\n\nfooContext.VO === foo.AO\nfooContext.AO {\n    i: undefined,\n\tb: undefined,\n    arguments: <>\n}\n// arguments 是函数独有的对象(箭头函数没有)\n// 该对象是一个伪数组，有 `length` 属性且可以通过下标访问元素\n// 该对象中的 `callee` 属性代表函数本身\n// `caller` 属性代表函数的调用者\n```\n对于作用域链，可以把它理解成包含自身变量对象和上级变量对象的列表，通过 `[[Scope]]` 属性查找上级变量\n```\n// js代码\n\nfooContext.[[Scope]] = [\n    globalContext.VO\n]\nfooContext.Scope = fooContext.[[Scope]] + fooContext.VO\nfooContext.Scope = [\n    fooContext.VO,\n    globalContext.VO\n]\n```\n接下来让我们看一个老生常谈的例子， `var`\n```\n// js代码\n\nb() // call b\nconsole.log(a) // undefined\n\nvar a = 'Hello world'\n\nfunction b() {\n\tconsole.log('call b')\n}\n```\n想必以上的输出大家肯定都已经明白了，这是因为函数和变量提升的原因。通常提升的解释是说将声明的代码移动到了顶部，这其实没有什么错误，便于大家理解。但是更准确的解释应该是：在生成执行上下文时，会有两个阶段。第一个阶段是创建的阶段（具体步骤是创建 `VO` ）， `JS` 解释器会找出需要提升的变量和函数，并且给他们提前在内存中开辟好空间，函数的话会将整个函数存入内存中，变量只声明并且赋值为 `undefined` ，所以在第二个阶段，也就是代码执行阶段，我们可以直接提前使用。\n\n在提升的过程中，相同的函数会覆盖上一个函数，并且函数优先于变量提升\n\n```\n// js代码\n\nb() // call b second\n\nfunction b() {\n\tconsole.log('call b fist')\n}\nfunction b() {\n\tconsole.log('call b second')\n}\nvar b = 'Hello world'\n```\n`var` 会产生很多错误，所以在 `ES6` 中引入了 `let` 。 `let` 不能在声明前使用，但是这并不是常说的 `let` 不会提升， `let` 提升了声明但没有赋值，因为临时死区导致了并不能在声明前使用。\n\n对于非匿名的立即执行函数需要注意以下一点\n\n```\n// js代码\n\nvar foo = 1\n(function foo() {\n    foo = 10\n    console.log(foo)\n}()) // -> ƒ foo() { foo = 10 ; console.log(foo) }\n```\n因为当 `JS` 解释器在遇到非匿名的立即执行函数时，会创建一个辅助的特定对象，然后将函数名称作为这个对象的属性，因此函数内部才可以访问到 `foo` ，但是这个值又是只读的，所以对它的赋值并不生效，所以打印的结果还是这个函数，并且外部的值也没有发生更改。\n\n```\n// js代码\n\nspecialObject = {};\n\nScope = specialObject + Scope;\n\nfoo = new FunctionExpression;\nfoo.[[Scope]] = Scope;\nspecialObject.foo = foo; // {DontDelete}, {ReadOnly}\n\ndelete Scope[0]; // remove specialObject from the front of scope chain\n```","slug":"FE-guide-执行上下文","published":1,"updated":"2020-04-02T03:20:12.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gryj002gooa66ndh16qr","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"执行上下文\"><a href=\"#执行上下文\" class=\"headerlink\" title=\"执行上下文\"></a>执行上下文</h1><p>当执行 <code>JS</code> 代码时，会产生三种执行上下文</p>\n<ul>\n<li>全局执行上下文</li>\n<li>函数执行上下文</li>\n<li><code>eval</code> 执行上下文</li>\n</ul>\n<p>每个执行上下文中都有三个重要的属性</p>\n<ul>\n<li>变量对象（ <code>VO</code> ），包含变量、函数声明和函数的形参，该属性只能在全局上下文中访问</li>\n<li>作用域链（ <code>JS</code> 采用<strong><em>词法作用域</em></strong>，也就是说变量的作用域是在定义时就决定了）</li>\n<li>this<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">var a &#x3D; 10</span><br><span class=\"line\">function foo(i) &#123;</span><br><span class=\"line\">  var b &#x3D; 20</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n对于上述代码，执行栈中有两个上下文：全局上下文和函数 <code>foo</code> 上下文。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">stack &#x3D; [</span><br><span class=\"line\">    globalContext,</span><br><span class=\"line\">    fooContext</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n对于全局上下文来说， <code>VO</code> 大概是这样的<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">globalContext.VO &#x3D;&#x3D;&#x3D; globe</span><br><span class=\"line\">globalContext.VO &#x3D; &#123;</span><br><span class=\"line\">    a: undefined,</span><br><span class=\"line\">\tfoo: &lt;Function&gt;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n对于函数 <code>foo</code> 来说， <code>VO</code> 不能访问，只能访问到活动对象（ <code>AO</code> ）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">fooContext.VO &#x3D;&#x3D;&#x3D; foo.AO</span><br><span class=\"line\">fooContext.AO &#123;</span><br><span class=\"line\">    i: undefined,</span><br><span class=\"line\">\tb: undefined,</span><br><span class=\"line\">    arguments: &lt;&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; arguments 是函数独有的对象(箭头函数没有)</span><br><span class=\"line\">&#x2F;&#x2F; 该对象是一个伪数组，有 &#96;length&#96; 属性且可以通过下标访问元素</span><br><span class=\"line\">&#x2F;&#x2F; 该对象中的 &#96;callee&#96; 属性代表函数本身</span><br><span class=\"line\">&#x2F;&#x2F; &#96;caller&#96; 属性代表函数的调用者</span><br></pre></td></tr></table></figure>\n对于作用域链，可以把它理解成包含自身变量对象和上级变量对象的列表，通过 <code>[[Scope]]</code> 属性查找上级变量<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">fooContext.[[Scope]] &#x3D; [</span><br><span class=\"line\">    globalContext.VO</span><br><span class=\"line\">]</span><br><span class=\"line\">fooContext.Scope &#x3D; fooContext.[[Scope]] + fooContext.VO</span><br><span class=\"line\">fooContext.Scope &#x3D; [</span><br><span class=\"line\">    fooContext.VO,</span><br><span class=\"line\">    globalContext.VO</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n接下来让我们看一个老生常谈的例子， <code>var</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">b() &#x2F;&#x2F; call b</span><br><span class=\"line\">console.log(a) &#x2F;&#x2F; undefined</span><br><span class=\"line\"></span><br><span class=\"line\">var a &#x3D; &#39;Hello world&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">function b() &#123;</span><br><span class=\"line\">\tconsole.log(&#39;call b&#39;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n想必以上的输出大家肯定都已经明白了，这是因为函数和变量提升的原因。通常提升的解释是说将声明的代码移动到了顶部，这其实没有什么错误，便于大家理解。但是更准确的解释应该是：在生成执行上下文时，会有两个阶段。第一个阶段是创建的阶段（具体步骤是创建 <code>VO</code> ）， <code>JS</code> 解释器会找出需要提升的变量和函数，并且给他们提前在内存中开辟好空间，函数的话会将整个函数存入内存中，变量只声明并且赋值为 <code>undefined</code> ，所以在第二个阶段，也就是代码执行阶段，我们可以直接提前使用。</li>\n</ul>\n<p>在提升的过程中，相同的函数会覆盖上一个函数，并且函数优先于变量提升</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">b() &#x2F;&#x2F; call b second</span><br><span class=\"line\"></span><br><span class=\"line\">function b() &#123;</span><br><span class=\"line\">\tconsole.log(&#39;call b fist&#39;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function b() &#123;</span><br><span class=\"line\">\tconsole.log(&#39;call b second&#39;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var b &#x3D; &#39;Hello world&#39;</span><br></pre></td></tr></table></figure>\n<p><code>var</code> 会产生很多错误，所以在 <code>ES6</code> 中引入了 <code>let</code> 。 <code>let</code> 不能在声明前使用，但是这并不是常说的 <code>let</code> 不会提升， <code>let</code> 提升了声明但没有赋值，因为临时死区导致了并不能在声明前使用。</p>\n<p>对于非匿名的立即执行函数需要注意以下一点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">var foo &#x3D; 1</span><br><span class=\"line\">(function foo() &#123;</span><br><span class=\"line\">    foo &#x3D; 10</span><br><span class=\"line\">    console.log(foo)</span><br><span class=\"line\">&#125;()) &#x2F;&#x2F; -&gt; ƒ foo() &#123; foo &#x3D; 10 ; console.log(foo) &#125;</span><br></pre></td></tr></table></figure>\n<p>因为当 <code>JS</code> 解释器在遇到非匿名的立即执行函数时，会创建一个辅助的特定对象，然后将函数名称作为这个对象的属性，因此函数内部才可以访问到 <code>foo</code> ，但是这个值又是只读的，所以对它的赋值并不生效，所以打印的结果还是这个函数，并且外部的值也没有发生更改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">specialObject &#x3D; &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Scope &#x3D; specialObject + Scope;</span><br><span class=\"line\"></span><br><span class=\"line\">foo &#x3D; new FunctionExpression;</span><br><span class=\"line\">foo.[[Scope]] &#x3D; Scope;</span><br><span class=\"line\">specialObject.foo &#x3D; foo; &#x2F;&#x2F; &#123;DontDelete&#125;, &#123;ReadOnly&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delete Scope[0]; &#x2F;&#x2F; remove specialObject from the front of scope chain</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"执行上下文\"><a href=\"#执行上下文\" class=\"headerlink\" title=\"执行上下文\"></a>执行上下文</h1><p>当执行 <code>JS</code> 代码时，会产生三种执行上下文</p>\n<ul>\n<li>全局执行上下文</li>\n<li>函数执行上下文</li>\n<li><code>eval</code> 执行上下文</li>\n</ul>\n<p>每个执行上下文中都有三个重要的属性</p>\n<ul>\n<li>变量对象（ <code>VO</code> ），包含变量、函数声明和函数的形参，该属性只能在全局上下文中访问</li>\n<li>作用域链（ <code>JS</code> 采用<strong><em>词法作用域</em></strong>，也就是说变量的作用域是在定义时就决定了）</li>\n<li>this<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">var a &#x3D; 10</span><br><span class=\"line\">function foo(i) &#123;</span><br><span class=\"line\">  var b &#x3D; 20</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n对于上述代码，执行栈中有两个上下文：全局上下文和函数 <code>foo</code> 上下文。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">stack &#x3D; [</span><br><span class=\"line\">    globalContext,</span><br><span class=\"line\">    fooContext</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n对于全局上下文来说， <code>VO</code> 大概是这样的<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">globalContext.VO &#x3D;&#x3D;&#x3D; globe</span><br><span class=\"line\">globalContext.VO &#x3D; &#123;</span><br><span class=\"line\">    a: undefined,</span><br><span class=\"line\">\tfoo: &lt;Function&gt;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n对于函数 <code>foo</code> 来说， <code>VO</code> 不能访问，只能访问到活动对象（ <code>AO</code> ）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">fooContext.VO &#x3D;&#x3D;&#x3D; foo.AO</span><br><span class=\"line\">fooContext.AO &#123;</span><br><span class=\"line\">    i: undefined,</span><br><span class=\"line\">\tb: undefined,</span><br><span class=\"line\">    arguments: &lt;&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; arguments 是函数独有的对象(箭头函数没有)</span><br><span class=\"line\">&#x2F;&#x2F; 该对象是一个伪数组，有 &#96;length&#96; 属性且可以通过下标访问元素</span><br><span class=\"line\">&#x2F;&#x2F; 该对象中的 &#96;callee&#96; 属性代表函数本身</span><br><span class=\"line\">&#x2F;&#x2F; &#96;caller&#96; 属性代表函数的调用者</span><br></pre></td></tr></table></figure>\n对于作用域链，可以把它理解成包含自身变量对象和上级变量对象的列表，通过 <code>[[Scope]]</code> 属性查找上级变量<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">fooContext.[[Scope]] &#x3D; [</span><br><span class=\"line\">    globalContext.VO</span><br><span class=\"line\">]</span><br><span class=\"line\">fooContext.Scope &#x3D; fooContext.[[Scope]] + fooContext.VO</span><br><span class=\"line\">fooContext.Scope &#x3D; [</span><br><span class=\"line\">    fooContext.VO,</span><br><span class=\"line\">    globalContext.VO</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n接下来让我们看一个老生常谈的例子， <code>var</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">b() &#x2F;&#x2F; call b</span><br><span class=\"line\">console.log(a) &#x2F;&#x2F; undefined</span><br><span class=\"line\"></span><br><span class=\"line\">var a &#x3D; &#39;Hello world&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">function b() &#123;</span><br><span class=\"line\">\tconsole.log(&#39;call b&#39;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n想必以上的输出大家肯定都已经明白了，这是因为函数和变量提升的原因。通常提升的解释是说将声明的代码移动到了顶部，这其实没有什么错误，便于大家理解。但是更准确的解释应该是：在生成执行上下文时，会有两个阶段。第一个阶段是创建的阶段（具体步骤是创建 <code>VO</code> ）， <code>JS</code> 解释器会找出需要提升的变量和函数，并且给他们提前在内存中开辟好空间，函数的话会将整个函数存入内存中，变量只声明并且赋值为 <code>undefined</code> ，所以在第二个阶段，也就是代码执行阶段，我们可以直接提前使用。</li>\n</ul>\n<p>在提升的过程中，相同的函数会覆盖上一个函数，并且函数优先于变量提升</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">b() &#x2F;&#x2F; call b second</span><br><span class=\"line\"></span><br><span class=\"line\">function b() &#123;</span><br><span class=\"line\">\tconsole.log(&#39;call b fist&#39;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function b() &#123;</span><br><span class=\"line\">\tconsole.log(&#39;call b second&#39;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var b &#x3D; &#39;Hello world&#39;</span><br></pre></td></tr></table></figure>\n<p><code>var</code> 会产生很多错误，所以在 <code>ES6</code> 中引入了 <code>let</code> 。 <code>let</code> 不能在声明前使用，但是这并不是常说的 <code>let</code> 不会提升， <code>let</code> 提升了声明但没有赋值，因为临时死区导致了并不能在声明前使用。</p>\n<p>对于非匿名的立即执行函数需要注意以下一点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">var foo &#x3D; 1</span><br><span class=\"line\">(function foo() &#123;</span><br><span class=\"line\">    foo &#x3D; 10</span><br><span class=\"line\">    console.log(foo)</span><br><span class=\"line\">&#125;()) &#x2F;&#x2F; -&gt; ƒ foo() &#123; foo &#x3D; 10 ; console.log(foo) &#125;</span><br></pre></td></tr></table></figure>\n<p>因为当 <code>JS</code> 解释器在遇到非匿名的立即执行函数时，会创建一个辅助的特定对象，然后将函数名称作为这个对象的属性，因此函数内部才可以访问到 <code>foo</code> ，但是这个值又是只读的，所以对它的赋值并不生效，所以打印的结果还是这个函数，并且外部的值也没有发生更改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">specialObject &#x3D; &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Scope &#x3D; specialObject + Scope;</span><br><span class=\"line\"></span><br><span class=\"line\">foo &#x3D; new FunctionExpression;</span><br><span class=\"line\">foo.[[Scope]] &#x3D; Scope;</span><br><span class=\"line\">specialObject.foo &#x3D; foo; &#x2F;&#x2F; &#123;DontDelete&#125;, &#123;ReadOnly&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">delete Scope[0]; &#x2F;&#x2F; remove specialObject from the front of scope chain</span><br></pre></td></tr></table></figure>"},{"title":"再见2019","date":"2019-12-31T15:50:59.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n不知不觉又是一年，今天是2019年的最后一天，也是我30岁的最后一天，回顾这一年有收获有遗憾。翻出了18年的总结，看到了18年底对于自己19年的规划，现在回过头来看看哪些完成了。\n# 18年底定的计划\n## 学习技术\n### 1. 深入学习客户端开发（全年）\n18年客户端的项目也做了几个，Electron的开发能力经验更多了，之前只是用html+css+js做前端页面的开发，今年又增加了跟vue框架的结合，成功在多个项目中实践，只是一直没有形成规范感觉还是少了一环，原来一直在犹豫Electron到底算不算前端的技术栈之一，后来也算是想明白了，大前端范畴，只要是面向用户的都算是前端该做的范畴，所以Electron当然也算是前端应该掌握的技术栈，20年会继续学习客户端技术，把公司相关规范制定和落地。\n\n### 2. 学习前端自动化测试相关知识（2019年3月前）\n18年关注了前端自动化测试相关的知识，本打算19年好好学习一下，在公司项目中实践，但是今年前后端工作量大增，前端人员的精力有限，加之成本的考虑，并没有开展起来，不过这方面的技能储备已经具备了，年底两次关于前端自动化的测试也将前端自动化的思想普及到了公司前端的团队里，20年是公司强调质量的一年，相信20年前端自动化测试将有机会在公司一些项目中落地\n\n### 3. 学习并掌握TS  （2019年5月前）\n18年就看到了TS将会成为一门比较活的开发语言，目前来说已经具备了做TS开发的技能，只是TS更适合大型的长期的项目，将更好的保障项目的代码质量，快速迭代和小型项目并不是很适合。前端团队里没有开花，没想到居然在开发团队里见到了曙光，感谢开发的小伙伴愿意接受这门前端新技术，相信有一个点采用后看到了优势，后续普及工作将会更好开展。\n\n### 4. 学习并掌握React（2019年7月前）\n18年Vue已经在公司前端全面普及开来，但是市场上React仍然是占据更多的份额，而且RN还能做App开发，所以还是一门必须要掌握的技术，今年看了一本React相关的书，也看了一些相关的视频教程，还参加了公司同事开展的React分享，虽然没有在项目中实际使用过，但是理论知识已经掌握了，可以进行小的Demo开发，20年要用React写一个开源的项目，做到学有所用，学以致用。\n\n### 5. 学习前端持续集成的相关知识（2019年9月前）\n19年公司强调了代码必须走线上构建的要求，前端工程化和自动构建持续集成的工作可以说是工作所迫，这方面的技能已经Get到了，另外令我感到高兴的是，通过对Github-Actions的配置，我的博客可以像提交代码一样提交文章了，而且也实践了自动构建的相关技术，很开心。\n\n### 6. 学习Docker虚拟化技术（ 2019年10月前）\n这个任务没有达成，原本是希望能够通过Docker统一前端开发环境，不过Docker的适用场景还是以部署环境为主，Docker今年貌似热度也降下来了，今年K8s越来越火，不管怎样，持续关注新技术。\n\n## 整理计划\n### 1. 养成写博客的习惯，至少2天一篇，可以是技术博客，也可以是其他。\n今年实在是太忙了，别说两天一篇文章，就连一个月一篇的量都没能达成，不过在年底我终于把博客又重新激活了，希望自己20年能够把博客坚持写下来，很简单，积累自己，打造个人品牌。\n\n### 2. 将常用的方法和功能做成插件，开源给公司使用\n今年4月开始，更多的精力都投在了部门的前端管理工作，说实话也迷茫也难过，这份迷茫终于在19年年底解开了，没能在技能层面有更高的提升，以及在代码层面给公司带来价值我觉得还是有些遗憾，20年希望自己能够在技术上有更大的进步，技术深度上/广度上/架构层面/后端技能都能有长足的进步。\n\n## 读书计划\n### 1. 每周读完一本书，并写一篇读后感\n2019年读了25本书，每读完一本都会写一篇读后感，虽然没能保证每周读一本书，但是基本保证了每两周读完一本书，算是完成了50%的目标吧。20年继续努力，读书使人聪明，因为不聪明所以更要多读书。\n\n## 部门前端计划\n### 加强各设计组前端之间的交流\n> 设计组的出现导致前端交流不畅，2019年加强与各设计组前端的交流，掌握各位前端的技术能力。\n\n没想到一语成第，设计组居然在4月份将前端整个拿出来构成了一个前端组，由我来带，更没想到的是居然在19年年底又解散到项目团队了，这9个月的时间可以说有苦有泪也有甜，前端小伙伴们为了同一个目标，共同努力，尽最大的努力完成公司的业务，可以说为了这个目标，这一年我付出了很多很多，在这方面愧对了家人孩子，虽然最后前端还是拆分了，可以说我能力有限，但是我心里可以说是无愧，希望尽到项目团队里的小伙伴们也能开心工作，迅速成长，虽然不再在一个团队里，但是，我仍是你们的光妈。\n### 前端俱乐部推动\n> 继续每周2小时的兴趣交流，交流形式不限于ppt，要求各自建立技术博客做笔记。\n\n俱乐部的活动最后还是没能坚持下来，大家工作比较忙也好，我自己的原因也好，确实没能坚持下来，20年还是希望能够将俱乐部活动组织起来，算是大家交流的机会也好，帮助大家开阔眼界也好，20年一定要再做起来！\n### 进行梯队划分建设\n> 前端今年人数明显增多，但各层级职责并没有区分，19年抽时间进行梯队建设。\n\n19年前端从14人增加到了34人，可以说人数上翻翻了，随着负责人制的执行，梯队建设的工作算是完成了50%，但是能力提升的工作可以说还是做的不到位，应该有机会成长为高工的小伙伴没能升上去，这我有一定的责任，20年虽然团队不再，但是希望你们都坚持努力学习，迈向更高的台阶。\n### 引入前端工程化工具和思想\n> 目前前端工程化已经非常成熟，希望能将成熟的技术和工具引入。\n\n19年，随着Vue的普及和熟练，模块化开发组件化开发的思想已经深入到每一个前端的心中，现在大家都知道该如何使用这些技术和工具，希望大家能不仅仅局限在用也能了解了解其中原理，至少对常用的配置有所了解。\n### 提升整体前端开发的能力\n> 目前整体前端开发能力还相对较弱，19年通过培训等方式提升整体前端开发的能力\n\n19年能力提升的工作做的太少了，没什么好说的，希望20年这方面工作能够投入更多的精力，让更多的小伙伴成长起来，让我们一起加油吧。\n\n## 生活目标\n### 每天陪孩子读书一小时\n跟上面的工作和个人目标比起来，这个任务可以说完成度0%，这也是我觉得愧对家人的地方，为了工作，对家人的关注少了很多很多，以至于桐桐晚上都不愿意跟我一起睡觉，20年我要好好对她，做个好的爸爸，孩子明年就三岁了，去到幼儿园会认识更多的朋友，希望她会跟她的小伙伴说，我有个爱我的爸爸。\n### 减肥\n减肥这件事可以说是真的对我来说太难了，看着自己马上破三位数（kg）的体重，心里无限难过，每次媳妇儿问我啥时候去健身，我都感到像被闪电击中了似的，办了健身卡被人嘲笑成了洗澡卡，20年，减不到150斤我就。。。。\n\n# 写在最后\n19年太多的遗憾，太多的后悔莫及，当然也有一些成绩和自我肯定，19年已经过去了，希望在20年，能够成为一个更优秀的人。\n![WechatIMG6.jpeg](https://i.loli.net/2019/12/31/jMlO5sPxFyhIkai.jpg)\n感谢我可爱的同事，年底收到了礼物真的很开心。","source":"_posts/GoodBye-2019.md","raw":"---\ntitle: 再见2019\ndate: 2019-12-31 23:50:59\ncategories: \n\t- 杂记随感\ntags: \n\t- 年终总结\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n不知不觉又是一年，今天是2019年的最后一天，也是我30岁的最后一天，回顾这一年有收获有遗憾。翻出了18年的总结，看到了18年底对于自己19年的规划，现在回过头来看看哪些完成了。\n# 18年底定的计划\n## 学习技术\n### 1. 深入学习客户端开发（全年）\n18年客户端的项目也做了几个，Electron的开发能力经验更多了，之前只是用html+css+js做前端页面的开发，今年又增加了跟vue框架的结合，成功在多个项目中实践，只是一直没有形成规范感觉还是少了一环，原来一直在犹豫Electron到底算不算前端的技术栈之一，后来也算是想明白了，大前端范畴，只要是面向用户的都算是前端该做的范畴，所以Electron当然也算是前端应该掌握的技术栈，20年会继续学习客户端技术，把公司相关规范制定和落地。\n\n### 2. 学习前端自动化测试相关知识（2019年3月前）\n18年关注了前端自动化测试相关的知识，本打算19年好好学习一下，在公司项目中实践，但是今年前后端工作量大增，前端人员的精力有限，加之成本的考虑，并没有开展起来，不过这方面的技能储备已经具备了，年底两次关于前端自动化的测试也将前端自动化的思想普及到了公司前端的团队里，20年是公司强调质量的一年，相信20年前端自动化测试将有机会在公司一些项目中落地\n\n### 3. 学习并掌握TS  （2019年5月前）\n18年就看到了TS将会成为一门比较活的开发语言，目前来说已经具备了做TS开发的技能，只是TS更适合大型的长期的项目，将更好的保障项目的代码质量，快速迭代和小型项目并不是很适合。前端团队里没有开花，没想到居然在开发团队里见到了曙光，感谢开发的小伙伴愿意接受这门前端新技术，相信有一个点采用后看到了优势，后续普及工作将会更好开展。\n\n### 4. 学习并掌握React（2019年7月前）\n18年Vue已经在公司前端全面普及开来，但是市场上React仍然是占据更多的份额，而且RN还能做App开发，所以还是一门必须要掌握的技术，今年看了一本React相关的书，也看了一些相关的视频教程，还参加了公司同事开展的React分享，虽然没有在项目中实际使用过，但是理论知识已经掌握了，可以进行小的Demo开发，20年要用React写一个开源的项目，做到学有所用，学以致用。\n\n### 5. 学习前端持续集成的相关知识（2019年9月前）\n19年公司强调了代码必须走线上构建的要求，前端工程化和自动构建持续集成的工作可以说是工作所迫，这方面的技能已经Get到了，另外令我感到高兴的是，通过对Github-Actions的配置，我的博客可以像提交代码一样提交文章了，而且也实践了自动构建的相关技术，很开心。\n\n### 6. 学习Docker虚拟化技术（ 2019年10月前）\n这个任务没有达成，原本是希望能够通过Docker统一前端开发环境，不过Docker的适用场景还是以部署环境为主，Docker今年貌似热度也降下来了，今年K8s越来越火，不管怎样，持续关注新技术。\n\n## 整理计划\n### 1. 养成写博客的习惯，至少2天一篇，可以是技术博客，也可以是其他。\n今年实在是太忙了，别说两天一篇文章，就连一个月一篇的量都没能达成，不过在年底我终于把博客又重新激活了，希望自己20年能够把博客坚持写下来，很简单，积累自己，打造个人品牌。\n\n### 2. 将常用的方法和功能做成插件，开源给公司使用\n今年4月开始，更多的精力都投在了部门的前端管理工作，说实话也迷茫也难过，这份迷茫终于在19年年底解开了，没能在技能层面有更高的提升，以及在代码层面给公司带来价值我觉得还是有些遗憾，20年希望自己能够在技术上有更大的进步，技术深度上/广度上/架构层面/后端技能都能有长足的进步。\n\n## 读书计划\n### 1. 每周读完一本书，并写一篇读后感\n2019年读了25本书，每读完一本都会写一篇读后感，虽然没能保证每周读一本书，但是基本保证了每两周读完一本书，算是完成了50%的目标吧。20年继续努力，读书使人聪明，因为不聪明所以更要多读书。\n\n## 部门前端计划\n### 加强各设计组前端之间的交流\n> 设计组的出现导致前端交流不畅，2019年加强与各设计组前端的交流，掌握各位前端的技术能力。\n\n没想到一语成第，设计组居然在4月份将前端整个拿出来构成了一个前端组，由我来带，更没想到的是居然在19年年底又解散到项目团队了，这9个月的时间可以说有苦有泪也有甜，前端小伙伴们为了同一个目标，共同努力，尽最大的努力完成公司的业务，可以说为了这个目标，这一年我付出了很多很多，在这方面愧对了家人孩子，虽然最后前端还是拆分了，可以说我能力有限，但是我心里可以说是无愧，希望尽到项目团队里的小伙伴们也能开心工作，迅速成长，虽然不再在一个团队里，但是，我仍是你们的光妈。\n### 前端俱乐部推动\n> 继续每周2小时的兴趣交流，交流形式不限于ppt，要求各自建立技术博客做笔记。\n\n俱乐部的活动最后还是没能坚持下来，大家工作比较忙也好，我自己的原因也好，确实没能坚持下来，20年还是希望能够将俱乐部活动组织起来，算是大家交流的机会也好，帮助大家开阔眼界也好，20年一定要再做起来！\n### 进行梯队划分建设\n> 前端今年人数明显增多，但各层级职责并没有区分，19年抽时间进行梯队建设。\n\n19年前端从14人增加到了34人，可以说人数上翻翻了，随着负责人制的执行，梯队建设的工作算是完成了50%，但是能力提升的工作可以说还是做的不到位，应该有机会成长为高工的小伙伴没能升上去，这我有一定的责任，20年虽然团队不再，但是希望你们都坚持努力学习，迈向更高的台阶。\n### 引入前端工程化工具和思想\n> 目前前端工程化已经非常成熟，希望能将成熟的技术和工具引入。\n\n19年，随着Vue的普及和熟练，模块化开发组件化开发的思想已经深入到每一个前端的心中，现在大家都知道该如何使用这些技术和工具，希望大家能不仅仅局限在用也能了解了解其中原理，至少对常用的配置有所了解。\n### 提升整体前端开发的能力\n> 目前整体前端开发能力还相对较弱，19年通过培训等方式提升整体前端开发的能力\n\n19年能力提升的工作做的太少了，没什么好说的，希望20年这方面工作能够投入更多的精力，让更多的小伙伴成长起来，让我们一起加油吧。\n\n## 生活目标\n### 每天陪孩子读书一小时\n跟上面的工作和个人目标比起来，这个任务可以说完成度0%，这也是我觉得愧对家人的地方，为了工作，对家人的关注少了很多很多，以至于桐桐晚上都不愿意跟我一起睡觉，20年我要好好对她，做个好的爸爸，孩子明年就三岁了，去到幼儿园会认识更多的朋友，希望她会跟她的小伙伴说，我有个爱我的爸爸。\n### 减肥\n减肥这件事可以说是真的对我来说太难了，看着自己马上破三位数（kg）的体重，心里无限难过，每次媳妇儿问我啥时候去健身，我都感到像被闪电击中了似的，办了健身卡被人嘲笑成了洗澡卡，20年，减不到150斤我就。。。。\n\n# 写在最后\n19年太多的遗憾，太多的后悔莫及，当然也有一些成绩和自我肯定，19年已经过去了，希望在20年，能够成为一个更优秀的人。\n![WechatIMG6.jpeg](https://i.loli.net/2019/12/31/jMlO5sPxFyhIkai.jpg)\n感谢我可爱的同事，年底收到了礼物真的很开心。","slug":"GoodBye-2019","published":1,"updated":"2020-04-02T03:20:12.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3grzt002looa6cuk6g7dm","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>不知不觉又是一年，今天是2019年的最后一天，也是我30岁的最后一天，回顾这一年有收获有遗憾。翻出了18年的总结，看到了18年底对于自己19年的规划，现在回过头来看看哪些完成了。</p>\n<h1 id=\"18年底定的计划\"><a href=\"#18年底定的计划\" class=\"headerlink\" title=\"18年底定的计划\"></a>18年底定的计划</h1><h2 id=\"学习技术\"><a href=\"#学习技术\" class=\"headerlink\" title=\"学习技术\"></a>学习技术</h2><h3 id=\"1-深入学习客户端开发（全年）\"><a href=\"#1-深入学习客户端开发（全年）\" class=\"headerlink\" title=\"1. 深入学习客户端开发（全年）\"></a>1. 深入学习客户端开发（全年）</h3><p>18年客户端的项目也做了几个，Electron的开发能力经验更多了，之前只是用html+css+js做前端页面的开发，今年又增加了跟vue框架的结合，成功在多个项目中实践，只是一直没有形成规范感觉还是少了一环，原来一直在犹豫Electron到底算不算前端的技术栈之一，后来也算是想明白了，大前端范畴，只要是面向用户的都算是前端该做的范畴，所以Electron当然也算是前端应该掌握的技术栈，20年会继续学习客户端技术，把公司相关规范制定和落地。</p>\n<h3 id=\"2-学习前端自动化测试相关知识（2019年3月前）\"><a href=\"#2-学习前端自动化测试相关知识（2019年3月前）\" class=\"headerlink\" title=\"2. 学习前端自动化测试相关知识（2019年3月前）\"></a>2. 学习前端自动化测试相关知识（2019年3月前）</h3><p>18年关注了前端自动化测试相关的知识，本打算19年好好学习一下，在公司项目中实践，但是今年前后端工作量大增，前端人员的精力有限，加之成本的考虑，并没有开展起来，不过这方面的技能储备已经具备了，年底两次关于前端自动化的测试也将前端自动化的思想普及到了公司前端的团队里，20年是公司强调质量的一年，相信20年前端自动化测试将有机会在公司一些项目中落地</p>\n<h3 id=\"3-学习并掌握TS-（2019年5月前）\"><a href=\"#3-学习并掌握TS-（2019年5月前）\" class=\"headerlink\" title=\"3. 学习并掌握TS  （2019年5月前）\"></a>3. 学习并掌握TS  （2019年5月前）</h3><p>18年就看到了TS将会成为一门比较活的开发语言，目前来说已经具备了做TS开发的技能，只是TS更适合大型的长期的项目，将更好的保障项目的代码质量，快速迭代和小型项目并不是很适合。前端团队里没有开花，没想到居然在开发团队里见到了曙光，感谢开发的小伙伴愿意接受这门前端新技术，相信有一个点采用后看到了优势，后续普及工作将会更好开展。</p>\n<h3 id=\"4-学习并掌握React（2019年7月前）\"><a href=\"#4-学习并掌握React（2019年7月前）\" class=\"headerlink\" title=\"4. 学习并掌握React（2019年7月前）\"></a>4. 学习并掌握React（2019年7月前）</h3><p>18年Vue已经在公司前端全面普及开来，但是市场上React仍然是占据更多的份额，而且RN还能做App开发，所以还是一门必须要掌握的技术，今年看了一本React相关的书，也看了一些相关的视频教程，还参加了公司同事开展的React分享，虽然没有在项目中实际使用过，但是理论知识已经掌握了，可以进行小的Demo开发，20年要用React写一个开源的项目，做到学有所用，学以致用。</p>\n<h3 id=\"5-学习前端持续集成的相关知识（2019年9月前）\"><a href=\"#5-学习前端持续集成的相关知识（2019年9月前）\" class=\"headerlink\" title=\"5. 学习前端持续集成的相关知识（2019年9月前）\"></a>5. 学习前端持续集成的相关知识（2019年9月前）</h3><p>19年公司强调了代码必须走线上构建的要求，前端工程化和自动构建持续集成的工作可以说是工作所迫，这方面的技能已经Get到了，另外令我感到高兴的是，通过对Github-Actions的配置，我的博客可以像提交代码一样提交文章了，而且也实践了自动构建的相关技术，很开心。</p>\n<h3 id=\"6-学习Docker虚拟化技术（-2019年10月前）\"><a href=\"#6-学习Docker虚拟化技术（-2019年10月前）\" class=\"headerlink\" title=\"6. 学习Docker虚拟化技术（ 2019年10月前）\"></a>6. 学习Docker虚拟化技术（ 2019年10月前）</h3><p>这个任务没有达成，原本是希望能够通过Docker统一前端开发环境，不过Docker的适用场景还是以部署环境为主，Docker今年貌似热度也降下来了，今年K8s越来越火，不管怎样，持续关注新技术。</p>\n<h2 id=\"整理计划\"><a href=\"#整理计划\" class=\"headerlink\" title=\"整理计划\"></a>整理计划</h2><h3 id=\"1-养成写博客的习惯，至少2天一篇，可以是技术博客，也可以是其他。\"><a href=\"#1-养成写博客的习惯，至少2天一篇，可以是技术博客，也可以是其他。\" class=\"headerlink\" title=\"1. 养成写博客的习惯，至少2天一篇，可以是技术博客，也可以是其他。\"></a>1. 养成写博客的习惯，至少2天一篇，可以是技术博客，也可以是其他。</h3><p>今年实在是太忙了，别说两天一篇文章，就连一个月一篇的量都没能达成，不过在年底我终于把博客又重新激活了，希望自己20年能够把博客坚持写下来，很简单，积累自己，打造个人品牌。</p>\n<h3 id=\"2-将常用的方法和功能做成插件，开源给公司使用\"><a href=\"#2-将常用的方法和功能做成插件，开源给公司使用\" class=\"headerlink\" title=\"2. 将常用的方法和功能做成插件，开源给公司使用\"></a>2. 将常用的方法和功能做成插件，开源给公司使用</h3><p>今年4月开始，更多的精力都投在了部门的前端管理工作，说实话也迷茫也难过，这份迷茫终于在19年年底解开了，没能在技能层面有更高的提升，以及在代码层面给公司带来价值我觉得还是有些遗憾，20年希望自己能够在技术上有更大的进步，技术深度上/广度上/架构层面/后端技能都能有长足的进步。</p>\n<h2 id=\"读书计划\"><a href=\"#读书计划\" class=\"headerlink\" title=\"读书计划\"></a>读书计划</h2><h3 id=\"1-每周读完一本书，并写一篇读后感\"><a href=\"#1-每周读完一本书，并写一篇读后感\" class=\"headerlink\" title=\"1. 每周读完一本书，并写一篇读后感\"></a>1. 每周读完一本书，并写一篇读后感</h3><p>2019年读了25本书，每读完一本都会写一篇读后感，虽然没能保证每周读一本书，但是基本保证了每两周读完一本书，算是完成了50%的目标吧。20年继续努力，读书使人聪明，因为不聪明所以更要多读书。</p>\n<h2 id=\"部门前端计划\"><a href=\"#部门前端计划\" class=\"headerlink\" title=\"部门前端计划\"></a>部门前端计划</h2><h3 id=\"加强各设计组前端之间的交流\"><a href=\"#加强各设计组前端之间的交流\" class=\"headerlink\" title=\"加强各设计组前端之间的交流\"></a>加强各设计组前端之间的交流</h3><blockquote>\n<p>设计组的出现导致前端交流不畅，2019年加强与各设计组前端的交流，掌握各位前端的技术能力。</p>\n</blockquote>\n<p>没想到一语成第，设计组居然在4月份将前端整个拿出来构成了一个前端组，由我来带，更没想到的是居然在19年年底又解散到项目团队了，这9个月的时间可以说有苦有泪也有甜，前端小伙伴们为了同一个目标，共同努力，尽最大的努力完成公司的业务，可以说为了这个目标，这一年我付出了很多很多，在这方面愧对了家人孩子，虽然最后前端还是拆分了，可以说我能力有限，但是我心里可以说是无愧，希望尽到项目团队里的小伙伴们也能开心工作，迅速成长，虽然不再在一个团队里，但是，我仍是你们的光妈。</p>\n<h3 id=\"前端俱乐部推动\"><a href=\"#前端俱乐部推动\" class=\"headerlink\" title=\"前端俱乐部推动\"></a>前端俱乐部推动</h3><blockquote>\n<p>继续每周2小时的兴趣交流，交流形式不限于ppt，要求各自建立技术博客做笔记。</p>\n</blockquote>\n<p>俱乐部的活动最后还是没能坚持下来，大家工作比较忙也好，我自己的原因也好，确实没能坚持下来，20年还是希望能够将俱乐部活动组织起来，算是大家交流的机会也好，帮助大家开阔眼界也好，20年一定要再做起来！</p>\n<h3 id=\"进行梯队划分建设\"><a href=\"#进行梯队划分建设\" class=\"headerlink\" title=\"进行梯队划分建设\"></a>进行梯队划分建设</h3><blockquote>\n<p>前端今年人数明显增多，但各层级职责并没有区分，19年抽时间进行梯队建设。</p>\n</blockquote>\n<p>19年前端从14人增加到了34人，可以说人数上翻翻了，随着负责人制的执行，梯队建设的工作算是完成了50%，但是能力提升的工作可以说还是做的不到位，应该有机会成长为高工的小伙伴没能升上去，这我有一定的责任，20年虽然团队不再，但是希望你们都坚持努力学习，迈向更高的台阶。</p>\n<h3 id=\"引入前端工程化工具和思想\"><a href=\"#引入前端工程化工具和思想\" class=\"headerlink\" title=\"引入前端工程化工具和思想\"></a>引入前端工程化工具和思想</h3><blockquote>\n<p>目前前端工程化已经非常成熟，希望能将成熟的技术和工具引入。</p>\n</blockquote>\n<p>19年，随着Vue的普及和熟练，模块化开发组件化开发的思想已经深入到每一个前端的心中，现在大家都知道该如何使用这些技术和工具，希望大家能不仅仅局限在用也能了解了解其中原理，至少对常用的配置有所了解。</p>\n<h3 id=\"提升整体前端开发的能力\"><a href=\"#提升整体前端开发的能力\" class=\"headerlink\" title=\"提升整体前端开发的能力\"></a>提升整体前端开发的能力</h3><blockquote>\n<p>目前整体前端开发能力还相对较弱，19年通过培训等方式提升整体前端开发的能力</p>\n</blockquote>\n<p>19年能力提升的工作做的太少了，没什么好说的，希望20年这方面工作能够投入更多的精力，让更多的小伙伴成长起来，让我们一起加油吧。</p>\n<h2 id=\"生活目标\"><a href=\"#生活目标\" class=\"headerlink\" title=\"生活目标\"></a>生活目标</h2><h3 id=\"每天陪孩子读书一小时\"><a href=\"#每天陪孩子读书一小时\" class=\"headerlink\" title=\"每天陪孩子读书一小时\"></a>每天陪孩子读书一小时</h3><p>跟上面的工作和个人目标比起来，这个任务可以说完成度0%，这也是我觉得愧对家人的地方，为了工作，对家人的关注少了很多很多，以至于桐桐晚上都不愿意跟我一起睡觉，20年我要好好对她，做个好的爸爸，孩子明年就三岁了，去到幼儿园会认识更多的朋友，希望她会跟她的小伙伴说，我有个爱我的爸爸。</p>\n<h3 id=\"减肥\"><a href=\"#减肥\" class=\"headerlink\" title=\"减肥\"></a>减肥</h3><p>减肥这件事可以说是真的对我来说太难了，看着自己马上破三位数（kg）的体重，心里无限难过，每次媳妇儿问我啥时候去健身，我都感到像被闪电击中了似的，办了健身卡被人嘲笑成了洗澡卡，20年，减不到150斤我就。。。。</p>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>19年太多的遗憾，太多的后悔莫及，当然也有一些成绩和自我肯定，19年已经过去了，希望在20年，能够成为一个更优秀的人。<br><img src=\"https://i.loli.net/2019/12/31/jMlO5sPxFyhIkai.jpg\" alt=\"WechatIMG6.jpeg\"><br>感谢我可爱的同事，年底收到了礼物真的很开心。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>不知不觉又是一年，今天是2019年的最后一天，也是我30岁的最后一天，回顾这一年有收获有遗憾。翻出了18年的总结，看到了18年底对于自己19年的规划，现在回过头来看看哪些完成了。</p>\n<h1 id=\"18年底定的计划\"><a href=\"#18年底定的计划\" class=\"headerlink\" title=\"18年底定的计划\"></a>18年底定的计划</h1><h2 id=\"学习技术\"><a href=\"#学习技术\" class=\"headerlink\" title=\"学习技术\"></a>学习技术</h2><h3 id=\"1-深入学习客户端开发（全年）\"><a href=\"#1-深入学习客户端开发（全年）\" class=\"headerlink\" title=\"1. 深入学习客户端开发（全年）\"></a>1. 深入学习客户端开发（全年）</h3><p>18年客户端的项目也做了几个，Electron的开发能力经验更多了，之前只是用html+css+js做前端页面的开发，今年又增加了跟vue框架的结合，成功在多个项目中实践，只是一直没有形成规范感觉还是少了一环，原来一直在犹豫Electron到底算不算前端的技术栈之一，后来也算是想明白了，大前端范畴，只要是面向用户的都算是前端该做的范畴，所以Electron当然也算是前端应该掌握的技术栈，20年会继续学习客户端技术，把公司相关规范制定和落地。</p>\n<h3 id=\"2-学习前端自动化测试相关知识（2019年3月前）\"><a href=\"#2-学习前端自动化测试相关知识（2019年3月前）\" class=\"headerlink\" title=\"2. 学习前端自动化测试相关知识（2019年3月前）\"></a>2. 学习前端自动化测试相关知识（2019年3月前）</h3><p>18年关注了前端自动化测试相关的知识，本打算19年好好学习一下，在公司项目中实践，但是今年前后端工作量大增，前端人员的精力有限，加之成本的考虑，并没有开展起来，不过这方面的技能储备已经具备了，年底两次关于前端自动化的测试也将前端自动化的思想普及到了公司前端的团队里，20年是公司强调质量的一年，相信20年前端自动化测试将有机会在公司一些项目中落地</p>\n<h3 id=\"3-学习并掌握TS-（2019年5月前）\"><a href=\"#3-学习并掌握TS-（2019年5月前）\" class=\"headerlink\" title=\"3. 学习并掌握TS  （2019年5月前）\"></a>3. 学习并掌握TS  （2019年5月前）</h3><p>18年就看到了TS将会成为一门比较活的开发语言，目前来说已经具备了做TS开发的技能，只是TS更适合大型的长期的项目，将更好的保障项目的代码质量，快速迭代和小型项目并不是很适合。前端团队里没有开花，没想到居然在开发团队里见到了曙光，感谢开发的小伙伴愿意接受这门前端新技术，相信有一个点采用后看到了优势，后续普及工作将会更好开展。</p>\n<h3 id=\"4-学习并掌握React（2019年7月前）\"><a href=\"#4-学习并掌握React（2019年7月前）\" class=\"headerlink\" title=\"4. 学习并掌握React（2019年7月前）\"></a>4. 学习并掌握React（2019年7月前）</h3><p>18年Vue已经在公司前端全面普及开来，但是市场上React仍然是占据更多的份额，而且RN还能做App开发，所以还是一门必须要掌握的技术，今年看了一本React相关的书，也看了一些相关的视频教程，还参加了公司同事开展的React分享，虽然没有在项目中实际使用过，但是理论知识已经掌握了，可以进行小的Demo开发，20年要用React写一个开源的项目，做到学有所用，学以致用。</p>\n<h3 id=\"5-学习前端持续集成的相关知识（2019年9月前）\"><a href=\"#5-学习前端持续集成的相关知识（2019年9月前）\" class=\"headerlink\" title=\"5. 学习前端持续集成的相关知识（2019年9月前）\"></a>5. 学习前端持续集成的相关知识（2019年9月前）</h3><p>19年公司强调了代码必须走线上构建的要求，前端工程化和自动构建持续集成的工作可以说是工作所迫，这方面的技能已经Get到了，另外令我感到高兴的是，通过对Github-Actions的配置，我的博客可以像提交代码一样提交文章了，而且也实践了自动构建的相关技术，很开心。</p>\n<h3 id=\"6-学习Docker虚拟化技术（-2019年10月前）\"><a href=\"#6-学习Docker虚拟化技术（-2019年10月前）\" class=\"headerlink\" title=\"6. 学习Docker虚拟化技术（ 2019年10月前）\"></a>6. 学习Docker虚拟化技术（ 2019年10月前）</h3><p>这个任务没有达成，原本是希望能够通过Docker统一前端开发环境，不过Docker的适用场景还是以部署环境为主，Docker今年貌似热度也降下来了，今年K8s越来越火，不管怎样，持续关注新技术。</p>\n<h2 id=\"整理计划\"><a href=\"#整理计划\" class=\"headerlink\" title=\"整理计划\"></a>整理计划</h2><h3 id=\"1-养成写博客的习惯，至少2天一篇，可以是技术博客，也可以是其他。\"><a href=\"#1-养成写博客的习惯，至少2天一篇，可以是技术博客，也可以是其他。\" class=\"headerlink\" title=\"1. 养成写博客的习惯，至少2天一篇，可以是技术博客，也可以是其他。\"></a>1. 养成写博客的习惯，至少2天一篇，可以是技术博客，也可以是其他。</h3><p>今年实在是太忙了，别说两天一篇文章，就连一个月一篇的量都没能达成，不过在年底我终于把博客又重新激活了，希望自己20年能够把博客坚持写下来，很简单，积累自己，打造个人品牌。</p>\n<h3 id=\"2-将常用的方法和功能做成插件，开源给公司使用\"><a href=\"#2-将常用的方法和功能做成插件，开源给公司使用\" class=\"headerlink\" title=\"2. 将常用的方法和功能做成插件，开源给公司使用\"></a>2. 将常用的方法和功能做成插件，开源给公司使用</h3><p>今年4月开始，更多的精力都投在了部门的前端管理工作，说实话也迷茫也难过，这份迷茫终于在19年年底解开了，没能在技能层面有更高的提升，以及在代码层面给公司带来价值我觉得还是有些遗憾，20年希望自己能够在技术上有更大的进步，技术深度上/广度上/架构层面/后端技能都能有长足的进步。</p>\n<h2 id=\"读书计划\"><a href=\"#读书计划\" class=\"headerlink\" title=\"读书计划\"></a>读书计划</h2><h3 id=\"1-每周读完一本书，并写一篇读后感\"><a href=\"#1-每周读完一本书，并写一篇读后感\" class=\"headerlink\" title=\"1. 每周读完一本书，并写一篇读后感\"></a>1. 每周读完一本书，并写一篇读后感</h3><p>2019年读了25本书，每读完一本都会写一篇读后感，虽然没能保证每周读一本书，但是基本保证了每两周读完一本书，算是完成了50%的目标吧。20年继续努力，读书使人聪明，因为不聪明所以更要多读书。</p>\n<h2 id=\"部门前端计划\"><a href=\"#部门前端计划\" class=\"headerlink\" title=\"部门前端计划\"></a>部门前端计划</h2><h3 id=\"加强各设计组前端之间的交流\"><a href=\"#加强各设计组前端之间的交流\" class=\"headerlink\" title=\"加强各设计组前端之间的交流\"></a>加强各设计组前端之间的交流</h3><blockquote>\n<p>设计组的出现导致前端交流不畅，2019年加强与各设计组前端的交流，掌握各位前端的技术能力。</p>\n</blockquote>\n<p>没想到一语成第，设计组居然在4月份将前端整个拿出来构成了一个前端组，由我来带，更没想到的是居然在19年年底又解散到项目团队了，这9个月的时间可以说有苦有泪也有甜，前端小伙伴们为了同一个目标，共同努力，尽最大的努力完成公司的业务，可以说为了这个目标，这一年我付出了很多很多，在这方面愧对了家人孩子，虽然最后前端还是拆分了，可以说我能力有限，但是我心里可以说是无愧，希望尽到项目团队里的小伙伴们也能开心工作，迅速成长，虽然不再在一个团队里，但是，我仍是你们的光妈。</p>\n<h3 id=\"前端俱乐部推动\"><a href=\"#前端俱乐部推动\" class=\"headerlink\" title=\"前端俱乐部推动\"></a>前端俱乐部推动</h3><blockquote>\n<p>继续每周2小时的兴趣交流，交流形式不限于ppt，要求各自建立技术博客做笔记。</p>\n</blockquote>\n<p>俱乐部的活动最后还是没能坚持下来，大家工作比较忙也好，我自己的原因也好，确实没能坚持下来，20年还是希望能够将俱乐部活动组织起来，算是大家交流的机会也好，帮助大家开阔眼界也好，20年一定要再做起来！</p>\n<h3 id=\"进行梯队划分建设\"><a href=\"#进行梯队划分建设\" class=\"headerlink\" title=\"进行梯队划分建设\"></a>进行梯队划分建设</h3><blockquote>\n<p>前端今年人数明显增多，但各层级职责并没有区分，19年抽时间进行梯队建设。</p>\n</blockquote>\n<p>19年前端从14人增加到了34人，可以说人数上翻翻了，随着负责人制的执行，梯队建设的工作算是完成了50%，但是能力提升的工作可以说还是做的不到位，应该有机会成长为高工的小伙伴没能升上去，这我有一定的责任，20年虽然团队不再，但是希望你们都坚持努力学习，迈向更高的台阶。</p>\n<h3 id=\"引入前端工程化工具和思想\"><a href=\"#引入前端工程化工具和思想\" class=\"headerlink\" title=\"引入前端工程化工具和思想\"></a>引入前端工程化工具和思想</h3><blockquote>\n<p>目前前端工程化已经非常成熟，希望能将成熟的技术和工具引入。</p>\n</blockquote>\n<p>19年，随着Vue的普及和熟练，模块化开发组件化开发的思想已经深入到每一个前端的心中，现在大家都知道该如何使用这些技术和工具，希望大家能不仅仅局限在用也能了解了解其中原理，至少对常用的配置有所了解。</p>\n<h3 id=\"提升整体前端开发的能力\"><a href=\"#提升整体前端开发的能力\" class=\"headerlink\" title=\"提升整体前端开发的能力\"></a>提升整体前端开发的能力</h3><blockquote>\n<p>目前整体前端开发能力还相对较弱，19年通过培训等方式提升整体前端开发的能力</p>\n</blockquote>\n<p>19年能力提升的工作做的太少了，没什么好说的，希望20年这方面工作能够投入更多的精力，让更多的小伙伴成长起来，让我们一起加油吧。</p>\n<h2 id=\"生活目标\"><a href=\"#生活目标\" class=\"headerlink\" title=\"生活目标\"></a>生活目标</h2><h3 id=\"每天陪孩子读书一小时\"><a href=\"#每天陪孩子读书一小时\" class=\"headerlink\" title=\"每天陪孩子读书一小时\"></a>每天陪孩子读书一小时</h3><p>跟上面的工作和个人目标比起来，这个任务可以说完成度0%，这也是我觉得愧对家人的地方，为了工作，对家人的关注少了很多很多，以至于桐桐晚上都不愿意跟我一起睡觉，20年我要好好对她，做个好的爸爸，孩子明年就三岁了，去到幼儿园会认识更多的朋友，希望她会跟她的小伙伴说，我有个爱我的爸爸。</p>\n<h3 id=\"减肥\"><a href=\"#减肥\" class=\"headerlink\" title=\"减肥\"></a>减肥</h3><p>减肥这件事可以说是真的对我来说太难了，看着自己马上破三位数（kg）的体重，心里无限难过，每次媳妇儿问我啥时候去健身，我都感到像被闪电击中了似的，办了健身卡被人嘲笑成了洗澡卡，20年，减不到150斤我就。。。。</p>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>19年太多的遗憾，太多的后悔莫及，当然也有一些成绩和自我肯定，19年已经过去了，希望在20年，能够成为一个更优秀的人。<br><img src=\"https://i.loli.net/2019/12/31/jMlO5sPxFyhIkai.jpg\" alt=\"WechatIMG6.jpeg\"><br>感谢我可爱的同事，年底收到了礼物真的很开心。</p>\n"},{"title":"你好2020","date":"2020-01-01T02:50:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 2020元旦伊始\n时间过的真快，19年睡了一觉就成了过去的一年，今天是元旦，早上8：00起了床，简单洗漱后我出了门，新年新气象，去年没有坚持的晨跑，今年想要坚持一下，所以一早就出门跑了会儿步，太久没活动了，只是跑了半个小时就气喘吁吁，只好回家，但是即使是这半个小时，我感觉呼吸了新鲜的空气，整个人也精神了不少，回到家坐在阳台上，拿出小王宁送我的极少数手册开始研究了起来，生活还是应该有点仪式感何况是新年伊始，手册中有很多建议，全部看过一遍以后我郑重的拿起了笔写下了我今天的行动计划。但是没有写年度计划，明天上班后跟领导还要谈一谈，谈过之后再定一下年度的计划。今天我的计划就是陪家人过好元旦这一天。\n\n# 元旦执行计划\n1. 写一篇日志\n2. 将家人这一天游玩的过程以Vlog的形式记录下来，上传到西瓜视频上。\n3. 陪家人逛街，给桐桐买新衣裳。\n   \n# 执行计划\n吃过早饭后大概到了10:30，一家人收拾好以后终于可以出门了，今天有点风，一点点冷不是特别冷，空气还不错，天气听晴朗的，一家人开着车听着歌前往甘井子万达广场，20分钟左右我们就到了万达广场，首先我们先去看了桐桐心心念念的小猫咪，也就是猫咪咖啡馆里的那些小可爱，桐桐可能是受妈妈影响，很喜欢猫咪，但是又有一点点怕。大概看了10分钟的猫咪，我们继续下一站，上四楼给桐桐买新衣裳，桐桐看到满眼的漂亮衣裳很是兴奋，最终她挑选了一套带着向日葵花朵的淡蓝色衣裙，穿上漂亮的新衣裳，平时像个假小子似的桐桐也一下子害羞了起来，让妈妈和奶奶看完后还会让爸爸和爷爷看看，得到了大家的肯定以后，心满意足的买下了它，也不知道是不是试衣服试累了，桐桐嚷嚷着要吃饭，桐桐妈说有一家港式茶餐厅味道不错，之前和同事来过，于是我们就去了4楼的茶餐厅，说实话这是我头一次吃茶餐厅，我还跟我爸妈调侃说，这也算是我们来过一次香港了。去到餐厅时才11点多一点，客还没有上满，还有座位，我们找了个靠里的位置坐了下来，打开菜谱，桐桐妈挑了几样她觉得不错的菜，上菜时间稍微有点慢，期间桐桐有些不耐烦，坐也坐不住，终于等到了吃的上来，可是觉得大多数吃的都太偏甜，爸妈和我都吃不太惯，桐桐吃的还不错，大概吃了半个小时就吃完了，出门的时候门口已经排起了长队，还好来的早一点，不然吃饭都要等了。本打算带着桐桐回家睡个觉，下午要到姥爷家串门，可桐桐说没有逛够，正巧这时看到了一楼有小丑在折气球玩具，我们就下到一楼找小丑玩了，小丑给桐桐折了个贵宾犬，小丑是荣耀手机的员工，可能是元旦策划的活动吧，反正来了就来了，进去看看也好，看了新出的V30手机，感觉并不是很喜欢，店员说有旧机抵值的活动，我问了他我的7p128g还能值多少，他打了几个电话后回复我1400块，哎，三年前7000块买的手机，现在只值1400了，算了还是用着吧，出了荣耀手机店又去了旁边的华为，看了看新出的mate30pro，这个手机是真的不错，当然手机不错价格也美丽，6500+的价格真的是让我不舍得买，还是把钱留下来给桐桐吧。桐桐终于累了，嚷嚷着要走，于是一家人驱车去了姥姥家。\n\n姥姥家在西南路，因为平时工作忙很少带桐桐去，这次去桐桐又不认识他们了，开始的时候很拘束，也不说话，一直到吃饭结束才终于愿意开口问好唱歌，因为家里没有电视机，到了姥姥家看到电视机很兴奋，一直在看，今天也算是过了瘾了，亲人就是即使很长时间不见面，但一见面就特别亲的人，饭从5：30一直吃到8:30，聊了工作，聊了生活，聊了困惑，聊了坦然，我终于知道了长辈们的智慧，了解了身体健康的重要性，20年一定要锻炼出一副好的身体，对家人负责。\n\n9:30回到了家，心里挺高兴的，新年第一天陪家人一起度过了充实的一天，回到家把今天路上录下来的视频剪成了短视频上传到了西瓜视频，这也是我今年的一个想法，记录我们一家人的幸福生活，如果有粉丝有点播的话还能赚点钱，没有的话也记录了桐桐的成长，算是一点纪念吧。最后写下了这篇日记，写完之后我就要睡觉去了，明天一早就要起床，明天起我就要走路去上班了，为了有一副好身体，加油。\n\n今天的目标都完成了，很开心～～","source":"_posts/Hello-2020.md","raw":"---\ntitle: 你好2020\ndate: 2020-01-01 10:50:00\ncategories: \n\t- 杂记随感\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 2020元旦伊始\n时间过的真快，19年睡了一觉就成了过去的一年，今天是元旦，早上8：00起了床，简单洗漱后我出了门，新年新气象，去年没有坚持的晨跑，今年想要坚持一下，所以一早就出门跑了会儿步，太久没活动了，只是跑了半个小时就气喘吁吁，只好回家，但是即使是这半个小时，我感觉呼吸了新鲜的空气，整个人也精神了不少，回到家坐在阳台上，拿出小王宁送我的极少数手册开始研究了起来，生活还是应该有点仪式感何况是新年伊始，手册中有很多建议，全部看过一遍以后我郑重的拿起了笔写下了我今天的行动计划。但是没有写年度计划，明天上班后跟领导还要谈一谈，谈过之后再定一下年度的计划。今天我的计划就是陪家人过好元旦这一天。\n\n# 元旦执行计划\n1. 写一篇日志\n2. 将家人这一天游玩的过程以Vlog的形式记录下来，上传到西瓜视频上。\n3. 陪家人逛街，给桐桐买新衣裳。\n   \n# 执行计划\n吃过早饭后大概到了10:30，一家人收拾好以后终于可以出门了，今天有点风，一点点冷不是特别冷，空气还不错，天气听晴朗的，一家人开着车听着歌前往甘井子万达广场，20分钟左右我们就到了万达广场，首先我们先去看了桐桐心心念念的小猫咪，也就是猫咪咖啡馆里的那些小可爱，桐桐可能是受妈妈影响，很喜欢猫咪，但是又有一点点怕。大概看了10分钟的猫咪，我们继续下一站，上四楼给桐桐买新衣裳，桐桐看到满眼的漂亮衣裳很是兴奋，最终她挑选了一套带着向日葵花朵的淡蓝色衣裙，穿上漂亮的新衣裳，平时像个假小子似的桐桐也一下子害羞了起来，让妈妈和奶奶看完后还会让爸爸和爷爷看看，得到了大家的肯定以后，心满意足的买下了它，也不知道是不是试衣服试累了，桐桐嚷嚷着要吃饭，桐桐妈说有一家港式茶餐厅味道不错，之前和同事来过，于是我们就去了4楼的茶餐厅，说实话这是我头一次吃茶餐厅，我还跟我爸妈调侃说，这也算是我们来过一次香港了。去到餐厅时才11点多一点，客还没有上满，还有座位，我们找了个靠里的位置坐了下来，打开菜谱，桐桐妈挑了几样她觉得不错的菜，上菜时间稍微有点慢，期间桐桐有些不耐烦，坐也坐不住，终于等到了吃的上来，可是觉得大多数吃的都太偏甜，爸妈和我都吃不太惯，桐桐吃的还不错，大概吃了半个小时就吃完了，出门的时候门口已经排起了长队，还好来的早一点，不然吃饭都要等了。本打算带着桐桐回家睡个觉，下午要到姥爷家串门，可桐桐说没有逛够，正巧这时看到了一楼有小丑在折气球玩具，我们就下到一楼找小丑玩了，小丑给桐桐折了个贵宾犬，小丑是荣耀手机的员工，可能是元旦策划的活动吧，反正来了就来了，进去看看也好，看了新出的V30手机，感觉并不是很喜欢，店员说有旧机抵值的活动，我问了他我的7p128g还能值多少，他打了几个电话后回复我1400块，哎，三年前7000块买的手机，现在只值1400了，算了还是用着吧，出了荣耀手机店又去了旁边的华为，看了看新出的mate30pro，这个手机是真的不错，当然手机不错价格也美丽，6500+的价格真的是让我不舍得买，还是把钱留下来给桐桐吧。桐桐终于累了，嚷嚷着要走，于是一家人驱车去了姥姥家。\n\n姥姥家在西南路，因为平时工作忙很少带桐桐去，这次去桐桐又不认识他们了，开始的时候很拘束，也不说话，一直到吃饭结束才终于愿意开口问好唱歌，因为家里没有电视机，到了姥姥家看到电视机很兴奋，一直在看，今天也算是过了瘾了，亲人就是即使很长时间不见面，但一见面就特别亲的人，饭从5：30一直吃到8:30，聊了工作，聊了生活，聊了困惑，聊了坦然，我终于知道了长辈们的智慧，了解了身体健康的重要性，20年一定要锻炼出一副好的身体，对家人负责。\n\n9:30回到了家，心里挺高兴的，新年第一天陪家人一起度过了充实的一天，回到家把今天路上录下来的视频剪成了短视频上传到了西瓜视频，这也是我今年的一个想法，记录我们一家人的幸福生活，如果有粉丝有点播的话还能赚点钱，没有的话也记录了桐桐的成长，算是一点纪念吧。最后写下了这篇日记，写完之后我就要睡觉去了，明天一早就要起床，明天起我就要走路去上班了，为了有一副好身体，加油。\n\n今天的目标都完成了，很开心～～","slug":"Hello-2020","published":1,"updated":"2020-04-02T03:20:12.413Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs01002oooa6aibz9yss","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"2020元旦伊始\"><a href=\"#2020元旦伊始\" class=\"headerlink\" title=\"2020元旦伊始\"></a>2020元旦伊始</h1><p>时间过的真快，19年睡了一觉就成了过去的一年，今天是元旦，早上8：00起了床，简单洗漱后我出了门，新年新气象，去年没有坚持的晨跑，今年想要坚持一下，所以一早就出门跑了会儿步，太久没活动了，只是跑了半个小时就气喘吁吁，只好回家，但是即使是这半个小时，我感觉呼吸了新鲜的空气，整个人也精神了不少，回到家坐在阳台上，拿出小王宁送我的极少数手册开始研究了起来，生活还是应该有点仪式感何况是新年伊始，手册中有很多建议，全部看过一遍以后我郑重的拿起了笔写下了我今天的行动计划。但是没有写年度计划，明天上班后跟领导还要谈一谈，谈过之后再定一下年度的计划。今天我的计划就是陪家人过好元旦这一天。</p>\n<h1 id=\"元旦执行计划\"><a href=\"#元旦执行计划\" class=\"headerlink\" title=\"元旦执行计划\"></a>元旦执行计划</h1><ol>\n<li>写一篇日志</li>\n<li>将家人这一天游玩的过程以Vlog的形式记录下来，上传到西瓜视频上。</li>\n<li>陪家人逛街，给桐桐买新衣裳。</li>\n</ol>\n<h1 id=\"执行计划\"><a href=\"#执行计划\" class=\"headerlink\" title=\"执行计划\"></a>执行计划</h1><p>吃过早饭后大概到了10:30，一家人收拾好以后终于可以出门了，今天有点风，一点点冷不是特别冷，空气还不错，天气听晴朗的，一家人开着车听着歌前往甘井子万达广场，20分钟左右我们就到了万达广场，首先我们先去看了桐桐心心念念的小猫咪，也就是猫咪咖啡馆里的那些小可爱，桐桐可能是受妈妈影响，很喜欢猫咪，但是又有一点点怕。大概看了10分钟的猫咪，我们继续下一站，上四楼给桐桐买新衣裳，桐桐看到满眼的漂亮衣裳很是兴奋，最终她挑选了一套带着向日葵花朵的淡蓝色衣裙，穿上漂亮的新衣裳，平时像个假小子似的桐桐也一下子害羞了起来，让妈妈和奶奶看完后还会让爸爸和爷爷看看，得到了大家的肯定以后，心满意足的买下了它，也不知道是不是试衣服试累了，桐桐嚷嚷着要吃饭，桐桐妈说有一家港式茶餐厅味道不错，之前和同事来过，于是我们就去了4楼的茶餐厅，说实话这是我头一次吃茶餐厅，我还跟我爸妈调侃说，这也算是我们来过一次香港了。去到餐厅时才11点多一点，客还没有上满，还有座位，我们找了个靠里的位置坐了下来，打开菜谱，桐桐妈挑了几样她觉得不错的菜，上菜时间稍微有点慢，期间桐桐有些不耐烦，坐也坐不住，终于等到了吃的上来，可是觉得大多数吃的都太偏甜，爸妈和我都吃不太惯，桐桐吃的还不错，大概吃了半个小时就吃完了，出门的时候门口已经排起了长队，还好来的早一点，不然吃饭都要等了。本打算带着桐桐回家睡个觉，下午要到姥爷家串门，可桐桐说没有逛够，正巧这时看到了一楼有小丑在折气球玩具，我们就下到一楼找小丑玩了，小丑给桐桐折了个贵宾犬，小丑是荣耀手机的员工，可能是元旦策划的活动吧，反正来了就来了，进去看看也好，看了新出的V30手机，感觉并不是很喜欢，店员说有旧机抵值的活动，我问了他我的7p128g还能值多少，他打了几个电话后回复我1400块，哎，三年前7000块买的手机，现在只值1400了，算了还是用着吧，出了荣耀手机店又去了旁边的华为，看了看新出的mate30pro，这个手机是真的不错，当然手机不错价格也美丽，6500+的价格真的是让我不舍得买，还是把钱留下来给桐桐吧。桐桐终于累了，嚷嚷着要走，于是一家人驱车去了姥姥家。</p>\n<p>姥姥家在西南路，因为平时工作忙很少带桐桐去，这次去桐桐又不认识他们了，开始的时候很拘束，也不说话，一直到吃饭结束才终于愿意开口问好唱歌，因为家里没有电视机，到了姥姥家看到电视机很兴奋，一直在看，今天也算是过了瘾了，亲人就是即使很长时间不见面，但一见面就特别亲的人，饭从5：30一直吃到8:30，聊了工作，聊了生活，聊了困惑，聊了坦然，我终于知道了长辈们的智慧，了解了身体健康的重要性，20年一定要锻炼出一副好的身体，对家人负责。</p>\n<p>9:30回到了家，心里挺高兴的，新年第一天陪家人一起度过了充实的一天，回到家把今天路上录下来的视频剪成了短视频上传到了西瓜视频，这也是我今年的一个想法，记录我们一家人的幸福生活，如果有粉丝有点播的话还能赚点钱，没有的话也记录了桐桐的成长，算是一点纪念吧。最后写下了这篇日记，写完之后我就要睡觉去了，明天一早就要起床，明天起我就要走路去上班了，为了有一副好身体，加油。</p>\n<p>今天的目标都完成了，很开心～～</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"2020元旦伊始\"><a href=\"#2020元旦伊始\" class=\"headerlink\" title=\"2020元旦伊始\"></a>2020元旦伊始</h1><p>时间过的真快，19年睡了一觉就成了过去的一年，今天是元旦，早上8：00起了床，简单洗漱后我出了门，新年新气象，去年没有坚持的晨跑，今年想要坚持一下，所以一早就出门跑了会儿步，太久没活动了，只是跑了半个小时就气喘吁吁，只好回家，但是即使是这半个小时，我感觉呼吸了新鲜的空气，整个人也精神了不少，回到家坐在阳台上，拿出小王宁送我的极少数手册开始研究了起来，生活还是应该有点仪式感何况是新年伊始，手册中有很多建议，全部看过一遍以后我郑重的拿起了笔写下了我今天的行动计划。但是没有写年度计划，明天上班后跟领导还要谈一谈，谈过之后再定一下年度的计划。今天我的计划就是陪家人过好元旦这一天。</p>\n<h1 id=\"元旦执行计划\"><a href=\"#元旦执行计划\" class=\"headerlink\" title=\"元旦执行计划\"></a>元旦执行计划</h1><ol>\n<li>写一篇日志</li>\n<li>将家人这一天游玩的过程以Vlog的形式记录下来，上传到西瓜视频上。</li>\n<li>陪家人逛街，给桐桐买新衣裳。</li>\n</ol>\n<h1 id=\"执行计划\"><a href=\"#执行计划\" class=\"headerlink\" title=\"执行计划\"></a>执行计划</h1><p>吃过早饭后大概到了10:30，一家人收拾好以后终于可以出门了，今天有点风，一点点冷不是特别冷，空气还不错，天气听晴朗的，一家人开着车听着歌前往甘井子万达广场，20分钟左右我们就到了万达广场，首先我们先去看了桐桐心心念念的小猫咪，也就是猫咪咖啡馆里的那些小可爱，桐桐可能是受妈妈影响，很喜欢猫咪，但是又有一点点怕。大概看了10分钟的猫咪，我们继续下一站，上四楼给桐桐买新衣裳，桐桐看到满眼的漂亮衣裳很是兴奋，最终她挑选了一套带着向日葵花朵的淡蓝色衣裙，穿上漂亮的新衣裳，平时像个假小子似的桐桐也一下子害羞了起来，让妈妈和奶奶看完后还会让爸爸和爷爷看看，得到了大家的肯定以后，心满意足的买下了它，也不知道是不是试衣服试累了，桐桐嚷嚷着要吃饭，桐桐妈说有一家港式茶餐厅味道不错，之前和同事来过，于是我们就去了4楼的茶餐厅，说实话这是我头一次吃茶餐厅，我还跟我爸妈调侃说，这也算是我们来过一次香港了。去到餐厅时才11点多一点，客还没有上满，还有座位，我们找了个靠里的位置坐了下来，打开菜谱，桐桐妈挑了几样她觉得不错的菜，上菜时间稍微有点慢，期间桐桐有些不耐烦，坐也坐不住，终于等到了吃的上来，可是觉得大多数吃的都太偏甜，爸妈和我都吃不太惯，桐桐吃的还不错，大概吃了半个小时就吃完了，出门的时候门口已经排起了长队，还好来的早一点，不然吃饭都要等了。本打算带着桐桐回家睡个觉，下午要到姥爷家串门，可桐桐说没有逛够，正巧这时看到了一楼有小丑在折气球玩具，我们就下到一楼找小丑玩了，小丑给桐桐折了个贵宾犬，小丑是荣耀手机的员工，可能是元旦策划的活动吧，反正来了就来了，进去看看也好，看了新出的V30手机，感觉并不是很喜欢，店员说有旧机抵值的活动，我问了他我的7p128g还能值多少，他打了几个电话后回复我1400块，哎，三年前7000块买的手机，现在只值1400了，算了还是用着吧，出了荣耀手机店又去了旁边的华为，看了看新出的mate30pro，这个手机是真的不错，当然手机不错价格也美丽，6500+的价格真的是让我不舍得买，还是把钱留下来给桐桐吧。桐桐终于累了，嚷嚷着要走，于是一家人驱车去了姥姥家。</p>\n<p>姥姥家在西南路，因为平时工作忙很少带桐桐去，这次去桐桐又不认识他们了，开始的时候很拘束，也不说话，一直到吃饭结束才终于愿意开口问好唱歌，因为家里没有电视机，到了姥姥家看到电视机很兴奋，一直在看，今天也算是过了瘾了，亲人就是即使很长时间不见面，但一见面就特别亲的人，饭从5：30一直吃到8:30，聊了工作，聊了生活，聊了困惑，聊了坦然，我终于知道了长辈们的智慧，了解了身体健康的重要性，20年一定要锻炼出一副好的身体，对家人负责。</p>\n<p>9:30回到了家，心里挺高兴的，新年第一天陪家人一起度过了充实的一天，回到家把今天路上录下来的视频剪成了短视频上传到了西瓜视频，这也是我今年的一个想法，记录我们一家人的幸福生活，如果有粉丝有点播的话还能赚点钱，没有的话也记录了桐桐的成长，算是一点纪念吧。最后写下了这篇日记，写完之后我就要睡觉去了，明天一早就要起床，明天起我就要走路去上班了，为了有一副好身体，加油。</p>\n<p>今天的目标都完成了，很开心～～</p>\n"},{"title":"Vue 响应式原理的实现（课程笔记）","date":"2020-02-21T15:00:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n最近一直在追网课，说实话从业9年了，一直觉得前端发展非常快，而且一直充满着危机感，每天都要学习进步才有安稳的感觉，今天听了 vue 响应式原理实现的公开课，感觉还不错，做了如下笔记，帮助自己记忆，也希望能帮助大家。\n\n# Vue2 原理\n## 什么是 defineProperty\ndefineProperty 其实是定义对象属性用的\n> defineProperty 其实并不是核心的为一个对象做数据双向绑定，而是去给对象做属性标签，只不过是属性里 get 和 set 实现了响应式。\n\n| 属性名       | 默认值    |\n| ------------ | --------- |\n| value        | undefined |\n| get          | undefined |\n| set          | undefined |\n| writable     | false     |\n| enumerable   | false     |\n| configurable | false     |\n\n``` js\nvar ob = {\n\ta:1,\n\tb:2\n}\n// 参数 1、对象 2、属性 3、配置\nObject.defineProperty(ob,'a',{\n\twritable:false,\n\tenumerable:true,\n\tconfigurable:true,\n})\nconsole.log(Object.getOwnPropertyDescriptor(ob,'a')) // 1\nob.a = 2\nconsole.log(ob.a) // 1\n```\n下面我们实现一下双向绑定\n\n``` js\nObject.defineProperty(ob,'a',{\n\tget:function(){\n\t\tconsole.log('a is be get')\n\t\treturn 999;\n\t}, \n\tset:function(){\n\t\tconsole.log('a is be set')\n\t\treturn 999;\n\t}, \n})\n\nconsole.log(Object.getOwnPropertyDescriptor(ob,'a')) // 999\n\n```\n改造代码实现双向绑定（存取值）\n``` js\nvar _val = obj.a; // 暂存\nObject.defineProperty(ob,'a',{\n\tget:function(){\n\t\tconsole.log('a is be get')\n\t\treturn _val;\n\t}, \n\tset:function(newVal){\n\t\t_val = newVal // 新值替换旧值\n\t\tconsole.log('a is be set')\n\t\treturn _val;\n\t}, \n})\n```\n## Vue 中从改变一个数据到发生改变的过程\n1. 改变数据触发 Set \n2. Set 部分触发 notify（更新）\n   1. Get 部分收集依赖\n3. 更改对应的虚拟 Dom\n4. 重新 Render\n\n``` js\n// MyVue.js\n\n// 简单版本 vue\nfunction MyVue(){\n\tthis.$data = {\n\t\ta: {\n\t\t\tb:1\n\t\t}, \n\t\tc:2\n\t}\n\tthis.el = document.getElementById('app');\n\tthis.virtualDom = '';\n\tthis.observer(this.$data);\n\tthis.render();\n}\nvue.property.observer = function(obj){\n\tvar _val, self = this;\n\t// var dep = new Dep() -> 源码中依赖收集对象\n\tfor(var key in obj){ // 属性有可能是对象，要递归绑定\n\t\t_val = obj[key];\n\t\tif(typeof _val === 'Object'){\n\t\t\tthis.observer(_val)\n\t\t}else{\n\t\t\tObject.defineProperty(this.$data,key,{ // 这里是实际绑定过程\n\t\t\t\tget:function(){\n\t\t\t\t\t// 依赖收集\n\t\t\t\t\t// dep.depend(); -> vue 源码中收集依赖的方法\n\t\t\t\t\treturn _val\n\t\t\t\t},\n\t\t\t\tset:function(newVal){\n\t\t\t\t\t_val = newVal\n\t\t\t\t\t// dep.notify(); -> vue 源码中\n\t\t\t\t\tself.render() // AST语法树\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n}\nvue.property.render = function(){\n\tthis.virtualDom = 'i am '+this.$data.b;\n\tthis.el.innerHTML = this.virtualDom;\n}\n```\n``` html\n// index.html\n\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>自己实现Vue2数据双向绑定</title>\n\t</head>\n\t<body>\n\t\t<div id=\"app\"></div>\n\t\t<script type=\"text/javascript\" src='myVue.js'></script>\n\t\t<script type=\"text/javascript\">\n\t\t\tvar mv = new MyVue();\n\t\t\tsetTimeout(function(){\n\t\t\t\tconsole.log('changes');\n\t\t\t\tconsole.log(mv.$data);\n\t\t\t\tmv.$data.b = 222;\n\t\t\t})\n\t\t</script>\n\t</body>\n</html>\n```\n> 依赖收集：\n> 1. 我们的data里面的数据并不是所有地方都用到\n> 2. 如果我们直接更新整个视图，浪费资源\n> 3. 先收集依赖改变的数据的组件，再更新依赖了数据的组件（Dep depend notify）\n\n### 格外注意的地方---数组怎么监听\ndefinePropty 只能给对象进行 get set 绑定， 数组怎么办？\n\nvue 中 使用了 ***装饰者模式***\n> 装饰者模式 Decorator模式（别名Wrapper）：动态将职责附加到对象上，若要扩展功能，装饰者提供了比继承更具弹性的代替方案。\n\n``` js\nvar arraypro = Array.property; // 创建一个数组的原型对象\nvar arrob = Object.create(arraypro); // 避免影响原型链\nvar arr = ['push','pop','shift'];\narr.forEach(function(method,index){\n\tarrob[method]=function(){ // 装饰者模式\n\t\tvar ret = arraypro[method].apply(this,arguments)\n\t\tdep.notify() // 扩展了功能\n\t}\n})\n\n``` \n## Vue3 实现双向绑定\nProxy 是什么？\n> Proxy 对象用于定义基本操作的自定义行为\n> 和 definePropty 类似，功能几乎一样，只是用法上不同\n> 1. 不会污染原对象\n> 2. 直接给对象就可以了\n> 3. 不需要借助外部变量 _val\n``` js\nvar ob = {\n\ta:1,\n\tb:2\n}\n\nvar newOb = new Proxy(ob,{\n\tget(target,key,receiver){ // target 对象，key 属性\n\t\tconsole.log(target,key,receiver)\n\t\treturn target[key]\n\t},\n\tset(target,key,value,receiver){\n\t\treturn Reflect.set(target.key,value); \n\t\t// 将值分配给属性的函数。返回一个Boolean，如果更新成功，则返回true。\n\t\t// return target[key] = value\n\t}\n})\n```\n### 为什么改用 Proxy\n1. defineProperty 只能监听某个属性，不能全对象监听\n2. 可以省去`for in`循环提升代码执行效率\n3. 可以监听数组，不需要再为数组做特异性操作\n4. 不污染原对象\n5. 更优雅\n\n我们用 Proxy 实现一下 observe 方法\n``` js\nvue.property.observe = function(){\n\tvar self = this;\n\tthis.$data = new Proxy(this.$data,{\n\t\tget(target,key, receiver){\n\t\t\treturn target[key]\n\t\t},\n\t\tset(target,key,newVal){\n\t\t\ttarget[key] = newVal\n\t\t\tself.render()\n\t\t}\n\t})\n}\n```\n\n#### 还能用 Proxy 做什么\n1. 校验类型\n2. 真正的私有变量\n\n##### 校验类型\n例子：\n``` js\n// 数据类型验证\n// 我们要创建一个对象，这个对象是个人，他有name和age两个属性\n// name必须是中文，age必须是数字，大于18岁\n\n// 这里用到了策略模式\nvar valid = {\n\tname(value){\n\t\tvar reg=/^[\\u4E00-\\u9FAS]=$/\n\t\tif(typeof value === 'string' && reg.test(value)){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}, \n\tage(value){\n\t\tif(typeof value === 'number' && value > 18){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\nfunction Person(name,age){\n\tthis.name = name\n\tthis.age = age\n\treturn new Proxy(this,{\n\t\tget(target,key){\n\t\t\treturn target[key]\n\t\t}, \n\t\tset(target,key,value){\n\t\t\tif(valid[key](value)){\n\t\t\t\treturn Reflect.set(target,key,value)\n\t\t\t}else{\n\t\t\t\tthrow new Error(key+'is not valid')\n\t\t\t}\n\t\t}\n\t})\n}\nnew Person('name',19)\n```\n> ***策略模式***\n> 定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。\n\n##### 真正的私有变量\nvue-router 源码中，给 $router ,$route 用 defineProperty 定义 get 并返回本身，这样就不能修改属性了。\n``` js\nObject.defineProperty(this,'$router',{ // Router 的实例\n\tget(){\n\t\treturn this._root._router;\n\t}\n})\nObject.defineProperty(this,'$route',{\n\tget(){\n\t\treturn {\n\t\t\t// 当前路由所在的状态\n\t\t\tcurrent: this._root._router.history.current;\n\t\t}\n\t}\n})\n```\n\n## 虚拟Dom和diff算法\n虚拟Dom是虚拟的，他只在概念里面存在，在AST语法树，下面进行解释\n``` js\n// 模板\n<template>\n\t<div>\n\t\t<p>{{msg}}</p>\n\t\t<p>2</p>\n\t\t<p>3</p>\n\t</div>\n</template>\n\n// diff 描述法\ndiff <div>\n\tprops:{\n\t\tid:2\n\t}\n\tchildren:[\n\t\tdiff <p>\n\t\t\tprops:{\n\t\t\t\tid:xxx\n\t\t\t}\n\t\t\tchildren:[\n\t\t\t\t...\n\t\t\t]\n\t]\n\n// 对象描述法\nvar virtual = {\n\tdom:'div',\n\tprops:{\n\t\tid:2\n\t},\n\tchildren:[\n\t\t....\n\t]\n}\n```\n每层结构都是一样的，那么是如何进行 diff 比对的呢？\n``` js\n/** \n * diff 算法\n */\npatchVnode(oldVnode,vnode){ // 接收新旧节点\n\tconst el = vnode.el = oldVnode.el; // 拿出真实dom\n\tlet i,oldCh = oldVnode.children ,ch = vnode.children // 拿出新旧节点子元素children数组\n\tif(oldVnode === vnode) return; // 新旧节点一致，直接返回不进行后续操作\n\t// 分情况操作 --- 只有文字节点，删除了子元素，增加了子元素，子元素发生变动\n\t// 新旧节点都不为空，且不一样\n\tif(oldVnode.text !== null && vnode.text !== null && oldVnode.text !== vnode.text){ // 文字发生更新\n\t\tapi.setTextContent(el,vonde.text) // 文字发生了更新，更新文字，给Dom，更新文字\n\t} else { // 不是单纯文字节点的话\n\t\tupdateEle(); // 更新元素\n\t\tif(oldCh&&ch&&oldCh!==ch){ // 都有子元素，子元素变动\n\t\t\tupdateChildren() // 调用更新子元素方法\n\t\t} else if(ch){ // 增加子元素\n\t\t\tcreateEl(vnode) // 创建子元素\n\t\t} else if(oldCh){ // 删除子元素\n\t\t\tapi.removeChildren(el) // 调用删除子元素方法\n\t\t}\n\t}\n}\n```\n源码要多看，以下必看 ***Vue/react/axios/vue-router/Redux/Vuex***\n为什么要看源码？？\n- 初级前端就会用vue或react --- 从差不多水平的60%中挑出更好的人\n- 提高思想--》看优秀的代码--》写优秀的代码\n- 看源码能力，对高级前端是必备的。--- 解决疑难杂症，看源码了解原理。\n\n## vue 性能优化\n因为是公开课，所以时间上没来的及说完，以后自己在听别的有关的内容时再补上这块。\n\n# 最后\n只有不断学习才能进步，充分利用网络的便利性，找各种优质的教学资源，我相信，努力会有回报，加油！","source":"_posts/Implementation-of-the-vue-response-principle.md","raw":"---\ntitle: Vue 响应式原理的实现（课程笔记）\ndate: 2020-02-21 23:00:00\ncategories: \n\t- 源码原理\ntags:\n\t- vue\n---\n> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n最近一直在追网课，说实话从业9年了，一直觉得前端发展非常快，而且一直充满着危机感，每天都要学习进步才有安稳的感觉，今天听了 vue 响应式原理实现的公开课，感觉还不错，做了如下笔记，帮助自己记忆，也希望能帮助大家。\n\n# Vue2 原理\n## 什么是 defineProperty\ndefineProperty 其实是定义对象属性用的\n> defineProperty 其实并不是核心的为一个对象做数据双向绑定，而是去给对象做属性标签，只不过是属性里 get 和 set 实现了响应式。\n\n| 属性名       | 默认值    |\n| ------------ | --------- |\n| value        | undefined |\n| get          | undefined |\n| set          | undefined |\n| writable     | false     |\n| enumerable   | false     |\n| configurable | false     |\n\n``` js\nvar ob = {\n\ta:1,\n\tb:2\n}\n// 参数 1、对象 2、属性 3、配置\nObject.defineProperty(ob,'a',{\n\twritable:false,\n\tenumerable:true,\n\tconfigurable:true,\n})\nconsole.log(Object.getOwnPropertyDescriptor(ob,'a')) // 1\nob.a = 2\nconsole.log(ob.a) // 1\n```\n下面我们实现一下双向绑定\n\n``` js\nObject.defineProperty(ob,'a',{\n\tget:function(){\n\t\tconsole.log('a is be get')\n\t\treturn 999;\n\t}, \n\tset:function(){\n\t\tconsole.log('a is be set')\n\t\treturn 999;\n\t}, \n})\n\nconsole.log(Object.getOwnPropertyDescriptor(ob,'a')) // 999\n\n```\n改造代码实现双向绑定（存取值）\n``` js\nvar _val = obj.a; // 暂存\nObject.defineProperty(ob,'a',{\n\tget:function(){\n\t\tconsole.log('a is be get')\n\t\treturn _val;\n\t}, \n\tset:function(newVal){\n\t\t_val = newVal // 新值替换旧值\n\t\tconsole.log('a is be set')\n\t\treturn _val;\n\t}, \n})\n```\n## Vue 中从改变一个数据到发生改变的过程\n1. 改变数据触发 Set \n2. Set 部分触发 notify（更新）\n   1. Get 部分收集依赖\n3. 更改对应的虚拟 Dom\n4. 重新 Render\n\n``` js\n// MyVue.js\n\n// 简单版本 vue\nfunction MyVue(){\n\tthis.$data = {\n\t\ta: {\n\t\t\tb:1\n\t\t}, \n\t\tc:2\n\t}\n\tthis.el = document.getElementById('app');\n\tthis.virtualDom = '';\n\tthis.observer(this.$data);\n\tthis.render();\n}\nvue.property.observer = function(obj){\n\tvar _val, self = this;\n\t// var dep = new Dep() -> 源码中依赖收集对象\n\tfor(var key in obj){ // 属性有可能是对象，要递归绑定\n\t\t_val = obj[key];\n\t\tif(typeof _val === 'Object'){\n\t\t\tthis.observer(_val)\n\t\t}else{\n\t\t\tObject.defineProperty(this.$data,key,{ // 这里是实际绑定过程\n\t\t\t\tget:function(){\n\t\t\t\t\t// 依赖收集\n\t\t\t\t\t// dep.depend(); -> vue 源码中收集依赖的方法\n\t\t\t\t\treturn _val\n\t\t\t\t},\n\t\t\t\tset:function(newVal){\n\t\t\t\t\t_val = newVal\n\t\t\t\t\t// dep.notify(); -> vue 源码中\n\t\t\t\t\tself.render() // AST语法树\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n}\nvue.property.render = function(){\n\tthis.virtualDom = 'i am '+this.$data.b;\n\tthis.el.innerHTML = this.virtualDom;\n}\n```\n``` html\n// index.html\n\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>自己实现Vue2数据双向绑定</title>\n\t</head>\n\t<body>\n\t\t<div id=\"app\"></div>\n\t\t<script type=\"text/javascript\" src='myVue.js'></script>\n\t\t<script type=\"text/javascript\">\n\t\t\tvar mv = new MyVue();\n\t\t\tsetTimeout(function(){\n\t\t\t\tconsole.log('changes');\n\t\t\t\tconsole.log(mv.$data);\n\t\t\t\tmv.$data.b = 222;\n\t\t\t})\n\t\t</script>\n\t</body>\n</html>\n```\n> 依赖收集：\n> 1. 我们的data里面的数据并不是所有地方都用到\n> 2. 如果我们直接更新整个视图，浪费资源\n> 3. 先收集依赖改变的数据的组件，再更新依赖了数据的组件（Dep depend notify）\n\n### 格外注意的地方---数组怎么监听\ndefinePropty 只能给对象进行 get set 绑定， 数组怎么办？\n\nvue 中 使用了 ***装饰者模式***\n> 装饰者模式 Decorator模式（别名Wrapper）：动态将职责附加到对象上，若要扩展功能，装饰者提供了比继承更具弹性的代替方案。\n\n``` js\nvar arraypro = Array.property; // 创建一个数组的原型对象\nvar arrob = Object.create(arraypro); // 避免影响原型链\nvar arr = ['push','pop','shift'];\narr.forEach(function(method,index){\n\tarrob[method]=function(){ // 装饰者模式\n\t\tvar ret = arraypro[method].apply(this,arguments)\n\t\tdep.notify() // 扩展了功能\n\t}\n})\n\n``` \n## Vue3 实现双向绑定\nProxy 是什么？\n> Proxy 对象用于定义基本操作的自定义行为\n> 和 definePropty 类似，功能几乎一样，只是用法上不同\n> 1. 不会污染原对象\n> 2. 直接给对象就可以了\n> 3. 不需要借助外部变量 _val\n``` js\nvar ob = {\n\ta:1,\n\tb:2\n}\n\nvar newOb = new Proxy(ob,{\n\tget(target,key,receiver){ // target 对象，key 属性\n\t\tconsole.log(target,key,receiver)\n\t\treturn target[key]\n\t},\n\tset(target,key,value,receiver){\n\t\treturn Reflect.set(target.key,value); \n\t\t// 将值分配给属性的函数。返回一个Boolean，如果更新成功，则返回true。\n\t\t// return target[key] = value\n\t}\n})\n```\n### 为什么改用 Proxy\n1. defineProperty 只能监听某个属性，不能全对象监听\n2. 可以省去`for in`循环提升代码执行效率\n3. 可以监听数组，不需要再为数组做特异性操作\n4. 不污染原对象\n5. 更优雅\n\n我们用 Proxy 实现一下 observe 方法\n``` js\nvue.property.observe = function(){\n\tvar self = this;\n\tthis.$data = new Proxy(this.$data,{\n\t\tget(target,key, receiver){\n\t\t\treturn target[key]\n\t\t},\n\t\tset(target,key,newVal){\n\t\t\ttarget[key] = newVal\n\t\t\tself.render()\n\t\t}\n\t})\n}\n```\n\n#### 还能用 Proxy 做什么\n1. 校验类型\n2. 真正的私有变量\n\n##### 校验类型\n例子：\n``` js\n// 数据类型验证\n// 我们要创建一个对象，这个对象是个人，他有name和age两个属性\n// name必须是中文，age必须是数字，大于18岁\n\n// 这里用到了策略模式\nvar valid = {\n\tname(value){\n\t\tvar reg=/^[\\u4E00-\\u9FAS]=$/\n\t\tif(typeof value === 'string' && reg.test(value)){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}, \n\tage(value){\n\t\tif(typeof value === 'number' && value > 18){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\nfunction Person(name,age){\n\tthis.name = name\n\tthis.age = age\n\treturn new Proxy(this,{\n\t\tget(target,key){\n\t\t\treturn target[key]\n\t\t}, \n\t\tset(target,key,value){\n\t\t\tif(valid[key](value)){\n\t\t\t\treturn Reflect.set(target,key,value)\n\t\t\t}else{\n\t\t\t\tthrow new Error(key+'is not valid')\n\t\t\t}\n\t\t}\n\t})\n}\nnew Person('name',19)\n```\n> ***策略模式***\n> 定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。\n\n##### 真正的私有变量\nvue-router 源码中，给 $router ,$route 用 defineProperty 定义 get 并返回本身，这样就不能修改属性了。\n``` js\nObject.defineProperty(this,'$router',{ // Router 的实例\n\tget(){\n\t\treturn this._root._router;\n\t}\n})\nObject.defineProperty(this,'$route',{\n\tget(){\n\t\treturn {\n\t\t\t// 当前路由所在的状态\n\t\t\tcurrent: this._root._router.history.current;\n\t\t}\n\t}\n})\n```\n\n## 虚拟Dom和diff算法\n虚拟Dom是虚拟的，他只在概念里面存在，在AST语法树，下面进行解释\n``` js\n// 模板\n<template>\n\t<div>\n\t\t<p>{{msg}}</p>\n\t\t<p>2</p>\n\t\t<p>3</p>\n\t</div>\n</template>\n\n// diff 描述法\ndiff <div>\n\tprops:{\n\t\tid:2\n\t}\n\tchildren:[\n\t\tdiff <p>\n\t\t\tprops:{\n\t\t\t\tid:xxx\n\t\t\t}\n\t\t\tchildren:[\n\t\t\t\t...\n\t\t\t]\n\t]\n\n// 对象描述法\nvar virtual = {\n\tdom:'div',\n\tprops:{\n\t\tid:2\n\t},\n\tchildren:[\n\t\t....\n\t]\n}\n```\n每层结构都是一样的，那么是如何进行 diff 比对的呢？\n``` js\n/** \n * diff 算法\n */\npatchVnode(oldVnode,vnode){ // 接收新旧节点\n\tconst el = vnode.el = oldVnode.el; // 拿出真实dom\n\tlet i,oldCh = oldVnode.children ,ch = vnode.children // 拿出新旧节点子元素children数组\n\tif(oldVnode === vnode) return; // 新旧节点一致，直接返回不进行后续操作\n\t// 分情况操作 --- 只有文字节点，删除了子元素，增加了子元素，子元素发生变动\n\t// 新旧节点都不为空，且不一样\n\tif(oldVnode.text !== null && vnode.text !== null && oldVnode.text !== vnode.text){ // 文字发生更新\n\t\tapi.setTextContent(el,vonde.text) // 文字发生了更新，更新文字，给Dom，更新文字\n\t} else { // 不是单纯文字节点的话\n\t\tupdateEle(); // 更新元素\n\t\tif(oldCh&&ch&&oldCh!==ch){ // 都有子元素，子元素变动\n\t\t\tupdateChildren() // 调用更新子元素方法\n\t\t} else if(ch){ // 增加子元素\n\t\t\tcreateEl(vnode) // 创建子元素\n\t\t} else if(oldCh){ // 删除子元素\n\t\t\tapi.removeChildren(el) // 调用删除子元素方法\n\t\t}\n\t}\n}\n```\n源码要多看，以下必看 ***Vue/react/axios/vue-router/Redux/Vuex***\n为什么要看源码？？\n- 初级前端就会用vue或react --- 从差不多水平的60%中挑出更好的人\n- 提高思想--》看优秀的代码--》写优秀的代码\n- 看源码能力，对高级前端是必备的。--- 解决疑难杂症，看源码了解原理。\n\n## vue 性能优化\n因为是公开课，所以时间上没来的及说完，以后自己在听别的有关的内容时再补上这块。\n\n# 最后\n只有不断学习才能进步，充分利用网络的便利性，找各种优质的教学资源，我相信，努力会有回报，加油！","slug":"Implementation-of-the-vue-response-principle","published":1,"updated":"2020-02-23T07:58:30.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs09002tooa668f16xni","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近一直在追网课，说实话从业9年了，一直觉得前端发展非常快，而且一直充满着危机感，每天都要学习进步才有安稳的感觉，今天听了 vue 响应式原理实现的公开课，感觉还不错，做了如下笔记，帮助自己记忆，也希望能帮助大家。</p>\n<h1 id=\"Vue2-原理\"><a href=\"#Vue2-原理\" class=\"headerlink\" title=\"Vue2 原理\"></a>Vue2 原理</h1><h2 id=\"什么是-defineProperty\"><a href=\"#什么是-defineProperty\" class=\"headerlink\" title=\"什么是 defineProperty\"></a>什么是 defineProperty</h2><p>defineProperty 其实是定义对象属性用的</p>\n<blockquote>\n<p>defineProperty 其实并不是核心的为一个对象做数据双向绑定，而是去给对象做属性标签，只不过是属性里 get 和 set 实现了响应式。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>value</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>get</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>set</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>writable</td>\n<td>false</td>\n</tr>\n<tr>\n<td>enumerable</td>\n<td>false</td>\n</tr>\n<tr>\n<td>configurable</td>\n<td>false</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ob = &#123;</span><br><span class=\"line\">\ta:<span class=\"number\">1</span>,</span><br><span class=\"line\">\tb:<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 参数 1、对象 2、属性 3、配置</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(ob,<span class=\"string\">'a'</span>,&#123;</span><br><span class=\"line\">\twritable:<span class=\"literal\">false</span>,</span><br><span class=\"line\">\tenumerable:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\tconfigurable:<span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(ob,<span class=\"string\">'a'</span>)) <span class=\"comment\">// 1</span></span><br><span class=\"line\">ob.a = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ob.a) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>下面我们实现一下双向绑定</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(ob,<span class=\"string\">'a'</span>,&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">get</span>:function()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a is be get'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">999</span>;</span><br><span class=\"line\">\t&#125;, </span><br><span class=\"line\">\t<span class=\"keyword\">set</span>:function()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a is be set'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">999</span>;</span><br><span class=\"line\">\t&#125;, </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(ob,<span class=\"string\">'a'</span>)) <span class=\"comment\">// 999</span></span><br></pre></td></tr></table></figure>\n<p>改造代码实现双向绑定（存取值）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _val = obj.a; <span class=\"comment\">// 暂存</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(ob,<span class=\"string\">'a'</span>,&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">get</span>:function()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a is be get'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _val;</span><br><span class=\"line\">\t&#125;, </span><br><span class=\"line\">\t<span class=\"keyword\">set</span>:function(newVal)&#123;</span><br><span class=\"line\">\t\t_val = newVal <span class=\"comment\">// 新值替换旧值</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a is be set'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _val;</span><br><span class=\"line\">\t&#125;, </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vue-中从改变一个数据到发生改变的过程\"><a href=\"#Vue-中从改变一个数据到发生改变的过程\" class=\"headerlink\" title=\"Vue 中从改变一个数据到发生改变的过程\"></a>Vue 中从改变一个数据到发生改变的过程</h2><ol>\n<li>改变数据触发 Set </li>\n<li>Set 部分触发 notify（更新）<ol>\n<li>Get 部分收集依赖</li>\n</ol>\n</li>\n<li>更改对应的虚拟 Dom</li>\n<li>重新 Render</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MyVue.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简单版本 vue</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyVue</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.$data = &#123;</span><br><span class=\"line\">\t\ta: &#123;</span><br><span class=\"line\">\t\t\tb:<span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;, </span><br><span class=\"line\">\t\tc:<span class=\"number\">2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.el = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.virtualDom = <span class=\"string\">''</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.observer(<span class=\"keyword\">this</span>.$data);</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.render();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vue.property.observer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> _val, self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// var dep = new Dep() -&gt; 源码中依赖收集对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj)&#123; <span class=\"comment\">// 属性有可能是对象，要递归绑定</span></span><br><span class=\"line\">\t\t_val = obj[key];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> _val === <span class=\"string\">'Object'</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.observer(_val)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>.$data,key,&#123; <span class=\"comment\">// 这里是实际绑定过程</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">get</span>:function()&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 依赖收集</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// dep.depend(); -&gt; vue 源码中收集依赖的方法</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> _val</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">set</span>:function(newVal)&#123;</span><br><span class=\"line\">\t\t\t\t\t_val = newVal</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// dep.notify(); -&gt; vue 源码中</span></span><br><span class=\"line\">\t\t\t\t\tself.render() <span class=\"comment\">// AST语法树</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vue.property.render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.virtualDom = <span class=\"string\">'i am '</span>+<span class=\"keyword\">this</span>.$data.b;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.el.innerHTML = <span class=\"keyword\">this</span>.virtualDom;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.html</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>自己实现Vue2数据双向绑定<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">'myVue.js'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">var</span> mv = <span class=\"keyword\">new</span> MyVue();</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'changes'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"built_in\">console</span>.log(mv.$data);</span></span><br><span class=\"line\">\t\t\t\tmv.$data.b = 222;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>依赖收集：</p>\n<ol>\n<li>我们的data里面的数据并不是所有地方都用到</li>\n<li>如果我们直接更新整个视图，浪费资源</li>\n<li>先收集依赖改变的数据的组件，再更新依赖了数据的组件（Dep depend notify）</li>\n</ol>\n</blockquote>\n<h3 id=\"格外注意的地方—数组怎么监听\"><a href=\"#格外注意的地方—数组怎么监听\" class=\"headerlink\" title=\"格外注意的地方—数组怎么监听\"></a>格外注意的地方—数组怎么监听</h3><p>definePropty 只能给对象进行 get set 绑定， 数组怎么办？</p>\n<p>vue 中 使用了 <strong><em>装饰者模式</em></strong></p>\n<blockquote>\n<p>装饰者模式 Decorator模式（别名Wrapper）：动态将职责附加到对象上，若要扩展功能，装饰者提供了比继承更具弹性的代替方案。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arraypro = <span class=\"built_in\">Array</span>.property; <span class=\"comment\">// 创建一个数组的原型对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrob = <span class=\"built_in\">Object</span>.create(arraypro); <span class=\"comment\">// 避免影响原型链</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'push'</span>,<span class=\"string\">'pop'</span>,<span class=\"string\">'shift'</span>];</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">method,index</span>)</span>&#123;</span><br><span class=\"line\">\tarrob[method]=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">// 装饰者模式</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> ret = arraypro[method].apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t\tdep.notify() <span class=\"comment\">// 扩展了功能</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\">## Vue3 实现双向绑定</span></span><br><span class=\"line\"><span class=\"string\">Proxy 是什么？</span></span><br><span class=\"line\"><span class=\"string\">&gt; Proxy 对象用于定义基本操作的自定义行为</span></span><br><span class=\"line\"><span class=\"string\">&gt; 和 definePropty 类似，功能几乎一样，只是用法上不同</span></span><br><span class=\"line\"><span class=\"string\">&gt; 1. 不会污染原对象</span></span><br><span class=\"line\"><span class=\"string\">&gt; 2. 直接给对象就可以了</span></span><br><span class=\"line\"><span class=\"string\">&gt; 3. 不需要借助外部变量 _val</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> js</span><br><span class=\"line\"><span class=\"keyword\">var</span> ob = &#123;</span><br><span class=\"line\">\ta:<span class=\"number\">1</span>,</span><br><span class=\"line\">\tb:<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newOb = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(ob,&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">get</span>(target,key,receiver)&#123; <span class=\"comment\">// target 对象，key 属性</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(target,key,receiver)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> target[key]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">set</span>(target,key,value,receiver)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.set(target.key,value); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 将值分配给属性的函数。返回一个Boolean，如果更新成功，则返回true。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// return target[key] = value</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"为什么改用-Proxy\"><a href=\"#为什么改用-Proxy\" class=\"headerlink\" title=\"为什么改用 Proxy\"></a>为什么改用 Proxy</h3><ol>\n<li>defineProperty 只能监听某个属性，不能全对象监听</li>\n<li>可以省去<code>for in</code>循环提升代码执行效率</li>\n<li>可以监听数组，不需要再为数组做特异性操作</li>\n<li>不污染原对象</li>\n<li>更优雅</li>\n</ol>\n<p>我们用 Proxy 实现一下 observe 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue.property.observe = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.$data = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(<span class=\"keyword\">this</span>.$data,&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">get</span>(target,key, receiver)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> target[key]</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"keyword\">set</span>(target,key,newVal)&#123;</span><br><span class=\"line\">\t\t\ttarget[key] = newVal</span><br><span class=\"line\">\t\t\tself.render()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"还能用-Proxy-做什么\"><a href=\"#还能用-Proxy-做什么\" class=\"headerlink\" title=\"还能用 Proxy 做什么\"></a>还能用 Proxy 做什么</h4><ol>\n<li>校验类型</li>\n<li>真正的私有变量</li>\n</ol>\n<h5 id=\"校验类型\"><a href=\"#校验类型\" class=\"headerlink\" title=\"校验类型\"></a>校验类型</h5><p>例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数据类型验证</span></span><br><span class=\"line\"><span class=\"comment\">// 我们要创建一个对象，这个对象是个人，他有name和age两个属性</span></span><br><span class=\"line\"><span class=\"comment\">// name必须是中文，age必须是数字，大于18岁</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里用到了策略模式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> valid = &#123;</span><br><span class=\"line\">\tname(value)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> reg=<span class=\"regexp\">/^[\\u4E00-\\u9FAS]=$/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> value === <span class=\"string\">'string'</span> &amp;&amp; reg.test(value))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;, </span><br><span class=\"line\">\tage(value)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> value === <span class=\"string\">'number'</span> &amp;&amp; value &gt; <span class=\"number\">18</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(<span class=\"keyword\">this</span>,&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">get</span>(target,key)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> target[key]</span><br><span class=\"line\">\t\t&#125;, </span><br><span class=\"line\">\t\t<span class=\"keyword\">set</span>(target,key,value)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(valid[key](value))&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.set(target,key,value)</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(key+<span class=\"string\">'is not valid'</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> Person(<span class=\"string\">'name'</span>,<span class=\"number\">19</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong><em>策略模式</em></strong><br>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。</p>\n</blockquote>\n<h5 id=\"真正的私有变量\"><a href=\"#真正的私有变量\" class=\"headerlink\" title=\"真正的私有变量\"></a>真正的私有变量</h5><p>vue-router 源码中，给 $router ,$route 用 defineProperty 定义 get 并返回本身，这样就不能修改属性了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>,<span class=\"string\">'$router'</span>,&#123; <span class=\"comment\">// Router 的实例</span></span><br><span class=\"line\">\t<span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._root._router;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>,<span class=\"string\">'$route'</span>,&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 当前路由所在的状态</span></span><br><span class=\"line\">\t\t\tcurrent: <span class=\"keyword\">this</span>._root._router.history.current;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"虚拟Dom和diff算法\"><a href=\"#虚拟Dom和diff算法\" class=\"headerlink\" title=\"虚拟Dom和diff算法\"></a>虚拟Dom和diff算法</h2><p>虚拟Dom是虚拟的，他只在概念里面存在，在AST语法树，下面进行解释</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模板</span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div&gt;</span><br><span class=\"line\">\t\t&lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;p&gt;2&lt;/</span>p&gt;</span><br><span class=\"line\">\t\t&lt;p&gt;<span class=\"number\">3</span>&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ diff 描述法</span></span><br><span class=\"line\"><span class=\"regexp\">diff &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\tprops:&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tid:2</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\tchildren:[</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tdiff &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tprops:&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\tid:xxx</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tchildren:[</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t...</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t]</span></span><br><span class=\"line\"><span class=\"regexp\">\t]</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 对象描述法</span></span><br><span class=\"line\"><span class=\"regexp\">var virtual = &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tdom:'div',</span></span><br><span class=\"line\"><span class=\"regexp\">\tprops:&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tid:2</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">\tchildren:[</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t....</span></span><br><span class=\"line\"><span class=\"regexp\">\t]</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>每层结构都是一样的，那么是如何进行 diff 比对的呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * diff 算法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">patchVnode(oldVnode,vnode)&#123; <span class=\"comment\">// 接收新旧节点</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> el = vnode.el = oldVnode.el; <span class=\"comment\">// 拿出真实dom</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> i,oldCh = oldVnode.children ,ch = vnode.children <span class=\"comment\">// 拿出新旧节点子元素children数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(oldVnode === vnode) <span class=\"keyword\">return</span>; <span class=\"comment\">// 新旧节点一致，直接返回不进行后续操作</span></span><br><span class=\"line\">\t<span class=\"comment\">// 分情况操作 --- 只有文字节点，删除了子元素，增加了子元素，子元素发生变动</span></span><br><span class=\"line\">\t<span class=\"comment\">// 新旧节点都不为空，且不一样</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(oldVnode.text !== <span class=\"literal\">null</span> &amp;&amp; vnode.text !== <span class=\"literal\">null</span> &amp;&amp; oldVnode.text !== vnode.text)&#123; <span class=\"comment\">// 文字发生更新</span></span><br><span class=\"line\">\t\tapi.setTextContent(el,vonde.text) <span class=\"comment\">// 文字发生了更新，更新文字，给Dom，更新文字</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 不是单纯文字节点的话</span></span><br><span class=\"line\">\t\tupdateEle(); <span class=\"comment\">// 更新元素</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(oldCh&amp;&amp;ch&amp;&amp;oldCh!==ch)&#123; <span class=\"comment\">// 都有子元素，子元素变动</span></span><br><span class=\"line\">\t\t\tupdateChildren() <span class=\"comment\">// 调用更新子元素方法</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ch)&#123; <span class=\"comment\">// 增加子元素</span></span><br><span class=\"line\">\t\t\tcreateEl(vnode) <span class=\"comment\">// 创建子元素</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(oldCh)&#123; <span class=\"comment\">// 删除子元素</span></span><br><span class=\"line\">\t\t\tapi.removeChildren(el) <span class=\"comment\">// 调用删除子元素方法</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码要多看，以下必看 <strong><em>Vue/react/axios/vue-router/Redux/Vuex</em></strong><br>为什么要看源码？？</p>\n<ul>\n<li>初级前端就会用vue或react — 从差不多水平的60%中挑出更好的人</li>\n<li>提高思想–》看优秀的代码–》写优秀的代码</li>\n<li>看源码能力，对高级前端是必备的。— 解决疑难杂症，看源码了解原理。</li>\n</ul>\n<h2 id=\"vue-性能优化\"><a href=\"#vue-性能优化\" class=\"headerlink\" title=\"vue 性能优化\"></a>vue 性能优化</h2><p>因为是公开课，所以时间上没来的及说完，以后自己在听别的有关的内容时再补上这块。</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>只有不断学习才能进步，充分利用网络的便利性，找各种优质的教学资源，我相信，努力会有回报，加油！</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近一直在追网课，说实话从业9年了，一直觉得前端发展非常快，而且一直充满着危机感，每天都要学习进步才有安稳的感觉，今天听了 vue 响应式原理实现的公开课，感觉还不错，做了如下笔记，帮助自己记忆，也希望能帮助大家。</p>\n<h1 id=\"Vue2-原理\"><a href=\"#Vue2-原理\" class=\"headerlink\" title=\"Vue2 原理\"></a>Vue2 原理</h1><h2 id=\"什么是-defineProperty\"><a href=\"#什么是-defineProperty\" class=\"headerlink\" title=\"什么是 defineProperty\"></a>什么是 defineProperty</h2><p>defineProperty 其实是定义对象属性用的</p>\n<blockquote>\n<p>defineProperty 其实并不是核心的为一个对象做数据双向绑定，而是去给对象做属性标签，只不过是属性里 get 和 set 实现了响应式。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>value</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>get</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>set</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>writable</td>\n<td>false</td>\n</tr>\n<tr>\n<td>enumerable</td>\n<td>false</td>\n</tr>\n<tr>\n<td>configurable</td>\n<td>false</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ob = &#123;</span><br><span class=\"line\">\ta:<span class=\"number\">1</span>,</span><br><span class=\"line\">\tb:<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 参数 1、对象 2、属性 3、配置</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(ob,<span class=\"string\">'a'</span>,&#123;</span><br><span class=\"line\">\twritable:<span class=\"literal\">false</span>,</span><br><span class=\"line\">\tenumerable:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\tconfigurable:<span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(ob,<span class=\"string\">'a'</span>)) <span class=\"comment\">// 1</span></span><br><span class=\"line\">ob.a = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ob.a) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>下面我们实现一下双向绑定</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(ob,<span class=\"string\">'a'</span>,&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">get</span>:function()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a is be get'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">999</span>;</span><br><span class=\"line\">\t&#125;, </span><br><span class=\"line\">\t<span class=\"keyword\">set</span>:function()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a is be set'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">999</span>;</span><br><span class=\"line\">\t&#125;, </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(ob,<span class=\"string\">'a'</span>)) <span class=\"comment\">// 999</span></span><br></pre></td></tr></table></figure>\n<p>改造代码实现双向绑定（存取值）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _val = obj.a; <span class=\"comment\">// 暂存</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(ob,<span class=\"string\">'a'</span>,&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">get</span>:function()&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a is be get'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _val;</span><br><span class=\"line\">\t&#125;, </span><br><span class=\"line\">\t<span class=\"keyword\">set</span>:function(newVal)&#123;</span><br><span class=\"line\">\t\t_val = newVal <span class=\"comment\">// 新值替换旧值</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a is be set'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _val;</span><br><span class=\"line\">\t&#125;, </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vue-中从改变一个数据到发生改变的过程\"><a href=\"#Vue-中从改变一个数据到发生改变的过程\" class=\"headerlink\" title=\"Vue 中从改变一个数据到发生改变的过程\"></a>Vue 中从改变一个数据到发生改变的过程</h2><ol>\n<li>改变数据触发 Set </li>\n<li>Set 部分触发 notify（更新）<ol>\n<li>Get 部分收集依赖</li>\n</ol>\n</li>\n<li>更改对应的虚拟 Dom</li>\n<li>重新 Render</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MyVue.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简单版本 vue</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyVue</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.$data = &#123;</span><br><span class=\"line\">\t\ta: &#123;</span><br><span class=\"line\">\t\t\tb:<span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;, </span><br><span class=\"line\">\t\tc:<span class=\"number\">2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.el = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.virtualDom = <span class=\"string\">''</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.observer(<span class=\"keyword\">this</span>.$data);</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.render();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vue.property.observer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> _val, self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// var dep = new Dep() -&gt; 源码中依赖收集对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj)&#123; <span class=\"comment\">// 属性有可能是对象，要递归绑定</span></span><br><span class=\"line\">\t\t_val = obj[key];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> _val === <span class=\"string\">'Object'</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.observer(_val)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>.$data,key,&#123; <span class=\"comment\">// 这里是实际绑定过程</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">get</span>:function()&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 依赖收集</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// dep.depend(); -&gt; vue 源码中收集依赖的方法</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> _val</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">set</span>:function(newVal)&#123;</span><br><span class=\"line\">\t\t\t\t\t_val = newVal</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// dep.notify(); -&gt; vue 源码中</span></span><br><span class=\"line\">\t\t\t\t\tself.render() <span class=\"comment\">// AST语法树</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vue.property.render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.virtualDom = <span class=\"string\">'i am '</span>+<span class=\"keyword\">this</span>.$data.b;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.el.innerHTML = <span class=\"keyword\">this</span>.virtualDom;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.html</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>自己实现Vue2数据双向绑定<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">'myVue.js'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t<span class=\"keyword\">var</span> mv = <span class=\"keyword\">new</span> MyVue();</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'changes'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"built_in\">console</span>.log(mv.$data);</span></span><br><span class=\"line\">\t\t\t\tmv.$data.b = 222;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>依赖收集：</p>\n<ol>\n<li>我们的data里面的数据并不是所有地方都用到</li>\n<li>如果我们直接更新整个视图，浪费资源</li>\n<li>先收集依赖改变的数据的组件，再更新依赖了数据的组件（Dep depend notify）</li>\n</ol>\n</blockquote>\n<h3 id=\"格外注意的地方—数组怎么监听\"><a href=\"#格外注意的地方—数组怎么监听\" class=\"headerlink\" title=\"格外注意的地方—数组怎么监听\"></a>格外注意的地方—数组怎么监听</h3><p>definePropty 只能给对象进行 get set 绑定， 数组怎么办？</p>\n<p>vue 中 使用了 <strong><em>装饰者模式</em></strong></p>\n<blockquote>\n<p>装饰者模式 Decorator模式（别名Wrapper）：动态将职责附加到对象上，若要扩展功能，装饰者提供了比继承更具弹性的代替方案。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arraypro = <span class=\"built_in\">Array</span>.property; <span class=\"comment\">// 创建一个数组的原型对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrob = <span class=\"built_in\">Object</span>.create(arraypro); <span class=\"comment\">// 避免影响原型链</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'push'</span>,<span class=\"string\">'pop'</span>,<span class=\"string\">'shift'</span>];</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">method,index</span>)</span>&#123;</span><br><span class=\"line\">\tarrob[method]=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">// 装饰者模式</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> ret = arraypro[method].apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t\tdep.notify() <span class=\"comment\">// 扩展了功能</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\">## Vue3 实现双向绑定</span></span><br><span class=\"line\"><span class=\"string\">Proxy 是什么？</span></span><br><span class=\"line\"><span class=\"string\">&gt; Proxy 对象用于定义基本操作的自定义行为</span></span><br><span class=\"line\"><span class=\"string\">&gt; 和 definePropty 类似，功能几乎一样，只是用法上不同</span></span><br><span class=\"line\"><span class=\"string\">&gt; 1. 不会污染原对象</span></span><br><span class=\"line\"><span class=\"string\">&gt; 2. 直接给对象就可以了</span></span><br><span class=\"line\"><span class=\"string\">&gt; 3. 不需要借助外部变量 _val</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> js</span><br><span class=\"line\"><span class=\"keyword\">var</span> ob = &#123;</span><br><span class=\"line\">\ta:<span class=\"number\">1</span>,</span><br><span class=\"line\">\tb:<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newOb = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(ob,&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">get</span>(target,key,receiver)&#123; <span class=\"comment\">// target 对象，key 属性</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(target,key,receiver)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> target[key]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"keyword\">set</span>(target,key,value,receiver)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.set(target.key,value); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 将值分配给属性的函数。返回一个Boolean，如果更新成功，则返回true。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// return target[key] = value</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"为什么改用-Proxy\"><a href=\"#为什么改用-Proxy\" class=\"headerlink\" title=\"为什么改用 Proxy\"></a>为什么改用 Proxy</h3><ol>\n<li>defineProperty 只能监听某个属性，不能全对象监听</li>\n<li>可以省去<code>for in</code>循环提升代码执行效率</li>\n<li>可以监听数组，不需要再为数组做特异性操作</li>\n<li>不污染原对象</li>\n<li>更优雅</li>\n</ol>\n<p>我们用 Proxy 实现一下 observe 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue.property.observe = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.$data = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(<span class=\"keyword\">this</span>.$data,&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">get</span>(target,key, receiver)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> target[key]</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"keyword\">set</span>(target,key,newVal)&#123;</span><br><span class=\"line\">\t\t\ttarget[key] = newVal</span><br><span class=\"line\">\t\t\tself.render()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"还能用-Proxy-做什么\"><a href=\"#还能用-Proxy-做什么\" class=\"headerlink\" title=\"还能用 Proxy 做什么\"></a>还能用 Proxy 做什么</h4><ol>\n<li>校验类型</li>\n<li>真正的私有变量</li>\n</ol>\n<h5 id=\"校验类型\"><a href=\"#校验类型\" class=\"headerlink\" title=\"校验类型\"></a>校验类型</h5><p>例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数据类型验证</span></span><br><span class=\"line\"><span class=\"comment\">// 我们要创建一个对象，这个对象是个人，他有name和age两个属性</span></span><br><span class=\"line\"><span class=\"comment\">// name必须是中文，age必须是数字，大于18岁</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里用到了策略模式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> valid = &#123;</span><br><span class=\"line\">\tname(value)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> reg=<span class=\"regexp\">/^[\\u4E00-\\u9FAS]=$/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> value === <span class=\"string\">'string'</span> &amp;&amp; reg.test(value))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;, </span><br><span class=\"line\">\tage(value)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> value === <span class=\"string\">'number'</span> &amp;&amp; value &gt; <span class=\"number\">18</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(<span class=\"keyword\">this</span>,&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">get</span>(target,key)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> target[key]</span><br><span class=\"line\">\t\t&#125;, </span><br><span class=\"line\">\t\t<span class=\"keyword\">set</span>(target,key,value)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(valid[key](value))&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.set(target,key,value)</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(key+<span class=\"string\">'is not valid'</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> Person(<span class=\"string\">'name'</span>,<span class=\"number\">19</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong><em>策略模式</em></strong><br>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。</p>\n</blockquote>\n<h5 id=\"真正的私有变量\"><a href=\"#真正的私有变量\" class=\"headerlink\" title=\"真正的私有变量\"></a>真正的私有变量</h5><p>vue-router 源码中，给 $router ,$route 用 defineProperty 定义 get 并返回本身，这样就不能修改属性了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>,<span class=\"string\">'$router'</span>,&#123; <span class=\"comment\">// Router 的实例</span></span><br><span class=\"line\">\t<span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._root._router;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>,<span class=\"string\">'$route'</span>,&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 当前路由所在的状态</span></span><br><span class=\"line\">\t\t\tcurrent: <span class=\"keyword\">this</span>._root._router.history.current;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"虚拟Dom和diff算法\"><a href=\"#虚拟Dom和diff算法\" class=\"headerlink\" title=\"虚拟Dom和diff算法\"></a>虚拟Dom和diff算法</h2><p>虚拟Dom是虚拟的，他只在概念里面存在，在AST语法树，下面进行解释</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模板</span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div&gt;</span><br><span class=\"line\">\t\t&lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t&lt;p&gt;2&lt;/</span>p&gt;</span><br><span class=\"line\">\t\t&lt;p&gt;<span class=\"number\">3</span>&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ diff 描述法</span></span><br><span class=\"line\"><span class=\"regexp\">diff &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\tprops:&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tid:2</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\tchildren:[</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tdiff &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tprops:&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\tid:xxx</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\tchildren:[</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t\t...</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t]</span></span><br><span class=\"line\"><span class=\"regexp\">\t]</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 对象描述法</span></span><br><span class=\"line\"><span class=\"regexp\">var virtual = &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tdom:'div',</span></span><br><span class=\"line\"><span class=\"regexp\">\tprops:&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tid:2</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">\tchildren:[</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t....</span></span><br><span class=\"line\"><span class=\"regexp\">\t]</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>每层结构都是一样的，那么是如何进行 diff 比对的呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * diff 算法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">patchVnode(oldVnode,vnode)&#123; <span class=\"comment\">// 接收新旧节点</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> el = vnode.el = oldVnode.el; <span class=\"comment\">// 拿出真实dom</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> i,oldCh = oldVnode.children ,ch = vnode.children <span class=\"comment\">// 拿出新旧节点子元素children数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(oldVnode === vnode) <span class=\"keyword\">return</span>; <span class=\"comment\">// 新旧节点一致，直接返回不进行后续操作</span></span><br><span class=\"line\">\t<span class=\"comment\">// 分情况操作 --- 只有文字节点，删除了子元素，增加了子元素，子元素发生变动</span></span><br><span class=\"line\">\t<span class=\"comment\">// 新旧节点都不为空，且不一样</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(oldVnode.text !== <span class=\"literal\">null</span> &amp;&amp; vnode.text !== <span class=\"literal\">null</span> &amp;&amp; oldVnode.text !== vnode.text)&#123; <span class=\"comment\">// 文字发生更新</span></span><br><span class=\"line\">\t\tapi.setTextContent(el,vonde.text) <span class=\"comment\">// 文字发生了更新，更新文字，给Dom，更新文字</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 不是单纯文字节点的话</span></span><br><span class=\"line\">\t\tupdateEle(); <span class=\"comment\">// 更新元素</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(oldCh&amp;&amp;ch&amp;&amp;oldCh!==ch)&#123; <span class=\"comment\">// 都有子元素，子元素变动</span></span><br><span class=\"line\">\t\t\tupdateChildren() <span class=\"comment\">// 调用更新子元素方法</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ch)&#123; <span class=\"comment\">// 增加子元素</span></span><br><span class=\"line\">\t\t\tcreateEl(vnode) <span class=\"comment\">// 创建子元素</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(oldCh)&#123; <span class=\"comment\">// 删除子元素</span></span><br><span class=\"line\">\t\t\tapi.removeChildren(el) <span class=\"comment\">// 调用删除子元素方法</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码要多看，以下必看 <strong><em>Vue/react/axios/vue-router/Redux/Vuex</em></strong><br>为什么要看源码？？</p>\n<ul>\n<li>初级前端就会用vue或react — 从差不多水平的60%中挑出更好的人</li>\n<li>提高思想–》看优秀的代码–》写优秀的代码</li>\n<li>看源码能力，对高级前端是必备的。— 解决疑难杂症，看源码了解原理。</li>\n</ul>\n<h2 id=\"vue-性能优化\"><a href=\"#vue-性能优化\" class=\"headerlink\" title=\"vue 性能优化\"></a>vue 性能优化</h2><p>因为是公开课，所以时间上没来的及说完，以后自己在听别的有关的内容时再补上这块。</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>只有不断学习才能进步，充分利用网络的便利性，找各种优质的教学资源，我相信，努力会有回报，加油！</p>\n"},{"title":"JavaScript 设计模式 Design Pattern","date":"2020-01-13T12:22:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n最近在整理自己的知识体系，一方面为了夯实基础，另一方面也为了查缺补漏、重新理解，设计模式之前看过大概三四次，从最开始一点都不懂，到后面看了几遍以后慢慢理解，今天再次整理一下，希望这一遍下来之后能更加透彻的理解什么是设计模式。\n<!-- more -->\n\n# 什么是设计模式\n> 设计模式的定义：在面向对象软件设计过程中针对特定问题的简洁而优雅的解决方案\n> 设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。\n\n>　　使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的；设计模式使代码编制真正工程化；设计模式是软件工程的基石脉络，如同大厦的结构一样。   ---- 百度百科\n\n不知道大家看了上面的定义以后是什么感受，说实话我第一次看到这句话并没有什么深刻的认识，什么面向对象的软件设计，什么针对特定问题，什么优雅的解决方案，这都说的是什么，后来我看了几遍之后，上面这句话用我的理解翻译如下：\n\n> 软件开发过程中，解决某一类问题用到的一系列套路\n\n这就是我对设计模式的认识。当然这也不仅仅是我自己的认识，在跟其他的一些开发人员交流时，很多人都是这么认为的。\n\n这些解决问题的方案实在是太好用了，所以大神就把它们抽象出来，然后起了个名字-就叫做设计模式了。\n\n这么说大家可能还是不太明白，举个开发过程中可能遇到的实际例子吧。\n\n> 当系统中某个接口的结构已经无法满足我们现在的业务需求，但又不能改动这个接口，因为可能原来的系统很多功能都依赖于这个接口，改动接口会牵扯到太多文件。那么这种场景下我们该如何解决这个问题呢？通常我们需要新增一个接口，兼容原来的接口和新的业务需求参数。\n> 因此应对这种场景，我们可以很快地想到可以用适配器模式来解决这个问题。\n\n这就是设计模式的应用，实际上也许你还不知道设计模式这个词，但是你已经在工作中频繁的用到了设计模式，下面我们就来看看到底有哪些设计模式。\n\n哦，对了，设计模式并不依赖于语言，它本身更像是一种软件的设计思想，因为我是一个前端，所以接下来具体实现的时候我会使用js来实现设计模式的用法。\n\n# 学习设计模式\n目前被普遍接受的经典的设计模式共有 **23** 种，而这23种设计模式又分为了 **3大类** ，看过一张图这里拿过来镇贴。\n![lHgD4H.jpg](https://s2.ax1x.com/2020/01/13/lHgD4H.jpg)\n他们分别是\n- 创建型模式\n- 结构型模式\n- 行为型模式\n\n接下来，我将会将这23种，3大类设计模式一个个的拆解开来，跟大家一起学习一下，设计模式有哪些内容。\n\n## 创建型模式 6个\n这类模式用于**对象的生成**和**生命周期的管理**。\n创建型模式可以决定生成哪些对象，提高了程序的灵活性。具体属于此类的模式清单如下，共有 **5** 个：\n- 单例模式（Singleton）\n- 工厂方法模式（Factory Method）\n- 抽象工厂模式（Abstract Factory）\n- 建造者模式（Builder）\n- 原型模式（Prototype）\n- 迭代器模式（Iterator）\n\n### 单例模式（Singleton）\n***描述：***确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。\n### 工厂方法模式（Factory Method）\n***描述：***定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。\n### 抽象工厂模式（Abstract Factory）\n***描述：***为创建一组相关或相互依赖的对象提供一个接口，而且无需指定它们的具体类\n### 建造者模式（Builder）\n***描述：***将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示。\n### 原型模式（Prototype）\n***描述：***用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。\n### 迭代器模式（Iterator）\n***描述：***提供一种方法访问一个容器对象中的各个元素，而又不需暴露该对象的内部细节。\n\n## 结构型模式 7个\n- 适配器模式（Adapter）\n- 组合模式（Compositor）\n- 代理模式（Proxy）\n- 桥梁模式（Bridge）\n- 装饰模式（Decorator）\n- 门面模式（Facade）\n- 享元模式（Flyweight）\n\n### 适配器模式（Adapter）\n***描述：***将一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。\n\n### 组合模式（Compositor）\n***描述：***将对象组合成树形结构\n\n### 代理模式（Proxy）\n***描述：***\n\n### 桥梁模式（Bridge）\n***描述：***\n\n### 装饰模式（Decorator）\n***描述：***\n\n### 门面模式（Facade）\n***描述：***\n\n### 享元模式（Flyweight）\n***描述：***\n\n## 行为型模式 10个\n- 命名模式（Command）\n- 解释器模式（Interpreter）\n- 责任链模式（Chian of Responsibility）\n- 观察者模式（Observer）\n- 中介者模式（Mediator）\n- 备忘录模式（Memento）\n- 状态模式（State）\n- 策略模式（Strategy）\n- 模板方法模式（Template Method）\n- 访问者模式（Visitor）\n\n### 命名模式（Command）\n***描述：***\n\n### 解释器模式（Interpreter）\n***描述：***\n\n### 责任链模式（Chian of Responsibility）\n***描述：***\n\n### 观察者模式（Observer）\n***描述：***\n\n### 中介者模式（Mediator）\n***描述：***\n\n### 备忘录模式（Memento）\n***描述：***\n\n### 状态模式（State）\n***描述：***\n\n### 策略模式（Strategy）\n***描述：***\n\n### 模板方法模式（Template Method）\n***描述：***\n\n### 访问者模式（Visitor）\n***描述：***\n","source":"_posts/Javascript-Design-Pattern.md","raw":"---\ntitle: JavaScript 设计模式 Design Pattern\ndate: 2020-01-13 20:22:22\ncategories: \n\t- 前端技术\ntags: \n\t- 设计模式\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n最近在整理自己的知识体系，一方面为了夯实基础，另一方面也为了查缺补漏、重新理解，设计模式之前看过大概三四次，从最开始一点都不懂，到后面看了几遍以后慢慢理解，今天再次整理一下，希望这一遍下来之后能更加透彻的理解什么是设计模式。\n<!-- more -->\n\n# 什么是设计模式\n> 设计模式的定义：在面向对象软件设计过程中针对特定问题的简洁而优雅的解决方案\n> 设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。\n\n>　　使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的；设计模式使代码编制真正工程化；设计模式是软件工程的基石脉络，如同大厦的结构一样。   ---- 百度百科\n\n不知道大家看了上面的定义以后是什么感受，说实话我第一次看到这句话并没有什么深刻的认识，什么面向对象的软件设计，什么针对特定问题，什么优雅的解决方案，这都说的是什么，后来我看了几遍之后，上面这句话用我的理解翻译如下：\n\n> 软件开发过程中，解决某一类问题用到的一系列套路\n\n这就是我对设计模式的认识。当然这也不仅仅是我自己的认识，在跟其他的一些开发人员交流时，很多人都是这么认为的。\n\n这些解决问题的方案实在是太好用了，所以大神就把它们抽象出来，然后起了个名字-就叫做设计模式了。\n\n这么说大家可能还是不太明白，举个开发过程中可能遇到的实际例子吧。\n\n> 当系统中某个接口的结构已经无法满足我们现在的业务需求，但又不能改动这个接口，因为可能原来的系统很多功能都依赖于这个接口，改动接口会牵扯到太多文件。那么这种场景下我们该如何解决这个问题呢？通常我们需要新增一个接口，兼容原来的接口和新的业务需求参数。\n> 因此应对这种场景，我们可以很快地想到可以用适配器模式来解决这个问题。\n\n这就是设计模式的应用，实际上也许你还不知道设计模式这个词，但是你已经在工作中频繁的用到了设计模式，下面我们就来看看到底有哪些设计模式。\n\n哦，对了，设计模式并不依赖于语言，它本身更像是一种软件的设计思想，因为我是一个前端，所以接下来具体实现的时候我会使用js来实现设计模式的用法。\n\n# 学习设计模式\n目前被普遍接受的经典的设计模式共有 **23** 种，而这23种设计模式又分为了 **3大类** ，看过一张图这里拿过来镇贴。\n![lHgD4H.jpg](https://s2.ax1x.com/2020/01/13/lHgD4H.jpg)\n他们分别是\n- 创建型模式\n- 结构型模式\n- 行为型模式\n\n接下来，我将会将这23种，3大类设计模式一个个的拆解开来，跟大家一起学习一下，设计模式有哪些内容。\n\n## 创建型模式 6个\n这类模式用于**对象的生成**和**生命周期的管理**。\n创建型模式可以决定生成哪些对象，提高了程序的灵活性。具体属于此类的模式清单如下，共有 **5** 个：\n- 单例模式（Singleton）\n- 工厂方法模式（Factory Method）\n- 抽象工厂模式（Abstract Factory）\n- 建造者模式（Builder）\n- 原型模式（Prototype）\n- 迭代器模式（Iterator）\n\n### 单例模式（Singleton）\n***描述：***确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。\n### 工厂方法模式（Factory Method）\n***描述：***定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。\n### 抽象工厂模式（Abstract Factory）\n***描述：***为创建一组相关或相互依赖的对象提供一个接口，而且无需指定它们的具体类\n### 建造者模式（Builder）\n***描述：***将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示。\n### 原型模式（Prototype）\n***描述：***用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。\n### 迭代器模式（Iterator）\n***描述：***提供一种方法访问一个容器对象中的各个元素，而又不需暴露该对象的内部细节。\n\n## 结构型模式 7个\n- 适配器模式（Adapter）\n- 组合模式（Compositor）\n- 代理模式（Proxy）\n- 桥梁模式（Bridge）\n- 装饰模式（Decorator）\n- 门面模式（Facade）\n- 享元模式（Flyweight）\n\n### 适配器模式（Adapter）\n***描述：***将一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。\n\n### 组合模式（Compositor）\n***描述：***将对象组合成树形结构\n\n### 代理模式（Proxy）\n***描述：***\n\n### 桥梁模式（Bridge）\n***描述：***\n\n### 装饰模式（Decorator）\n***描述：***\n\n### 门面模式（Facade）\n***描述：***\n\n### 享元模式（Flyweight）\n***描述：***\n\n## 行为型模式 10个\n- 命名模式（Command）\n- 解释器模式（Interpreter）\n- 责任链模式（Chian of Responsibility）\n- 观察者模式（Observer）\n- 中介者模式（Mediator）\n- 备忘录模式（Memento）\n- 状态模式（State）\n- 策略模式（Strategy）\n- 模板方法模式（Template Method）\n- 访问者模式（Visitor）\n\n### 命名模式（Command）\n***描述：***\n\n### 解释器模式（Interpreter）\n***描述：***\n\n### 责任链模式（Chian of Responsibility）\n***描述：***\n\n### 观察者模式（Observer）\n***描述：***\n\n### 中介者模式（Mediator）\n***描述：***\n\n### 备忘录模式（Memento）\n***描述：***\n\n### 状态模式（State）\n***描述：***\n\n### 策略模式（Strategy）\n***描述：***\n\n### 模板方法模式（Template Method）\n***描述：***\n\n### 访问者模式（Visitor）\n***描述：***\n","slug":"Javascript-Design-Pattern","published":1,"updated":"2020-04-02T03:20:12.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs0b002wooa65rih2fhd","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在整理自己的知识体系，一方面为了夯实基础，另一方面也为了查缺补漏、重新理解，设计模式之前看过大概三四次，从最开始一点都不懂，到后面看了几遍以后慢慢理解，今天再次整理一下，希望这一遍下来之后能更加透彻的理解什么是设计模式。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"什么是设计模式\"><a href=\"#什么是设计模式\" class=\"headerlink\" title=\"什么是设计模式\"></a>什么是设计模式</h1><blockquote>\n<p>设计模式的定义：在面向对象软件设计过程中针对特定问题的简洁而优雅的解决方案<br>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。</p>\n</blockquote>\n<blockquote>\n<p>　　使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的；设计模式使代码编制真正工程化；设计模式是软件工程的基石脉络，如同大厦的结构一样。   —- 百度百科</p>\n</blockquote>\n<p>不知道大家看了上面的定义以后是什么感受，说实话我第一次看到这句话并没有什么深刻的认识，什么面向对象的软件设计，什么针对特定问题，什么优雅的解决方案，这都说的是什么，后来我看了几遍之后，上面这句话用我的理解翻译如下：</p>\n<blockquote>\n<p>软件开发过程中，解决某一类问题用到的一系列套路</p>\n</blockquote>\n<p>这就是我对设计模式的认识。当然这也不仅仅是我自己的认识，在跟其他的一些开发人员交流时，很多人都是这么认为的。</p>\n<p>这些解决问题的方案实在是太好用了，所以大神就把它们抽象出来，然后起了个名字-就叫做设计模式了。</p>\n<p>这么说大家可能还是不太明白，举个开发过程中可能遇到的实际例子吧。</p>\n<blockquote>\n<p>当系统中某个接口的结构已经无法满足我们现在的业务需求，但又不能改动这个接口，因为可能原来的系统很多功能都依赖于这个接口，改动接口会牵扯到太多文件。那么这种场景下我们该如何解决这个问题呢？通常我们需要新增一个接口，兼容原来的接口和新的业务需求参数。<br>因此应对这种场景，我们可以很快地想到可以用适配器模式来解决这个问题。</p>\n</blockquote>\n<p>这就是设计模式的应用，实际上也许你还不知道设计模式这个词，但是你已经在工作中频繁的用到了设计模式，下面我们就来看看到底有哪些设计模式。</p>\n<p>哦，对了，设计模式并不依赖于语言，它本身更像是一种软件的设计思想，因为我是一个前端，所以接下来具体实现的时候我会使用js来实现设计模式的用法。</p>\n<h1 id=\"学习设计模式\"><a href=\"#学习设计模式\" class=\"headerlink\" title=\"学习设计模式\"></a>学习设计模式</h1><p>目前被普遍接受的经典的设计模式共有 <strong>23</strong> 种，而这23种设计模式又分为了 <strong>3大类</strong> ，看过一张图这里拿过来镇贴。<br><img src=\"https://s2.ax1x.com/2020/01/13/lHgD4H.jpg\" alt=\"lHgD4H.jpg\"><br>他们分别是</p>\n<ul>\n<li>创建型模式</li>\n<li>结构型模式</li>\n<li>行为型模式</li>\n</ul>\n<p>接下来，我将会将这23种，3大类设计模式一个个的拆解开来，跟大家一起学习一下，设计模式有哪些内容。</p>\n<h2 id=\"创建型模式-6个\"><a href=\"#创建型模式-6个\" class=\"headerlink\" title=\"创建型模式 6个\"></a>创建型模式 6个</h2><p>这类模式用于<strong>对象的生成</strong>和<strong>生命周期的管理</strong>。<br>创建型模式可以决定生成哪些对象，提高了程序的灵活性。具体属于此类的模式清单如下，共有 <strong>5</strong> 个：</p>\n<ul>\n<li>单例模式（Singleton）</li>\n<li>工厂方法模式（Factory Method）</li>\n<li>抽象工厂模式（Abstract Factory）</li>\n<li>建造者模式（Builder）</li>\n<li>原型模式（Prototype）</li>\n<li>迭代器模式（Iterator）</li>\n</ul>\n<h3 id=\"单例模式（Singleton）\"><a href=\"#单例模式（Singleton）\" class=\"headerlink\" title=\"单例模式（Singleton）\"></a>单例模式（Singleton）</h3><p><strong><em>描述：</em></strong>确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p>\n<h3 id=\"工厂方法模式（Factory-Method）\"><a href=\"#工厂方法模式（Factory-Method）\" class=\"headerlink\" title=\"工厂方法模式（Factory Method）\"></a>工厂方法模式（Factory Method）</h3><p><strong><em>描述：</em></strong>定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。</p>\n<h3 id=\"抽象工厂模式（Abstract-Factory）\"><a href=\"#抽象工厂模式（Abstract-Factory）\" class=\"headerlink\" title=\"抽象工厂模式（Abstract Factory）\"></a>抽象工厂模式（Abstract Factory）</h3><p><strong><em>描述：</em></strong>为创建一组相关或相互依赖的对象提供一个接口，而且无需指定它们的具体类</p>\n<h3 id=\"建造者模式（Builder）\"><a href=\"#建造者模式（Builder）\" class=\"headerlink\" title=\"建造者模式（Builder）\"></a>建造者模式（Builder）</h3><p><strong><em>描述：</em></strong>将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示。</p>\n<h3 id=\"原型模式（Prototype）\"><a href=\"#原型模式（Prototype）\" class=\"headerlink\" title=\"原型模式（Prototype）\"></a>原型模式（Prototype）</h3><p><strong><em>描述：</em></strong>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>\n<h3 id=\"迭代器模式（Iterator）\"><a href=\"#迭代器模式（Iterator）\" class=\"headerlink\" title=\"迭代器模式（Iterator）\"></a>迭代器模式（Iterator）</h3><p><strong><em>描述：</em></strong>提供一种方法访问一个容器对象中的各个元素，而又不需暴露该对象的内部细节。</p>\n<h2 id=\"结构型模式-7个\"><a href=\"#结构型模式-7个\" class=\"headerlink\" title=\"结构型模式 7个\"></a>结构型模式 7个</h2><ul>\n<li>适配器模式（Adapter）</li>\n<li>组合模式（Compositor）</li>\n<li>代理模式（Proxy）</li>\n<li>桥梁模式（Bridge）</li>\n<li>装饰模式（Decorator）</li>\n<li>门面模式（Facade）</li>\n<li>享元模式（Flyweight）</li>\n</ul>\n<h3 id=\"适配器模式（Adapter）\"><a href=\"#适配器模式（Adapter）\" class=\"headerlink\" title=\"适配器模式（Adapter）\"></a>适配器模式（Adapter）</h3><p><strong><em>描述：</em></strong>将一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。</p>\n<h3 id=\"组合模式（Compositor）\"><a href=\"#组合模式（Compositor）\" class=\"headerlink\" title=\"组合模式（Compositor）\"></a>组合模式（Compositor）</h3><p><strong><em>描述：</em></strong>将对象组合成树形结构</p>\n<h3 id=\"代理模式（Proxy）\"><a href=\"#代理模式（Proxy）\" class=\"headerlink\" title=\"代理模式（Proxy）\"></a>代理模式（Proxy）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"桥梁模式（Bridge）\"><a href=\"#桥梁模式（Bridge）\" class=\"headerlink\" title=\"桥梁模式（Bridge）\"></a>桥梁模式（Bridge）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"装饰模式（Decorator）\"><a href=\"#装饰模式（Decorator）\" class=\"headerlink\" title=\"装饰模式（Decorator）\"></a>装饰模式（Decorator）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"门面模式（Facade）\"><a href=\"#门面模式（Facade）\" class=\"headerlink\" title=\"门面模式（Facade）\"></a>门面模式（Facade）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"享元模式（Flyweight）\"><a href=\"#享元模式（Flyweight）\" class=\"headerlink\" title=\"享元模式（Flyweight）\"></a>享元模式（Flyweight）</h3><p><strong><em>描述：</em></strong></p>\n<h2 id=\"行为型模式-10个\"><a href=\"#行为型模式-10个\" class=\"headerlink\" title=\"行为型模式 10个\"></a>行为型模式 10个</h2><ul>\n<li>命名模式（Command）</li>\n<li>解释器模式（Interpreter）</li>\n<li>责任链模式（Chian of Responsibility）</li>\n<li>观察者模式（Observer）</li>\n<li>中介者模式（Mediator）</li>\n<li>备忘录模式（Memento）</li>\n<li>状态模式（State）</li>\n<li>策略模式（Strategy）</li>\n<li>模板方法模式（Template Method）</li>\n<li>访问者模式（Visitor）</li>\n</ul>\n<h3 id=\"命名模式（Command）\"><a href=\"#命名模式（Command）\" class=\"headerlink\" title=\"命名模式（Command）\"></a>命名模式（Command）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"解释器模式（Interpreter）\"><a href=\"#解释器模式（Interpreter）\" class=\"headerlink\" title=\"解释器模式（Interpreter）\"></a>解释器模式（Interpreter）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"责任链模式（Chian-of-Responsibility）\"><a href=\"#责任链模式（Chian-of-Responsibility）\" class=\"headerlink\" title=\"责任链模式（Chian of Responsibility）\"></a>责任链模式（Chian of Responsibility）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"观察者模式（Observer）\"><a href=\"#观察者模式（Observer）\" class=\"headerlink\" title=\"观察者模式（Observer）\"></a>观察者模式（Observer）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"中介者模式（Mediator）\"><a href=\"#中介者模式（Mediator）\" class=\"headerlink\" title=\"中介者模式（Mediator）\"></a>中介者模式（Mediator）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"备忘录模式（Memento）\"><a href=\"#备忘录模式（Memento）\" class=\"headerlink\" title=\"备忘录模式（Memento）\"></a>备忘录模式（Memento）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"状态模式（State）\"><a href=\"#状态模式（State）\" class=\"headerlink\" title=\"状态模式（State）\"></a>状态模式（State）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"策略模式（Strategy）\"><a href=\"#策略模式（Strategy）\" class=\"headerlink\" title=\"策略模式（Strategy）\"></a>策略模式（Strategy）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"模板方法模式（Template-Method）\"><a href=\"#模板方法模式（Template-Method）\" class=\"headerlink\" title=\"模板方法模式（Template Method）\"></a>模板方法模式（Template Method）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"访问者模式（Visitor）\"><a href=\"#访问者模式（Visitor）\" class=\"headerlink\" title=\"访问者模式（Visitor）\"></a>访问者模式（Visitor）</h3><p><strong><em>描述：</em></strong></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在整理自己的知识体系，一方面为了夯实基础，另一方面也为了查缺补漏、重新理解，设计模式之前看过大概三四次，从最开始一点都不懂，到后面看了几遍以后慢慢理解，今天再次整理一下，希望这一遍下来之后能更加透彻的理解什么是设计模式。</p>","more":"<h1 id=\"什么是设计模式\"><a href=\"#什么是设计模式\" class=\"headerlink\" title=\"什么是设计模式\"></a>什么是设计模式</h1><blockquote>\n<p>设计模式的定义：在面向对象软件设计过程中针对特定问题的简洁而优雅的解决方案<br>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。</p>\n</blockquote>\n<blockquote>\n<p>　　使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的；设计模式使代码编制真正工程化；设计模式是软件工程的基石脉络，如同大厦的结构一样。   —- 百度百科</p>\n</blockquote>\n<p>不知道大家看了上面的定义以后是什么感受，说实话我第一次看到这句话并没有什么深刻的认识，什么面向对象的软件设计，什么针对特定问题，什么优雅的解决方案，这都说的是什么，后来我看了几遍之后，上面这句话用我的理解翻译如下：</p>\n<blockquote>\n<p>软件开发过程中，解决某一类问题用到的一系列套路</p>\n</blockquote>\n<p>这就是我对设计模式的认识。当然这也不仅仅是我自己的认识，在跟其他的一些开发人员交流时，很多人都是这么认为的。</p>\n<p>这些解决问题的方案实在是太好用了，所以大神就把它们抽象出来，然后起了个名字-就叫做设计模式了。</p>\n<p>这么说大家可能还是不太明白，举个开发过程中可能遇到的实际例子吧。</p>\n<blockquote>\n<p>当系统中某个接口的结构已经无法满足我们现在的业务需求，但又不能改动这个接口，因为可能原来的系统很多功能都依赖于这个接口，改动接口会牵扯到太多文件。那么这种场景下我们该如何解决这个问题呢？通常我们需要新增一个接口，兼容原来的接口和新的业务需求参数。<br>因此应对这种场景，我们可以很快地想到可以用适配器模式来解决这个问题。</p>\n</blockquote>\n<p>这就是设计模式的应用，实际上也许你还不知道设计模式这个词，但是你已经在工作中频繁的用到了设计模式，下面我们就来看看到底有哪些设计模式。</p>\n<p>哦，对了，设计模式并不依赖于语言，它本身更像是一种软件的设计思想，因为我是一个前端，所以接下来具体实现的时候我会使用js来实现设计模式的用法。</p>\n<h1 id=\"学习设计模式\"><a href=\"#学习设计模式\" class=\"headerlink\" title=\"学习设计模式\"></a>学习设计模式</h1><p>目前被普遍接受的经典的设计模式共有 <strong>23</strong> 种，而这23种设计模式又分为了 <strong>3大类</strong> ，看过一张图这里拿过来镇贴。<br><img src=\"https://s2.ax1x.com/2020/01/13/lHgD4H.jpg\" alt=\"lHgD4H.jpg\"><br>他们分别是</p>\n<ul>\n<li>创建型模式</li>\n<li>结构型模式</li>\n<li>行为型模式</li>\n</ul>\n<p>接下来，我将会将这23种，3大类设计模式一个个的拆解开来，跟大家一起学习一下，设计模式有哪些内容。</p>\n<h2 id=\"创建型模式-6个\"><a href=\"#创建型模式-6个\" class=\"headerlink\" title=\"创建型模式 6个\"></a>创建型模式 6个</h2><p>这类模式用于<strong>对象的生成</strong>和<strong>生命周期的管理</strong>。<br>创建型模式可以决定生成哪些对象，提高了程序的灵活性。具体属于此类的模式清单如下，共有 <strong>5</strong> 个：</p>\n<ul>\n<li>单例模式（Singleton）</li>\n<li>工厂方法模式（Factory Method）</li>\n<li>抽象工厂模式（Abstract Factory）</li>\n<li>建造者模式（Builder）</li>\n<li>原型模式（Prototype）</li>\n<li>迭代器模式（Iterator）</li>\n</ul>\n<h3 id=\"单例模式（Singleton）\"><a href=\"#单例模式（Singleton）\" class=\"headerlink\" title=\"单例模式（Singleton）\"></a>单例模式（Singleton）</h3><p><strong><em>描述：</em></strong>确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p>\n<h3 id=\"工厂方法模式（Factory-Method）\"><a href=\"#工厂方法模式（Factory-Method）\" class=\"headerlink\" title=\"工厂方法模式（Factory Method）\"></a>工厂方法模式（Factory Method）</h3><p><strong><em>描述：</em></strong>定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。</p>\n<h3 id=\"抽象工厂模式（Abstract-Factory）\"><a href=\"#抽象工厂模式（Abstract-Factory）\" class=\"headerlink\" title=\"抽象工厂模式（Abstract Factory）\"></a>抽象工厂模式（Abstract Factory）</h3><p><strong><em>描述：</em></strong>为创建一组相关或相互依赖的对象提供一个接口，而且无需指定它们的具体类</p>\n<h3 id=\"建造者模式（Builder）\"><a href=\"#建造者模式（Builder）\" class=\"headerlink\" title=\"建造者模式（Builder）\"></a>建造者模式（Builder）</h3><p><strong><em>描述：</em></strong>将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示。</p>\n<h3 id=\"原型模式（Prototype）\"><a href=\"#原型模式（Prototype）\" class=\"headerlink\" title=\"原型模式（Prototype）\"></a>原型模式（Prototype）</h3><p><strong><em>描述：</em></strong>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>\n<h3 id=\"迭代器模式（Iterator）\"><a href=\"#迭代器模式（Iterator）\" class=\"headerlink\" title=\"迭代器模式（Iterator）\"></a>迭代器模式（Iterator）</h3><p><strong><em>描述：</em></strong>提供一种方法访问一个容器对象中的各个元素，而又不需暴露该对象的内部细节。</p>\n<h2 id=\"结构型模式-7个\"><a href=\"#结构型模式-7个\" class=\"headerlink\" title=\"结构型模式 7个\"></a>结构型模式 7个</h2><ul>\n<li>适配器模式（Adapter）</li>\n<li>组合模式（Compositor）</li>\n<li>代理模式（Proxy）</li>\n<li>桥梁模式（Bridge）</li>\n<li>装饰模式（Decorator）</li>\n<li>门面模式（Facade）</li>\n<li>享元模式（Flyweight）</li>\n</ul>\n<h3 id=\"适配器模式（Adapter）\"><a href=\"#适配器模式（Adapter）\" class=\"headerlink\" title=\"适配器模式（Adapter）\"></a>适配器模式（Adapter）</h3><p><strong><em>描述：</em></strong>将一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。</p>\n<h3 id=\"组合模式（Compositor）\"><a href=\"#组合模式（Compositor）\" class=\"headerlink\" title=\"组合模式（Compositor）\"></a>组合模式（Compositor）</h3><p><strong><em>描述：</em></strong>将对象组合成树形结构</p>\n<h3 id=\"代理模式（Proxy）\"><a href=\"#代理模式（Proxy）\" class=\"headerlink\" title=\"代理模式（Proxy）\"></a>代理模式（Proxy）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"桥梁模式（Bridge）\"><a href=\"#桥梁模式（Bridge）\" class=\"headerlink\" title=\"桥梁模式（Bridge）\"></a>桥梁模式（Bridge）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"装饰模式（Decorator）\"><a href=\"#装饰模式（Decorator）\" class=\"headerlink\" title=\"装饰模式（Decorator）\"></a>装饰模式（Decorator）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"门面模式（Facade）\"><a href=\"#门面模式（Facade）\" class=\"headerlink\" title=\"门面模式（Facade）\"></a>门面模式（Facade）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"享元模式（Flyweight）\"><a href=\"#享元模式（Flyweight）\" class=\"headerlink\" title=\"享元模式（Flyweight）\"></a>享元模式（Flyweight）</h3><p><strong><em>描述：</em></strong></p>\n<h2 id=\"行为型模式-10个\"><a href=\"#行为型模式-10个\" class=\"headerlink\" title=\"行为型模式 10个\"></a>行为型模式 10个</h2><ul>\n<li>命名模式（Command）</li>\n<li>解释器模式（Interpreter）</li>\n<li>责任链模式（Chian of Responsibility）</li>\n<li>观察者模式（Observer）</li>\n<li>中介者模式（Mediator）</li>\n<li>备忘录模式（Memento）</li>\n<li>状态模式（State）</li>\n<li>策略模式（Strategy）</li>\n<li>模板方法模式（Template Method）</li>\n<li>访问者模式（Visitor）</li>\n</ul>\n<h3 id=\"命名模式（Command）\"><a href=\"#命名模式（Command）\" class=\"headerlink\" title=\"命名模式（Command）\"></a>命名模式（Command）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"解释器模式（Interpreter）\"><a href=\"#解释器模式（Interpreter）\" class=\"headerlink\" title=\"解释器模式（Interpreter）\"></a>解释器模式（Interpreter）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"责任链模式（Chian-of-Responsibility）\"><a href=\"#责任链模式（Chian-of-Responsibility）\" class=\"headerlink\" title=\"责任链模式（Chian of Responsibility）\"></a>责任链模式（Chian of Responsibility）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"观察者模式（Observer）\"><a href=\"#观察者模式（Observer）\" class=\"headerlink\" title=\"观察者模式（Observer）\"></a>观察者模式（Observer）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"中介者模式（Mediator）\"><a href=\"#中介者模式（Mediator）\" class=\"headerlink\" title=\"中介者模式（Mediator）\"></a>中介者模式（Mediator）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"备忘录模式（Memento）\"><a href=\"#备忘录模式（Memento）\" class=\"headerlink\" title=\"备忘录模式（Memento）\"></a>备忘录模式（Memento）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"状态模式（State）\"><a href=\"#状态模式（State）\" class=\"headerlink\" title=\"状态模式（State）\"></a>状态模式（State）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"策略模式（Strategy）\"><a href=\"#策略模式（Strategy）\" class=\"headerlink\" title=\"策略模式（Strategy）\"></a>策略模式（Strategy）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"模板方法模式（Template-Method）\"><a href=\"#模板方法模式（Template-Method）\" class=\"headerlink\" title=\"模板方法模式（Template Method）\"></a>模板方法模式（Template Method）</h3><p><strong><em>描述：</em></strong></p>\n<h3 id=\"访问者模式（Visitor）\"><a href=\"#访问者模式（Visitor）\" class=\"headerlink\" title=\"访问者模式（Visitor）\"></a>访问者模式（Visitor）</h3><p><strong><em>描述：</em></strong></p>"},{"title":"《高性能JAVASCRIPT》读书笔记","date":"2013-06-17T14:22:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n最近读了《高性能JAVASCRIPT》，下面将书中觉得有用的内容进行摘抄，放在下方。\n# 如何从小事提升JAVASCRIPT性能。\n1. 将`<script>`标签写在`</body>`之前——将脚本放在底部。\n2. 尽量少的`<script>`标签，减少页面中的外链数量，减少请求次数。\n3. 使用打包工具如：Yahoo！combo handler\n4. 使用动态延迟加载技术如：LazyLoad类库,LABjs\n```\n// js代码\n<script type=\"text/javascript\" src=\"lazyload-min.js\"></script>\n<script type=\"text/javascript\">\n  LazyLoad.js([],function(){\n    Application.init();\n  })\n</script>\n```\n5. 在javascript中存储位置十分重要，尽量用局部变量代替对象成员的访问。\n6. 集合变数组提高查询效率\n```\n// js代码\nfunction toArray(coll){\n  for(var i = 0, a=[], len=coll.length; i<len; i++){\n    a[i]=col[i];\n  }\n  return a;\n}\n```\n7. 使用局部变量缓存访问多次的成员\n当便利一个集合时，首要优化原则是把集合存储在局部变量中，并把length缓存在循环外部，然后使用局部变量访问这些需要多次访问的元素。\n8. 使用原生DOM方法querySelectorAll（）遍历查找元素。\n\n9. 让元素脱离动画流，页面重排次数越多，程序响应越慢，要尽量减少重拍\n方法：\n  9.1. 使用绝对定位使元素脱离文档流\n\n10. IE：hover\n在大量元素使用：hover这个伪css选择器时，程序会降低响应速率，在大表格或列表的情况下","source":"_posts/Read-High-Performance-JavaScript.md","raw":"---\ntitle: 《高性能JAVASCRIPT》读书笔记\ndate: 2013-06-17 22:22:22\ncategories: \n\t- 读书笔记\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n最近读了《高性能JAVASCRIPT》，下面将书中觉得有用的内容进行摘抄，放在下方。\n# 如何从小事提升JAVASCRIPT性能。\n1. 将`<script>`标签写在`</body>`之前——将脚本放在底部。\n2. 尽量少的`<script>`标签，减少页面中的外链数量，减少请求次数。\n3. 使用打包工具如：Yahoo！combo handler\n4. 使用动态延迟加载技术如：LazyLoad类库,LABjs\n```\n// js代码\n<script type=\"text/javascript\" src=\"lazyload-min.js\"></script>\n<script type=\"text/javascript\">\n  LazyLoad.js([],function(){\n    Application.init();\n  })\n</script>\n```\n5. 在javascript中存储位置十分重要，尽量用局部变量代替对象成员的访问。\n6. 集合变数组提高查询效率\n```\n// js代码\nfunction toArray(coll){\n  for(var i = 0, a=[], len=coll.length; i<len; i++){\n    a[i]=col[i];\n  }\n  return a;\n}\n```\n7. 使用局部变量缓存访问多次的成员\n当便利一个集合时，首要优化原则是把集合存储在局部变量中，并把length缓存在循环外部，然后使用局部变量访问这些需要多次访问的元素。\n8. 使用原生DOM方法querySelectorAll（）遍历查找元素。\n\n9. 让元素脱离动画流，页面重排次数越多，程序响应越慢，要尽量减少重拍\n方法：\n  9.1. 使用绝对定位使元素脱离文档流\n\n10. IE：hover\n在大量元素使用：hover这个伪css选择器时，程序会降低响应速率，在大表格或列表的情况下","slug":"Read-High-Performance-JavaScript","published":1,"updated":"2020-04-02T03:20:12.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs0d0031ooa6eie2efxm","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近读了《高性能JAVASCRIPT》，下面将书中觉得有用的内容进行摘抄，放在下方。</p>\n<h1 id=\"如何从小事提升JAVASCRIPT性能。\"><a href=\"#如何从小事提升JAVASCRIPT性能。\" class=\"headerlink\" title=\"如何从小事提升JAVASCRIPT性能。\"></a>如何从小事提升JAVASCRIPT性能。</h1><ol>\n<li><p>将<code>&lt;script&gt;</code>标签写在<code>&lt;/body&gt;</code>之前——将脚本放在底部。</p>\n</li>\n<li><p>尽量少的<code>&lt;script&gt;</code>标签，减少页面中的外链数量，减少请求次数。</p>\n</li>\n<li><p>使用打包工具如：Yahoo！combo handler</p>\n</li>\n<li><p>使用动态延迟加载技术如：LazyLoad类库,LABjs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;lazyload-min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">  LazyLoad.js([],function()&#123;</span><br><span class=\"line\">    Application.init();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>在javascript中存储位置十分重要，尽量用局部变量代替对象成员的访问。</p>\n</li>\n<li><p>集合变数组提高查询效率</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">function toArray(coll)&#123;</span><br><span class=\"line\">  for(var i &#x3D; 0, a&#x3D;[], len&#x3D;coll.length; i&lt;len; i++)&#123;</span><br><span class=\"line\">    a[i]&#x3D;col[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用局部变量缓存访问多次的成员<br>当便利一个集合时，首要优化原则是把集合存储在局部变量中，并把length缓存在循环外部，然后使用局部变量访问这些需要多次访问的元素。</p>\n</li>\n<li><p>使用原生DOM方法querySelectorAll（）遍历查找元素。</p>\n</li>\n<li><p>让元素脱离动画流，页面重排次数越多，程序响应越慢，要尽量减少重拍<br>方法：<br>9.1. 使用绝对定位使元素脱离文档流</p>\n</li>\n<li><p>IE：hover<br>在大量元素使用：hover这个伪css选择器时，程序会降低响应速率，在大表格或列表的情况下</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近读了《高性能JAVASCRIPT》，下面将书中觉得有用的内容进行摘抄，放在下方。</p>\n<h1 id=\"如何从小事提升JAVASCRIPT性能。\"><a href=\"#如何从小事提升JAVASCRIPT性能。\" class=\"headerlink\" title=\"如何从小事提升JAVASCRIPT性能。\"></a>如何从小事提升JAVASCRIPT性能。</h1><ol>\n<li><p>将<code>&lt;script&gt;</code>标签写在<code>&lt;/body&gt;</code>之前——将脚本放在底部。</p>\n</li>\n<li><p>尽量少的<code>&lt;script&gt;</code>标签，减少页面中的外链数量，减少请求次数。</p>\n</li>\n<li><p>使用打包工具如：Yahoo！combo handler</p>\n</li>\n<li><p>使用动态延迟加载技术如：LazyLoad类库,LABjs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;lazyload-min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">  LazyLoad.js([],function()&#123;</span><br><span class=\"line\">    Application.init();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>在javascript中存储位置十分重要，尽量用局部变量代替对象成员的访问。</p>\n</li>\n<li><p>集合变数组提高查询效率</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">function toArray(coll)&#123;</span><br><span class=\"line\">  for(var i &#x3D; 0, a&#x3D;[], len&#x3D;coll.length; i&lt;len; i++)&#123;</span><br><span class=\"line\">    a[i]&#x3D;col[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用局部变量缓存访问多次的成员<br>当便利一个集合时，首要优化原则是把集合存储在局部变量中，并把length缓存在循环外部，然后使用局部变量访问这些需要多次访问的元素。</p>\n</li>\n<li><p>使用原生DOM方法querySelectorAll（）遍历查找元素。</p>\n</li>\n<li><p>让元素脱离动画流，页面重排次数越多，程序响应越慢，要尽量减少重拍<br>方法：<br>9.1. 使用绝对定位使元素脱离文档流</p>\n</li>\n<li><p>IE：hover<br>在大量元素使用：hover这个伪css选择器时，程序会降低响应速率，在大表格或列表的情况下</p>\n</li>\n</ol>\n"},{"title":"《让老板提拔你》读书笔记","date":"2015-12-31T14:22:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n最近读了《让老板提拔你》，下面将书中觉得有用的内容进行摘抄，放在下方。\n# 定位自己\n正确认识自己，确定社会定位、职业定位。 定位-决定-定价\n## 要素\n***核心竞争力*** 与 ***职位*** ***契合度*** 是高薪关键所在\n### 契合度\n- 技能、专长、经历与职位要求的契合度\n- 专业资质和等级与职位要求的契合度\n- 综合素质与职位要求的契合度\n### 七大秘诀\n- 了解同行业薪酬的平均水平\n- 赢得未来单位的心\n- 先让对方开口\n- 勇敢地开口要求\n- 不要轻言放弃\n- 把握时机很重要\n- 说实话，别撒谎\n### 如何谈薪资\n- 商洽薪酬的关键在于把握好谈话时机，切勿开门见山。\n> 只要有发展机会，我愿意接受贵单位的薪酬标准，不知道按规定这个工作岗位的薪酬标准是多少。\n\n### 将知识卖个好价钱\n推销自己既推销自己所掌握的知识即智慧，正确认识自己的价值是关键。\n\n### 高薪是因为“物有所值”\n- 用业绩、用能力说话，是人才坦然面对高薪的心态。\n- 高薪人才的求职方式 ---- 圈内朋友引见、定向投简历、行业论坛、交流活动等。\n- 高级人才不能经常跳槽要保持相对的职业稳定。---- 在一家公司少则3年多则6年 ---- 接受挑战，把握机会。\n\n### 失败丰富走向成功经验\n强调在失败中吸取的经验，在未来中可以避免的损失。\n\n### 能为企业带来丰厚的利润才是人才\n企业招聘员工的唯一目的：追求公司业绩最大化、利润最大化。\n\n# 高质高效工作全攻略\n- 进行正确的自我评价\n- 做最擅长做的事\n  - 三个经济原则 ---- 发挥人才优势。\n    1. 比较利益原则-----自己的专长对自己才是最有利的，勿与他人作比较。\n    2. 机会成本原则-----选择一份工作放弃其他工作就是机会成本。\n    3. 效率原则--------工作的成功不在于时间有多长，而在于成效有多少，附加值有多少。\n- 马上行动\n- 做事情要雷厉风行 --------- 成功属于踏实肯干的人\n- 有条不紊地开展工作 ------- 制定时间计划\n- 善于利用现代办公工具\n- 给自己最大的工作空间\n- 建立高效有序的办公环境\n- 不要忘记最初想去的方向\n- “聪明”的向上级提出建议\n- 专心做事，避免浮躁\n- 多而不专，一事难成\n- “专”才有高质工作--------人才主要指专才--某个领域的高精尖人才--勿做全才，一专多能\n- 做事要有条理\n\n# 不要只把自己当成一个打工仔\n> 要把工作当成事业\n- 工作不仅仅是为了钱\n- 对工作要有明确的价值取向\n  1. 认清人生的方向\n  2. 开始学会醉卧探索和认知\n  3. 认清工作价值与成就的关系\n  4. 长期的工作规划\n  5. 在生命的天平上衡量自身的价值\n- 巧妙应对与上司看法向左时的三条准则\n  1. 遇事考虑全局\n  2. 辩证地看待问题\n  3. 切记感情用事\n- 把单位的事当成自家的事\n- 认真负责地用心工作\n- 珍惜岗位，热爱自己的职业\n- 永远是在为自己工作\n- 敬重自己的工作\n- 不要轻视薪水微薄的工作\n- 永远对工作充满激情\n- 以自己的工作为荣\n- 不要被他人的观点所束缚\n- 暂时的胜负并不会决定人生的最后走向\n- 将弱势转化为优势\n- 全力以赴做好每一天的工作\n- 和优秀的人士在一起---见贤思齐、借梯爬楼\n  - 如何争取跟优秀的人在一起\n    1. 不断的抛头露面\n    2. 帮助可以帮助自己成就事业的人做事\n    3. 与上司和比自己优秀的人士一起合作\n 1. 尊重对方，严谨有致\n 2. 切记奉承，要不卑不亢\n 3. 态度自然，不必拘谨\n 4. 陪衬得当，不可狂妄\n 5. 主动真诚，做出姿态\n 6. 求助求教，接受呵护\n- 挑战自我，承担责任\n  - 三条忠告\n    1. 全心全意工作\n    2. 把自己视为合伙人\n    3. 迎接变革的需求\n- 自信独立，不随波逐流\n- 敢于显示自己很重要\n- 千万不能只知道抱怨上司\n- 保持严谨认真的做事习惯\n- 自主地做好手中的工作\n- 踏踏实实地做好本职工作\n- 丢掉工作散漫的坏习惯\n- 不要让浮躁的性格困扰自己\n- 不推诿，勇于承担责任\n- 无论如何都不要拖延工作\n- 糊弄工作只能是在糊弄自己\n- 逊色的工作只会淘汰自己\n- 千万别丢掉“得宠”之资\n- “一步登天”只会摔疼自己\n- 别让“差不多”贻误了自己\n- 能完成100%，就决不做99%\n\n# 与上司相处\n- 不要做上司的“心腹”\n- 适时恰当的赞美上司\n  - 赞美上司，还要善于选择适当的场合\n  - 赞美上司，要学会巧借公众语言称赞\n  - 赞美上司，还要善于赞美不得志的上司\n- 主动与领导沟通\n- 主动和上司保持联系 \n- 用“心机”主动接近上司\n  - 尽可能详细的了解上司\n  - 选择一个与领导尽可能近的位置\n  - 赢得上司青睐的方法 \n- 更有效的和上司沟通\n  - 与上司沟通要简洁\n  - 与上司沟通要大度大气大方\n  - 与上司沟通，就要把自己先放一边 -------- 说话对事不对人\n- 四种和上司进行沟通的方法\n  1. 开诚布公式---------提出问题，说出自己的理解认识，给出解决方案，寻求领导意思，执行领导的命令\n  2. 先斩后奏式---------因主客观原因导致的没有先汇报而是先解决的事，事后要将问题的分析方法，解决方法，实施方案以及结果做一份详尽的总结报告上交给领导\n  3. “含情脉脉”式-------通过交流一些工作上的问题来含蓄表达出个人的建议、需要\n  4. 巧设比喻式---------通过典型案例来暗示自己的意见和要求\n- 把话说到上司的心坎上\n- 巧妙地为领导拾遗补缺\n  1. 诠释领导讲话的难点\n  2. 强调领导的才干\n  3. 化严肃为幽默\n  4. 稳定情绪，委婉暗示\n- 工作中勤于请示汇报\n  1. 听懂上司的意图\n  2. 探讨、磨合，达成共识\n  3. 制定尽可能详尽的工作计划\n  4. 随时向上司汇报任务的关键点\n  5. 总结汇报\n- 用成功赢得上司的信任\n- 工作中不要冲撞上司\n- 处理好同上司之间的分歧\n  1. 圆融协调------领导不懂，下达了错误的指令\n     1. 私下向上司陈述意见，帮助上司做出正确的决策\n     2. 如果上司采纳了下属的建议或意见，该下属有责任长期保守秘密\n     3. 如果上司固执己见，那么无条件服从\n  2. 装聋作哑------不涉及到原则问题\n  3. 棘手难题多权衡\n     1. 立刻插话纠正\n     2. 提醒上司\n     3. 暗示\n     4. 事后补救\n     5. 事后提醒\n- 正确对待上司的批评\n- 要善于服从自己的上司\n- 正确化解来自上司的压力\n\n# 写在最后\n博观约取，多读书读好书，丰富自己，变得睿智。","source":"_posts/Read-Let-your-boss-promote-you.md","raw":"---\ntitle: 《让老板提拔你》读书笔记\ndate: 2015-12-31 22:22:22\ncategories: \n\t- 读书笔记\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n最近读了《让老板提拔你》，下面将书中觉得有用的内容进行摘抄，放在下方。\n# 定位自己\n正确认识自己，确定社会定位、职业定位。 定位-决定-定价\n## 要素\n***核心竞争力*** 与 ***职位*** ***契合度*** 是高薪关键所在\n### 契合度\n- 技能、专长、经历与职位要求的契合度\n- 专业资质和等级与职位要求的契合度\n- 综合素质与职位要求的契合度\n### 七大秘诀\n- 了解同行业薪酬的平均水平\n- 赢得未来单位的心\n- 先让对方开口\n- 勇敢地开口要求\n- 不要轻言放弃\n- 把握时机很重要\n- 说实话，别撒谎\n### 如何谈薪资\n- 商洽薪酬的关键在于把握好谈话时机，切勿开门见山。\n> 只要有发展机会，我愿意接受贵单位的薪酬标准，不知道按规定这个工作岗位的薪酬标准是多少。\n\n### 将知识卖个好价钱\n推销自己既推销自己所掌握的知识即智慧，正确认识自己的价值是关键。\n\n### 高薪是因为“物有所值”\n- 用业绩、用能力说话，是人才坦然面对高薪的心态。\n- 高薪人才的求职方式 ---- 圈内朋友引见、定向投简历、行业论坛、交流活动等。\n- 高级人才不能经常跳槽要保持相对的职业稳定。---- 在一家公司少则3年多则6年 ---- 接受挑战，把握机会。\n\n### 失败丰富走向成功经验\n强调在失败中吸取的经验，在未来中可以避免的损失。\n\n### 能为企业带来丰厚的利润才是人才\n企业招聘员工的唯一目的：追求公司业绩最大化、利润最大化。\n\n# 高质高效工作全攻略\n- 进行正确的自我评价\n- 做最擅长做的事\n  - 三个经济原则 ---- 发挥人才优势。\n    1. 比较利益原则-----自己的专长对自己才是最有利的，勿与他人作比较。\n    2. 机会成本原则-----选择一份工作放弃其他工作就是机会成本。\n    3. 效率原则--------工作的成功不在于时间有多长，而在于成效有多少，附加值有多少。\n- 马上行动\n- 做事情要雷厉风行 --------- 成功属于踏实肯干的人\n- 有条不紊地开展工作 ------- 制定时间计划\n- 善于利用现代办公工具\n- 给自己最大的工作空间\n- 建立高效有序的办公环境\n- 不要忘记最初想去的方向\n- “聪明”的向上级提出建议\n- 专心做事，避免浮躁\n- 多而不专，一事难成\n- “专”才有高质工作--------人才主要指专才--某个领域的高精尖人才--勿做全才，一专多能\n- 做事要有条理\n\n# 不要只把自己当成一个打工仔\n> 要把工作当成事业\n- 工作不仅仅是为了钱\n- 对工作要有明确的价值取向\n  1. 认清人生的方向\n  2. 开始学会醉卧探索和认知\n  3. 认清工作价值与成就的关系\n  4. 长期的工作规划\n  5. 在生命的天平上衡量自身的价值\n- 巧妙应对与上司看法向左时的三条准则\n  1. 遇事考虑全局\n  2. 辩证地看待问题\n  3. 切记感情用事\n- 把单位的事当成自家的事\n- 认真负责地用心工作\n- 珍惜岗位，热爱自己的职业\n- 永远是在为自己工作\n- 敬重自己的工作\n- 不要轻视薪水微薄的工作\n- 永远对工作充满激情\n- 以自己的工作为荣\n- 不要被他人的观点所束缚\n- 暂时的胜负并不会决定人生的最后走向\n- 将弱势转化为优势\n- 全力以赴做好每一天的工作\n- 和优秀的人士在一起---见贤思齐、借梯爬楼\n  - 如何争取跟优秀的人在一起\n    1. 不断的抛头露面\n    2. 帮助可以帮助自己成就事业的人做事\n    3. 与上司和比自己优秀的人士一起合作\n 1. 尊重对方，严谨有致\n 2. 切记奉承，要不卑不亢\n 3. 态度自然，不必拘谨\n 4. 陪衬得当，不可狂妄\n 5. 主动真诚，做出姿态\n 6. 求助求教，接受呵护\n- 挑战自我，承担责任\n  - 三条忠告\n    1. 全心全意工作\n    2. 把自己视为合伙人\n    3. 迎接变革的需求\n- 自信独立，不随波逐流\n- 敢于显示自己很重要\n- 千万不能只知道抱怨上司\n- 保持严谨认真的做事习惯\n- 自主地做好手中的工作\n- 踏踏实实地做好本职工作\n- 丢掉工作散漫的坏习惯\n- 不要让浮躁的性格困扰自己\n- 不推诿，勇于承担责任\n- 无论如何都不要拖延工作\n- 糊弄工作只能是在糊弄自己\n- 逊色的工作只会淘汰自己\n- 千万别丢掉“得宠”之资\n- “一步登天”只会摔疼自己\n- 别让“差不多”贻误了自己\n- 能完成100%，就决不做99%\n\n# 与上司相处\n- 不要做上司的“心腹”\n- 适时恰当的赞美上司\n  - 赞美上司，还要善于选择适当的场合\n  - 赞美上司，要学会巧借公众语言称赞\n  - 赞美上司，还要善于赞美不得志的上司\n- 主动与领导沟通\n- 主动和上司保持联系 \n- 用“心机”主动接近上司\n  - 尽可能详细的了解上司\n  - 选择一个与领导尽可能近的位置\n  - 赢得上司青睐的方法 \n- 更有效的和上司沟通\n  - 与上司沟通要简洁\n  - 与上司沟通要大度大气大方\n  - 与上司沟通，就要把自己先放一边 -------- 说话对事不对人\n- 四种和上司进行沟通的方法\n  1. 开诚布公式---------提出问题，说出自己的理解认识，给出解决方案，寻求领导意思，执行领导的命令\n  2. 先斩后奏式---------因主客观原因导致的没有先汇报而是先解决的事，事后要将问题的分析方法，解决方法，实施方案以及结果做一份详尽的总结报告上交给领导\n  3. “含情脉脉”式-------通过交流一些工作上的问题来含蓄表达出个人的建议、需要\n  4. 巧设比喻式---------通过典型案例来暗示自己的意见和要求\n- 把话说到上司的心坎上\n- 巧妙地为领导拾遗补缺\n  1. 诠释领导讲话的难点\n  2. 强调领导的才干\n  3. 化严肃为幽默\n  4. 稳定情绪，委婉暗示\n- 工作中勤于请示汇报\n  1. 听懂上司的意图\n  2. 探讨、磨合，达成共识\n  3. 制定尽可能详尽的工作计划\n  4. 随时向上司汇报任务的关键点\n  5. 总结汇报\n- 用成功赢得上司的信任\n- 工作中不要冲撞上司\n- 处理好同上司之间的分歧\n  1. 圆融协调------领导不懂，下达了错误的指令\n     1. 私下向上司陈述意见，帮助上司做出正确的决策\n     2. 如果上司采纳了下属的建议或意见，该下属有责任长期保守秘密\n     3. 如果上司固执己见，那么无条件服从\n  2. 装聋作哑------不涉及到原则问题\n  3. 棘手难题多权衡\n     1. 立刻插话纠正\n     2. 提醒上司\n     3. 暗示\n     4. 事后补救\n     5. 事后提醒\n- 正确对待上司的批评\n- 要善于服从自己的上司\n- 正确化解来自上司的压力\n\n# 写在最后\n博观约取，多读书读好书，丰富自己，变得睿智。","slug":"Read-Let-your-boss-promote-you","published":1,"updated":"2020-04-02T03:20:12.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs0i0034ooa6bz3q8gye","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近读了《让老板提拔你》，下面将书中觉得有用的内容进行摘抄，放在下方。</p>\n<h1 id=\"定位自己\"><a href=\"#定位自己\" class=\"headerlink\" title=\"定位自己\"></a>定位自己</h1><p>正确认识自己，确定社会定位、职业定位。 定位-决定-定价</p>\n<h2 id=\"要素\"><a href=\"#要素\" class=\"headerlink\" title=\"要素\"></a>要素</h2><p><strong><em>核心竞争力</em></strong> 与 <strong><em>职位</em></strong> <strong><em>契合度</em></strong> 是高薪关键所在</p>\n<h3 id=\"契合度\"><a href=\"#契合度\" class=\"headerlink\" title=\"契合度\"></a>契合度</h3><ul>\n<li>技能、专长、经历与职位要求的契合度</li>\n<li>专业资质和等级与职位要求的契合度</li>\n<li>综合素质与职位要求的契合度<h3 id=\"七大秘诀\"><a href=\"#七大秘诀\" class=\"headerlink\" title=\"七大秘诀\"></a>七大秘诀</h3></li>\n<li>了解同行业薪酬的平均水平</li>\n<li>赢得未来单位的心</li>\n<li>先让对方开口</li>\n<li>勇敢地开口要求</li>\n<li>不要轻言放弃</li>\n<li>把握时机很重要</li>\n<li>说实话，别撒谎<h3 id=\"如何谈薪资\"><a href=\"#如何谈薪资\" class=\"headerlink\" title=\"如何谈薪资\"></a>如何谈薪资</h3></li>\n<li>商洽薪酬的关键在于把握好谈话时机，切勿开门见山。<blockquote>\n<p>只要有发展机会，我愿意接受贵单位的薪酬标准，不知道按规定这个工作岗位的薪酬标准是多少。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"将知识卖个好价钱\"><a href=\"#将知识卖个好价钱\" class=\"headerlink\" title=\"将知识卖个好价钱\"></a>将知识卖个好价钱</h3><p>推销自己既推销自己所掌握的知识即智慧，正确认识自己的价值是关键。</p>\n<h3 id=\"高薪是因为“物有所值”\"><a href=\"#高薪是因为“物有所值”\" class=\"headerlink\" title=\"高薪是因为“物有所值”\"></a>高薪是因为“物有所值”</h3><ul>\n<li>用业绩、用能力说话，是人才坦然面对高薪的心态。</li>\n<li>高薪人才的求职方式 —- 圈内朋友引见、定向投简历、行业论坛、交流活动等。</li>\n<li>高级人才不能经常跳槽要保持相对的职业稳定。—- 在一家公司少则3年多则6年 —- 接受挑战，把握机会。</li>\n</ul>\n<h3 id=\"失败丰富走向成功经验\"><a href=\"#失败丰富走向成功经验\" class=\"headerlink\" title=\"失败丰富走向成功经验\"></a>失败丰富走向成功经验</h3><p>强调在失败中吸取的经验，在未来中可以避免的损失。</p>\n<h3 id=\"能为企业带来丰厚的利润才是人才\"><a href=\"#能为企业带来丰厚的利润才是人才\" class=\"headerlink\" title=\"能为企业带来丰厚的利润才是人才\"></a>能为企业带来丰厚的利润才是人才</h3><p>企业招聘员工的唯一目的：追求公司业绩最大化、利润最大化。</p>\n<h1 id=\"高质高效工作全攻略\"><a href=\"#高质高效工作全攻略\" class=\"headerlink\" title=\"高质高效工作全攻略\"></a>高质高效工作全攻略</h1><ul>\n<li>进行正确的自我评价</li>\n<li>做最擅长做的事<ul>\n<li>三个经济原则 —- 发挥人才优势。<ol>\n<li>比较利益原则—–自己的专长对自己才是最有利的，勿与他人作比较。</li>\n<li>机会成本原则—–选择一份工作放弃其他工作就是机会成本。</li>\n<li>效率原则——–工作的成功不在于时间有多长，而在于成效有多少，附加值有多少。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>马上行动</li>\n<li>做事情要雷厉风行 ——— 成功属于踏实肯干的人</li>\n<li>有条不紊地开展工作 ——- 制定时间计划</li>\n<li>善于利用现代办公工具</li>\n<li>给自己最大的工作空间</li>\n<li>建立高效有序的办公环境</li>\n<li>不要忘记最初想去的方向</li>\n<li>“聪明”的向上级提出建议</li>\n<li>专心做事，避免浮躁</li>\n<li>多而不专，一事难成</li>\n<li>“专”才有高质工作——–人才主要指专才–某个领域的高精尖人才–勿做全才，一专多能</li>\n<li>做事要有条理</li>\n</ul>\n<h1 id=\"不要只把自己当成一个打工仔\"><a href=\"#不要只把自己当成一个打工仔\" class=\"headerlink\" title=\"不要只把自己当成一个打工仔\"></a>不要只把自己当成一个打工仔</h1><blockquote>\n<p>要把工作当成事业</p>\n</blockquote>\n<ul>\n<li>工作不仅仅是为了钱</li>\n<li>对工作要有明确的价值取向<ol>\n<li>认清人生的方向</li>\n<li>开始学会醉卧探索和认知</li>\n<li>认清工作价值与成就的关系</li>\n<li>长期的工作规划</li>\n<li>在生命的天平上衡量自身的价值</li>\n</ol>\n</li>\n<li>巧妙应对与上司看法向左时的三条准则<ol>\n<li>遇事考虑全局</li>\n<li>辩证地看待问题</li>\n<li>切记感情用事</li>\n</ol>\n</li>\n<li>把单位的事当成自家的事</li>\n<li>认真负责地用心工作</li>\n<li>珍惜岗位，热爱自己的职业</li>\n<li>永远是在为自己工作</li>\n<li>敬重自己的工作</li>\n<li>不要轻视薪水微薄的工作</li>\n<li>永远对工作充满激情</li>\n<li>以自己的工作为荣</li>\n<li>不要被他人的观点所束缚</li>\n<li>暂时的胜负并不会决定人生的最后走向</li>\n<li>将弱势转化为优势</li>\n<li>全力以赴做好每一天的工作</li>\n<li>和优秀的人士在一起—见贤思齐、借梯爬楼<ul>\n<li>如何争取跟优秀的人在一起<ol>\n<li>不断的抛头露面</li>\n<li>帮助可以帮助自己成就事业的人做事</li>\n<li>与上司和比自己优秀的人士一起合作</li>\n</ol>\n</li>\n</ul>\n<ol>\n<li>尊重对方，严谨有致</li>\n<li>切记奉承，要不卑不亢</li>\n<li>态度自然，不必拘谨</li>\n<li>陪衬得当，不可狂妄</li>\n<li>主动真诚，做出姿态</li>\n<li>求助求教，接受呵护</li>\n</ol>\n</li>\n<li>挑战自我，承担责任<ul>\n<li>三条忠告<ol>\n<li>全心全意工作</li>\n<li>把自己视为合伙人</li>\n<li>迎接变革的需求</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>自信独立，不随波逐流</li>\n<li>敢于显示自己很重要</li>\n<li>千万不能只知道抱怨上司</li>\n<li>保持严谨认真的做事习惯</li>\n<li>自主地做好手中的工作</li>\n<li>踏踏实实地做好本职工作</li>\n<li>丢掉工作散漫的坏习惯</li>\n<li>不要让浮躁的性格困扰自己</li>\n<li>不推诿，勇于承担责任</li>\n<li>无论如何都不要拖延工作</li>\n<li>糊弄工作只能是在糊弄自己</li>\n<li>逊色的工作只会淘汰自己</li>\n<li>千万别丢掉“得宠”之资</li>\n<li>“一步登天”只会摔疼自己</li>\n<li>别让“差不多”贻误了自己</li>\n<li>能完成100%，就决不做99%</li>\n</ul>\n<h1 id=\"与上司相处\"><a href=\"#与上司相处\" class=\"headerlink\" title=\"与上司相处\"></a>与上司相处</h1><ul>\n<li>不要做上司的“心腹”</li>\n<li>适时恰当的赞美上司<ul>\n<li>赞美上司，还要善于选择适当的场合</li>\n<li>赞美上司，要学会巧借公众语言称赞</li>\n<li>赞美上司，还要善于赞美不得志的上司</li>\n</ul>\n</li>\n<li>主动与领导沟通</li>\n<li>主动和上司保持联系 </li>\n<li>用“心机”主动接近上司<ul>\n<li>尽可能详细的了解上司</li>\n<li>选择一个与领导尽可能近的位置</li>\n<li>赢得上司青睐的方法 </li>\n</ul>\n</li>\n<li>更有效的和上司沟通<ul>\n<li>与上司沟通要简洁</li>\n<li>与上司沟通要大度大气大方</li>\n<li>与上司沟通，就要把自己先放一边 ——– 说话对事不对人</li>\n</ul>\n</li>\n<li>四种和上司进行沟通的方法<ol>\n<li>开诚布公式———提出问题，说出自己的理解认识，给出解决方案，寻求领导意思，执行领导的命令</li>\n<li>先斩后奏式———因主客观原因导致的没有先汇报而是先解决的事，事后要将问题的分析方法，解决方法，实施方案以及结果做一份详尽的总结报告上交给领导</li>\n<li>“含情脉脉”式——-通过交流一些工作上的问题来含蓄表达出个人的建议、需要</li>\n<li>巧设比喻式———通过典型案例来暗示自己的意见和要求</li>\n</ol>\n</li>\n<li>把话说到上司的心坎上</li>\n<li>巧妙地为领导拾遗补缺<ol>\n<li>诠释领导讲话的难点</li>\n<li>强调领导的才干</li>\n<li>化严肃为幽默</li>\n<li>稳定情绪，委婉暗示</li>\n</ol>\n</li>\n<li>工作中勤于请示汇报<ol>\n<li>听懂上司的意图</li>\n<li>探讨、磨合，达成共识</li>\n<li>制定尽可能详尽的工作计划</li>\n<li>随时向上司汇报任务的关键点</li>\n<li>总结汇报</li>\n</ol>\n</li>\n<li>用成功赢得上司的信任</li>\n<li>工作中不要冲撞上司</li>\n<li>处理好同上司之间的分歧<ol>\n<li>圆融协调——领导不懂，下达了错误的指令<ol>\n<li>私下向上司陈述意见，帮助上司做出正确的决策</li>\n<li>如果上司采纳了下属的建议或意见，该下属有责任长期保守秘密</li>\n<li>如果上司固执己见，那么无条件服从</li>\n</ol>\n</li>\n<li>装聋作哑——不涉及到原则问题</li>\n<li>棘手难题多权衡<ol>\n<li>立刻插话纠正</li>\n<li>提醒上司</li>\n<li>暗示</li>\n<li>事后补救</li>\n<li>事后提醒</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>正确对待上司的批评</li>\n<li>要善于服从自己的上司</li>\n<li>正确化解来自上司的压力</li>\n</ul>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>博观约取，多读书读好书，丰富自己，变得睿智。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近读了《让老板提拔你》，下面将书中觉得有用的内容进行摘抄，放在下方。</p>\n<h1 id=\"定位自己\"><a href=\"#定位自己\" class=\"headerlink\" title=\"定位自己\"></a>定位自己</h1><p>正确认识自己，确定社会定位、职业定位。 定位-决定-定价</p>\n<h2 id=\"要素\"><a href=\"#要素\" class=\"headerlink\" title=\"要素\"></a>要素</h2><p><strong><em>核心竞争力</em></strong> 与 <strong><em>职位</em></strong> <strong><em>契合度</em></strong> 是高薪关键所在</p>\n<h3 id=\"契合度\"><a href=\"#契合度\" class=\"headerlink\" title=\"契合度\"></a>契合度</h3><ul>\n<li>技能、专长、经历与职位要求的契合度</li>\n<li>专业资质和等级与职位要求的契合度</li>\n<li>综合素质与职位要求的契合度<h3 id=\"七大秘诀\"><a href=\"#七大秘诀\" class=\"headerlink\" title=\"七大秘诀\"></a>七大秘诀</h3></li>\n<li>了解同行业薪酬的平均水平</li>\n<li>赢得未来单位的心</li>\n<li>先让对方开口</li>\n<li>勇敢地开口要求</li>\n<li>不要轻言放弃</li>\n<li>把握时机很重要</li>\n<li>说实话，别撒谎<h3 id=\"如何谈薪资\"><a href=\"#如何谈薪资\" class=\"headerlink\" title=\"如何谈薪资\"></a>如何谈薪资</h3></li>\n<li>商洽薪酬的关键在于把握好谈话时机，切勿开门见山。<blockquote>\n<p>只要有发展机会，我愿意接受贵单位的薪酬标准，不知道按规定这个工作岗位的薪酬标准是多少。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"将知识卖个好价钱\"><a href=\"#将知识卖个好价钱\" class=\"headerlink\" title=\"将知识卖个好价钱\"></a>将知识卖个好价钱</h3><p>推销自己既推销自己所掌握的知识即智慧，正确认识自己的价值是关键。</p>\n<h3 id=\"高薪是因为“物有所值”\"><a href=\"#高薪是因为“物有所值”\" class=\"headerlink\" title=\"高薪是因为“物有所值”\"></a>高薪是因为“物有所值”</h3><ul>\n<li>用业绩、用能力说话，是人才坦然面对高薪的心态。</li>\n<li>高薪人才的求职方式 —- 圈内朋友引见、定向投简历、行业论坛、交流活动等。</li>\n<li>高级人才不能经常跳槽要保持相对的职业稳定。—- 在一家公司少则3年多则6年 —- 接受挑战，把握机会。</li>\n</ul>\n<h3 id=\"失败丰富走向成功经验\"><a href=\"#失败丰富走向成功经验\" class=\"headerlink\" title=\"失败丰富走向成功经验\"></a>失败丰富走向成功经验</h3><p>强调在失败中吸取的经验，在未来中可以避免的损失。</p>\n<h3 id=\"能为企业带来丰厚的利润才是人才\"><a href=\"#能为企业带来丰厚的利润才是人才\" class=\"headerlink\" title=\"能为企业带来丰厚的利润才是人才\"></a>能为企业带来丰厚的利润才是人才</h3><p>企业招聘员工的唯一目的：追求公司业绩最大化、利润最大化。</p>\n<h1 id=\"高质高效工作全攻略\"><a href=\"#高质高效工作全攻略\" class=\"headerlink\" title=\"高质高效工作全攻略\"></a>高质高效工作全攻略</h1><ul>\n<li>进行正确的自我评价</li>\n<li>做最擅长做的事<ul>\n<li>三个经济原则 —- 发挥人才优势。<ol>\n<li>比较利益原则—–自己的专长对自己才是最有利的，勿与他人作比较。</li>\n<li>机会成本原则—–选择一份工作放弃其他工作就是机会成本。</li>\n<li>效率原则——–工作的成功不在于时间有多长，而在于成效有多少，附加值有多少。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>马上行动</li>\n<li>做事情要雷厉风行 ——— 成功属于踏实肯干的人</li>\n<li>有条不紊地开展工作 ——- 制定时间计划</li>\n<li>善于利用现代办公工具</li>\n<li>给自己最大的工作空间</li>\n<li>建立高效有序的办公环境</li>\n<li>不要忘记最初想去的方向</li>\n<li>“聪明”的向上级提出建议</li>\n<li>专心做事，避免浮躁</li>\n<li>多而不专，一事难成</li>\n<li>“专”才有高质工作——–人才主要指专才–某个领域的高精尖人才–勿做全才，一专多能</li>\n<li>做事要有条理</li>\n</ul>\n<h1 id=\"不要只把自己当成一个打工仔\"><a href=\"#不要只把自己当成一个打工仔\" class=\"headerlink\" title=\"不要只把自己当成一个打工仔\"></a>不要只把自己当成一个打工仔</h1><blockquote>\n<p>要把工作当成事业</p>\n</blockquote>\n<ul>\n<li>工作不仅仅是为了钱</li>\n<li>对工作要有明确的价值取向<ol>\n<li>认清人生的方向</li>\n<li>开始学会醉卧探索和认知</li>\n<li>认清工作价值与成就的关系</li>\n<li>长期的工作规划</li>\n<li>在生命的天平上衡量自身的价值</li>\n</ol>\n</li>\n<li>巧妙应对与上司看法向左时的三条准则<ol>\n<li>遇事考虑全局</li>\n<li>辩证地看待问题</li>\n<li>切记感情用事</li>\n</ol>\n</li>\n<li>把单位的事当成自家的事</li>\n<li>认真负责地用心工作</li>\n<li>珍惜岗位，热爱自己的职业</li>\n<li>永远是在为自己工作</li>\n<li>敬重自己的工作</li>\n<li>不要轻视薪水微薄的工作</li>\n<li>永远对工作充满激情</li>\n<li>以自己的工作为荣</li>\n<li>不要被他人的观点所束缚</li>\n<li>暂时的胜负并不会决定人生的最后走向</li>\n<li>将弱势转化为优势</li>\n<li>全力以赴做好每一天的工作</li>\n<li>和优秀的人士在一起—见贤思齐、借梯爬楼<ul>\n<li>如何争取跟优秀的人在一起<ol>\n<li>不断的抛头露面</li>\n<li>帮助可以帮助自己成就事业的人做事</li>\n<li>与上司和比自己优秀的人士一起合作</li>\n</ol>\n</li>\n</ul>\n<ol>\n<li>尊重对方，严谨有致</li>\n<li>切记奉承，要不卑不亢</li>\n<li>态度自然，不必拘谨</li>\n<li>陪衬得当，不可狂妄</li>\n<li>主动真诚，做出姿态</li>\n<li>求助求教，接受呵护</li>\n</ol>\n</li>\n<li>挑战自我，承担责任<ul>\n<li>三条忠告<ol>\n<li>全心全意工作</li>\n<li>把自己视为合伙人</li>\n<li>迎接变革的需求</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>自信独立，不随波逐流</li>\n<li>敢于显示自己很重要</li>\n<li>千万不能只知道抱怨上司</li>\n<li>保持严谨认真的做事习惯</li>\n<li>自主地做好手中的工作</li>\n<li>踏踏实实地做好本职工作</li>\n<li>丢掉工作散漫的坏习惯</li>\n<li>不要让浮躁的性格困扰自己</li>\n<li>不推诿，勇于承担责任</li>\n<li>无论如何都不要拖延工作</li>\n<li>糊弄工作只能是在糊弄自己</li>\n<li>逊色的工作只会淘汰自己</li>\n<li>千万别丢掉“得宠”之资</li>\n<li>“一步登天”只会摔疼自己</li>\n<li>别让“差不多”贻误了自己</li>\n<li>能完成100%，就决不做99%</li>\n</ul>\n<h1 id=\"与上司相处\"><a href=\"#与上司相处\" class=\"headerlink\" title=\"与上司相处\"></a>与上司相处</h1><ul>\n<li>不要做上司的“心腹”</li>\n<li>适时恰当的赞美上司<ul>\n<li>赞美上司，还要善于选择适当的场合</li>\n<li>赞美上司，要学会巧借公众语言称赞</li>\n<li>赞美上司，还要善于赞美不得志的上司</li>\n</ul>\n</li>\n<li>主动与领导沟通</li>\n<li>主动和上司保持联系 </li>\n<li>用“心机”主动接近上司<ul>\n<li>尽可能详细的了解上司</li>\n<li>选择一个与领导尽可能近的位置</li>\n<li>赢得上司青睐的方法 </li>\n</ul>\n</li>\n<li>更有效的和上司沟通<ul>\n<li>与上司沟通要简洁</li>\n<li>与上司沟通要大度大气大方</li>\n<li>与上司沟通，就要把自己先放一边 ——– 说话对事不对人</li>\n</ul>\n</li>\n<li>四种和上司进行沟通的方法<ol>\n<li>开诚布公式———提出问题，说出自己的理解认识，给出解决方案，寻求领导意思，执行领导的命令</li>\n<li>先斩后奏式———因主客观原因导致的没有先汇报而是先解决的事，事后要将问题的分析方法，解决方法，实施方案以及结果做一份详尽的总结报告上交给领导</li>\n<li>“含情脉脉”式——-通过交流一些工作上的问题来含蓄表达出个人的建议、需要</li>\n<li>巧设比喻式———通过典型案例来暗示自己的意见和要求</li>\n</ol>\n</li>\n<li>把话说到上司的心坎上</li>\n<li>巧妙地为领导拾遗补缺<ol>\n<li>诠释领导讲话的难点</li>\n<li>强调领导的才干</li>\n<li>化严肃为幽默</li>\n<li>稳定情绪，委婉暗示</li>\n</ol>\n</li>\n<li>工作中勤于请示汇报<ol>\n<li>听懂上司的意图</li>\n<li>探讨、磨合，达成共识</li>\n<li>制定尽可能详尽的工作计划</li>\n<li>随时向上司汇报任务的关键点</li>\n<li>总结汇报</li>\n</ol>\n</li>\n<li>用成功赢得上司的信任</li>\n<li>工作中不要冲撞上司</li>\n<li>处理好同上司之间的分歧<ol>\n<li>圆融协调——领导不懂，下达了错误的指令<ol>\n<li>私下向上司陈述意见，帮助上司做出正确的决策</li>\n<li>如果上司采纳了下属的建议或意见，该下属有责任长期保守秘密</li>\n<li>如果上司固执己见，那么无条件服从</li>\n</ol>\n</li>\n<li>装聋作哑——不涉及到原则问题</li>\n<li>棘手难题多权衡<ol>\n<li>立刻插话纠正</li>\n<li>提醒上司</li>\n<li>暗示</li>\n<li>事后补救</li>\n<li>事后提醒</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>正确对待上司的批评</li>\n<li>要善于服从自己的上司</li>\n<li>正确化解来自上司的压力</li>\n</ul>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>博观约取，多读书读好书，丰富自己，变得睿智。</p>\n"},{"title":"《晨间日记的奇迹》读书笔记","date":"2016-10-27T14:22:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n昨天花了1天的时间读了《晨间日记的奇迹》，感觉整个人的认识发生了一些变化，下面把重要内容做一下摘抄总结。\n# 早上写日记的好处 —— 提升效率\n- 可以做好一天的准备 — 计划性\n- 可以正确的写出昨天发生的事 — 效率性&忠诚性\n- 可以中立的看待昨天 — 中立性\n- 相对自由的时间 — 持续性\n- 总结经验 — 活用性\n\n# 注意事项\n日记 不等于 日志\n日记 要记录 时间 天气 心情 --- 因为这些有助于回忆和记录\n不要投入过长时间 — 3分钟 — 日记私密性\n晨间日记前7天只写好事 --- 反省固然重要，但是成长更重要，持续性很重要 --- 巴普洛夫的狗\n\n# 晨间日记2部分\n## Part1 \n客观记录已经发生的事（昨天）— 经验智慧\n## Part2 \n- 今天应做的事 — 具体行动（来自昨天的总结\n- 今天一定要做的事（紧急重要的事）— 变得更积极更主动\n- 未来要做的事 — 不紧急但重要的事\n- 连用日记 — 历史上的今天（过去一年同一天的事）\n\n# 夜晚日记 VS 晨间日记\n受当天情绪影响 — 更冷静\n\n# 梦想成真表\n|      | 过去        | 未来            |\n| ---- | ----------- | --------------- |\n| 事实 | IQ 智慧指数 | NQ 人际关系指数 |\n| 感情 | EQ 情感指数 | DQ 梦想指数     |\n\n- IQ — 晨间日记冷静回忆分析 — 提高决策正确性 IQ up\n- EQ — 冷静记录昨日的情绪／自省 — 变积极 EQ up\n- NQ — 总结昨天给今天设立“对／为XXX做某事” 很重要 NQ up\n- DQ — 不能只有眼前的事 每天都要确定一下自己的梦想 脸皮厚点没关系 重复或只有一句话也没关系 铭记于心最重要\n\n“忙碌”只是借口！“决心”才是问题！ 对未来充满期待的人才有行动力\n\n# 如何早起\n- 设定起床音乐／用气味（精油）刺激起床／光线-电动窗帘早起自动拉开\n- 早起后淋浴 — 配合音乐／冥想／呐喊 — 让自己充满动力保持清醒\n\n# 写日记的五大好处\n- 提升写作能力\n- 谈话题材源源不断\n- 提高贵人运\n- 返现自我肉体和精神的状态与模式\n- 在自己身上挖宝，彻底改变人生\n\n# 记录的日记要常拿出来看看\n记录日记时 — 问问自己的灵魂 然后写下真心话 — 灵魂日记\n`六度空间理论`\n\n# 七种成功者的习惯\n- 习惯之一：积极主动别指望谁能推你走 — 主动行动，迈出第一步\n- 习惯之二：以终为始忠于自己的人生计划。— 设立人生目标并坚持\n- 习惯之三：要事第一选择当前该做的事\n- 习惯之四：追求双赢远离角斗场\n- 习惯之五：善于沟通换位思考的原则\n- 习惯之六：统合综效 1+1可以大于2\n- 习惯之七：不断更新全方位平衡自我\n\n早睡是为了身体，早起是为了我们的内心。— sugiponn\n\n# 晨间日记的格式\n晨间日记必须要设立的栏目 — 工作／金钱／健康／人际关系\n要记下当日的日期／天气／温度／湿度\n\n纬度标签\n工作方面：\n* 能力开发／经营／管理／进货／工作人员／学习／资格／活动／企划案／想法／推广\n金钱方面：\n* 收入／指出／购入／股票／资产／储蓄／家用\n健康方面：\n* 饮食／运动／性／减肥／身体状况／锻炼身体／体重／脂肪\n人际关系方面：\n* 父母／家人／小孩／亲戚／情人／工作伙伴／朋友／熟人／联络事项／人脉网络\n兴趣方面以及其他：\n* 义工活动／阅读／运动／打扮／电影／音乐／游戏／喜欢的物品／今天必须要注意的事／美容／开心的事／购物\n\n劳动 — 职业 — 工作 — *乐趣*\n\n# 三大原则和七大作战守则\n* 原则1:时间不超过3分钟 — 减少养成习惯的成本\n* 原则2:决定好写晨间日记的地方 — 为了养成习惯\n* 原则3:只写一个字也没关系 — 不要有压力\n\n* 作战守则1:开心写日记 — 反省固然重要，鼓励更有作用 — 开始写晨间日记前七天只写好事\n* 作战守则2:ONE-TWO作战 — 把动作分布容易养成习惯 — 形成固定动作\n* 作战守则3:巴普洛夫的狗 — 开始写日记时候要有一个仪式 — 心理暗示\n* 作战守则4:奖励自己 — 当习惯养成并坚持到一定时间，给自己一个奖励\n* 作战守则5:宣告天下 — 借由他人的鼓励或压力形成动力／也可找到同志\n* 作战守则6:一千日作战法 — 不管什么样的习惯坚持1000日就会成为永远的习惯 — 具体做法为记录 第XXX篇 晨间日记\n* 作战守则7:为了别人 — 写晨间日记不只是为了自己，而且更是为了别人，身边人的幸福最终会影响到自己\n\n# 应该先肯定自己，给自己打100分\n* “总之，先… 病” 没有目标／没有梦想 — 回顾时一定会后悔！\n* “假如…，应该 病” 无法满足／没有动力 — 焦躁不安\n* 共同点：失落感／空虚／\n\n## 解决办法— 设立一个情境\n例：我要建立一个幸福的家庭 —> 因此我要创造很多快乐的回忆 —> 为了制造很多快乐的回忆 —> 我必须要到很多的地方去看看 —> 为了去很多地方看看，我觉得有辆车会更方便 —> 买车 —> 考驾照\n\n不要总想自己哪里欠缺，要想自己想要得到什么，并且为了目标努力，你就会变的更完美。\n拥有一个敢于大声喊出的梦想，不要羞涩，要为了梦想一步步的前进，最终达到梦想。\n\n# 提到的另外的书\n《培育梦想种子》《日记的力量》《成功人士的七个习惯》\n","source":"_posts/Read-The-miracle-of-the-morning-journal.md","raw":"---\ntitle: 《晨间日记的奇迹》读书笔记\ndate: 2016-10-27 22:22:22\ncategories: \n\t- 读书笔记\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n昨天花了1天的时间读了《晨间日记的奇迹》，感觉整个人的认识发生了一些变化，下面把重要内容做一下摘抄总结。\n# 早上写日记的好处 —— 提升效率\n- 可以做好一天的准备 — 计划性\n- 可以正确的写出昨天发生的事 — 效率性&忠诚性\n- 可以中立的看待昨天 — 中立性\n- 相对自由的时间 — 持续性\n- 总结经验 — 活用性\n\n# 注意事项\n日记 不等于 日志\n日记 要记录 时间 天气 心情 --- 因为这些有助于回忆和记录\n不要投入过长时间 — 3分钟 — 日记私密性\n晨间日记前7天只写好事 --- 反省固然重要，但是成长更重要，持续性很重要 --- 巴普洛夫的狗\n\n# 晨间日记2部分\n## Part1 \n客观记录已经发生的事（昨天）— 经验智慧\n## Part2 \n- 今天应做的事 — 具体行动（来自昨天的总结\n- 今天一定要做的事（紧急重要的事）— 变得更积极更主动\n- 未来要做的事 — 不紧急但重要的事\n- 连用日记 — 历史上的今天（过去一年同一天的事）\n\n# 夜晚日记 VS 晨间日记\n受当天情绪影响 — 更冷静\n\n# 梦想成真表\n|      | 过去        | 未来            |\n| ---- | ----------- | --------------- |\n| 事实 | IQ 智慧指数 | NQ 人际关系指数 |\n| 感情 | EQ 情感指数 | DQ 梦想指数     |\n\n- IQ — 晨间日记冷静回忆分析 — 提高决策正确性 IQ up\n- EQ — 冷静记录昨日的情绪／自省 — 变积极 EQ up\n- NQ — 总结昨天给今天设立“对／为XXX做某事” 很重要 NQ up\n- DQ — 不能只有眼前的事 每天都要确定一下自己的梦想 脸皮厚点没关系 重复或只有一句话也没关系 铭记于心最重要\n\n“忙碌”只是借口！“决心”才是问题！ 对未来充满期待的人才有行动力\n\n# 如何早起\n- 设定起床音乐／用气味（精油）刺激起床／光线-电动窗帘早起自动拉开\n- 早起后淋浴 — 配合音乐／冥想／呐喊 — 让自己充满动力保持清醒\n\n# 写日记的五大好处\n- 提升写作能力\n- 谈话题材源源不断\n- 提高贵人运\n- 返现自我肉体和精神的状态与模式\n- 在自己身上挖宝，彻底改变人生\n\n# 记录的日记要常拿出来看看\n记录日记时 — 问问自己的灵魂 然后写下真心话 — 灵魂日记\n`六度空间理论`\n\n# 七种成功者的习惯\n- 习惯之一：积极主动别指望谁能推你走 — 主动行动，迈出第一步\n- 习惯之二：以终为始忠于自己的人生计划。— 设立人生目标并坚持\n- 习惯之三：要事第一选择当前该做的事\n- 习惯之四：追求双赢远离角斗场\n- 习惯之五：善于沟通换位思考的原则\n- 习惯之六：统合综效 1+1可以大于2\n- 习惯之七：不断更新全方位平衡自我\n\n早睡是为了身体，早起是为了我们的内心。— sugiponn\n\n# 晨间日记的格式\n晨间日记必须要设立的栏目 — 工作／金钱／健康／人际关系\n要记下当日的日期／天气／温度／湿度\n\n纬度标签\n工作方面：\n* 能力开发／经营／管理／进货／工作人员／学习／资格／活动／企划案／想法／推广\n金钱方面：\n* 收入／指出／购入／股票／资产／储蓄／家用\n健康方面：\n* 饮食／运动／性／减肥／身体状况／锻炼身体／体重／脂肪\n人际关系方面：\n* 父母／家人／小孩／亲戚／情人／工作伙伴／朋友／熟人／联络事项／人脉网络\n兴趣方面以及其他：\n* 义工活动／阅读／运动／打扮／电影／音乐／游戏／喜欢的物品／今天必须要注意的事／美容／开心的事／购物\n\n劳动 — 职业 — 工作 — *乐趣*\n\n# 三大原则和七大作战守则\n* 原则1:时间不超过3分钟 — 减少养成习惯的成本\n* 原则2:决定好写晨间日记的地方 — 为了养成习惯\n* 原则3:只写一个字也没关系 — 不要有压力\n\n* 作战守则1:开心写日记 — 反省固然重要，鼓励更有作用 — 开始写晨间日记前七天只写好事\n* 作战守则2:ONE-TWO作战 — 把动作分布容易养成习惯 — 形成固定动作\n* 作战守则3:巴普洛夫的狗 — 开始写日记时候要有一个仪式 — 心理暗示\n* 作战守则4:奖励自己 — 当习惯养成并坚持到一定时间，给自己一个奖励\n* 作战守则5:宣告天下 — 借由他人的鼓励或压力形成动力／也可找到同志\n* 作战守则6:一千日作战法 — 不管什么样的习惯坚持1000日就会成为永远的习惯 — 具体做法为记录 第XXX篇 晨间日记\n* 作战守则7:为了别人 — 写晨间日记不只是为了自己，而且更是为了别人，身边人的幸福最终会影响到自己\n\n# 应该先肯定自己，给自己打100分\n* “总之，先… 病” 没有目标／没有梦想 — 回顾时一定会后悔！\n* “假如…，应该 病” 无法满足／没有动力 — 焦躁不安\n* 共同点：失落感／空虚／\n\n## 解决办法— 设立一个情境\n例：我要建立一个幸福的家庭 —> 因此我要创造很多快乐的回忆 —> 为了制造很多快乐的回忆 —> 我必须要到很多的地方去看看 —> 为了去很多地方看看，我觉得有辆车会更方便 —> 买车 —> 考驾照\n\n不要总想自己哪里欠缺，要想自己想要得到什么，并且为了目标努力，你就会变的更完美。\n拥有一个敢于大声喊出的梦想，不要羞涩，要为了梦想一步步的前进，最终达到梦想。\n\n# 提到的另外的书\n《培育梦想种子》《日记的力量》《成功人士的七个习惯》\n","slug":"Read-The-miracle-of-the-morning-journal","published":1,"updated":"2020-04-02T03:20:12.417Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs0p0039ooa60cwo2wam","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>昨天花了1天的时间读了《晨间日记的奇迹》，感觉整个人的认识发生了一些变化，下面把重要内容做一下摘抄总结。</p>\n<h1 id=\"早上写日记的好处-——-提升效率\"><a href=\"#早上写日记的好处-——-提升效率\" class=\"headerlink\" title=\"早上写日记的好处 —— 提升效率\"></a>早上写日记的好处 —— 提升效率</h1><ul>\n<li>可以做好一天的准备 — 计划性</li>\n<li>可以正确的写出昨天发生的事 — 效率性&amp;忠诚性</li>\n<li>可以中立的看待昨天 — 中立性</li>\n<li>相对自由的时间 — 持续性</li>\n<li>总结经验 — 活用性</li>\n</ul>\n<h1 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h1><p>日记 不等于 日志<br>日记 要记录 时间 天气 心情 — 因为这些有助于回忆和记录<br>不要投入过长时间 — 3分钟 — 日记私密性<br>晨间日记前7天只写好事 — 反省固然重要，但是成长更重要，持续性很重要 — 巴普洛夫的狗</p>\n<h1 id=\"晨间日记2部分\"><a href=\"#晨间日记2部分\" class=\"headerlink\" title=\"晨间日记2部分\"></a>晨间日记2部分</h1><h2 id=\"Part1\"><a href=\"#Part1\" class=\"headerlink\" title=\"Part1\"></a>Part1</h2><p>客观记录已经发生的事（昨天）— 经验智慧</p>\n<h2 id=\"Part2\"><a href=\"#Part2\" class=\"headerlink\" title=\"Part2\"></a>Part2</h2><ul>\n<li>今天应做的事 — 具体行动（来自昨天的总结</li>\n<li>今天一定要做的事（紧急重要的事）— 变得更积极更主动</li>\n<li>未来要做的事 — 不紧急但重要的事</li>\n<li>连用日记 — 历史上的今天（过去一年同一天的事）</li>\n</ul>\n<h1 id=\"夜晚日记-VS-晨间日记\"><a href=\"#夜晚日记-VS-晨间日记\" class=\"headerlink\" title=\"夜晚日记 VS 晨间日记\"></a>夜晚日记 VS 晨间日记</h1><p>受当天情绪影响 — 更冷静</p>\n<h1 id=\"梦想成真表\"><a href=\"#梦想成真表\" class=\"headerlink\" title=\"梦想成真表\"></a>梦想成真表</h1><table>\n<thead>\n<tr>\n<th></th>\n<th>过去</th>\n<th>未来</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>事实</td>\n<td>IQ 智慧指数</td>\n<td>NQ 人际关系指数</td>\n</tr>\n<tr>\n<td>感情</td>\n<td>EQ 情感指数</td>\n<td>DQ 梦想指数</td>\n</tr>\n</tbody></table>\n<ul>\n<li>IQ — 晨间日记冷静回忆分析 — 提高决策正确性 IQ up</li>\n<li>EQ — 冷静记录昨日的情绪／自省 — 变积极 EQ up</li>\n<li>NQ — 总结昨天给今天设立“对／为XXX做某事” 很重要 NQ up</li>\n<li>DQ — 不能只有眼前的事 每天都要确定一下自己的梦想 脸皮厚点没关系 重复或只有一句话也没关系 铭记于心最重要</li>\n</ul>\n<p>“忙碌”只是借口！“决心”才是问题！ 对未来充满期待的人才有行动力</p>\n<h1 id=\"如何早起\"><a href=\"#如何早起\" class=\"headerlink\" title=\"如何早起\"></a>如何早起</h1><ul>\n<li>设定起床音乐／用气味（精油）刺激起床／光线-电动窗帘早起自动拉开</li>\n<li>早起后淋浴 — 配合音乐／冥想／呐喊 — 让自己充满动力保持清醒</li>\n</ul>\n<h1 id=\"写日记的五大好处\"><a href=\"#写日记的五大好处\" class=\"headerlink\" title=\"写日记的五大好处\"></a>写日记的五大好处</h1><ul>\n<li>提升写作能力</li>\n<li>谈话题材源源不断</li>\n<li>提高贵人运</li>\n<li>返现自我肉体和精神的状态与模式</li>\n<li>在自己身上挖宝，彻底改变人生</li>\n</ul>\n<h1 id=\"记录的日记要常拿出来看看\"><a href=\"#记录的日记要常拿出来看看\" class=\"headerlink\" title=\"记录的日记要常拿出来看看\"></a>记录的日记要常拿出来看看</h1><p>记录日记时 — 问问自己的灵魂 然后写下真心话 — 灵魂日记<br><code>六度空间理论</code></p>\n<h1 id=\"七种成功者的习惯\"><a href=\"#七种成功者的习惯\" class=\"headerlink\" title=\"七种成功者的习惯\"></a>七种成功者的习惯</h1><ul>\n<li>习惯之一：积极主动别指望谁能推你走 — 主动行动，迈出第一步</li>\n<li>习惯之二：以终为始忠于自己的人生计划。— 设立人生目标并坚持</li>\n<li>习惯之三：要事第一选择当前该做的事</li>\n<li>习惯之四：追求双赢远离角斗场</li>\n<li>习惯之五：善于沟通换位思考的原则</li>\n<li>习惯之六：统合综效 1+1可以大于2</li>\n<li>习惯之七：不断更新全方位平衡自我</li>\n</ul>\n<p>早睡是为了身体，早起是为了我们的内心。— sugiponn</p>\n<h1 id=\"晨间日记的格式\"><a href=\"#晨间日记的格式\" class=\"headerlink\" title=\"晨间日记的格式\"></a>晨间日记的格式</h1><p>晨间日记必须要设立的栏目 — 工作／金钱／健康／人际关系<br>要记下当日的日期／天气／温度／湿度</p>\n<p>纬度标签<br>工作方面：</p>\n<ul>\n<li>能力开发／经营／管理／进货／工作人员／学习／资格／活动／企划案／想法／推广<br>金钱方面：</li>\n<li>收入／指出／购入／股票／资产／储蓄／家用<br>健康方面：</li>\n<li>饮食／运动／性／减肥／身体状况／锻炼身体／体重／脂肪<br>人际关系方面：</li>\n<li>父母／家人／小孩／亲戚／情人／工作伙伴／朋友／熟人／联络事项／人脉网络<br>兴趣方面以及其他：</li>\n<li>义工活动／阅读／运动／打扮／电影／音乐／游戏／喜欢的物品／今天必须要注意的事／美容／开心的事／购物</li>\n</ul>\n<p>劳动 — 职业 — 工作 — <em>乐趣</em></p>\n<h1 id=\"三大原则和七大作战守则\"><a href=\"#三大原则和七大作战守则\" class=\"headerlink\" title=\"三大原则和七大作战守则\"></a>三大原则和七大作战守则</h1><ul>\n<li><p>原则1:时间不超过3分钟 — 减少养成习惯的成本</p>\n</li>\n<li><p>原则2:决定好写晨间日记的地方 — 为了养成习惯</p>\n</li>\n<li><p>原则3:只写一个字也没关系 — 不要有压力</p>\n</li>\n<li><p>作战守则1:开心写日记 — 反省固然重要，鼓励更有作用 — 开始写晨间日记前七天只写好事</p>\n</li>\n<li><p>作战守则2:ONE-TWO作战 — 把动作分布容易养成习惯 — 形成固定动作</p>\n</li>\n<li><p>作战守则3:巴普洛夫的狗 — 开始写日记时候要有一个仪式 — 心理暗示</p>\n</li>\n<li><p>作战守则4:奖励自己 — 当习惯养成并坚持到一定时间，给自己一个奖励</p>\n</li>\n<li><p>作战守则5:宣告天下 — 借由他人的鼓励或压力形成动力／也可找到同志</p>\n</li>\n<li><p>作战守则6:一千日作战法 — 不管什么样的习惯坚持1000日就会成为永远的习惯 — 具体做法为记录 第XXX篇 晨间日记</p>\n</li>\n<li><p>作战守则7:为了别人 — 写晨间日记不只是为了自己，而且更是为了别人，身边人的幸福最终会影响到自己</p>\n</li>\n</ul>\n<h1 id=\"应该先肯定自己，给自己打100分\"><a href=\"#应该先肯定自己，给自己打100分\" class=\"headerlink\" title=\"应该先肯定自己，给自己打100分\"></a>应该先肯定自己，给自己打100分</h1><ul>\n<li>“总之，先… 病” 没有目标／没有梦想 — 回顾时一定会后悔！</li>\n<li>“假如…，应该 病” 无法满足／没有动力 — 焦躁不安</li>\n<li>共同点：失落感／空虚／</li>\n</ul>\n<h2 id=\"解决办法—-设立一个情境\"><a href=\"#解决办法—-设立一个情境\" class=\"headerlink\" title=\"解决办法— 设立一个情境\"></a>解决办法— 设立一个情境</h2><p>例：我要建立一个幸福的家庭 —&gt; 因此我要创造很多快乐的回忆 —&gt; 为了制造很多快乐的回忆 —&gt; 我必须要到很多的地方去看看 —&gt; 为了去很多地方看看，我觉得有辆车会更方便 —&gt; 买车 —&gt; 考驾照</p>\n<p>不要总想自己哪里欠缺，要想自己想要得到什么，并且为了目标努力，你就会变的更完美。<br>拥有一个敢于大声喊出的梦想，不要羞涩，要为了梦想一步步的前进，最终达到梦想。</p>\n<h1 id=\"提到的另外的书\"><a href=\"#提到的另外的书\" class=\"headerlink\" title=\"提到的另外的书\"></a>提到的另外的书</h1><p>《培育梦想种子》《日记的力量》《成功人士的七个习惯》</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>昨天花了1天的时间读了《晨间日记的奇迹》，感觉整个人的认识发生了一些变化，下面把重要内容做一下摘抄总结。</p>\n<h1 id=\"早上写日记的好处-——-提升效率\"><a href=\"#早上写日记的好处-——-提升效率\" class=\"headerlink\" title=\"早上写日记的好处 —— 提升效率\"></a>早上写日记的好处 —— 提升效率</h1><ul>\n<li>可以做好一天的准备 — 计划性</li>\n<li>可以正确的写出昨天发生的事 — 效率性&amp;忠诚性</li>\n<li>可以中立的看待昨天 — 中立性</li>\n<li>相对自由的时间 — 持续性</li>\n<li>总结经验 — 活用性</li>\n</ul>\n<h1 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h1><p>日记 不等于 日志<br>日记 要记录 时间 天气 心情 — 因为这些有助于回忆和记录<br>不要投入过长时间 — 3分钟 — 日记私密性<br>晨间日记前7天只写好事 — 反省固然重要，但是成长更重要，持续性很重要 — 巴普洛夫的狗</p>\n<h1 id=\"晨间日记2部分\"><a href=\"#晨间日记2部分\" class=\"headerlink\" title=\"晨间日记2部分\"></a>晨间日记2部分</h1><h2 id=\"Part1\"><a href=\"#Part1\" class=\"headerlink\" title=\"Part1\"></a>Part1</h2><p>客观记录已经发生的事（昨天）— 经验智慧</p>\n<h2 id=\"Part2\"><a href=\"#Part2\" class=\"headerlink\" title=\"Part2\"></a>Part2</h2><ul>\n<li>今天应做的事 — 具体行动（来自昨天的总结</li>\n<li>今天一定要做的事（紧急重要的事）— 变得更积极更主动</li>\n<li>未来要做的事 — 不紧急但重要的事</li>\n<li>连用日记 — 历史上的今天（过去一年同一天的事）</li>\n</ul>\n<h1 id=\"夜晚日记-VS-晨间日记\"><a href=\"#夜晚日记-VS-晨间日记\" class=\"headerlink\" title=\"夜晚日记 VS 晨间日记\"></a>夜晚日记 VS 晨间日记</h1><p>受当天情绪影响 — 更冷静</p>\n<h1 id=\"梦想成真表\"><a href=\"#梦想成真表\" class=\"headerlink\" title=\"梦想成真表\"></a>梦想成真表</h1><table>\n<thead>\n<tr>\n<th></th>\n<th>过去</th>\n<th>未来</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>事实</td>\n<td>IQ 智慧指数</td>\n<td>NQ 人际关系指数</td>\n</tr>\n<tr>\n<td>感情</td>\n<td>EQ 情感指数</td>\n<td>DQ 梦想指数</td>\n</tr>\n</tbody></table>\n<ul>\n<li>IQ — 晨间日记冷静回忆分析 — 提高决策正确性 IQ up</li>\n<li>EQ — 冷静记录昨日的情绪／自省 — 变积极 EQ up</li>\n<li>NQ — 总结昨天给今天设立“对／为XXX做某事” 很重要 NQ up</li>\n<li>DQ — 不能只有眼前的事 每天都要确定一下自己的梦想 脸皮厚点没关系 重复或只有一句话也没关系 铭记于心最重要</li>\n</ul>\n<p>“忙碌”只是借口！“决心”才是问题！ 对未来充满期待的人才有行动力</p>\n<h1 id=\"如何早起\"><a href=\"#如何早起\" class=\"headerlink\" title=\"如何早起\"></a>如何早起</h1><ul>\n<li>设定起床音乐／用气味（精油）刺激起床／光线-电动窗帘早起自动拉开</li>\n<li>早起后淋浴 — 配合音乐／冥想／呐喊 — 让自己充满动力保持清醒</li>\n</ul>\n<h1 id=\"写日记的五大好处\"><a href=\"#写日记的五大好处\" class=\"headerlink\" title=\"写日记的五大好处\"></a>写日记的五大好处</h1><ul>\n<li>提升写作能力</li>\n<li>谈话题材源源不断</li>\n<li>提高贵人运</li>\n<li>返现自我肉体和精神的状态与模式</li>\n<li>在自己身上挖宝，彻底改变人生</li>\n</ul>\n<h1 id=\"记录的日记要常拿出来看看\"><a href=\"#记录的日记要常拿出来看看\" class=\"headerlink\" title=\"记录的日记要常拿出来看看\"></a>记录的日记要常拿出来看看</h1><p>记录日记时 — 问问自己的灵魂 然后写下真心话 — 灵魂日记<br><code>六度空间理论</code></p>\n<h1 id=\"七种成功者的习惯\"><a href=\"#七种成功者的习惯\" class=\"headerlink\" title=\"七种成功者的习惯\"></a>七种成功者的习惯</h1><ul>\n<li>习惯之一：积极主动别指望谁能推你走 — 主动行动，迈出第一步</li>\n<li>习惯之二：以终为始忠于自己的人生计划。— 设立人生目标并坚持</li>\n<li>习惯之三：要事第一选择当前该做的事</li>\n<li>习惯之四：追求双赢远离角斗场</li>\n<li>习惯之五：善于沟通换位思考的原则</li>\n<li>习惯之六：统合综效 1+1可以大于2</li>\n<li>习惯之七：不断更新全方位平衡自我</li>\n</ul>\n<p>早睡是为了身体，早起是为了我们的内心。— sugiponn</p>\n<h1 id=\"晨间日记的格式\"><a href=\"#晨间日记的格式\" class=\"headerlink\" title=\"晨间日记的格式\"></a>晨间日记的格式</h1><p>晨间日记必须要设立的栏目 — 工作／金钱／健康／人际关系<br>要记下当日的日期／天气／温度／湿度</p>\n<p>纬度标签<br>工作方面：</p>\n<ul>\n<li>能力开发／经营／管理／进货／工作人员／学习／资格／活动／企划案／想法／推广<br>金钱方面：</li>\n<li>收入／指出／购入／股票／资产／储蓄／家用<br>健康方面：</li>\n<li>饮食／运动／性／减肥／身体状况／锻炼身体／体重／脂肪<br>人际关系方面：</li>\n<li>父母／家人／小孩／亲戚／情人／工作伙伴／朋友／熟人／联络事项／人脉网络<br>兴趣方面以及其他：</li>\n<li>义工活动／阅读／运动／打扮／电影／音乐／游戏／喜欢的物品／今天必须要注意的事／美容／开心的事／购物</li>\n</ul>\n<p>劳动 — 职业 — 工作 — <em>乐趣</em></p>\n<h1 id=\"三大原则和七大作战守则\"><a href=\"#三大原则和七大作战守则\" class=\"headerlink\" title=\"三大原则和七大作战守则\"></a>三大原则和七大作战守则</h1><ul>\n<li><p>原则1:时间不超过3分钟 — 减少养成习惯的成本</p>\n</li>\n<li><p>原则2:决定好写晨间日记的地方 — 为了养成习惯</p>\n</li>\n<li><p>原则3:只写一个字也没关系 — 不要有压力</p>\n</li>\n<li><p>作战守则1:开心写日记 — 反省固然重要，鼓励更有作用 — 开始写晨间日记前七天只写好事</p>\n</li>\n<li><p>作战守则2:ONE-TWO作战 — 把动作分布容易养成习惯 — 形成固定动作</p>\n</li>\n<li><p>作战守则3:巴普洛夫的狗 — 开始写日记时候要有一个仪式 — 心理暗示</p>\n</li>\n<li><p>作战守则4:奖励自己 — 当习惯养成并坚持到一定时间，给自己一个奖励</p>\n</li>\n<li><p>作战守则5:宣告天下 — 借由他人的鼓励或压力形成动力／也可找到同志</p>\n</li>\n<li><p>作战守则6:一千日作战法 — 不管什么样的习惯坚持1000日就会成为永远的习惯 — 具体做法为记录 第XXX篇 晨间日记</p>\n</li>\n<li><p>作战守则7:为了别人 — 写晨间日记不只是为了自己，而且更是为了别人，身边人的幸福最终会影响到自己</p>\n</li>\n</ul>\n<h1 id=\"应该先肯定自己，给自己打100分\"><a href=\"#应该先肯定自己，给自己打100分\" class=\"headerlink\" title=\"应该先肯定自己，给自己打100分\"></a>应该先肯定自己，给自己打100分</h1><ul>\n<li>“总之，先… 病” 没有目标／没有梦想 — 回顾时一定会后悔！</li>\n<li>“假如…，应该 病” 无法满足／没有动力 — 焦躁不安</li>\n<li>共同点：失落感／空虚／</li>\n</ul>\n<h2 id=\"解决办法—-设立一个情境\"><a href=\"#解决办法—-设立一个情境\" class=\"headerlink\" title=\"解决办法— 设立一个情境\"></a>解决办法— 设立一个情境</h2><p>例：我要建立一个幸福的家庭 —&gt; 因此我要创造很多快乐的回忆 —&gt; 为了制造很多快乐的回忆 —&gt; 我必须要到很多的地方去看看 —&gt; 为了去很多地方看看，我觉得有辆车会更方便 —&gt; 买车 —&gt; 考驾照</p>\n<p>不要总想自己哪里欠缺，要想自己想要得到什么，并且为了目标努力，你就会变的更完美。<br>拥有一个敢于大声喊出的梦想，不要羞涩，要为了梦想一步步的前进，最终达到梦想。</p>\n<h1 id=\"提到的另外的书\"><a href=\"#提到的另外的书\" class=\"headerlink\" title=\"提到的另外的书\"></a>提到的另外的书</h1><p>《培育梦想种子》《日记的力量》《成功人士的七个习惯》</p>\n"},{"title":"SSR","date":"2020-02-11T08:00:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n# 什么是SSR\n## 传统浏览器的vue纯浏览器渲染\n浏览器请求服务器，服务器返回静态资源 ，客户端负责渲染js\n## ssr\n浏览器请求服务器，node服务端渲染js后，返回对应的页面返回给浏览器\n## SSR需要那些东西\n## 手写SSR\n特性：\n- 每一次访问必须新建一个vue实例\n- 只会触发组件的 beforeCreate和created钩子\n\n核心库\n- vue\n- vue-server-renderer\n# vue + next","source":"_posts/SSR.md","raw":"---\ntitle: SSR\ndate: 2020-02-11 16:00:00\ncategories: \n\t- 前端技术\ntags:\n\t- 同构\n\t- 服务端渲染\n---\n> 作者：李旭光\n> 引用请标明出处\n\n# 什么是SSR\n## 传统浏览器的vue纯浏览器渲染\n浏览器请求服务器，服务器返回静态资源 ，客户端负责渲染js\n## ssr\n浏览器请求服务器，node服务端渲染js后，返回对应的页面返回给浏览器\n## SSR需要那些东西\n## 手写SSR\n特性：\n- 每一次访问必须新建一个vue实例\n- 只会触发组件的 beforeCreate和created钩子\n\n核心库\n- vue\n- vue-server-renderer\n# vue + next","slug":"SSR","published":1,"updated":"2020-04-02T03:20:12.418Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs0q003cooa6dc8e75z9","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"什么是SSR\"><a href=\"#什么是SSR\" class=\"headerlink\" title=\"什么是SSR\"></a>什么是SSR</h1><h2 id=\"传统浏览器的vue纯浏览器渲染\"><a href=\"#传统浏览器的vue纯浏览器渲染\" class=\"headerlink\" title=\"传统浏览器的vue纯浏览器渲染\"></a>传统浏览器的vue纯浏览器渲染</h2><p>浏览器请求服务器，服务器返回静态资源 ，客户端负责渲染js</p>\n<h2 id=\"ssr\"><a href=\"#ssr\" class=\"headerlink\" title=\"ssr\"></a>ssr</h2><p>浏览器请求服务器，node服务端渲染js后，返回对应的页面返回给浏览器</p>\n<h2 id=\"SSR需要那些东西\"><a href=\"#SSR需要那些东西\" class=\"headerlink\" title=\"SSR需要那些东西\"></a>SSR需要那些东西</h2><h2 id=\"手写SSR\"><a href=\"#手写SSR\" class=\"headerlink\" title=\"手写SSR\"></a>手写SSR</h2><p>特性：</p>\n<ul>\n<li>每一次访问必须新建一个vue实例</li>\n<li>只会触发组件的 beforeCreate和created钩子</li>\n</ul>\n<p>核心库</p>\n<ul>\n<li>vue</li>\n<li>vue-server-renderer<h1 id=\"vue-next\"><a href=\"#vue-next\" class=\"headerlink\" title=\"vue + next\"></a>vue + next</h1></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"什么是SSR\"><a href=\"#什么是SSR\" class=\"headerlink\" title=\"什么是SSR\"></a>什么是SSR</h1><h2 id=\"传统浏览器的vue纯浏览器渲染\"><a href=\"#传统浏览器的vue纯浏览器渲染\" class=\"headerlink\" title=\"传统浏览器的vue纯浏览器渲染\"></a>传统浏览器的vue纯浏览器渲染</h2><p>浏览器请求服务器，服务器返回静态资源 ，客户端负责渲染js</p>\n<h2 id=\"ssr\"><a href=\"#ssr\" class=\"headerlink\" title=\"ssr\"></a>ssr</h2><p>浏览器请求服务器，node服务端渲染js后，返回对应的页面返回给浏览器</p>\n<h2 id=\"SSR需要那些东西\"><a href=\"#SSR需要那些东西\" class=\"headerlink\" title=\"SSR需要那些东西\"></a>SSR需要那些东西</h2><h2 id=\"手写SSR\"><a href=\"#手写SSR\" class=\"headerlink\" title=\"手写SSR\"></a>手写SSR</h2><p>特性：</p>\n<ul>\n<li>每一次访问必须新建一个vue实例</li>\n<li>只会触发组件的 beforeCreate和created钩子</li>\n</ul>\n<p>核心库</p>\n<ul>\n<li>vue</li>\n<li>vue-server-renderer<h1 id=\"vue-next\"><a href=\"#vue-next\" class=\"headerlink\" title=\"vue + next\"></a>vue + next</h1></li>\n</ul>\n"},{"title":"使用阿里镜像加速brew（转载）","date":"2020-03-03T14:00:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n# 使用 Alibaba 的 Homebrew 镜像源进行加速\n平时我们执行 brew 命令安装软件的时候，跟以下 3 个仓库地址有关：\n- brew.git\n- homebrew-core.git\n- homebrew-bottles\n通过以下操作将这 3 个仓库地址全部替换为 Alibaba 提供的地址\n\n## 1. 替换 / 还原 brew.git 仓库地址\n``` bash\n# 替换成阿里巴巴的 brew.git 仓库地址:\ncd \"$(brew --repo)\"\ngit remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git\n\n#=======================================================\n\n# 还原为官方提供的 brew.git 仓库地址\ncd \"$(brew --repo)\"\ngit remote set-url origin https://github.com/Homebrew/brew.git\n```\n\n## 2. 替换 / 还原 homebrew-core.git 仓库地址\n``` bash\n# 替换成阿里巴巴的 homebrew-core.git 仓库地址:\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-core.git 仓库地址\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://github.com/Homebrew/homebrew-core.git\n```\n\n## 3. 替换 / 还原 homebrew-bottles 访问地址\n这个步骤跟你的 macOS 系统使用的 shell 版本有关系\n\n所以，先来查看当前使用的 shell 版本\n\n``` bash\necho $SHELL\n\n# 如果你的输出结果是 /bin/zsh，参考下方的 zsh 终端操作方式\n# 如果你的输出结果是 /bin/bash，参考下方的 bash 终端操作方式\n```\n### 3.1 zsh 终端操作方式\n``` bash\n# 替换成阿里巴巴的 homebrew-bottles 访问地址:\necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' >> ~/.zshrc\nsource ~/.zshrc\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-bottles 访问地址\nvi ~/.zshrc\n# 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置\nsource ~/.zshrc\n```\n### 3.2 bash 终端操作方式\n``` bash\n# 替换 homebrew-bottles 访问 URL:\necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' >> ~/.bash_profile\nsource ~/.bash_profile\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-bottles 访问地址\nvi ~/.bash_profile\n# 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置\nsource ~/.bash_profile\n```\n\n转载自：http://www.xiegangd.com/article/154055689187484","source":"_posts/Speeding-up-brew-with-Ali-mirroring.md","raw":"---\ntitle: 使用阿里镜像加速brew（转载）\ndate: 2020-03-03 22:00:00\ncategories: \n\t- 海外提速\ntags:\n\t- HomeBrew\n\t- Mac\n---\n> 作者：李旭光\n> 引用请标明出处\n\n# 使用 Alibaba 的 Homebrew 镜像源进行加速\n平时我们执行 brew 命令安装软件的时候，跟以下 3 个仓库地址有关：\n- brew.git\n- homebrew-core.git\n- homebrew-bottles\n通过以下操作将这 3 个仓库地址全部替换为 Alibaba 提供的地址\n\n## 1. 替换 / 还原 brew.git 仓库地址\n``` bash\n# 替换成阿里巴巴的 brew.git 仓库地址:\ncd \"$(brew --repo)\"\ngit remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git\n\n#=======================================================\n\n# 还原为官方提供的 brew.git 仓库地址\ncd \"$(brew --repo)\"\ngit remote set-url origin https://github.com/Homebrew/brew.git\n```\n\n## 2. 替换 / 还原 homebrew-core.git 仓库地址\n``` bash\n# 替换成阿里巴巴的 homebrew-core.git 仓库地址:\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-core.git 仓库地址\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://github.com/Homebrew/homebrew-core.git\n```\n\n## 3. 替换 / 还原 homebrew-bottles 访问地址\n这个步骤跟你的 macOS 系统使用的 shell 版本有关系\n\n所以，先来查看当前使用的 shell 版本\n\n``` bash\necho $SHELL\n\n# 如果你的输出结果是 /bin/zsh，参考下方的 zsh 终端操作方式\n# 如果你的输出结果是 /bin/bash，参考下方的 bash 终端操作方式\n```\n### 3.1 zsh 终端操作方式\n``` bash\n# 替换成阿里巴巴的 homebrew-bottles 访问地址:\necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' >> ~/.zshrc\nsource ~/.zshrc\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-bottles 访问地址\nvi ~/.zshrc\n# 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置\nsource ~/.zshrc\n```\n### 3.2 bash 终端操作方式\n``` bash\n# 替换 homebrew-bottles 访问 URL:\necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' >> ~/.bash_profile\nsource ~/.bash_profile\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-bottles 访问地址\nvi ~/.bash_profile\n# 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置\nsource ~/.bash_profile\n```\n\n转载自：http://www.xiegangd.com/article/154055689187484","slug":"Speeding-up-brew-with-Ali-mirroring","published":1,"updated":"2020-04-02T03:20:12.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs0r003gooa61qebgzsy","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"使用-Alibaba-的-Homebrew-镜像源进行加速\"><a href=\"#使用-Alibaba-的-Homebrew-镜像源进行加速\" class=\"headerlink\" title=\"使用 Alibaba 的 Homebrew 镜像源进行加速\"></a>使用 Alibaba 的 Homebrew 镜像源进行加速</h1><p>平时我们执行 brew 命令安装软件的时候，跟以下 3 个仓库地址有关：</p>\n<ul>\n<li>brew.git</li>\n<li>homebrew-core.git</li>\n<li>homebrew-bottles<br>通过以下操作将这 3 个仓库地址全部替换为 Alibaba 提供的地址</li>\n</ul>\n<h2 id=\"1-替换-还原-brew-git-仓库地址\"><a href=\"#1-替换-还原-brew-git-仓库地址\" class=\"headerlink\" title=\"1. 替换 / 还原 brew.git 仓库地址\"></a>1. 替换 / 还原 brew.git 仓库地址</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 替换成阿里巴巴的 brew.git 仓库地址:</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>\"</span></span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin https://mirrors.aliyun.com/homebrew/brew.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#=======================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还原为官方提供的 brew.git 仓库地址</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>\"</span></span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin https://github.com/Homebrew/brew.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-替换-还原-homebrew-core-git-仓库地址\"><a href=\"#2-替换-还原-homebrew-core-git-仓库地址\" class=\"headerlink\" title=\"2. 替换 / 还原 homebrew-core.git 仓库地址\"></a>2. 替换 / 还原 homebrew-core.git 仓库地址</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 替换成阿里巴巴的 homebrew-core.git 仓库地址:</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core\"</span></span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#=======================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还原为官方提供的 homebrew-core.git 仓库地址</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core\"</span></span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin https://github.com/Homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-替换-还原-homebrew-bottles-访问地址\"><a href=\"#3-替换-还原-homebrew-bottles-访问地址\" class=\"headerlink\" title=\"3. 替换 / 还原 homebrew-bottles 访问地址\"></a>3. 替换 / 还原 homebrew-bottles 访问地址</h2><p>这个步骤跟你的 macOS 系统使用的 shell 版本有关系</p>\n<p>所以，先来查看当前使用的 shell 版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果你的输出结果是 /bin/zsh，参考下方的 zsh 终端操作方式</span></span><br><span class=\"line\"><span class=\"comment\"># 如果你的输出结果是 /bin/bash，参考下方的 bash 终端操作方式</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-zsh-终端操作方式\"><a href=\"#3-1-zsh-终端操作方式\" class=\"headerlink\" title=\"3.1 zsh 终端操作方式\"></a>3.1 zsh 终端操作方式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 替换成阿里巴巴的 homebrew-bottles 访问地址:</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles'</span> &gt;&gt; ~/.zshrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#=======================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还原为官方提供的 homebrew-bottles 访问地址</span></span><br><span class=\"line\">vi ~/.zshrc</span><br><span class=\"line\"><span class=\"comment\"># 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-bash-终端操作方式\"><a href=\"#3-2-bash-终端操作方式\" class=\"headerlink\" title=\"3.2 bash 终端操作方式\"></a>3.2 bash 终端操作方式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 替换 homebrew-bottles 访问 URL:</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles'</span> &gt;&gt; ~/.bash_profile</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#=======================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还原为官方提供的 homebrew-bottles 访问地址</span></span><br><span class=\"line\">vi ~/.bash_profile</span><br><span class=\"line\"><span class=\"comment\"># 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<p>转载自：<a href=\"http://www.xiegangd.com/article/154055689187484\" target=\"_blank\" rel=\"noopener\">http://www.xiegangd.com/article/154055689187484</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"使用-Alibaba-的-Homebrew-镜像源进行加速\"><a href=\"#使用-Alibaba-的-Homebrew-镜像源进行加速\" class=\"headerlink\" title=\"使用 Alibaba 的 Homebrew 镜像源进行加速\"></a>使用 Alibaba 的 Homebrew 镜像源进行加速</h1><p>平时我们执行 brew 命令安装软件的时候，跟以下 3 个仓库地址有关：</p>\n<ul>\n<li>brew.git</li>\n<li>homebrew-core.git</li>\n<li>homebrew-bottles<br>通过以下操作将这 3 个仓库地址全部替换为 Alibaba 提供的地址</li>\n</ul>\n<h2 id=\"1-替换-还原-brew-git-仓库地址\"><a href=\"#1-替换-还原-brew-git-仓库地址\" class=\"headerlink\" title=\"1. 替换 / 还原 brew.git 仓库地址\"></a>1. 替换 / 还原 brew.git 仓库地址</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 替换成阿里巴巴的 brew.git 仓库地址:</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>\"</span></span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin https://mirrors.aliyun.com/homebrew/brew.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#=======================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还原为官方提供的 brew.git 仓库地址</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>\"</span></span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin https://github.com/Homebrew/brew.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-替换-还原-homebrew-core-git-仓库地址\"><a href=\"#2-替换-还原-homebrew-core-git-仓库地址\" class=\"headerlink\" title=\"2. 替换 / 还原 homebrew-core.git 仓库地址\"></a>2. 替换 / 还原 homebrew-core.git 仓库地址</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 替换成阿里巴巴的 homebrew-core.git 仓库地址:</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core\"</span></span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#=======================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还原为官方提供的 homebrew-core.git 仓库地址</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core\"</span></span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin https://github.com/Homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-替换-还原-homebrew-bottles-访问地址\"><a href=\"#3-替换-还原-homebrew-bottles-访问地址\" class=\"headerlink\" title=\"3. 替换 / 还原 homebrew-bottles 访问地址\"></a>3. 替换 / 还原 homebrew-bottles 访问地址</h2><p>这个步骤跟你的 macOS 系统使用的 shell 版本有关系</p>\n<p>所以，先来查看当前使用的 shell 版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果你的输出结果是 /bin/zsh，参考下方的 zsh 终端操作方式</span></span><br><span class=\"line\"><span class=\"comment\"># 如果你的输出结果是 /bin/bash，参考下方的 bash 终端操作方式</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-zsh-终端操作方式\"><a href=\"#3-1-zsh-终端操作方式\" class=\"headerlink\" title=\"3.1 zsh 终端操作方式\"></a>3.1 zsh 终端操作方式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 替换成阿里巴巴的 homebrew-bottles 访问地址:</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles'</span> &gt;&gt; ~/.zshrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#=======================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还原为官方提供的 homebrew-bottles 访问地址</span></span><br><span class=\"line\">vi ~/.zshrc</span><br><span class=\"line\"><span class=\"comment\"># 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-bash-终端操作方式\"><a href=\"#3-2-bash-终端操作方式\" class=\"headerlink\" title=\"3.2 bash 终端操作方式\"></a>3.2 bash 终端操作方式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 替换 homebrew-bottles 访问 URL:</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles'</span> &gt;&gt; ~/.bash_profile</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#=======================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还原为官方提供的 homebrew-bottles 访问地址</span></span><br><span class=\"line\">vi ~/.bash_profile</span><br><span class=\"line\"><span class=\"comment\"># 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<p>转载自：<a href=\"http://www.xiegangd.com/article/154055689187484\" target=\"_blank\" rel=\"noopener\">http://www.xiegangd.com/article/154055689187484</a></p>\n"},{"title":"v8引擎如何回收内存（笔记）","date":"2020-02-23T08:00:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n# V8引擎如何回收垃圾\n## 为什么我们要关注内存\n- 防止页面占用内存过大，引起客户端卡顿，甚至无响应\n- Node使用的也是v8，内存对于后端服务的性能至关重要。因为服务的持久性，后端更容易造成内存溢出\n## v8引擎的内存回收机制\n### v8的内存分配\n新生代内存空间\n- from\n- to\n老生代内存空间\n### 内存大小\n- 和操作系统有关 --- 64位（1.4G）32位（0.7G）\n- 64位下 新生代（64MB） 老生代（1400MB）\n- 32位下 新生代（16MB） 老生代（700MB）\n\n为什么不占多一点内存\n- js设计之初是为浏览器\n  - 前端特点 --- 不持久化，执行一遍就回收了，所以1.4G够用了\n  - js回收内存会暂停执行代码\n\n### 垃圾回收算法\n新生代简单的说就是***复制***\n- 新生代用来放新产生的变量，根据条件放到老生代，有用的放到to里（把有用的留一边，清空另一边，往复进行）\n- 算法复杂度（时间复杂度，空间复杂度）---- 牺牲空间换时间\n\n老生代就是***标记、删除、整理***\n- 为什么要整理\n  - 数组是需要连续的空间\n\n新生代如何晋升到老生代\n- 变量是否经过回收，第二次回收放到老生代，第一次回收放到To\n- To空间使用了25%，放到老生代\n\n### V8是如何处理变量的\n``` js\n// 浏览器查看内存\nwindow.performance\n// nodejs查看内存 --- nodejs是c++的，可以拓宽内存\nprocess.memoryUsage()\n\n// 拿内存的方法\nfunction getMem(){\n\tvar mem = process.memoryUsage();\n\tvar format = function(bytes){\n\t\treturn (bytes/1024/1024).toFixed(2)+'MB';\n\t}\n\tconsole.log('heapTotal:'+format(mem.heapTotal)+'heapUsed:'+format(mem.heapUsed))\n}\n```\n### 变量处理\n- 内存主要就是存储变量等数据的\n- 局部变量当程序执行结束，且没有引用的时候就会随着消失 --- 可以被回收但不是说会马上回收\n- 全局对象会始终存活到程序运行结束\n\n# 如何查看V8内存使用情况\n## 如何注意内存使用\n### 优化内存的技巧\n- 尽量不要定义全局变量\n- 全局变量记得手动销毁掉\n  - 不推荐开发时写delete -- 支持有问题，严格模式有bug\n  - 赋值为 undefined/null  undefined 是变量 null 是保留字\n- 用匿名自执行函数变全局为局部\n  - `(function(){})()` \n- 尽量避免使用闭包 ---- 错误的观点，ie5时代的问题 ---- 尽量避免使用闭包引用\n\n闭包\n``` js\nfunction a(){\n\tvar size = 20*1024*1024;\n\tvar arr1 = new Array(size)\n\treturn arr1\n}\na() // 这样就没问题\nvar b = a() // 因为引用所以无法销毁\n```\n### 防止内存泄漏\n- 滥用缓存\n- 大内存量操作\n\n所有的优化都可以用缓存来解决，缓存通常都在全局，缓存可以直接拿来用；\n``` js\nvar 20*1024*1024;\nvar a = []\nfor(var i=0;i<13;i++){\n\ta.push(new Array(size))\n}\n\n// 加缓存锁\nfor(var i=0;i<13;i++){\n\tif(a.length>4){\n\t\ta.shift();\n\t}\n\ta.push(new Array(size))\n}\n```\n- 不要用v8来缓存\n  - 一定要用要的话加锁\n\nnodejs中读取大文件要用流的形式，不要用读文件到buffer\nfs.readFile()\nfs.createReadStream()\n\n浏览器中，大文件上传记得切片\nfile.slice(0,1000)\nfile.slice(1000,2000)\n","source":"_posts/V8-engine-memory-management-and-optimization.md","raw":"---\ntitle: v8引擎如何回收内存（笔记）\ndate: 2020-02-23 16:00:00\ncategories: \n\t- 前端技术\ntags:\n\t- 内存回收\n---\n> 作者：李旭光\n> 引用请标明出处\n\n# V8引擎如何回收垃圾\n## 为什么我们要关注内存\n- 防止页面占用内存过大，引起客户端卡顿，甚至无响应\n- Node使用的也是v8，内存对于后端服务的性能至关重要。因为服务的持久性，后端更容易造成内存溢出\n## v8引擎的内存回收机制\n### v8的内存分配\n新生代内存空间\n- from\n- to\n老生代内存空间\n### 内存大小\n- 和操作系统有关 --- 64位（1.4G）32位（0.7G）\n- 64位下 新生代（64MB） 老生代（1400MB）\n- 32位下 新生代（16MB） 老生代（700MB）\n\n为什么不占多一点内存\n- js设计之初是为浏览器\n  - 前端特点 --- 不持久化，执行一遍就回收了，所以1.4G够用了\n  - js回收内存会暂停执行代码\n\n### 垃圾回收算法\n新生代简单的说就是***复制***\n- 新生代用来放新产生的变量，根据条件放到老生代，有用的放到to里（把有用的留一边，清空另一边，往复进行）\n- 算法复杂度（时间复杂度，空间复杂度）---- 牺牲空间换时间\n\n老生代就是***标记、删除、整理***\n- 为什么要整理\n  - 数组是需要连续的空间\n\n新生代如何晋升到老生代\n- 变量是否经过回收，第二次回收放到老生代，第一次回收放到To\n- To空间使用了25%，放到老生代\n\n### V8是如何处理变量的\n``` js\n// 浏览器查看内存\nwindow.performance\n// nodejs查看内存 --- nodejs是c++的，可以拓宽内存\nprocess.memoryUsage()\n\n// 拿内存的方法\nfunction getMem(){\n\tvar mem = process.memoryUsage();\n\tvar format = function(bytes){\n\t\treturn (bytes/1024/1024).toFixed(2)+'MB';\n\t}\n\tconsole.log('heapTotal:'+format(mem.heapTotal)+'heapUsed:'+format(mem.heapUsed))\n}\n```\n### 变量处理\n- 内存主要就是存储变量等数据的\n- 局部变量当程序执行结束，且没有引用的时候就会随着消失 --- 可以被回收但不是说会马上回收\n- 全局对象会始终存活到程序运行结束\n\n# 如何查看V8内存使用情况\n## 如何注意内存使用\n### 优化内存的技巧\n- 尽量不要定义全局变量\n- 全局变量记得手动销毁掉\n  - 不推荐开发时写delete -- 支持有问题，严格模式有bug\n  - 赋值为 undefined/null  undefined 是变量 null 是保留字\n- 用匿名自执行函数变全局为局部\n  - `(function(){})()` \n- 尽量避免使用闭包 ---- 错误的观点，ie5时代的问题 ---- 尽量避免使用闭包引用\n\n闭包\n``` js\nfunction a(){\n\tvar size = 20*1024*1024;\n\tvar arr1 = new Array(size)\n\treturn arr1\n}\na() // 这样就没问题\nvar b = a() // 因为引用所以无法销毁\n```\n### 防止内存泄漏\n- 滥用缓存\n- 大内存量操作\n\n所有的优化都可以用缓存来解决，缓存通常都在全局，缓存可以直接拿来用；\n``` js\nvar 20*1024*1024;\nvar a = []\nfor(var i=0;i<13;i++){\n\ta.push(new Array(size))\n}\n\n// 加缓存锁\nfor(var i=0;i<13;i++){\n\tif(a.length>4){\n\t\ta.shift();\n\t}\n\ta.push(new Array(size))\n}\n```\n- 不要用v8来缓存\n  - 一定要用要的话加锁\n\nnodejs中读取大文件要用流的形式，不要用读文件到buffer\nfs.readFile()\nfs.createReadStream()\n\n浏览器中，大文件上传记得切片\nfile.slice(0,1000)\nfile.slice(1000,2000)\n","slug":"V8-engine-memory-management-and-optimization","published":1,"updated":"2020-02-23T07:57:18.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs0t003kooa6hg7qg2kb","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"V8引擎如何回收垃圾\"><a href=\"#V8引擎如何回收垃圾\" class=\"headerlink\" title=\"V8引擎如何回收垃圾\"></a>V8引擎如何回收垃圾</h1><h2 id=\"为什么我们要关注内存\"><a href=\"#为什么我们要关注内存\" class=\"headerlink\" title=\"为什么我们要关注内存\"></a>为什么我们要关注内存</h2><ul>\n<li>防止页面占用内存过大，引起客户端卡顿，甚至无响应</li>\n<li>Node使用的也是v8，内存对于后端服务的性能至关重要。因为服务的持久性，后端更容易造成内存溢出<h2 id=\"v8引擎的内存回收机制\"><a href=\"#v8引擎的内存回收机制\" class=\"headerlink\" title=\"v8引擎的内存回收机制\"></a>v8引擎的内存回收机制</h2><h3 id=\"v8的内存分配\"><a href=\"#v8的内存分配\" class=\"headerlink\" title=\"v8的内存分配\"></a>v8的内存分配</h3>新生代内存空间</li>\n<li>from</li>\n<li>to<br>老生代内存空间<h3 id=\"内存大小\"><a href=\"#内存大小\" class=\"headerlink\" title=\"内存大小\"></a>内存大小</h3></li>\n<li>和操作系统有关 — 64位（1.4G）32位（0.7G）</li>\n<li>64位下 新生代（64MB） 老生代（1400MB）</li>\n<li>32位下 新生代（16MB） 老生代（700MB）</li>\n</ul>\n<p>为什么不占多一点内存</p>\n<ul>\n<li>js设计之初是为浏览器<ul>\n<li>前端特点 — 不持久化，执行一遍就回收了，所以1.4G够用了</li>\n<li>js回收内存会暂停执行代码</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"垃圾回收算法\"><a href=\"#垃圾回收算法\" class=\"headerlink\" title=\"垃圾回收算法\"></a>垃圾回收算法</h3><p>新生代简单的说就是<strong><em>复制</em></strong></p>\n<ul>\n<li>新生代用来放新产生的变量，根据条件放到老生代，有用的放到to里（把有用的留一边，清空另一边，往复进行）</li>\n<li>算法复杂度（时间复杂度，空间复杂度）—- 牺牲空间换时间</li>\n</ul>\n<p>老生代就是<strong><em>标记、删除、整理</em></strong></p>\n<ul>\n<li>为什么要整理<ul>\n<li>数组是需要连续的空间</li>\n</ul>\n</li>\n</ul>\n<p>新生代如何晋升到老生代</p>\n<ul>\n<li>变量是否经过回收，第二次回收放到老生代，第一次回收放到To</li>\n<li>To空间使用了25%，放到老生代</li>\n</ul>\n<h3 id=\"V8是如何处理变量的\"><a href=\"#V8是如何处理变量的\" class=\"headerlink\" title=\"V8是如何处理变量的\"></a>V8是如何处理变量的</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 浏览器查看内存</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.performance</span><br><span class=\"line\"><span class=\"comment\">// nodejs查看内存 --- nodejs是c++的，可以拓宽内存</span></span><br><span class=\"line\">process.memoryUsage()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拿内存的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMem</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mem = process.memoryUsage();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> format = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bytes</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (bytes/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>).toFixed(<span class=\"number\">2</span>)+<span class=\"string\">'MB'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'heapTotal:'</span>+format(mem.heapTotal)+<span class=\"string\">'heapUsed:'</span>+format(mem.heapUsed))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"变量处理\"><a href=\"#变量处理\" class=\"headerlink\" title=\"变量处理\"></a>变量处理</h3><ul>\n<li>内存主要就是存储变量等数据的</li>\n<li>局部变量当程序执行结束，且没有引用的时候就会随着消失 — 可以被回收但不是说会马上回收</li>\n<li>全局对象会始终存活到程序运行结束</li>\n</ul>\n<h1 id=\"如何查看V8内存使用情况\"><a href=\"#如何查看V8内存使用情况\" class=\"headerlink\" title=\"如何查看V8内存使用情况\"></a>如何查看V8内存使用情况</h1><h2 id=\"如何注意内存使用\"><a href=\"#如何注意内存使用\" class=\"headerlink\" title=\"如何注意内存使用\"></a>如何注意内存使用</h2><h3 id=\"优化内存的技巧\"><a href=\"#优化内存的技巧\" class=\"headerlink\" title=\"优化内存的技巧\"></a>优化内存的技巧</h3><ul>\n<li>尽量不要定义全局变量</li>\n<li>全局变量记得手动销毁掉<ul>\n<li>不推荐开发时写delete – 支持有问题，严格模式有bug</li>\n<li>赋值为 undefined/null  undefined 是变量 null 是保留字</li>\n</ul>\n</li>\n<li>用匿名自执行函数变全局为局部<ul>\n<li><code>(function(){})()</code> </li>\n</ul>\n</li>\n<li>尽量避免使用闭包 —- 错误的观点，ie5时代的问题 —- 尽量避免使用闭包引用</li>\n</ul>\n<p>闭包</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> size = <span class=\"number\">20</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(size)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> arr1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a() <span class=\"comment\">// 这样就没问题</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a() <span class=\"comment\">// 因为引用所以无法销毁</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"防止内存泄漏\"><a href=\"#防止内存泄漏\" class=\"headerlink\" title=\"防止内存泄漏\"></a>防止内存泄漏</h3><ul>\n<li>滥用缓存</li>\n<li>大内存量操作</li>\n</ul>\n<p>所有的优化都可以用缓存来解决，缓存通常都在全局，缓存可以直接拿来用；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"number\">20</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = []</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">13</span>;i++)&#123;</span><br><span class=\"line\">\ta.push(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(size))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加缓存锁</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">13</span>;i++)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a.length&gt;<span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">\t\ta.shift();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta.push(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(size))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>不要用v8来缓存<ul>\n<li>一定要用要的话加锁</li>\n</ul>\n</li>\n</ul>\n<p>nodejs中读取大文件要用流的形式，不要用读文件到buffer<br>fs.readFile()<br>fs.createReadStream()</p>\n<p>浏览器中，大文件上传记得切片<br>file.slice(0,1000)<br>file.slice(1000,2000)</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"V8引擎如何回收垃圾\"><a href=\"#V8引擎如何回收垃圾\" class=\"headerlink\" title=\"V8引擎如何回收垃圾\"></a>V8引擎如何回收垃圾</h1><h2 id=\"为什么我们要关注内存\"><a href=\"#为什么我们要关注内存\" class=\"headerlink\" title=\"为什么我们要关注内存\"></a>为什么我们要关注内存</h2><ul>\n<li>防止页面占用内存过大，引起客户端卡顿，甚至无响应</li>\n<li>Node使用的也是v8，内存对于后端服务的性能至关重要。因为服务的持久性，后端更容易造成内存溢出<h2 id=\"v8引擎的内存回收机制\"><a href=\"#v8引擎的内存回收机制\" class=\"headerlink\" title=\"v8引擎的内存回收机制\"></a>v8引擎的内存回收机制</h2><h3 id=\"v8的内存分配\"><a href=\"#v8的内存分配\" class=\"headerlink\" title=\"v8的内存分配\"></a>v8的内存分配</h3>新生代内存空间</li>\n<li>from</li>\n<li>to<br>老生代内存空间<h3 id=\"内存大小\"><a href=\"#内存大小\" class=\"headerlink\" title=\"内存大小\"></a>内存大小</h3></li>\n<li>和操作系统有关 — 64位（1.4G）32位（0.7G）</li>\n<li>64位下 新生代（64MB） 老生代（1400MB）</li>\n<li>32位下 新生代（16MB） 老生代（700MB）</li>\n</ul>\n<p>为什么不占多一点内存</p>\n<ul>\n<li>js设计之初是为浏览器<ul>\n<li>前端特点 — 不持久化，执行一遍就回收了，所以1.4G够用了</li>\n<li>js回收内存会暂停执行代码</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"垃圾回收算法\"><a href=\"#垃圾回收算法\" class=\"headerlink\" title=\"垃圾回收算法\"></a>垃圾回收算法</h3><p>新生代简单的说就是<strong><em>复制</em></strong></p>\n<ul>\n<li>新生代用来放新产生的变量，根据条件放到老生代，有用的放到to里（把有用的留一边，清空另一边，往复进行）</li>\n<li>算法复杂度（时间复杂度，空间复杂度）—- 牺牲空间换时间</li>\n</ul>\n<p>老生代就是<strong><em>标记、删除、整理</em></strong></p>\n<ul>\n<li>为什么要整理<ul>\n<li>数组是需要连续的空间</li>\n</ul>\n</li>\n</ul>\n<p>新生代如何晋升到老生代</p>\n<ul>\n<li>变量是否经过回收，第二次回收放到老生代，第一次回收放到To</li>\n<li>To空间使用了25%，放到老生代</li>\n</ul>\n<h3 id=\"V8是如何处理变量的\"><a href=\"#V8是如何处理变量的\" class=\"headerlink\" title=\"V8是如何处理变量的\"></a>V8是如何处理变量的</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 浏览器查看内存</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.performance</span><br><span class=\"line\"><span class=\"comment\">// nodejs查看内存 --- nodejs是c++的，可以拓宽内存</span></span><br><span class=\"line\">process.memoryUsage()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拿内存的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMem</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mem = process.memoryUsage();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> format = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bytes</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (bytes/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>).toFixed(<span class=\"number\">2</span>)+<span class=\"string\">'MB'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'heapTotal:'</span>+format(mem.heapTotal)+<span class=\"string\">'heapUsed:'</span>+format(mem.heapUsed))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"变量处理\"><a href=\"#变量处理\" class=\"headerlink\" title=\"变量处理\"></a>变量处理</h3><ul>\n<li>内存主要就是存储变量等数据的</li>\n<li>局部变量当程序执行结束，且没有引用的时候就会随着消失 — 可以被回收但不是说会马上回收</li>\n<li>全局对象会始终存活到程序运行结束</li>\n</ul>\n<h1 id=\"如何查看V8内存使用情况\"><a href=\"#如何查看V8内存使用情况\" class=\"headerlink\" title=\"如何查看V8内存使用情况\"></a>如何查看V8内存使用情况</h1><h2 id=\"如何注意内存使用\"><a href=\"#如何注意内存使用\" class=\"headerlink\" title=\"如何注意内存使用\"></a>如何注意内存使用</h2><h3 id=\"优化内存的技巧\"><a href=\"#优化内存的技巧\" class=\"headerlink\" title=\"优化内存的技巧\"></a>优化内存的技巧</h3><ul>\n<li>尽量不要定义全局变量</li>\n<li>全局变量记得手动销毁掉<ul>\n<li>不推荐开发时写delete – 支持有问题，严格模式有bug</li>\n<li>赋值为 undefined/null  undefined 是变量 null 是保留字</li>\n</ul>\n</li>\n<li>用匿名自执行函数变全局为局部<ul>\n<li><code>(function(){})()</code> </li>\n</ul>\n</li>\n<li>尽量避免使用闭包 —- 错误的观点，ie5时代的问题 —- 尽量避免使用闭包引用</li>\n</ul>\n<p>闭包</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> size = <span class=\"number\">20</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(size)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> arr1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a() <span class=\"comment\">// 这样就没问题</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a() <span class=\"comment\">// 因为引用所以无法销毁</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"防止内存泄漏\"><a href=\"#防止内存泄漏\" class=\"headerlink\" title=\"防止内存泄漏\"></a>防止内存泄漏</h3><ul>\n<li>滥用缓存</li>\n<li>大内存量操作</li>\n</ul>\n<p>所有的优化都可以用缓存来解决，缓存通常都在全局，缓存可以直接拿来用；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"number\">20</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = []</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">13</span>;i++)&#123;</span><br><span class=\"line\">\ta.push(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(size))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加缓存锁</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">13</span>;i++)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a.length&gt;<span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">\t\ta.shift();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta.push(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(size))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>不要用v8来缓存<ul>\n<li>一定要用要的话加锁</li>\n</ul>\n</li>\n</ul>\n<p>nodejs中读取大文件要用流的形式，不要用读文件到buffer<br>fs.readFile()<br>fs.createReadStream()</p>\n<p>浏览器中，大文件上传记得切片<br>file.slice(0,1000)<br>file.slice(1000,2000)</p>\n"},{"title":"VSCode ESLint JS代码静态检测工具","date":"2017-10-12T06:42:52.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\nVSCode是新一代IDE，方便灵活的插件安装方式让它强大无比，对前端友好，让它成为了越来越多前端开发者的首选IDE，编辑器虽好，但是要自己安装符合自己需求的插件才行，下面介绍一款插件，名叫ESLint，是用来静态检测js代码的工具，让你的js代码在编辑过程中就能找到错误，提高代码质量，好了废话不多说下面介绍如何安装和配置这款插件。\n<!-- more -->\n# 安装ESLint插件\n打开VSCode编辑器，在左侧右下角有一个安装插件的图标，点击后就可以打开插件市场，输入ESLint，就会有个黄色的图标出现在你面前，不用犹豫双击它，稍等一会它就安装完了，是不是超简单。\n# 安装NPM依赖\nESLint插件运行需要一些依赖，对于用过npm包管理工具的人来讲小意思啦，我把代码放到下面，需要的直接粘贴运行就好。\n\n```\n//全局安装eslint\nnpm i eslint -g\n\n//如果用到html中的js校验\nnpm i eslint-plugin-html -g\n\n//如果用到es2015语法\nnpm i babel-eslint -g\n```\n# 配置eslint配置文件到项目根目录\n配置文件名称如下：\n**eslintrc.json**\n内容为：\n\n```\n{\n        \"plugins\": [\n                // \"react\",\n                \"html\"\n        ],\n        \"env\": {\n                \"node\": true,\n                \"jquery\": true,\n                \"es6\": true,\n                \"browser\": true\n        },\n        \"globals\": {\n                \"angular\": false\n        },\n        \"parser\": \"babel-eslint\",\n        \"rules\": {\n                //官方文档 http://eslint.org/docs/rules/\n                //参数：0 关闭，1 警告，2 错误\n                // \"quotes\": [0, \"single\"],                  //建议使用单引号\n                // \"no-inner-declarations\": [0, \"both\"],     //不建议在{}代码块内部声明变量或函数\n                \"no-extra-boolean-cast\": 1, //多余的感叹号转布尔型\n                \"no-extra-semi\": 1, //多余的分号\n                \"no-extra-parens\": 0, //多余的括号\n                \"no-empty\": 1, //空代码块\n \n                //使用前未定义\n                \"no-use-before-define\": [\n                        0,\n                        \"nofunc\"\n                ],\n \n                \"complexity\": [0, 10], //圈复杂度大于*\n \n                //定义数组或对象最后多余的逗号\n                \"comma-dangle\": [\n                        0,\n                        \"never\"\n                ],\n \n                // 不允许对全局变量赋值,如 window = 'abc'\n                \"no-global-assign\": [\"error\", {\n                        // 定义例外\n                        // \"exceptions\": [\"Object\"]\n                }],\n                \"no-var\": 0, //用let或const替代var\n                \"no-const-assign\": 2, //不允许const重新赋值\n                \"no-class-assign\": 2, //不允许对class重新赋值\n                \"no-debugger\": 1, //debugger 调试代码未删除\n                \"no-console\": 0, //console 未删除\n                \"no-constant-condition\": 2, //常量作为条件\n                \"no-dupe-args\": 2, //参数重复\n                \"no-dupe-keys\": 2, //对象属性重复\n                \"no-duplicate-case\": 2, //case重复\n                \"no-empty-character-class\": 2, //正则无法匹配任何值\n                \"no-invalid-regexp\": 2, //无效的正则\n                \"no-func-assign\": 2, //函数被赋值\n                \"valid-typeof\": 1, //无效的类型判断\n                \"no-unreachable\": 2, //不可能执行到的代码\n                \"no-unexpected-multiline\": 2, //行尾缺少分号可能导致一些意外情况\n                \"no-sparse-arrays\": 1, //数组中多出逗号\n                \"no-shadow-restricted-names\": 2, //关键词与命名冲突\n                \"no-undef\": 1, //变量未定义\n                \"no-unused-vars\": 1, //变量定义后未使用\n                \"no-cond-assign\": 2, //条件语句中禁止赋值操作\n                \"no-native-reassign\": 2, //禁止覆盖原生对象\n                \"no-mixed-spaces-and-tabs\": 0,\n \n \n \n                //代码风格优化 --------------------------------------\n                \"no-irregular-whitespace\": 0,\n                \"no-else-return\": 0, //在else代码块中return，else是多余的\n                \"no-multi-spaces\": 0, //不允许多个空格\n \n                //object直接量建议写法 : 后一个空格前面不留空格\n                \"key-spacing\": [\n                        0,\n                        {\n                                \"beforeColon\": false,\n                                \"afterColon\": true\n                        }\n                ],\n \n                \"block-scoped-var\": 1, //变量应在外部上下文中声明，不应在{}代码块中\n                \"consistent-return\": 1, //函数返回值可能是不同类型\n                \"accessor-pairs\": 1, //object getter/setter方法需要成对出现\n \n                //换行调用对象方法  点操作符应写在行首\n                \"dot-location\": [\n                        1,\n                        \"property\"\n                ],\n                \"no-lone-blocks\": 1, //多余的{}嵌套\n                \"no-labels\": 1, //无用的标记\n                \"no-extend-native\": 1, //禁止扩展原生对象\n                \"no-floating-decimal\": 1, //浮点型需要写全 禁止.1 或 2.写法\n                \"no-loop-func\": 1, //禁止在循环体中定义函数\n                \"no-new-func\": 1, //禁止new Function(...) 写法\n                \"no-self-compare\": 1, //不允与自己比较作为条件\n                \"no-sequences\": 1, //禁止可能导致结果不明确的逗号操作符\n                \"no-throw-literal\": 1, //禁止抛出一个直接量 应是Error对象\n \n                //不允return时有赋值操作\n                \"no-return-assign\": [\n                        1,\n                        \"always\"\n                ],\n \n                //不允许重复声明\n                \"no-redeclare\": [\n                        1,\n                        {\n                                \"builtinGlobals\": true\n                        }\n                ],\n \n                //不执行的表达式\n                \"no-unused-expressions\": [\n                        0,\n                        {\n                                \"allowShortCircuit\": true,\n                                \"allowTernary\": true\n                        }\n                ],\n                \"no-useless-call\": 1, //无意义的函数call或apply\n                \"no-useless-concat\": 1, //无意义的string concat\n                \"no-void\": 1, //禁用void\n                \"no-with\": 1, //禁用with\n                \"space-infix-ops\": 0, //操作符前后空格\n \n                //jsdoc\n                \"valid-jsdoc\": [\n                        0,\n                        {\n                                \"requireParamDescription\": true,\n                                \"requireReturnDescription\": true\n                        }\n                ],\n \n                //标记未写注释\n                \"no-warning-comments\": [\n                        1,\n                        {\n                                \"terms\": [\n                                        \"todo\",\n                                        \"fixme\",\n                                        \"any other term\"\n                                ],\n                                \"location\": \"anywhere\"\n                        }\n                ],\n                \"curly\": 0 //if、else、while、for代码块用{}包围\n        }\n}\n```\neslint就是根据这个配置表来进行js语法校验的。\n# 最后重启VSCode完成插件安装\n重启后控制台显示ESLint server is running说明插件已经生效，好啦接下来就愉快的写代码吧。","source":"_posts/VSCode-ESLint.md","raw":"---\ntitle: VSCode ESLint JS代码静态检测工具\ndate: 2017-10-12 14:42:52\ncategories: \n\t- 效率工具\n\t- VSCode插件\ntags: \n\t- VSCode\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\nVSCode是新一代IDE，方便灵活的插件安装方式让它强大无比，对前端友好，让它成为了越来越多前端开发者的首选IDE，编辑器虽好，但是要自己安装符合自己需求的插件才行，下面介绍一款插件，名叫ESLint，是用来静态检测js代码的工具，让你的js代码在编辑过程中就能找到错误，提高代码质量，好了废话不多说下面介绍如何安装和配置这款插件。\n<!-- more -->\n# 安装ESLint插件\n打开VSCode编辑器，在左侧右下角有一个安装插件的图标，点击后就可以打开插件市场，输入ESLint，就会有个黄色的图标出现在你面前，不用犹豫双击它，稍等一会它就安装完了，是不是超简单。\n# 安装NPM依赖\nESLint插件运行需要一些依赖，对于用过npm包管理工具的人来讲小意思啦，我把代码放到下面，需要的直接粘贴运行就好。\n\n```\n//全局安装eslint\nnpm i eslint -g\n\n//如果用到html中的js校验\nnpm i eslint-plugin-html -g\n\n//如果用到es2015语法\nnpm i babel-eslint -g\n```\n# 配置eslint配置文件到项目根目录\n配置文件名称如下：\n**eslintrc.json**\n内容为：\n\n```\n{\n        \"plugins\": [\n                // \"react\",\n                \"html\"\n        ],\n        \"env\": {\n                \"node\": true,\n                \"jquery\": true,\n                \"es6\": true,\n                \"browser\": true\n        },\n        \"globals\": {\n                \"angular\": false\n        },\n        \"parser\": \"babel-eslint\",\n        \"rules\": {\n                //官方文档 http://eslint.org/docs/rules/\n                //参数：0 关闭，1 警告，2 错误\n                // \"quotes\": [0, \"single\"],                  //建议使用单引号\n                // \"no-inner-declarations\": [0, \"both\"],     //不建议在{}代码块内部声明变量或函数\n                \"no-extra-boolean-cast\": 1, //多余的感叹号转布尔型\n                \"no-extra-semi\": 1, //多余的分号\n                \"no-extra-parens\": 0, //多余的括号\n                \"no-empty\": 1, //空代码块\n \n                //使用前未定义\n                \"no-use-before-define\": [\n                        0,\n                        \"nofunc\"\n                ],\n \n                \"complexity\": [0, 10], //圈复杂度大于*\n \n                //定义数组或对象最后多余的逗号\n                \"comma-dangle\": [\n                        0,\n                        \"never\"\n                ],\n \n                // 不允许对全局变量赋值,如 window = 'abc'\n                \"no-global-assign\": [\"error\", {\n                        // 定义例外\n                        // \"exceptions\": [\"Object\"]\n                }],\n                \"no-var\": 0, //用let或const替代var\n                \"no-const-assign\": 2, //不允许const重新赋值\n                \"no-class-assign\": 2, //不允许对class重新赋值\n                \"no-debugger\": 1, //debugger 调试代码未删除\n                \"no-console\": 0, //console 未删除\n                \"no-constant-condition\": 2, //常量作为条件\n                \"no-dupe-args\": 2, //参数重复\n                \"no-dupe-keys\": 2, //对象属性重复\n                \"no-duplicate-case\": 2, //case重复\n                \"no-empty-character-class\": 2, //正则无法匹配任何值\n                \"no-invalid-regexp\": 2, //无效的正则\n                \"no-func-assign\": 2, //函数被赋值\n                \"valid-typeof\": 1, //无效的类型判断\n                \"no-unreachable\": 2, //不可能执行到的代码\n                \"no-unexpected-multiline\": 2, //行尾缺少分号可能导致一些意外情况\n                \"no-sparse-arrays\": 1, //数组中多出逗号\n                \"no-shadow-restricted-names\": 2, //关键词与命名冲突\n                \"no-undef\": 1, //变量未定义\n                \"no-unused-vars\": 1, //变量定义后未使用\n                \"no-cond-assign\": 2, //条件语句中禁止赋值操作\n                \"no-native-reassign\": 2, //禁止覆盖原生对象\n                \"no-mixed-spaces-and-tabs\": 0,\n \n \n \n                //代码风格优化 --------------------------------------\n                \"no-irregular-whitespace\": 0,\n                \"no-else-return\": 0, //在else代码块中return，else是多余的\n                \"no-multi-spaces\": 0, //不允许多个空格\n \n                //object直接量建议写法 : 后一个空格前面不留空格\n                \"key-spacing\": [\n                        0,\n                        {\n                                \"beforeColon\": false,\n                                \"afterColon\": true\n                        }\n                ],\n \n                \"block-scoped-var\": 1, //变量应在外部上下文中声明，不应在{}代码块中\n                \"consistent-return\": 1, //函数返回值可能是不同类型\n                \"accessor-pairs\": 1, //object getter/setter方法需要成对出现\n \n                //换行调用对象方法  点操作符应写在行首\n                \"dot-location\": [\n                        1,\n                        \"property\"\n                ],\n                \"no-lone-blocks\": 1, //多余的{}嵌套\n                \"no-labels\": 1, //无用的标记\n                \"no-extend-native\": 1, //禁止扩展原生对象\n                \"no-floating-decimal\": 1, //浮点型需要写全 禁止.1 或 2.写法\n                \"no-loop-func\": 1, //禁止在循环体中定义函数\n                \"no-new-func\": 1, //禁止new Function(...) 写法\n                \"no-self-compare\": 1, //不允与自己比较作为条件\n                \"no-sequences\": 1, //禁止可能导致结果不明确的逗号操作符\n                \"no-throw-literal\": 1, //禁止抛出一个直接量 应是Error对象\n \n                //不允return时有赋值操作\n                \"no-return-assign\": [\n                        1,\n                        \"always\"\n                ],\n \n                //不允许重复声明\n                \"no-redeclare\": [\n                        1,\n                        {\n                                \"builtinGlobals\": true\n                        }\n                ],\n \n                //不执行的表达式\n                \"no-unused-expressions\": [\n                        0,\n                        {\n                                \"allowShortCircuit\": true,\n                                \"allowTernary\": true\n                        }\n                ],\n                \"no-useless-call\": 1, //无意义的函数call或apply\n                \"no-useless-concat\": 1, //无意义的string concat\n                \"no-void\": 1, //禁用void\n                \"no-with\": 1, //禁用with\n                \"space-infix-ops\": 0, //操作符前后空格\n \n                //jsdoc\n                \"valid-jsdoc\": [\n                        0,\n                        {\n                                \"requireParamDescription\": true,\n                                \"requireReturnDescription\": true\n                        }\n                ],\n \n                //标记未写注释\n                \"no-warning-comments\": [\n                        1,\n                        {\n                                \"terms\": [\n                                        \"todo\",\n                                        \"fixme\",\n                                        \"any other term\"\n                                ],\n                                \"location\": \"anywhere\"\n                        }\n                ],\n                \"curly\": 0 //if、else、while、for代码块用{}包围\n        }\n}\n```\neslint就是根据这个配置表来进行js语法校验的。\n# 最后重启VSCode完成插件安装\n重启后控制台显示ESLint server is running说明插件已经生效，好啦接下来就愉快的写代码吧。","slug":"VSCode-ESLint","published":1,"updated":"2020-04-02T03:20:12.420Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs0v003oooa6euttecb6","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>VSCode是新一代IDE，方便灵活的插件安装方式让它强大无比，对前端友好，让它成为了越来越多前端开发者的首选IDE，编辑器虽好，但是要自己安装符合自己需求的插件才行，下面介绍一款插件，名叫ESLint，是用来静态检测js代码的工具，让你的js代码在编辑过程中就能找到错误，提高代码质量，好了废话不多说下面介绍如何安装和配置这款插件。</p>\n<a id=\"more\"></a>\n<h1 id=\"安装ESLint插件\"><a href=\"#安装ESLint插件\" class=\"headerlink\" title=\"安装ESLint插件\"></a>安装ESLint插件</h1><p>打开VSCode编辑器，在左侧右下角有一个安装插件的图标，点击后就可以打开插件市场，输入ESLint，就会有个黄色的图标出现在你面前，不用犹豫双击它，稍等一会它就安装完了，是不是超简单。</p>\n<h1 id=\"安装NPM依赖\"><a href=\"#安装NPM依赖\" class=\"headerlink\" title=\"安装NPM依赖\"></a>安装NPM依赖</h1><p>ESLint插件运行需要一些依赖，对于用过npm包管理工具的人来讲小意思啦，我把代码放到下面，需要的直接粘贴运行就好。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;全局安装eslint</span><br><span class=\"line\">npm i eslint -g</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;如果用到html中的js校验</span><br><span class=\"line\">npm i eslint-plugin-html -g</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;如果用到es2015语法</span><br><span class=\"line\">npm i babel-eslint -g</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置eslint配置文件到项目根目录\"><a href=\"#配置eslint配置文件到项目根目录\" class=\"headerlink\" title=\"配置eslint配置文件到项目根目录\"></a>配置eslint配置文件到项目根目录</h1><p>配置文件名称如下：<br><strong>eslintrc.json</strong><br>内容为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;plugins&quot;: [</span><br><span class=\"line\">                &#x2F;&#x2F; &quot;react&quot;,</span><br><span class=\"line\">                &quot;html&quot;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;env&quot;: &#123;</span><br><span class=\"line\">                &quot;node&quot;: true,</span><br><span class=\"line\">                &quot;jquery&quot;: true,</span><br><span class=\"line\">                &quot;es6&quot;: true,</span><br><span class=\"line\">                &quot;browser&quot;: true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;globals&quot;: &#123;</span><br><span class=\"line\">                &quot;angular&quot;: false</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;parser&quot;: &quot;babel-eslint&quot;,</span><br><span class=\"line\">        &quot;rules&quot;: &#123;</span><br><span class=\"line\">                &#x2F;&#x2F;官方文档 http:&#x2F;&#x2F;eslint.org&#x2F;docs&#x2F;rules&#x2F;</span><br><span class=\"line\">                &#x2F;&#x2F;参数：0 关闭，1 警告，2 错误</span><br><span class=\"line\">                &#x2F;&#x2F; &quot;quotes&quot;: [0, &quot;single&quot;],                  &#x2F;&#x2F;建议使用单引号</span><br><span class=\"line\">                &#x2F;&#x2F; &quot;no-inner-declarations&quot;: [0, &quot;both&quot;],     &#x2F;&#x2F;不建议在&#123;&#125;代码块内部声明变量或函数</span><br><span class=\"line\">                &quot;no-extra-boolean-cast&quot;: 1, &#x2F;&#x2F;多余的感叹号转布尔型</span><br><span class=\"line\">                &quot;no-extra-semi&quot;: 1, &#x2F;&#x2F;多余的分号</span><br><span class=\"line\">                &quot;no-extra-parens&quot;: 0, &#x2F;&#x2F;多余的括号</span><br><span class=\"line\">                &quot;no-empty&quot;: 1, &#x2F;&#x2F;空代码块</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;使用前未定义</span><br><span class=\"line\">                &quot;no-use-before-define&quot;: [</span><br><span class=\"line\">                        0,</span><br><span class=\"line\">                        &quot;nofunc&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &quot;complexity&quot;: [0, 10], &#x2F;&#x2F;圈复杂度大于*</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;定义数组或对象最后多余的逗号</span><br><span class=\"line\">                &quot;comma-dangle&quot;: [</span><br><span class=\"line\">                        0,</span><br><span class=\"line\">                        &quot;never&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F; 不允许对全局变量赋值,如 window &#x3D; &#39;abc&#39;</span><br><span class=\"line\">                &quot;no-global-assign&quot;: [&quot;error&quot;, &#123;</span><br><span class=\"line\">                        &#x2F;&#x2F; 定义例外</span><br><span class=\"line\">                        &#x2F;&#x2F; &quot;exceptions&quot;: [&quot;Object&quot;]</span><br><span class=\"line\">                &#125;],</span><br><span class=\"line\">                &quot;no-var&quot;: 0, &#x2F;&#x2F;用let或const替代var</span><br><span class=\"line\">                &quot;no-const-assign&quot;: 2, &#x2F;&#x2F;不允许const重新赋值</span><br><span class=\"line\">                &quot;no-class-assign&quot;: 2, &#x2F;&#x2F;不允许对class重新赋值</span><br><span class=\"line\">                &quot;no-debugger&quot;: 1, &#x2F;&#x2F;debugger 调试代码未删除</span><br><span class=\"line\">                &quot;no-console&quot;: 0, &#x2F;&#x2F;console 未删除</span><br><span class=\"line\">                &quot;no-constant-condition&quot;: 2, &#x2F;&#x2F;常量作为条件</span><br><span class=\"line\">                &quot;no-dupe-args&quot;: 2, &#x2F;&#x2F;参数重复</span><br><span class=\"line\">                &quot;no-dupe-keys&quot;: 2, &#x2F;&#x2F;对象属性重复</span><br><span class=\"line\">                &quot;no-duplicate-case&quot;: 2, &#x2F;&#x2F;case重复</span><br><span class=\"line\">                &quot;no-empty-character-class&quot;: 2, &#x2F;&#x2F;正则无法匹配任何值</span><br><span class=\"line\">                &quot;no-invalid-regexp&quot;: 2, &#x2F;&#x2F;无效的正则</span><br><span class=\"line\">                &quot;no-func-assign&quot;: 2, &#x2F;&#x2F;函数被赋值</span><br><span class=\"line\">                &quot;valid-typeof&quot;: 1, &#x2F;&#x2F;无效的类型判断</span><br><span class=\"line\">                &quot;no-unreachable&quot;: 2, &#x2F;&#x2F;不可能执行到的代码</span><br><span class=\"line\">                &quot;no-unexpected-multiline&quot;: 2, &#x2F;&#x2F;行尾缺少分号可能导致一些意外情况</span><br><span class=\"line\">                &quot;no-sparse-arrays&quot;: 1, &#x2F;&#x2F;数组中多出逗号</span><br><span class=\"line\">                &quot;no-shadow-restricted-names&quot;: 2, &#x2F;&#x2F;关键词与命名冲突</span><br><span class=\"line\">                &quot;no-undef&quot;: 1, &#x2F;&#x2F;变量未定义</span><br><span class=\"line\">                &quot;no-unused-vars&quot;: 1, &#x2F;&#x2F;变量定义后未使用</span><br><span class=\"line\">                &quot;no-cond-assign&quot;: 2, &#x2F;&#x2F;条件语句中禁止赋值操作</span><br><span class=\"line\">                &quot;no-native-reassign&quot;: 2, &#x2F;&#x2F;禁止覆盖原生对象</span><br><span class=\"line\">                &quot;no-mixed-spaces-and-tabs&quot;: 0,</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;代码风格优化 --------------------------------------</span><br><span class=\"line\">                &quot;no-irregular-whitespace&quot;: 0,</span><br><span class=\"line\">                &quot;no-else-return&quot;: 0, &#x2F;&#x2F;在else代码块中return，else是多余的</span><br><span class=\"line\">                &quot;no-multi-spaces&quot;: 0, &#x2F;&#x2F;不允许多个空格</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;object直接量建议写法 : 后一个空格前面不留空格</span><br><span class=\"line\">                &quot;key-spacing&quot;: [</span><br><span class=\"line\">                        0,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                &quot;beforeColon&quot;: false,</span><br><span class=\"line\">                                &quot;afterColon&quot;: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &quot;block-scoped-var&quot;: 1, &#x2F;&#x2F;变量应在外部上下文中声明，不应在&#123;&#125;代码块中</span><br><span class=\"line\">                &quot;consistent-return&quot;: 1, &#x2F;&#x2F;函数返回值可能是不同类型</span><br><span class=\"line\">                &quot;accessor-pairs&quot;: 1, &#x2F;&#x2F;object getter&#x2F;setter方法需要成对出现</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;换行调用对象方法  点操作符应写在行首</span><br><span class=\"line\">                &quot;dot-location&quot;: [</span><br><span class=\"line\">                        1,</span><br><span class=\"line\">                        &quot;property&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;no-lone-blocks&quot;: 1, &#x2F;&#x2F;多余的&#123;&#125;嵌套</span><br><span class=\"line\">                &quot;no-labels&quot;: 1, &#x2F;&#x2F;无用的标记</span><br><span class=\"line\">                &quot;no-extend-native&quot;: 1, &#x2F;&#x2F;禁止扩展原生对象</span><br><span class=\"line\">                &quot;no-floating-decimal&quot;: 1, &#x2F;&#x2F;浮点型需要写全 禁止.1 或 2.写法</span><br><span class=\"line\">                &quot;no-loop-func&quot;: 1, &#x2F;&#x2F;禁止在循环体中定义函数</span><br><span class=\"line\">                &quot;no-new-func&quot;: 1, &#x2F;&#x2F;禁止new Function(...) 写法</span><br><span class=\"line\">                &quot;no-self-compare&quot;: 1, &#x2F;&#x2F;不允与自己比较作为条件</span><br><span class=\"line\">                &quot;no-sequences&quot;: 1, &#x2F;&#x2F;禁止可能导致结果不明确的逗号操作符</span><br><span class=\"line\">                &quot;no-throw-literal&quot;: 1, &#x2F;&#x2F;禁止抛出一个直接量 应是Error对象</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;不允return时有赋值操作</span><br><span class=\"line\">                &quot;no-return-assign&quot;: [</span><br><span class=\"line\">                        1,</span><br><span class=\"line\">                        &quot;always&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;不允许重复声明</span><br><span class=\"line\">                &quot;no-redeclare&quot;: [</span><br><span class=\"line\">                        1,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                &quot;builtinGlobals&quot;: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;不执行的表达式</span><br><span class=\"line\">                &quot;no-unused-expressions&quot;: [</span><br><span class=\"line\">                        0,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                &quot;allowShortCircuit&quot;: true,</span><br><span class=\"line\">                                &quot;allowTernary&quot;: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;no-useless-call&quot;: 1, &#x2F;&#x2F;无意义的函数call或apply</span><br><span class=\"line\">                &quot;no-useless-concat&quot;: 1, &#x2F;&#x2F;无意义的string concat</span><br><span class=\"line\">                &quot;no-void&quot;: 1, &#x2F;&#x2F;禁用void</span><br><span class=\"line\">                &quot;no-with&quot;: 1, &#x2F;&#x2F;禁用with</span><br><span class=\"line\">                &quot;space-infix-ops&quot;: 0, &#x2F;&#x2F;操作符前后空格</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;jsdoc</span><br><span class=\"line\">                &quot;valid-jsdoc&quot;: [</span><br><span class=\"line\">                        0,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                &quot;requireParamDescription&quot;: true,</span><br><span class=\"line\">                                &quot;requireReturnDescription&quot;: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;标记未写注释</span><br><span class=\"line\">                &quot;no-warning-comments&quot;: [</span><br><span class=\"line\">                        1,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                &quot;terms&quot;: [</span><br><span class=\"line\">                                        &quot;todo&quot;,</span><br><span class=\"line\">                                        &quot;fixme&quot;,</span><br><span class=\"line\">                                        &quot;any other term&quot;</span><br><span class=\"line\">                                ],</span><br><span class=\"line\">                                &quot;location&quot;: &quot;anywhere&quot;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;curly&quot;: 0 &#x2F;&#x2F;if、else、while、for代码块用&#123;&#125;包围</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>eslint就是根据这个配置表来进行js语法校验的。</p>\n<h1 id=\"最后重启VSCode完成插件安装\"><a href=\"#最后重启VSCode完成插件安装\" class=\"headerlink\" title=\"最后重启VSCode完成插件安装\"></a>最后重启VSCode完成插件安装</h1><p>重启后控制台显示ESLint server is running说明插件已经生效，好啦接下来就愉快的写代码吧。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>VSCode是新一代IDE，方便灵活的插件安装方式让它强大无比，对前端友好，让它成为了越来越多前端开发者的首选IDE，编辑器虽好，但是要自己安装符合自己需求的插件才行，下面介绍一款插件，名叫ESLint，是用来静态检测js代码的工具，让你的js代码在编辑过程中就能找到错误，提高代码质量，好了废话不多说下面介绍如何安装和配置这款插件。</p>","more":"<h1 id=\"安装ESLint插件\"><a href=\"#安装ESLint插件\" class=\"headerlink\" title=\"安装ESLint插件\"></a>安装ESLint插件</h1><p>打开VSCode编辑器，在左侧右下角有一个安装插件的图标，点击后就可以打开插件市场，输入ESLint，就会有个黄色的图标出现在你面前，不用犹豫双击它，稍等一会它就安装完了，是不是超简单。</p>\n<h1 id=\"安装NPM依赖\"><a href=\"#安装NPM依赖\" class=\"headerlink\" title=\"安装NPM依赖\"></a>安装NPM依赖</h1><p>ESLint插件运行需要一些依赖，对于用过npm包管理工具的人来讲小意思啦，我把代码放到下面，需要的直接粘贴运行就好。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;全局安装eslint</span><br><span class=\"line\">npm i eslint -g</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;如果用到html中的js校验</span><br><span class=\"line\">npm i eslint-plugin-html -g</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;如果用到es2015语法</span><br><span class=\"line\">npm i babel-eslint -g</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置eslint配置文件到项目根目录\"><a href=\"#配置eslint配置文件到项目根目录\" class=\"headerlink\" title=\"配置eslint配置文件到项目根目录\"></a>配置eslint配置文件到项目根目录</h1><p>配置文件名称如下：<br><strong>eslintrc.json</strong><br>内容为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;plugins&quot;: [</span><br><span class=\"line\">                &#x2F;&#x2F; &quot;react&quot;,</span><br><span class=\"line\">                &quot;html&quot;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;env&quot;: &#123;</span><br><span class=\"line\">                &quot;node&quot;: true,</span><br><span class=\"line\">                &quot;jquery&quot;: true,</span><br><span class=\"line\">                &quot;es6&quot;: true,</span><br><span class=\"line\">                &quot;browser&quot;: true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;globals&quot;: &#123;</span><br><span class=\"line\">                &quot;angular&quot;: false</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;parser&quot;: &quot;babel-eslint&quot;,</span><br><span class=\"line\">        &quot;rules&quot;: &#123;</span><br><span class=\"line\">                &#x2F;&#x2F;官方文档 http:&#x2F;&#x2F;eslint.org&#x2F;docs&#x2F;rules&#x2F;</span><br><span class=\"line\">                &#x2F;&#x2F;参数：0 关闭，1 警告，2 错误</span><br><span class=\"line\">                &#x2F;&#x2F; &quot;quotes&quot;: [0, &quot;single&quot;],                  &#x2F;&#x2F;建议使用单引号</span><br><span class=\"line\">                &#x2F;&#x2F; &quot;no-inner-declarations&quot;: [0, &quot;both&quot;],     &#x2F;&#x2F;不建议在&#123;&#125;代码块内部声明变量或函数</span><br><span class=\"line\">                &quot;no-extra-boolean-cast&quot;: 1, &#x2F;&#x2F;多余的感叹号转布尔型</span><br><span class=\"line\">                &quot;no-extra-semi&quot;: 1, &#x2F;&#x2F;多余的分号</span><br><span class=\"line\">                &quot;no-extra-parens&quot;: 0, &#x2F;&#x2F;多余的括号</span><br><span class=\"line\">                &quot;no-empty&quot;: 1, &#x2F;&#x2F;空代码块</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;使用前未定义</span><br><span class=\"line\">                &quot;no-use-before-define&quot;: [</span><br><span class=\"line\">                        0,</span><br><span class=\"line\">                        &quot;nofunc&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &quot;complexity&quot;: [0, 10], &#x2F;&#x2F;圈复杂度大于*</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;定义数组或对象最后多余的逗号</span><br><span class=\"line\">                &quot;comma-dangle&quot;: [</span><br><span class=\"line\">                        0,</span><br><span class=\"line\">                        &quot;never&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F; 不允许对全局变量赋值,如 window &#x3D; &#39;abc&#39;</span><br><span class=\"line\">                &quot;no-global-assign&quot;: [&quot;error&quot;, &#123;</span><br><span class=\"line\">                        &#x2F;&#x2F; 定义例外</span><br><span class=\"line\">                        &#x2F;&#x2F; &quot;exceptions&quot;: [&quot;Object&quot;]</span><br><span class=\"line\">                &#125;],</span><br><span class=\"line\">                &quot;no-var&quot;: 0, &#x2F;&#x2F;用let或const替代var</span><br><span class=\"line\">                &quot;no-const-assign&quot;: 2, &#x2F;&#x2F;不允许const重新赋值</span><br><span class=\"line\">                &quot;no-class-assign&quot;: 2, &#x2F;&#x2F;不允许对class重新赋值</span><br><span class=\"line\">                &quot;no-debugger&quot;: 1, &#x2F;&#x2F;debugger 调试代码未删除</span><br><span class=\"line\">                &quot;no-console&quot;: 0, &#x2F;&#x2F;console 未删除</span><br><span class=\"line\">                &quot;no-constant-condition&quot;: 2, &#x2F;&#x2F;常量作为条件</span><br><span class=\"line\">                &quot;no-dupe-args&quot;: 2, &#x2F;&#x2F;参数重复</span><br><span class=\"line\">                &quot;no-dupe-keys&quot;: 2, &#x2F;&#x2F;对象属性重复</span><br><span class=\"line\">                &quot;no-duplicate-case&quot;: 2, &#x2F;&#x2F;case重复</span><br><span class=\"line\">                &quot;no-empty-character-class&quot;: 2, &#x2F;&#x2F;正则无法匹配任何值</span><br><span class=\"line\">                &quot;no-invalid-regexp&quot;: 2, &#x2F;&#x2F;无效的正则</span><br><span class=\"line\">                &quot;no-func-assign&quot;: 2, &#x2F;&#x2F;函数被赋值</span><br><span class=\"line\">                &quot;valid-typeof&quot;: 1, &#x2F;&#x2F;无效的类型判断</span><br><span class=\"line\">                &quot;no-unreachable&quot;: 2, &#x2F;&#x2F;不可能执行到的代码</span><br><span class=\"line\">                &quot;no-unexpected-multiline&quot;: 2, &#x2F;&#x2F;行尾缺少分号可能导致一些意外情况</span><br><span class=\"line\">                &quot;no-sparse-arrays&quot;: 1, &#x2F;&#x2F;数组中多出逗号</span><br><span class=\"line\">                &quot;no-shadow-restricted-names&quot;: 2, &#x2F;&#x2F;关键词与命名冲突</span><br><span class=\"line\">                &quot;no-undef&quot;: 1, &#x2F;&#x2F;变量未定义</span><br><span class=\"line\">                &quot;no-unused-vars&quot;: 1, &#x2F;&#x2F;变量定义后未使用</span><br><span class=\"line\">                &quot;no-cond-assign&quot;: 2, &#x2F;&#x2F;条件语句中禁止赋值操作</span><br><span class=\"line\">                &quot;no-native-reassign&quot;: 2, &#x2F;&#x2F;禁止覆盖原生对象</span><br><span class=\"line\">                &quot;no-mixed-spaces-and-tabs&quot;: 0,</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;代码风格优化 --------------------------------------</span><br><span class=\"line\">                &quot;no-irregular-whitespace&quot;: 0,</span><br><span class=\"line\">                &quot;no-else-return&quot;: 0, &#x2F;&#x2F;在else代码块中return，else是多余的</span><br><span class=\"line\">                &quot;no-multi-spaces&quot;: 0, &#x2F;&#x2F;不允许多个空格</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;object直接量建议写法 : 后一个空格前面不留空格</span><br><span class=\"line\">                &quot;key-spacing&quot;: [</span><br><span class=\"line\">                        0,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                &quot;beforeColon&quot;: false,</span><br><span class=\"line\">                                &quot;afterColon&quot;: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &quot;block-scoped-var&quot;: 1, &#x2F;&#x2F;变量应在外部上下文中声明，不应在&#123;&#125;代码块中</span><br><span class=\"line\">                &quot;consistent-return&quot;: 1, &#x2F;&#x2F;函数返回值可能是不同类型</span><br><span class=\"line\">                &quot;accessor-pairs&quot;: 1, &#x2F;&#x2F;object getter&#x2F;setter方法需要成对出现</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;换行调用对象方法  点操作符应写在行首</span><br><span class=\"line\">                &quot;dot-location&quot;: [</span><br><span class=\"line\">                        1,</span><br><span class=\"line\">                        &quot;property&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;no-lone-blocks&quot;: 1, &#x2F;&#x2F;多余的&#123;&#125;嵌套</span><br><span class=\"line\">                &quot;no-labels&quot;: 1, &#x2F;&#x2F;无用的标记</span><br><span class=\"line\">                &quot;no-extend-native&quot;: 1, &#x2F;&#x2F;禁止扩展原生对象</span><br><span class=\"line\">                &quot;no-floating-decimal&quot;: 1, &#x2F;&#x2F;浮点型需要写全 禁止.1 或 2.写法</span><br><span class=\"line\">                &quot;no-loop-func&quot;: 1, &#x2F;&#x2F;禁止在循环体中定义函数</span><br><span class=\"line\">                &quot;no-new-func&quot;: 1, &#x2F;&#x2F;禁止new Function(...) 写法</span><br><span class=\"line\">                &quot;no-self-compare&quot;: 1, &#x2F;&#x2F;不允与自己比较作为条件</span><br><span class=\"line\">                &quot;no-sequences&quot;: 1, &#x2F;&#x2F;禁止可能导致结果不明确的逗号操作符</span><br><span class=\"line\">                &quot;no-throw-literal&quot;: 1, &#x2F;&#x2F;禁止抛出一个直接量 应是Error对象</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;不允return时有赋值操作</span><br><span class=\"line\">                &quot;no-return-assign&quot;: [</span><br><span class=\"line\">                        1,</span><br><span class=\"line\">                        &quot;always&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;不允许重复声明</span><br><span class=\"line\">                &quot;no-redeclare&quot;: [</span><br><span class=\"line\">                        1,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                &quot;builtinGlobals&quot;: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;不执行的表达式</span><br><span class=\"line\">                &quot;no-unused-expressions&quot;: [</span><br><span class=\"line\">                        0,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                &quot;allowShortCircuit&quot;: true,</span><br><span class=\"line\">                                &quot;allowTernary&quot;: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;no-useless-call&quot;: 1, &#x2F;&#x2F;无意义的函数call或apply</span><br><span class=\"line\">                &quot;no-useless-concat&quot;: 1, &#x2F;&#x2F;无意义的string concat</span><br><span class=\"line\">                &quot;no-void&quot;: 1, &#x2F;&#x2F;禁用void</span><br><span class=\"line\">                &quot;no-with&quot;: 1, &#x2F;&#x2F;禁用with</span><br><span class=\"line\">                &quot;space-infix-ops&quot;: 0, &#x2F;&#x2F;操作符前后空格</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;jsdoc</span><br><span class=\"line\">                &quot;valid-jsdoc&quot;: [</span><br><span class=\"line\">                        0,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                &quot;requireParamDescription&quot;: true,</span><br><span class=\"line\">                                &quot;requireReturnDescription&quot;: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;标记未写注释</span><br><span class=\"line\">                &quot;no-warning-comments&quot;: [</span><br><span class=\"line\">                        1,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                &quot;terms&quot;: [</span><br><span class=\"line\">                                        &quot;todo&quot;,</span><br><span class=\"line\">                                        &quot;fixme&quot;,</span><br><span class=\"line\">                                        &quot;any other term&quot;</span><br><span class=\"line\">                                ],</span><br><span class=\"line\">                                &quot;location&quot;: &quot;anywhere&quot;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;curly&quot;: 0 &#x2F;&#x2F;if、else、while、for代码块用&#123;&#125;包围</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>eslint就是根据这个配置表来进行js语法校验的。</p>\n<h1 id=\"最后重启VSCode完成插件安装\"><a href=\"#最后重启VSCode完成插件安装\" class=\"headerlink\" title=\"最后重启VSCode完成插件安装\"></a>最后重启VSCode完成插件安装</h1><p>重启后控制台显示ESLint server is running说明插件已经生效，好啦接下来就愉快的写代码吧。</p>"},{"title":"Vue基础","date":"2017-08-30T09:03:05.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n最近公司技术选型选择了VUE，下面就记录一下在学习Vue中遇到的一些知识点，有些在官方手册里已经讲的很详细了，这里就简单带过，主要对cli产生的以及自行添加的一些项目目录进行一下解释，希望对正在学习Vue的同学提供一点帮助，如果本文有谬误之处还请各位指出，谢谢各位支持。\n\n<!-- more -->\n### 搭建项目\n\n```\nnpm install --global vue-cli\nvue init webpack my-project\ncd my-project\nnpm install（推荐用cnpm install）\n如果没有cnpm ，先安装cnpm镜像\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\nnpm run dev\n```\n### 目录讲解\n> - build和config ：项目开发和打包时候的相关配置；\n> - node_modules ：项目所需要的依赖文件；\n> - src ：主应用/页面相关文件；\n>    - assets ： 静态资源文件；\n>    - components ：组件；\n>    - res：资源\n>      - css： 公共css或是css预处理文件；\n>      - js：   公共js文件\n>      - img：公共图片\n>    - router ：路由配置文件；\n>    - views ： 视图文件，其实也是vue组件。按照业务功能划分模块；\n>    - vuex : 状态管理的配置文件；\n>    - App.vue : 主组件；\n>    - main.js： 入口文件，初始化vue实例并使用需要的插件\n> - index.html ： 主html页面；\n> - dist：webpack打包生成的文件；\n> - package.json：记录依赖相关信息\n\n### 文件的加载顺序:\n当我们执行命令 `npm run dev`的时候根据配置文件`dev-server.js`里的相关配置去加载`webpack`的相关配置文件 在`webpack.base.conf`里面`entry`入口文件就配置了`app：'./src/main.js'` \n\n所以当我们在运行`npm run dev`的时候就开始通过`main.js`执行了。`main.js` 初始化vue实例并且加载相关配置插件，然后通过`app.vue`文件去访问各个组件\n\n### Build/dev-server.js主要完成以下几件事情：\n1. 检查node和npm的版本；\n1. 引入相关插件和配置；\n1. 创建express服务器和webpack编译器；\n1. 配置开发中间件（webpack-dev-middleware）和热重载中间件（webpack-hot-middleware）；\n1. 挂载代理服务和中间件；\n1. 配置静态资源；\n1. 启动服务器监听特定端口（8080）；\n1. 自动打开浏览器并打开特定网址（localhost:8080）；\n\n### Build/huild.js主要完成以下几件事情：\n1. loading动画；\n1. 删除创建目标文件夹；\n1. webpack编译；\n1. 输出信息\n\n### 配置文件\n#### .babelrc \n设置转码的规则和插件（使用es6语法必须安装插件）\n\n```\nnpm install babel-preset-es2015\n```\n\npresets 字段是用来设定转码规则;\n\n#### .editorconfig \n配置文件编码格式的文件\n- indent_style:  设置缩进风格，tab或者空格;\n- indent_size:  缩进的宽度;\n- tab_width:   设置tab的列数。默认是indent_size;\n- end_of_line： 换行符，lf、cr和crlf;\n- charset：  编码;\n- trim_trailing_whitespace： 设为true表示会除去换行行首的任意空白字符;\n- insert_final_newline:   设为true表明使文件以一个空白行结尾;\n- root: 表明是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件;\n\n#### .eslintignore  \n忽略不符合eslint规范的文件, （一般会忽略掉第三方引用的插件）\n\n#### .eslintrc.js \n定义代码规则\n\n#### .gitignore  \n配置文件，用于配置不需要加入版本管理的文件\n\n### .VUE 文件解释\n- template： 展示模板\n- import ： 导入组件已经js文件\n- export default： \n  - data：数据源；\n  - methods：方法； \t\t       \n  - mounted：页面加载之后执行的方法；\t\n  - created：页面生成时加载的方法；\n- style：  样式代码  其中scoped表示样式作用范围为本vue文件\n\n\n\n### 网络访问\n#### axios\n1. 发送请求：\n\n```\naxios#request(config)；\naxios#get(url[, config])；\naxios#delete(url[, config])；\naxios#head(url[, config])；\naxios#post(url[, data[, config]])；\naxios#put(url[, data[, config]])；\naxios#patch(url[, data[, config]])；\n```\n\n2. 处理响应：\n- Promise语法；\n- 处理结果：then；\n- 处理异常：catch；\n3. 拦截器（use/reject）：\n\n```\naxios.interceptors.response.use；\naxios.interceptors.rquest.use；\nreject(移除请求拦截)\n```\n\n4. 参数：\n- json（默认）；\n- qs；\n\n### 组件通信\n- Prpos：父组件对子组件；\n- 自定义事件：子组件对父组件；\n- 消息总线：任意两个组件；\n- 状态管理：Vuex（适用于大型单页面开发）\n\n### 路由\n\n1. 配置\n\n```\nVue.use(Router)\n\nexport default new Router({\n  routes: [\n    {\n      path: '/',\n      name: 'Hello',\n      component: Hello\n    }\n  ]\n})\n\nnew Vue({\n  el: '#app',\n  router,\n  template: '<App/>',\n  components: { App }\n})\n```\n\n2. 导航\n- push\n- replace\n- go\n3. 参数传递\n- RESTful url参数\n- 参数查询 query\n- 锚点  hash: '#data'\n4. 嵌套路由\n- Children\n5. 钩子\n- beforeRouteEnter\n- beforeRouteLeave\n\n### 状态管理\n> Vuex是什么？\n> \n> Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n\n- state里面就是存放的我们所要用到的状态；\n- mutations就是存放如何更改状态的方法 ，同步操作；\n- getters就是从state中派生出状态，比如将state中的某个状态进行过滤然后获取新的状态。\n- actions就是mutation的加强版，它可以通过commit\n- mutations中的方法来改变状态，最重要的是它可以进行异步操作。 \n- modules顾名思义，就是当用这个容器来装这些状态还是显得混乱的时候，我们就可以把容器分成几块，把状态和管理规则分类来装。这和我们创建js模块是一个目的，让代码结构更清晰。\n","source":"_posts/Vue-basic.md","raw":"---\ntitle: Vue基础\ndate: 2017-08-30 17:03:05\ncategories: \n  - 前端框架\n\t- VUE\ntags: \n\t- VUE\n---\n> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n最近公司技术选型选择了VUE，下面就记录一下在学习Vue中遇到的一些知识点，有些在官方手册里已经讲的很详细了，这里就简单带过，主要对cli产生的以及自行添加的一些项目目录进行一下解释，希望对正在学习Vue的同学提供一点帮助，如果本文有谬误之处还请各位指出，谢谢各位支持。\n\n<!-- more -->\n### 搭建项目\n\n```\nnpm install --global vue-cli\nvue init webpack my-project\ncd my-project\nnpm install（推荐用cnpm install）\n如果没有cnpm ，先安装cnpm镜像\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\nnpm run dev\n```\n### 目录讲解\n> - build和config ：项目开发和打包时候的相关配置；\n> - node_modules ：项目所需要的依赖文件；\n> - src ：主应用/页面相关文件；\n>    - assets ： 静态资源文件；\n>    - components ：组件；\n>    - res：资源\n>      - css： 公共css或是css预处理文件；\n>      - js：   公共js文件\n>      - img：公共图片\n>    - router ：路由配置文件；\n>    - views ： 视图文件，其实也是vue组件。按照业务功能划分模块；\n>    - vuex : 状态管理的配置文件；\n>    - App.vue : 主组件；\n>    - main.js： 入口文件，初始化vue实例并使用需要的插件\n> - index.html ： 主html页面；\n> - dist：webpack打包生成的文件；\n> - package.json：记录依赖相关信息\n\n### 文件的加载顺序:\n当我们执行命令 `npm run dev`的时候根据配置文件`dev-server.js`里的相关配置去加载`webpack`的相关配置文件 在`webpack.base.conf`里面`entry`入口文件就配置了`app：'./src/main.js'` \n\n所以当我们在运行`npm run dev`的时候就开始通过`main.js`执行了。`main.js` 初始化vue实例并且加载相关配置插件，然后通过`app.vue`文件去访问各个组件\n\n### Build/dev-server.js主要完成以下几件事情：\n1. 检查node和npm的版本；\n1. 引入相关插件和配置；\n1. 创建express服务器和webpack编译器；\n1. 配置开发中间件（webpack-dev-middleware）和热重载中间件（webpack-hot-middleware）；\n1. 挂载代理服务和中间件；\n1. 配置静态资源；\n1. 启动服务器监听特定端口（8080）；\n1. 自动打开浏览器并打开特定网址（localhost:8080）；\n\n### Build/huild.js主要完成以下几件事情：\n1. loading动画；\n1. 删除创建目标文件夹；\n1. webpack编译；\n1. 输出信息\n\n### 配置文件\n#### .babelrc \n设置转码的规则和插件（使用es6语法必须安装插件）\n\n```\nnpm install babel-preset-es2015\n```\n\npresets 字段是用来设定转码规则;\n\n#### .editorconfig \n配置文件编码格式的文件\n- indent_style:  设置缩进风格，tab或者空格;\n- indent_size:  缩进的宽度;\n- tab_width:   设置tab的列数。默认是indent_size;\n- end_of_line： 换行符，lf、cr和crlf;\n- charset：  编码;\n- trim_trailing_whitespace： 设为true表示会除去换行行首的任意空白字符;\n- insert_final_newline:   设为true表明使文件以一个空白行结尾;\n- root: 表明是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件;\n\n#### .eslintignore  \n忽略不符合eslint规范的文件, （一般会忽略掉第三方引用的插件）\n\n#### .eslintrc.js \n定义代码规则\n\n#### .gitignore  \n配置文件，用于配置不需要加入版本管理的文件\n\n### .VUE 文件解释\n- template： 展示模板\n- import ： 导入组件已经js文件\n- export default： \n  - data：数据源；\n  - methods：方法； \t\t       \n  - mounted：页面加载之后执行的方法；\t\n  - created：页面生成时加载的方法；\n- style：  样式代码  其中scoped表示样式作用范围为本vue文件\n\n\n\n### 网络访问\n#### axios\n1. 发送请求：\n\n```\naxios#request(config)；\naxios#get(url[, config])；\naxios#delete(url[, config])；\naxios#head(url[, config])；\naxios#post(url[, data[, config]])；\naxios#put(url[, data[, config]])；\naxios#patch(url[, data[, config]])；\n```\n\n2. 处理响应：\n- Promise语法；\n- 处理结果：then；\n- 处理异常：catch；\n3. 拦截器（use/reject）：\n\n```\naxios.interceptors.response.use；\naxios.interceptors.rquest.use；\nreject(移除请求拦截)\n```\n\n4. 参数：\n- json（默认）；\n- qs；\n\n### 组件通信\n- Prpos：父组件对子组件；\n- 自定义事件：子组件对父组件；\n- 消息总线：任意两个组件；\n- 状态管理：Vuex（适用于大型单页面开发）\n\n### 路由\n\n1. 配置\n\n```\nVue.use(Router)\n\nexport default new Router({\n  routes: [\n    {\n      path: '/',\n      name: 'Hello',\n      component: Hello\n    }\n  ]\n})\n\nnew Vue({\n  el: '#app',\n  router,\n  template: '<App/>',\n  components: { App }\n})\n```\n\n2. 导航\n- push\n- replace\n- go\n3. 参数传递\n- RESTful url参数\n- 参数查询 query\n- 锚点  hash: '#data'\n4. 嵌套路由\n- Children\n5. 钩子\n- beforeRouteEnter\n- beforeRouteLeave\n\n### 状态管理\n> Vuex是什么？\n> \n> Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n\n- state里面就是存放的我们所要用到的状态；\n- mutations就是存放如何更改状态的方法 ，同步操作；\n- getters就是从state中派生出状态，比如将state中的某个状态进行过滤然后获取新的状态。\n- actions就是mutation的加强版，它可以通过commit\n- mutations中的方法来改变状态，最重要的是它可以进行异步操作。 \n- modules顾名思义，就是当用这个容器来装这些状态还是显得混乱的时候，我们就可以把容器分成几块，把状态和管理规则分类来装。这和我们创建js模块是一个目的，让代码结构更清晰。\n","slug":"Vue-basic","published":1,"updated":"2020-04-02T03:20:12.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs16003sooa6cjnyct0q","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近公司技术选型选择了VUE，下面就记录一下在学习Vue中遇到的一些知识点，有些在官方手册里已经讲的很详细了，这里就简单带过，主要对cli产生的以及自行添加的一些项目目录进行一下解释，希望对正在学习Vue的同学提供一点帮助，如果本文有谬误之处还请各位指出，谢谢各位支持。</p>\n<a id=\"more\"></a>\n<h3 id=\"搭建项目\"><a href=\"#搭建项目\" class=\"headerlink\" title=\"搭建项目\"></a>搭建项目</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --global vue-cli</span><br><span class=\"line\">vue init webpack my-project</span><br><span class=\"line\">cd my-project</span><br><span class=\"line\">npm install（推荐用cnpm install）</span><br><span class=\"line\">如果没有cnpm ，先安装cnpm镜像</span><br><span class=\"line\">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"目录讲解\"><a href=\"#目录讲解\" class=\"headerlink\" title=\"目录讲解\"></a>目录讲解</h3><blockquote>\n<ul>\n<li>build和config ：项目开发和打包时候的相关配置；</li>\n<li>node_modules ：项目所需要的依赖文件；</li>\n<li>src ：主应用/页面相关文件；<ul>\n<li>assets ： 静态资源文件；</li>\n<li>components ：组件；</li>\n<li>res：资源<ul>\n<li>css： 公共css或是css预处理文件；</li>\n<li>js：   公共js文件</li>\n<li>img：公共图片</li>\n</ul>\n</li>\n<li>router ：路由配置文件；</li>\n<li>views ： 视图文件，其实也是vue组件。按照业务功能划分模块；</li>\n<li>vuex : 状态管理的配置文件；</li>\n<li>App.vue : 主组件；</li>\n<li>main.js： 入口文件，初始化vue实例并使用需要的插件</li>\n</ul>\n</li>\n<li>index.html ： 主html页面；</li>\n<li>dist：webpack打包生成的文件；</li>\n<li>package.json：记录依赖相关信息</li>\n</ul>\n</blockquote>\n<h3 id=\"文件的加载顺序\"><a href=\"#文件的加载顺序\" class=\"headerlink\" title=\"文件的加载顺序:\"></a>文件的加载顺序:</h3><p>当我们执行命令 <code>npm run dev</code>的时候根据配置文件<code>dev-server.js</code>里的相关配置去加载<code>webpack</code>的相关配置文件 在<code>webpack.base.conf</code>里面<code>entry</code>入口文件就配置了<code>app：&#39;./src/main.js&#39;</code> </p>\n<p>所以当我们在运行<code>npm run dev</code>的时候就开始通过<code>main.js</code>执行了。<code>main.js</code> 初始化vue实例并且加载相关配置插件，然后通过<code>app.vue</code>文件去访问各个组件</p>\n<h3 id=\"Build-dev-server-js主要完成以下几件事情：\"><a href=\"#Build-dev-server-js主要完成以下几件事情：\" class=\"headerlink\" title=\"Build/dev-server.js主要完成以下几件事情：\"></a>Build/dev-server.js主要完成以下几件事情：</h3><ol>\n<li>检查node和npm的版本；</li>\n<li>引入相关插件和配置；</li>\n<li>创建express服务器和webpack编译器；</li>\n<li>配置开发中间件（webpack-dev-middleware）和热重载中间件（webpack-hot-middleware）；</li>\n<li>挂载代理服务和中间件；</li>\n<li>配置静态资源；</li>\n<li>启动服务器监听特定端口（8080）；</li>\n<li>自动打开浏览器并打开特定网址（localhost:8080）；</li>\n</ol>\n<h3 id=\"Build-huild-js主要完成以下几件事情：\"><a href=\"#Build-huild-js主要完成以下几件事情：\" class=\"headerlink\" title=\"Build/huild.js主要完成以下几件事情：\"></a>Build/huild.js主要完成以下几件事情：</h3><ol>\n<li>loading动画；</li>\n<li>删除创建目标文件夹；</li>\n<li>webpack编译；</li>\n<li>输出信息</li>\n</ol>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><h4 id=\"babelrc\"><a href=\"#babelrc\" class=\"headerlink\" title=\".babelrc\"></a>.babelrc</h4><p>设置转码的规则和插件（使用es6语法必须安装插件）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-preset-es2015</span><br></pre></td></tr></table></figure>\n\n<p>presets 字段是用来设定转码规则;</p>\n<h4 id=\"editorconfig\"><a href=\"#editorconfig\" class=\"headerlink\" title=\".editorconfig\"></a>.editorconfig</h4><p>配置文件编码格式的文件</p>\n<ul>\n<li>indent_style:  设置缩进风格，tab或者空格;</li>\n<li>indent_size:  缩进的宽度;</li>\n<li>tab_width:   设置tab的列数。默认是indent_size;</li>\n<li>end_of_line： 换行符，lf、cr和crlf;</li>\n<li>charset：  编码;</li>\n<li>trim_trailing_whitespace： 设为true表示会除去换行行首的任意空白字符;</li>\n<li>insert_final_newline:   设为true表明使文件以一个空白行结尾;</li>\n<li>root: 表明是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件;</li>\n</ul>\n<h4 id=\"eslintignore\"><a href=\"#eslintignore\" class=\"headerlink\" title=\".eslintignore\"></a>.eslintignore</h4><p>忽略不符合eslint规范的文件, （一般会忽略掉第三方引用的插件）</p>\n<h4 id=\"eslintrc-js\"><a href=\"#eslintrc-js\" class=\"headerlink\" title=\".eslintrc.js\"></a>.eslintrc.js</h4><p>定义代码规则</p>\n<h4 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\".gitignore\"></a>.gitignore</h4><p>配置文件，用于配置不需要加入版本管理的文件</p>\n<h3 id=\"VUE-文件解释\"><a href=\"#VUE-文件解释\" class=\"headerlink\" title=\".VUE 文件解释\"></a>.VUE 文件解释</h3><ul>\n<li>template： 展示模板</li>\n<li>import ： 导入组件已经js文件</li>\n<li>export default： <ul>\n<li>data：数据源；</li>\n<li>methods：方法；                </li>\n<li>mounted：页面加载之后执行的方法；    </li>\n<li>created：页面生成时加载的方法；</li>\n</ul>\n</li>\n<li>style：  样式代码  其中scoped表示样式作用范围为本vue文件</li>\n</ul>\n<h3 id=\"网络访问\"><a href=\"#网络访问\" class=\"headerlink\" title=\"网络访问\"></a>网络访问</h3><h4 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h4><ol>\n<li>发送请求：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios#request(config)；</span><br><span class=\"line\">axios#get(url[, config])；</span><br><span class=\"line\">axios#delete(url[, config])；</span><br><span class=\"line\">axios#head(url[, config])；</span><br><span class=\"line\">axios#post(url[, data[, config]])；</span><br><span class=\"line\">axios#put(url[, data[, config]])；</span><br><span class=\"line\">axios#patch(url[, data[, config]])；</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>处理响应：</li>\n</ol>\n<ul>\n<li>Promise语法；</li>\n<li>处理结果：then；</li>\n<li>处理异常：catch；</li>\n</ul>\n<ol start=\"3\">\n<li>拦截器（use/reject）：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.interceptors.response.use；</span><br><span class=\"line\">axios.interceptors.rquest.use；</span><br><span class=\"line\">reject(移除请求拦截)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>参数：</li>\n</ol>\n<ul>\n<li>json（默认）；</li>\n<li>qs；</li>\n</ul>\n<h3 id=\"组件通信\"><a href=\"#组件通信\" class=\"headerlink\" title=\"组件通信\"></a>组件通信</h3><ul>\n<li>Prpos：父组件对子组件；</li>\n<li>自定义事件：子组件对父组件；</li>\n<li>消息总线：任意两个组件；</li>\n<li>状态管理：Vuex（适用于大型单页面开发）</li>\n</ul>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><ol>\n<li>配置</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.use(Router)</span><br><span class=\"line\"></span><br><span class=\"line\">export default new Router(&#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: &#39;&#x2F;&#39;,</span><br><span class=\"line\">      name: &#39;Hello&#39;,</span><br><span class=\"line\">      component: Hello</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  template: &#39;&lt;App&#x2F;&gt;&#39;,</span><br><span class=\"line\">  components: &#123; App &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>导航</li>\n</ol>\n<ul>\n<li>push</li>\n<li>replace</li>\n<li>go</li>\n</ul>\n<ol start=\"3\">\n<li>参数传递</li>\n</ol>\n<ul>\n<li>RESTful url参数</li>\n<li>参数查询 query</li>\n<li>锚点  hash: ‘#data’</li>\n</ul>\n<ol start=\"4\">\n<li>嵌套路由</li>\n</ol>\n<ul>\n<li>Children</li>\n</ul>\n<ol start=\"5\">\n<li>钩子</li>\n</ol>\n<ul>\n<li>beforeRouteEnter</li>\n<li>beforeRouteLeave</li>\n</ul>\n<h3 id=\"状态管理\"><a href=\"#状态管理\" class=\"headerlink\" title=\"状态管理\"></a>状态管理</h3><blockquote>\n<p>Vuex是什么？</p>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n</blockquote>\n<ul>\n<li>state里面就是存放的我们所要用到的状态；</li>\n<li>mutations就是存放如何更改状态的方法 ，同步操作；</li>\n<li>getters就是从state中派生出状态，比如将state中的某个状态进行过滤然后获取新的状态。</li>\n<li>actions就是mutation的加强版，它可以通过commit</li>\n<li>mutations中的方法来改变状态，最重要的是它可以进行异步操作。 </li>\n<li>modules顾名思义，就是当用这个容器来装这些状态还是显得混乱的时候，我们就可以把容器分成几块，把状态和管理规则分类来装。这和我们创建js模块是一个目的，让代码结构更清晰。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近公司技术选型选择了VUE，下面就记录一下在学习Vue中遇到的一些知识点，有些在官方手册里已经讲的很详细了，这里就简单带过，主要对cli产生的以及自行添加的一些项目目录进行一下解释，希望对正在学习Vue的同学提供一点帮助，如果本文有谬误之处还请各位指出，谢谢各位支持。</p>","more":"<h3 id=\"搭建项目\"><a href=\"#搭建项目\" class=\"headerlink\" title=\"搭建项目\"></a>搭建项目</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --global vue-cli</span><br><span class=\"line\">vue init webpack my-project</span><br><span class=\"line\">cd my-project</span><br><span class=\"line\">npm install（推荐用cnpm install）</span><br><span class=\"line\">如果没有cnpm ，先安装cnpm镜像</span><br><span class=\"line\">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"目录讲解\"><a href=\"#目录讲解\" class=\"headerlink\" title=\"目录讲解\"></a>目录讲解</h3><blockquote>\n<ul>\n<li>build和config ：项目开发和打包时候的相关配置；</li>\n<li>node_modules ：项目所需要的依赖文件；</li>\n<li>src ：主应用/页面相关文件；<ul>\n<li>assets ： 静态资源文件；</li>\n<li>components ：组件；</li>\n<li>res：资源<ul>\n<li>css： 公共css或是css预处理文件；</li>\n<li>js：   公共js文件</li>\n<li>img：公共图片</li>\n</ul>\n</li>\n<li>router ：路由配置文件；</li>\n<li>views ： 视图文件，其实也是vue组件。按照业务功能划分模块；</li>\n<li>vuex : 状态管理的配置文件；</li>\n<li>App.vue : 主组件；</li>\n<li>main.js： 入口文件，初始化vue实例并使用需要的插件</li>\n</ul>\n</li>\n<li>index.html ： 主html页面；</li>\n<li>dist：webpack打包生成的文件；</li>\n<li>package.json：记录依赖相关信息</li>\n</ul>\n</blockquote>\n<h3 id=\"文件的加载顺序\"><a href=\"#文件的加载顺序\" class=\"headerlink\" title=\"文件的加载顺序:\"></a>文件的加载顺序:</h3><p>当我们执行命令 <code>npm run dev</code>的时候根据配置文件<code>dev-server.js</code>里的相关配置去加载<code>webpack</code>的相关配置文件 在<code>webpack.base.conf</code>里面<code>entry</code>入口文件就配置了<code>app：&#39;./src/main.js&#39;</code> </p>\n<p>所以当我们在运行<code>npm run dev</code>的时候就开始通过<code>main.js</code>执行了。<code>main.js</code> 初始化vue实例并且加载相关配置插件，然后通过<code>app.vue</code>文件去访问各个组件</p>\n<h3 id=\"Build-dev-server-js主要完成以下几件事情：\"><a href=\"#Build-dev-server-js主要完成以下几件事情：\" class=\"headerlink\" title=\"Build/dev-server.js主要完成以下几件事情：\"></a>Build/dev-server.js主要完成以下几件事情：</h3><ol>\n<li>检查node和npm的版本；</li>\n<li>引入相关插件和配置；</li>\n<li>创建express服务器和webpack编译器；</li>\n<li>配置开发中间件（webpack-dev-middleware）和热重载中间件（webpack-hot-middleware）；</li>\n<li>挂载代理服务和中间件；</li>\n<li>配置静态资源；</li>\n<li>启动服务器监听特定端口（8080）；</li>\n<li>自动打开浏览器并打开特定网址（localhost:8080）；</li>\n</ol>\n<h3 id=\"Build-huild-js主要完成以下几件事情：\"><a href=\"#Build-huild-js主要完成以下几件事情：\" class=\"headerlink\" title=\"Build/huild.js主要完成以下几件事情：\"></a>Build/huild.js主要完成以下几件事情：</h3><ol>\n<li>loading动画；</li>\n<li>删除创建目标文件夹；</li>\n<li>webpack编译；</li>\n<li>输出信息</li>\n</ol>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><h4 id=\"babelrc\"><a href=\"#babelrc\" class=\"headerlink\" title=\".babelrc\"></a>.babelrc</h4><p>设置转码的规则和插件（使用es6语法必须安装插件）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-preset-es2015</span><br></pre></td></tr></table></figure>\n\n<p>presets 字段是用来设定转码规则;</p>\n<h4 id=\"editorconfig\"><a href=\"#editorconfig\" class=\"headerlink\" title=\".editorconfig\"></a>.editorconfig</h4><p>配置文件编码格式的文件</p>\n<ul>\n<li>indent_style:  设置缩进风格，tab或者空格;</li>\n<li>indent_size:  缩进的宽度;</li>\n<li>tab_width:   设置tab的列数。默认是indent_size;</li>\n<li>end_of_line： 换行符，lf、cr和crlf;</li>\n<li>charset：  编码;</li>\n<li>trim_trailing_whitespace： 设为true表示会除去换行行首的任意空白字符;</li>\n<li>insert_final_newline:   设为true表明使文件以一个空白行结尾;</li>\n<li>root: 表明是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件;</li>\n</ul>\n<h4 id=\"eslintignore\"><a href=\"#eslintignore\" class=\"headerlink\" title=\".eslintignore\"></a>.eslintignore</h4><p>忽略不符合eslint规范的文件, （一般会忽略掉第三方引用的插件）</p>\n<h4 id=\"eslintrc-js\"><a href=\"#eslintrc-js\" class=\"headerlink\" title=\".eslintrc.js\"></a>.eslintrc.js</h4><p>定义代码规则</p>\n<h4 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\".gitignore\"></a>.gitignore</h4><p>配置文件，用于配置不需要加入版本管理的文件</p>\n<h3 id=\"VUE-文件解释\"><a href=\"#VUE-文件解释\" class=\"headerlink\" title=\".VUE 文件解释\"></a>.VUE 文件解释</h3><ul>\n<li>template： 展示模板</li>\n<li>import ： 导入组件已经js文件</li>\n<li>export default： <ul>\n<li>data：数据源；</li>\n<li>methods：方法；                </li>\n<li>mounted：页面加载之后执行的方法；    </li>\n<li>created：页面生成时加载的方法；</li>\n</ul>\n</li>\n<li>style：  样式代码  其中scoped表示样式作用范围为本vue文件</li>\n</ul>\n<h3 id=\"网络访问\"><a href=\"#网络访问\" class=\"headerlink\" title=\"网络访问\"></a>网络访问</h3><h4 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h4><ol>\n<li>发送请求：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios#request(config)；</span><br><span class=\"line\">axios#get(url[, config])；</span><br><span class=\"line\">axios#delete(url[, config])；</span><br><span class=\"line\">axios#head(url[, config])；</span><br><span class=\"line\">axios#post(url[, data[, config]])；</span><br><span class=\"line\">axios#put(url[, data[, config]])；</span><br><span class=\"line\">axios#patch(url[, data[, config]])；</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>处理响应：</li>\n</ol>\n<ul>\n<li>Promise语法；</li>\n<li>处理结果：then；</li>\n<li>处理异常：catch；</li>\n</ul>\n<ol start=\"3\">\n<li>拦截器（use/reject）：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.interceptors.response.use；</span><br><span class=\"line\">axios.interceptors.rquest.use；</span><br><span class=\"line\">reject(移除请求拦截)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>参数：</li>\n</ol>\n<ul>\n<li>json（默认）；</li>\n<li>qs；</li>\n</ul>\n<h3 id=\"组件通信\"><a href=\"#组件通信\" class=\"headerlink\" title=\"组件通信\"></a>组件通信</h3><ul>\n<li>Prpos：父组件对子组件；</li>\n<li>自定义事件：子组件对父组件；</li>\n<li>消息总线：任意两个组件；</li>\n<li>状态管理：Vuex（适用于大型单页面开发）</li>\n</ul>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><ol>\n<li>配置</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.use(Router)</span><br><span class=\"line\"></span><br><span class=\"line\">export default new Router(&#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: &#39;&#x2F;&#39;,</span><br><span class=\"line\">      name: &#39;Hello&#39;,</span><br><span class=\"line\">      component: Hello</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  template: &#39;&lt;App&#x2F;&gt;&#39;,</span><br><span class=\"line\">  components: &#123; App &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>导航</li>\n</ol>\n<ul>\n<li>push</li>\n<li>replace</li>\n<li>go</li>\n</ul>\n<ol start=\"3\">\n<li>参数传递</li>\n</ol>\n<ul>\n<li>RESTful url参数</li>\n<li>参数查询 query</li>\n<li>锚点  hash: ‘#data’</li>\n</ul>\n<ol start=\"4\">\n<li>嵌套路由</li>\n</ol>\n<ul>\n<li>Children</li>\n</ul>\n<ol start=\"5\">\n<li>钩子</li>\n</ol>\n<ul>\n<li>beforeRouteEnter</li>\n<li>beforeRouteLeave</li>\n</ul>\n<h3 id=\"状态管理\"><a href=\"#状态管理\" class=\"headerlink\" title=\"状态管理\"></a>状态管理</h3><blockquote>\n<p>Vuex是什么？</p>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n</blockquote>\n<ul>\n<li>state里面就是存放的我们所要用到的状态；</li>\n<li>mutations就是存放如何更改状态的方法 ，同步操作；</li>\n<li>getters就是从state中派生出状态，比如将state中的某个状态进行过滤然后获取新的状态。</li>\n<li>actions就是mutation的加强版，它可以通过commit</li>\n<li>mutations中的方法来改变状态，最重要的是它可以进行异步操作。 </li>\n<li>modules顾名思义，就是当用这个容器来装这些状态还是显得混乱的时候，我们就可以把容器分成几块，把状态和管理规则分类来装。这和我们创建js模块是一个目的，让代码结构更清晰。</li>\n</ul>"},{"title":"Vue VSCode Snippets 自动生成Vue代码片段的VSCode扩展","date":"2017-08-30T08:23:17.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n现代化的IDE已经把开发者变得越来越懒，但是我觉得这样挺好的，让工具完成手工反复重复的工作，提高工作效率的同时降低开发者的疲劳感，Vue VSCode Snippets就是这样一个VSC插件，它可以用简单的几个字母就敲出一整块代码片段，在学习和做VUE项目时可以极大地提高工作效率，下面就介绍一下插件的常见命令。\n<!-- more -->\n\n此插件可用比较简单的写法生成代码片段，非常适合开发工作，减少代码工作量。\n\nScript\n\n\nSnippet | Purpose\n---|---\nvbase | Single file component base\nvbase|\tSingle file component base\nvdata|\tComponent data as a function\nvmethod|\tVue method\nvcomputed|\tVue computed property\nvwatcher|\tVue watcher with new and old value args\nvprops|\tProps with type and default\nvimport\t|Import one component into another\nvimport-c|\tImport one component into another within the export statement\nvimport-export|\tImport one component into another and use it within the export statement\nvfilter\t|Vue filter\nvmixin|\tCreate a Vue Mixin\nvmixin-use|\tBring a mixin into a component to use\nvc-direct|\tVue create a custom directive\nvimport-lib\t|Import a library\nvimport-gsap|\tImport GreenSock with Timeline and Eases\nvanimhook-js|\tUsing the Transition component JS hooks in methods\n<!-- more -->\nTemplate\n\nSnippet | Purpose\n---|---\nvfor|\tv-for directive\nvmodel|\tSemantic v-model directive\nvmodel-num|\tSemantic v-model number directive\nvon\t|v-on click handler with arguments\nvel-props|\tComponent element with props\nvsrc|\tImage src binding\nvstyle|\tInline style binding\nvstyle-obj|\tInline style binding with objects\nvclass|\tClass binding\nvclass-obj|\tClass binding with objects\nvclass-obj-mult\t|Multiple conditional class bindings\nvanim|\tTransition component with JS hooks\n\nVuex\n\nSnippet | Purpose\n---|---\nvstore|\tBase for Vuex store.js\nvgetters|\tVuex Getter\nvmutation|\tVuex Mutation\nvaction|\tVuex Action\nvstore-import|\tImport vuex store into main.js\n\nExtra (plaintext)\n\nSnippet | Purpose\n---|---\ngitignore|\t.gitignore file presets\nvinc|\tincrementer\nvdec|\tdecrementer","source":"_posts/Vue-VSCode-Snippets.md","raw":"---\ntitle: Vue VSCode Snippets 自动生成Vue代码片段的VSCode扩展\ndate: 2017-08-30 16:23:17\ncategories: \n\t- 效率工具\n\t- VSCode插件\ntags: \n\t- VUE\n\t- 插件\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n现代化的IDE已经把开发者变得越来越懒，但是我觉得这样挺好的，让工具完成手工反复重复的工作，提高工作效率的同时降低开发者的疲劳感，Vue VSCode Snippets就是这样一个VSC插件，它可以用简单的几个字母就敲出一整块代码片段，在学习和做VUE项目时可以极大地提高工作效率，下面就介绍一下插件的常见命令。\n<!-- more -->\n\n此插件可用比较简单的写法生成代码片段，非常适合开发工作，减少代码工作量。\n\nScript\n\n\nSnippet | Purpose\n---|---\nvbase | Single file component base\nvbase|\tSingle file component base\nvdata|\tComponent data as a function\nvmethod|\tVue method\nvcomputed|\tVue computed property\nvwatcher|\tVue watcher with new and old value args\nvprops|\tProps with type and default\nvimport\t|Import one component into another\nvimport-c|\tImport one component into another within the export statement\nvimport-export|\tImport one component into another and use it within the export statement\nvfilter\t|Vue filter\nvmixin|\tCreate a Vue Mixin\nvmixin-use|\tBring a mixin into a component to use\nvc-direct|\tVue create a custom directive\nvimport-lib\t|Import a library\nvimport-gsap|\tImport GreenSock with Timeline and Eases\nvanimhook-js|\tUsing the Transition component JS hooks in methods\n<!-- more -->\nTemplate\n\nSnippet | Purpose\n---|---\nvfor|\tv-for directive\nvmodel|\tSemantic v-model directive\nvmodel-num|\tSemantic v-model number directive\nvon\t|v-on click handler with arguments\nvel-props|\tComponent element with props\nvsrc|\tImage src binding\nvstyle|\tInline style binding\nvstyle-obj|\tInline style binding with objects\nvclass|\tClass binding\nvclass-obj|\tClass binding with objects\nvclass-obj-mult\t|Multiple conditional class bindings\nvanim|\tTransition component with JS hooks\n\nVuex\n\nSnippet | Purpose\n---|---\nvstore|\tBase for Vuex store.js\nvgetters|\tVuex Getter\nvmutation|\tVuex Mutation\nvaction|\tVuex Action\nvstore-import|\tImport vuex store into main.js\n\nExtra (plaintext)\n\nSnippet | Purpose\n---|---\ngitignore|\t.gitignore file presets\nvinc|\tincrementer\nvdec|\tdecrementer","slug":"Vue-VSCode-Snippets","published":1,"updated":"2020-04-02T03:20:12.425Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs1p003wooa64xqge4e4","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>现代化的IDE已经把开发者变得越来越懒，但是我觉得这样挺好的，让工具完成手工反复重复的工作，提高工作效率的同时降低开发者的疲劳感，Vue VSCode Snippets就是这样一个VSC插件，它可以用简单的几个字母就敲出一整块代码片段，在学习和做VUE项目时可以极大地提高工作效率，下面就介绍一下插件的常见命令。</p>\n<a id=\"more\"></a>\n\n<p>此插件可用比较简单的写法生成代码片段，非常适合开发工作，减少代码工作量。</p>\n<p>Script</p>\n<table>\n<thead>\n<tr>\n<th>Snippet</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>vbase</td>\n<td>Single file component base</td>\n</tr>\n<tr>\n<td>vbase</td>\n<td>Single file component base</td>\n</tr>\n<tr>\n<td>vdata</td>\n<td>Component data as a function</td>\n</tr>\n<tr>\n<td>vmethod</td>\n<td>Vue method</td>\n</tr>\n<tr>\n<td>vcomputed</td>\n<td>Vue computed property</td>\n</tr>\n<tr>\n<td>vwatcher</td>\n<td>Vue watcher with new and old value args</td>\n</tr>\n<tr>\n<td>vprops</td>\n<td>Props with type and default</td>\n</tr>\n<tr>\n<td>vimport</td>\n<td>Import one component into another</td>\n</tr>\n<tr>\n<td>vimport-c</td>\n<td>Import one component into another within the export statement</td>\n</tr>\n<tr>\n<td>vimport-export</td>\n<td>Import one component into another and use it within the export statement</td>\n</tr>\n<tr>\n<td>vfilter</td>\n<td>Vue filter</td>\n</tr>\n<tr>\n<td>vmixin</td>\n<td>Create a Vue Mixin</td>\n</tr>\n<tr>\n<td>vmixin-use</td>\n<td>Bring a mixin into a component to use</td>\n</tr>\n<tr>\n<td>vc-direct</td>\n<td>Vue create a custom directive</td>\n</tr>\n<tr>\n<td>vimport-lib</td>\n<td>Import a library</td>\n</tr>\n<tr>\n<td>vimport-gsap</td>\n<td>Import GreenSock with Timeline and Eases</td>\n</tr>\n<tr>\n<td>vanimhook-js</td>\n<td>Using the Transition component JS hooks in methods</td>\n</tr>\n<tr>\n<td><!-- more --></td>\n<td></td>\n</tr>\n<tr>\n<td>Template</td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Snippet</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>vfor</td>\n<td>v-for directive</td>\n</tr>\n<tr>\n<td>vmodel</td>\n<td>Semantic v-model directive</td>\n</tr>\n<tr>\n<td>vmodel-num</td>\n<td>Semantic v-model number directive</td>\n</tr>\n<tr>\n<td>von</td>\n<td>v-on click handler with arguments</td>\n</tr>\n<tr>\n<td>vel-props</td>\n<td>Component element with props</td>\n</tr>\n<tr>\n<td>vsrc</td>\n<td>Image src binding</td>\n</tr>\n<tr>\n<td>vstyle</td>\n<td>Inline style binding</td>\n</tr>\n<tr>\n<td>vstyle-obj</td>\n<td>Inline style binding with objects</td>\n</tr>\n<tr>\n<td>vclass</td>\n<td>Class binding</td>\n</tr>\n<tr>\n<td>vclass-obj</td>\n<td>Class binding with objects</td>\n</tr>\n<tr>\n<td>vclass-obj-mult</td>\n<td>Multiple conditional class bindings</td>\n</tr>\n<tr>\n<td>vanim</td>\n<td>Transition component with JS hooks</td>\n</tr>\n</tbody></table>\n<p>Vuex</p>\n<table>\n<thead>\n<tr>\n<th>Snippet</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>vstore</td>\n<td>Base for Vuex store.js</td>\n</tr>\n<tr>\n<td>vgetters</td>\n<td>Vuex Getter</td>\n</tr>\n<tr>\n<td>vmutation</td>\n<td>Vuex Mutation</td>\n</tr>\n<tr>\n<td>vaction</td>\n<td>Vuex Action</td>\n</tr>\n<tr>\n<td>vstore-import</td>\n<td>Import vuex store into main.js</td>\n</tr>\n</tbody></table>\n<p>Extra (plaintext)</p>\n<table>\n<thead>\n<tr>\n<th>Snippet</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gitignore</td>\n<td>.gitignore file presets</td>\n</tr>\n<tr>\n<td>vinc</td>\n<td>incrementer</td>\n</tr>\n<tr>\n<td>vdec</td>\n<td>decrementer</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>现代化的IDE已经把开发者变得越来越懒，但是我觉得这样挺好的，让工具完成手工反复重复的工作，提高工作效率的同时降低开发者的疲劳感，Vue VSCode Snippets就是这样一个VSC插件，它可以用简单的几个字母就敲出一整块代码片段，在学习和做VUE项目时可以极大地提高工作效率，下面就介绍一下插件的常见命令。</p>","more":"<p>此插件可用比较简单的写法生成代码片段，非常适合开发工作，减少代码工作量。</p>\n<p>Script</p>\n<table>\n<thead>\n<tr>\n<th>Snippet</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>vbase</td>\n<td>Single file component base</td>\n</tr>\n<tr>\n<td>vbase</td>\n<td>Single file component base</td>\n</tr>\n<tr>\n<td>vdata</td>\n<td>Component data as a function</td>\n</tr>\n<tr>\n<td>vmethod</td>\n<td>Vue method</td>\n</tr>\n<tr>\n<td>vcomputed</td>\n<td>Vue computed property</td>\n</tr>\n<tr>\n<td>vwatcher</td>\n<td>Vue watcher with new and old value args</td>\n</tr>\n<tr>\n<td>vprops</td>\n<td>Props with type and default</td>\n</tr>\n<tr>\n<td>vimport</td>\n<td>Import one component into another</td>\n</tr>\n<tr>\n<td>vimport-c</td>\n<td>Import one component into another within the export statement</td>\n</tr>\n<tr>\n<td>vimport-export</td>\n<td>Import one component into another and use it within the export statement</td>\n</tr>\n<tr>\n<td>vfilter</td>\n<td>Vue filter</td>\n</tr>\n<tr>\n<td>vmixin</td>\n<td>Create a Vue Mixin</td>\n</tr>\n<tr>\n<td>vmixin-use</td>\n<td>Bring a mixin into a component to use</td>\n</tr>\n<tr>\n<td>vc-direct</td>\n<td>Vue create a custom directive</td>\n</tr>\n<tr>\n<td>vimport-lib</td>\n<td>Import a library</td>\n</tr>\n<tr>\n<td>vimport-gsap</td>\n<td>Import GreenSock with Timeline and Eases</td>\n</tr>\n<tr>\n<td>vanimhook-js</td>\n<td>Using the Transition component JS hooks in methods</td>\n</tr>\n<tr>\n<td><!-- more --></td>\n<td></td>\n</tr>\n<tr>\n<td>Template</td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Snippet</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>vfor</td>\n<td>v-for directive</td>\n</tr>\n<tr>\n<td>vmodel</td>\n<td>Semantic v-model directive</td>\n</tr>\n<tr>\n<td>vmodel-num</td>\n<td>Semantic v-model number directive</td>\n</tr>\n<tr>\n<td>von</td>\n<td>v-on click handler with arguments</td>\n</tr>\n<tr>\n<td>vel-props</td>\n<td>Component element with props</td>\n</tr>\n<tr>\n<td>vsrc</td>\n<td>Image src binding</td>\n</tr>\n<tr>\n<td>vstyle</td>\n<td>Inline style binding</td>\n</tr>\n<tr>\n<td>vstyle-obj</td>\n<td>Inline style binding with objects</td>\n</tr>\n<tr>\n<td>vclass</td>\n<td>Class binding</td>\n</tr>\n<tr>\n<td>vclass-obj</td>\n<td>Class binding with objects</td>\n</tr>\n<tr>\n<td>vclass-obj-mult</td>\n<td>Multiple conditional class bindings</td>\n</tr>\n<tr>\n<td>vanim</td>\n<td>Transition component with JS hooks</td>\n</tr>\n</tbody></table>\n<p>Vuex</p>\n<table>\n<thead>\n<tr>\n<th>Snippet</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>vstore</td>\n<td>Base for Vuex store.js</td>\n</tr>\n<tr>\n<td>vgetters</td>\n<td>Vuex Getter</td>\n</tr>\n<tr>\n<td>vmutation</td>\n<td>Vuex Mutation</td>\n</tr>\n<tr>\n<td>vaction</td>\n<td>Vuex Action</td>\n</tr>\n<tr>\n<td>vstore-import</td>\n<td>Import vuex store into main.js</td>\n</tr>\n</tbody></table>\n<p>Extra (plaintext)</p>\n<table>\n<thead>\n<tr>\n<th>Snippet</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gitignore</td>\n<td>.gitignore file presets</td>\n</tr>\n<tr>\n<td>vinc</td>\n<td>incrementer</td>\n</tr>\n<tr>\n<td>vdec</td>\n<td>decrementer</td>\n</tr>\n</tbody></table>"},{"title":"vue插件开发（笔记）","date":"2020-02-24T14:00:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n# vue插件开发\n> Vue.use({install(Vues){}})\n## Vue.use\n把给到的内容执行一下\n举例\n``` js\nfunction a(){\n\tconsole.log('a')\n}\nVue.use(a) // a\n```\n有 install 就执行 install\n``` js\nfunction a(){\n\tconsole.log('a')\n}\na.install = function(){\n\tconsole.log('b')\n}\nVue.use(a) // b\n```\n再进一步\n``` js\nfunction a(){\n\tconsole.log('a')\n}\na.install = function(){\n\t// console.log('b')\n\tvue.mixin({ // 抽离公共逻辑 ， 缺点：命名冲突，难以阅读\n\t\tdata(){ // data数据少的时候可以不用vuex 用mixin\n\t\t\treturn {\n\t\t\t\tc:'this is mixin'\n\t\t\t}\n\t\t},\n\t\tmethods:{\n\t\t\t// 混入方法\n\t\t\t// 提示性弹窗 原：import 控制 显隐 现在：在根节点引入，通过mixin在方法控制显隐\n\t\t}\n\t\t// 混入生命周期\n\t\tcreate(){\n\t\t\t// 所有组件的create生命周期都执行 mixin先执行\n\t\t}\n\t})\n}\nVue.use(a) // b\n```\n\nvue.util.defineReactive()\n``` js\nvue.util.defineReactive()\n\nvar test = {\n\ttesta: 1\n}\nsetTimeout(()=>{\n\ttest.testa = 2\n},1000)\nvue.mixin({\n\tbeforeCreate(){\n\t\tthis.test = test\n\t}\n})\n\n```\n\nvue.extend vue.util.extend\n\nvue.util.extend ===> 简单做了个拷贝,拷贝到一起\n``` js\nvue.util.extend(a,b)\n```\nvue.extend ===> 获取到某个对象的实例\n``` js\nlet Constrator = vue.extend(obj)\nlet vm = new Constrator()\n```\n\n手写vue-router\n``` js\n// myVueRouter.js\nclass HistoryRoute(){\n\tconstructor(){\n\t\tthis.current = null;\n\t}\n}\n\nclass vueRouter{\n\tconstructor(options){\n\t\tthis.mode = options.mode || 'hash'\n\t\tthis.history = new HistoryRoute\n\t\tthis.routes = options.routes||[]\n\t\tthis.routesMap = this.createMap(this.routes)\n\t\tthis.init()\n\t}\n\tinit(){\n\t\tif(this.mode == 'hash'){\n\t\t\t// 自动加上 #\n\t\t\tlocation.hash?\"\":location.hash=\"/\"\n\t\t\twindow.addEventListener('load',()=>{\n\t\t\t\tthis.history.current = location.hash.slice(1)\n\t\t\t})\n\t\t\twindow.addEventListener('hashchange',()=>{\n\t\t\t\tthis.history.current = location.hash.slice(1)\n\t\t\t})\n\t\t}else{\n\t\t\tlocation.pathname?\"\":location.pathname=\"/\"\n\t\t\twindow.addEventListener('load',()=>{\n\t\t\t\tthis.history.current = location.hash.pathname\n\t\t\t})\n\t\t\twindow.addEventListener('popstate',()=>{\n\t\t\t\tthis.history.current = location.hash.pathname\n\t\t\t})\n\t\t}\n\t}\n\tcreateMap(router){\n\t\treturn router.reduce((memo,current)=>{\n\t\t\tmemo[current.path] = current.component\n\t\t})\t\t\t\n\t}\n}\n\nvueRouter.install = function(Vue){\n\tVue.mixin({\n\t\tbeforeCreate(){ // 组件还未实例化好\n\t\t\tif(this.$options && this.$options.router){ // 有配置而且引入路由\n\t\t\t\tthis._root = this\n\t\t\t\tthis._router = this.$option.router\n\n\t\t\t\tVue.util.defineReactive(this,'current',this._router.history)\n\t\t\t}else{\n\t\t\t\tthis._root = this.$parent._root\n\t\t\t}\n\t\t\t// 增强健壮性\n\t\t\tObject.defineProperty(this,'$route',{\n\t\t\t\tget(){\n\t\t\t\t\treturn this._root._router\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t})\n\tVue.component('router-view',{\n\t\trender(h){\n\t\t\t// 如何根据当前的current，获取到对应的组件\n\t\t\tlet current = this._self._root._router.history.current\n\t\t\tlet routerMap = this._self._root._router.routeMap\n\t\t\treturn h(routeMap[current])\n\t\t}\n\t})\n}\n```","source":"_posts/Vue-plug-in-development.md","raw":"---\ntitle: vue插件开发（笔记）\ndate: 2020-02-24 22:00:00\ncategories: \n\t- 前端框架\n\t- VUE\ntags:\n\t- 插件\n---\n> 作者：李旭光\n> 引用请标明出处\n\n# vue插件开发\n> Vue.use({install(Vues){}})\n## Vue.use\n把给到的内容执行一下\n举例\n``` js\nfunction a(){\n\tconsole.log('a')\n}\nVue.use(a) // a\n```\n有 install 就执行 install\n``` js\nfunction a(){\n\tconsole.log('a')\n}\na.install = function(){\n\tconsole.log('b')\n}\nVue.use(a) // b\n```\n再进一步\n``` js\nfunction a(){\n\tconsole.log('a')\n}\na.install = function(){\n\t// console.log('b')\n\tvue.mixin({ // 抽离公共逻辑 ， 缺点：命名冲突，难以阅读\n\t\tdata(){ // data数据少的时候可以不用vuex 用mixin\n\t\t\treturn {\n\t\t\t\tc:'this is mixin'\n\t\t\t}\n\t\t},\n\t\tmethods:{\n\t\t\t// 混入方法\n\t\t\t// 提示性弹窗 原：import 控制 显隐 现在：在根节点引入，通过mixin在方法控制显隐\n\t\t}\n\t\t// 混入生命周期\n\t\tcreate(){\n\t\t\t// 所有组件的create生命周期都执行 mixin先执行\n\t\t}\n\t})\n}\nVue.use(a) // b\n```\n\nvue.util.defineReactive()\n``` js\nvue.util.defineReactive()\n\nvar test = {\n\ttesta: 1\n}\nsetTimeout(()=>{\n\ttest.testa = 2\n},1000)\nvue.mixin({\n\tbeforeCreate(){\n\t\tthis.test = test\n\t}\n})\n\n```\n\nvue.extend vue.util.extend\n\nvue.util.extend ===> 简单做了个拷贝,拷贝到一起\n``` js\nvue.util.extend(a,b)\n```\nvue.extend ===> 获取到某个对象的实例\n``` js\nlet Constrator = vue.extend(obj)\nlet vm = new Constrator()\n```\n\n手写vue-router\n``` js\n// myVueRouter.js\nclass HistoryRoute(){\n\tconstructor(){\n\t\tthis.current = null;\n\t}\n}\n\nclass vueRouter{\n\tconstructor(options){\n\t\tthis.mode = options.mode || 'hash'\n\t\tthis.history = new HistoryRoute\n\t\tthis.routes = options.routes||[]\n\t\tthis.routesMap = this.createMap(this.routes)\n\t\tthis.init()\n\t}\n\tinit(){\n\t\tif(this.mode == 'hash'){\n\t\t\t// 自动加上 #\n\t\t\tlocation.hash?\"\":location.hash=\"/\"\n\t\t\twindow.addEventListener('load',()=>{\n\t\t\t\tthis.history.current = location.hash.slice(1)\n\t\t\t})\n\t\t\twindow.addEventListener('hashchange',()=>{\n\t\t\t\tthis.history.current = location.hash.slice(1)\n\t\t\t})\n\t\t}else{\n\t\t\tlocation.pathname?\"\":location.pathname=\"/\"\n\t\t\twindow.addEventListener('load',()=>{\n\t\t\t\tthis.history.current = location.hash.pathname\n\t\t\t})\n\t\t\twindow.addEventListener('popstate',()=>{\n\t\t\t\tthis.history.current = location.hash.pathname\n\t\t\t})\n\t\t}\n\t}\n\tcreateMap(router){\n\t\treturn router.reduce((memo,current)=>{\n\t\t\tmemo[current.path] = current.component\n\t\t})\t\t\t\n\t}\n}\n\nvueRouter.install = function(Vue){\n\tVue.mixin({\n\t\tbeforeCreate(){ // 组件还未实例化好\n\t\t\tif(this.$options && this.$options.router){ // 有配置而且引入路由\n\t\t\t\tthis._root = this\n\t\t\t\tthis._router = this.$option.router\n\n\t\t\t\tVue.util.defineReactive(this,'current',this._router.history)\n\t\t\t}else{\n\t\t\t\tthis._root = this.$parent._root\n\t\t\t}\n\t\t\t// 增强健壮性\n\t\t\tObject.defineProperty(this,'$route',{\n\t\t\t\tget(){\n\t\t\t\t\treturn this._root._router\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t})\n\tVue.component('router-view',{\n\t\trender(h){\n\t\t\t// 如何根据当前的current，获取到对应的组件\n\t\t\tlet current = this._self._root._router.history.current\n\t\t\tlet routerMap = this._self._root._router.routeMap\n\t\t\treturn h(routeMap[current])\n\t\t}\n\t})\n}\n```","slug":"Vue-plug-in-development","published":1,"updated":"2020-04-02T03:20:12.428Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs2s0040ooa631by5ajh","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"vue插件开发\"><a href=\"#vue插件开发\" class=\"headerlink\" title=\"vue插件开发\"></a>vue插件开发</h1><blockquote>\n<p>Vue.use({install(Vues){}})</p>\n</blockquote>\n<h2 id=\"Vue-use\"><a href=\"#Vue-use\" class=\"headerlink\" title=\"Vue.use\"></a>Vue.use</h2><p>把给到的内容执行一下<br>举例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Vue.use(a) <span class=\"comment\">// a</span></span><br></pre></td></tr></table></figure>\n<p>有 install 就执行 install</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.install = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Vue.use(a) <span class=\"comment\">// b</span></span><br></pre></td></tr></table></figure>\n<p>再进一步</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.install = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// console.log('b')</span></span><br><span class=\"line\">\tvue.mixin(&#123; <span class=\"comment\">// 抽离公共逻辑 ， 缺点：命名冲突，难以阅读</span></span><br><span class=\"line\">\t\tdata()&#123; <span class=\"comment\">// data数据少的时候可以不用vuex 用mixin</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t\tc:<span class=\"string\">'this is mixin'</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tmethods:&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 混入方法</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 提示性弹窗 原：import 控制 显隐 现在：在根节点引入，通过mixin在方法控制显隐</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 混入生命周期</span></span><br><span class=\"line\">\t\tcreate()&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 所有组件的create生命周期都执行 mixin先执行</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Vue.use(a) <span class=\"comment\">// b</span></span><br></pre></td></tr></table></figure>\n\n<p>vue.util.defineReactive()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue.util.defineReactive()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = &#123;</span><br><span class=\"line\">\ttesta: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\ttest.testa = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">vue.mixin(&#123;</span><br><span class=\"line\">\tbeforeCreate()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.test = test</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>vue.extend vue.util.extend</p>\n<p>vue.util.extend ===&gt; 简单做了个拷贝,拷贝到一起</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue.util.extend(a,b)</span><br></pre></td></tr></table></figure>\n<p>vue.extend ===&gt; 获取到某个对象的实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Constrator = vue.extend(obj)</span><br><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Constrator()</span><br></pre></td></tr></table></figure>\n\n<p>手写vue-router</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// myVueRouter.js</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HistoryRoute</span>()</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.current = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">vueRouter</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(options)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.mode = options.mode || <span class=\"string\">'hash'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.history = <span class=\"keyword\">new</span> HistoryRoute</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.routes = options.routes||[]</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.routesMap = <span class=\"keyword\">this</span>.createMap(<span class=\"keyword\">this</span>.routes)</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.init()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tinit()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.mode == <span class=\"string\">'hash'</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 自动加上 #</span></span><br><span class=\"line\">\t\t\tlocation.hash?<span class=\"string\">\"\"</span>:location.hash=<span class=\"string\">\"/\"</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>,()=&gt;&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.history.current = location.hash.slice(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'hashchange'</span>,()=&gt;&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.history.current = location.hash.slice(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tlocation.pathname?<span class=\"string\">\"\"</span>:location.pathname=<span class=\"string\">\"/\"</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>,()=&gt;&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.history.current = location.hash.pathname</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'popstate'</span>,()=&gt;&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.history.current = location.hash.pathname</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcreateMap(router)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> router.reduce(<span class=\"function\">(<span class=\"params\">memo,current</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\tmemo[current.path] = current.component</span><br><span class=\"line\">\t\t&#125;)\t\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vueRouter.install = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Vue</span>)</span>&#123;</span><br><span class=\"line\">\tVue.mixin(&#123;</span><br><span class=\"line\">\t\tbeforeCreate()&#123; <span class=\"comment\">// 组件还未实例化好</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.$options &amp;&amp; <span class=\"keyword\">this</span>.$options.router)&#123; <span class=\"comment\">// 有配置而且引入路由</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>._root = <span class=\"keyword\">this</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>._router = <span class=\"keyword\">this</span>.$option.router</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tVue.util.defineReactive(<span class=\"keyword\">this</span>,<span class=\"string\">'current'</span>,<span class=\"keyword\">this</span>._router.history)</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>._root = <span class=\"keyword\">this</span>.$parent._root</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 增强健壮性</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>,<span class=\"string\">'$route'</span>,&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._root._router</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tVue.component(<span class=\"string\">'router-view'</span>,&#123;</span><br><span class=\"line\">\t\trender(h)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如何根据当前的current，获取到对应的组件</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> current = <span class=\"keyword\">this</span>._self._root._router.history.current</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> routerMap = <span class=\"keyword\">this</span>._self._root._router.routeMap</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> h(routeMap[current])</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"vue插件开发\"><a href=\"#vue插件开发\" class=\"headerlink\" title=\"vue插件开发\"></a>vue插件开发</h1><blockquote>\n<p>Vue.use({install(Vues){}})</p>\n</blockquote>\n<h2 id=\"Vue-use\"><a href=\"#Vue-use\" class=\"headerlink\" title=\"Vue.use\"></a>Vue.use</h2><p>把给到的内容执行一下<br>举例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Vue.use(a) <span class=\"comment\">// a</span></span><br></pre></td></tr></table></figure>\n<p>有 install 就执行 install</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.install = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Vue.use(a) <span class=\"comment\">// b</span></span><br></pre></td></tr></table></figure>\n<p>再进一步</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.install = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// console.log('b')</span></span><br><span class=\"line\">\tvue.mixin(&#123; <span class=\"comment\">// 抽离公共逻辑 ， 缺点：命名冲突，难以阅读</span></span><br><span class=\"line\">\t\tdata()&#123; <span class=\"comment\">// data数据少的时候可以不用vuex 用mixin</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t\tc:<span class=\"string\">'this is mixin'</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tmethods:&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 混入方法</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 提示性弹窗 原：import 控制 显隐 现在：在根节点引入，通过mixin在方法控制显隐</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 混入生命周期</span></span><br><span class=\"line\">\t\tcreate()&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 所有组件的create生命周期都执行 mixin先执行</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Vue.use(a) <span class=\"comment\">// b</span></span><br></pre></td></tr></table></figure>\n\n<p>vue.util.defineReactive()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue.util.defineReactive()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = &#123;</span><br><span class=\"line\">\ttesta: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\ttest.testa = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">vue.mixin(&#123;</span><br><span class=\"line\">\tbeforeCreate()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.test = test</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>vue.extend vue.util.extend</p>\n<p>vue.util.extend ===&gt; 简单做了个拷贝,拷贝到一起</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue.util.extend(a,b)</span><br></pre></td></tr></table></figure>\n<p>vue.extend ===&gt; 获取到某个对象的实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Constrator = vue.extend(obj)</span><br><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Constrator()</span><br></pre></td></tr></table></figure>\n\n<p>手写vue-router</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// myVueRouter.js</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HistoryRoute</span>()</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.current = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">vueRouter</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(options)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.mode = options.mode || <span class=\"string\">'hash'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.history = <span class=\"keyword\">new</span> HistoryRoute</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.routes = options.routes||[]</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.routesMap = <span class=\"keyword\">this</span>.createMap(<span class=\"keyword\">this</span>.routes)</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.init()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tinit()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.mode == <span class=\"string\">'hash'</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 自动加上 #</span></span><br><span class=\"line\">\t\t\tlocation.hash?<span class=\"string\">\"\"</span>:location.hash=<span class=\"string\">\"/\"</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>,()=&gt;&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.history.current = location.hash.slice(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'hashchange'</span>,()=&gt;&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.history.current = location.hash.slice(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tlocation.pathname?<span class=\"string\">\"\"</span>:location.pathname=<span class=\"string\">\"/\"</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>,()=&gt;&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.history.current = location.hash.pathname</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'popstate'</span>,()=&gt;&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.history.current = location.hash.pathname</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcreateMap(router)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> router.reduce(<span class=\"function\">(<span class=\"params\">memo,current</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\tmemo[current.path] = current.component</span><br><span class=\"line\">\t\t&#125;)\t\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vueRouter.install = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Vue</span>)</span>&#123;</span><br><span class=\"line\">\tVue.mixin(&#123;</span><br><span class=\"line\">\t\tbeforeCreate()&#123; <span class=\"comment\">// 组件还未实例化好</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.$options &amp;&amp; <span class=\"keyword\">this</span>.$options.router)&#123; <span class=\"comment\">// 有配置而且引入路由</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>._root = <span class=\"keyword\">this</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>._router = <span class=\"keyword\">this</span>.$option.router</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tVue.util.defineReactive(<span class=\"keyword\">this</span>,<span class=\"string\">'current'</span>,<span class=\"keyword\">this</span>._router.history)</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>._root = <span class=\"keyword\">this</span>.$parent._root</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 增强健壮性</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>,<span class=\"string\">'$route'</span>,&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._root._router</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tVue.component(<span class=\"string\">'router-view'</span>,&#123;</span><br><span class=\"line\">\t\trender(h)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如何根据当前的current，获取到对应的组件</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> current = <span class=\"keyword\">this</span>._self._root._router.history.current</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> routerMap = <span class=\"keyword\">this</span>._self._root._router.routeMap</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> h(routeMap[current])</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"重拾java开发技能","date":"2019-12-30T13:37:07.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n最近愈发觉得越想往上走，越不能局限在前端开发的领域，再往上走前后端都是通的，最近在知乎上看到一句话，说是到了架构师甚至专家的层面以后，就没有什么前端架构师或者前端专家和后端架构师、后端专家了，只有前端出身的技术专家，和后端出身的技术专家，越往上越注重人的综合能力，当一个人能够解决一个项目的技术选型、架构等工作后，对于公司或者团队来说，那就是个巨大的宝藏。\n<!-- more -->\n\n## 公司这一年\n最近对于自己的发展有一些迷茫，这一年公司前端的发展可以说是几经转折，我自己呢也一直在摇摆到底是做管理还是做技术，也参加了公司组织的部门经理的答辩，在部门前端的管理工作中也切实的了解到自己在为人处事方面不够圆润。所以目前也算是断了从事管理的念头，更希望能在技术上更进一步，前端目前看来已经不算是我的短板，而我的短板就是只会前端，一直在前端周围打转，其实如果不是看了那篇帖子，以及公司对专家岗位的要求，我可能还会更进一步在前端方向深入研究，但目前看更紧急的应该是补充一下后端的开发知识了，于是上周末开始我就开始了java的学习\n\n## 为什么选择java\n为什么选择java作为后端入门，实话讲好多前端开发应该都会问这个问题，明明有更熟悉的nodejs可以作为后端技能进行扩展，我这里的理由是目前大多数公司的包括外面公司的开发人员大都还是以java作为主要语言作为后端编写的选择，另外前端js中好多的设计也是借鉴或者照搬了java中的一些思想，可以说在学习java过程中也会自然而然的提高对js的理解，更重要的是，java相对于其他语言来说资料也更多，上手也更容易，因为这些因素吧，最终我选择了java作为后端的主要学习目标。\n\n## 怎么学习java\njava上大学的时候实际有系统的学过的，只是实习之后就再也没有使用过，如今9年过去了，java对于我可能也只剩下些零星的记忆，说实话刚一开始怎么学，从哪里学让我都有点无从下手，这里还要感谢一下我后端的开发伙伴，给了我很多很好的建议，看书的话大都是基础的太基础，实战的又经常忽略基础，最终我打算还是以视频教程2.5倍速快速过一遍java基础，然后再深入学习一下springboot框架，最后再进行实战，以此掌握java开发技能。\n\n### 开始学习java\n最终我选择了在B站上看黑马的java基础+实战课程的教学视频，说实话黑马的教学视频还是讲的很仔细的，老师讲的也很有趣，只是一节课10多分钟，只有一个知识点，对于我来说还是有些慢，所以我就开了2.5倍速加快进就这么着看，上周末两天时间，看了130多课，今天的内容记忆不太深刻，趁着不是那么忙又看了30多课，感觉收获还是满满的，接下来的每一天都会看上30课左右，希望自己能在3个月的时间完全上手java开发，相信我可以做到。\n\n## 立个Flag\n从今天起，每天都要把自己学习的进度做个总结，看看这一天自己收获了多少，希望30岁这年我重新起步，迈向更高更好的未来。","source":"_posts/begin-learn-java.md","raw":"---\ntitle: 重拾java开发技能\ndate: 2019-12-30 21:37:07\ncategories: \n\t- 杂记随感\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n最近愈发觉得越想往上走，越不能局限在前端开发的领域，再往上走前后端都是通的，最近在知乎上看到一句话，说是到了架构师甚至专家的层面以后，就没有什么前端架构师或者前端专家和后端架构师、后端专家了，只有前端出身的技术专家，和后端出身的技术专家，越往上越注重人的综合能力，当一个人能够解决一个项目的技术选型、架构等工作后，对于公司或者团队来说，那就是个巨大的宝藏。\n<!-- more -->\n\n## 公司这一年\n最近对于自己的发展有一些迷茫，这一年公司前端的发展可以说是几经转折，我自己呢也一直在摇摆到底是做管理还是做技术，也参加了公司组织的部门经理的答辩，在部门前端的管理工作中也切实的了解到自己在为人处事方面不够圆润。所以目前也算是断了从事管理的念头，更希望能在技术上更进一步，前端目前看来已经不算是我的短板，而我的短板就是只会前端，一直在前端周围打转，其实如果不是看了那篇帖子，以及公司对专家岗位的要求，我可能还会更进一步在前端方向深入研究，但目前看更紧急的应该是补充一下后端的开发知识了，于是上周末开始我就开始了java的学习\n\n## 为什么选择java\n为什么选择java作为后端入门，实话讲好多前端开发应该都会问这个问题，明明有更熟悉的nodejs可以作为后端技能进行扩展，我这里的理由是目前大多数公司的包括外面公司的开发人员大都还是以java作为主要语言作为后端编写的选择，另外前端js中好多的设计也是借鉴或者照搬了java中的一些思想，可以说在学习java过程中也会自然而然的提高对js的理解，更重要的是，java相对于其他语言来说资料也更多，上手也更容易，因为这些因素吧，最终我选择了java作为后端的主要学习目标。\n\n## 怎么学习java\njava上大学的时候实际有系统的学过的，只是实习之后就再也没有使用过，如今9年过去了，java对于我可能也只剩下些零星的记忆，说实话刚一开始怎么学，从哪里学让我都有点无从下手，这里还要感谢一下我后端的开发伙伴，给了我很多很好的建议，看书的话大都是基础的太基础，实战的又经常忽略基础，最终我打算还是以视频教程2.5倍速快速过一遍java基础，然后再深入学习一下springboot框架，最后再进行实战，以此掌握java开发技能。\n\n### 开始学习java\n最终我选择了在B站上看黑马的java基础+实战课程的教学视频，说实话黑马的教学视频还是讲的很仔细的，老师讲的也很有趣，只是一节课10多分钟，只有一个知识点，对于我来说还是有些慢，所以我就开了2.5倍速加快进就这么着看，上周末两天时间，看了130多课，今天的内容记忆不太深刻，趁着不是那么忙又看了30多课，感觉收获还是满满的，接下来的每一天都会看上30课左右，希望自己能在3个月的时间完全上手java开发，相信我可以做到。\n\n## 立个Flag\n从今天起，每天都要把自己学习的进度做个总结，看看这一天自己收获了多少，希望30岁这年我重新起步，迈向更高更好的未来。","slug":"begin-learn-java","published":1,"updated":"2020-04-02T03:20:12.433Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs2z0043ooa652ocakjr","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近愈发觉得越想往上走，越不能局限在前端开发的领域，再往上走前后端都是通的，最近在知乎上看到一句话，说是到了架构师甚至专家的层面以后，就没有什么前端架构师或者前端专家和后端架构师、后端专家了，只有前端出身的技术专家，和后端出身的技术专家，越往上越注重人的综合能力，当一个人能够解决一个项目的技术选型、架构等工作后，对于公司或者团队来说，那就是个巨大的宝藏。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"公司这一年\"><a href=\"#公司这一年\" class=\"headerlink\" title=\"公司这一年\"></a>公司这一年</h2><p>最近对于自己的发展有一些迷茫，这一年公司前端的发展可以说是几经转折，我自己呢也一直在摇摆到底是做管理还是做技术，也参加了公司组织的部门经理的答辩，在部门前端的管理工作中也切实的了解到自己在为人处事方面不够圆润。所以目前也算是断了从事管理的念头，更希望能在技术上更进一步，前端目前看来已经不算是我的短板，而我的短板就是只会前端，一直在前端周围打转，其实如果不是看了那篇帖子，以及公司对专家岗位的要求，我可能还会更进一步在前端方向深入研究，但目前看更紧急的应该是补充一下后端的开发知识了，于是上周末开始我就开始了java的学习</p>\n<h2 id=\"为什么选择java\"><a href=\"#为什么选择java\" class=\"headerlink\" title=\"为什么选择java\"></a>为什么选择java</h2><p>为什么选择java作为后端入门，实话讲好多前端开发应该都会问这个问题，明明有更熟悉的nodejs可以作为后端技能进行扩展，我这里的理由是目前大多数公司的包括外面公司的开发人员大都还是以java作为主要语言作为后端编写的选择，另外前端js中好多的设计也是借鉴或者照搬了java中的一些思想，可以说在学习java过程中也会自然而然的提高对js的理解，更重要的是，java相对于其他语言来说资料也更多，上手也更容易，因为这些因素吧，最终我选择了java作为后端的主要学习目标。</p>\n<h2 id=\"怎么学习java\"><a href=\"#怎么学习java\" class=\"headerlink\" title=\"怎么学习java\"></a>怎么学习java</h2><p>java上大学的时候实际有系统的学过的，只是实习之后就再也没有使用过，如今9年过去了，java对于我可能也只剩下些零星的记忆，说实话刚一开始怎么学，从哪里学让我都有点无从下手，这里还要感谢一下我后端的开发伙伴，给了我很多很好的建议，看书的话大都是基础的太基础，实战的又经常忽略基础，最终我打算还是以视频教程2.5倍速快速过一遍java基础，然后再深入学习一下springboot框架，最后再进行实战，以此掌握java开发技能。</p>\n<h3 id=\"开始学习java\"><a href=\"#开始学习java\" class=\"headerlink\" title=\"开始学习java\"></a>开始学习java</h3><p>最终我选择了在B站上看黑马的java基础+实战课程的教学视频，说实话黑马的教学视频还是讲的很仔细的，老师讲的也很有趣，只是一节课10多分钟，只有一个知识点，对于我来说还是有些慢，所以我就开了2.5倍速加快进就这么着看，上周末两天时间，看了130多课，今天的内容记忆不太深刻，趁着不是那么忙又看了30多课，感觉收获还是满满的，接下来的每一天都会看上30课左右，希望自己能在3个月的时间完全上手java开发，相信我可以做到。</p>\n<h2 id=\"立个Flag\"><a href=\"#立个Flag\" class=\"headerlink\" title=\"立个Flag\"></a>立个Flag</h2><p>从今天起，每天都要把自己学习的进度做个总结，看看这一天自己收获了多少，希望30岁这年我重新起步，迈向更高更好的未来。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近愈发觉得越想往上走，越不能局限在前端开发的领域，再往上走前后端都是通的，最近在知乎上看到一句话，说是到了架构师甚至专家的层面以后，就没有什么前端架构师或者前端专家和后端架构师、后端专家了，只有前端出身的技术专家，和后端出身的技术专家，越往上越注重人的综合能力，当一个人能够解决一个项目的技术选型、架构等工作后，对于公司或者团队来说，那就是个巨大的宝藏。</p>","more":"<h2 id=\"公司这一年\"><a href=\"#公司这一年\" class=\"headerlink\" title=\"公司这一年\"></a>公司这一年</h2><p>最近对于自己的发展有一些迷茫，这一年公司前端的发展可以说是几经转折，我自己呢也一直在摇摆到底是做管理还是做技术，也参加了公司组织的部门经理的答辩，在部门前端的管理工作中也切实的了解到自己在为人处事方面不够圆润。所以目前也算是断了从事管理的念头，更希望能在技术上更进一步，前端目前看来已经不算是我的短板，而我的短板就是只会前端，一直在前端周围打转，其实如果不是看了那篇帖子，以及公司对专家岗位的要求，我可能还会更进一步在前端方向深入研究，但目前看更紧急的应该是补充一下后端的开发知识了，于是上周末开始我就开始了java的学习</p>\n<h2 id=\"为什么选择java\"><a href=\"#为什么选择java\" class=\"headerlink\" title=\"为什么选择java\"></a>为什么选择java</h2><p>为什么选择java作为后端入门，实话讲好多前端开发应该都会问这个问题，明明有更熟悉的nodejs可以作为后端技能进行扩展，我这里的理由是目前大多数公司的包括外面公司的开发人员大都还是以java作为主要语言作为后端编写的选择，另外前端js中好多的设计也是借鉴或者照搬了java中的一些思想，可以说在学习java过程中也会自然而然的提高对js的理解，更重要的是，java相对于其他语言来说资料也更多，上手也更容易，因为这些因素吧，最终我选择了java作为后端的主要学习目标。</p>\n<h2 id=\"怎么学习java\"><a href=\"#怎么学习java\" class=\"headerlink\" title=\"怎么学习java\"></a>怎么学习java</h2><p>java上大学的时候实际有系统的学过的，只是实习之后就再也没有使用过，如今9年过去了，java对于我可能也只剩下些零星的记忆，说实话刚一开始怎么学，从哪里学让我都有点无从下手，这里还要感谢一下我后端的开发伙伴，给了我很多很好的建议，看书的话大都是基础的太基础，实战的又经常忽略基础，最终我打算还是以视频教程2.5倍速快速过一遍java基础，然后再深入学习一下springboot框架，最后再进行实战，以此掌握java开发技能。</p>\n<h3 id=\"开始学习java\"><a href=\"#开始学习java\" class=\"headerlink\" title=\"开始学习java\"></a>开始学习java</h3><p>最终我选择了在B站上看黑马的java基础+实战课程的教学视频，说实话黑马的教学视频还是讲的很仔细的，老师讲的也很有趣，只是一节课10多分钟，只有一个知识点，对于我来说还是有些慢，所以我就开了2.5倍速加快进就这么着看，上周末两天时间，看了130多课，今天的内容记忆不太深刻，趁着不是那么忙又看了30多课，感觉收获还是满满的，接下来的每一天都会看上30课左右，希望自己能在3个月的时间完全上手java开发，相信我可以做到。</p>\n<h2 id=\"立个Flag\"><a href=\"#立个Flag\" class=\"headerlink\" title=\"立个Flag\"></a>立个Flag</h2><p>从今天起，每天都要把自己学习的进度做个总结，看看这一天自己收获了多少，希望30岁这年我重新起步，迈向更高更好的未来。</p>"},{"title":"webpack中loader和plugin之间的区别","date":"2020-01-22T10:38:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n最近在学习Webpack相关的知识的时候对loader和plugin有点迷惑，两个特性都是用来做打包相关处理，那么他们有什么区别呢，为了弄清楚他们有什么区别，我开始了疯狂的查找资料，虽说每篇文章都说了一些自己的认识，但是并没有一个特别标准或者说容易理解的答案，我且先将它们记录下来，以便日后回顾之时可以有一些感触。那么接下来我将开始webpack的解迷之旅。\n\n<!-- more -->\n\n# 背景知识\n在研究loader和plugin之前区别之前，我们先来看看一个webpack配置的常见结构\n``` js\n// js代码\n\nconst webpack = require(\"webpack\");\nconst path = require(\"path\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nmodule.exports = {\n  // 入口文件\n  entry: {\n    app: path.join(__dirname, \"../src/js/index.js\")\n  },\n  // 输出文件\n  output: {\n    filename: \"[name].bundle.js\",\n    path: path.resolve(__dirname, \"dist\"),\n    publicPath: \"/\"\n  },\n  // loader配置\n  module: {\n    rules: [\n      {\n        test: /\\.scss/,\n        use: [\n          \"style-loader\",\n          \"css-loader\"\n        ]\n      }\n      ......\n    ]\n  },\n  // plugins配置\n  plugins: [\n    // 重新创建html文件\n    new HtmlWebpackPlugin({\n      title: \"首页\",\n      filename: \"index.html\",\n      template: path.resolve(__dirname, \"../src/index.html\")\n    })\n    ......\n  ]\n}\n```\n***webpack的打包原理***\n\n- 识别入口文件\n- 通过逐层识别模块依赖(Commonjs、amd或者es6的import，webpack都会对其进行分析，来获取代码的依赖)\n- webpack做的就是分析代码，转换代码，编译代码，输出代码\n- 最终形成打包后的代码\n\n## 什么是loader\n我们可以看到loader实际上是在module的rules下，用对象的方式表示了需要处理的文件类型，和需要用哪些loader做处理\n\n> loader是文件加载器，能够加载资源文件，并对这些文件进行一些处理，诸如编译、压缩等，最终一起打包到指定的文件中。\n\n- 处理一个文件可以使用多个loader，loader的执行顺序和配置中的顺序是相反的，即最后一个loader最先执行，第一个loader最后执行\n- 第一个执行的loader接收源文件内容作为参数，其它loader接收前一个执行的loader的返回值作为参数，最后执行的loader会返回此模块的JavaScript源码\n\n## 什么是plugin\n> 在webpack运行的生命周期中会广播出许多事件，plugin可以监听这些事件，在合适的时机通过webpack提供的API改变输出结果。\n\n## loader和plugin的区别\n\n对于loader，它是一个转换器，将A文件进行编译形成B文件，这里操作的是文件，比如将A.scss转换为A.css，单纯的**文件转换过程**\n\n**plugin是一个扩展器，它丰富了webpack本身，针对是loader结束后，webpack打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听webpack打包过程中的某些节点，执行广泛的任务**\n\n下面我们来看一个例子：\n``` js\n// js代码\n\nclass MyPlugin{\n  constructor(options){\n    console.log(\"MyPlugin constructor:\", options);\n  }\n  apply(compiler){\n    compiler.plugin(\"compilation\", compilation => {\n      console.log(\"MyPlugin\");\n    });\n  }\n}\nmodule.exports = MyPlugin;\n \n// webpack.config.js配置：\nmodule.exports = {\n  ...\n  plugins: [\n    new MyPlugin({param: \"my plugin\"})\n  ]\n}\n```\n\n使用该plugin后，执行的顺序：\n\n1. webpack启动后，在读取配置的过程中会执行new MyPlugin(options)初始化一个MyPlugin获取其实例\n2. 在初始化compiler对象后，就会通过compiler.plugin(事件名称，回调函数)监听到webpack广播出来的事件\n3. 并且可以通过compiler对象去操作webpack","source":"_posts/Wepack-Tips.md","raw":"---\ntitle: webpack中loader和plugin之间的区别\ndate: 2020-01-22 18:38:00\ncategories: \n\t- 前端工程化\n\t- Webpack\ntags: \n\t- 面试\n\t- 知识点\n---\n> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n最近在学习Webpack相关的知识的时候对loader和plugin有点迷惑，两个特性都是用来做打包相关处理，那么他们有什么区别呢，为了弄清楚他们有什么区别，我开始了疯狂的查找资料，虽说每篇文章都说了一些自己的认识，但是并没有一个特别标准或者说容易理解的答案，我且先将它们记录下来，以便日后回顾之时可以有一些感触。那么接下来我将开始webpack的解迷之旅。\n\n<!-- more -->\n\n# 背景知识\n在研究loader和plugin之前区别之前，我们先来看看一个webpack配置的常见结构\n``` js\n// js代码\n\nconst webpack = require(\"webpack\");\nconst path = require(\"path\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nmodule.exports = {\n  // 入口文件\n  entry: {\n    app: path.join(__dirname, \"../src/js/index.js\")\n  },\n  // 输出文件\n  output: {\n    filename: \"[name].bundle.js\",\n    path: path.resolve(__dirname, \"dist\"),\n    publicPath: \"/\"\n  },\n  // loader配置\n  module: {\n    rules: [\n      {\n        test: /\\.scss/,\n        use: [\n          \"style-loader\",\n          \"css-loader\"\n        ]\n      }\n      ......\n    ]\n  },\n  // plugins配置\n  plugins: [\n    // 重新创建html文件\n    new HtmlWebpackPlugin({\n      title: \"首页\",\n      filename: \"index.html\",\n      template: path.resolve(__dirname, \"../src/index.html\")\n    })\n    ......\n  ]\n}\n```\n***webpack的打包原理***\n\n- 识别入口文件\n- 通过逐层识别模块依赖(Commonjs、amd或者es6的import，webpack都会对其进行分析，来获取代码的依赖)\n- webpack做的就是分析代码，转换代码，编译代码，输出代码\n- 最终形成打包后的代码\n\n## 什么是loader\n我们可以看到loader实际上是在module的rules下，用对象的方式表示了需要处理的文件类型，和需要用哪些loader做处理\n\n> loader是文件加载器，能够加载资源文件，并对这些文件进行一些处理，诸如编译、压缩等，最终一起打包到指定的文件中。\n\n- 处理一个文件可以使用多个loader，loader的执行顺序和配置中的顺序是相反的，即最后一个loader最先执行，第一个loader最后执行\n- 第一个执行的loader接收源文件内容作为参数，其它loader接收前一个执行的loader的返回值作为参数，最后执行的loader会返回此模块的JavaScript源码\n\n## 什么是plugin\n> 在webpack运行的生命周期中会广播出许多事件，plugin可以监听这些事件，在合适的时机通过webpack提供的API改变输出结果。\n\n## loader和plugin的区别\n\n对于loader，它是一个转换器，将A文件进行编译形成B文件，这里操作的是文件，比如将A.scss转换为A.css，单纯的**文件转换过程**\n\n**plugin是一个扩展器，它丰富了webpack本身，针对是loader结束后，webpack打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听webpack打包过程中的某些节点，执行广泛的任务**\n\n下面我们来看一个例子：\n``` js\n// js代码\n\nclass MyPlugin{\n  constructor(options){\n    console.log(\"MyPlugin constructor:\", options);\n  }\n  apply(compiler){\n    compiler.plugin(\"compilation\", compilation => {\n      console.log(\"MyPlugin\");\n    });\n  }\n}\nmodule.exports = MyPlugin;\n \n// webpack.config.js配置：\nmodule.exports = {\n  ...\n  plugins: [\n    new MyPlugin({param: \"my plugin\"})\n  ]\n}\n```\n\n使用该plugin后，执行的顺序：\n\n1. webpack启动后，在读取配置的过程中会执行new MyPlugin(options)初始化一个MyPlugin获取其实例\n2. 在初始化compiler对象后，就会通过compiler.plugin(事件名称，回调函数)监听到webpack广播出来的事件\n3. 并且可以通过compiler对象去操作webpack","slug":"Wepack-Tips","published":1,"updated":"2020-04-02T03:20:12.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs320046ooa6bl6z24qm","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在学习Webpack相关的知识的时候对loader和plugin有点迷惑，两个特性都是用来做打包相关处理，那么他们有什么区别呢，为了弄清楚他们有什么区别，我开始了疯狂的查找资料，虽说每篇文章都说了一些自己的认识，但是并没有一个特别标准或者说容易理解的答案，我且先将它们记录下来，以便日后回顾之时可以有一些感触。那么接下来我将开始webpack的解迷之旅。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"背景知识\"><a href=\"#背景知识\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h1><p>在研究loader和plugin之前区别之前，我们先来看看一个webpack配置的常见结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"html-webpack-plugin\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: path.join(__dirname, <span class=\"string\">\"../src/js/index.js\"</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 输出文件</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">\"[name].bundle.js\"</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">\"dist\"</span>),</span><br><span class=\"line\">    publicPath: <span class=\"string\">\"/\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// loader配置</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"css-loader\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ......</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// plugins配置</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">// 重新创建html文件</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      title: <span class=\"string\">\"首页\"</span>,</span><br><span class=\"line\">      filename: <span class=\"string\">\"index.html\"</span>,</span><br><span class=\"line\">      template: path.resolve(__dirname, <span class=\"string\">\"../src/index.html\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ......</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>webpack的打包原理</em></strong></p>\n<ul>\n<li>识别入口文件</li>\n<li>通过逐层识别模块依赖(Commonjs、amd或者es6的import，webpack都会对其进行分析，来获取代码的依赖)</li>\n<li>webpack做的就是分析代码，转换代码，编译代码，输出代码</li>\n<li>最终形成打包后的代码</li>\n</ul>\n<h2 id=\"什么是loader\"><a href=\"#什么是loader\" class=\"headerlink\" title=\"什么是loader\"></a>什么是loader</h2><p>我们可以看到loader实际上是在module的rules下，用对象的方式表示了需要处理的文件类型，和需要用哪些loader做处理</p>\n<blockquote>\n<p>loader是文件加载器，能够加载资源文件，并对这些文件进行一些处理，诸如编译、压缩等，最终一起打包到指定的文件中。</p>\n</blockquote>\n<ul>\n<li>处理一个文件可以使用多个loader，loader的执行顺序和配置中的顺序是相反的，即最后一个loader最先执行，第一个loader最后执行</li>\n<li>第一个执行的loader接收源文件内容作为参数，其它loader接收前一个执行的loader的返回值作为参数，最后执行的loader会返回此模块的JavaScript源码</li>\n</ul>\n<h2 id=\"什么是plugin\"><a href=\"#什么是plugin\" class=\"headerlink\" title=\"什么是plugin\"></a>什么是plugin</h2><blockquote>\n<p>在webpack运行的生命周期中会广播出许多事件，plugin可以监听这些事件，在合适的时机通过webpack提供的API改变输出结果。</p>\n</blockquote>\n<h2 id=\"loader和plugin的区别\"><a href=\"#loader和plugin的区别\" class=\"headerlink\" title=\"loader和plugin的区别\"></a>loader和plugin的区别</h2><p>对于loader，它是一个转换器，将A文件进行编译形成B文件，这里操作的是文件，比如将A.scss转换为A.css，单纯的<strong>文件转换过程</strong></p>\n<p><strong>plugin是一个扩展器，它丰富了webpack本身，针对是loader结束后，webpack打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听webpack打包过程中的某些节点，执行广泛的任务</strong></p>\n<p>下面我们来看一个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPlugin</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(options)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"MyPlugin constructor:\"</span>, options);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  apply(compiler)&#123;</span><br><span class=\"line\">    compiler.plugin(<span class=\"string\">\"compilation\"</span>, compilation =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"MyPlugin\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = MyPlugin;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js配置：</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MyPlugin(&#123;<span class=\"attr\">param</span>: <span class=\"string\">\"my plugin\"</span>&#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用该plugin后，执行的顺序：</p>\n<ol>\n<li>webpack启动后，在读取配置的过程中会执行new MyPlugin(options)初始化一个MyPlugin获取其实例</li>\n<li>在初始化compiler对象后，就会通过compiler.plugin(事件名称，回调函数)监听到webpack广播出来的事件</li>\n<li>并且可以通过compiler对象去操作webpack</li>\n</ol>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在学习Webpack相关的知识的时候对loader和plugin有点迷惑，两个特性都是用来做打包相关处理，那么他们有什么区别呢，为了弄清楚他们有什么区别，我开始了疯狂的查找资料，虽说每篇文章都说了一些自己的认识，但是并没有一个特别标准或者说容易理解的答案，我且先将它们记录下来，以便日后回顾之时可以有一些感触。那么接下来我将开始webpack的解迷之旅。</p>","more":"<h1 id=\"背景知识\"><a href=\"#背景知识\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h1><p>在研究loader和plugin之前区别之前，我们先来看看一个webpack配置的常见结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"html-webpack-plugin\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: path.join(__dirname, <span class=\"string\">\"../src/js/index.js\"</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 输出文件</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">\"[name].bundle.js\"</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">\"dist\"</span>),</span><br><span class=\"line\">    publicPath: <span class=\"string\">\"/\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// loader配置</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"css-loader\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ......</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// plugins配置</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">// 重新创建html文件</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      title: <span class=\"string\">\"首页\"</span>,</span><br><span class=\"line\">      filename: <span class=\"string\">\"index.html\"</span>,</span><br><span class=\"line\">      template: path.resolve(__dirname, <span class=\"string\">\"../src/index.html\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ......</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>webpack的打包原理</em></strong></p>\n<ul>\n<li>识别入口文件</li>\n<li>通过逐层识别模块依赖(Commonjs、amd或者es6的import，webpack都会对其进行分析，来获取代码的依赖)</li>\n<li>webpack做的就是分析代码，转换代码，编译代码，输出代码</li>\n<li>最终形成打包后的代码</li>\n</ul>\n<h2 id=\"什么是loader\"><a href=\"#什么是loader\" class=\"headerlink\" title=\"什么是loader\"></a>什么是loader</h2><p>我们可以看到loader实际上是在module的rules下，用对象的方式表示了需要处理的文件类型，和需要用哪些loader做处理</p>\n<blockquote>\n<p>loader是文件加载器，能够加载资源文件，并对这些文件进行一些处理，诸如编译、压缩等，最终一起打包到指定的文件中。</p>\n</blockquote>\n<ul>\n<li>处理一个文件可以使用多个loader，loader的执行顺序和配置中的顺序是相反的，即最后一个loader最先执行，第一个loader最后执行</li>\n<li>第一个执行的loader接收源文件内容作为参数，其它loader接收前一个执行的loader的返回值作为参数，最后执行的loader会返回此模块的JavaScript源码</li>\n</ul>\n<h2 id=\"什么是plugin\"><a href=\"#什么是plugin\" class=\"headerlink\" title=\"什么是plugin\"></a>什么是plugin</h2><blockquote>\n<p>在webpack运行的生命周期中会广播出许多事件，plugin可以监听这些事件，在合适的时机通过webpack提供的API改变输出结果。</p>\n</blockquote>\n<h2 id=\"loader和plugin的区别\"><a href=\"#loader和plugin的区别\" class=\"headerlink\" title=\"loader和plugin的区别\"></a>loader和plugin的区别</h2><p>对于loader，它是一个转换器，将A文件进行编译形成B文件，这里操作的是文件，比如将A.scss转换为A.css，单纯的<strong>文件转换过程</strong></p>\n<p><strong>plugin是一个扩展器，它丰富了webpack本身，针对是loader结束后，webpack打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听webpack打包过程中的某些节点，执行广泛的任务</strong></p>\n<p>下面我们来看一个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPlugin</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(options)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"MyPlugin constructor:\"</span>, options);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  apply(compiler)&#123;</span><br><span class=\"line\">    compiler.plugin(<span class=\"string\">\"compilation\"</span>, compilation =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"MyPlugin\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = MyPlugin;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js配置：</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MyPlugin(&#123;<span class=\"attr\">param</span>: <span class=\"string\">\"my plugin\"</span>&#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用该plugin后，执行的顺序：</p>\n<ol>\n<li>webpack启动后，在读取配置的过程中会执行new MyPlugin(options)初始化一个MyPlugin获取其实例</li>\n<li>在初始化compiler对象后，就会通过compiler.plugin(事件名称，回调函数)监听到webpack广播出来的事件</li>\n<li>并且可以通过compiler对象去操作webpack</li>\n</ol>"},{"title":"如何正确使用时间[转载]","date":"2020-01-09T08:33:22.000Z","_content":"# 前言\n最近各种技术博客，各种技术文章，各种牛人前辈的学习心得都在看，最近看了一个不错的文章叫做《如何正确使用时间》\n感觉还是很不错的，特别适合年轻的程序员看一下。下面将全文贴在下方，如果需要也可以去原文查看。\n\n[原文](http://caibaojian.com/interview-map/career/)\n\n你是否时常会焦虑时间过的很快，没时间学习，本文将会分享一些个人的见解。\n\n## 花时间补基础，读文档\n在工作中我们时常会花很多时间去 debug，但是你是否发现很多问题最终只是你基础不扎实或者文档没有仔细看。\n\n基础是你技术的基石，一定要花时间打好基础，而不是追各种新的技术。一旦你的基础扎实，学习各种新的技术也肯定不在话下，因为新的技术，究其根本都是相通的。\n\n文档同样也是一门技术的基础。一个优秀的库，开发人员肯定已经把如何使用这个库都写在文档中了，仔细阅读文档一定会是少写 bug 的最省事路子。\n\n## 学会搜索\n如果你还在使用百度搜索编程问题，请尽快抛弃这个垃圾搜索引擎。同样一个关键字，使用百度和谷歌，谷歌基本完胜的。即使你使用中文在谷歌中搜索，得到的结果也往往是谷歌占优，所以如果你想迅速的通过搜索引擎来解决问题，那一定是谷歌。\n\n## 学点英语\n说到英语，一定是大家所最不想听的。其实我一直认为程序员学习英语是简单的，因为我们工作中是一直接触着英语，并且看懂技术文章，文档所需要的单词量是极少的。我时常在群里看到大家发出一个问题的截图问什么原因，其实在截图中英语已经很明白的说明了问题的所在，如果你的英语过关，完全不需要浪费时间来提问和搜索。所以我认为学点英语也是节省时间中很重要的一点。\n\n那么如何去学习呢，chrome 装个翻译插件，直接拿英文文档或文章读，不会的就直接划词翻译，然后记录下这个单词并背诵。每天花半小时看点英文文档和文章，坚持两个月，你的英语水平不说别的，看文档和文章绝对不会有难题了。这一定是一个很划算的个人时间投资，花点时间学习英语，能为你将来的技术之路铺平很多坎。\n\n## 画个图，想一想再做\n你是否遇到过这种问题，需求一下来，看一眼，然后马上就按照设计稿开始做了，可能中间出个问题导致你需要返工。\n\n如果你存在这样的问题，我很推荐在看到设计稿和需求的时候花点时间想一想，画一画。考虑一下设计稿中是否可以找到可以拆分出来的复用组件，是否存在之前写过的组件。该如何组织这个界面，数据的流转是怎么样的。然后画一下这个页面的需求，最后再动手做。\n\n## 利用好下班时间学习\n说到下班时间，那可能就有人说了公司很迟下班，这其实是国内很普遍的情况。但是我认为正常的加班是可以的，但是强制的加班就是在损耗你的身体和前途。\n\n可以这么说，大部分的 996 公司，加班的这些时间并不会增加你的技术，无非就是在写一些重复的业务逻辑。也许你可以拿到更多的钱，但是代价是身体还有前途。程序员是靠技术吃饭的，如果你长久呆在一个长时间加班的公司，不能增长你的技术还要吞噬你的下班学习时间，那么你一定会废掉的。如果你遇到了这种情况，只能推荐尽快跳槽到非 996 的公司。\n\n那么如果你有足够的下班时间，一定要花上 1， 2 小时去学习，上班大家基本都一样，技术的精进就是看下班以后的那几个小时了。如果你能利用好下班时间来学习，坚持下去，时间一定会给你很好的答复。\n\n## 列好 ToDo\n我喜欢规划好一段时间内要做的事情，并且要把事情拆分为小点。给 ToDo 列好优先级，紧急的优先级最高。相同优先级的我喜欢先做简单的，因为这样一旦完成就能划掉一个，提高成就感。\n\n## 反思和整理\n每周末都会花上点时间整理下本周记录的笔记和看到的不错文章。然后考虑下本周完成的工作和下周准备要完成的工作。","source":"_posts/career.md","raw":"---\ntitle: 如何正确使用时间[转载]\ndate: 2020-01-09 16:33:22\ncategories: \n\t- 自我提升\ntags: \n\t- 经验之谈\n---\n# 前言\n最近各种技术博客，各种技术文章，各种牛人前辈的学习心得都在看，最近看了一个不错的文章叫做《如何正确使用时间》\n感觉还是很不错的，特别适合年轻的程序员看一下。下面将全文贴在下方，如果需要也可以去原文查看。\n\n[原文](http://caibaojian.com/interview-map/career/)\n\n你是否时常会焦虑时间过的很快，没时间学习，本文将会分享一些个人的见解。\n\n## 花时间补基础，读文档\n在工作中我们时常会花很多时间去 debug，但是你是否发现很多问题最终只是你基础不扎实或者文档没有仔细看。\n\n基础是你技术的基石，一定要花时间打好基础，而不是追各种新的技术。一旦你的基础扎实，学习各种新的技术也肯定不在话下，因为新的技术，究其根本都是相通的。\n\n文档同样也是一门技术的基础。一个优秀的库，开发人员肯定已经把如何使用这个库都写在文档中了，仔细阅读文档一定会是少写 bug 的最省事路子。\n\n## 学会搜索\n如果你还在使用百度搜索编程问题，请尽快抛弃这个垃圾搜索引擎。同样一个关键字，使用百度和谷歌，谷歌基本完胜的。即使你使用中文在谷歌中搜索，得到的结果也往往是谷歌占优，所以如果你想迅速的通过搜索引擎来解决问题，那一定是谷歌。\n\n## 学点英语\n说到英语，一定是大家所最不想听的。其实我一直认为程序员学习英语是简单的，因为我们工作中是一直接触着英语，并且看懂技术文章，文档所需要的单词量是极少的。我时常在群里看到大家发出一个问题的截图问什么原因，其实在截图中英语已经很明白的说明了问题的所在，如果你的英语过关，完全不需要浪费时间来提问和搜索。所以我认为学点英语也是节省时间中很重要的一点。\n\n那么如何去学习呢，chrome 装个翻译插件，直接拿英文文档或文章读，不会的就直接划词翻译，然后记录下这个单词并背诵。每天花半小时看点英文文档和文章，坚持两个月，你的英语水平不说别的，看文档和文章绝对不会有难题了。这一定是一个很划算的个人时间投资，花点时间学习英语，能为你将来的技术之路铺平很多坎。\n\n## 画个图，想一想再做\n你是否遇到过这种问题，需求一下来，看一眼，然后马上就按照设计稿开始做了，可能中间出个问题导致你需要返工。\n\n如果你存在这样的问题，我很推荐在看到设计稿和需求的时候花点时间想一想，画一画。考虑一下设计稿中是否可以找到可以拆分出来的复用组件，是否存在之前写过的组件。该如何组织这个界面，数据的流转是怎么样的。然后画一下这个页面的需求，最后再动手做。\n\n## 利用好下班时间学习\n说到下班时间，那可能就有人说了公司很迟下班，这其实是国内很普遍的情况。但是我认为正常的加班是可以的，但是强制的加班就是在损耗你的身体和前途。\n\n可以这么说，大部分的 996 公司，加班的这些时间并不会增加你的技术，无非就是在写一些重复的业务逻辑。也许你可以拿到更多的钱，但是代价是身体还有前途。程序员是靠技术吃饭的，如果你长久呆在一个长时间加班的公司，不能增长你的技术还要吞噬你的下班学习时间，那么你一定会废掉的。如果你遇到了这种情况，只能推荐尽快跳槽到非 996 的公司。\n\n那么如果你有足够的下班时间，一定要花上 1， 2 小时去学习，上班大家基本都一样，技术的精进就是看下班以后的那几个小时了。如果你能利用好下班时间来学习，坚持下去，时间一定会给你很好的答复。\n\n## 列好 ToDo\n我喜欢规划好一段时间内要做的事情，并且要把事情拆分为小点。给 ToDo 列好优先级，紧急的优先级最高。相同优先级的我喜欢先做简单的，因为这样一旦完成就能划掉一个，提高成就感。\n\n## 反思和整理\n每周末都会花上点时间整理下本周记录的笔记和看到的不错文章。然后考虑下本周完成的工作和下周准备要完成的工作。","slug":"career","published":1,"updated":"2020-04-02T03:20:12.436Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs38004aooa6ddlyegg1","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近各种技术博客，各种技术文章，各种牛人前辈的学习心得都在看，最近看了一个不错的文章叫做《如何正确使用时间》<br>感觉还是很不错的，特别适合年轻的程序员看一下。下面将全文贴在下方，如果需要也可以去原文查看。</p>\n<p><a href=\"http://caibaojian.com/interview-map/career/\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n<p>你是否时常会焦虑时间过的很快，没时间学习，本文将会分享一些个人的见解。</p>\n<h2 id=\"花时间补基础，读文档\"><a href=\"#花时间补基础，读文档\" class=\"headerlink\" title=\"花时间补基础，读文档\"></a>花时间补基础，读文档</h2><p>在工作中我们时常会花很多时间去 debug，但是你是否发现很多问题最终只是你基础不扎实或者文档没有仔细看。</p>\n<p>基础是你技术的基石，一定要花时间打好基础，而不是追各种新的技术。一旦你的基础扎实，学习各种新的技术也肯定不在话下，因为新的技术，究其根本都是相通的。</p>\n<p>文档同样也是一门技术的基础。一个优秀的库，开发人员肯定已经把如何使用这个库都写在文档中了，仔细阅读文档一定会是少写 bug 的最省事路子。</p>\n<h2 id=\"学会搜索\"><a href=\"#学会搜索\" class=\"headerlink\" title=\"学会搜索\"></a>学会搜索</h2><p>如果你还在使用百度搜索编程问题，请尽快抛弃这个垃圾搜索引擎。同样一个关键字，使用百度和谷歌，谷歌基本完胜的。即使你使用中文在谷歌中搜索，得到的结果也往往是谷歌占优，所以如果你想迅速的通过搜索引擎来解决问题，那一定是谷歌。</p>\n<h2 id=\"学点英语\"><a href=\"#学点英语\" class=\"headerlink\" title=\"学点英语\"></a>学点英语</h2><p>说到英语，一定是大家所最不想听的。其实我一直认为程序员学习英语是简单的，因为我们工作中是一直接触着英语，并且看懂技术文章，文档所需要的单词量是极少的。我时常在群里看到大家发出一个问题的截图问什么原因，其实在截图中英语已经很明白的说明了问题的所在，如果你的英语过关，完全不需要浪费时间来提问和搜索。所以我认为学点英语也是节省时间中很重要的一点。</p>\n<p>那么如何去学习呢，chrome 装个翻译插件，直接拿英文文档或文章读，不会的就直接划词翻译，然后记录下这个单词并背诵。每天花半小时看点英文文档和文章，坚持两个月，你的英语水平不说别的，看文档和文章绝对不会有难题了。这一定是一个很划算的个人时间投资，花点时间学习英语，能为你将来的技术之路铺平很多坎。</p>\n<h2 id=\"画个图，想一想再做\"><a href=\"#画个图，想一想再做\" class=\"headerlink\" title=\"画个图，想一想再做\"></a>画个图，想一想再做</h2><p>你是否遇到过这种问题，需求一下来，看一眼，然后马上就按照设计稿开始做了，可能中间出个问题导致你需要返工。</p>\n<p>如果你存在这样的问题，我很推荐在看到设计稿和需求的时候花点时间想一想，画一画。考虑一下设计稿中是否可以找到可以拆分出来的复用组件，是否存在之前写过的组件。该如何组织这个界面，数据的流转是怎么样的。然后画一下这个页面的需求，最后再动手做。</p>\n<h2 id=\"利用好下班时间学习\"><a href=\"#利用好下班时间学习\" class=\"headerlink\" title=\"利用好下班时间学习\"></a>利用好下班时间学习</h2><p>说到下班时间，那可能就有人说了公司很迟下班，这其实是国内很普遍的情况。但是我认为正常的加班是可以的，但是强制的加班就是在损耗你的身体和前途。</p>\n<p>可以这么说，大部分的 996 公司，加班的这些时间并不会增加你的技术，无非就是在写一些重复的业务逻辑。也许你可以拿到更多的钱，但是代价是身体还有前途。程序员是靠技术吃饭的，如果你长久呆在一个长时间加班的公司，不能增长你的技术还要吞噬你的下班学习时间，那么你一定会废掉的。如果你遇到了这种情况，只能推荐尽快跳槽到非 996 的公司。</p>\n<p>那么如果你有足够的下班时间，一定要花上 1， 2 小时去学习，上班大家基本都一样，技术的精进就是看下班以后的那几个小时了。如果你能利用好下班时间来学习，坚持下去，时间一定会给你很好的答复。</p>\n<h2 id=\"列好-ToDo\"><a href=\"#列好-ToDo\" class=\"headerlink\" title=\"列好 ToDo\"></a>列好 ToDo</h2><p>我喜欢规划好一段时间内要做的事情，并且要把事情拆分为小点。给 ToDo 列好优先级，紧急的优先级最高。相同优先级的我喜欢先做简单的，因为这样一旦完成就能划掉一个，提高成就感。</p>\n<h2 id=\"反思和整理\"><a href=\"#反思和整理\" class=\"headerlink\" title=\"反思和整理\"></a>反思和整理</h2><p>每周末都会花上点时间整理下本周记录的笔记和看到的不错文章。然后考虑下本周完成的工作和下周准备要完成的工作。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近各种技术博客，各种技术文章，各种牛人前辈的学习心得都在看，最近看了一个不错的文章叫做《如何正确使用时间》<br>感觉还是很不错的，特别适合年轻的程序员看一下。下面将全文贴在下方，如果需要也可以去原文查看。</p>\n<p><a href=\"http://caibaojian.com/interview-map/career/\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n<p>你是否时常会焦虑时间过的很快，没时间学习，本文将会分享一些个人的见解。</p>\n<h2 id=\"花时间补基础，读文档\"><a href=\"#花时间补基础，读文档\" class=\"headerlink\" title=\"花时间补基础，读文档\"></a>花时间补基础，读文档</h2><p>在工作中我们时常会花很多时间去 debug，但是你是否发现很多问题最终只是你基础不扎实或者文档没有仔细看。</p>\n<p>基础是你技术的基石，一定要花时间打好基础，而不是追各种新的技术。一旦你的基础扎实，学习各种新的技术也肯定不在话下，因为新的技术，究其根本都是相通的。</p>\n<p>文档同样也是一门技术的基础。一个优秀的库，开发人员肯定已经把如何使用这个库都写在文档中了，仔细阅读文档一定会是少写 bug 的最省事路子。</p>\n<h2 id=\"学会搜索\"><a href=\"#学会搜索\" class=\"headerlink\" title=\"学会搜索\"></a>学会搜索</h2><p>如果你还在使用百度搜索编程问题，请尽快抛弃这个垃圾搜索引擎。同样一个关键字，使用百度和谷歌，谷歌基本完胜的。即使你使用中文在谷歌中搜索，得到的结果也往往是谷歌占优，所以如果你想迅速的通过搜索引擎来解决问题，那一定是谷歌。</p>\n<h2 id=\"学点英语\"><a href=\"#学点英语\" class=\"headerlink\" title=\"学点英语\"></a>学点英语</h2><p>说到英语，一定是大家所最不想听的。其实我一直认为程序员学习英语是简单的，因为我们工作中是一直接触着英语，并且看懂技术文章，文档所需要的单词量是极少的。我时常在群里看到大家发出一个问题的截图问什么原因，其实在截图中英语已经很明白的说明了问题的所在，如果你的英语过关，完全不需要浪费时间来提问和搜索。所以我认为学点英语也是节省时间中很重要的一点。</p>\n<p>那么如何去学习呢，chrome 装个翻译插件，直接拿英文文档或文章读，不会的就直接划词翻译，然后记录下这个单词并背诵。每天花半小时看点英文文档和文章，坚持两个月，你的英语水平不说别的，看文档和文章绝对不会有难题了。这一定是一个很划算的个人时间投资，花点时间学习英语，能为你将来的技术之路铺平很多坎。</p>\n<h2 id=\"画个图，想一想再做\"><a href=\"#画个图，想一想再做\" class=\"headerlink\" title=\"画个图，想一想再做\"></a>画个图，想一想再做</h2><p>你是否遇到过这种问题，需求一下来，看一眼，然后马上就按照设计稿开始做了，可能中间出个问题导致你需要返工。</p>\n<p>如果你存在这样的问题，我很推荐在看到设计稿和需求的时候花点时间想一想，画一画。考虑一下设计稿中是否可以找到可以拆分出来的复用组件，是否存在之前写过的组件。该如何组织这个界面，数据的流转是怎么样的。然后画一下这个页面的需求，最后再动手做。</p>\n<h2 id=\"利用好下班时间学习\"><a href=\"#利用好下班时间学习\" class=\"headerlink\" title=\"利用好下班时间学习\"></a>利用好下班时间学习</h2><p>说到下班时间，那可能就有人说了公司很迟下班，这其实是国内很普遍的情况。但是我认为正常的加班是可以的，但是强制的加班就是在损耗你的身体和前途。</p>\n<p>可以这么说，大部分的 996 公司，加班的这些时间并不会增加你的技术，无非就是在写一些重复的业务逻辑。也许你可以拿到更多的钱，但是代价是身体还有前途。程序员是靠技术吃饭的，如果你长久呆在一个长时间加班的公司，不能增长你的技术还要吞噬你的下班学习时间，那么你一定会废掉的。如果你遇到了这种情况，只能推荐尽快跳槽到非 996 的公司。</p>\n<p>那么如果你有足够的下班时间，一定要花上 1， 2 小时去学习，上班大家基本都一样，技术的精进就是看下班以后的那几个小时了。如果你能利用好下班时间来学习，坚持下去，时间一定会给你很好的答复。</p>\n<h2 id=\"列好-ToDo\"><a href=\"#列好-ToDo\" class=\"headerlink\" title=\"列好 ToDo\"></a>列好 ToDo</h2><p>我喜欢规划好一段时间内要做的事情，并且要把事情拆分为小点。给 ToDo 列好优先级，紧急的优先级最高。相同优先级的我喜欢先做简单的，因为这样一旦完成就能划掉一个，提高成就感。</p>\n<h2 id=\"反思和整理\"><a href=\"#反思和整理\" class=\"headerlink\" title=\"反思和整理\"></a>反思和整理</h2><p>每周末都会花上点时间整理下本周记录的笔记和看到的不错文章。然后考虑下本周完成的工作和下周准备要完成的工作。</p>\n"},{"title":"浏览器兼容性问题解决方案","date":"2017-08-29T09:04:31.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n作为前端，浏览器就是你的战场，而不同的浏览器就是不同的敌人，敌人有相同之处，也各有特点，这不同的特点就是不同浏览器的兼容性，下面就聊聊浏览器的兼容问题，如何解决不同浏览器的兼容性。\n<!-- more -->\n**普及**：浏览器的兼容性问题，往往是个别浏览器（没错，就是那个与众不同的浏览器）对于一些标准的定义不一致导致的。俗话说：没有IE就没有伤害。\n\n**贴士**：内容都是自己总结的，不免会出现错误或者bug，欢迎更正和补充，本帖也会不断更新。\n\n#### Normalize.css\n不同浏览器的默认样式存在差异，可以使用 `Normalize.css`抹平这些差异。当然，你也可以定制属于自己业务的 `reset.css`\n\n```\n<link href=\"https://cdn.bootcss.com/normalize/7.0.0/normalize.min.css\" rel=\"stylesheet\">\n```\n简单粗暴法\n\n```\n* { margin: 0; padding: 0; }\n```\n#### html5shiv.js\n解决 ie9 以下浏览器对 html5 新增标签不识别的问题。\n\n```\n<!--[if lt IE 9]>\n  <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/html5shiv/3.7.3/html5shiv.min.js\"></script>\n<![endif]-->\n```\n<!-- more -->\n#### respond.js\n解决 ie9 以下浏览器不支持 CSS3 Media Query 的问题。\n\n```\n<script src=\"https://cdn.bootcss.com/picturefill/3.0.3/picturefill.min.js\"></script>\n```\n#### IE 条件注释\nIE 的条件注释仅仅针对IE浏览器，对其他浏览器无效\n![image](https://user-gold-cdn.xitu.io/2017/8/28/31714eaf3a9bc272c50dbf1e1279f14b?imageView2/0/w/1280/h/960)\n\n#### IE 属性过滤器（较为常用的hack方法）\n针对不同的 IE 浏览器，可以使用不同的字符来对特定的版本的 IE 浏览器进行样式控制\n![image](https://user-gold-cdn.xitu.io/2017/8/28/e8c1a14cca725798b5aaa88bf5d23de8?imageView2/0/w/1280/h/960)\n![image](https://user-gold-cdn.xitu.io/2017/8/28/ad406608b75744baa6f89ae3c26ba69d?imageView2/0/w/1280/h/960)\n\n#### 浏览器 CSS 兼容前缀\n\n```\n-o-transform:rotate(7deg); // Opera\n\n-ms-transform:rotate(7deg); // IE\n\n-moz-transform:rotate(7deg); // Firefox\n\n-webkit-transform:rotate(7deg); // Chrome\n\ntransform:rotate(7deg); // 统一标识语句\n```\n***补充：*** 目前可以采用自动化插件完成，插件名称叫做 `Autoprefixer`，他可以解析css文件并且添加前缀到css内容里。\n\n把 `Auroprefixer` 添加到资源构建工具如：`webpack`后，就可以不用再手动补全浏览器前缀了，这里只需要你按照W3C的标准来书写css代码，剩下的工作就交给插件完成，目前`webpack`、`gulp`、`grunt`都有相应的插件，是不是开心啊。\n\n#### a 标签的几种 CSS 状态的顺序\n很多新人在写 a 标签的样式，会疑惑为什么写的样式没有效果，或者点击超链接后，hover、active 样式没有效果，其实只是写的样式被覆盖了。\n\n正确的a标签顺序应该是：`==love hate==`\n\n1. link:平常的状态\n2. visited:被访问过之后\n3. hover:鼠标放到链接上的时候\n4. active:链接被按下的时候\n\n\n#### 完美解决 `Placeholder`\n\n```\n<input type=\"text\" value=\"Name *\" onFocus=\"this.value = '';\" onBlur=\"if (this.value == '') {this.value = 'Name *';}\">\n```\n\n#### 清除浮动 最佳实践\n\n```\n.fl { float: left; }\n.fr { float: right; }\n.clearfix:after { display: block; clear: both; content: \"\"; visibility: hidden; height: 0; }\n.clearfix { zoom: 1; }\n```\n\n#### BFC 解决边距重叠问题\n当相邻元素都设置了 margin 边距时，margin 将取最大值，舍弃小值。为了不让边距重叠，可以给子元素加一个父元素，并设置该父元素为 BFC：`overflow: hidden`;\n\n<div class=\"box\" id=\"box\">\n  <p>Lorem ipsum dolor sit.</p>\n\n  <div style=\"overflow: hidden;\">\n    <p>Lorem ipsum dolor sit.</p>\n  </div>\n\n  <p>Lorem ipsum dolor sit.</p>\n</div>\n\n#### IE6 双倍边距的问题\n设置 ie6 中设置浮动，同时又设置 `margin`，会出现双倍边距的问题\n\n\n```\ndisplay: inline;\n```\n#### 解决 IE9 以下浏览器不能使用 opacity\n\n```\nopacity: 0.5;\nfilter: alpha(opacity = 50);\nfilter: progid:DXImageTransform.Microsoft.Alpha(style = 0, opacity = 50);\n```\n#### 解决 IE6 不支持 fixed 绝对定位以及IE6下被绝对定位的元素在滚动的时候会闪动的问题\n\n```\n/* IE6 hack */\n*html, *html body {\n  background-image: url(about:blank);\n  background-attachment: fixed;\n}\n*html #menu {\n  position: absolute;\n  top: expression(((e=document.documentElement.scrollTop) ? e : document.body.scrollTop) + 100 + 'px');\n}\n```\n#### IE6 背景闪烁的问题\n问题：链接、按钮用 CSSsprites 作为背景，在 ie6 下会有背景图闪烁的现象。原因是 IE6 没有将背景图缓存，每次触发 hover 的时候都会重新加载\n\n解决：可以用 JavaScript 设置 ie6 缓存这些图片：\n\n\n```\ndocument.execCommand(\"BackgroundImageCache\", false, true);\n```\n#### 解决在 IE6 下，列表与日期错位的问题\n\n日期<span> 标签放在标题 <a> 标签之前即可\n![image](https://user-gold-cdn.xitu.io/2017/8/28/6797c276197029d941ee577d877d6be3?imageView2/0/w/1280/h/960)\n#### 解决 IE6 不支持 min-height 属性的问题\n\n```\nmin-height: 350px;\n_height: 350px;\n```\n\n#### 让 IE7 IE8 支持 CSS3 background-size属性\n由于 background-size 是 CSS3 新增的属性，所以 IE 低版本自然就不支持了，但是老外写了一个 htc 文件，名叫 background-size polyfill，使用该文件能够让 IE7、IE8 支持 background-size 属性。其原理是创建一个 img 元素插入到容器中，并重新计算宽度、高度、left、top 等值，模拟 background-size 的效果。\n\n```\nhtml {\n  height: 100%;\n}\nbody {\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  background-image: url('img/37.png');\n  background-repeat: no-repeat;\n  background-size: cover;\n  -ms-behavior: url('css/backgroundsize.min.htc');\n  behavior: url('css/backgroundsize.min.htc');\n}\n```\n#### IE6-7 line-height 失效的问题\n\n问题：在ie 中 img 与文字放一起时，line-height 不起作用\n\n解决：都设置成 float\n\n#### td 自动换行的问题\n问题：table 宽度固定，td 自动换行\n\n解决：设置 `Tabl`e 为 `table-layout: fixed`，`td` 为 `word-wrap: break-word`\n\n#### 让层显示在 FLASH 之上\n想让层的内容显示在 flash 上，把 FLASH 设置透明即可\n\n```\n1、<param name=\" wmode \" value=\"transparent\" />\n2、<param name=\"wmode\" value=\"opaque\"/>\n```\n#### 键盘事件 keyCode 兼容性写法\n\n\n```\nvar inp = document.getElementById('inp')\nvar result = document.getElementById('result')\n\nfunction getKeyCode(e) {\n  e = e ? e : (window.event ? window.event : \"\")\n  return e.keyCode ? e.keyCode : e.which\n}\n\ninp.onkeypress = function(e) {\n  result.innerHTML = getKeyCode(e)\n}\n```\n\n#### 求窗口大小的兼容写法\n\n```\n// 浏览器窗口可视区域大小（不包括工具栏和滚动条等边线）\n// 1600 * 525\nvar client_w = document.documentElement.clientWidth || document.body.clientWidth;\nvar client_h = document.documentElement.clientHeight || document.body.clientHeight;\n\n// 网页内容实际宽高（包括工具栏和滚动条等边线）\n// 1600 * 8\nvar scroll_w = document.documentElement.scrollWidth || document.body.scrollWidth;\nvar scroll_h = document.documentElement.scrollHeight || document.body.scrollHeight;\n\n// 网页内容实际宽高 (不包括工具栏和滚动条等边线）\n// 1600 * 8\nvar offset_w = document.documentElement.offsetWidth || document.body.offsetWidth;\nvar offset_h = document.documentElement.offsetHeight || document.body.offsetHeight;\n\n// 滚动的高度\nvar scroll_Top = document.documentElement.scrollTop||document.body.scrollTop;\n```\n#### DOM 事件处理程序的兼容写法（能力检测）\n\n\n```\nvar eventshiv = {\n    // event兼容\n    getEvent: function(event) {\n        return event ? event : window.event;\n    },\n\n    // type兼容\n    getType: function(event) {\n        return event.type;\n    },\n\n    // target兼容\n    getTarget: function(event) {\n        return event.target ? event.target : event.srcelem;\n    },\n\n    // 添加事件句柄\n    addHandler: function(elem, type, listener) {\n        if (elem.addEventListener) {\n            elem.addEventListener(type, listener, false);\n        } else if (elem.attachEvent) {\n            elem.attachEvent('on' + type, listener);\n        } else {\n            // 在这里由于.与'on'字符串不能链接，只能用 []\n            elem['on' + type] = listener;\n        }\n    },\n\n    // 移除事件句柄\n    removeHandler: function(elem, type, listener) {\n        if (elem.removeEventListener) {\n            elem.removeEventListener(type, listener, false);\n        } else if (elem.detachEvent) {\n            elem.detachEvent('on' + type, listener);\n        } else {\n            elem['on' + type] = null;\n        }\n    },\n\n    // 添加事件代理\n    addAgent: function (elem, type, agent, listener) {\n        elem.addEventListener(type, function (e) {\n            if (e.target.matches(agent)) {\n                listener.call(e.target, e); // this 指向 e.target\n            }\n        });\n    },\n\n    // 取消默认行为\n    preventDefault: function(event) {\n        if (event.preventDefault) {\n            event.preventDefault();\n        } else {\n            event.returnValue = false;\n        }\n    },\n\n    // 阻止事件冒泡\n    stopPropagation: function(event) {\n        if (event.stopPropagation) {\n            event.stopPropagation();\n        } else {\n            event.cancelBubble = true;\n        }\n    }\n};\n```\n","source":"_posts/browser-incompatibility-problem-solution.md","raw":"---\ntitle: 浏览器兼容性问题解决方案\ndate: 2017-08-29 17:04:31\ncategories: \n  - CSS\ntags: \n  - 兼容性问题\n---\n> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n作为前端，浏览器就是你的战场，而不同的浏览器就是不同的敌人，敌人有相同之处，也各有特点，这不同的特点就是不同浏览器的兼容性，下面就聊聊浏览器的兼容问题，如何解决不同浏览器的兼容性。\n<!-- more -->\n**普及**：浏览器的兼容性问题，往往是个别浏览器（没错，就是那个与众不同的浏览器）对于一些标准的定义不一致导致的。俗话说：没有IE就没有伤害。\n\n**贴士**：内容都是自己总结的，不免会出现错误或者bug，欢迎更正和补充，本帖也会不断更新。\n\n#### Normalize.css\n不同浏览器的默认样式存在差异，可以使用 `Normalize.css`抹平这些差异。当然，你也可以定制属于自己业务的 `reset.css`\n\n```\n<link href=\"https://cdn.bootcss.com/normalize/7.0.0/normalize.min.css\" rel=\"stylesheet\">\n```\n简单粗暴法\n\n```\n* { margin: 0; padding: 0; }\n```\n#### html5shiv.js\n解决 ie9 以下浏览器对 html5 新增标签不识别的问题。\n\n```\n<!--[if lt IE 9]>\n  <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/html5shiv/3.7.3/html5shiv.min.js\"></script>\n<![endif]-->\n```\n<!-- more -->\n#### respond.js\n解决 ie9 以下浏览器不支持 CSS3 Media Query 的问题。\n\n```\n<script src=\"https://cdn.bootcss.com/picturefill/3.0.3/picturefill.min.js\"></script>\n```\n#### IE 条件注释\nIE 的条件注释仅仅针对IE浏览器，对其他浏览器无效\n![image](https://user-gold-cdn.xitu.io/2017/8/28/31714eaf3a9bc272c50dbf1e1279f14b?imageView2/0/w/1280/h/960)\n\n#### IE 属性过滤器（较为常用的hack方法）\n针对不同的 IE 浏览器，可以使用不同的字符来对特定的版本的 IE 浏览器进行样式控制\n![image](https://user-gold-cdn.xitu.io/2017/8/28/e8c1a14cca725798b5aaa88bf5d23de8?imageView2/0/w/1280/h/960)\n![image](https://user-gold-cdn.xitu.io/2017/8/28/ad406608b75744baa6f89ae3c26ba69d?imageView2/0/w/1280/h/960)\n\n#### 浏览器 CSS 兼容前缀\n\n```\n-o-transform:rotate(7deg); // Opera\n\n-ms-transform:rotate(7deg); // IE\n\n-moz-transform:rotate(7deg); // Firefox\n\n-webkit-transform:rotate(7deg); // Chrome\n\ntransform:rotate(7deg); // 统一标识语句\n```\n***补充：*** 目前可以采用自动化插件完成，插件名称叫做 `Autoprefixer`，他可以解析css文件并且添加前缀到css内容里。\n\n把 `Auroprefixer` 添加到资源构建工具如：`webpack`后，就可以不用再手动补全浏览器前缀了，这里只需要你按照W3C的标准来书写css代码，剩下的工作就交给插件完成，目前`webpack`、`gulp`、`grunt`都有相应的插件，是不是开心啊。\n\n#### a 标签的几种 CSS 状态的顺序\n很多新人在写 a 标签的样式，会疑惑为什么写的样式没有效果，或者点击超链接后，hover、active 样式没有效果，其实只是写的样式被覆盖了。\n\n正确的a标签顺序应该是：`==love hate==`\n\n1. link:平常的状态\n2. visited:被访问过之后\n3. hover:鼠标放到链接上的时候\n4. active:链接被按下的时候\n\n\n#### 完美解决 `Placeholder`\n\n```\n<input type=\"text\" value=\"Name *\" onFocus=\"this.value = '';\" onBlur=\"if (this.value == '') {this.value = 'Name *';}\">\n```\n\n#### 清除浮动 最佳实践\n\n```\n.fl { float: left; }\n.fr { float: right; }\n.clearfix:after { display: block; clear: both; content: \"\"; visibility: hidden; height: 0; }\n.clearfix { zoom: 1; }\n```\n\n#### BFC 解决边距重叠问题\n当相邻元素都设置了 margin 边距时，margin 将取最大值，舍弃小值。为了不让边距重叠，可以给子元素加一个父元素，并设置该父元素为 BFC：`overflow: hidden`;\n\n<div class=\"box\" id=\"box\">\n  <p>Lorem ipsum dolor sit.</p>\n\n  <div style=\"overflow: hidden;\">\n    <p>Lorem ipsum dolor sit.</p>\n  </div>\n\n  <p>Lorem ipsum dolor sit.</p>\n</div>\n\n#### IE6 双倍边距的问题\n设置 ie6 中设置浮动，同时又设置 `margin`，会出现双倍边距的问题\n\n\n```\ndisplay: inline;\n```\n#### 解决 IE9 以下浏览器不能使用 opacity\n\n```\nopacity: 0.5;\nfilter: alpha(opacity = 50);\nfilter: progid:DXImageTransform.Microsoft.Alpha(style = 0, opacity = 50);\n```\n#### 解决 IE6 不支持 fixed 绝对定位以及IE6下被绝对定位的元素在滚动的时候会闪动的问题\n\n```\n/* IE6 hack */\n*html, *html body {\n  background-image: url(about:blank);\n  background-attachment: fixed;\n}\n*html #menu {\n  position: absolute;\n  top: expression(((e=document.documentElement.scrollTop) ? e : document.body.scrollTop) + 100 + 'px');\n}\n```\n#### IE6 背景闪烁的问题\n问题：链接、按钮用 CSSsprites 作为背景，在 ie6 下会有背景图闪烁的现象。原因是 IE6 没有将背景图缓存，每次触发 hover 的时候都会重新加载\n\n解决：可以用 JavaScript 设置 ie6 缓存这些图片：\n\n\n```\ndocument.execCommand(\"BackgroundImageCache\", false, true);\n```\n#### 解决在 IE6 下，列表与日期错位的问题\n\n日期<span> 标签放在标题 <a> 标签之前即可\n![image](https://user-gold-cdn.xitu.io/2017/8/28/6797c276197029d941ee577d877d6be3?imageView2/0/w/1280/h/960)\n#### 解决 IE6 不支持 min-height 属性的问题\n\n```\nmin-height: 350px;\n_height: 350px;\n```\n\n#### 让 IE7 IE8 支持 CSS3 background-size属性\n由于 background-size 是 CSS3 新增的属性，所以 IE 低版本自然就不支持了，但是老外写了一个 htc 文件，名叫 background-size polyfill，使用该文件能够让 IE7、IE8 支持 background-size 属性。其原理是创建一个 img 元素插入到容器中，并重新计算宽度、高度、left、top 等值，模拟 background-size 的效果。\n\n```\nhtml {\n  height: 100%;\n}\nbody {\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  background-image: url('img/37.png');\n  background-repeat: no-repeat;\n  background-size: cover;\n  -ms-behavior: url('css/backgroundsize.min.htc');\n  behavior: url('css/backgroundsize.min.htc');\n}\n```\n#### IE6-7 line-height 失效的问题\n\n问题：在ie 中 img 与文字放一起时，line-height 不起作用\n\n解决：都设置成 float\n\n#### td 自动换行的问题\n问题：table 宽度固定，td 自动换行\n\n解决：设置 `Tabl`e 为 `table-layout: fixed`，`td` 为 `word-wrap: break-word`\n\n#### 让层显示在 FLASH 之上\n想让层的内容显示在 flash 上，把 FLASH 设置透明即可\n\n```\n1、<param name=\" wmode \" value=\"transparent\" />\n2、<param name=\"wmode\" value=\"opaque\"/>\n```\n#### 键盘事件 keyCode 兼容性写法\n\n\n```\nvar inp = document.getElementById('inp')\nvar result = document.getElementById('result')\n\nfunction getKeyCode(e) {\n  e = e ? e : (window.event ? window.event : \"\")\n  return e.keyCode ? e.keyCode : e.which\n}\n\ninp.onkeypress = function(e) {\n  result.innerHTML = getKeyCode(e)\n}\n```\n\n#### 求窗口大小的兼容写法\n\n```\n// 浏览器窗口可视区域大小（不包括工具栏和滚动条等边线）\n// 1600 * 525\nvar client_w = document.documentElement.clientWidth || document.body.clientWidth;\nvar client_h = document.documentElement.clientHeight || document.body.clientHeight;\n\n// 网页内容实际宽高（包括工具栏和滚动条等边线）\n// 1600 * 8\nvar scroll_w = document.documentElement.scrollWidth || document.body.scrollWidth;\nvar scroll_h = document.documentElement.scrollHeight || document.body.scrollHeight;\n\n// 网页内容实际宽高 (不包括工具栏和滚动条等边线）\n// 1600 * 8\nvar offset_w = document.documentElement.offsetWidth || document.body.offsetWidth;\nvar offset_h = document.documentElement.offsetHeight || document.body.offsetHeight;\n\n// 滚动的高度\nvar scroll_Top = document.documentElement.scrollTop||document.body.scrollTop;\n```\n#### DOM 事件处理程序的兼容写法（能力检测）\n\n\n```\nvar eventshiv = {\n    // event兼容\n    getEvent: function(event) {\n        return event ? event : window.event;\n    },\n\n    // type兼容\n    getType: function(event) {\n        return event.type;\n    },\n\n    // target兼容\n    getTarget: function(event) {\n        return event.target ? event.target : event.srcelem;\n    },\n\n    // 添加事件句柄\n    addHandler: function(elem, type, listener) {\n        if (elem.addEventListener) {\n            elem.addEventListener(type, listener, false);\n        } else if (elem.attachEvent) {\n            elem.attachEvent('on' + type, listener);\n        } else {\n            // 在这里由于.与'on'字符串不能链接，只能用 []\n            elem['on' + type] = listener;\n        }\n    },\n\n    // 移除事件句柄\n    removeHandler: function(elem, type, listener) {\n        if (elem.removeEventListener) {\n            elem.removeEventListener(type, listener, false);\n        } else if (elem.detachEvent) {\n            elem.detachEvent('on' + type, listener);\n        } else {\n            elem['on' + type] = null;\n        }\n    },\n\n    // 添加事件代理\n    addAgent: function (elem, type, agent, listener) {\n        elem.addEventListener(type, function (e) {\n            if (e.target.matches(agent)) {\n                listener.call(e.target, e); // this 指向 e.target\n            }\n        });\n    },\n\n    // 取消默认行为\n    preventDefault: function(event) {\n        if (event.preventDefault) {\n            event.preventDefault();\n        } else {\n            event.returnValue = false;\n        }\n    },\n\n    // 阻止事件冒泡\n    stopPropagation: function(event) {\n        if (event.stopPropagation) {\n            event.stopPropagation();\n        } else {\n            event.cancelBubble = true;\n        }\n    }\n};\n```\n","slug":"browser-incompatibility-problem-solution","published":1,"updated":"2020-04-02T03:20:12.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs39004dooa6d6vh7jwh","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>作为前端，浏览器就是你的战场，而不同的浏览器就是不同的敌人，敌人有相同之处，也各有特点，这不同的特点就是不同浏览器的兼容性，下面就聊聊浏览器的兼容问题，如何解决不同浏览器的兼容性。</p>\n<a id=\"more\"></a>\n<p><strong>普及</strong>：浏览器的兼容性问题，往往是个别浏览器（没错，就是那个与众不同的浏览器）对于一些标准的定义不一致导致的。俗话说：没有IE就没有伤害。</p>\n<p><strong>贴士</strong>：内容都是自己总结的，不免会出现错误或者bug，欢迎更正和补充，本帖也会不断更新。</p>\n<h4 id=\"Normalize-css\"><a href=\"#Normalize-css\" class=\"headerlink\" title=\"Normalize.css\"></a>Normalize.css</h4><p>不同浏览器的默认样式存在差异，可以使用 <code>Normalize.css</code>抹平这些差异。当然，你也可以定制属于自己业务的 <code>reset.css</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;normalize&#x2F;7.0.0&#x2F;normalize.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>简单粗暴法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123; margin: 0; padding: 0; &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"html5shiv-js\"><a href=\"#html5shiv-js\" class=\"headerlink\" title=\"html5shiv.js\"></a>html5shiv.js</h4><p>解决 ie9 以下浏览器对 html5 新增标签不识别的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--[if lt IE 9]&gt;</span><br><span class=\"line\">  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;html5shiv&#x2F;3.7.3&#x2F;html5shiv.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure>\n<!-- more -->\n<h4 id=\"respond-js\"><a href=\"#respond-js\" class=\"headerlink\" title=\"respond.js\"></a>respond.js</h4><p>解决 ie9 以下浏览器不支持 CSS3 Media Query 的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;picturefill&#x2F;3.0.3&#x2F;picturefill.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"IE-条件注释\"><a href=\"#IE-条件注释\" class=\"headerlink\" title=\"IE 条件注释\"></a>IE 条件注释</h4><p>IE 的条件注释仅仅针对IE浏览器，对其他浏览器无效<br><img src=\"https://user-gold-cdn.xitu.io/2017/8/28/31714eaf3a9bc272c50dbf1e1279f14b?imageView2/0/w/1280/h/960\" alt=\"image\"></p>\n<h4 id=\"IE-属性过滤器（较为常用的hack方法）\"><a href=\"#IE-属性过滤器（较为常用的hack方法）\" class=\"headerlink\" title=\"IE 属性过滤器（较为常用的hack方法）\"></a>IE 属性过滤器（较为常用的hack方法）</h4><p>针对不同的 IE 浏览器，可以使用不同的字符来对特定的版本的 IE 浏览器进行样式控制<br><img src=\"https://user-gold-cdn.xitu.io/2017/8/28/e8c1a14cca725798b5aaa88bf5d23de8?imageView2/0/w/1280/h/960\" alt=\"image\"><br><img src=\"https://user-gold-cdn.xitu.io/2017/8/28/ad406608b75744baa6f89ae3c26ba69d?imageView2/0/w/1280/h/960\" alt=\"image\"></p>\n<h4 id=\"浏览器-CSS-兼容前缀\"><a href=\"#浏览器-CSS-兼容前缀\" class=\"headerlink\" title=\"浏览器 CSS 兼容前缀\"></a>浏览器 CSS 兼容前缀</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-o-transform:rotate(7deg); &#x2F;&#x2F; Opera</span><br><span class=\"line\"></span><br><span class=\"line\">-ms-transform:rotate(7deg); &#x2F;&#x2F; IE</span><br><span class=\"line\"></span><br><span class=\"line\">-moz-transform:rotate(7deg); &#x2F;&#x2F; Firefox</span><br><span class=\"line\"></span><br><span class=\"line\">-webkit-transform:rotate(7deg); &#x2F;&#x2F; Chrome</span><br><span class=\"line\"></span><br><span class=\"line\">transform:rotate(7deg); &#x2F;&#x2F; 统一标识语句</span><br></pre></td></tr></table></figure>\n<p><strong><em>补充：</em></strong> 目前可以采用自动化插件完成，插件名称叫做 <code>Autoprefixer</code>，他可以解析css文件并且添加前缀到css内容里。</p>\n<p>把 <code>Auroprefixer</code> 添加到资源构建工具如：<code>webpack</code>后，就可以不用再手动补全浏览器前缀了，这里只需要你按照W3C的标准来书写css代码，剩下的工作就交给插件完成，目前<code>webpack</code>、<code>gulp</code>、<code>grunt</code>都有相应的插件，是不是开心啊。</p>\n<h4 id=\"a-标签的几种-CSS-状态的顺序\"><a href=\"#a-标签的几种-CSS-状态的顺序\" class=\"headerlink\" title=\"a 标签的几种 CSS 状态的顺序\"></a>a 标签的几种 CSS 状态的顺序</h4><p>很多新人在写 a 标签的样式，会疑惑为什么写的样式没有效果，或者点击超链接后，hover、active 样式没有效果，其实只是写的样式被覆盖了。</p>\n<p>正确的a标签顺序应该是：<code>==love hate==</code></p>\n<ol>\n<li>link:平常的状态</li>\n<li>visited:被访问过之后</li>\n<li>hover:鼠标放到链接上的时候</li>\n<li>active:链接被按下的时候</li>\n</ol>\n<h4 id=\"完美解决-Placeholder\"><a href=\"#完美解决-Placeholder\" class=\"headerlink\" title=\"完美解决 Placeholder\"></a>完美解决 <code>Placeholder</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; value&#x3D;&quot;Name *&quot; onFocus&#x3D;&quot;this.value &#x3D; &#39;&#39;;&quot; onBlur&#x3D;&quot;if (this.value &#x3D;&#x3D; &#39;&#39;) &#123;this.value &#x3D; &#39;Name *&#39;;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"清除浮动-最佳实践\"><a href=\"#清除浮动-最佳实践\" class=\"headerlink\" title=\"清除浮动 最佳实践\"></a>清除浮动 最佳实践</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.fl &#123; float: left; &#125;</span><br><span class=\"line\">.fr &#123; float: right; &#125;</span><br><span class=\"line\">.clearfix:after &#123; display: block; clear: both; content: &quot;&quot;; visibility: hidden; height: 0; &#125;</span><br><span class=\"line\">.clearfix &#123; zoom: 1; &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"BFC-解决边距重叠问题\"><a href=\"#BFC-解决边距重叠问题\" class=\"headerlink\" title=\"BFC 解决边距重叠问题\"></a>BFC 解决边距重叠问题</h4><p>当相邻元素都设置了 margin 边距时，margin 将取最大值，舍弃小值。为了不让边距重叠，可以给子元素加一个父元素，并设置该父元素为 BFC：<code>overflow: hidden</code>;</p>\n<div class=\"box\" id=\"box\">\n  <p>Lorem ipsum dolor sit.</p>\n\n  <div style=\"overflow: hidden;\">\n    <p>Lorem ipsum dolor sit.</p>\n  </div>\n\n  <p>Lorem ipsum dolor sit.</p>\n</div>\n\n<h4 id=\"IE6-双倍边距的问题\"><a href=\"#IE6-双倍边距的问题\" class=\"headerlink\" title=\"IE6 双倍边距的问题\"></a>IE6 双倍边距的问题</h4><p>设置 ie6 中设置浮动，同时又设置 <code>margin</code>，会出现双倍边距的问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: inline;</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决-IE9-以下浏览器不能使用-opacity\"><a href=\"#解决-IE9-以下浏览器不能使用-opacity\" class=\"headerlink\" title=\"解决 IE9 以下浏览器不能使用 opacity\"></a>解决 IE9 以下浏览器不能使用 opacity</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opacity: 0.5;</span><br><span class=\"line\">filter: alpha(opacity &#x3D; 50);</span><br><span class=\"line\">filter: progid:DXImageTransform.Microsoft.Alpha(style &#x3D; 0, opacity &#x3D; 50);</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决-IE6-不支持-fixed-绝对定位以及IE6下被绝对定位的元素在滚动的时候会闪动的问题\"><a href=\"#解决-IE6-不支持-fixed-绝对定位以及IE6下被绝对定位的元素在滚动的时候会闪动的问题\" class=\"headerlink\" title=\"解决 IE6 不支持 fixed 绝对定位以及IE6下被绝对定位的元素在滚动的时候会闪动的问题\"></a>解决 IE6 不支持 fixed 绝对定位以及IE6下被绝对定位的元素在滚动的时候会闪动的问题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;* IE6 hack *&#x2F;</span><br><span class=\"line\">*html, *html body &#123;</span><br><span class=\"line\">  background-image: url(about:blank);</span><br><span class=\"line\">  background-attachment: fixed;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*html #menu &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  top: expression(((e&#x3D;document.documentElement.scrollTop) ? e : document.body.scrollTop) + 100 + &#39;px&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"IE6-背景闪烁的问题\"><a href=\"#IE6-背景闪烁的问题\" class=\"headerlink\" title=\"IE6 背景闪烁的问题\"></a>IE6 背景闪烁的问题</h4><p>问题：链接、按钮用 CSSsprites 作为背景，在 ie6 下会有背景图闪烁的现象。原因是 IE6 没有将背景图缓存，每次触发 hover 的时候都会重新加载</p>\n<p>解决：可以用 JavaScript 设置 ie6 缓存这些图片：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.execCommand(&quot;BackgroundImageCache&quot;, false, true);</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决在-IE6-下，列表与日期错位的问题\"><a href=\"#解决在-IE6-下，列表与日期错位的问题\" class=\"headerlink\" title=\"解决在 IE6 下，列表与日期错位的问题\"></a>解决在 IE6 下，列表与日期错位的问题</h4><p>日期<span> 标签放在标题 <a> 标签之前即可<br><img src=\"https://user-gold-cdn.xitu.io/2017/8/28/6797c276197029d941ee577d877d6be3?imageView2/0/w/1280/h/960\" alt=\"image\"></p>\n<h4 id=\"解决-IE6-不支持-min-height-属性的问题\"><a href=\"#解决-IE6-不支持-min-height-属性的问题\" class=\"headerlink\" title=\"解决 IE6 不支持 min-height 属性的问题\"></a>解决 IE6 不支持 min-height 属性的问题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">min-height: 350px;</span><br><span class=\"line\">_height: 350px;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"让-IE7-IE8-支持-CSS3-background-size属性\"><a href=\"#让-IE7-IE8-支持-CSS3-background-size属性\" class=\"headerlink\" title=\"让 IE7 IE8 支持 CSS3 background-size属性\"></a>让 IE7 IE8 支持 CSS3 background-size属性</h4><p>由于 background-size 是 CSS3 新增的属性，所以 IE 低版本自然就不支持了，但是老外写了一个 htc 文件，名叫 background-size polyfill，使用该文件能够让 IE7、IE8 支持 background-size 属性。其原理是创建一个 img 元素插入到容器中，并重新计算宽度、高度、left、top 等值，模拟 background-size 的效果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html &#123;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">  padding: 0;</span><br><span class=\"line\">  background-image: url(&#39;img&#x2F;37.png&#39;);</span><br><span class=\"line\">  background-repeat: no-repeat;</span><br><span class=\"line\">  background-size: cover;</span><br><span class=\"line\">  -ms-behavior: url(&#39;css&#x2F;backgroundsize.min.htc&#39;);</span><br><span class=\"line\">  behavior: url(&#39;css&#x2F;backgroundsize.min.htc&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"IE6-7-line-height-失效的问题\"><a href=\"#IE6-7-line-height-失效的问题\" class=\"headerlink\" title=\"IE6-7 line-height 失效的问题\"></a>IE6-7 line-height 失效的问题</h4><p>问题：在ie 中 img 与文字放一起时，line-height 不起作用</p>\n<p>解决：都设置成 float</p>\n<h4 id=\"td-自动换行的问题\"><a href=\"#td-自动换行的问题\" class=\"headerlink\" title=\"td 自动换行的问题\"></a>td 自动换行的问题</h4><p>问题：table 宽度固定，td 自动换行</p>\n<p>解决：设置 <code>Tabl</code>e 为 <code>table-layout: fixed</code>，<code>td</code> 为 <code>word-wrap: break-word</code></p>\n<h4 id=\"让层显示在-FLASH-之上\"><a href=\"#让层显示在-FLASH-之上\" class=\"headerlink\" title=\"让层显示在 FLASH 之上\"></a>让层显示在 FLASH 之上</h4><p>想让层的内容显示在 flash 上，把 FLASH 设置透明即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、&lt;param name&#x3D;&quot; wmode &quot; value&#x3D;&quot;transparent&quot; &#x2F;&gt;</span><br><span class=\"line\">2、&lt;param name&#x3D;&quot;wmode&quot; value&#x3D;&quot;opaque&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"键盘事件-keyCode-兼容性写法\"><a href=\"#键盘事件-keyCode-兼容性写法\" class=\"headerlink\" title=\"键盘事件 keyCode 兼容性写法\"></a>键盘事件 keyCode 兼容性写法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var inp &#x3D; document.getElementById(&#39;inp&#39;)</span><br><span class=\"line\">var result &#x3D; document.getElementById(&#39;result&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">function getKeyCode(e) &#123;</span><br><span class=\"line\">  e &#x3D; e ? e : (window.event ? window.event : &quot;&quot;)</span><br><span class=\"line\">  return e.keyCode ? e.keyCode : e.which</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">inp.onkeypress &#x3D; function(e) &#123;</span><br><span class=\"line\">  result.innerHTML &#x3D; getKeyCode(e)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"求窗口大小的兼容写法\"><a href=\"#求窗口大小的兼容写法\" class=\"headerlink\" title=\"求窗口大小的兼容写法\"></a>求窗口大小的兼容写法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 浏览器窗口可视区域大小（不包括工具栏和滚动条等边线）</span><br><span class=\"line\">&#x2F;&#x2F; 1600 * 525</span><br><span class=\"line\">var client_w &#x3D; document.documentElement.clientWidth || document.body.clientWidth;</span><br><span class=\"line\">var client_h &#x3D; document.documentElement.clientHeight || document.body.clientHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 网页内容实际宽高（包括工具栏和滚动条等边线）</span><br><span class=\"line\">&#x2F;&#x2F; 1600 * 8</span><br><span class=\"line\">var scroll_w &#x3D; document.documentElement.scrollWidth || document.body.scrollWidth;</span><br><span class=\"line\">var scroll_h &#x3D; document.documentElement.scrollHeight || document.body.scrollHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 网页内容实际宽高 (不包括工具栏和滚动条等边线）</span><br><span class=\"line\">&#x2F;&#x2F; 1600 * 8</span><br><span class=\"line\">var offset_w &#x3D; document.documentElement.offsetWidth || document.body.offsetWidth;</span><br><span class=\"line\">var offset_h &#x3D; document.documentElement.offsetHeight || document.body.offsetHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 滚动的高度</span><br><span class=\"line\">var scroll_Top &#x3D; document.documentElement.scrollTop||document.body.scrollTop;</span><br></pre></td></tr></table></figure>\n<h4 id=\"DOM-事件处理程序的兼容写法（能力检测）\"><a href=\"#DOM-事件处理程序的兼容写法（能力检测）\" class=\"headerlink\" title=\"DOM 事件处理程序的兼容写法（能力检测）\"></a>DOM 事件处理程序的兼容写法（能力检测）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var eventshiv &#x3D; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; event兼容</span><br><span class=\"line\">    getEvent: function(event) &#123;</span><br><span class=\"line\">        return event ? event : window.event;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; type兼容</span><br><span class=\"line\">    getType: function(event) &#123;</span><br><span class=\"line\">        return event.type;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; target兼容</span><br><span class=\"line\">    getTarget: function(event) &#123;</span><br><span class=\"line\">        return event.target ? event.target : event.srcelem;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 添加事件句柄</span><br><span class=\"line\">    addHandler: function(elem, type, listener) &#123;</span><br><span class=\"line\">        if (elem.addEventListener) &#123;</span><br><span class=\"line\">            elem.addEventListener(type, listener, false);</span><br><span class=\"line\">        &#125; else if (elem.attachEvent) &#123;</span><br><span class=\"line\">            elem.attachEvent(&#39;on&#39; + type, listener);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 在这里由于.与&#39;on&#39;字符串不能链接，只能用 []</span><br><span class=\"line\">            elem[&#39;on&#39; + type] &#x3D; listener;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 移除事件句柄</span><br><span class=\"line\">    removeHandler: function(elem, type, listener) &#123;</span><br><span class=\"line\">        if (elem.removeEventListener) &#123;</span><br><span class=\"line\">            elem.removeEventListener(type, listener, false);</span><br><span class=\"line\">        &#125; else if (elem.detachEvent) &#123;</span><br><span class=\"line\">            elem.detachEvent(&#39;on&#39; + type, listener);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            elem[&#39;on&#39; + type] &#x3D; null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 添加事件代理</span><br><span class=\"line\">    addAgent: function (elem, type, agent, listener) &#123;</span><br><span class=\"line\">        elem.addEventListener(type, function (e) &#123;</span><br><span class=\"line\">            if (e.target.matches(agent)) &#123;</span><br><span class=\"line\">                listener.call(e.target, e); &#x2F;&#x2F; this 指向 e.target</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 取消默认行为</span><br><span class=\"line\">    preventDefault: function(event) &#123;</span><br><span class=\"line\">        if (event.preventDefault) &#123;</span><br><span class=\"line\">            event.preventDefault();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            event.returnValue &#x3D; false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 阻止事件冒泡</span><br><span class=\"line\">    stopPropagation: function(event) &#123;</span><br><span class=\"line\">        if (event.stopPropagation) &#123;</span><br><span class=\"line\">            event.stopPropagation();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            event.cancelBubble &#x3D; true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>作为前端，浏览器就是你的战场，而不同的浏览器就是不同的敌人，敌人有相同之处，也各有特点，这不同的特点就是不同浏览器的兼容性，下面就聊聊浏览器的兼容问题，如何解决不同浏览器的兼容性。</p>","more":"<p><strong>普及</strong>：浏览器的兼容性问题，往往是个别浏览器（没错，就是那个与众不同的浏览器）对于一些标准的定义不一致导致的。俗话说：没有IE就没有伤害。</p>\n<p><strong>贴士</strong>：内容都是自己总结的，不免会出现错误或者bug，欢迎更正和补充，本帖也会不断更新。</p>\n<h4 id=\"Normalize-css\"><a href=\"#Normalize-css\" class=\"headerlink\" title=\"Normalize.css\"></a>Normalize.css</h4><p>不同浏览器的默认样式存在差异，可以使用 <code>Normalize.css</code>抹平这些差异。当然，你也可以定制属于自己业务的 <code>reset.css</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;normalize&#x2F;7.0.0&#x2F;normalize.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>简单粗暴法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123; margin: 0; padding: 0; &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"html5shiv-js\"><a href=\"#html5shiv-js\" class=\"headerlink\" title=\"html5shiv.js\"></a>html5shiv.js</h4><p>解决 ie9 以下浏览器对 html5 新增标签不识别的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--[if lt IE 9]&gt;</span><br><span class=\"line\">  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;html5shiv&#x2F;3.7.3&#x2F;html5shiv.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure>\n<!-- more -->\n<h4 id=\"respond-js\"><a href=\"#respond-js\" class=\"headerlink\" title=\"respond.js\"></a>respond.js</h4><p>解决 ie9 以下浏览器不支持 CSS3 Media Query 的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;picturefill&#x2F;3.0.3&#x2F;picturefill.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"IE-条件注释\"><a href=\"#IE-条件注释\" class=\"headerlink\" title=\"IE 条件注释\"></a>IE 条件注释</h4><p>IE 的条件注释仅仅针对IE浏览器，对其他浏览器无效<br><img src=\"https://user-gold-cdn.xitu.io/2017/8/28/31714eaf3a9bc272c50dbf1e1279f14b?imageView2/0/w/1280/h/960\" alt=\"image\"></p>\n<h4 id=\"IE-属性过滤器（较为常用的hack方法）\"><a href=\"#IE-属性过滤器（较为常用的hack方法）\" class=\"headerlink\" title=\"IE 属性过滤器（较为常用的hack方法）\"></a>IE 属性过滤器（较为常用的hack方法）</h4><p>针对不同的 IE 浏览器，可以使用不同的字符来对特定的版本的 IE 浏览器进行样式控制<br><img src=\"https://user-gold-cdn.xitu.io/2017/8/28/e8c1a14cca725798b5aaa88bf5d23de8?imageView2/0/w/1280/h/960\" alt=\"image\"><br><img src=\"https://user-gold-cdn.xitu.io/2017/8/28/ad406608b75744baa6f89ae3c26ba69d?imageView2/0/w/1280/h/960\" alt=\"image\"></p>\n<h4 id=\"浏览器-CSS-兼容前缀\"><a href=\"#浏览器-CSS-兼容前缀\" class=\"headerlink\" title=\"浏览器 CSS 兼容前缀\"></a>浏览器 CSS 兼容前缀</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-o-transform:rotate(7deg); &#x2F;&#x2F; Opera</span><br><span class=\"line\"></span><br><span class=\"line\">-ms-transform:rotate(7deg); &#x2F;&#x2F; IE</span><br><span class=\"line\"></span><br><span class=\"line\">-moz-transform:rotate(7deg); &#x2F;&#x2F; Firefox</span><br><span class=\"line\"></span><br><span class=\"line\">-webkit-transform:rotate(7deg); &#x2F;&#x2F; Chrome</span><br><span class=\"line\"></span><br><span class=\"line\">transform:rotate(7deg); &#x2F;&#x2F; 统一标识语句</span><br></pre></td></tr></table></figure>\n<p><strong><em>补充：</em></strong> 目前可以采用自动化插件完成，插件名称叫做 <code>Autoprefixer</code>，他可以解析css文件并且添加前缀到css内容里。</p>\n<p>把 <code>Auroprefixer</code> 添加到资源构建工具如：<code>webpack</code>后，就可以不用再手动补全浏览器前缀了，这里只需要你按照W3C的标准来书写css代码，剩下的工作就交给插件完成，目前<code>webpack</code>、<code>gulp</code>、<code>grunt</code>都有相应的插件，是不是开心啊。</p>\n<h4 id=\"a-标签的几种-CSS-状态的顺序\"><a href=\"#a-标签的几种-CSS-状态的顺序\" class=\"headerlink\" title=\"a 标签的几种 CSS 状态的顺序\"></a>a 标签的几种 CSS 状态的顺序</h4><p>很多新人在写 a 标签的样式，会疑惑为什么写的样式没有效果，或者点击超链接后，hover、active 样式没有效果，其实只是写的样式被覆盖了。</p>\n<p>正确的a标签顺序应该是：<code>==love hate==</code></p>\n<ol>\n<li>link:平常的状态</li>\n<li>visited:被访问过之后</li>\n<li>hover:鼠标放到链接上的时候</li>\n<li>active:链接被按下的时候</li>\n</ol>\n<h4 id=\"完美解决-Placeholder\"><a href=\"#完美解决-Placeholder\" class=\"headerlink\" title=\"完美解决 Placeholder\"></a>完美解决 <code>Placeholder</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; value&#x3D;&quot;Name *&quot; onFocus&#x3D;&quot;this.value &#x3D; &#39;&#39;;&quot; onBlur&#x3D;&quot;if (this.value &#x3D;&#x3D; &#39;&#39;) &#123;this.value &#x3D; &#39;Name *&#39;;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"清除浮动-最佳实践\"><a href=\"#清除浮动-最佳实践\" class=\"headerlink\" title=\"清除浮动 最佳实践\"></a>清除浮动 最佳实践</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.fl &#123; float: left; &#125;</span><br><span class=\"line\">.fr &#123; float: right; &#125;</span><br><span class=\"line\">.clearfix:after &#123; display: block; clear: both; content: &quot;&quot;; visibility: hidden; height: 0; &#125;</span><br><span class=\"line\">.clearfix &#123; zoom: 1; &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"BFC-解决边距重叠问题\"><a href=\"#BFC-解决边距重叠问题\" class=\"headerlink\" title=\"BFC 解决边距重叠问题\"></a>BFC 解决边距重叠问题</h4><p>当相邻元素都设置了 margin 边距时，margin 将取最大值，舍弃小值。为了不让边距重叠，可以给子元素加一个父元素，并设置该父元素为 BFC：<code>overflow: hidden</code>;</p>\n<div class=\"box\" id=\"box\">\n  <p>Lorem ipsum dolor sit.</p>\n\n  <div style=\"overflow: hidden;\">\n    <p>Lorem ipsum dolor sit.</p>\n  </div>\n\n  <p>Lorem ipsum dolor sit.</p>\n</div>\n\n<h4 id=\"IE6-双倍边距的问题\"><a href=\"#IE6-双倍边距的问题\" class=\"headerlink\" title=\"IE6 双倍边距的问题\"></a>IE6 双倍边距的问题</h4><p>设置 ie6 中设置浮动，同时又设置 <code>margin</code>，会出现双倍边距的问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: inline;</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决-IE9-以下浏览器不能使用-opacity\"><a href=\"#解决-IE9-以下浏览器不能使用-opacity\" class=\"headerlink\" title=\"解决 IE9 以下浏览器不能使用 opacity\"></a>解决 IE9 以下浏览器不能使用 opacity</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opacity: 0.5;</span><br><span class=\"line\">filter: alpha(opacity &#x3D; 50);</span><br><span class=\"line\">filter: progid:DXImageTransform.Microsoft.Alpha(style &#x3D; 0, opacity &#x3D; 50);</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决-IE6-不支持-fixed-绝对定位以及IE6下被绝对定位的元素在滚动的时候会闪动的问题\"><a href=\"#解决-IE6-不支持-fixed-绝对定位以及IE6下被绝对定位的元素在滚动的时候会闪动的问题\" class=\"headerlink\" title=\"解决 IE6 不支持 fixed 绝对定位以及IE6下被绝对定位的元素在滚动的时候会闪动的问题\"></a>解决 IE6 不支持 fixed 绝对定位以及IE6下被绝对定位的元素在滚动的时候会闪动的问题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;* IE6 hack *&#x2F;</span><br><span class=\"line\">*html, *html body &#123;</span><br><span class=\"line\">  background-image: url(about:blank);</span><br><span class=\"line\">  background-attachment: fixed;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*html #menu &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  top: expression(((e&#x3D;document.documentElement.scrollTop) ? e : document.body.scrollTop) + 100 + &#39;px&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"IE6-背景闪烁的问题\"><a href=\"#IE6-背景闪烁的问题\" class=\"headerlink\" title=\"IE6 背景闪烁的问题\"></a>IE6 背景闪烁的问题</h4><p>问题：链接、按钮用 CSSsprites 作为背景，在 ie6 下会有背景图闪烁的现象。原因是 IE6 没有将背景图缓存，每次触发 hover 的时候都会重新加载</p>\n<p>解决：可以用 JavaScript 设置 ie6 缓存这些图片：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.execCommand(&quot;BackgroundImageCache&quot;, false, true);</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决在-IE6-下，列表与日期错位的问题\"><a href=\"#解决在-IE6-下，列表与日期错位的问题\" class=\"headerlink\" title=\"解决在 IE6 下，列表与日期错位的问题\"></a>解决在 IE6 下，列表与日期错位的问题</h4><p>日期<span> 标签放在标题 <a> 标签之前即可<br><img src=\"https://user-gold-cdn.xitu.io/2017/8/28/6797c276197029d941ee577d877d6be3?imageView2/0/w/1280/h/960\" alt=\"image\"></p>\n<h4 id=\"解决-IE6-不支持-min-height-属性的问题\"><a href=\"#解决-IE6-不支持-min-height-属性的问题\" class=\"headerlink\" title=\"解决 IE6 不支持 min-height 属性的问题\"></a>解决 IE6 不支持 min-height 属性的问题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">min-height: 350px;</span><br><span class=\"line\">_height: 350px;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"让-IE7-IE8-支持-CSS3-background-size属性\"><a href=\"#让-IE7-IE8-支持-CSS3-background-size属性\" class=\"headerlink\" title=\"让 IE7 IE8 支持 CSS3 background-size属性\"></a>让 IE7 IE8 支持 CSS3 background-size属性</h4><p>由于 background-size 是 CSS3 新增的属性，所以 IE 低版本自然就不支持了，但是老外写了一个 htc 文件，名叫 background-size polyfill，使用该文件能够让 IE7、IE8 支持 background-size 属性。其原理是创建一个 img 元素插入到容器中，并重新计算宽度、高度、left、top 等值，模拟 background-size 的效果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html &#123;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">  padding: 0;</span><br><span class=\"line\">  background-image: url(&#39;img&#x2F;37.png&#39;);</span><br><span class=\"line\">  background-repeat: no-repeat;</span><br><span class=\"line\">  background-size: cover;</span><br><span class=\"line\">  -ms-behavior: url(&#39;css&#x2F;backgroundsize.min.htc&#39;);</span><br><span class=\"line\">  behavior: url(&#39;css&#x2F;backgroundsize.min.htc&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"IE6-7-line-height-失效的问题\"><a href=\"#IE6-7-line-height-失效的问题\" class=\"headerlink\" title=\"IE6-7 line-height 失效的问题\"></a>IE6-7 line-height 失效的问题</h4><p>问题：在ie 中 img 与文字放一起时，line-height 不起作用</p>\n<p>解决：都设置成 float</p>\n<h4 id=\"td-自动换行的问题\"><a href=\"#td-自动换行的问题\" class=\"headerlink\" title=\"td 自动换行的问题\"></a>td 自动换行的问题</h4><p>问题：table 宽度固定，td 自动换行</p>\n<p>解决：设置 <code>Tabl</code>e 为 <code>table-layout: fixed</code>，<code>td</code> 为 <code>word-wrap: break-word</code></p>\n<h4 id=\"让层显示在-FLASH-之上\"><a href=\"#让层显示在-FLASH-之上\" class=\"headerlink\" title=\"让层显示在 FLASH 之上\"></a>让层显示在 FLASH 之上</h4><p>想让层的内容显示在 flash 上，把 FLASH 设置透明即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、&lt;param name&#x3D;&quot; wmode &quot; value&#x3D;&quot;transparent&quot; &#x2F;&gt;</span><br><span class=\"line\">2、&lt;param name&#x3D;&quot;wmode&quot; value&#x3D;&quot;opaque&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"键盘事件-keyCode-兼容性写法\"><a href=\"#键盘事件-keyCode-兼容性写法\" class=\"headerlink\" title=\"键盘事件 keyCode 兼容性写法\"></a>键盘事件 keyCode 兼容性写法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var inp &#x3D; document.getElementById(&#39;inp&#39;)</span><br><span class=\"line\">var result &#x3D; document.getElementById(&#39;result&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">function getKeyCode(e) &#123;</span><br><span class=\"line\">  e &#x3D; e ? e : (window.event ? window.event : &quot;&quot;)</span><br><span class=\"line\">  return e.keyCode ? e.keyCode : e.which</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">inp.onkeypress &#x3D; function(e) &#123;</span><br><span class=\"line\">  result.innerHTML &#x3D; getKeyCode(e)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"求窗口大小的兼容写法\"><a href=\"#求窗口大小的兼容写法\" class=\"headerlink\" title=\"求窗口大小的兼容写法\"></a>求窗口大小的兼容写法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 浏览器窗口可视区域大小（不包括工具栏和滚动条等边线）</span><br><span class=\"line\">&#x2F;&#x2F; 1600 * 525</span><br><span class=\"line\">var client_w &#x3D; document.documentElement.clientWidth || document.body.clientWidth;</span><br><span class=\"line\">var client_h &#x3D; document.documentElement.clientHeight || document.body.clientHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 网页内容实际宽高（包括工具栏和滚动条等边线）</span><br><span class=\"line\">&#x2F;&#x2F; 1600 * 8</span><br><span class=\"line\">var scroll_w &#x3D; document.documentElement.scrollWidth || document.body.scrollWidth;</span><br><span class=\"line\">var scroll_h &#x3D; document.documentElement.scrollHeight || document.body.scrollHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 网页内容实际宽高 (不包括工具栏和滚动条等边线）</span><br><span class=\"line\">&#x2F;&#x2F; 1600 * 8</span><br><span class=\"line\">var offset_w &#x3D; document.documentElement.offsetWidth || document.body.offsetWidth;</span><br><span class=\"line\">var offset_h &#x3D; document.documentElement.offsetHeight || document.body.offsetHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 滚动的高度</span><br><span class=\"line\">var scroll_Top &#x3D; document.documentElement.scrollTop||document.body.scrollTop;</span><br></pre></td></tr></table></figure>\n<h4 id=\"DOM-事件处理程序的兼容写法（能力检测）\"><a href=\"#DOM-事件处理程序的兼容写法（能力检测）\" class=\"headerlink\" title=\"DOM 事件处理程序的兼容写法（能力检测）\"></a>DOM 事件处理程序的兼容写法（能力检测）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var eventshiv &#x3D; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; event兼容</span><br><span class=\"line\">    getEvent: function(event) &#123;</span><br><span class=\"line\">        return event ? event : window.event;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; type兼容</span><br><span class=\"line\">    getType: function(event) &#123;</span><br><span class=\"line\">        return event.type;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; target兼容</span><br><span class=\"line\">    getTarget: function(event) &#123;</span><br><span class=\"line\">        return event.target ? event.target : event.srcelem;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 添加事件句柄</span><br><span class=\"line\">    addHandler: function(elem, type, listener) &#123;</span><br><span class=\"line\">        if (elem.addEventListener) &#123;</span><br><span class=\"line\">            elem.addEventListener(type, listener, false);</span><br><span class=\"line\">        &#125; else if (elem.attachEvent) &#123;</span><br><span class=\"line\">            elem.attachEvent(&#39;on&#39; + type, listener);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 在这里由于.与&#39;on&#39;字符串不能链接，只能用 []</span><br><span class=\"line\">            elem[&#39;on&#39; + type] &#x3D; listener;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 移除事件句柄</span><br><span class=\"line\">    removeHandler: function(elem, type, listener) &#123;</span><br><span class=\"line\">        if (elem.removeEventListener) &#123;</span><br><span class=\"line\">            elem.removeEventListener(type, listener, false);</span><br><span class=\"line\">        &#125; else if (elem.detachEvent) &#123;</span><br><span class=\"line\">            elem.detachEvent(&#39;on&#39; + type, listener);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            elem[&#39;on&#39; + type] &#x3D; null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 添加事件代理</span><br><span class=\"line\">    addAgent: function (elem, type, agent, listener) &#123;</span><br><span class=\"line\">        elem.addEventListener(type, function (e) &#123;</span><br><span class=\"line\">            if (e.target.matches(agent)) &#123;</span><br><span class=\"line\">                listener.call(e.target, e); &#x2F;&#x2F; this 指向 e.target</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 取消默认行为</span><br><span class=\"line\">    preventDefault: function(event) &#123;</span><br><span class=\"line\">        if (event.preventDefault) &#123;</span><br><span class=\"line\">            event.preventDefault();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            event.returnValue &#x3D; false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 阻止事件冒泡</span><br><span class=\"line\">    stopPropagation: function(event) &#123;</span><br><span class=\"line\">        if (event.stopPropagation) &#123;</span><br><span class=\"line\">            event.stopPropagation();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            event.cancelBubble &#x3D; true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"使用node开发自定义cli工具","date":"2020-02-19T15:00:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n这篇文章想写一写前端工程化相关的内容，原因一呢是是结合公司业务给自己定的业绩指标包含这些内容，另外一个原因是因为听了网易前端唐磊说过的一句话，前端leader干什么，很重要的工作就是前端工程化，高级以上不懂前端工程化很难。\n\n今天听了公开课讲到了用node写一个自己的cli，说实话正是工作所需，课程讲的有点快，没有从头跟下来，自己上完了课又上网上找了些资料，终于把步骤弄明白了，下面就把如何自定义一个cli来帮助提升开发效率。同时也完成了一个业务指标，心里美滋滋。\n\n# 准备\n如果你看到这篇文章，也想跟着我的步骤写一下这个自定义cli，那么如下的知识还是有一些为好。\n- 基础的nodejs相关知识\n\n没错就只需要会一些node的基础知识就可以了，接下来正式开始\n\n# 初始化\n首先，我们要给我们的命令行工具起个名字，比如我们熟悉的 vue 命令行就是 vue-cli ，因为我写完了要给公司用，所以我起的名字是 tfd-cli ，你们喜欢叫什么你们随意\n\n首先创建一个名字为 `tfd-cli` 的文件目录，然后在目录下执行 `node` 工程的初始化命令\n``` js\nnpm init -y // 初始化项目 -y 默认全部yes的参数\n```\n命令执行完成后 `tfd-cli` 目录下会生成一个我们熟悉的 `package.json` 文件，我们打开 `package.json` 文件，增加一段代码，如下\n``` json\n// 追加的代码\n\"bin\": {\n\t\"tfd\": \"index.js\"\n}\n```\n追加完成后，`package.json` 文件中的内容是这样的\n``` json\n{\n  \"name\": \"tfd-cli\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bin\": {\n    \"tfd\": \"index.js\"\n  }\n}\n```\n也就是说当我们执行 `tfd` 命令时它就会找同级目录下的 `index.js` 文件执行其中代码，我们目前还没有 `index.js`，文件，那么我们手动创建一个 `index.js` 的文件，然后在里面写下如下代码\n``` js\n#!/usr/bin/env node\n//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的\n\nconsole.log('hello world');\n\n```\n执行完这些还不够，因为我们是开发环境所以还有一步操作是要将 `tfd` 命令告知 `npm`，该如何处理，所以我们要执行如下命令\n``` js\nnpm link\n```\n这里如果执行不成功，请用管理员权限执行，执行完成后我们会得到一个 `package-lock.json` 的文件，内容如下\n``` json\n{\n  \"name\": \"tfd-cli\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 1\n}\n\n```\n如此一来，我们就可以在任何目录下执行命令行 `tfd` 就会执行 `index.js` 文件了，这里我们会在控制面板中输出 `hello world` ，怎么样是不是小有成就感，我们接着往下来。\n\n# 创建指令\n我们写个命令行工具肯定不是为了输出个 `hello world` 这么简单，而是希望通过用户输入内容后根据条件输出一些东西，那么让我们想想一个命令行工具应该具备哪些指令呢？\n- 查看命令行工具版本\n- 查看帮助文档\n- 初始化模板\n- 列出模板类型\n- 等等\n\n那么用指令该如何描述呢\n``` json\ntfd -V|--version //查看工具版本号\ntfd -h|--help //查看使用帮助\ntfd init <template-name> <project-name> //基于指定模板进行项目初始化\ntfd list //列出所有可用模板\n```\n为了执行命令，这里我们要引入一个 `node` 包叫做 `commander`，因此我们要先执行一下 `install` 命令\n``` js\nnpm install commander\n```\n接着我们就可以在 `index.js` 里面写指令了。\n``` js\n// index.js\n\n#!/usr/bin/env node\n//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的\nconst cmd = require('commander');\n\n// tfd -V|--version\ncmd.version('0.1.0');  // -V|--version时输出版本号0.1.0\n```\n到这一步我们在控制台敲一下 `tfd -V` 你会发现什么也没输出，这是因为到这一步我们还无法解析 `tfd -V` 操作，在这之前我们要知道一个命令\n``` js\nprocess.argv // 使用process.argv获取命令行参数\n```\n当我们把这句话加到 `console.log` 中在 `index.js` 中输出时你会看到控制台打印出\n``` js\n// index.js\n\n#!/usr/bin/env node\n//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的\nconst cmd = require('commander');\n\n// tfd -V|--version\ncmd.version('0.1.0');  // -V|--version时输出版本号0.1.0\nconsole.log(process.argv)\n\n// 控制台\n[ '/usr/local/bin/node', '/usr/local/bin/tfd', '-V' ]\n```\n接下来我们要让`commander`获取参数执行命令\n``` js\n// index.js\n\n#!/usr/bin/env node\n//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的\nconst cmd = require('commander');\n\n// tfd -V|--version\ncmd.version('0.1.0');  // -V|--version时输出版本号0.1.0\n// console.log(process.argv)\ncmd.parse(process.argv);\n\n```\n这个时候我们再在控制台输入 `tfd -V` 时，我们就会发现，控制台输出了 `0.1.0`，这样我们就完成了查版本的指令，接下来我们完成其他的指令\n\n``` js\n// index.js\n\n#!/usr/bin/env node\n//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的\nconst cmd = require('commander');\n\n// tfd -V|--version\ncmd.version('0.1.0');  // -V|--version时输出版本号0.1.0\n\n// tfd init <template> <project>\ncmd\n  .command('init <template> <project>') // 参数\n  .description('初始化项目模板')\n  .action((templateName, projectName) => {\n      console.log(templateName, projectName);\n  })\n \n// tfd list\ncmd\n  .command('list')\n  .description('查看所有可用模板')\n  .action(() => {\n      console.log(`\n          a   a模板\n          b   b模板\n          c   c模板\n      `)\n  })\n// console.log(process.argv)\ncmd.parse(process.argv);\n\n```\n这个时候我们在控制台上输入 `tfd -h` 的时候，控制台会输出如下代码\n``` js\nUsage: tfd [options] [command]\n\nOptions:\n  -V, --version              output the version number\n  -h, --help                 output usage information\n\nCommands:\n  init <template> <project>  初始化项目模板\n  list                       查看所有可用模板\n```\n这样我们就实现了自定义命令，我们执行一下 `tfd init template1 project1`，我们可以看到，控制台中输出了 `template1 project1`，也就是说`command`命令后尖括号中指向了`action`中的参数，我们就可以通过判断`action`中的参数做具体的操作了。\n\n通常模板可以选择从本地拷贝一份，但更常用的是从线上拷贝一份，比如从`github`中，接下来我们就看看如何从`github`中拷贝一个模板作为项目的初始化工程\n\n## github上创建模板仓库\n首先我们要在github上创建两个仓库 `tpl-1` `tpl-2`，这里为了从`github`中下载仓库我们需要一个`node`包支持，让我们请出`download-git-repo`，别忘了执行安装命令\n```\nnpm install download-git-repo\n```\n安装完依赖之后让我们再去`index.js`填点东西，首先引入下载依赖，然后是创建下载的 `template` 抽象对象\n``` js\n#!/usr/bin/env node\n//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的\nconst cmd = require('commander');\nconst download = require('download-git-repo');\n// 可用模板\nconst templates = {\n    'tpl-1': {\n        url: 'https://github.com/lixuguang/tpl-1',\n        downloadUrl: 'https://github.com:lixuguang/tpl-1#master',\n        description: 'tfd-cli脚手架测试模板1'\n    },\n    'tpl-2': {\n        url: 'https://github.com/lixuguang/tpl-2',\n        downloadUrl: 'https://github.com:lixuguang/tpl-2#master',\n        description: 'tfd-cli脚手架测试模板2'\n    }\n}\n\n// tfd -V|--version\ncmd.version('0.1.0');  // -V|--version时输出版本号0.1.0\n\n// tfd init <template> <project>\ncmd\n  .command('init <template> <project>') // 参数\n  .description('初始化项目模板')\n  .action((templateName, projectName) => {\n      // console.log(templateName, projectName);\n      let {downloadUrl} = templates[templateName];        \n        // 第一个参数是github仓库地址，第二个参数是创建的项目目录名，第三个参数是clone\n        download(downloadUrl, projectName, {clone: true}, err => {\n            if(err){\n                console.log('模板下载失败');\n            }else{\n                console.log('模板下载成功');\n            }\n        })\n  })\n \n// tfd list\ncmd\n  .command('list')\n  .description('查看所有可用模板')\n  .action(() => {\n    // console.log(`\n    //       a   a模板\n    //       b   b模板\n    //       c   c模板\n    //   `)\n    // 通过获取templates里的key可以获取到模板名称\n    const templateName = Object.keys(templates)\n    console.log(templateName)\n  })\n// console.log(process.argv)\ncmd.parse(process.argv);\n\n```\n这样当我们执行 `tfd list` 就可以看到有哪些模板了，然后执行`tfd init tpl-1 newproject` 就可以依据 `tpl-1` 模板创建出 `newproject` 工程，这个过程实际上就是从`github`仓库克隆一份`tpl-1`作为模板创建工程`newproject`\n\n***这里需要注意的是download地址跟github仓库地址有点出入，比如github仓库地址是https://github.com/xxx/xxx而下载地址是https://github.com:xxx/xxx***\n\n虽然这样执行完成后就完成了基本的cli的雏形，但是毕竟不灵活，我们在使用`vue-cli`时，它的创建过程是问答式和选择式的，另外每个过程都会有进度显示什么的，那么要怎么添加这些功能呢，我们接着往下做。\n\n## 进阶增加功能\n### 使用`inquirer`进行命令行答询\n`inquirer` 是一个进行命令行答询的库，通过它我们就可以创建问答式的内容，首先还是安装依赖\n```\nnpm install inquirer\n```\n### 使用handlebars修改package.json\n我们都知道在使用`vue-cli`的初始化命令后，会在项目目录下生成一个`package.json`文件，它就像是这个项目的基因序列一样，影响着项目的整个结构。模板是固定的，那要修改其中的`package.json`符合自己项目的需要，就要用到`handlebars`这个库来改写`package.json`文件，老规矩先安装它\n```\nnpm install handlebars\n```\n### 使用ora在命令行中显示加载状态\n我们在装任何依赖时都会有进度条显示进度，如果没有进度条又没有任何响应，会让用户迷茫，为了友好，我们就要加进度条，这里我们需要引入`ora`这个库来完成进度显示，我们接着安装。\n```\nnpm install ora\n```\n### 使用chalk和log-symbols增加命令行输出样式\n为了让命令行有红红绿绿的效果以及符号效果，我们需要使用`chalk`和`log-symbols`来丰富样式，少废话，接着装\n```\nnpm install chalk log-symbols\n```\n\n### 集大成\n终于安装完一堆的依赖，别忘了在`index.js`中引入，让我们看看具体如何使用这些库吧。\n``` js\n// index.js\n\n#!/usr/bin/env node\n//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的\nconst cmd = require('commander');\nconst download = require('download-git-repo');\n\nconst iq = require('inquirer');       // 命令行答询\nconst hb = require('handlebars');       // 修改package.json文件\nconst ora = require('ora');         // 命令行中加载状态标识\nconst chalk = require('chalk');     // 命令行输出字符颜色\nconst ls = require('log-symbols');      // 命令行输出符号\nconst fs = require('fs'); // node fs原生模块\n\n// 可用模板\nconst templates = {\n    'tpl-1': {\n        url: 'https://github.com/lixuguang/tpl-1',\n        downloadUrl: 'https://github.com:lixuguang/tpl-1#master',\n        description: 'tfd-cli脚手架测试模板1'\n    },\n    'tpl-2': {\n        url: 'https://github.com/lixuguang/tpl-2',\n        downloadUrl: 'https://github.com:lixuguang/tpl-2#master',\n        description: 'tfd-cli脚手架测试模板2'\n    }\n}\n\n// tfd -V|--version\ncmd.version('0.1.0');  // -V|--version时输出版本号0.1.0\n\n// tfd init <template> <project>\ncmd\n  .command('init <template> <project>') // 参数\n  .description('初始化项目模板')\n  .action((templateName, projectName) => {\n      // console.log(templateName, projectName);\n      let {downloadUrl} = templates[templateName];   \n      //下载github项目，下载墙loading提示\n      const loading = ora('模板下载中...').start();      \n      // 第一个参数是github仓库地址，第二个参数是创建的项目目录名，第三个参数是clone\n      download(downloadUrl, projectName, {clone: true}, err => {\n          if(err){\n              // console.log('模板下载失败');\n              loading.fail('模板下载失败');\n          }else{\n              // console.log('模板下载成功');\n              spinner.succeed('模板下载成功');\n              // 命令行答询\n              iq.prompt([\n                {\n                    type: 'input', // 类型 输入框\n                    name: 'name', // 字段 key\n                    message: '请输入项目名称', // 描述\n                    default: projectName // 默认值\n                },\n                {\n                    type: 'input',\n                    name: 'description',\n                    message: '请输入项目简介',\n                    default: ''\n                },\n                {\n                    type: 'input',\n                    name: 'author',\n                    message: '请输入作者名称',\n                    default: ''\n                }\n            ]).then(answers => { // answers 是一个对象，对象的 key 为上面答询的 name 的值，value 为 用户输入的值，如果未输入，就取默认值\n                // 根据命令行答询结果修改 package.json 文件\n                let packageContent = fs.readFileSync(`${projectName}/package.json`, 'utf8'); // 同步方式以 utf-8 字符集获得下载好的项目目录下的 package.json 文件\n                let packageResult = hb.compile(packageContent)(answers); // 将用户输入项与原内容混合获得新内容\n                fs.writeFileSync(`${projectName}/package.json`, packageResult); // 重新同步方式写入到 package.json 文件中\n                // 用chalk和log-symbols改变命令行输出样式\n                console.log(ls.success, chalk.green('模板项目文件准备成功！'));\n            })\n          }\n      })\n  })\n \n// tfd list\ncmd\n  .command('list')\n  .description('查看所有可用模板')\n  .action(() => {\n    // console.log(`\n    //       a   a模板\n    //       b   b模板\n    //       c   c模板\n    //   `)\n    // 通过获取templates里的key可以获取到模板名称\n    const templateName = Object.keys(templates)\n    console.log(templateName)\n  })\n// console.log(process.argv)\ncmd.parse(process.argv);\n\n```\n\n到这里你自己的命令行工具就创建完成了，当然还可以继续丰富，比如加上选择条件等，这个就更复杂了，不在本文中展开，后续会继续改进这个命令行工具，当然如果要将自己的命令行工具给其他人用当然要先发布出去，就像我们要用`vue-cli`，首先要在`npm`上下载下来，同样的我们要想让别人用，就得先上传到`npm`上。\n\n# 发布到npm上\n首先你需要有一个npm的账号，没有赶快去注册一个，在控制台中输入`npm login`，它会让你依次输入 `Username` `Password` `Email` ，当你都按照要求输入完之后，成功的话你会获得如下信息`Logged in as XXX on https://registry.npm.org/.`，再接下来执行 `npm publish` 命令，你的自定义脚手架就会发布到`npm`上，供他人下载使用，怎么样，学会了么？\n\n# 后记\n这篇文章会有后续持续进化跟进，多篇文章连续，只要我的cli工具还在进化，文章就会继续，欢迎跟进。","source":"_posts/develop-custom-cli-tools-using-node.md","raw":"---\ntitle: 使用node开发自定义cli工具\ndate: 2020-02-19 23:00:00\ncategories: \n\t- 前端工程化\ntags:\n\t- 脚手架\n---\n> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n这篇文章想写一写前端工程化相关的内容，原因一呢是是结合公司业务给自己定的业绩指标包含这些内容，另外一个原因是因为听了网易前端唐磊说过的一句话，前端leader干什么，很重要的工作就是前端工程化，高级以上不懂前端工程化很难。\n\n今天听了公开课讲到了用node写一个自己的cli，说实话正是工作所需，课程讲的有点快，没有从头跟下来，自己上完了课又上网上找了些资料，终于把步骤弄明白了，下面就把如何自定义一个cli来帮助提升开发效率。同时也完成了一个业务指标，心里美滋滋。\n\n# 准备\n如果你看到这篇文章，也想跟着我的步骤写一下这个自定义cli，那么如下的知识还是有一些为好。\n- 基础的nodejs相关知识\n\n没错就只需要会一些node的基础知识就可以了，接下来正式开始\n\n# 初始化\n首先，我们要给我们的命令行工具起个名字，比如我们熟悉的 vue 命令行就是 vue-cli ，因为我写完了要给公司用，所以我起的名字是 tfd-cli ，你们喜欢叫什么你们随意\n\n首先创建一个名字为 `tfd-cli` 的文件目录，然后在目录下执行 `node` 工程的初始化命令\n``` js\nnpm init -y // 初始化项目 -y 默认全部yes的参数\n```\n命令执行完成后 `tfd-cli` 目录下会生成一个我们熟悉的 `package.json` 文件，我们打开 `package.json` 文件，增加一段代码，如下\n``` json\n// 追加的代码\n\"bin\": {\n\t\"tfd\": \"index.js\"\n}\n```\n追加完成后，`package.json` 文件中的内容是这样的\n``` json\n{\n  \"name\": \"tfd-cli\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bin\": {\n    \"tfd\": \"index.js\"\n  }\n}\n```\n也就是说当我们执行 `tfd` 命令时它就会找同级目录下的 `index.js` 文件执行其中代码，我们目前还没有 `index.js`，文件，那么我们手动创建一个 `index.js` 的文件，然后在里面写下如下代码\n``` js\n#!/usr/bin/env node\n//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的\n\nconsole.log('hello world');\n\n```\n执行完这些还不够，因为我们是开发环境所以还有一步操作是要将 `tfd` 命令告知 `npm`，该如何处理，所以我们要执行如下命令\n``` js\nnpm link\n```\n这里如果执行不成功，请用管理员权限执行，执行完成后我们会得到一个 `package-lock.json` 的文件，内容如下\n``` json\n{\n  \"name\": \"tfd-cli\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 1\n}\n\n```\n如此一来，我们就可以在任何目录下执行命令行 `tfd` 就会执行 `index.js` 文件了，这里我们会在控制面板中输出 `hello world` ，怎么样是不是小有成就感，我们接着往下来。\n\n# 创建指令\n我们写个命令行工具肯定不是为了输出个 `hello world` 这么简单，而是希望通过用户输入内容后根据条件输出一些东西，那么让我们想想一个命令行工具应该具备哪些指令呢？\n- 查看命令行工具版本\n- 查看帮助文档\n- 初始化模板\n- 列出模板类型\n- 等等\n\n那么用指令该如何描述呢\n``` json\ntfd -V|--version //查看工具版本号\ntfd -h|--help //查看使用帮助\ntfd init <template-name> <project-name> //基于指定模板进行项目初始化\ntfd list //列出所有可用模板\n```\n为了执行命令，这里我们要引入一个 `node` 包叫做 `commander`，因此我们要先执行一下 `install` 命令\n``` js\nnpm install commander\n```\n接着我们就可以在 `index.js` 里面写指令了。\n``` js\n// index.js\n\n#!/usr/bin/env node\n//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的\nconst cmd = require('commander');\n\n// tfd -V|--version\ncmd.version('0.1.0');  // -V|--version时输出版本号0.1.0\n```\n到这一步我们在控制台敲一下 `tfd -V` 你会发现什么也没输出，这是因为到这一步我们还无法解析 `tfd -V` 操作，在这之前我们要知道一个命令\n``` js\nprocess.argv // 使用process.argv获取命令行参数\n```\n当我们把这句话加到 `console.log` 中在 `index.js` 中输出时你会看到控制台打印出\n``` js\n// index.js\n\n#!/usr/bin/env node\n//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的\nconst cmd = require('commander');\n\n// tfd -V|--version\ncmd.version('0.1.0');  // -V|--version时输出版本号0.1.0\nconsole.log(process.argv)\n\n// 控制台\n[ '/usr/local/bin/node', '/usr/local/bin/tfd', '-V' ]\n```\n接下来我们要让`commander`获取参数执行命令\n``` js\n// index.js\n\n#!/usr/bin/env node\n//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的\nconst cmd = require('commander');\n\n// tfd -V|--version\ncmd.version('0.1.0');  // -V|--version时输出版本号0.1.0\n// console.log(process.argv)\ncmd.parse(process.argv);\n\n```\n这个时候我们再在控制台输入 `tfd -V` 时，我们就会发现，控制台输出了 `0.1.0`，这样我们就完成了查版本的指令，接下来我们完成其他的指令\n\n``` js\n// index.js\n\n#!/usr/bin/env node\n//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的\nconst cmd = require('commander');\n\n// tfd -V|--version\ncmd.version('0.1.0');  // -V|--version时输出版本号0.1.0\n\n// tfd init <template> <project>\ncmd\n  .command('init <template> <project>') // 参数\n  .description('初始化项目模板')\n  .action((templateName, projectName) => {\n      console.log(templateName, projectName);\n  })\n \n// tfd list\ncmd\n  .command('list')\n  .description('查看所有可用模板')\n  .action(() => {\n      console.log(`\n          a   a模板\n          b   b模板\n          c   c模板\n      `)\n  })\n// console.log(process.argv)\ncmd.parse(process.argv);\n\n```\n这个时候我们在控制台上输入 `tfd -h` 的时候，控制台会输出如下代码\n``` js\nUsage: tfd [options] [command]\n\nOptions:\n  -V, --version              output the version number\n  -h, --help                 output usage information\n\nCommands:\n  init <template> <project>  初始化项目模板\n  list                       查看所有可用模板\n```\n这样我们就实现了自定义命令，我们执行一下 `tfd init template1 project1`，我们可以看到，控制台中输出了 `template1 project1`，也就是说`command`命令后尖括号中指向了`action`中的参数，我们就可以通过判断`action`中的参数做具体的操作了。\n\n通常模板可以选择从本地拷贝一份，但更常用的是从线上拷贝一份，比如从`github`中，接下来我们就看看如何从`github`中拷贝一个模板作为项目的初始化工程\n\n## github上创建模板仓库\n首先我们要在github上创建两个仓库 `tpl-1` `tpl-2`，这里为了从`github`中下载仓库我们需要一个`node`包支持，让我们请出`download-git-repo`，别忘了执行安装命令\n```\nnpm install download-git-repo\n```\n安装完依赖之后让我们再去`index.js`填点东西，首先引入下载依赖，然后是创建下载的 `template` 抽象对象\n``` js\n#!/usr/bin/env node\n//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的\nconst cmd = require('commander');\nconst download = require('download-git-repo');\n// 可用模板\nconst templates = {\n    'tpl-1': {\n        url: 'https://github.com/lixuguang/tpl-1',\n        downloadUrl: 'https://github.com:lixuguang/tpl-1#master',\n        description: 'tfd-cli脚手架测试模板1'\n    },\n    'tpl-2': {\n        url: 'https://github.com/lixuguang/tpl-2',\n        downloadUrl: 'https://github.com:lixuguang/tpl-2#master',\n        description: 'tfd-cli脚手架测试模板2'\n    }\n}\n\n// tfd -V|--version\ncmd.version('0.1.0');  // -V|--version时输出版本号0.1.0\n\n// tfd init <template> <project>\ncmd\n  .command('init <template> <project>') // 参数\n  .description('初始化项目模板')\n  .action((templateName, projectName) => {\n      // console.log(templateName, projectName);\n      let {downloadUrl} = templates[templateName];        \n        // 第一个参数是github仓库地址，第二个参数是创建的项目目录名，第三个参数是clone\n        download(downloadUrl, projectName, {clone: true}, err => {\n            if(err){\n                console.log('模板下载失败');\n            }else{\n                console.log('模板下载成功');\n            }\n        })\n  })\n \n// tfd list\ncmd\n  .command('list')\n  .description('查看所有可用模板')\n  .action(() => {\n    // console.log(`\n    //       a   a模板\n    //       b   b模板\n    //       c   c模板\n    //   `)\n    // 通过获取templates里的key可以获取到模板名称\n    const templateName = Object.keys(templates)\n    console.log(templateName)\n  })\n// console.log(process.argv)\ncmd.parse(process.argv);\n\n```\n这样当我们执行 `tfd list` 就可以看到有哪些模板了，然后执行`tfd init tpl-1 newproject` 就可以依据 `tpl-1` 模板创建出 `newproject` 工程，这个过程实际上就是从`github`仓库克隆一份`tpl-1`作为模板创建工程`newproject`\n\n***这里需要注意的是download地址跟github仓库地址有点出入，比如github仓库地址是https://github.com/xxx/xxx而下载地址是https://github.com:xxx/xxx***\n\n虽然这样执行完成后就完成了基本的cli的雏形，但是毕竟不灵活，我们在使用`vue-cli`时，它的创建过程是问答式和选择式的，另外每个过程都会有进度显示什么的，那么要怎么添加这些功能呢，我们接着往下做。\n\n## 进阶增加功能\n### 使用`inquirer`进行命令行答询\n`inquirer` 是一个进行命令行答询的库，通过它我们就可以创建问答式的内容，首先还是安装依赖\n```\nnpm install inquirer\n```\n### 使用handlebars修改package.json\n我们都知道在使用`vue-cli`的初始化命令后，会在项目目录下生成一个`package.json`文件，它就像是这个项目的基因序列一样，影响着项目的整个结构。模板是固定的，那要修改其中的`package.json`符合自己项目的需要，就要用到`handlebars`这个库来改写`package.json`文件，老规矩先安装它\n```\nnpm install handlebars\n```\n### 使用ora在命令行中显示加载状态\n我们在装任何依赖时都会有进度条显示进度，如果没有进度条又没有任何响应，会让用户迷茫，为了友好，我们就要加进度条，这里我们需要引入`ora`这个库来完成进度显示，我们接着安装。\n```\nnpm install ora\n```\n### 使用chalk和log-symbols增加命令行输出样式\n为了让命令行有红红绿绿的效果以及符号效果，我们需要使用`chalk`和`log-symbols`来丰富样式，少废话，接着装\n```\nnpm install chalk log-symbols\n```\n\n### 集大成\n终于安装完一堆的依赖，别忘了在`index.js`中引入，让我们看看具体如何使用这些库吧。\n``` js\n// index.js\n\n#!/usr/bin/env node\n//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的\nconst cmd = require('commander');\nconst download = require('download-git-repo');\n\nconst iq = require('inquirer');       // 命令行答询\nconst hb = require('handlebars');       // 修改package.json文件\nconst ora = require('ora');         // 命令行中加载状态标识\nconst chalk = require('chalk');     // 命令行输出字符颜色\nconst ls = require('log-symbols');      // 命令行输出符号\nconst fs = require('fs'); // node fs原生模块\n\n// 可用模板\nconst templates = {\n    'tpl-1': {\n        url: 'https://github.com/lixuguang/tpl-1',\n        downloadUrl: 'https://github.com:lixuguang/tpl-1#master',\n        description: 'tfd-cli脚手架测试模板1'\n    },\n    'tpl-2': {\n        url: 'https://github.com/lixuguang/tpl-2',\n        downloadUrl: 'https://github.com:lixuguang/tpl-2#master',\n        description: 'tfd-cli脚手架测试模板2'\n    }\n}\n\n// tfd -V|--version\ncmd.version('0.1.0');  // -V|--version时输出版本号0.1.0\n\n// tfd init <template> <project>\ncmd\n  .command('init <template> <project>') // 参数\n  .description('初始化项目模板')\n  .action((templateName, projectName) => {\n      // console.log(templateName, projectName);\n      let {downloadUrl} = templates[templateName];   \n      //下载github项目，下载墙loading提示\n      const loading = ora('模板下载中...').start();      \n      // 第一个参数是github仓库地址，第二个参数是创建的项目目录名，第三个参数是clone\n      download(downloadUrl, projectName, {clone: true}, err => {\n          if(err){\n              // console.log('模板下载失败');\n              loading.fail('模板下载失败');\n          }else{\n              // console.log('模板下载成功');\n              spinner.succeed('模板下载成功');\n              // 命令行答询\n              iq.prompt([\n                {\n                    type: 'input', // 类型 输入框\n                    name: 'name', // 字段 key\n                    message: '请输入项目名称', // 描述\n                    default: projectName // 默认值\n                },\n                {\n                    type: 'input',\n                    name: 'description',\n                    message: '请输入项目简介',\n                    default: ''\n                },\n                {\n                    type: 'input',\n                    name: 'author',\n                    message: '请输入作者名称',\n                    default: ''\n                }\n            ]).then(answers => { // answers 是一个对象，对象的 key 为上面答询的 name 的值，value 为 用户输入的值，如果未输入，就取默认值\n                // 根据命令行答询结果修改 package.json 文件\n                let packageContent = fs.readFileSync(`${projectName}/package.json`, 'utf8'); // 同步方式以 utf-8 字符集获得下载好的项目目录下的 package.json 文件\n                let packageResult = hb.compile(packageContent)(answers); // 将用户输入项与原内容混合获得新内容\n                fs.writeFileSync(`${projectName}/package.json`, packageResult); // 重新同步方式写入到 package.json 文件中\n                // 用chalk和log-symbols改变命令行输出样式\n                console.log(ls.success, chalk.green('模板项目文件准备成功！'));\n            })\n          }\n      })\n  })\n \n// tfd list\ncmd\n  .command('list')\n  .description('查看所有可用模板')\n  .action(() => {\n    // console.log(`\n    //       a   a模板\n    //       b   b模板\n    //       c   c模板\n    //   `)\n    // 通过获取templates里的key可以获取到模板名称\n    const templateName = Object.keys(templates)\n    console.log(templateName)\n  })\n// console.log(process.argv)\ncmd.parse(process.argv);\n\n```\n\n到这里你自己的命令行工具就创建完成了，当然还可以继续丰富，比如加上选择条件等，这个就更复杂了，不在本文中展开，后续会继续改进这个命令行工具，当然如果要将自己的命令行工具给其他人用当然要先发布出去，就像我们要用`vue-cli`，首先要在`npm`上下载下来，同样的我们要想让别人用，就得先上传到`npm`上。\n\n# 发布到npm上\n首先你需要有一个npm的账号，没有赶快去注册一个，在控制台中输入`npm login`，它会让你依次输入 `Username` `Password` `Email` ，当你都按照要求输入完之后，成功的话你会获得如下信息`Logged in as XXX on https://registry.npm.org/.`，再接下来执行 `npm publish` 命令，你的自定义脚手架就会发布到`npm`上，供他人下载使用，怎么样，学会了么？\n\n# 后记\n这篇文章会有后续持续进化跟进，多篇文章连续，只要我的cli工具还在进化，文章就会继续，欢迎跟进。","slug":"develop-custom-cli-tools-using-node","published":1,"updated":"2020-04-02T03:20:12.451Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs3f004iooa67xhi4r9q","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这篇文章想写一写前端工程化相关的内容，原因一呢是是结合公司业务给自己定的业绩指标包含这些内容，另外一个原因是因为听了网易前端唐磊说过的一句话，前端leader干什么，很重要的工作就是前端工程化，高级以上不懂前端工程化很难。</p>\n<p>今天听了公开课讲到了用node写一个自己的cli，说实话正是工作所需，课程讲的有点快，没有从头跟下来，自己上完了课又上网上找了些资料，终于把步骤弄明白了，下面就把如何自定义一个cli来帮助提升开发效率。同时也完成了一个业务指标，心里美滋滋。</p>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>如果你看到这篇文章，也想跟着我的步骤写一下这个自定义cli，那么如下的知识还是有一些为好。</p>\n<ul>\n<li>基础的nodejs相关知识</li>\n</ul>\n<p>没错就只需要会一些node的基础知识就可以了，接下来正式开始</p>\n<h1 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h1><p>首先，我们要给我们的命令行工具起个名字，比如我们熟悉的 vue 命令行就是 vue-cli ，因为我写完了要给公司用，所以我起的名字是 tfd-cli ，你们喜欢叫什么你们随意</p>\n<p>首先创建一个名字为 <code>tfd-cli</code> 的文件目录，然后在目录下执行 <code>node</code> 工程的初始化命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y <span class=\"comment\">// 初始化项目 -y 默认全部yes的参数</span></span><br></pre></td></tr></table></figure>\n<p>命令执行完成后 <code>tfd-cli</code> 目录下会生成一个我们熟悉的 <code>package.json</code> 文件，我们打开 <code>package.json</code> 文件，增加一段代码，如下</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 追加的代码</span></span><br><span class=\"line\">\"bin\": &#123;</span><br><span class=\"line\">\t\"tfd\": \"index.js\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>追加完成后，<code>package.json</code> 文件中的内容是这样的</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"tfd-cli\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"keywords\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"bin\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"tfd\"</span>: <span class=\"string\">\"index.js\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也就是说当我们执行 <code>tfd</code> 命令时它就会找同级目录下的 <code>index.js</code> 文件执行其中代码，我们目前还没有 <code>index.js</code>，文件，那么我们手动创建一个 <code>index.js</code> 的文件，然后在里面写下如下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"comment\">//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>);</span><br></pre></td></tr></table></figure>\n<p>执行完这些还不够，因为我们是开发环境所以还有一步操作是要将 <code>tfd</code> 命令告知 <code>npm</code>，该如何处理，所以我们要执行如下命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm link</span><br></pre></td></tr></table></figure>\n<p>这里如果执行不成功，请用管理员权限执行，执行完成后我们会得到一个 <code>package-lock.json</code> 的文件，内容如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"tfd-cli\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"lockfileVersion\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如此一来，我们就可以在任何目录下执行命令行 <code>tfd</code> 就会执行 <code>index.js</code> 文件了，这里我们会在控制面板中输出 <code>hello world</code> ，怎么样是不是小有成就感，我们接着往下来。</p>\n<h1 id=\"创建指令\"><a href=\"#创建指令\" class=\"headerlink\" title=\"创建指令\"></a>创建指令</h1><p>我们写个命令行工具肯定不是为了输出个 <code>hello world</code> 这么简单，而是希望通过用户输入内容后根据条件输出一些东西，那么让我们想想一个命令行工具应该具备哪些指令呢？</p>\n<ul>\n<li>查看命令行工具版本</li>\n<li>查看帮助文档</li>\n<li>初始化模板</li>\n<li>列出模板类型</li>\n<li>等等</li>\n</ul>\n<p>那么用指令该如何描述呢</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tfd -V|--version //查看工具版本号</span><br><span class=\"line\">tfd -h|--help //查看使用帮助</span><br><span class=\"line\">tfd init &lt;template-name&gt; &lt;project-name&gt; //基于指定模板进行项目初始化</span><br><span class=\"line\">tfd list //列出所有可用模板</span><br></pre></td></tr></table></figure>\n<p>为了执行命令，这里我们要引入一个 <code>node</code> 包叫做 <code>commander</code>，因此我们要先执行一下 <code>install</code> 命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install commander</span><br></pre></td></tr></table></figure>\n<p>接着我们就可以在 <code>index.js</code> 里面写指令了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"comment\">//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cmd = <span class=\"built_in\">require</span>(<span class=\"string\">'commander'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tfd -V|--version</span></span><br><span class=\"line\">cmd.version(<span class=\"string\">'0.1.0'</span>);  <span class=\"comment\">// -V|--version时输出版本号0.1.0</span></span><br></pre></td></tr></table></figure>\n<p>到这一步我们在控制台敲一下 <code>tfd -V</code> 你会发现什么也没输出，这是因为到这一步我们还无法解析 <code>tfd -V</code> 操作，在这之前我们要知道一个命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.argv <span class=\"comment\">// 使用process.argv获取命令行参数</span></span><br></pre></td></tr></table></figure>\n<p>当我们把这句话加到 <code>console.log</code> 中在 <code>index.js</code> 中输出时你会看到控制台打印出</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"comment\">//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cmd = <span class=\"built_in\">require</span>(<span class=\"string\">'commander'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tfd -V|--version</span></span><br><span class=\"line\">cmd.version(<span class=\"string\">'0.1.0'</span>);  <span class=\"comment\">// -V|--version时输出版本号0.1.0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(process.argv)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 控制台</span></span><br><span class=\"line\">[ <span class=\"string\">'/usr/local/bin/node'</span>, <span class=\"string\">'/usr/local/bin/tfd'</span>, <span class=\"string\">'-V'</span> ]</span><br></pre></td></tr></table></figure>\n<p>接下来我们要让<code>commander</code>获取参数执行命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"comment\">//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cmd = <span class=\"built_in\">require</span>(<span class=\"string\">'commander'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tfd -V|--version</span></span><br><span class=\"line\">cmd.version(<span class=\"string\">'0.1.0'</span>);  <span class=\"comment\">// -V|--version时输出版本号0.1.0</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(process.argv)</span></span><br><span class=\"line\">cmd.parse(process.argv);</span><br></pre></td></tr></table></figure>\n<p>这个时候我们再在控制台输入 <code>tfd -V</code> 时，我们就会发现，控制台输出了 <code>0.1.0</code>，这样我们就完成了查版本的指令，接下来我们完成其他的指令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"comment\">//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cmd = <span class=\"built_in\">require</span>(<span class=\"string\">'commander'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tfd -V|--version</span></span><br><span class=\"line\">cmd.version(<span class=\"string\">'0.1.0'</span>);  <span class=\"comment\">// -V|--version时输出版本号0.1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tfd init &lt;template&gt; &lt;project&gt;</span></span><br><span class=\"line\">cmd</span><br><span class=\"line\">  .command(<span class=\"string\">'init &lt;template&gt; &lt;project&gt;'</span>) <span class=\"comment\">// 参数</span></span><br><span class=\"line\">  .description(<span class=\"string\">'初始化项目模板'</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">(<span class=\"params\">templateName, projectName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(templateName, projectName);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// tfd list</span></span><br><span class=\"line\">cmd</span><br><span class=\"line\">  .command(<span class=\"string\">'list'</span>)</span><br><span class=\"line\">  .description(<span class=\"string\">'查看所有可用模板'</span>)</span><br><span class=\"line\">  .action(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">          a   a模板</span></span><br><span class=\"line\"><span class=\"string\">          b   b模板</span></span><br><span class=\"line\"><span class=\"string\">          c   c模板</span></span><br><span class=\"line\"><span class=\"string\">      `</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"comment\">// console.log(process.argv)</span></span><br><span class=\"line\">cmd.parse(process.argv);</span><br></pre></td></tr></table></figure>\n<p>这个时候我们在控制台上输入 <code>tfd -h</code> 的时候，控制台会输出如下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: tfd [options] [command]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -V, --version              output the version number</span><br><span class=\"line\">  -h, --help                 output usage information</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  init &lt;template&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span>  初始化项目模板</span></span><br><span class=\"line\"><span class=\"xml\">  list                       查看所有可用模板</span></span><br></pre></td></tr></table></figure>\n<p>这样我们就实现了自定义命令，我们执行一下 <code>tfd init template1 project1</code>，我们可以看到，控制台中输出了 <code>template1 project1</code>，也就是说<code>command</code>命令后尖括号中指向了<code>action</code>中的参数，我们就可以通过判断<code>action</code>中的参数做具体的操作了。</p>\n<p>通常模板可以选择从本地拷贝一份，但更常用的是从线上拷贝一份，比如从<code>github</code>中，接下来我们就看看如何从<code>github</code>中拷贝一个模板作为项目的初始化工程</p>\n<h2 id=\"github上创建模板仓库\"><a href=\"#github上创建模板仓库\" class=\"headerlink\" title=\"github上创建模板仓库\"></a>github上创建模板仓库</h2><p>首先我们要在github上创建两个仓库 <code>tpl-1</code> <code>tpl-2</code>，这里为了从<code>github</code>中下载仓库我们需要一个<code>node</code>包支持，让我们请出<code>download-git-repo</code>，别忘了执行安装命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install download-git-repo</span><br></pre></td></tr></table></figure>\n<p>安装完依赖之后让我们再去<code>index.js</code>填点东西，首先引入下载依赖，然后是创建下载的 <code>template</code> 抽象对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"comment\">//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cmd = <span class=\"built_in\">require</span>(<span class=\"string\">'commander'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> download = <span class=\"built_in\">require</span>(<span class=\"string\">'download-git-repo'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 可用模板</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> templates = &#123;</span><br><span class=\"line\">    <span class=\"string\">'tpl-1'</span>: &#123;</span><br><span class=\"line\">        url: <span class=\"string\">'https://github.com/lixuguang/tpl-1'</span>,</span><br><span class=\"line\">        downloadUrl: <span class=\"string\">'https://github.com:lixuguang/tpl-1#master'</span>,</span><br><span class=\"line\">        description: <span class=\"string\">'tfd-cli脚手架测试模板1'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'tpl-2'</span>: &#123;</span><br><span class=\"line\">        url: <span class=\"string\">'https://github.com/lixuguang/tpl-2'</span>,</span><br><span class=\"line\">        downloadUrl: <span class=\"string\">'https://github.com:lixuguang/tpl-2#master'</span>,</span><br><span class=\"line\">        description: <span class=\"string\">'tfd-cli脚手架测试模板2'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tfd -V|--version</span></span><br><span class=\"line\">cmd.version(<span class=\"string\">'0.1.0'</span>);  <span class=\"comment\">// -V|--version时输出版本号0.1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tfd init &lt;template&gt; &lt;project&gt;</span></span><br><span class=\"line\">cmd</span><br><span class=\"line\">  .command(<span class=\"string\">'init &lt;template&gt; &lt;project&gt;'</span>) <span class=\"comment\">// 参数</span></span><br><span class=\"line\">  .description(<span class=\"string\">'初始化项目模板'</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">(<span class=\"params\">templateName, projectName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// console.log(templateName, projectName);</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> &#123;downloadUrl&#125; = templates[templateName];        </span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是github仓库地址，第二个参数是创建的项目目录名，第三个参数是clone</span></span><br><span class=\"line\">        download(downloadUrl, projectName, &#123;<span class=\"attr\">clone</span>: <span class=\"literal\">true</span>&#125;, err =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'模板下载失败'</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'模板下载成功'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// tfd list</span></span><br><span class=\"line\">cmd</span><br><span class=\"line\">  .command(<span class=\"string\">'list'</span>)</span><br><span class=\"line\">  .description(<span class=\"string\">'查看所有可用模板'</span>)</span><br><span class=\"line\">  .action(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(`</span></span><br><span class=\"line\">    <span class=\"comment\">//       a   a模板</span></span><br><span class=\"line\">    <span class=\"comment\">//       b   b模板</span></span><br><span class=\"line\">    <span class=\"comment\">//       c   c模板</span></span><br><span class=\"line\">    <span class=\"comment\">//   `)</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过获取templates里的key可以获取到模板名称</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> templateName = <span class=\"built_in\">Object</span>.keys(templates)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(templateName)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"comment\">// console.log(process.argv)</span></span><br><span class=\"line\">cmd.parse(process.argv);</span><br></pre></td></tr></table></figure>\n<p>这样当我们执行 <code>tfd list</code> 就可以看到有哪些模板了，然后执行<code>tfd init tpl-1 newproject</code> 就可以依据 <code>tpl-1</code> 模板创建出 <code>newproject</code> 工程，这个过程实际上就是从<code>github</code>仓库克隆一份<code>tpl-1</code>作为模板创建工程<code>newproject</code></p>\n<p><strong><em>这里需要注意的是download地址跟github仓库地址有点出入，比如github仓库地址是<a href=\"https://github.com/xxx/xxx而下载地址是https://github.com:xxx/xxx\" target=\"_blank\" rel=\"noopener\">https://github.com/xxx/xxx而下载地址是https://github.com:xxx/xxx</a></em></strong></p>\n<p>虽然这样执行完成后就完成了基本的cli的雏形，但是毕竟不灵活，我们在使用<code>vue-cli</code>时，它的创建过程是问答式和选择式的，另外每个过程都会有进度显示什么的，那么要怎么添加这些功能呢，我们接着往下做。</p>\n<h2 id=\"进阶增加功能\"><a href=\"#进阶增加功能\" class=\"headerlink\" title=\"进阶增加功能\"></a>进阶增加功能</h2><h3 id=\"使用inquirer进行命令行答询\"><a href=\"#使用inquirer进行命令行答询\" class=\"headerlink\" title=\"使用inquirer进行命令行答询\"></a>使用<code>inquirer</code>进行命令行答询</h3><p><code>inquirer</code> 是一个进行命令行答询的库，通过它我们就可以创建问答式的内容，首先还是安装依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install inquirer</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用handlebars修改package-json\"><a href=\"#使用handlebars修改package-json\" class=\"headerlink\" title=\"使用handlebars修改package.json\"></a>使用handlebars修改package.json</h3><p>我们都知道在使用<code>vue-cli</code>的初始化命令后，会在项目目录下生成一个<code>package.json</code>文件，它就像是这个项目的基因序列一样，影响着项目的整个结构。模板是固定的，那要修改其中的<code>package.json</code>符合自己项目的需要，就要用到<code>handlebars</code>这个库来改写<code>package.json</code>文件，老规矩先安装它</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install handlebars</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用ora在命令行中显示加载状态\"><a href=\"#使用ora在命令行中显示加载状态\" class=\"headerlink\" title=\"使用ora在命令行中显示加载状态\"></a>使用ora在命令行中显示加载状态</h3><p>我们在装任何依赖时都会有进度条显示进度，如果没有进度条又没有任何响应，会让用户迷茫，为了友好，我们就要加进度条，这里我们需要引入<code>ora</code>这个库来完成进度显示，我们接着安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install ora</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用chalk和log-symbols增加命令行输出样式\"><a href=\"#使用chalk和log-symbols增加命令行输出样式\" class=\"headerlink\" title=\"使用chalk和log-symbols增加命令行输出样式\"></a>使用chalk和log-symbols增加命令行输出样式</h3><p>为了让命令行有红红绿绿的效果以及符号效果，我们需要使用<code>chalk</code>和<code>log-symbols</code>来丰富样式，少废话，接着装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install chalk log-symbols</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"集大成\"><a href=\"#集大成\" class=\"headerlink\" title=\"集大成\"></a>集大成</h3><p>终于安装完一堆的依赖，别忘了在<code>index.js</code>中引入，让我们看看具体如何使用这些库吧。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"comment\">//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cmd = <span class=\"built_in\">require</span>(<span class=\"string\">'commander'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> download = <span class=\"built_in\">require</span>(<span class=\"string\">'download-git-repo'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iq = <span class=\"built_in\">require</span>(<span class=\"string\">'inquirer'</span>);       <span class=\"comment\">// 命令行答询</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> hb = <span class=\"built_in\">require</span>(<span class=\"string\">'handlebars'</span>);       <span class=\"comment\">// 修改package.json文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ora = <span class=\"built_in\">require</span>(<span class=\"string\">'ora'</span>);         <span class=\"comment\">// 命令行中加载状态标识</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">'chalk'</span>);     <span class=\"comment\">// 命令行输出字符颜色</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ls = <span class=\"built_in\">require</span>(<span class=\"string\">'log-symbols'</span>);      <span class=\"comment\">// 命令行输出符号</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>); <span class=\"comment\">// node fs原生模块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可用模板</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> templates = &#123;</span><br><span class=\"line\">    <span class=\"string\">'tpl-1'</span>: &#123;</span><br><span class=\"line\">        url: <span class=\"string\">'https://github.com/lixuguang/tpl-1'</span>,</span><br><span class=\"line\">        downloadUrl: <span class=\"string\">'https://github.com:lixuguang/tpl-1#master'</span>,</span><br><span class=\"line\">        description: <span class=\"string\">'tfd-cli脚手架测试模板1'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'tpl-2'</span>: &#123;</span><br><span class=\"line\">        url: <span class=\"string\">'https://github.com/lixuguang/tpl-2'</span>,</span><br><span class=\"line\">        downloadUrl: <span class=\"string\">'https://github.com:lixuguang/tpl-2#master'</span>,</span><br><span class=\"line\">        description: <span class=\"string\">'tfd-cli脚手架测试模板2'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tfd -V|--version</span></span><br><span class=\"line\">cmd.version(<span class=\"string\">'0.1.0'</span>);  <span class=\"comment\">// -V|--version时输出版本号0.1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tfd init &lt;template&gt; &lt;project&gt;</span></span><br><span class=\"line\">cmd</span><br><span class=\"line\">  .command(<span class=\"string\">'init &lt;template&gt; &lt;project&gt;'</span>) <span class=\"comment\">// 参数</span></span><br><span class=\"line\">  .description(<span class=\"string\">'初始化项目模板'</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">(<span class=\"params\">templateName, projectName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// console.log(templateName, projectName);</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> &#123;downloadUrl&#125; = templates[templateName];   </span><br><span class=\"line\">      <span class=\"comment\">//下载github项目，下载墙loading提示</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> loading = ora(<span class=\"string\">'模板下载中...'</span>).start();      </span><br><span class=\"line\">      <span class=\"comment\">// 第一个参数是github仓库地址，第二个参数是创建的项目目录名，第三个参数是clone</span></span><br><span class=\"line\">      download(downloadUrl, projectName, &#123;<span class=\"attr\">clone</span>: <span class=\"literal\">true</span>&#125;, err =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">              <span class=\"comment\">// console.log('模板下载失败');</span></span><br><span class=\"line\">              loading.fail(<span class=\"string\">'模板下载失败'</span>);</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">              <span class=\"comment\">// console.log('模板下载成功');</span></span><br><span class=\"line\">              spinner.succeed(<span class=\"string\">'模板下载成功'</span>);</span><br><span class=\"line\">              <span class=\"comment\">// 命令行答询</span></span><br><span class=\"line\">              iq.prompt([</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    type: <span class=\"string\">'input'</span>, <span class=\"comment\">// 类型 输入框</span></span><br><span class=\"line\">                    name: <span class=\"string\">'name'</span>, <span class=\"comment\">// 字段 key</span></span><br><span class=\"line\">                    message: <span class=\"string\">'请输入项目名称'</span>, <span class=\"comment\">// 描述</span></span><br><span class=\"line\">                    <span class=\"keyword\">default</span>: projectName <span class=\"comment\">// 默认值</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    type: <span class=\"string\">'input'</span>,</span><br><span class=\"line\">                    name: <span class=\"string\">'description'</span>,</span><br><span class=\"line\">                    message: <span class=\"string\">'请输入项目简介'</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">default</span>: <span class=\"string\">''</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    type: <span class=\"string\">'input'</span>,</span><br><span class=\"line\">                    name: <span class=\"string\">'author'</span>,</span><br><span class=\"line\">                    message: <span class=\"string\">'请输入作者名称'</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">default</span>: <span class=\"string\">''</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]).then(<span class=\"function\"><span class=\"params\">answers</span> =&gt;</span> &#123; <span class=\"comment\">// answers 是一个对象，对象的 key 为上面答询的 name 的值，value 为 用户输入的值，如果未输入，就取默认值</span></span><br><span class=\"line\">                <span class=\"comment\">// 根据命令行答询结果修改 package.json 文件</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> packageContent = fs.readFileSync(<span class=\"string\">`<span class=\"subst\">$&#123;projectName&#125;</span>/package.json`</span>, <span class=\"string\">'utf8'</span>); <span class=\"comment\">// 同步方式以 utf-8 字符集获得下载好的项目目录下的 package.json 文件</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> packageResult = hb.compile(packageContent)(answers); <span class=\"comment\">// 将用户输入项与原内容混合获得新内容</span></span><br><span class=\"line\">                fs.writeFileSync(<span class=\"string\">`<span class=\"subst\">$&#123;projectName&#125;</span>/package.json`</span>, packageResult); <span class=\"comment\">// 重新同步方式写入到 package.json 文件中</span></span><br><span class=\"line\">                <span class=\"comment\">// 用chalk和log-symbols改变命令行输出样式</span></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(ls.success, chalk.green(<span class=\"string\">'模板项目文件准备成功！'</span>));</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// tfd list</span></span><br><span class=\"line\">cmd</span><br><span class=\"line\">  .command(<span class=\"string\">'list'</span>)</span><br><span class=\"line\">  .description(<span class=\"string\">'查看所有可用模板'</span>)</span><br><span class=\"line\">  .action(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(`</span></span><br><span class=\"line\">    <span class=\"comment\">//       a   a模板</span></span><br><span class=\"line\">    <span class=\"comment\">//       b   b模板</span></span><br><span class=\"line\">    <span class=\"comment\">//       c   c模板</span></span><br><span class=\"line\">    <span class=\"comment\">//   `)</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过获取templates里的key可以获取到模板名称</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> templateName = <span class=\"built_in\">Object</span>.keys(templates)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(templateName)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"comment\">// console.log(process.argv)</span></span><br><span class=\"line\">cmd.parse(process.argv);</span><br></pre></td></tr></table></figure>\n\n<p>到这里你自己的命令行工具就创建完成了，当然还可以继续丰富，比如加上选择条件等，这个就更复杂了，不在本文中展开，后续会继续改进这个命令行工具，当然如果要将自己的命令行工具给其他人用当然要先发布出去，就像我们要用<code>vue-cli</code>，首先要在<code>npm</code>上下载下来，同样的我们要想让别人用，就得先上传到<code>npm</code>上。</p>\n<h1 id=\"发布到npm上\"><a href=\"#发布到npm上\" class=\"headerlink\" title=\"发布到npm上\"></a>发布到npm上</h1><p>首先你需要有一个npm的账号，没有赶快去注册一个，在控制台中输入<code>npm login</code>，它会让你依次输入 <code>Username</code> <code>Password</code> <code>Email</code> ，当你都按照要求输入完之后，成功的话你会获得如下信息<code>Logged in as XXX on https://registry.npm.org/.</code>，再接下来执行 <code>npm publish</code> 命令，你的自定义脚手架就会发布到<code>npm</code>上，供他人下载使用，怎么样，学会了么？</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>这篇文章会有后续持续进化跟进，多篇文章连续，只要我的cli工具还在进化，文章就会继续，欢迎跟进。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这篇文章想写一写前端工程化相关的内容，原因一呢是是结合公司业务给自己定的业绩指标包含这些内容，另外一个原因是因为听了网易前端唐磊说过的一句话，前端leader干什么，很重要的工作就是前端工程化，高级以上不懂前端工程化很难。</p>\n<p>今天听了公开课讲到了用node写一个自己的cli，说实话正是工作所需，课程讲的有点快，没有从头跟下来，自己上完了课又上网上找了些资料，终于把步骤弄明白了，下面就把如何自定义一个cli来帮助提升开发效率。同时也完成了一个业务指标，心里美滋滋。</p>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>如果你看到这篇文章，也想跟着我的步骤写一下这个自定义cli，那么如下的知识还是有一些为好。</p>\n<ul>\n<li>基础的nodejs相关知识</li>\n</ul>\n<p>没错就只需要会一些node的基础知识就可以了，接下来正式开始</p>\n<h1 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h1><p>首先，我们要给我们的命令行工具起个名字，比如我们熟悉的 vue 命令行就是 vue-cli ，因为我写完了要给公司用，所以我起的名字是 tfd-cli ，你们喜欢叫什么你们随意</p>\n<p>首先创建一个名字为 <code>tfd-cli</code> 的文件目录，然后在目录下执行 <code>node</code> 工程的初始化命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y <span class=\"comment\">// 初始化项目 -y 默认全部yes的参数</span></span><br></pre></td></tr></table></figure>\n<p>命令执行完成后 <code>tfd-cli</code> 目录下会生成一个我们熟悉的 <code>package.json</code> 文件，我们打开 <code>package.json</code> 文件，增加一段代码，如下</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 追加的代码</span></span><br><span class=\"line\">\"bin\": &#123;</span><br><span class=\"line\">\t\"tfd\": \"index.js\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>追加完成后，<code>package.json</code> 文件中的内容是这样的</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"tfd-cli\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"keywords\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"bin\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"tfd\"</span>: <span class=\"string\">\"index.js\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也就是说当我们执行 <code>tfd</code> 命令时它就会找同级目录下的 <code>index.js</code> 文件执行其中代码，我们目前还没有 <code>index.js</code>，文件，那么我们手动创建一个 <code>index.js</code> 的文件，然后在里面写下如下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"comment\">//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>);</span><br></pre></td></tr></table></figure>\n<p>执行完这些还不够，因为我们是开发环境所以还有一步操作是要将 <code>tfd</code> 命令告知 <code>npm</code>，该如何处理，所以我们要执行如下命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm link</span><br></pre></td></tr></table></figure>\n<p>这里如果执行不成功，请用管理员权限执行，执行完成后我们会得到一个 <code>package-lock.json</code> 的文件，内容如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"tfd-cli\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"lockfileVersion\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如此一来，我们就可以在任何目录下执行命令行 <code>tfd</code> 就会执行 <code>index.js</code> 文件了，这里我们会在控制面板中输出 <code>hello world</code> ，怎么样是不是小有成就感，我们接着往下来。</p>\n<h1 id=\"创建指令\"><a href=\"#创建指令\" class=\"headerlink\" title=\"创建指令\"></a>创建指令</h1><p>我们写个命令行工具肯定不是为了输出个 <code>hello world</code> 这么简单，而是希望通过用户输入内容后根据条件输出一些东西，那么让我们想想一个命令行工具应该具备哪些指令呢？</p>\n<ul>\n<li>查看命令行工具版本</li>\n<li>查看帮助文档</li>\n<li>初始化模板</li>\n<li>列出模板类型</li>\n<li>等等</li>\n</ul>\n<p>那么用指令该如何描述呢</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tfd -V|--version //查看工具版本号</span><br><span class=\"line\">tfd -h|--help //查看使用帮助</span><br><span class=\"line\">tfd init &lt;template-name&gt; &lt;project-name&gt; //基于指定模板进行项目初始化</span><br><span class=\"line\">tfd list //列出所有可用模板</span><br></pre></td></tr></table></figure>\n<p>为了执行命令，这里我们要引入一个 <code>node</code> 包叫做 <code>commander</code>，因此我们要先执行一下 <code>install</code> 命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install commander</span><br></pre></td></tr></table></figure>\n<p>接着我们就可以在 <code>index.js</code> 里面写指令了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"comment\">//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cmd = <span class=\"built_in\">require</span>(<span class=\"string\">'commander'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tfd -V|--version</span></span><br><span class=\"line\">cmd.version(<span class=\"string\">'0.1.0'</span>);  <span class=\"comment\">// -V|--version时输出版本号0.1.0</span></span><br></pre></td></tr></table></figure>\n<p>到这一步我们在控制台敲一下 <code>tfd -V</code> 你会发现什么也没输出，这是因为到这一步我们还无法解析 <code>tfd -V</code> 操作，在这之前我们要知道一个命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.argv <span class=\"comment\">// 使用process.argv获取命令行参数</span></span><br></pre></td></tr></table></figure>\n<p>当我们把这句话加到 <code>console.log</code> 中在 <code>index.js</code> 中输出时你会看到控制台打印出</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"comment\">//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cmd = <span class=\"built_in\">require</span>(<span class=\"string\">'commander'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tfd -V|--version</span></span><br><span class=\"line\">cmd.version(<span class=\"string\">'0.1.0'</span>);  <span class=\"comment\">// -V|--version时输出版本号0.1.0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(process.argv)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 控制台</span></span><br><span class=\"line\">[ <span class=\"string\">'/usr/local/bin/node'</span>, <span class=\"string\">'/usr/local/bin/tfd'</span>, <span class=\"string\">'-V'</span> ]</span><br></pre></td></tr></table></figure>\n<p>接下来我们要让<code>commander</code>获取参数执行命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"comment\">//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cmd = <span class=\"built_in\">require</span>(<span class=\"string\">'commander'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tfd -V|--version</span></span><br><span class=\"line\">cmd.version(<span class=\"string\">'0.1.0'</span>);  <span class=\"comment\">// -V|--version时输出版本号0.1.0</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(process.argv)</span></span><br><span class=\"line\">cmd.parse(process.argv);</span><br></pre></td></tr></table></figure>\n<p>这个时候我们再在控制台输入 <code>tfd -V</code> 时，我们就会发现，控制台输出了 <code>0.1.0</code>，这样我们就完成了查版本的指令，接下来我们完成其他的指令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"comment\">//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cmd = <span class=\"built_in\">require</span>(<span class=\"string\">'commander'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tfd -V|--version</span></span><br><span class=\"line\">cmd.version(<span class=\"string\">'0.1.0'</span>);  <span class=\"comment\">// -V|--version时输出版本号0.1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tfd init &lt;template&gt; &lt;project&gt;</span></span><br><span class=\"line\">cmd</span><br><span class=\"line\">  .command(<span class=\"string\">'init &lt;template&gt; &lt;project&gt;'</span>) <span class=\"comment\">// 参数</span></span><br><span class=\"line\">  .description(<span class=\"string\">'初始化项目模板'</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">(<span class=\"params\">templateName, projectName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(templateName, projectName);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// tfd list</span></span><br><span class=\"line\">cmd</span><br><span class=\"line\">  .command(<span class=\"string\">'list'</span>)</span><br><span class=\"line\">  .description(<span class=\"string\">'查看所有可用模板'</span>)</span><br><span class=\"line\">  .action(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">          a   a模板</span></span><br><span class=\"line\"><span class=\"string\">          b   b模板</span></span><br><span class=\"line\"><span class=\"string\">          c   c模板</span></span><br><span class=\"line\"><span class=\"string\">      `</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"comment\">// console.log(process.argv)</span></span><br><span class=\"line\">cmd.parse(process.argv);</span><br></pre></td></tr></table></figure>\n<p>这个时候我们在控制台上输入 <code>tfd -h</code> 的时候，控制台会输出如下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: tfd [options] [command]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -V, --version              output the version number</span><br><span class=\"line\">  -h, --help                 output usage information</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  init &lt;template&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span>  初始化项目模板</span></span><br><span class=\"line\"><span class=\"xml\">  list                       查看所有可用模板</span></span><br></pre></td></tr></table></figure>\n<p>这样我们就实现了自定义命令，我们执行一下 <code>tfd init template1 project1</code>，我们可以看到，控制台中输出了 <code>template1 project1</code>，也就是说<code>command</code>命令后尖括号中指向了<code>action</code>中的参数，我们就可以通过判断<code>action</code>中的参数做具体的操作了。</p>\n<p>通常模板可以选择从本地拷贝一份，但更常用的是从线上拷贝一份，比如从<code>github</code>中，接下来我们就看看如何从<code>github</code>中拷贝一个模板作为项目的初始化工程</p>\n<h2 id=\"github上创建模板仓库\"><a href=\"#github上创建模板仓库\" class=\"headerlink\" title=\"github上创建模板仓库\"></a>github上创建模板仓库</h2><p>首先我们要在github上创建两个仓库 <code>tpl-1</code> <code>tpl-2</code>，这里为了从<code>github</code>中下载仓库我们需要一个<code>node</code>包支持，让我们请出<code>download-git-repo</code>，别忘了执行安装命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install download-git-repo</span><br></pre></td></tr></table></figure>\n<p>安装完依赖之后让我们再去<code>index.js</code>填点东西，首先引入下载依赖，然后是创建下载的 <code>template</code> 抽象对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"comment\">//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cmd = <span class=\"built_in\">require</span>(<span class=\"string\">'commander'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> download = <span class=\"built_in\">require</span>(<span class=\"string\">'download-git-repo'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 可用模板</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> templates = &#123;</span><br><span class=\"line\">    <span class=\"string\">'tpl-1'</span>: &#123;</span><br><span class=\"line\">        url: <span class=\"string\">'https://github.com/lixuguang/tpl-1'</span>,</span><br><span class=\"line\">        downloadUrl: <span class=\"string\">'https://github.com:lixuguang/tpl-1#master'</span>,</span><br><span class=\"line\">        description: <span class=\"string\">'tfd-cli脚手架测试模板1'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'tpl-2'</span>: &#123;</span><br><span class=\"line\">        url: <span class=\"string\">'https://github.com/lixuguang/tpl-2'</span>,</span><br><span class=\"line\">        downloadUrl: <span class=\"string\">'https://github.com:lixuguang/tpl-2#master'</span>,</span><br><span class=\"line\">        description: <span class=\"string\">'tfd-cli脚手架测试模板2'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tfd -V|--version</span></span><br><span class=\"line\">cmd.version(<span class=\"string\">'0.1.0'</span>);  <span class=\"comment\">// -V|--version时输出版本号0.1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tfd init &lt;template&gt; &lt;project&gt;</span></span><br><span class=\"line\">cmd</span><br><span class=\"line\">  .command(<span class=\"string\">'init &lt;template&gt; &lt;project&gt;'</span>) <span class=\"comment\">// 参数</span></span><br><span class=\"line\">  .description(<span class=\"string\">'初始化项目模板'</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">(<span class=\"params\">templateName, projectName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// console.log(templateName, projectName);</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> &#123;downloadUrl&#125; = templates[templateName];        </span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是github仓库地址，第二个参数是创建的项目目录名，第三个参数是clone</span></span><br><span class=\"line\">        download(downloadUrl, projectName, &#123;<span class=\"attr\">clone</span>: <span class=\"literal\">true</span>&#125;, err =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'模板下载失败'</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'模板下载成功'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// tfd list</span></span><br><span class=\"line\">cmd</span><br><span class=\"line\">  .command(<span class=\"string\">'list'</span>)</span><br><span class=\"line\">  .description(<span class=\"string\">'查看所有可用模板'</span>)</span><br><span class=\"line\">  .action(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(`</span></span><br><span class=\"line\">    <span class=\"comment\">//       a   a模板</span></span><br><span class=\"line\">    <span class=\"comment\">//       b   b模板</span></span><br><span class=\"line\">    <span class=\"comment\">//       c   c模板</span></span><br><span class=\"line\">    <span class=\"comment\">//   `)</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过获取templates里的key可以获取到模板名称</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> templateName = <span class=\"built_in\">Object</span>.keys(templates)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(templateName)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"comment\">// console.log(process.argv)</span></span><br><span class=\"line\">cmd.parse(process.argv);</span><br></pre></td></tr></table></figure>\n<p>这样当我们执行 <code>tfd list</code> 就可以看到有哪些模板了，然后执行<code>tfd init tpl-1 newproject</code> 就可以依据 <code>tpl-1</code> 模板创建出 <code>newproject</code> 工程，这个过程实际上就是从<code>github</code>仓库克隆一份<code>tpl-1</code>作为模板创建工程<code>newproject</code></p>\n<p><strong><em>这里需要注意的是download地址跟github仓库地址有点出入，比如github仓库地址是<a href=\"https://github.com/xxx/xxx而下载地址是https://github.com:xxx/xxx\" target=\"_blank\" rel=\"noopener\">https://github.com/xxx/xxx而下载地址是https://github.com:xxx/xxx</a></em></strong></p>\n<p>虽然这样执行完成后就完成了基本的cli的雏形，但是毕竟不灵活，我们在使用<code>vue-cli</code>时，它的创建过程是问答式和选择式的，另外每个过程都会有进度显示什么的，那么要怎么添加这些功能呢，我们接着往下做。</p>\n<h2 id=\"进阶增加功能\"><a href=\"#进阶增加功能\" class=\"headerlink\" title=\"进阶增加功能\"></a>进阶增加功能</h2><h3 id=\"使用inquirer进行命令行答询\"><a href=\"#使用inquirer进行命令行答询\" class=\"headerlink\" title=\"使用inquirer进行命令行答询\"></a>使用<code>inquirer</code>进行命令行答询</h3><p><code>inquirer</code> 是一个进行命令行答询的库，通过它我们就可以创建问答式的内容，首先还是安装依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install inquirer</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用handlebars修改package-json\"><a href=\"#使用handlebars修改package-json\" class=\"headerlink\" title=\"使用handlebars修改package.json\"></a>使用handlebars修改package.json</h3><p>我们都知道在使用<code>vue-cli</code>的初始化命令后，会在项目目录下生成一个<code>package.json</code>文件，它就像是这个项目的基因序列一样，影响着项目的整个结构。模板是固定的，那要修改其中的<code>package.json</code>符合自己项目的需要，就要用到<code>handlebars</code>这个库来改写<code>package.json</code>文件，老规矩先安装它</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install handlebars</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用ora在命令行中显示加载状态\"><a href=\"#使用ora在命令行中显示加载状态\" class=\"headerlink\" title=\"使用ora在命令行中显示加载状态\"></a>使用ora在命令行中显示加载状态</h3><p>我们在装任何依赖时都会有进度条显示进度，如果没有进度条又没有任何响应，会让用户迷茫，为了友好，我们就要加进度条，这里我们需要引入<code>ora</code>这个库来完成进度显示，我们接着安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install ora</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用chalk和log-symbols增加命令行输出样式\"><a href=\"#使用chalk和log-symbols增加命令行输出样式\" class=\"headerlink\" title=\"使用chalk和log-symbols增加命令行输出样式\"></a>使用chalk和log-symbols增加命令行输出样式</h3><p>为了让命令行有红红绿绿的效果以及符号效果，我们需要使用<code>chalk</code>和<code>log-symbols</code>来丰富样式，少废话，接着装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install chalk log-symbols</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"集大成\"><a href=\"#集大成\" class=\"headerlink\" title=\"集大成\"></a>集大成</h3><p>终于安装完一堆的依赖，别忘了在<code>index.js</code>中引入，让我们看看具体如何使用这些库吧。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"comment\">//使用node开发命令行工具所执行JavaScript脚本必须在顶部加入 #!/usr/bin/env node 声明该命令行脚本是node.js写的</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cmd = <span class=\"built_in\">require</span>(<span class=\"string\">'commander'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> download = <span class=\"built_in\">require</span>(<span class=\"string\">'download-git-repo'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iq = <span class=\"built_in\">require</span>(<span class=\"string\">'inquirer'</span>);       <span class=\"comment\">// 命令行答询</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> hb = <span class=\"built_in\">require</span>(<span class=\"string\">'handlebars'</span>);       <span class=\"comment\">// 修改package.json文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ora = <span class=\"built_in\">require</span>(<span class=\"string\">'ora'</span>);         <span class=\"comment\">// 命令行中加载状态标识</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">'chalk'</span>);     <span class=\"comment\">// 命令行输出字符颜色</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ls = <span class=\"built_in\">require</span>(<span class=\"string\">'log-symbols'</span>);      <span class=\"comment\">// 命令行输出符号</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>); <span class=\"comment\">// node fs原生模块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可用模板</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> templates = &#123;</span><br><span class=\"line\">    <span class=\"string\">'tpl-1'</span>: &#123;</span><br><span class=\"line\">        url: <span class=\"string\">'https://github.com/lixuguang/tpl-1'</span>,</span><br><span class=\"line\">        downloadUrl: <span class=\"string\">'https://github.com:lixuguang/tpl-1#master'</span>,</span><br><span class=\"line\">        description: <span class=\"string\">'tfd-cli脚手架测试模板1'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'tpl-2'</span>: &#123;</span><br><span class=\"line\">        url: <span class=\"string\">'https://github.com/lixuguang/tpl-2'</span>,</span><br><span class=\"line\">        downloadUrl: <span class=\"string\">'https://github.com:lixuguang/tpl-2#master'</span>,</span><br><span class=\"line\">        description: <span class=\"string\">'tfd-cli脚手架测试模板2'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tfd -V|--version</span></span><br><span class=\"line\">cmd.version(<span class=\"string\">'0.1.0'</span>);  <span class=\"comment\">// -V|--version时输出版本号0.1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tfd init &lt;template&gt; &lt;project&gt;</span></span><br><span class=\"line\">cmd</span><br><span class=\"line\">  .command(<span class=\"string\">'init &lt;template&gt; &lt;project&gt;'</span>) <span class=\"comment\">// 参数</span></span><br><span class=\"line\">  .description(<span class=\"string\">'初始化项目模板'</span>)</span><br><span class=\"line\">  .action(<span class=\"function\">(<span class=\"params\">templateName, projectName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// console.log(templateName, projectName);</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> &#123;downloadUrl&#125; = templates[templateName];   </span><br><span class=\"line\">      <span class=\"comment\">//下载github项目，下载墙loading提示</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> loading = ora(<span class=\"string\">'模板下载中...'</span>).start();      </span><br><span class=\"line\">      <span class=\"comment\">// 第一个参数是github仓库地址，第二个参数是创建的项目目录名，第三个参数是clone</span></span><br><span class=\"line\">      download(downloadUrl, projectName, &#123;<span class=\"attr\">clone</span>: <span class=\"literal\">true</span>&#125;, err =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">              <span class=\"comment\">// console.log('模板下载失败');</span></span><br><span class=\"line\">              loading.fail(<span class=\"string\">'模板下载失败'</span>);</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">              <span class=\"comment\">// console.log('模板下载成功');</span></span><br><span class=\"line\">              spinner.succeed(<span class=\"string\">'模板下载成功'</span>);</span><br><span class=\"line\">              <span class=\"comment\">// 命令行答询</span></span><br><span class=\"line\">              iq.prompt([</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    type: <span class=\"string\">'input'</span>, <span class=\"comment\">// 类型 输入框</span></span><br><span class=\"line\">                    name: <span class=\"string\">'name'</span>, <span class=\"comment\">// 字段 key</span></span><br><span class=\"line\">                    message: <span class=\"string\">'请输入项目名称'</span>, <span class=\"comment\">// 描述</span></span><br><span class=\"line\">                    <span class=\"keyword\">default</span>: projectName <span class=\"comment\">// 默认值</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    type: <span class=\"string\">'input'</span>,</span><br><span class=\"line\">                    name: <span class=\"string\">'description'</span>,</span><br><span class=\"line\">                    message: <span class=\"string\">'请输入项目简介'</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">default</span>: <span class=\"string\">''</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    type: <span class=\"string\">'input'</span>,</span><br><span class=\"line\">                    name: <span class=\"string\">'author'</span>,</span><br><span class=\"line\">                    message: <span class=\"string\">'请输入作者名称'</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">default</span>: <span class=\"string\">''</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]).then(<span class=\"function\"><span class=\"params\">answers</span> =&gt;</span> &#123; <span class=\"comment\">// answers 是一个对象，对象的 key 为上面答询的 name 的值，value 为 用户输入的值，如果未输入，就取默认值</span></span><br><span class=\"line\">                <span class=\"comment\">// 根据命令行答询结果修改 package.json 文件</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> packageContent = fs.readFileSync(<span class=\"string\">`<span class=\"subst\">$&#123;projectName&#125;</span>/package.json`</span>, <span class=\"string\">'utf8'</span>); <span class=\"comment\">// 同步方式以 utf-8 字符集获得下载好的项目目录下的 package.json 文件</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> packageResult = hb.compile(packageContent)(answers); <span class=\"comment\">// 将用户输入项与原内容混合获得新内容</span></span><br><span class=\"line\">                fs.writeFileSync(<span class=\"string\">`<span class=\"subst\">$&#123;projectName&#125;</span>/package.json`</span>, packageResult); <span class=\"comment\">// 重新同步方式写入到 package.json 文件中</span></span><br><span class=\"line\">                <span class=\"comment\">// 用chalk和log-symbols改变命令行输出样式</span></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(ls.success, chalk.green(<span class=\"string\">'模板项目文件准备成功！'</span>));</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// tfd list</span></span><br><span class=\"line\">cmd</span><br><span class=\"line\">  .command(<span class=\"string\">'list'</span>)</span><br><span class=\"line\">  .description(<span class=\"string\">'查看所有可用模板'</span>)</span><br><span class=\"line\">  .action(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(`</span></span><br><span class=\"line\">    <span class=\"comment\">//       a   a模板</span></span><br><span class=\"line\">    <span class=\"comment\">//       b   b模板</span></span><br><span class=\"line\">    <span class=\"comment\">//       c   c模板</span></span><br><span class=\"line\">    <span class=\"comment\">//   `)</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过获取templates里的key可以获取到模板名称</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> templateName = <span class=\"built_in\">Object</span>.keys(templates)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(templateName)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"comment\">// console.log(process.argv)</span></span><br><span class=\"line\">cmd.parse(process.argv);</span><br></pre></td></tr></table></figure>\n\n<p>到这里你自己的命令行工具就创建完成了，当然还可以继续丰富，比如加上选择条件等，这个就更复杂了，不在本文中展开，后续会继续改进这个命令行工具，当然如果要将自己的命令行工具给其他人用当然要先发布出去，就像我们要用<code>vue-cli</code>，首先要在<code>npm</code>上下载下来，同样的我们要想让别人用，就得先上传到<code>npm</code>上。</p>\n<h1 id=\"发布到npm上\"><a href=\"#发布到npm上\" class=\"headerlink\" title=\"发布到npm上\"></a>发布到npm上</h1><p>首先你需要有一个npm的账号，没有赶快去注册一个，在控制台中输入<code>npm login</code>，它会让你依次输入 <code>Username</code> <code>Password</code> <code>Email</code> ，当你都按照要求输入完之后，成功的话你会获得如下信息<code>Logged in as XXX on https://registry.npm.org/.</code>，再接下来执行 <code>npm publish</code> 命令，你的自定义脚手架就会发布到<code>npm</code>上，供他人下载使用，怎么样，学会了么？</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>这篇文章会有后续持续进化跟进，多篇文章连续，只要我的cli工具还在进化，文章就会继续，欢迎跟进。</p>\n"},{"title":"自己动手实现系列 ---- async、await","date":"2020-03-24T15:50:22.000Z","_content":"# 原理\n就是利用 `generator` （生成器）分割代码片段。然后我们使用一个函数让其自迭代，每一个 `yield` 用 `promise` 包裹起来。执行下一步的时机由 `promise` 来控制\n\n# 实现\n``` js\nfunction _asyncToGenerator(fn) {\n  return function() {\n    var self = this, args = arguments;\n    return new Promise(function(resolve, reject) { // 将返回值 promise 化\n      var gen = fn.apply(self, args); // 获取迭代器实例\n      function _next(value) { // 执行下一步\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);\n      }\n      function _throw(err) { // 抛出异常\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);\n      }\n      _next(undefined); // 第一次触发\n    });\n  };\n}\n```","source":"_posts/do-it-yourselfery-async-await.md","raw":"---\ntitle: 自己动手实现系列 ---- async、await\ndate: 2020-03-24 23:50:22\ncategories: \n\t- 源码原理\n\t- 自己动手实现系列\ntags: \n\t- 自己动手实现系列\n---\n# 原理\n就是利用 `generator` （生成器）分割代码片段。然后我们使用一个函数让其自迭代，每一个 `yield` 用 `promise` 包裹起来。执行下一步的时机由 `promise` 来控制\n\n# 实现\n``` js\nfunction _asyncToGenerator(fn) {\n  return function() {\n    var self = this, args = arguments;\n    return new Promise(function(resolve, reject) { // 将返回值 promise 化\n      var gen = fn.apply(self, args); // 获取迭代器实例\n      function _next(value) { // 执行下一步\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);\n      }\n      function _throw(err) { // 抛出异常\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);\n      }\n      _next(undefined); // 第一次触发\n    });\n  };\n}\n```","slug":"do-it-yourselfery-async-await","published":1,"updated":"2020-04-02T03:20:12.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs3i004looa623qfac0z","content":"<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>就是利用 <code>generator</code> （生成器）分割代码片段。然后我们使用一个函数让其自迭代，每一个 <code>yield</code> 用 <code>promise</code> 包裹起来。执行下一步的时机由 <code>promise</code> 来控制</p>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_asyncToGenerator</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>, args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; <span class=\"comment\">// 将返回值 promise 化</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> gen = fn.apply(self, args); <span class=\"comment\">// 获取迭代器实例</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_next</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"comment\">// 执行下一步</span></span><br><span class=\"line\">        asyncGeneratorStep(gen, resolve, reject, _next, _throw, <span class=\"string\">'next'</span>, value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_throw</span>(<span class=\"params\">err</span>) </span>&#123; <span class=\"comment\">// 抛出异常</span></span><br><span class=\"line\">        asyncGeneratorStep(gen, resolve, reject, _next, _throw, <span class=\"string\">'throw'</span>, err);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      _next(<span class=\"literal\">undefined</span>); <span class=\"comment\">// 第一次触发</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>就是利用 <code>generator</code> （生成器）分割代码片段。然后我们使用一个函数让其自迭代，每一个 <code>yield</code> 用 <code>promise</code> 包裹起来。执行下一步的时机由 <code>promise</code> 来控制</p>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_asyncToGenerator</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>, args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; <span class=\"comment\">// 将返回值 promise 化</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> gen = fn.apply(self, args); <span class=\"comment\">// 获取迭代器实例</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_next</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"comment\">// 执行下一步</span></span><br><span class=\"line\">        asyncGeneratorStep(gen, resolve, reject, _next, _throw, <span class=\"string\">'next'</span>, value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_throw</span>(<span class=\"params\">err</span>) </span>&#123; <span class=\"comment\">// 抛出异常</span></span><br><span class=\"line\">        asyncGeneratorStep(gen, resolve, reject, _next, _throw, <span class=\"string\">'throw'</span>, err);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      _next(<span class=\"literal\">undefined</span>); <span class=\"comment\">// 第一次触发</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"自己动手实现系列 ---- EventEmitter(事件触发器)","date":"2020-03-24T15:45:22.000Z","_content":"# 实现一个 `EventEmitter`\n1. 创建一个 `Event` 类，包含***构造函数、绑定、解绑、触发***方法\n2. `on` 监听event事件，事件触发时调用fn函数。根据字典创建事件数组，如果事件处理不存在，那么就推入数组，反之返回原数组\n3. `off` 从字典中获取当前事件数组，如果获取值是数组，那么判断解绑哪个事件，如果没填清空全部（数组长度置为零），否则从事件数组删除选择的事件\n4. `emit` 触发event事件，并把参数arg1,arg2,arg3....传给事件处理函数，跟解绑外层判断一样，内层把删除改为执行即可\n5. `once` 为指定事件注册一个单次监听器，单次监听器最多只触发一次，触发后立即解除监听器。\n\n``` js\nclass Event {\n  constructor () {\n    // 储存事件的数据结构\n    // 为查找迅速， 使用对象（字典）\n    this._cache = {}\n  }\n\n  // 绑定\n  on(event, callback) {\n    // 为了按类查找方便和节省空间\n    // 将同一类型事件放到一个数组中\n    // 这里的数组是队列， 遵循先进先出\n    // 即新绑定的事件先触发\n    let fns = (this._cache[event] = this._cache[event] || [])\n    if(fns.indexOf(callback) === -1) {\n      fns.push(callback)\n    }\n    return this\n    }\n\n  // 解绑\n  off (event, callback) {\n    let fns = this._cache[event]\n    if(Array.isArray(fns)) {\n      if(callback) {\n        let index = fns.indexOf(callback)\n        if(index !== -1) {\n          fns.splice(index, 1)\n        }\n      } else {\n        // 全部清空\n        fns.length = 0\n      }\n    }\n    return this\n  }\n  // 触发emit\n  emit(event, ...args) {\n    let fns = this._cache[event]\n    if(Array.isArray(fns)) {\n      fns.forEach((fn) => {\n        fn(...args)\n      })\n    }\n    return this\n  }\n\n  // 一次性绑定\n  once(event, callback) {\n    let onceCallback = () => { // 定义一个只执行一次就解绑的方法\n      callback.call(this); // 使用call改变this指向\n      this.off(event, onceCallback); // 解绑\n    };\n    this.on(event, onceCallback); // 绑定\n    return this;\n  }\n}\n```\n好的接下来我们调用一下\n``` js\n\nlet e = new Event()\n\ne.on('click',function(){\n  console.log('on')\n})\n// e.trigger('click', '666')\nconsole.log(e)\n```","source":"_posts/do-it-yourselfery-EventEmitter.md","raw":"---\ntitle: 自己动手实现系列 ---- EventEmitter(事件触发器)\ndate: 2020-03-24 23:45:22\ncategories: \n\t- 源码原理\n\t- 自己动手实现系列\ntags: \n\t- 自己动手实现系列\n---\n# 实现一个 `EventEmitter`\n1. 创建一个 `Event` 类，包含***构造函数、绑定、解绑、触发***方法\n2. `on` 监听event事件，事件触发时调用fn函数。根据字典创建事件数组，如果事件处理不存在，那么就推入数组，反之返回原数组\n3. `off` 从字典中获取当前事件数组，如果获取值是数组，那么判断解绑哪个事件，如果没填清空全部（数组长度置为零），否则从事件数组删除选择的事件\n4. `emit` 触发event事件，并把参数arg1,arg2,arg3....传给事件处理函数，跟解绑外层判断一样，内层把删除改为执行即可\n5. `once` 为指定事件注册一个单次监听器，单次监听器最多只触发一次，触发后立即解除监听器。\n\n``` js\nclass Event {\n  constructor () {\n    // 储存事件的数据结构\n    // 为查找迅速， 使用对象（字典）\n    this._cache = {}\n  }\n\n  // 绑定\n  on(event, callback) {\n    // 为了按类查找方便和节省空间\n    // 将同一类型事件放到一个数组中\n    // 这里的数组是队列， 遵循先进先出\n    // 即新绑定的事件先触发\n    let fns = (this._cache[event] = this._cache[event] || [])\n    if(fns.indexOf(callback) === -1) {\n      fns.push(callback)\n    }\n    return this\n    }\n\n  // 解绑\n  off (event, callback) {\n    let fns = this._cache[event]\n    if(Array.isArray(fns)) {\n      if(callback) {\n        let index = fns.indexOf(callback)\n        if(index !== -1) {\n          fns.splice(index, 1)\n        }\n      } else {\n        // 全部清空\n        fns.length = 0\n      }\n    }\n    return this\n  }\n  // 触发emit\n  emit(event, ...args) {\n    let fns = this._cache[event]\n    if(Array.isArray(fns)) {\n      fns.forEach((fn) => {\n        fn(...args)\n      })\n    }\n    return this\n  }\n\n  // 一次性绑定\n  once(event, callback) {\n    let onceCallback = () => { // 定义一个只执行一次就解绑的方法\n      callback.call(this); // 使用call改变this指向\n      this.off(event, onceCallback); // 解绑\n    };\n    this.on(event, onceCallback); // 绑定\n    return this;\n  }\n}\n```\n好的接下来我们调用一下\n``` js\n\nlet e = new Event()\n\ne.on('click',function(){\n  console.log('on')\n})\n// e.trigger('click', '666')\nconsole.log(e)\n```","slug":"do-it-yourselfery-EventEmitter","published":1,"updated":"2020-04-02T03:20:12.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs3n004pooa6eh6n007i","content":"<h1 id=\"实现一个-EventEmitter\"><a href=\"#实现一个-EventEmitter\" class=\"headerlink\" title=\"实现一个 EventEmitter\"></a>实现一个 <code>EventEmitter</code></h1><ol>\n<li>创建一个 <code>Event</code> 类，包含<strong><em>构造函数、绑定、解绑、触发</em></strong>方法</li>\n<li><code>on</code> 监听event事件，事件触发时调用fn函数。根据字典创建事件数组，如果事件处理不存在，那么就推入数组，反之返回原数组</li>\n<li><code>off</code> 从字典中获取当前事件数组，如果获取值是数组，那么判断解绑哪个事件，如果没填清空全部（数组长度置为零），否则从事件数组删除选择的事件</li>\n<li><code>emit</code> 触发event事件，并把参数arg1,arg2,arg3….传给事件处理函数，跟解绑外层判断一样，内层把删除改为执行即可</li>\n<li><code>once</code> 为指定事件注册一个单次监听器，单次监听器最多只触发一次，触发后立即解除监听器。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Event</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 储存事件的数据结构</span></span><br><span class=\"line\">    <span class=\"comment\">// 为查找迅速， 使用对象（字典）</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._cache = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 绑定</span></span><br><span class=\"line\">  on(event, callback) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 为了按类查找方便和节省空间</span></span><br><span class=\"line\">    <span class=\"comment\">// 将同一类型事件放到一个数组中</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里的数组是队列， 遵循先进先出</span></span><br><span class=\"line\">    <span class=\"comment\">// 即新绑定的事件先触发</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fns = (<span class=\"keyword\">this</span>._cache[event] = <span class=\"keyword\">this</span>._cache[event] || [])</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fns.indexOf(callback) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      fns.push(callback)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 解绑</span></span><br><span class=\"line\">  off (event, callback) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fns = <span class=\"keyword\">this</span>._cache[event]</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.isArray(fns)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(callback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = fns.indexOf(callback)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">          fns.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 全部清空</span></span><br><span class=\"line\">        fns.length = <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 触发emit</span></span><br><span class=\"line\">  emit(event, ...args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fns = <span class=\"keyword\">this</span>._cache[event]</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.isArray(fns)) &#123;</span><br><span class=\"line\">      fns.forEach(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        fn(...args)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一次性绑定</span></span><br><span class=\"line\">  once(event, callback) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> onceCallback = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"comment\">// 定义一个只执行一次就解绑的方法</span></span><br><span class=\"line\">      callback.call(<span class=\"keyword\">this</span>); <span class=\"comment\">// 使用call改变this指向</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.off(event, onceCallback); <span class=\"comment\">// 解绑</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.on(event, onceCallback); <span class=\"comment\">// 绑定</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好的接下来我们调用一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> e = <span class=\"keyword\">new</span> Event()</span><br><span class=\"line\"></span><br><span class=\"line\">e.on(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'on'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// e.trigger('click', '666')</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"实现一个-EventEmitter\"><a href=\"#实现一个-EventEmitter\" class=\"headerlink\" title=\"实现一个 EventEmitter\"></a>实现一个 <code>EventEmitter</code></h1><ol>\n<li>创建一个 <code>Event</code> 类，包含<strong><em>构造函数、绑定、解绑、触发</em></strong>方法</li>\n<li><code>on</code> 监听event事件，事件触发时调用fn函数。根据字典创建事件数组，如果事件处理不存在，那么就推入数组，反之返回原数组</li>\n<li><code>off</code> 从字典中获取当前事件数组，如果获取值是数组，那么判断解绑哪个事件，如果没填清空全部（数组长度置为零），否则从事件数组删除选择的事件</li>\n<li><code>emit</code> 触发event事件，并把参数arg1,arg2,arg3….传给事件处理函数，跟解绑外层判断一样，内层把删除改为执行即可</li>\n<li><code>once</code> 为指定事件注册一个单次监听器，单次监听器最多只触发一次，触发后立即解除监听器。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Event</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 储存事件的数据结构</span></span><br><span class=\"line\">    <span class=\"comment\">// 为查找迅速， 使用对象（字典）</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._cache = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 绑定</span></span><br><span class=\"line\">  on(event, callback) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 为了按类查找方便和节省空间</span></span><br><span class=\"line\">    <span class=\"comment\">// 将同一类型事件放到一个数组中</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里的数组是队列， 遵循先进先出</span></span><br><span class=\"line\">    <span class=\"comment\">// 即新绑定的事件先触发</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fns = (<span class=\"keyword\">this</span>._cache[event] = <span class=\"keyword\">this</span>._cache[event] || [])</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fns.indexOf(callback) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      fns.push(callback)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 解绑</span></span><br><span class=\"line\">  off (event, callback) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fns = <span class=\"keyword\">this</span>._cache[event]</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.isArray(fns)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(callback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = fns.indexOf(callback)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">          fns.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 全部清空</span></span><br><span class=\"line\">        fns.length = <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 触发emit</span></span><br><span class=\"line\">  emit(event, ...args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fns = <span class=\"keyword\">this</span>._cache[event]</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.isArray(fns)) &#123;</span><br><span class=\"line\">      fns.forEach(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        fn(...args)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一次性绑定</span></span><br><span class=\"line\">  once(event, callback) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> onceCallback = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"comment\">// 定义一个只执行一次就解绑的方法</span></span><br><span class=\"line\">      callback.call(<span class=\"keyword\">this</span>); <span class=\"comment\">// 使用call改变this指向</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.off(event, onceCallback); <span class=\"comment\">// 解绑</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.on(event, onceCallback); <span class=\"comment\">// 绑定</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好的接下来我们调用一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> e = <span class=\"keyword\">new</span> Event()</span><br><span class=\"line\"></span><br><span class=\"line\">e.on(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'on'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// e.trigger('click', '666')</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e)</span><br></pre></td></tr></table></figure>"},{"title":"自己动手实现系列 ---- call、apply、bind","date":"2020-03-24T15:54:22.000Z","_content":"# 原版\n先来看一个call实例，看看call到底做了什么：\n``` js\nlet foo = {\n  value: 1\n};\nfunction bar() {\n  console.log(this.value);\n}\nbar.call(foo); // 1\n```\n从代码的执行结果，我们可以看到，call首先改变了this的指向，使函数的this指向了foo,然后使bar函数执行了。\n总结一下：\n- call改变函数this指向\n- 调用函数\n\n# 自己动手\n1. 首先我们对参数 `context` 做了兼容处理，不传值， `context` 默认值为 `window` ；\n2. 然后我们将函数挂载到 `context` 上面, `context.fn = this` ；\n3. 处理参数，将传入 `myCall` 的参数截取，去除第一位，然后转为数组；\n4. 调用 `context.fn` ，此时 `fn` 的 `this` 指向 `context` ；\n5. 删除对象上的属性 `delete context.fn` ；\n6. 将结果返回。\n\n``` js\nFunction.prototype.myCall = function(context) {\n  context = context || window;\n  context.fn = this; // 将函数挂载到对象的fn属性上\n  const args = [...arguments].slice(1); // 处理传入的参数\n  const result = context.fn(...args); // 通过对象的属性调用该方法\n  delete context.fn; // 删除该属性\n  return result // 返回结果\n};\n```\n`apply` 跟 `call` 的区别在于参数， 其他没有差别，实现如下\n``` js\n// myApply的参数形式为(obj,[arg1,arg2,arg3]);\n// 所以myApply的第二个参数为[arg1,arg2,arg3]\n// 这里我们用扩展运算符来处理一下参数的传入方式\nFunction.prototype.myApply = function(context) {\n  context = context || window\n  context.fn = this\n  let result\n  if (arguments[1]) { // 判断是否有第二个参数\n    result = context.fn(…arguments[1]) // 有的话传入执行\n  } else {\n    result = context.fn() // 没有的话空参执行\n  }\n  delete context.fn;\n  return result\n};\n```\n`bind` 和 `call` 、 `apply` 作用都是改变 `this` 的指向，区别在于 `bind` 改变后不会立即执行，而 `call` 和 `apply` 会立即执行，我们看一下 `bind` 的用法\n``` js\nfunction Person(){\n  this.name=\"zs\";\n  this.age=18;\n  this.gender=\"男\"\n}\nlet obj={\n  hobby:\"看书\"\n}\n\nlet changePerson = Person.bind(obj); // 将构造函数的this绑定为obj\nchangePerson(); // 直接调用构造函数,函数会操作obj对象,给其添加三个属性;\nconsole.log(obj); // => {hobby:\"看书\",name:\"zs\",age:18,gender:'男'}\nlet p = new changePerson(); // 用改变了this 指向的构造函数,new一个实例出来\nconsole.log(p); // => Person {name:\"zs\",age:18,gender:'男'}\n```\n仔细观察上面的代码，再看输出结果。\n\n我们对 `Person` 类使用了 `bind` 将其 `this` 指向 `obj` ，得到了 `changePerson` 函数，此处如果我们直接调用 `changeperson` 会改变 `obj` ，若用 `new` 调用 `changeperson` 会得到实例 `p`，并且其 `__proto__` 指向 `Person` ,我们发现 `bind` 失效了。\n\n我们得到结论：***用 `bind` 改变了 `this` 指向的函数，如果用 `new` 操作符来调用， `bind` 将会失效***。\n\n这个对象就是这个构造函数的实例，那么只要在函数内部执行 *** this instanceof 构造函数 *** 来判断其结果是否为 `true` ，就能判断函数是否是通过 `new` 操作符来调用了，若结果为 `true` 则是用 `new` 操作符调用的，总结如下：\n1. 保存当前 `this` 指向\n2. 保存环境上下文\n3. 保存参数，去掉第一个对象参数\n4. 返回待执行函数\n  1. 数组化剩余参数\n  2. 判断是否为构造函数\n  3. 若是执行构造函数，若不是改变 `this` 指向执行\n``` js\n// bind实现\n\nFunction.prototype.myBind = function(context){\n  let _this = this; // 1、保存函数\n  context = context || window; // 2、保存目标对象\n  let rest = [...arguments].slice(1); // 3、保存目标对象之外的参数,将其转化为数组;\n  // 此处开始与 call 和 apply 不同，不是返回结果，而是返回一个函数\n  return function F(){ // 4、返回一个待执行的函数\n    let rest2 = Array.prototype.slice.call(arguments) // 5、这里的arguments是F函数的参数，转换为数组;\n    if(this instanceof F){\n      return new _this(...rest2) // 6、若是用new操作符调用,则直接用new 调用原函数,并用扩展运算符传递参数\n    }else{\n      _this.apply(context,rest.concat(rest2));  // 7、用apply调用第一步保存的函数，并绑定this，传递合并的参数数组，\n                                                // 即context._this(rest.concat(rest2))\n    }\n  }\n};\n```","source":"_posts/do-it-yourselfery-call-apply.md","raw":"---\ntitle: 自己动手实现系列 ---- call、apply、bind\ndate: 2020-03-24 23:54:22\ncategories: \n\t- 源码原理\n\t- 自己动手实现系列\ntags: \n\t- 自己动手实现系列\n---\n# 原版\n先来看一个call实例，看看call到底做了什么：\n``` js\nlet foo = {\n  value: 1\n};\nfunction bar() {\n  console.log(this.value);\n}\nbar.call(foo); // 1\n```\n从代码的执行结果，我们可以看到，call首先改变了this的指向，使函数的this指向了foo,然后使bar函数执行了。\n总结一下：\n- call改变函数this指向\n- 调用函数\n\n# 自己动手\n1. 首先我们对参数 `context` 做了兼容处理，不传值， `context` 默认值为 `window` ；\n2. 然后我们将函数挂载到 `context` 上面, `context.fn = this` ；\n3. 处理参数，将传入 `myCall` 的参数截取，去除第一位，然后转为数组；\n4. 调用 `context.fn` ，此时 `fn` 的 `this` 指向 `context` ；\n5. 删除对象上的属性 `delete context.fn` ；\n6. 将结果返回。\n\n``` js\nFunction.prototype.myCall = function(context) {\n  context = context || window;\n  context.fn = this; // 将函数挂载到对象的fn属性上\n  const args = [...arguments].slice(1); // 处理传入的参数\n  const result = context.fn(...args); // 通过对象的属性调用该方法\n  delete context.fn; // 删除该属性\n  return result // 返回结果\n};\n```\n`apply` 跟 `call` 的区别在于参数， 其他没有差别，实现如下\n``` js\n// myApply的参数形式为(obj,[arg1,arg2,arg3]);\n// 所以myApply的第二个参数为[arg1,arg2,arg3]\n// 这里我们用扩展运算符来处理一下参数的传入方式\nFunction.prototype.myApply = function(context) {\n  context = context || window\n  context.fn = this\n  let result\n  if (arguments[1]) { // 判断是否有第二个参数\n    result = context.fn(…arguments[1]) // 有的话传入执行\n  } else {\n    result = context.fn() // 没有的话空参执行\n  }\n  delete context.fn;\n  return result\n};\n```\n`bind` 和 `call` 、 `apply` 作用都是改变 `this` 的指向，区别在于 `bind` 改变后不会立即执行，而 `call` 和 `apply` 会立即执行，我们看一下 `bind` 的用法\n``` js\nfunction Person(){\n  this.name=\"zs\";\n  this.age=18;\n  this.gender=\"男\"\n}\nlet obj={\n  hobby:\"看书\"\n}\n\nlet changePerson = Person.bind(obj); // 将构造函数的this绑定为obj\nchangePerson(); // 直接调用构造函数,函数会操作obj对象,给其添加三个属性;\nconsole.log(obj); // => {hobby:\"看书\",name:\"zs\",age:18,gender:'男'}\nlet p = new changePerson(); // 用改变了this 指向的构造函数,new一个实例出来\nconsole.log(p); // => Person {name:\"zs\",age:18,gender:'男'}\n```\n仔细观察上面的代码，再看输出结果。\n\n我们对 `Person` 类使用了 `bind` 将其 `this` 指向 `obj` ，得到了 `changePerson` 函数，此处如果我们直接调用 `changeperson` 会改变 `obj` ，若用 `new` 调用 `changeperson` 会得到实例 `p`，并且其 `__proto__` 指向 `Person` ,我们发现 `bind` 失效了。\n\n我们得到结论：***用 `bind` 改变了 `this` 指向的函数，如果用 `new` 操作符来调用， `bind` 将会失效***。\n\n这个对象就是这个构造函数的实例，那么只要在函数内部执行 *** this instanceof 构造函数 *** 来判断其结果是否为 `true` ，就能判断函数是否是通过 `new` 操作符来调用了，若结果为 `true` 则是用 `new` 操作符调用的，总结如下：\n1. 保存当前 `this` 指向\n2. 保存环境上下文\n3. 保存参数，去掉第一个对象参数\n4. 返回待执行函数\n  1. 数组化剩余参数\n  2. 判断是否为构造函数\n  3. 若是执行构造函数，若不是改变 `this` 指向执行\n``` js\n// bind实现\n\nFunction.prototype.myBind = function(context){\n  let _this = this; // 1、保存函数\n  context = context || window; // 2、保存目标对象\n  let rest = [...arguments].slice(1); // 3、保存目标对象之外的参数,将其转化为数组;\n  // 此处开始与 call 和 apply 不同，不是返回结果，而是返回一个函数\n  return function F(){ // 4、返回一个待执行的函数\n    let rest2 = Array.prototype.slice.call(arguments) // 5、这里的arguments是F函数的参数，转换为数组;\n    if(this instanceof F){\n      return new _this(...rest2) // 6、若是用new操作符调用,则直接用new 调用原函数,并用扩展运算符传递参数\n    }else{\n      _this.apply(context,rest.concat(rest2));  // 7、用apply调用第一步保存的函数，并绑定this，传递合并的参数数组，\n                                                // 即context._this(rest.concat(rest2))\n    }\n  }\n};\n```","slug":"do-it-yourselfery-call-apply","published":1,"updated":"2020-04-02T03:20:12.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs3o004sooa60bce83hu","content":"<h1 id=\"原版\"><a href=\"#原版\" class=\"headerlink\" title=\"原版\"></a>原版</h1><p>先来看一个call实例，看看call到底做了什么：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123;</span><br><span class=\"line\">  value: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar.call(foo); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>从代码的执行结果，我们可以看到，call首先改变了this的指向，使函数的this指向了foo,然后使bar函数执行了。<br>总结一下：</p>\n<ul>\n<li>call改变函数this指向</li>\n<li>调用函数</li>\n</ul>\n<h1 id=\"自己动手\"><a href=\"#自己动手\" class=\"headerlink\" title=\"自己动手\"></a>自己动手</h1><ol>\n<li>首先我们对参数 <code>context</code> 做了兼容处理，不传值， <code>context</code> 默认值为 <code>window</code> ；</li>\n<li>然后我们将函数挂载到 <code>context</code> 上面, <code>context.fn = this</code> ；</li>\n<li>处理参数，将传入 <code>myCall</code> 的参数截取，去除第一位，然后转为数组；</li>\n<li>调用 <code>context.fn</code> ，此时 <code>fn</code> 的 <code>this</code> 指向 <code>context</code> ；</li>\n<li>删除对象上的属性 <code>delete context.fn</code> ；</li>\n<li>将结果返回。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myCall = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  context = context || <span class=\"built_in\">window</span>;</span><br><span class=\"line\">  context.fn = <span class=\"keyword\">this</span>; <span class=\"comment\">// 将函数挂载到对象的fn属性上</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = [...arguments].slice(<span class=\"number\">1</span>); <span class=\"comment\">// 处理传入的参数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = context.fn(...args); <span class=\"comment\">// 通过对象的属性调用该方法</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.fn; <span class=\"comment\">// 删除该属性</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>apply</code> 跟 <code>call</code> 的区别在于参数， 其他没有差别，实现如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// myApply的参数形式为(obj,[arg1,arg2,arg3]);</span></span><br><span class=\"line\"><span class=\"comment\">// 所以myApply的第二个参数为[arg1,arg2,arg3]</span></span><br><span class=\"line\"><span class=\"comment\">// 这里我们用扩展运算符来处理一下参数的传入方式</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myApply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  context = context || <span class=\"built_in\">window</span></span><br><span class=\"line\">  context.fn = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]) &#123; <span class=\"comment\">// 判断是否有第二个参数</span></span><br><span class=\"line\">    result = context.fn(…<span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]) <span class=\"comment\">// 有的话传入执行</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    result = context.fn() <span class=\"comment\">// 没有的话空参执行</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.fn;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>bind</code> 和 <code>call</code> 、 <code>apply</code> 作用都是改变 <code>this</code> 的指向，区别在于 <code>bind</code> 改变后不会立即执行，而 <code>call</code> 和 <code>apply</code> 会立即执行，我们看一下 <code>bind</code> 的用法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name=<span class=\"string\">\"zs\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age=<span class=\"number\">18</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.gender=<span class=\"string\">\"男\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj=&#123;</span><br><span class=\"line\">  hobby:<span class=\"string\">\"看书\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> changePerson = Person.bind(obj); <span class=\"comment\">// 将构造函数的this绑定为obj</span></span><br><span class=\"line\">changePerson(); <span class=\"comment\">// 直接调用构造函数,函数会操作obj对象,给其添加三个属性;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// =&gt; &#123;hobby:\"看书\",name:\"zs\",age:18,gender:'男'&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> changePerson(); <span class=\"comment\">// 用改变了this 指向的构造函数,new一个实例出来</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p); <span class=\"comment\">// =&gt; Person &#123;name:\"zs\",age:18,gender:'男'&#125;</span></span><br></pre></td></tr></table></figure>\n<p>仔细观察上面的代码，再看输出结果。</p>\n<p>我们对 <code>Person</code> 类使用了 <code>bind</code> 将其 <code>this</code> 指向 <code>obj</code> ，得到了 <code>changePerson</code> 函数，此处如果我们直接调用 <code>changeperson</code> 会改变 <code>obj</code> ，若用 <code>new</code> 调用 <code>changeperson</code> 会得到实例 <code>p</code>，并且其 <code>__proto__</code> 指向 <code>Person</code> ,我们发现 <code>bind</code> 失效了。</p>\n<p>我们得到结论：<strong><em>用 <code>bind</code> 改变了 <code>this</code> 指向的函数，如果用 <code>new</code> 操作符来调用， <code>bind</code> 将会失效</em></strong>。</p>\n<p>这个对象就是这个构造函数的实例，那么只要在函数内部执行 <strong>* this instanceof 构造函数 *</strong> 来判断其结果是否为 <code>true</code> ，就能判断函数是否是通过 <code>new</code> 操作符来调用了，若结果为 <code>true</code> 则是用 <code>new</code> 操作符调用的，总结如下：</p>\n<ol>\n<li>保存当前 <code>this</code> 指向</li>\n<li>保存环境上下文</li>\n<li>保存参数，去掉第一个对象参数</li>\n<li>返回待执行函数<ol>\n<li>数组化剩余参数</li>\n<li>判断是否为构造函数</li>\n<li>若是执行构造函数，若不是改变 <code>this</code> 指向执行<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bind实现</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myBind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _this = <span class=\"keyword\">this</span>; <span class=\"comment\">// 1、保存函数</span></span><br><span class=\"line\">  context = context || <span class=\"built_in\">window</span>; <span class=\"comment\">// 2、保存目标对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> rest = [...arguments].slice(<span class=\"number\">1</span>); <span class=\"comment\">// 3、保存目标对象之外的参数,将其转化为数组;</span></span><br><span class=\"line\">  <span class=\"comment\">// 此处开始与 call 和 apply 不同，不是返回结果，而是返回一个函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">// 4、返回一个待执行的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> rest2 = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>) <span class=\"comment\">// 5、这里的arguments是F函数的参数，转换为数组;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> F)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> _this(...rest2) <span class=\"comment\">// 6、若是用new操作符调用,则直接用new 调用原函数,并用扩展运算符传递参数</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      _this.apply(context,rest.concat(rest2));  <span class=\"comment\">// 7、用apply调用第一步保存的函数，并绑定this，传递合并的参数数组，</span></span><br><span class=\"line\">                                                <span class=\"comment\">// 即context._this(rest.concat(rest2))</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"原版\"><a href=\"#原版\" class=\"headerlink\" title=\"原版\"></a>原版</h1><p>先来看一个call实例，看看call到底做了什么：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123;</span><br><span class=\"line\">  value: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar.call(foo); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>从代码的执行结果，我们可以看到，call首先改变了this的指向，使函数的this指向了foo,然后使bar函数执行了。<br>总结一下：</p>\n<ul>\n<li>call改变函数this指向</li>\n<li>调用函数</li>\n</ul>\n<h1 id=\"自己动手\"><a href=\"#自己动手\" class=\"headerlink\" title=\"自己动手\"></a>自己动手</h1><ol>\n<li>首先我们对参数 <code>context</code> 做了兼容处理，不传值， <code>context</code> 默认值为 <code>window</code> ；</li>\n<li>然后我们将函数挂载到 <code>context</code> 上面, <code>context.fn = this</code> ；</li>\n<li>处理参数，将传入 <code>myCall</code> 的参数截取，去除第一位，然后转为数组；</li>\n<li>调用 <code>context.fn</code> ，此时 <code>fn</code> 的 <code>this</code> 指向 <code>context</code> ；</li>\n<li>删除对象上的属性 <code>delete context.fn</code> ；</li>\n<li>将结果返回。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myCall = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  context = context || <span class=\"built_in\">window</span>;</span><br><span class=\"line\">  context.fn = <span class=\"keyword\">this</span>; <span class=\"comment\">// 将函数挂载到对象的fn属性上</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = [...arguments].slice(<span class=\"number\">1</span>); <span class=\"comment\">// 处理传入的参数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = context.fn(...args); <span class=\"comment\">// 通过对象的属性调用该方法</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.fn; <span class=\"comment\">// 删除该属性</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>apply</code> 跟 <code>call</code> 的区别在于参数， 其他没有差别，实现如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// myApply的参数形式为(obj,[arg1,arg2,arg3]);</span></span><br><span class=\"line\"><span class=\"comment\">// 所以myApply的第二个参数为[arg1,arg2,arg3]</span></span><br><span class=\"line\"><span class=\"comment\">// 这里我们用扩展运算符来处理一下参数的传入方式</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myApply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  context = context || <span class=\"built_in\">window</span></span><br><span class=\"line\">  context.fn = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]) &#123; <span class=\"comment\">// 判断是否有第二个参数</span></span><br><span class=\"line\">    result = context.fn(…<span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]) <span class=\"comment\">// 有的话传入执行</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    result = context.fn() <span class=\"comment\">// 没有的话空参执行</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.fn;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>bind</code> 和 <code>call</code> 、 <code>apply</code> 作用都是改变 <code>this</code> 的指向，区别在于 <code>bind</code> 改变后不会立即执行，而 <code>call</code> 和 <code>apply</code> 会立即执行，我们看一下 <code>bind</code> 的用法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name=<span class=\"string\">\"zs\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age=<span class=\"number\">18</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.gender=<span class=\"string\">\"男\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj=&#123;</span><br><span class=\"line\">  hobby:<span class=\"string\">\"看书\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> changePerson = Person.bind(obj); <span class=\"comment\">// 将构造函数的this绑定为obj</span></span><br><span class=\"line\">changePerson(); <span class=\"comment\">// 直接调用构造函数,函数会操作obj对象,给其添加三个属性;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// =&gt; &#123;hobby:\"看书\",name:\"zs\",age:18,gender:'男'&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> changePerson(); <span class=\"comment\">// 用改变了this 指向的构造函数,new一个实例出来</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p); <span class=\"comment\">// =&gt; Person &#123;name:\"zs\",age:18,gender:'男'&#125;</span></span><br></pre></td></tr></table></figure>\n<p>仔细观察上面的代码，再看输出结果。</p>\n<p>我们对 <code>Person</code> 类使用了 <code>bind</code> 将其 <code>this</code> 指向 <code>obj</code> ，得到了 <code>changePerson</code> 函数，此处如果我们直接调用 <code>changeperson</code> 会改变 <code>obj</code> ，若用 <code>new</code> 调用 <code>changeperson</code> 会得到实例 <code>p</code>，并且其 <code>__proto__</code> 指向 <code>Person</code> ,我们发现 <code>bind</code> 失效了。</p>\n<p>我们得到结论：<strong><em>用 <code>bind</code> 改变了 <code>this</code> 指向的函数，如果用 <code>new</code> 操作符来调用， <code>bind</code> 将会失效</em></strong>。</p>\n<p>这个对象就是这个构造函数的实例，那么只要在函数内部执行 <strong>* this instanceof 构造函数 *</strong> 来判断其结果是否为 <code>true</code> ，就能判断函数是否是通过 <code>new</code> 操作符来调用了，若结果为 <code>true</code> 则是用 <code>new</code> 操作符调用的，总结如下：</p>\n<ol>\n<li>保存当前 <code>this</code> 指向</li>\n<li>保存环境上下文</li>\n<li>保存参数，去掉第一个对象参数</li>\n<li>返回待执行函数<ol>\n<li>数组化剩余参数</li>\n<li>判断是否为构造函数</li>\n<li>若是执行构造函数，若不是改变 <code>this</code> 指向执行<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bind实现</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myBind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _this = <span class=\"keyword\">this</span>; <span class=\"comment\">// 1、保存函数</span></span><br><span class=\"line\">  context = context || <span class=\"built_in\">window</span>; <span class=\"comment\">// 2、保存目标对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> rest = [...arguments].slice(<span class=\"number\">1</span>); <span class=\"comment\">// 3、保存目标对象之外的参数,将其转化为数组;</span></span><br><span class=\"line\">  <span class=\"comment\">// 此处开始与 call 和 apply 不同，不是返回结果，而是返回一个函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">// 4、返回一个待执行的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> rest2 = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>) <span class=\"comment\">// 5、这里的arguments是F函数的参数，转换为数组;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> F)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> _this(...rest2) <span class=\"comment\">// 6、若是用new操作符调用,则直接用new 调用原函数,并用扩展运算符传递参数</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      _this.apply(context,rest.concat(rest2));  <span class=\"comment\">// 7、用apply调用第一步保存的函数，并绑定this，传递合并的参数数组，</span></span><br><span class=\"line\">                                                <span class=\"comment\">// 即context._this(rest.concat(rest2))</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n"},{"title":"自己动手实现系列 ---- Object.create()","date":"2020-03-24T14:40:22.000Z","_content":"# 实现一个 `Object.create()` 方法\n1. 创建一个空匿名函数\n2. 函数原型对象指向传入对象实例\n3. 返回构造函数创建的实例\n\n``` js\nfunction create =  function (o) {\n    var F = function () {};\n    F.prototype = o;\n    return new F();\n};\n```","source":"_posts/do-it-yourselfery-create.md","raw":"---\ntitle: 自己动手实现系列 ---- Object.create()\ndate: 2020-03-24 22:40:22\ncategories: \n\t- 源码原理\n\t- 自己动手实现系列\ntags: \n\t- 自己动手实现系列\n---\n# 实现一个 `Object.create()` 方法\n1. 创建一个空匿名函数\n2. 函数原型对象指向传入对象实例\n3. 返回构造函数创建的实例\n\n``` js\nfunction create =  function (o) {\n    var F = function () {};\n    F.prototype = o;\n    return new F();\n};\n```","slug":"do-it-yourselfery-create","published":1,"updated":"2020-04-02T03:20:12.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs3q004xooa6e8v8hoai","content":"<h1 id=\"实现一个-Object-create-方法\"><a href=\"#实现一个-Object-create-方法\" class=\"headerlink\" title=\"实现一个 Object.create() 方法\"></a>实现一个 <code>Object.create()</code> 方法</h1><ol>\n<li>创建一个空匿名函数</li>\n<li>函数原型对象指向传入对象实例</li>\n<li>返回构造函数创建的实例</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span> =  <span class=\"title\">function</span> (<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">    F.prototype = o;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"实现一个-Object-create-方法\"><a href=\"#实现一个-Object-create-方法\" class=\"headerlink\" title=\"实现一个 Object.create() 方法\"></a>实现一个 <code>Object.create()</code> 方法</h1><ol>\n<li>创建一个空匿名函数</li>\n<li>函数原型对象指向传入对象实例</li>\n<li>返回构造函数创建的实例</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span> =  <span class=\"title\">function</span> (<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">    F.prototype = o;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"自己动手实现系列 ---- Array.isArray","date":"2020-03-24T13:30:22.000Z","_content":"# 实现一个Array.isArray\n思路很简单，就是利用 `Object.prototype.toString`\n\n``` js\nArray.myIsArray = function(o) { \n  return Object.prototype.toString.call(Object(o)) === '[object Array]'; \n};\n```","source":"_posts/do-it-yourselfery-isArray.md","raw":"---\ntitle: 自己动手实现系列 ---- Array.isArray\ndate: 2020-03-24 21:30:22\ncategories: \n\t- 源码原理\n\t- 自己动手实现系列\ntags: \n\t- 自己动手实现系列\n---\n# 实现一个Array.isArray\n思路很简单，就是利用 `Object.prototype.toString`\n\n``` js\nArray.myIsArray = function(o) { \n  return Object.prototype.toString.call(Object(o)) === '[object Array]'; \n};\n```","slug":"do-it-yourselfery-isArray","published":1,"updated":"2020-04-02T03:20:12.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs3s0050ooa69uwbegt9","content":"<h1 id=\"实现一个Array-isArray\"><a href=\"#实现一个Array-isArray\" class=\"headerlink\" title=\"实现一个Array.isArray\"></a>实现一个Array.isArray</h1><p>思路很简单，就是利用 <code>Object.prototype.toString</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.myIsArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">o</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"built_in\">Object</span>(o)) === <span class=\"string\">'[object Array]'</span>; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"实现一个Array-isArray\"><a href=\"#实现一个Array-isArray\" class=\"headerlink\" title=\"实现一个Array.isArray\"></a>实现一个Array.isArray</h1><p>思路很简单，就是利用 <code>Object.prototype.toString</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.myIsArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">o</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"built_in\">Object</span>(o)) === <span class=\"string\">'[object Array]'</span>; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"自己动手实现系列 ---- Array.prototype.flat()函数","date":"2020-03-24T13:40:22.000Z","_content":"# 原理\n将多层数组扁平化\n\n# 实现\n``` js\nArray.prototype.myFlat = function() {\n  var arr = [];\n  this.forEach((item)=>{\n    if(Array.isArray(item)){\n      arr = arr.concat(item.myFlat()); // 如果是数组的话继续循环\n    }else{\n      arr.push(item)\n    }\n  })\n  return arr\n};\n```\n\n还有另外一种实现方式，非常好用\n``` js\nArray.prototype.myFlat = function() {\n\treturn this.toString() // => \"1,2,3,4\"\n\t\t\t.split(\",\")   \t\t// => [\"1\", \"2\", \"3\", \"4\"]\n\t\t\t.map(item => +item); // => [1, 2, 3, 4]\n};\n```","source":"_posts/do-it-yourselfery-flat.md","raw":"---\ntitle: 自己动手实现系列 ---- Array.prototype.flat()函数\ndate: 2020-03-24 21:40:22\ncategories: \n\t- 源码原理\n\t- 自己动手实现系列\ntags: \n\t- 自己动手实现系列\n---\n# 原理\n将多层数组扁平化\n\n# 实现\n``` js\nArray.prototype.myFlat = function() {\n  var arr = [];\n  this.forEach((item)=>{\n    if(Array.isArray(item)){\n      arr = arr.concat(item.myFlat()); // 如果是数组的话继续循环\n    }else{\n      arr.push(item)\n    }\n  })\n  return arr\n};\n```\n\n还有另外一种实现方式，非常好用\n``` js\nArray.prototype.myFlat = function() {\n\treturn this.toString() // => \"1,2,3,4\"\n\t\t\t.split(\",\")   \t\t// => [\"1\", \"2\", \"3\", \"4\"]\n\t\t\t.map(item => +item); // => [1, 2, 3, 4]\n};\n```","slug":"do-it-yourselfery-flat","published":1,"updated":"2020-04-02T03:20:12.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs400054ooa63leb68w7","content":"<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>将多层数组扁平化</p>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myFlat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.forEach(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.isArray(item))&#123;</span><br><span class=\"line\">      arr = arr.concat(item.myFlat()); <span class=\"comment\">// 如果是数组的话继续循环</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      arr.push(item)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>还有另外一种实现方式，非常好用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myFlat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.toString() <span class=\"comment\">// =&gt; \"1,2,3,4\"</span></span><br><span class=\"line\">\t\t\t.split(<span class=\"string\">\",\"</span>)   \t\t<span class=\"comment\">// =&gt; [\"1\", \"2\", \"3\", \"4\"]</span></span><br><span class=\"line\">\t\t\t.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> +item); <span class=\"comment\">// =&gt; [1, 2, 3, 4]</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>将多层数组扁平化</p>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myFlat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.forEach(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.isArray(item))&#123;</span><br><span class=\"line\">      arr = arr.concat(item.myFlat()); <span class=\"comment\">// 如果是数组的话继续循环</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      arr.push(item)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>还有另外一种实现方式，非常好用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myFlat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.toString() <span class=\"comment\">// =&gt; \"1,2,3,4\"</span></span><br><span class=\"line\">\t\t\t.split(<span class=\"string\">\",\"</span>)   \t\t<span class=\"comment\">// =&gt; [\"1\", \"2\", \"3\", \"4\"]</span></span><br><span class=\"line\">\t\t\t.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> +item); <span class=\"comment\">// =&gt; [1, 2, 3, 4]</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"自己动手实现系列 ---- new","date":"2020-03-24T04:40:22.000Z","_content":"# 实现一个new操作符\n我们首先知道new做了什么：\n\n1. 创建一个空的简单 `JavaScript` 对象（即{}）\n2. 链接该对象（即设置该对象的构造函数）到另一个对象\n3. 将步骤（1）新创建的对象作为 `this` 的上下文\n4. 如果该函数没有返回对象，则返回 `this`\n\n知道new做了什么，接下来我们就来实现它\n``` js\nfunction create(){\n  // 创建一个空的对象\n  let obj = {};\n\t// 获得构造函数\n    let Con = [].shift.call(arguments)\n  // 将空对象指向构造函数的原型链\n  Object.setPrototypeOf(obj, Con.prototype);\n\t// obj.__proto__ = Con.prototype // 链接到原型\n  // obj绑定到构造函数上，便可以访问构造函数中的属性，即this.obj.Con(args)\n  let result = Con.apply(obj, arguments);\n  // 如果返回的result是一个对象则返回\n  // new方法失效，否则返回obj\n  return result instanceof Object ? result : this.obj;\n\t// return typeof result === 'object' ? result : obj// 确保 new 出来的是个对象\n}\n```","source":"_posts/do-it-yourselfery-new.md","raw":"---\ntitle: 自己动手实现系列 ---- new\ndate: 2020-03-24 12:40:22\ncategories: \n\t- 源码原理\n\t- 自己动手实现系列\ntags: \n\t- 自己动手实现系列\n---\n# 实现一个new操作符\n我们首先知道new做了什么：\n\n1. 创建一个空的简单 `JavaScript` 对象（即{}）\n2. 链接该对象（即设置该对象的构造函数）到另一个对象\n3. 将步骤（1）新创建的对象作为 `this` 的上下文\n4. 如果该函数没有返回对象，则返回 `this`\n\n知道new做了什么，接下来我们就来实现它\n``` js\nfunction create(){\n  // 创建一个空的对象\n  let obj = {};\n\t// 获得构造函数\n    let Con = [].shift.call(arguments)\n  // 将空对象指向构造函数的原型链\n  Object.setPrototypeOf(obj, Con.prototype);\n\t// obj.__proto__ = Con.prototype // 链接到原型\n  // obj绑定到构造函数上，便可以访问构造函数中的属性，即this.obj.Con(args)\n  let result = Con.apply(obj, arguments);\n  // 如果返回的result是一个对象则返回\n  // new方法失效，否则返回obj\n  return result instanceof Object ? result : this.obj;\n\t// return typeof result === 'object' ? result : obj// 确保 new 出来的是个对象\n}\n```","slug":"do-it-yourselfery-new","published":1,"updated":"2020-04-02T03:20:12.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs440057ooa6cx6e76zo","content":"<h1 id=\"实现一个new操作符\"><a href=\"#实现一个new操作符\" class=\"headerlink\" title=\"实现一个new操作符\"></a>实现一个new操作符</h1><p>我们首先知道new做了什么：</p>\n<ol>\n<li>创建一个空的简单 <code>JavaScript</code> 对象（即{}）</li>\n<li>链接该对象（即设置该对象的构造函数）到另一个对象</li>\n<li>将步骤（1）新创建的对象作为 <code>this</code> 的上下文</li>\n<li>如果该函数没有返回对象，则返回 <code>this</code></li>\n</ol>\n<p>知道new做了什么，接下来我们就来实现它</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个空的对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">// 获得构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> Con = [].shift.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 将空对象指向构造函数的原型链</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.setPrototypeOf(obj, Con.prototype);</span><br><span class=\"line\">\t<span class=\"comment\">// obj.__proto__ = Con.prototype // 链接到原型</span></span><br><span class=\"line\">  <span class=\"comment\">// obj绑定到构造函数上，便可以访问构造函数中的属性，即this.obj.Con(args)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = Con.apply(obj, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 如果返回的result是一个对象则返回</span></span><br><span class=\"line\">  <span class=\"comment\">// new方法失效，否则返回obj</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span> ? result : <span class=\"keyword\">this</span>.obj;</span><br><span class=\"line\">\t<span class=\"comment\">// return typeof result === 'object' ? result : obj// 确保 new 出来的是个对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"实现一个new操作符\"><a href=\"#实现一个new操作符\" class=\"headerlink\" title=\"实现一个new操作符\"></a>实现一个new操作符</h1><p>我们首先知道new做了什么：</p>\n<ol>\n<li>创建一个空的简单 <code>JavaScript</code> 对象（即{}）</li>\n<li>链接该对象（即设置该对象的构造函数）到另一个对象</li>\n<li>将步骤（1）新创建的对象作为 <code>this</code> 的上下文</li>\n<li>如果该函数没有返回对象，则返回 <code>this</code></li>\n</ol>\n<p>知道new做了什么，接下来我们就来实现它</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个空的对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">// 获得构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> Con = [].shift.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 将空对象指向构造函数的原型链</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.setPrototypeOf(obj, Con.prototype);</span><br><span class=\"line\">\t<span class=\"comment\">// obj.__proto__ = Con.prototype // 链接到原型</span></span><br><span class=\"line\">  <span class=\"comment\">// obj绑定到构造函数上，便可以访问构造函数中的属性，即this.obj.Con(args)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = Con.apply(obj, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 如果返回的result是一个对象则返回</span></span><br><span class=\"line\">  <span class=\"comment\">// new方法失效，否则返回obj</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span> ? result : <span class=\"keyword\">this</span>.obj;</span><br><span class=\"line\">\t<span class=\"comment\">// return typeof result === 'object' ? result : obj// 确保 new 出来的是个对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"自己动手实现系列 ---- jsonp","date":"2020-01-09T08:40:22.000Z","_content":"# 前言\n面试中时常会出现需要手动实现某个功能的要求，所以我准备整理一个自己动手实现系列文章，第一个呢就是自己动手实现 `jsonp`\n\n## 实现 `jsonp` 思路\n1. 将传入的data数据转化为url字符串形式\n2. 处理url中的回调函数\n3. 创建一个script标签并插入到页面中\n4. 挂载回调函数\n\n## 代码实现\n```\n// js代码\n\n(function (window,document) {\n\t\"use strict\";\n\tvar jsonp = function (url,data,callback) {\n\t\t// 1.将传入的data数据转化为url字符串形式\n\t\t// {id:1,name:'jack'} => id=1&name=jack\n\t\tvar dataString = url.indexof('?') == -1? '?': '&';\n\t\tfor(var key in data){\n\t\t\tdataString += key + '=' + data[key] + '&';\n\t\t};\n\n\t\t// 2 处理url中的回调函数\n\t\t// cbFuncName回调函数的名字 ：my_json_cb_名字的前缀 + 随机数（把小数点去掉）\n\t\tvar cbFuncName = 'my_json_cb_' + Math.random().toString().replace('.','');\n\t\tdataString += 'callback=' + cbFuncName;\n\n\t\t// 3.创建一个script标签并插入到页面中\n\t\tvar scriptEle = document.createElement('script');\n\t\tscriptEle.src = url + dataString;\n\n\t\t// 4.挂载回调函数\n\t\twindow[cbFuncName] = function (data) {\n\t\t\tcallback(data); // 处理完回调函数的数据之后，删除jsonp的script标签\n\t\t\tdocument.body.removeChild(scriptEle);\n\t\t}\n\t\tdocument.body.appendChild(scriptEle);\n\t}\n\twindow.$jsonp = jsonp;\n})(window,document)\n```","source":"_posts/do-it-yourselfery-jsonp.md","raw":"---\ntitle: 自己动手实现系列 ---- jsonp\ndate: 2020-01-09 16:40:22\ncategories: \n\t- 源码原理\n\t- 自己动手实现系列\ntags: \n\t- jsonp\n---\n# 前言\n面试中时常会出现需要手动实现某个功能的要求，所以我准备整理一个自己动手实现系列文章，第一个呢就是自己动手实现 `jsonp`\n\n## 实现 `jsonp` 思路\n1. 将传入的data数据转化为url字符串形式\n2. 处理url中的回调函数\n3. 创建一个script标签并插入到页面中\n4. 挂载回调函数\n\n## 代码实现\n```\n// js代码\n\n(function (window,document) {\n\t\"use strict\";\n\tvar jsonp = function (url,data,callback) {\n\t\t// 1.将传入的data数据转化为url字符串形式\n\t\t// {id:1,name:'jack'} => id=1&name=jack\n\t\tvar dataString = url.indexof('?') == -1? '?': '&';\n\t\tfor(var key in data){\n\t\t\tdataString += key + '=' + data[key] + '&';\n\t\t};\n\n\t\t// 2 处理url中的回调函数\n\t\t// cbFuncName回调函数的名字 ：my_json_cb_名字的前缀 + 随机数（把小数点去掉）\n\t\tvar cbFuncName = 'my_json_cb_' + Math.random().toString().replace('.','');\n\t\tdataString += 'callback=' + cbFuncName;\n\n\t\t// 3.创建一个script标签并插入到页面中\n\t\tvar scriptEle = document.createElement('script');\n\t\tscriptEle.src = url + dataString;\n\n\t\t// 4.挂载回调函数\n\t\twindow[cbFuncName] = function (data) {\n\t\t\tcallback(data); // 处理完回调函数的数据之后，删除jsonp的script标签\n\t\t\tdocument.body.removeChild(scriptEle);\n\t\t}\n\t\tdocument.body.appendChild(scriptEle);\n\t}\n\twindow.$jsonp = jsonp;\n})(window,document)\n```","slug":"do-it-yourselfery-jsonp","published":1,"updated":"2020-04-02T03:20:12.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs46005aooa64tgg31fh","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>面试中时常会出现需要手动实现某个功能的要求，所以我准备整理一个自己动手实现系列文章，第一个呢就是自己动手实现 <code>jsonp</code></p>\n<h2 id=\"实现-jsonp-思路\"><a href=\"#实现-jsonp-思路\" class=\"headerlink\" title=\"实现 jsonp 思路\"></a>实现 <code>jsonp</code> 思路</h2><ol>\n<li>将传入的data数据转化为url字符串形式</li>\n<li>处理url中的回调函数</li>\n<li>创建一个script标签并插入到页面中</li>\n<li>挂载回调函数</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">(function (window,document) &#123;</span><br><span class=\"line\">\t&quot;use strict&quot;;</span><br><span class=\"line\">\tvar jsonp &#x3D; function (url,data,callback) &#123;</span><br><span class=\"line\">\t\t&#x2F;&#x2F; 1.将传入的data数据转化为url字符串形式</span><br><span class=\"line\">\t\t&#x2F;&#x2F; &#123;id:1,name:&#39;jack&#39;&#125; &#x3D;&gt; id&#x3D;1&amp;name&#x3D;jack</span><br><span class=\"line\">\t\tvar dataString &#x3D; url.indexof(&#39;?&#39;) &#x3D;&#x3D; -1? &#39;?&#39;: &#39;&amp;&#39;;</span><br><span class=\"line\">\t\tfor(var key in data)&#123;</span><br><span class=\"line\">\t\t\tdataString +&#x3D; key + &#39;&#x3D;&#39; + data[key] + &#39;&amp;&#39;;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#x2F;&#x2F; 2 处理url中的回调函数</span><br><span class=\"line\">\t\t&#x2F;&#x2F; cbFuncName回调函数的名字 ：my_json_cb_名字的前缀 + 随机数（把小数点去掉）</span><br><span class=\"line\">\t\tvar cbFuncName &#x3D; &#39;my_json_cb_&#39; + Math.random().toString().replace(&#39;.&#39;,&#39;&#39;);</span><br><span class=\"line\">\t\tdataString +&#x3D; &#39;callback&#x3D;&#39; + cbFuncName;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#x2F;&#x2F; 3.创建一个script标签并插入到页面中</span><br><span class=\"line\">\t\tvar scriptEle &#x3D; document.createElement(&#39;script&#39;);</span><br><span class=\"line\">\t\tscriptEle.src &#x3D; url + dataString;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#x2F;&#x2F; 4.挂载回调函数</span><br><span class=\"line\">\t\twindow[cbFuncName] &#x3D; function (data) &#123;</span><br><span class=\"line\">\t\t\tcallback(data); &#x2F;&#x2F; 处理完回调函数的数据之后，删除jsonp的script标签</span><br><span class=\"line\">\t\t\tdocument.body.removeChild(scriptEle);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdocument.body.appendChild(scriptEle);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twindow.$jsonp &#x3D; jsonp;</span><br><span class=\"line\">&#125;)(window,document)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>面试中时常会出现需要手动实现某个功能的要求，所以我准备整理一个自己动手实现系列文章，第一个呢就是自己动手实现 <code>jsonp</code></p>\n<h2 id=\"实现-jsonp-思路\"><a href=\"#实现-jsonp-思路\" class=\"headerlink\" title=\"实现 jsonp 思路\"></a>实现 <code>jsonp</code> 思路</h2><ol>\n<li>将传入的data数据转化为url字符串形式</li>\n<li>处理url中的回调函数</li>\n<li>创建一个script标签并插入到页面中</li>\n<li>挂载回调函数</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">(function (window,document) &#123;</span><br><span class=\"line\">\t&quot;use strict&quot;;</span><br><span class=\"line\">\tvar jsonp &#x3D; function (url,data,callback) &#123;</span><br><span class=\"line\">\t\t&#x2F;&#x2F; 1.将传入的data数据转化为url字符串形式</span><br><span class=\"line\">\t\t&#x2F;&#x2F; &#123;id:1,name:&#39;jack&#39;&#125; &#x3D;&gt; id&#x3D;1&amp;name&#x3D;jack</span><br><span class=\"line\">\t\tvar dataString &#x3D; url.indexof(&#39;?&#39;) &#x3D;&#x3D; -1? &#39;?&#39;: &#39;&amp;&#39;;</span><br><span class=\"line\">\t\tfor(var key in data)&#123;</span><br><span class=\"line\">\t\t\tdataString +&#x3D; key + &#39;&#x3D;&#39; + data[key] + &#39;&amp;&#39;;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#x2F;&#x2F; 2 处理url中的回调函数</span><br><span class=\"line\">\t\t&#x2F;&#x2F; cbFuncName回调函数的名字 ：my_json_cb_名字的前缀 + 随机数（把小数点去掉）</span><br><span class=\"line\">\t\tvar cbFuncName &#x3D; &#39;my_json_cb_&#39; + Math.random().toString().replace(&#39;.&#39;,&#39;&#39;);</span><br><span class=\"line\">\t\tdataString +&#x3D; &#39;callback&#x3D;&#39; + cbFuncName;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#x2F;&#x2F; 3.创建一个script标签并插入到页面中</span><br><span class=\"line\">\t\tvar scriptEle &#x3D; document.createElement(&#39;script&#39;);</span><br><span class=\"line\">\t\tscriptEle.src &#x3D; url + dataString;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#x2F;&#x2F; 4.挂载回调函数</span><br><span class=\"line\">\t\twindow[cbFuncName] &#x3D; function (data) &#123;</span><br><span class=\"line\">\t\t\tcallback(data); &#x2F;&#x2F; 处理完回调函数的数据之后，删除jsonp的script标签</span><br><span class=\"line\">\t\t\tdocument.body.removeChild(scriptEle);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tdocument.body.appendChild(scriptEle);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twindow.$jsonp &#x3D; jsonp;</span><br><span class=\"line\">&#125;)(window,document)</span><br></pre></td></tr></table></figure>"},{"title":"自己动手实现系列 ---- Array.prototype.map()","date":"2020-03-24T15:20:22.000Z","_content":"# 原理\n先看看 `reduce` 和 `map` 的使用方法\n``` js\nlet new_array = arr.map(function callback(currentValue[, index[,array) {/* Return element for new_array */ }[, thisArg])\nlet result = arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])\n```\n\n# 实现\n第一种用 `for` 实现\n``` js\nArray.prototype.myMap = function(callback, thisArg) {\n  let arr = [];\n  for (let i = 0; i < this.length; i++) {\n    arr.push(callback.call(thisArg, this[i], i, this));\n  }\n  return arr;\n};\n```\n第二种用 `reduce` 实现\n``` js\nArray.prototype.myMap = function(callback, thisArg) {\n  let result = this.reduce((accumulator, currentValue, index, array) => {\n    accumulator.push(callback.call(thisArg, currentValue, index, array));\n    return accumulator;\n  }, []);\n  return result;\n};\n```","source":"_posts/do-it-yourselfery-map.md","raw":"---\ntitle: 自己动手实现系列 ---- Array.prototype.map()\ndate: 2020-03-24 23:20:22\ncategories: \n\t- 源码原理\n\t- 自己动手实现系列\ntags: \n\t- 自己动手实现系列\n---\n# 原理\n先看看 `reduce` 和 `map` 的使用方法\n``` js\nlet new_array = arr.map(function callback(currentValue[, index[,array) {/* Return element for new_array */ }[, thisArg])\nlet result = arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])\n```\n\n# 实现\n第一种用 `for` 实现\n``` js\nArray.prototype.myMap = function(callback, thisArg) {\n  let arr = [];\n  for (let i = 0; i < this.length; i++) {\n    arr.push(callback.call(thisArg, this[i], i, this));\n  }\n  return arr;\n};\n```\n第二种用 `reduce` 实现\n``` js\nArray.prototype.myMap = function(callback, thisArg) {\n  let result = this.reduce((accumulator, currentValue, index, array) => {\n    accumulator.push(callback.call(thisArg, currentValue, index, array));\n    return accumulator;\n  }, []);\n  return result;\n};\n```","slug":"do-it-yourselfery-map","published":1,"updated":"2020-04-02T03:20:12.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs4f005eooa6d9xnd50z","content":"<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>先看看 <code>reduce</code> 和 <code>map</code> 的使用方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> new_array = arr.map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">currentValue[, index[,array</span>) </span>&#123;<span class=\"comment\">/* Return element for new_array */</span> &#125;[, thisArg])</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><p>第一种用 <code>for</code> 实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myMap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, thisArg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\">    arr.push(callback.call(thisArg, <span class=\"keyword\">this</span>[i], i, <span class=\"keyword\">this</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>第二种用 <code>reduce</code> 实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myMap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, thisArg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"keyword\">this</span>.reduce(<span class=\"function\">(<span class=\"params\">accumulator, currentValue, index, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    accumulator.push(callback.call(thisArg, currentValue, index, array));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accumulator;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>先看看 <code>reduce</code> 和 <code>map</code> 的使用方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> new_array = arr.map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">currentValue[, index[,array</span>) </span>&#123;<span class=\"comment\">/* Return element for new_array */</span> &#125;[, thisArg])</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><p>第一种用 <code>for</code> 实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myMap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, thisArg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123;</span><br><span class=\"line\">    arr.push(callback.call(thisArg, <span class=\"keyword\">this</span>[i], i, <span class=\"keyword\">this</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>第二种用 <code>reduce</code> 实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myMap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, thisArg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"keyword\">this</span>.reduce(<span class=\"function\">(<span class=\"params\">accumulator, currentValue, index, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    accumulator.push(callback.call(thisArg, currentValue, index, array));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accumulator;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"自己动手实现系列 ---- promise","date":"2020-01-13T00:40:22.000Z","_content":"# 前言\n面试中时常会出现需要手动实现某个功能的要求，所以我准备整理一个自己动手实现系列文章，这一次呢就是自己动手实现 `promise`\n\n## 实现 `promise` 思路\n\n**基础步骤**\n\n1. 设定三个状态 `PENDING` 、 `FULFILLED` 、 `REJECTED`  ，只能由 `PENDING` 改变为 `FULFILLED` 、 `REJECTED` ，并且只能改变一次\n2. `MyPromise` 接收一个函数 `executor` ， `executor` 有两个参数 `resolve` 方法和 `reject` 方法\n3. `resolve` 将 `PENDING` 改变为 `FULFILLED`\n4. `reject` 将 `PENDING` 改变为 `FULFILLED`\n5. `promise` 变为 `FULFILLED` 状态后具有一个唯一的 `value`\n6. `promise` 变为 `REJECTED` 状态后具有一个唯一的 `reason`\n\n** `then` 方法**\n1. `then` 方法接受两个参数 `onFulfilled` 、 `onRejected` ，它们分别在状态由 `PENDING` 改变为 `FULFILLED` 、 `REJECTED` 后调用\n2. 一个 `promise` 可绑定多个 `then` 方法\n3. `then` 方法可以同步调用也可以异步调用\n4. 同步调用：状态已经改变，直接调用 `onFulfilled` 方法\n5. 异步调用：状态还是 `PENDING` ，将 `onFulfilled` 、 `onRejected` 分别加入两个函数数组 `onFulfilledCallbacks` 、 `onRejectedCallbacks` ，当异步调用 `resolve` 和 `reject` 时，将两个数组中绑定的事件循环执行。\n\n\n## 代码实现\n``` js\n// js代码\n\n// 定义状态常量\nconst PENDING = 'pending';\nconst FULFILLED = 'fulfilled';\nconst REJECTED = 'rejected';\n\n/**\n * 定义MyPromise模拟Promise\n * @param {func} executor 接收函数\n*/\nfunction MyPromise(executor) {\n\tthis.state = PENDING; // 默认状态为 pending\n\tthis.value = null;\n\tthis.reason = null;\n\n\t// 定义成功失败的函数数组\n\tthis.onFulfilledCallbacks = [];\n  this.onRejectedCallbacks = [];\n\n\t// 定义成功回调\n\tconst resolve = (value) => {\n\t\tif (this.state === PENDING) {\n\t\t\tthis.state = FULFILLED;\n\t\t\tthis.value = value;\n\n\t\t\tthis.onFulfilledCallbacks.forEach(func => {\n\t\t\t\tfunc();\n\t\t\t});\n\t\t}\n\t}\n\n\t// 定义失败回调\n\tconst reject = (reason) => {\n\t\tif (this.state === PENDING) {\n\t\t\tthis.state = REJECTED;\n\t\t\tthis.reason = reason;\n\t\t\tthis.onRejectedCallbacks.forEach(func => {\n\t\t\t\tfunc();\n\t\t\t});\n\t\t}\n\t}\n\n\ttry {\n\t\texecutor(resolve, reject);\n\t} catch (reason) {\n\t\treject(reason);\n\t}\n}\n\nMyPromise.prototype.then = function (onFulfilled, onRejected) {\n\tswitch (this.state) {\n\t\tcase FULFILLED:\n\t\t\tonFulfilled(this.value);\n\t\t\tbreak;\n\t\tcase REJECTED:\n\t\t\tonFulfilled(this.value);\n\t\t\tbreak;\n\t\tcase PENDING:\n\t\t\tthis.onFulfilledCallbacks.push(() => {\n\t\t\t\tonFulfilled(this.value);\n\t\t\t})\n\t\t\tthis.onRejectedCallbacks.push(() => {\n\t\t\t\tonRejected(this.reason);\n\t\t\t})\n\t\t\tbreak;\n}\n```\n## then方法异步调用\n如下面的代码：输入顺序是：1、2、ConardLi\n\n``` js\n// js代码\n\nconsole.log(1);\n\nlet promise = new Promise((resolve, reject) => {\n  resolve('ConardLi');\n});\n\npromise.then((value) => {\n  console.log(value);\n});\n\nconsole.log(2);\n```\n虽然 `resolve` 是同步执行的，我们必须保证 `then` 是异步调用的，我们用 `setTimeout` 来模拟异步调用（并不能实现微任务和宏任务的执行机制，只是保证异步调用）\n``` js\n\n// js代码\nMyPromise.prototype.then = function (onFulfilled, onRejected) {\n\tif (typeof onFulfilled != 'function') {\n\t\tonFulfilled = function (value) {\n\t\t\treturn value;\n\t\t}\n\t}\n\tif (typeof onRejected != 'function') {\n\t\tonRejected = function (reason) {\n\t\t\tthrow reason;\n\t\t}\n\t}\n\tswitch (this.state) {\n\t\tcase FULFILLED:\n\t\t\tsetTimeout(() => {\n\t\t\t\tonFulfilled(this.value);\n\t\t\t}, 0);\n\t\t\tbreak;\n\t\tcase REJECTED:\n\t\t\tsetTimeout(() => {\n\t\t\t\tonRejected(this.reason);\n\t\t\t}, 0);\n\t\t\tbreak;\n\t\tcase PENDING:\n\t\t\tthis.onFulfilledCallbacks.push(() => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tonFulfilled(this.value);\n\t\t\t\t}, 0);\n\t\t\t})\n\t\t\tthis.onRejectedCallbacks.push(() => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tonRejected(this.reason);\n\t\t\t\t}, 0);\n\t\t\t})\n\t\t\tbreak;\n\t}\n}\n```\n## then方法链式调用\n保证链式调用，即 `then` 方法中要返回一个新的 `promise` ，并将 `then` 方法的返回值进行 `resolve` 。\n\n*注意：这种实现并不能保证 `then` 方法中返回一个新的 `promise` ，只能保证链式调用*。\n\n``` js\n// js代码\nMyPromise.prototype.then = function (onFulfilled, onRejected) {\n\tif (typeof onFulfilled != 'function') {\n\t\tonFulfilled = function (value) {\n\t\t\treturn value;\n\t\t}\n\t}\n\tif (typeof onRejected != 'function') {\n\t\tonRejected = function (reason) {\n\t\t\tthrow reason;\n\t\t}\n\t}\n\n\t// 创建一个新的MyPromise对象\n\tconst promise2 = new MyPromise((resolve, reject) => {\n\t\tswitch (this.state) {\n\t\t\tcase FULFILLED:\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst x = onFulfilled(this.value);\n\t\t\t\t\t\tresolve(x);\n\t\t\t\t\t} catch (reason) {\n\t\t\t\t\t\treject(reason);\n\t\t\t\t\t}\n\t\t\t\t}, 0);\n\t\t\t\tbreak;\n\t\t\tcase REJECTED:\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst x = onRejected(this.reason);\n\t\t\t\t\t\tresolve(x);\n\t\t\t\t\t} catch (reason) {\n\t\t\t\t\t\treject(reason);\n\t\t\t\t\t}\n\t\t\t\t}, 0);\n\t\t\t\tbreak;\n\t\t\tcase PENDING:\n\t\t\t\tthis.onFulfilledCallbacks.push(() => {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst x = onFulfilled(this.value);\n\t\t\t\t\t\t\tresolve(x);\n\t\t\t\t\t\t} catch (reason) {\n\t\t\t\t\t\t\treject(reason);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 0);\n\t\t\t\t})\n\t\t\t\tthis.onRejectedCallbacks.push(() => {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst x = onRejected(this.reason);\n\t\t\t\t\t\t\tresolve(x);\n\t\t\t\t\t\t} catch (reason) {\n\t\t\t\t\t\t\treject(reason);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 0);\n\t\t\t\t})\n\t\t\t\tbreak;\n\t\t}\n\t})\n\treturn promise2;\n}\n```\n## catch方法\n若上面没有定义 `reject` 方法，所有的异常会走向 `catch` 方法：\n``` js\n// js代码\n\nMyPromise.prototype.catch = function(onRejected) {\n  return this.then(null, onRejected);\n};\n\n```\n## finally方法\n不管是 `resolve` 还是 `reject` 都会调用 `finally` 。\n``` js\n// js代码\n\nMyPromise.prototype.finally = function(fn) {\n\treturn this.then(value => {\n\t\tfn();\n\t\treturn value;\n\t}, reason => {\n\t\tfn();\n\t\tthrow reason;\n\t});\n};\n```\n## Promise.resolve\n`Promise.resolve` 用来生成一个直接处于 `FULFILLED` 状态的 `Promise` 。\n``` js\n// js代码\nMyPromise.reject = function(value) {\n  return new MyPromise((resolve, reject) => {\n    resolve(value);\n  });\n};\n```\n## Promise.reject\n`Promise.reject` 用来生成一个直接处于 `REJECTED` 状态的 `Promise` 。\n``` js\n// js代码\nMyPromise.reject = function(reason) {\n  return new MyPromise((resolve, reject) => {\n    reject(reason);\n  });\n};\n```\n## all方法\n接受一个 `promise` 数组，当所有 `promise` 状态 `resolve` 后，执行 `resolve`\n``` js\n// js代码\nMyPromise.all = function (promises) {\n\treturn new Promise((resolve, reject) => {\n\t\tif (promises.length === 0) {\n\t\t\tresolve([]);\n\t\t} else {\n\t\t\tlet result = [];\n\t\t\tlet index = 0;\n\t\t\tfor (let i = 0; i < promises.length; i++) {\n\t\t\t\tpromises[i].then(data => {\n\t\t\t\t\tresult[i] = data;\n\t\t\t\t\tif (++index === promises.length) {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t}, err => {\n\t\t\t\t\treject(err);\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n}\n```\n## race方法\n接受一个 `promise` 数组，当有一个 `promise` 状态 `resolve` 后，执行 `resolve`\n\n``` js\n// js代码\nMyPromise.race = function (promises) {\n\treturn new Promise((resolve, reject) => {\n\t\tif (promises.length === 0) {\n\t\t\tresolve();\n\t\t} else {\n\t\t\tlet index = 0;\n\t\t\tfor (let i = 0; i < promises.length; i++) {\n\t\t\t\tpromises[i].then(data => {\n\t\t\t\t\tresolve(data);\n\t\t\t\t}, err => {\n\t\t\t\t\treject(err);\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n}\n```\n\n# 最后\n如此一个自定义的 `promise` 就实现了，怎么样学回来吗？","source":"_posts/do-it-yourselfery-promise.md","raw":"---\ntitle: 自己动手实现系列 ---- promise\ndate: 2020-01-13 08:40:22\ncategories: \n\t- 源码原理\n\t- 自己动手实现系列\ntags: \n\t- promise\n---\n# 前言\n面试中时常会出现需要手动实现某个功能的要求，所以我准备整理一个自己动手实现系列文章，这一次呢就是自己动手实现 `promise`\n\n## 实现 `promise` 思路\n\n**基础步骤**\n\n1. 设定三个状态 `PENDING` 、 `FULFILLED` 、 `REJECTED`  ，只能由 `PENDING` 改变为 `FULFILLED` 、 `REJECTED` ，并且只能改变一次\n2. `MyPromise` 接收一个函数 `executor` ， `executor` 有两个参数 `resolve` 方法和 `reject` 方法\n3. `resolve` 将 `PENDING` 改变为 `FULFILLED`\n4. `reject` 将 `PENDING` 改变为 `FULFILLED`\n5. `promise` 变为 `FULFILLED` 状态后具有一个唯一的 `value`\n6. `promise` 变为 `REJECTED` 状态后具有一个唯一的 `reason`\n\n** `then` 方法**\n1. `then` 方法接受两个参数 `onFulfilled` 、 `onRejected` ，它们分别在状态由 `PENDING` 改变为 `FULFILLED` 、 `REJECTED` 后调用\n2. 一个 `promise` 可绑定多个 `then` 方法\n3. `then` 方法可以同步调用也可以异步调用\n4. 同步调用：状态已经改变，直接调用 `onFulfilled` 方法\n5. 异步调用：状态还是 `PENDING` ，将 `onFulfilled` 、 `onRejected` 分别加入两个函数数组 `onFulfilledCallbacks` 、 `onRejectedCallbacks` ，当异步调用 `resolve` 和 `reject` 时，将两个数组中绑定的事件循环执行。\n\n\n## 代码实现\n``` js\n// js代码\n\n// 定义状态常量\nconst PENDING = 'pending';\nconst FULFILLED = 'fulfilled';\nconst REJECTED = 'rejected';\n\n/**\n * 定义MyPromise模拟Promise\n * @param {func} executor 接收函数\n*/\nfunction MyPromise(executor) {\n\tthis.state = PENDING; // 默认状态为 pending\n\tthis.value = null;\n\tthis.reason = null;\n\n\t// 定义成功失败的函数数组\n\tthis.onFulfilledCallbacks = [];\n  this.onRejectedCallbacks = [];\n\n\t// 定义成功回调\n\tconst resolve = (value) => {\n\t\tif (this.state === PENDING) {\n\t\t\tthis.state = FULFILLED;\n\t\t\tthis.value = value;\n\n\t\t\tthis.onFulfilledCallbacks.forEach(func => {\n\t\t\t\tfunc();\n\t\t\t});\n\t\t}\n\t}\n\n\t// 定义失败回调\n\tconst reject = (reason) => {\n\t\tif (this.state === PENDING) {\n\t\t\tthis.state = REJECTED;\n\t\t\tthis.reason = reason;\n\t\t\tthis.onRejectedCallbacks.forEach(func => {\n\t\t\t\tfunc();\n\t\t\t});\n\t\t}\n\t}\n\n\ttry {\n\t\texecutor(resolve, reject);\n\t} catch (reason) {\n\t\treject(reason);\n\t}\n}\n\nMyPromise.prototype.then = function (onFulfilled, onRejected) {\n\tswitch (this.state) {\n\t\tcase FULFILLED:\n\t\t\tonFulfilled(this.value);\n\t\t\tbreak;\n\t\tcase REJECTED:\n\t\t\tonFulfilled(this.value);\n\t\t\tbreak;\n\t\tcase PENDING:\n\t\t\tthis.onFulfilledCallbacks.push(() => {\n\t\t\t\tonFulfilled(this.value);\n\t\t\t})\n\t\t\tthis.onRejectedCallbacks.push(() => {\n\t\t\t\tonRejected(this.reason);\n\t\t\t})\n\t\t\tbreak;\n}\n```\n## then方法异步调用\n如下面的代码：输入顺序是：1、2、ConardLi\n\n``` js\n// js代码\n\nconsole.log(1);\n\nlet promise = new Promise((resolve, reject) => {\n  resolve('ConardLi');\n});\n\npromise.then((value) => {\n  console.log(value);\n});\n\nconsole.log(2);\n```\n虽然 `resolve` 是同步执行的，我们必须保证 `then` 是异步调用的，我们用 `setTimeout` 来模拟异步调用（并不能实现微任务和宏任务的执行机制，只是保证异步调用）\n``` js\n\n// js代码\nMyPromise.prototype.then = function (onFulfilled, onRejected) {\n\tif (typeof onFulfilled != 'function') {\n\t\tonFulfilled = function (value) {\n\t\t\treturn value;\n\t\t}\n\t}\n\tif (typeof onRejected != 'function') {\n\t\tonRejected = function (reason) {\n\t\t\tthrow reason;\n\t\t}\n\t}\n\tswitch (this.state) {\n\t\tcase FULFILLED:\n\t\t\tsetTimeout(() => {\n\t\t\t\tonFulfilled(this.value);\n\t\t\t}, 0);\n\t\t\tbreak;\n\t\tcase REJECTED:\n\t\t\tsetTimeout(() => {\n\t\t\t\tonRejected(this.reason);\n\t\t\t}, 0);\n\t\t\tbreak;\n\t\tcase PENDING:\n\t\t\tthis.onFulfilledCallbacks.push(() => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tonFulfilled(this.value);\n\t\t\t\t}, 0);\n\t\t\t})\n\t\t\tthis.onRejectedCallbacks.push(() => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tonRejected(this.reason);\n\t\t\t\t}, 0);\n\t\t\t})\n\t\t\tbreak;\n\t}\n}\n```\n## then方法链式调用\n保证链式调用，即 `then` 方法中要返回一个新的 `promise` ，并将 `then` 方法的返回值进行 `resolve` 。\n\n*注意：这种实现并不能保证 `then` 方法中返回一个新的 `promise` ，只能保证链式调用*。\n\n``` js\n// js代码\nMyPromise.prototype.then = function (onFulfilled, onRejected) {\n\tif (typeof onFulfilled != 'function') {\n\t\tonFulfilled = function (value) {\n\t\t\treturn value;\n\t\t}\n\t}\n\tif (typeof onRejected != 'function') {\n\t\tonRejected = function (reason) {\n\t\t\tthrow reason;\n\t\t}\n\t}\n\n\t// 创建一个新的MyPromise对象\n\tconst promise2 = new MyPromise((resolve, reject) => {\n\t\tswitch (this.state) {\n\t\t\tcase FULFILLED:\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst x = onFulfilled(this.value);\n\t\t\t\t\t\tresolve(x);\n\t\t\t\t\t} catch (reason) {\n\t\t\t\t\t\treject(reason);\n\t\t\t\t\t}\n\t\t\t\t}, 0);\n\t\t\t\tbreak;\n\t\t\tcase REJECTED:\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst x = onRejected(this.reason);\n\t\t\t\t\t\tresolve(x);\n\t\t\t\t\t} catch (reason) {\n\t\t\t\t\t\treject(reason);\n\t\t\t\t\t}\n\t\t\t\t}, 0);\n\t\t\t\tbreak;\n\t\t\tcase PENDING:\n\t\t\t\tthis.onFulfilledCallbacks.push(() => {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst x = onFulfilled(this.value);\n\t\t\t\t\t\t\tresolve(x);\n\t\t\t\t\t\t} catch (reason) {\n\t\t\t\t\t\t\treject(reason);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 0);\n\t\t\t\t})\n\t\t\t\tthis.onRejectedCallbacks.push(() => {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst x = onRejected(this.reason);\n\t\t\t\t\t\t\tresolve(x);\n\t\t\t\t\t\t} catch (reason) {\n\t\t\t\t\t\t\treject(reason);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 0);\n\t\t\t\t})\n\t\t\t\tbreak;\n\t\t}\n\t})\n\treturn promise2;\n}\n```\n## catch方法\n若上面没有定义 `reject` 方法，所有的异常会走向 `catch` 方法：\n``` js\n// js代码\n\nMyPromise.prototype.catch = function(onRejected) {\n  return this.then(null, onRejected);\n};\n\n```\n## finally方法\n不管是 `resolve` 还是 `reject` 都会调用 `finally` 。\n``` js\n// js代码\n\nMyPromise.prototype.finally = function(fn) {\n\treturn this.then(value => {\n\t\tfn();\n\t\treturn value;\n\t}, reason => {\n\t\tfn();\n\t\tthrow reason;\n\t});\n};\n```\n## Promise.resolve\n`Promise.resolve` 用来生成一个直接处于 `FULFILLED` 状态的 `Promise` 。\n``` js\n// js代码\nMyPromise.reject = function(value) {\n  return new MyPromise((resolve, reject) => {\n    resolve(value);\n  });\n};\n```\n## Promise.reject\n`Promise.reject` 用来生成一个直接处于 `REJECTED` 状态的 `Promise` 。\n``` js\n// js代码\nMyPromise.reject = function(reason) {\n  return new MyPromise((resolve, reject) => {\n    reject(reason);\n  });\n};\n```\n## all方法\n接受一个 `promise` 数组，当所有 `promise` 状态 `resolve` 后，执行 `resolve`\n``` js\n// js代码\nMyPromise.all = function (promises) {\n\treturn new Promise((resolve, reject) => {\n\t\tif (promises.length === 0) {\n\t\t\tresolve([]);\n\t\t} else {\n\t\t\tlet result = [];\n\t\t\tlet index = 0;\n\t\t\tfor (let i = 0; i < promises.length; i++) {\n\t\t\t\tpromises[i].then(data => {\n\t\t\t\t\tresult[i] = data;\n\t\t\t\t\tif (++index === promises.length) {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t}, err => {\n\t\t\t\t\treject(err);\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n}\n```\n## race方法\n接受一个 `promise` 数组，当有一个 `promise` 状态 `resolve` 后，执行 `resolve`\n\n``` js\n// js代码\nMyPromise.race = function (promises) {\n\treturn new Promise((resolve, reject) => {\n\t\tif (promises.length === 0) {\n\t\t\tresolve();\n\t\t} else {\n\t\t\tlet index = 0;\n\t\t\tfor (let i = 0; i < promises.length; i++) {\n\t\t\t\tpromises[i].then(data => {\n\t\t\t\t\tresolve(data);\n\t\t\t\t}, err => {\n\t\t\t\t\treject(err);\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n}\n```\n\n# 最后\n如此一个自定义的 `promise` 就实现了，怎么样学回来吗？","slug":"do-it-yourselfery-promise","published":1,"updated":"2020-04-02T03:20:12.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs4g005hooa67n7g4m9s","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>面试中时常会出现需要手动实现某个功能的要求，所以我准备整理一个自己动手实现系列文章，这一次呢就是自己动手实现 <code>promise</code></p>\n<h2 id=\"实现-promise-思路\"><a href=\"#实现-promise-思路\" class=\"headerlink\" title=\"实现 promise 思路\"></a>实现 <code>promise</code> 思路</h2><p><strong>基础步骤</strong></p>\n<ol>\n<li>设定三个状态 <code>PENDING</code> 、 <code>FULFILLED</code> 、 <code>REJECTED</code>  ，只能由 <code>PENDING</code> 改变为 <code>FULFILLED</code> 、 <code>REJECTED</code> ，并且只能改变一次</li>\n<li><code>MyPromise</code> 接收一个函数 <code>executor</code> ， <code>executor</code> 有两个参数 <code>resolve</code> 方法和 <code>reject</code> 方法</li>\n<li><code>resolve</code> 将 <code>PENDING</code> 改变为 <code>FULFILLED</code></li>\n<li><code>reject</code> 将 <code>PENDING</code> 改变为 <code>FULFILLED</code></li>\n<li><code>promise</code> 变为 <code>FULFILLED</code> 状态后具有一个唯一的 <code>value</code></li>\n<li><code>promise</code> 变为 <code>REJECTED</code> 状态后具有一个唯一的 <code>reason</code></li>\n</ol>\n<p>** <code>then</code> 方法**</p>\n<ol>\n<li><code>then</code> 方法接受两个参数 <code>onFulfilled</code> 、 <code>onRejected</code> ，它们分别在状态由 <code>PENDING</code> 改变为 <code>FULFILLED</code> 、 <code>REJECTED</code> 后调用</li>\n<li>一个 <code>promise</code> 可绑定多个 <code>then</code> 方法</li>\n<li><code>then</code> 方法可以同步调用也可以异步调用</li>\n<li>同步调用：状态已经改变，直接调用 <code>onFulfilled</code> 方法</li>\n<li>异步调用：状态还是 <code>PENDING</code> ，将 <code>onFulfilled</code> 、 <code>onRejected</code> 分别加入两个函数数组 <code>onFulfilledCallbacks</code> 、 <code>onRejectedCallbacks</code> ，当异步调用 <code>resolve</code> 和 <code>reject</code> 时，将两个数组中绑定的事件循环执行。</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义状态常量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> FULFILLED = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> REJECTED = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义MyPromise模拟Promise</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;func&#125;</span> </span>executor 接收函数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyPromise</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.state = PENDING; <span class=\"comment\">// 默认状态为 pending</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.value = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.reason = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 定义成功失败的函数数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.onFulfilledCallbacks = [];</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.onRejectedCallbacks = [];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 定义成功回调</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === PENDING) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.state = FULFILLED;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.onFulfilledCallbacks.forEach(<span class=\"function\"><span class=\"params\">func</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\tfunc();</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 定义失败回调</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> reject = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === PENDING) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.state = REJECTED;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.onRejectedCallbacks.forEach(<span class=\"function\"><span class=\"params\">func</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\tfunc();</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\texecutor(resolve, reject);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (reason) &#123;</span><br><span class=\"line\">\t\treject(reason);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyPromise.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.state) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> FULFILLED:</span><br><span class=\"line\">\t\t\tonFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> REJECTED:</span><br><span class=\"line\">\t\t\tonFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> PENDING:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.onFulfilledCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\tonFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.onRejectedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\tonRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"then方法异步调用\"><a href=\"#then方法异步调用\" class=\"headerlink\" title=\"then方法异步调用\"></a>then方法异步调用</h2><p>如下面的代码：输入顺序是：1、2、ConardLi</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'ConardLi'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>虽然 <code>resolve</code> 是同步执行的，我们必须保证 <code>then</code> 是异步调用的，我们用 <code>setTimeout</code> 来模拟异步调用（并不能实现微任务和宏任务的执行机制，只是保证异步调用）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\">MyPromise.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onFulfilled != <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">\t\tonFulfilled = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onRejected != <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">\t\tonRejected = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> reason;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.state) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> FULFILLED:</span><br><span class=\"line\">\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\tonFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">\t\t\t&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> REJECTED:</span><br><span class=\"line\">\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\tonRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">\t\t\t&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> PENDING:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.onFulfilledCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tonFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">\t\t\t\t&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.onRejectedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tonRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">\t\t\t\t&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"then方法链式调用\"><a href=\"#then方法链式调用\" class=\"headerlink\" title=\"then方法链式调用\"></a>then方法链式调用</h2><p>保证链式调用，即 <code>then</code> 方法中要返回一个新的 <code>promise</code> ，并将 <code>then</code> 方法的返回值进行 <code>resolve</code> 。</p>\n<p><em>注意：这种实现并不能保证 <code>then</code> 方法中返回一个新的 <code>promise</code> ，只能保证链式调用</em>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\">MyPromise.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onFulfilled != <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">\t\tonFulfilled = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onRejected != <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">\t\tonRejected = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> reason;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建一个新的MyPromise对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> promise2 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.state) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> FULFILLED:</span><br><span class=\"line\">\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">const</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">\t\t\t\t\t\tresolve(x);</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (reason) &#123;</span><br><span class=\"line\">\t\t\t\t\t\treject(reason);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> REJECTED:</span><br><span class=\"line\">\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">const</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">\t\t\t\t\t\tresolve(x);</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (reason) &#123;</span><br><span class=\"line\">\t\t\t\t\t\treject(reason);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> PENDING:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.onFulfilledCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">const</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">\t\t\t\t\t\t\tresolve(x);</span><br><span class=\"line\">\t\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (reason) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\treject(reason);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.onRejectedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">const</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">\t\t\t\t\t\t\tresolve(x);</span><br><span class=\"line\">\t\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (reason) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\treject(reason);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> promise2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"catch方法\"><a href=\"#catch方法\" class=\"headerlink\" title=\"catch方法\"></a>catch方法</h2><p>若上面没有定义 <code>reject</code> 方法，所有的异常会走向 <code>catch</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">MyPromise.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onRejected</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>, onRejected);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"finally方法\"><a href=\"#finally方法\" class=\"headerlink\" title=\"finally方法\"></a>finally方法</h2><p>不管是 <code>resolve</code> 还是 <code>reject</code> 都会调用 <code>finally</code> 。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">MyPromise.prototype.finally = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\tfn();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t&#125;, reason =&gt; &#123;</span><br><span class=\"line\">\t\tfn();</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> reason;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve\"></a>Promise.resolve</h2><p><code>Promise.resolve</code> 用来生成一个直接处于 <code>FULFILLED</code> 状态的 <code>Promise</code> 。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\">MyPromise.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(value);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject\"></a>Promise.reject</h2><p><code>Promise.reject</code> 用来生成一个直接处于 <code>REJECTED</code> 状态的 <code>Promise</code> 。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\">MyPromise.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    reject(reason);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"all方法\"><a href=\"#all方法\" class=\"headerlink\" title=\"all方法\"></a>all方法</h2><p>接受一个 <code>promise</code> 数组，当所有 <code>promise</code> 状态 <code>resolve</code> 后，执行 <code>resolve</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\">MyPromise.all = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (promises.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tresolve([]);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">\t\t\t\tpromises[i].then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tresult[i] = data;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (++index === promises.length) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tresolve(result);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;, err =&gt; &#123;</span><br><span class=\"line\">\t\t\t\t\treject(err);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"race方法\"><a href=\"#race方法\" class=\"headerlink\" title=\"race方法\"></a>race方法</h2><p>接受一个 <code>promise</code> 数组，当有一个 <code>promise</code> 状态 <code>resolve</code> 后，执行 <code>resolve</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\">MyPromise.race = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (promises.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tresolve();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">\t\t\t\tpromises[i].then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tresolve(data);</span><br><span class=\"line\">\t\t\t\t&#125;, err =&gt; &#123;</span><br><span class=\"line\">\t\t\t\t\treject(err);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>如此一个自定义的 <code>promise</code> 就实现了，怎么样学回来吗？</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>面试中时常会出现需要手动实现某个功能的要求，所以我准备整理一个自己动手实现系列文章，这一次呢就是自己动手实现 <code>promise</code></p>\n<h2 id=\"实现-promise-思路\"><a href=\"#实现-promise-思路\" class=\"headerlink\" title=\"实现 promise 思路\"></a>实现 <code>promise</code> 思路</h2><p><strong>基础步骤</strong></p>\n<ol>\n<li>设定三个状态 <code>PENDING</code> 、 <code>FULFILLED</code> 、 <code>REJECTED</code>  ，只能由 <code>PENDING</code> 改变为 <code>FULFILLED</code> 、 <code>REJECTED</code> ，并且只能改变一次</li>\n<li><code>MyPromise</code> 接收一个函数 <code>executor</code> ， <code>executor</code> 有两个参数 <code>resolve</code> 方法和 <code>reject</code> 方法</li>\n<li><code>resolve</code> 将 <code>PENDING</code> 改变为 <code>FULFILLED</code></li>\n<li><code>reject</code> 将 <code>PENDING</code> 改变为 <code>FULFILLED</code></li>\n<li><code>promise</code> 变为 <code>FULFILLED</code> 状态后具有一个唯一的 <code>value</code></li>\n<li><code>promise</code> 变为 <code>REJECTED</code> 状态后具有一个唯一的 <code>reason</code></li>\n</ol>\n<p>** <code>then</code> 方法**</p>\n<ol>\n<li><code>then</code> 方法接受两个参数 <code>onFulfilled</code> 、 <code>onRejected</code> ，它们分别在状态由 <code>PENDING</code> 改变为 <code>FULFILLED</code> 、 <code>REJECTED</code> 后调用</li>\n<li>一个 <code>promise</code> 可绑定多个 <code>then</code> 方法</li>\n<li><code>then</code> 方法可以同步调用也可以异步调用</li>\n<li>同步调用：状态已经改变，直接调用 <code>onFulfilled</code> 方法</li>\n<li>异步调用：状态还是 <code>PENDING</code> ，将 <code>onFulfilled</code> 、 <code>onRejected</code> 分别加入两个函数数组 <code>onFulfilledCallbacks</code> 、 <code>onRejectedCallbacks</code> ，当异步调用 <code>resolve</code> 和 <code>reject</code> 时，将两个数组中绑定的事件循环执行。</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义状态常量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> FULFILLED = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> REJECTED = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义MyPromise模拟Promise</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;func&#125;</span> </span>executor 接收函数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyPromise</span>(<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.state = PENDING; <span class=\"comment\">// 默认状态为 pending</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.value = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.reason = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 定义成功失败的函数数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.onFulfilledCallbacks = [];</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.onRejectedCallbacks = [];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 定义成功回调</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === PENDING) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.state = FULFILLED;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.onFulfilledCallbacks.forEach(<span class=\"function\"><span class=\"params\">func</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\tfunc();</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 定义失败回调</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> reject = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === PENDING) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.state = REJECTED;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.onRejectedCallbacks.forEach(<span class=\"function\"><span class=\"params\">func</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\tfunc();</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\texecutor(resolve, reject);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (reason) &#123;</span><br><span class=\"line\">\t\treject(reason);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyPromise.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.state) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> FULFILLED:</span><br><span class=\"line\">\t\t\tonFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> REJECTED:</span><br><span class=\"line\">\t\t\tonFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> PENDING:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.onFulfilledCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\tonFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.onRejectedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\tonRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"then方法异步调用\"><a href=\"#then方法异步调用\" class=\"headerlink\" title=\"then方法异步调用\"></a>then方法异步调用</h2><p>如下面的代码：输入顺序是：1、2、ConardLi</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'ConardLi'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>虽然 <code>resolve</code> 是同步执行的，我们必须保证 <code>then</code> 是异步调用的，我们用 <code>setTimeout</code> 来模拟异步调用（并不能实现微任务和宏任务的执行机制，只是保证异步调用）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\">MyPromise.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onFulfilled != <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">\t\tonFulfilled = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onRejected != <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">\t\tonRejected = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> reason;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.state) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> FULFILLED:</span><br><span class=\"line\">\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\tonFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">\t\t\t&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> REJECTED:</span><br><span class=\"line\">\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\tonRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">\t\t\t&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> PENDING:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.onFulfilledCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tonFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">\t\t\t\t&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.onRejectedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tonRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">\t\t\t\t&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"then方法链式调用\"><a href=\"#then方法链式调用\" class=\"headerlink\" title=\"then方法链式调用\"></a>then方法链式调用</h2><p>保证链式调用，即 <code>then</code> 方法中要返回一个新的 <code>promise</code> ，并将 <code>then</code> 方法的返回值进行 <code>resolve</code> 。</p>\n<p><em>注意：这种实现并不能保证 <code>then</code> 方法中返回一个新的 <code>promise</code> ，只能保证链式调用</em>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\">MyPromise.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onFulfilled != <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">\t\tonFulfilled = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onRejected != <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">\t\tonRejected = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> reason;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建一个新的MyPromise对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> promise2 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.state) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> FULFILLED:</span><br><span class=\"line\">\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">const</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">\t\t\t\t\t\tresolve(x);</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (reason) &#123;</span><br><span class=\"line\">\t\t\t\t\t\treject(reason);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> REJECTED:</span><br><span class=\"line\">\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">const</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">\t\t\t\t\t\tresolve(x);</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (reason) &#123;</span><br><span class=\"line\">\t\t\t\t\t\treject(reason);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> PENDING:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.onFulfilledCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">const</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">\t\t\t\t\t\t\tresolve(x);</span><br><span class=\"line\">\t\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (reason) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\treject(reason);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.onRejectedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">const</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">\t\t\t\t\t\t\tresolve(x);</span><br><span class=\"line\">\t\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (reason) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\treject(reason);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> promise2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"catch方法\"><a href=\"#catch方法\" class=\"headerlink\" title=\"catch方法\"></a>catch方法</h2><p>若上面没有定义 <code>reject</code> 方法，所有的异常会走向 <code>catch</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">MyPromise.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onRejected</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>, onRejected);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"finally方法\"><a href=\"#finally方法\" class=\"headerlink\" title=\"finally方法\"></a>finally方法</h2><p>不管是 <code>resolve</code> 还是 <code>reject</code> 都会调用 <code>finally</code> 。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">MyPromise.prototype.finally = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\tfn();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t&#125;, reason =&gt; &#123;</span><br><span class=\"line\">\t\tfn();</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> reason;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve\"></a>Promise.resolve</h2><p><code>Promise.resolve</code> 用来生成一个直接处于 <code>FULFILLED</code> 状态的 <code>Promise</code> 。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\">MyPromise.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(value);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject\"></a>Promise.reject</h2><p><code>Promise.reject</code> 用来生成一个直接处于 <code>REJECTED</code> 状态的 <code>Promise</code> 。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\">MyPromise.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    reject(reason);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"all方法\"><a href=\"#all方法\" class=\"headerlink\" title=\"all方法\"></a>all方法</h2><p>接受一个 <code>promise</code> 数组，当所有 <code>promise</code> 状态 <code>resolve</code> 后，执行 <code>resolve</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\">MyPromise.all = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (promises.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tresolve([]);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">\t\t\t\tpromises[i].then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tresult[i] = data;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (++index === promises.length) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tresolve(result);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;, err =&gt; &#123;</span><br><span class=\"line\">\t\t\t\t\treject(err);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"race方法\"><a href=\"#race方法\" class=\"headerlink\" title=\"race方法\"></a>race方法</h2><p>接受一个 <code>promise</code> 数组，当有一个 <code>promise</code> 状态 <code>resolve</code> 后，执行 <code>resolve</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js代码</span></span><br><span class=\"line\">MyPromise.race = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (promises.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tresolve();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">\t\t\t\tpromises[i].then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tresolve(data);</span><br><span class=\"line\">\t\t\t\t&#125;, err =&gt; &#123;</span><br><span class=\"line\">\t\t\t\t\treject(err);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>如此一个自定义的 <code>promise</code> 就实现了，怎么样学回来吗？</p>\n"},{"title":"自己动手实现系列 ---- Array.prototype.reduce","date":"2020-03-24T04:40:22.000Z","_content":"# 原版\n``` js\nArray.prototype.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])\n```\n\n# 自己动手\n``` js\nArray.prototype.myReduce = function(callback, initialValue) {\n  let accumulator = initialValue ? initialValue : this[0]; // 第一次使用判断时候有initialValue参数，如果有用他，没有用this[0]，这里this指的是传入的数组，this[0]就是数组第一项\n  for (let i = initialValue ? 0 : 1; i < this.length; i++) { // 如果有初始值从0开始循环，不然从1开始\n    let _this = this; // 保留当前this指向\n    accumulator = callback(accumulator, this[i], i, _this); // \n  }\n  return accumulator; // 返回迭代器的终值\n};\n```\n试用一下\n``` js\nlet arr = [1, 2, 3, 4];\nlet sum = arr.myReduce((acc, val) => {\n  acc += val;\n  return acc;\n}, 5);\n\nconsole.log(sum); // 15\n```","source":"_posts/do-it-yourselfery-reduce.md","raw":"---\ntitle: 自己动手实现系列 ---- Array.prototype.reduce\ndate: 2020-03-24 12:40:22\ncategories: \n\t- 源码原理\n\t- 自己动手实现系列\ntags: \n\t- 自己动手实现系列\n---\n# 原版\n``` js\nArray.prototype.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])\n```\n\n# 自己动手\n``` js\nArray.prototype.myReduce = function(callback, initialValue) {\n  let accumulator = initialValue ? initialValue : this[0]; // 第一次使用判断时候有initialValue参数，如果有用他，没有用this[0]，这里this指的是传入的数组，this[0]就是数组第一项\n  for (let i = initialValue ? 0 : 1; i < this.length; i++) { // 如果有初始值从0开始循环，不然从1开始\n    let _this = this; // 保留当前this指向\n    accumulator = callback(accumulator, this[i], i, _this); // \n  }\n  return accumulator; // 返回迭代器的终值\n};\n```\n试用一下\n``` js\nlet arr = [1, 2, 3, 4];\nlet sum = arr.myReduce((acc, val) => {\n  acc += val;\n  return acc;\n}, 5);\n\nconsole.log(sum); // 15\n```","slug":"do-it-yourselfery-reduce","published":1,"updated":"2020-04-02T03:20:12.468Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs4i005kooa6c9gqdm39","content":"<h1 id=\"原版\"><a href=\"#原版\" class=\"headerlink\" title=\"原版\"></a>原版</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"自己动手\"><a href=\"#自己动手\" class=\"headerlink\" title=\"自己动手\"></a>自己动手</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myReduce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, initialValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> accumulator = initialValue ? initialValue : <span class=\"keyword\">this</span>[<span class=\"number\">0</span>]; <span class=\"comment\">// 第一次使用判断时候有initialValue参数，如果有用他，没有用this[0]，这里this指的是传入的数组，this[0]就是数组第一项</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = initialValue ? <span class=\"number\">0</span> : <span class=\"number\">1</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123; <span class=\"comment\">// 如果有初始值从0开始循环，不然从1开始</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> _this = <span class=\"keyword\">this</span>; <span class=\"comment\">// 保留当前this指向</span></span><br><span class=\"line\">    accumulator = callback(accumulator, <span class=\"keyword\">this</span>[i], i, _this); <span class=\"comment\">// </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> accumulator; <span class=\"comment\">// 返回迭代器的终值</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>试用一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = arr.myReduce(<span class=\"function\">(<span class=\"params\">acc, val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  acc += val;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> acc;</span><br><span class=\"line\">&#125;, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum); <span class=\"comment\">// 15</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"原版\"><a href=\"#原版\" class=\"headerlink\" title=\"原版\"></a>原版</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"自己动手\"><a href=\"#自己动手\" class=\"headerlink\" title=\"自己动手\"></a>自己动手</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myReduce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, initialValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> accumulator = initialValue ? initialValue : <span class=\"keyword\">this</span>[<span class=\"number\">0</span>]; <span class=\"comment\">// 第一次使用判断时候有initialValue参数，如果有用他，没有用this[0]，这里this指的是传入的数组，this[0]就是数组第一项</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = initialValue ? <span class=\"number\">0</span> : <span class=\"number\">1</span>; i &lt; <span class=\"keyword\">this</span>.length; i++) &#123; <span class=\"comment\">// 如果有初始值从0开始循环，不然从1开始</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> _this = <span class=\"keyword\">this</span>; <span class=\"comment\">// 保留当前this指向</span></span><br><span class=\"line\">    accumulator = callback(accumulator, <span class=\"keyword\">this</span>[i], i, _this); <span class=\"comment\">// </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> accumulator; <span class=\"comment\">// 返回迭代器的终值</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>试用一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = arr.myReduce(<span class=\"function\">(<span class=\"params\">acc, val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  acc += val;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> acc;</span><br><span class=\"line\">&#125;, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum); <span class=\"comment\">// 15</span></span><br></pre></td></tr></table></figure>"},{"title":"自己动手实现系列 ---- 事件代理","date":"2020-03-24T14:40:22.000Z","_content":"# 实现\n\n``` js\n<ul id=\"color-list\">\n  <li>red</li>\n  <li>yellow</li>\n  <li>blue</li>\n  <li>green</li>\n  <li>black</li>\n  <li>white</li>\n</ul>\n\n<script>\n  (function () {\n    var color_list = document.getElementById('color-list');\n    color_list.addEventListener('click', showColor, true);\n    function showColor(e) {\n      var x = e.target;\n      if (x.nodeName.toLowerCase() === 'li') {\n        alert(x.innerHTML);\n      }\n    }\n  })();\n</script>\n```","source":"_posts/do-it-yourselfery-事件代理.md","raw":"---\ntitle: 自己动手实现系列 ---- 事件代理\ndate: 2020-03-24 22:40:22\ncategories: \n\t- 源码原理\n\t- 自己动手实现系列\ntags: \n\t- 自己动手实现系列\n---\n# 实现\n\n``` js\n<ul id=\"color-list\">\n  <li>red</li>\n  <li>yellow</li>\n  <li>blue</li>\n  <li>green</li>\n  <li>black</li>\n  <li>white</li>\n</ul>\n\n<script>\n  (function () {\n    var color_list = document.getElementById('color-list');\n    color_list.addEventListener('click', showColor, true);\n    function showColor(e) {\n      var x = e.target;\n      if (x.nodeName.toLowerCase() === 'li') {\n        alert(x.innerHTML);\n      }\n    }\n  })();\n</script>\n```","slug":"do-it-yourselfery-事件代理","published":1,"updated":"2020-04-02T03:20:12.468Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs4k005nooa60pem7zwf","content":"<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul id=<span class=\"string\">\"color-list\"</span>&gt;</span><br><span class=\"line\">  &lt;li&gt;red&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;yellow&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li&gt;blue&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;green&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li&gt;black&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;white&lt;/</span>li&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  (function () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    var color_list = document.getElementById('color-list');</span></span><br><span class=\"line\"><span class=\"regexp\">    color_list.addEventListener('click', showColor, true);</span></span><br><span class=\"line\"><span class=\"regexp\">    function showColor(e) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      var x = e.target;</span></span><br><span class=\"line\"><span class=\"regexp\">      if (x.nodeName.toLowerCase() === 'li') &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        alert(x.innerHTML);</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;)();</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul id=<span class=\"string\">\"color-list\"</span>&gt;</span><br><span class=\"line\">  &lt;li&gt;red&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;yellow&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li&gt;blue&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;green&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li&gt;black&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;white&lt;/</span>li&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  (function () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    var color_list = document.getElementById('color-list');</span></span><br><span class=\"line\"><span class=\"regexp\">    color_list.addEventListener('click', showColor, true);</span></span><br><span class=\"line\"><span class=\"regexp\">    function showColor(e) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      var x = e.target;</span></span><br><span class=\"line\"><span class=\"regexp\">      if (x.nodeName.toLowerCase() === 'li') &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        alert(x.innerHTML);</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;)();</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"自己动手实现系列 ---- Vue双向绑定","date":"2020-03-24T15:40:22.000Z","_content":"# Vue 2.x 的 `Object.defineProperty` 版本\n\n``` js\n// 数据\nconst data = {\n  text: 'default'\n};\nconst input = document.getElementById('input');\nconst span = document.getElementById('span');\n\n// 数据劫持\nObject.defineProperty(data, 'text', {\n  // 数据变化 —> 修改视图\n  set(newVal) {\n    input.value = newVal;\n    span.innerHTML = newVal;\n  }\n});\n\n// 视图更改 --> 数据变化\ninput.addEventListener('keyup', function(e) {\n  data.text = e.target.value;\n});\n```\n\n# Vue 3.x 的 `proxy` 版本\n``` js\n// 数据\nconst data = {\n  text: 'default'\n};\nconst input = document.getElementById('input');\nconst span = document.getElementById('span');\n\n// 数据劫持\nconst handler = {\n  set(target, key, value) {\n    target[key] = value;\n    // 数据变化 —> 修改视图\n    input.value = value;\n    span.innerHTML = value;\n    return value;\n  }\n};\nconst proxy = new Proxy(data, handler);\n\n// 视图更改 --> 数据变化\ninput.addEventListener('keyup', function(e) {\n  proxy.text = e.target.value;\n});\n```","source":"_posts/do-it-yourselfery-双向绑定.md","raw":"---\ntitle: 自己动手实现系列 ---- Vue双向绑定\ndate: 2020-03-24 23:40:22\ncategories: \n\t- 源码原理\n\t- 自己动手实现系列\ntags: \n\t- 自己动手实现系列\n---\n# Vue 2.x 的 `Object.defineProperty` 版本\n\n``` js\n// 数据\nconst data = {\n  text: 'default'\n};\nconst input = document.getElementById('input');\nconst span = document.getElementById('span');\n\n// 数据劫持\nObject.defineProperty(data, 'text', {\n  // 数据变化 —> 修改视图\n  set(newVal) {\n    input.value = newVal;\n    span.innerHTML = newVal;\n  }\n});\n\n// 视图更改 --> 数据变化\ninput.addEventListener('keyup', function(e) {\n  data.text = e.target.value;\n});\n```\n\n# Vue 3.x 的 `proxy` 版本\n``` js\n// 数据\nconst data = {\n  text: 'default'\n};\nconst input = document.getElementById('input');\nconst span = document.getElementById('span');\n\n// 数据劫持\nconst handler = {\n  set(target, key, value) {\n    target[key] = value;\n    // 数据变化 —> 修改视图\n    input.value = value;\n    span.innerHTML = value;\n    return value;\n  }\n};\nconst proxy = new Proxy(data, handler);\n\n// 视图更改 --> 数据变化\ninput.addEventListener('keyup', function(e) {\n  proxy.text = e.target.value;\n});\n```","slug":"do-it-yourselfery-双向绑定","published":1,"updated":"2020-04-02T03:20:12.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs4l005qooa678b78hv3","content":"<h1 id=\"Vue-2-x-的-Object-defineProperty-版本\"><a href=\"#Vue-2-x-的-Object-defineProperty-版本\" class=\"headerlink\" title=\"Vue 2.x 的 Object.defineProperty 版本\"></a>Vue 2.x 的 <code>Object.defineProperty</code> 版本</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">  text: <span class=\"string\">'default'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> input = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'input'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> span = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'span'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数据劫持</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(data, <span class=\"string\">'text'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 数据变化 —&gt; 修改视图</span></span><br><span class=\"line\">  <span class=\"keyword\">set</span>(newVal) &#123;</span><br><span class=\"line\">    input.value = newVal;</span><br><span class=\"line\">    span.innerHTML = newVal;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 视图更改 --&gt; 数据变化</span></span><br><span class=\"line\">input.addEventListener(<span class=\"string\">'keyup'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  data.text = e.target.value;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Vue-3-x-的-proxy-版本\"><a href=\"#Vue-3-x-的-proxy-版本\" class=\"headerlink\" title=\"Vue 3.x 的 proxy 版本\"></a>Vue 3.x 的 <code>proxy</code> 版本</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">  text: <span class=\"string\">'default'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> input = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'input'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> span = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'span'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数据劫持</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(target, key, value) &#123;</span><br><span class=\"line\">    target[key] = value;</span><br><span class=\"line\">    <span class=\"comment\">// 数据变化 —&gt; 修改视图</span></span><br><span class=\"line\">    input.value = value;</span><br><span class=\"line\">    span.innerHTML = value;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(data, handler);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 视图更改 --&gt; 数据变化</span></span><br><span class=\"line\">input.addEventListener(<span class=\"string\">'keyup'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  proxy.text = e.target.value;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vue-2-x-的-Object-defineProperty-版本\"><a href=\"#Vue-2-x-的-Object-defineProperty-版本\" class=\"headerlink\" title=\"Vue 2.x 的 Object.defineProperty 版本\"></a>Vue 2.x 的 <code>Object.defineProperty</code> 版本</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">  text: <span class=\"string\">'default'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> input = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'input'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> span = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'span'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数据劫持</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(data, <span class=\"string\">'text'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 数据变化 —&gt; 修改视图</span></span><br><span class=\"line\">  <span class=\"keyword\">set</span>(newVal) &#123;</span><br><span class=\"line\">    input.value = newVal;</span><br><span class=\"line\">    span.innerHTML = newVal;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 视图更改 --&gt; 数据变化</span></span><br><span class=\"line\">input.addEventListener(<span class=\"string\">'keyup'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  data.text = e.target.value;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Vue-3-x-的-proxy-版本\"><a href=\"#Vue-3-x-的-proxy-版本\" class=\"headerlink\" title=\"Vue 3.x 的 proxy 版本\"></a>Vue 3.x 的 <code>proxy</code> 版本</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">  text: <span class=\"string\">'default'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> input = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'input'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> span = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'span'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数据劫持</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(target, key, value) &#123;</span><br><span class=\"line\">    target[key] = value;</span><br><span class=\"line\">    <span class=\"comment\">// 数据变化 —&gt; 修改视图</span></span><br><span class=\"line\">    input.value = value;</span><br><span class=\"line\">    span.innerHTML = value;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(data, handler);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 视图更改 --&gt; 数据变化</span></span><br><span class=\"line\">input.addEventListener(<span class=\"string\">'keyup'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  proxy.text = e.target.value;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"给我的Hexo博客添加文章内容搜索功能","date":"2020-01-13T06:50:21.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n今年我下定决心一定要好好地写博客，完善博客的内容，所以最近把原来记在各种笔记中的文章内容都一一转移到了博客，内容一多想找一篇文章时就变得很麻烦，我得去归档中或者分类中一篇篇的找，所以我觉得是时候该给我的博客添加搜索的功能了，我看了博客的config文件，其中并没有搜索相关的配置，我又看了主题的配置文件，这下让我找到了，有个local_search的选项，于是我就开始了博客搜索的研究。\n<!-- more -->\n## 主题里的搜索配置\n这段代码是这样的，实际上我只需要把 `enable` 从 `false` 变成 `true` 就好了\n``` yml\n\n# Local Search\n# Dependencies: https://github.com/theme-next/hexo-generator-searchdb\nlocal_search:\n  enable: true\n  # If auto, trigger search by changing input.\n  # If manual, trigger search by pressing enter key or search button.\n  trigger: auto\n  # Show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n  # Unescape html strings to the readable one.\n  unescape: false\n  # Preload the search data when the page loads.\n  preload: false\n```\n然后我又看了一下上面提供的依赖地址，这里还需要做两步，一个是安装搜索的依赖\n``` js\nnpm install hexo-generator-searchdb\n```\n接着就是在博客系统的配置最下方加入下面这段话\n``` yml\nsearch:\n  path: search.xml\n  field: post\n  content: true\n  format: html\n```\n到这里如果没什么问题，那么搜索功能就加上了，怎么样简单吧。如果你遇到什么问题，可以到上面的地址看一下，上面有详细的说明，我这里就不贴代码了。\n\n# 最后\n希望大家都能丰富自己的技术博客，拥有属于自己的一片技术天地。","source":"_posts/hexo-search.md","raw":"---\ntitle: 给我的Hexo博客添加文章内容搜索功能\ndate: 2020-01-13 14:50:21\ncategories: \n\t- 博客技巧\ntags: \n\t- Hexo\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n今年我下定决心一定要好好地写博客，完善博客的内容，所以最近把原来记在各种笔记中的文章内容都一一转移到了博客，内容一多想找一篇文章时就变得很麻烦，我得去归档中或者分类中一篇篇的找，所以我觉得是时候该给我的博客添加搜索的功能了，我看了博客的config文件，其中并没有搜索相关的配置，我又看了主题的配置文件，这下让我找到了，有个local_search的选项，于是我就开始了博客搜索的研究。\n<!-- more -->\n## 主题里的搜索配置\n这段代码是这样的，实际上我只需要把 `enable` 从 `false` 变成 `true` 就好了\n``` yml\n\n# Local Search\n# Dependencies: https://github.com/theme-next/hexo-generator-searchdb\nlocal_search:\n  enable: true\n  # If auto, trigger search by changing input.\n  # If manual, trigger search by pressing enter key or search button.\n  trigger: auto\n  # Show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n  # Unescape html strings to the readable one.\n  unescape: false\n  # Preload the search data when the page loads.\n  preload: false\n```\n然后我又看了一下上面提供的依赖地址，这里还需要做两步，一个是安装搜索的依赖\n``` js\nnpm install hexo-generator-searchdb\n```\n接着就是在博客系统的配置最下方加入下面这段话\n``` yml\nsearch:\n  path: search.xml\n  field: post\n  content: true\n  format: html\n```\n到这里如果没什么问题，那么搜索功能就加上了，怎么样简单吧。如果你遇到什么问题，可以到上面的地址看一下，上面有详细的说明，我这里就不贴代码了。\n\n# 最后\n希望大家都能丰富自己的技术博客，拥有属于自己的一片技术天地。","slug":"hexo-search","published":1,"updated":"2020-04-02T03:20:12.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs4o005uooa68e4f8nqa","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>今年我下定决心一定要好好地写博客，完善博客的内容，所以最近把原来记在各种笔记中的文章内容都一一转移到了博客，内容一多想找一篇文章时就变得很麻烦，我得去归档中或者分类中一篇篇的找，所以我觉得是时候该给我的博客添加搜索的功能了，我看了博客的config文件，其中并没有搜索相关的配置，我又看了主题的配置文件，这下让我找到了，有个local_search的选项，于是我就开始了博客搜索的研究。</p>\n<a id=\"more\"></a>\n<h2 id=\"主题里的搜索配置\"><a href=\"#主题里的搜索配置\" class=\"headerlink\" title=\"主题里的搜索配置\"></a>主题里的搜索配置</h2><p>这段代码是这样的，实际上我只需要把 <code>enable</code> 从 <code>false</code> 变成 <code>true</code> 就好了</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Local Search</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class=\"line\"><span class=\"attr\">local_search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># If auto, trigger search by changing input.</span></span><br><span class=\"line\">  <span class=\"comment\"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class=\"line\">  <span class=\"attr\">trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># Show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\">  <span class=\"attr\">top_n_per_article:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\"># Unescape html strings to the readable one.</span></span><br><span class=\"line\">  <span class=\"attr\">unescape:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Preload the search data when the page loads.</span></span><br><span class=\"line\">  <span class=\"attr\">preload:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>然后我又看了一下上面提供的依赖地址，这里还需要做两步，一个是安装搜索的依赖</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>\n<p>接着就是在博客系统的配置最下方加入下面这段话</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">format:</span> <span class=\"string\">html</span></span><br></pre></td></tr></table></figure>\n<p>到这里如果没什么问题，那么搜索功能就加上了，怎么样简单吧。如果你遇到什么问题，可以到上面的地址看一下，上面有详细的说明，我这里就不贴代码了。</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>希望大家都能丰富自己的技术博客，拥有属于自己的一片技术天地。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>今年我下定决心一定要好好地写博客，完善博客的内容，所以最近把原来记在各种笔记中的文章内容都一一转移到了博客，内容一多想找一篇文章时就变得很麻烦，我得去归档中或者分类中一篇篇的找，所以我觉得是时候该给我的博客添加搜索的功能了，我看了博客的config文件，其中并没有搜索相关的配置，我又看了主题的配置文件，这下让我找到了，有个local_search的选项，于是我就开始了博客搜索的研究。</p>","more":"<h2 id=\"主题里的搜索配置\"><a href=\"#主题里的搜索配置\" class=\"headerlink\" title=\"主题里的搜索配置\"></a>主题里的搜索配置</h2><p>这段代码是这样的，实际上我只需要把 <code>enable</code> 从 <code>false</code> 变成 <code>true</code> 就好了</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Local Search</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class=\"line\"><span class=\"attr\">local_search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># If auto, trigger search by changing input.</span></span><br><span class=\"line\">  <span class=\"comment\"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class=\"line\">  <span class=\"attr\">trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># Show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\">  <span class=\"attr\">top_n_per_article:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\"># Unescape html strings to the readable one.</span></span><br><span class=\"line\">  <span class=\"attr\">unescape:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Preload the search data when the page loads.</span></span><br><span class=\"line\">  <span class=\"attr\">preload:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>然后我又看了一下上面提供的依赖地址，这里还需要做两步，一个是安装搜索的依赖</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>\n<p>接着就是在博客系统的配置最下方加入下面这段话</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">format:</span> <span class=\"string\">html</span></span><br></pre></td></tr></table></figure>\n<p>到这里如果没什么问题，那么搜索功能就加上了，怎么样简单吧。如果你遇到什么问题，可以到上面的地址看一下，上面有详细的说明，我这里就不贴代码了。</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>希望大家都能丰富自己的技术博客，拥有属于自己的一片技术天地。</p>"},{"title":"基于 GitLab CI/CD 的自动化构建、发布实践","date":"2019-12-31T08:22:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n公司于去年开始代码版本管理从SVN迁移到了Git，采用的GitLab程序做管理，但是自动构建采用的是Jekins，最近在给博客做自动构建的时候了解到的了Github的Actions，我就在想，是不是GitLab也有自己的自动构建能力，因为之前在参与项目的时候也看到GitLab上有CI/CD相关的内容，但是没有仔细的去看，趁这次机会就一起研究一下。\n<!-- more -->\n\n## 说一下目前公司的构建和发布流程\n1、***手动构建时代***：开发人员在测试需要验证环境的时候，在本地执行打包构建命令，然后将包放到服务器上，整个过程30分钟左右。\n2、***自动构建时代***目前公司的构建是要在Jekins中，首先是在Jekins中配置拉去代码的仓库地址和代码分支，写好构建的脚本，在需要构建时候进行构建，一次配置后构建全程只需要点一下构建时间长度跟项目代码需要下载的依赖时间有关，通常不超过5分钟，需要注意的是要在构建前同步一下代码版本\n***划重点***\n在原来的手动构建时代，代码是以开发本地的代码为准，代码版本很可能跟最新的代码有出入，而且依赖于开发的电脑设备，如果他请假了，那么就GG了；另外通过一次配置后整个构建的时间从30分钟降到了5分钟，一次节省25分钟，那么一个项目周期下节省的工时就非常可观了。\n\n## 为什要使用GitLab CI/CD进行构建\n这里实际上没有太大的必要将公司的Jekins替换为GitLab的CI/CD进行自动构建，但是呢，因为公司本身采用的就是GitLab作为代码仓库管理代码，它本身又提供了CI/CD的功能，本着多学一点是一点的原则，我就花点时间研究一下它。\n\n## 什么是 GitLab CI/CD\n下面我就要开始把我了解到的GitLab CI/CD的使用方式说一下，从零开始搭建GitLab CI/CD。\n### 1. 简要介绍 GitLab CI/CD\n代码提交到GitLab上后，满足指定条件之后会触发pipeline进行自动化构建、发布。\n***pipeline***可以理解为构建任务，里面可以包含多个流程，比如下载依赖、运行测试、编译、部署。\n那么pipeline什么时候触发，分为几个流程，每个流程做什么，需要在项目的***.gitlab-ci.yml***文件中的定义。\n这点呢跟Jekins里面实际上做的也是同样的事，在线下开发做构建时候也是做这些事，只是通过脚本之后这些事都可以交给计算机做了。\n\n### 2. GitLab CI/CD 整体流程\n- GitLab CI/CD 的 pipeline 具体流程和操作在 .gitlab-ci.yml 文件中申明。\n- 触发 pipeline 后，由 GitLab Runner 根据  .gitlab-ci.yml 文件运行。\n- 运行结束后将返回至 GitLab 系统。\n\n#### 2.1 .gitlab-ci.yml 文件\n.gitlab-ci.yml 文件是一个申明式文件，用于定义 GitLab CI/CD 流程分为几个阶段，每个阶段分别干什么。\n\n关于具体干什么、怎么干，主要使用命令行和脚本操作，稍后会在实践部分做细致的介绍。\n\n如果涉及一些逻辑的话，会使用脚本（shell）。\n\n#### 2.2 GitLab Runner\nGitLab Runner 是 CI 的执行环境，负责执行 gitlab-ci.yml 文件，并将结果返回给 GitLab 系统。Runner 具体可以有多种形式，docker、虚拟机或 shell，在注册 runner 时选定方式。实际上就是运行脚本的容器环境。\n\n## 3. 从零搭建一个 GitLab CI/CD 的基本步骤\n上面介绍了一些GitLab构建的主要环节和名词概念，接下来我将给大家介绍一下如何从零搭建一个GitLab CI/CD，一起体验一把GitLab CI/CD的整个流程。\n### 3.1 新建一个 GitLab 项目\n我这用的是公司的自有仓库，各位可以在开源GitLab上创建自己的项目\n### 3.2 配置Runner\nGitLab 提供了一些共享的Runner，我们可以不处理Runner，这里可以理解为，它提供了一些现成的脚本运行环境，不需要我们从头配置运行环境，so sweet～\n### 3.3 新建 .gitlab-ci.yml 文件\n1. 拉取项目到本地\n2. 在项目根目录新建 .gitlab-ci.yml 文件\n3. 提交 .gitlab-ci.yml 文件\n4. 在项目的 CI/CD 中，可以看到 CI/CD 的运行情况\n这个过程应该没人不会吧，没技术含量的我们简单一提，实际上最重要的就是.gitlab-ci.yml文件中要怎么去写，示例说明文件如下：\n```\n// .gitlab-ci.yml 示例说明\n\nimage: node\n# 定义 stages\nstages:\n  - build\n  - test\n# 定义 job\n build 阶段:\n  stage: build\n  script:\n    - echo \"build stage\"\n# 定义 job\n发布到测试环境:\n  stage: test\n  script:\n    - echo \"test stage\"\n```\n\n## GitLab CI/CD 实践\n在实践部分，这里着重介绍 GitLab Runner 和 .gitlab-ci.yml 文件，主要的流程及遇到的问题和解决方案包含在 .gitlab-ci.yml 文件的介绍过程中。\n\n### 1. GitLab Runner\nGitLab Runner 一般由 GitLab 系统维护者管理，配置后，同类项目可以共享，一般不需要进行修改。这里不进行具体介绍，主要介绍下使用过程中的注意点，具体使用可参考 GitLab Runner 文档。（https://docs.gitlab.com.cn/runner/）\n\n#### 1.1 GitLab Runner 使用流程\n1. 下载 GitLab Runner\n2. 注册 GitLab Runner\n3. 使用 GitLab Runner\n\n#### 1.2 GitLab Runner 注意点\n在使用 Runner 的过程中，我们遇到了一些问题，下面简要介绍问题及解决方案，不做具体介绍。\n\n##### 1.2.1 配置 Runner 后，push 代码，出发了 pipeline，但一直处于Pending状态\n\n错误信息是：\n```\nThis job is stuck, because you don’t have any active runners that can run this job\n```\n注册的 Runner，默认情况下，不会运用没有 `tag` 的 job，可以在 Settings→CI/CD→Runners Settings，去掉 Runner untagged jobs 即可。\n\n##### 1.2.2 GitLab Runner 的类型\n有三种类型的 Runner，\n- Shared Runners 在整个系统所有项目都可以使用\n- Group Runners 注册后，同一个项目下的不同代码库共享\n- Specific Runners 需要给项目单独配置，使用 Specific Runners 注意考虑是否需要关闭 Shared Runners、和 Group Runners。\n\n##### 1.2.3 在 GitLab CI 中使用 docker\n如果部署使用的是docker方式，那么在部署时需要在 GitLab CI/CD 中使用 docker 打镜像发布。可以参考 Building Docker images with GitLab CI/CD（https://docs.gitlab.com/ee/ci/docker/using_docker_build.html）\n\n##### 1.2.4 在 GitLab CI/CD 中访问 Runner 宿主机目录\n我们使用的 Runner executor 是 Dokcer，在 Dokcer volumes 中配置需要访问的目录。\n\n### 2. .gitlab-ci.yml 文件\n.gitlab-ci.yml 详细的用法，可参考 GitLab CI/CD Pipeline Configuration Reference 文档（https://docs.gitlab.com/ee/ci/yaml/README.html）\n\n#### 2.1 .gitlab-ci.yml 文件结构介绍\n- `image` 是执行 CI/CD 依赖的 Docker 基础镜像。镜像中有 Node、Yarn、Dalp（内部 rsync 工具）。\n- `stages` 中定义了我们的 pipeline 分为以下几个过程:\n  1. 下载依赖阶段 pre_build\n  2. 构建阶段 build\n  3. 发布阶段 deploy\n- `stage` 申明当前的阶段，在 stages 中使用\n- `variables` 用于定义变量\n- `before_script` 执行 script 前的操作\n- `script` 当前 stage 需要执行的操作\n- `changes` 指定 stage 触发条件\n- `refs` 指定 stage 触发的分支\n\n下面具体看一下我们这个.gitlab-ci.yml文件实际的样子\n```\nimage: registry.thunisoft.com/gitlab-ci/node:v1.8\n\nvariables:\n  # $CI_PROJECT_PATH  ：项目id,用于项目唯一区分本项目与其它项目\n  # $CI_PROJECT_DIR   ：本地项目路径\n  # $PROCESS_PATH     ：临时文件目录(包括日志和一些临时文件)\n  NODE_MODULES_PATH: /runner-cache/frontend/$CI_PROJECT_PATH/$CI_BUILD_REF_NAME/node_modules\n\nstages:\n  - pre_build # 下载依赖阶段\n  - build # 构建阶段\n  - deploy # 测试发布阶段\n\n# 下载依赖:\n  before_script: # 下载依赖前准备脚本\n    # 无 node_modules 文件时，新建 node_modules 文件\n    - /bin/bash ./ci/mkdir.sh $NODE_MODULES_PATH\n    # 软链 node_modules 到宿主机\n    - ln -s $NODE_MODULES_PATH .\n    - cd webpack@lixuguang-project\n\n  stage: pre_build\n  script:\n    - echo \"npm install\"\n    - npm install  --network-timeout 60000 # 安装依赖\n  only:\n    changes:\n      - webpack@lixuguang-project/package.json\n    refs:\n      - master\n      - ci\n\n# 构建:\n  stage: build\n  variables:\n    CI_COMMIT_BEFORE_SHA_PATH: /mnt/gv0/gitlab-runner-cache/$CI_PROJECT_PATH\n    CI_COMMIT_BEFORE_SHA_FILE_NAME: $CI_BUILD_REF_NAME.sh\n    CI_COMMIT_BEFORE_SHA_FILE: /mnt/gv0/gitlab-runner-cache/$CI_PROJECT_PATH/$CI_BUILD_REF_NAME.sh\n  before_script:\n    # 建存此次 CI CI_COMMIT_SHA 的文件\n    - /bin/bash ./ci/mkfile.sh $CI_COMMIT_BEFORE_SHA_PATH $CI_COMMIT_BEFORE_SHA_FILE_NAME\n    # 软链 node_modules 到宿主机\n    - ln -s $NODE_MODULES_PATH .\n    - rm -rf web/share/*\n    - cd webpack@lixuguang-projects\n  script:\n    # 缓存上次ci\n    - source $CI_COMMIT_BEFORE_SHA_FILE\n    - echo \"CI_COMMIT_BEFORE_SHA=$CI_COMMIT_SHA\" > $CI_COMMIT_BEFORE_SHA_FILE\n    - python3 ../ci/build.py   # 编译\n    - /bin/bash ../ci/commit.sh   # 提交编译结果\n  only:\n    changes:\n      - www_src/**/*\n    refs:\n      - master\n      - ci\n\n# 测试发布:\n  stage: deploy\n  variables:\n    PROCESS_PATH: /mnt/gv0/gitlab-runner-cache/deploy/process/$CI_JOB_ID  # 目录不要换，用于日志服务器获取日志展示\n  script:\n    - mkdir $PROCESS_PATH # 建立发布临时路径，存放发布配置中间文件和结果日志用\n    - dplt $CI_PROJECT_DIR/.deploy_test.yml $CI_PROJECT_PATH $CI_PROJECT_DIR/web/ $PROCESS_PATH\n    # dplt 发布yml配置\n    - echo \"发布完成，错误日志查看http://172.18.78.11:8089/log?path=\"$PROCESS_PATH\n    - echo `ls $PROCESS_PATH/*.log`\n  only:\n    changes:\n      - web/**/*\n    refs:\n      - test\n```\n\n#### 2.2 下载依赖阶段（pre_build stage）\n下载依赖的方案是：当 package.json 文件发生变化时，触发 pre_build stage，执行 npm install。下载的 node_modules 放在宿主机下，执行时通过软链获取依赖。\n\n#### 2.3 构建阶段（build stage）\n构建阶段，分为 3 部分\n1. diff 文件变化\n2. 前端 build\n3. commit build 后结果\n\n##### 2.3.1 diff 文件变化\n每次 CI 时，将当前 CI commit SHA（CI_COMMIT_SHA 变量）存在文件中，存为 CI_COMMIT_BEFORE_SHA 变量， diff 时，git diff 当前 CI 与上次 commit SHA 的变化。\n\n##### 2.3.2 前端 build\n根据 git diff 的变化情况，确定本次需要打包的内容。\n\n##### 2.3.3 commit 打包后生成的 HTML 文件\n在 GitLab CI/CD 提交代码时，使用 Git 凭证存储，提交打包后的 HTML 文件。Git 凭证存储细节可参考凭证存储文档(https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8)\n\n#### 2.4 发布阶段（deploy stage）\n发布阶段，使用内部的 rsync 工具 dplt 将打包后的 HTML 文件部署。dplt 可配置集群、机器列表。\n\n## 写在最后\n以上就是GitLab CI/CD的整个理论到实践的全部过程，实现之后你就可以解放双手了，是不是超爽。\n\n## 参考资料\n持续集成是什么？(http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html)\n\n什么是 CI/CD？(https://www.redhat.com/zh/topics/devops/what-is-ci-cd)\n\nGitLab Docs(https://docs.gitlab.com/)\n\nIntroduction to CI/CD with GitLab(https://docs.gitlab.com/ee/ci/introduction/)\n\n用 GitLab CI 进行持续集成(https://scarletsky.github.io/2016/07/29/use-gitlab-ci-for-continuous-integration/)\n\n如何实现前端工程的持续集成与持续部署？(https://www.zhihu.com/question/60194439)\n\n基于 GitLab CI 的前端工程CI/CD实践(https://github.com/giscafer/front-end-manual/issues/27)","source":"_posts/gitlab-cicd.md","raw":"---\ntitle: 基于 GitLab CI/CD 的自动化构建、发布实践\ndate: 2019-12-31 16:22:22\ncategories: \n\t- 前端工程化\ntags: \n\t- GitLab\n\t- CI/CD\n\t- 自动构建\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n公司于去年开始代码版本管理从SVN迁移到了Git，采用的GitLab程序做管理，但是自动构建采用的是Jekins，最近在给博客做自动构建的时候了解到的了Github的Actions，我就在想，是不是GitLab也有自己的自动构建能力，因为之前在参与项目的时候也看到GitLab上有CI/CD相关的内容，但是没有仔细的去看，趁这次机会就一起研究一下。\n<!-- more -->\n\n## 说一下目前公司的构建和发布流程\n1、***手动构建时代***：开发人员在测试需要验证环境的时候，在本地执行打包构建命令，然后将包放到服务器上，整个过程30分钟左右。\n2、***自动构建时代***目前公司的构建是要在Jekins中，首先是在Jekins中配置拉去代码的仓库地址和代码分支，写好构建的脚本，在需要构建时候进行构建，一次配置后构建全程只需要点一下构建时间长度跟项目代码需要下载的依赖时间有关，通常不超过5分钟，需要注意的是要在构建前同步一下代码版本\n***划重点***\n在原来的手动构建时代，代码是以开发本地的代码为准，代码版本很可能跟最新的代码有出入，而且依赖于开发的电脑设备，如果他请假了，那么就GG了；另外通过一次配置后整个构建的时间从30分钟降到了5分钟，一次节省25分钟，那么一个项目周期下节省的工时就非常可观了。\n\n## 为什要使用GitLab CI/CD进行构建\n这里实际上没有太大的必要将公司的Jekins替换为GitLab的CI/CD进行自动构建，但是呢，因为公司本身采用的就是GitLab作为代码仓库管理代码，它本身又提供了CI/CD的功能，本着多学一点是一点的原则，我就花点时间研究一下它。\n\n## 什么是 GitLab CI/CD\n下面我就要开始把我了解到的GitLab CI/CD的使用方式说一下，从零开始搭建GitLab CI/CD。\n### 1. 简要介绍 GitLab CI/CD\n代码提交到GitLab上后，满足指定条件之后会触发pipeline进行自动化构建、发布。\n***pipeline***可以理解为构建任务，里面可以包含多个流程，比如下载依赖、运行测试、编译、部署。\n那么pipeline什么时候触发，分为几个流程，每个流程做什么，需要在项目的***.gitlab-ci.yml***文件中的定义。\n这点呢跟Jekins里面实际上做的也是同样的事，在线下开发做构建时候也是做这些事，只是通过脚本之后这些事都可以交给计算机做了。\n\n### 2. GitLab CI/CD 整体流程\n- GitLab CI/CD 的 pipeline 具体流程和操作在 .gitlab-ci.yml 文件中申明。\n- 触发 pipeline 后，由 GitLab Runner 根据  .gitlab-ci.yml 文件运行。\n- 运行结束后将返回至 GitLab 系统。\n\n#### 2.1 .gitlab-ci.yml 文件\n.gitlab-ci.yml 文件是一个申明式文件，用于定义 GitLab CI/CD 流程分为几个阶段，每个阶段分别干什么。\n\n关于具体干什么、怎么干，主要使用命令行和脚本操作，稍后会在实践部分做细致的介绍。\n\n如果涉及一些逻辑的话，会使用脚本（shell）。\n\n#### 2.2 GitLab Runner\nGitLab Runner 是 CI 的执行环境，负责执行 gitlab-ci.yml 文件，并将结果返回给 GitLab 系统。Runner 具体可以有多种形式，docker、虚拟机或 shell，在注册 runner 时选定方式。实际上就是运行脚本的容器环境。\n\n## 3. 从零搭建一个 GitLab CI/CD 的基本步骤\n上面介绍了一些GitLab构建的主要环节和名词概念，接下来我将给大家介绍一下如何从零搭建一个GitLab CI/CD，一起体验一把GitLab CI/CD的整个流程。\n### 3.1 新建一个 GitLab 项目\n我这用的是公司的自有仓库，各位可以在开源GitLab上创建自己的项目\n### 3.2 配置Runner\nGitLab 提供了一些共享的Runner，我们可以不处理Runner，这里可以理解为，它提供了一些现成的脚本运行环境，不需要我们从头配置运行环境，so sweet～\n### 3.3 新建 .gitlab-ci.yml 文件\n1. 拉取项目到本地\n2. 在项目根目录新建 .gitlab-ci.yml 文件\n3. 提交 .gitlab-ci.yml 文件\n4. 在项目的 CI/CD 中，可以看到 CI/CD 的运行情况\n这个过程应该没人不会吧，没技术含量的我们简单一提，实际上最重要的就是.gitlab-ci.yml文件中要怎么去写，示例说明文件如下：\n```\n// .gitlab-ci.yml 示例说明\n\nimage: node\n# 定义 stages\nstages:\n  - build\n  - test\n# 定义 job\n build 阶段:\n  stage: build\n  script:\n    - echo \"build stage\"\n# 定义 job\n发布到测试环境:\n  stage: test\n  script:\n    - echo \"test stage\"\n```\n\n## GitLab CI/CD 实践\n在实践部分，这里着重介绍 GitLab Runner 和 .gitlab-ci.yml 文件，主要的流程及遇到的问题和解决方案包含在 .gitlab-ci.yml 文件的介绍过程中。\n\n### 1. GitLab Runner\nGitLab Runner 一般由 GitLab 系统维护者管理，配置后，同类项目可以共享，一般不需要进行修改。这里不进行具体介绍，主要介绍下使用过程中的注意点，具体使用可参考 GitLab Runner 文档。（https://docs.gitlab.com.cn/runner/）\n\n#### 1.1 GitLab Runner 使用流程\n1. 下载 GitLab Runner\n2. 注册 GitLab Runner\n3. 使用 GitLab Runner\n\n#### 1.2 GitLab Runner 注意点\n在使用 Runner 的过程中，我们遇到了一些问题，下面简要介绍问题及解决方案，不做具体介绍。\n\n##### 1.2.1 配置 Runner 后，push 代码，出发了 pipeline，但一直处于Pending状态\n\n错误信息是：\n```\nThis job is stuck, because you don’t have any active runners that can run this job\n```\n注册的 Runner，默认情况下，不会运用没有 `tag` 的 job，可以在 Settings→CI/CD→Runners Settings，去掉 Runner untagged jobs 即可。\n\n##### 1.2.2 GitLab Runner 的类型\n有三种类型的 Runner，\n- Shared Runners 在整个系统所有项目都可以使用\n- Group Runners 注册后，同一个项目下的不同代码库共享\n- Specific Runners 需要给项目单独配置，使用 Specific Runners 注意考虑是否需要关闭 Shared Runners、和 Group Runners。\n\n##### 1.2.3 在 GitLab CI 中使用 docker\n如果部署使用的是docker方式，那么在部署时需要在 GitLab CI/CD 中使用 docker 打镜像发布。可以参考 Building Docker images with GitLab CI/CD（https://docs.gitlab.com/ee/ci/docker/using_docker_build.html）\n\n##### 1.2.4 在 GitLab CI/CD 中访问 Runner 宿主机目录\n我们使用的 Runner executor 是 Dokcer，在 Dokcer volumes 中配置需要访问的目录。\n\n### 2. .gitlab-ci.yml 文件\n.gitlab-ci.yml 详细的用法，可参考 GitLab CI/CD Pipeline Configuration Reference 文档（https://docs.gitlab.com/ee/ci/yaml/README.html）\n\n#### 2.1 .gitlab-ci.yml 文件结构介绍\n- `image` 是执行 CI/CD 依赖的 Docker 基础镜像。镜像中有 Node、Yarn、Dalp（内部 rsync 工具）。\n- `stages` 中定义了我们的 pipeline 分为以下几个过程:\n  1. 下载依赖阶段 pre_build\n  2. 构建阶段 build\n  3. 发布阶段 deploy\n- `stage` 申明当前的阶段，在 stages 中使用\n- `variables` 用于定义变量\n- `before_script` 执行 script 前的操作\n- `script` 当前 stage 需要执行的操作\n- `changes` 指定 stage 触发条件\n- `refs` 指定 stage 触发的分支\n\n下面具体看一下我们这个.gitlab-ci.yml文件实际的样子\n```\nimage: registry.thunisoft.com/gitlab-ci/node:v1.8\n\nvariables:\n  # $CI_PROJECT_PATH  ：项目id,用于项目唯一区分本项目与其它项目\n  # $CI_PROJECT_DIR   ：本地项目路径\n  # $PROCESS_PATH     ：临时文件目录(包括日志和一些临时文件)\n  NODE_MODULES_PATH: /runner-cache/frontend/$CI_PROJECT_PATH/$CI_BUILD_REF_NAME/node_modules\n\nstages:\n  - pre_build # 下载依赖阶段\n  - build # 构建阶段\n  - deploy # 测试发布阶段\n\n# 下载依赖:\n  before_script: # 下载依赖前准备脚本\n    # 无 node_modules 文件时，新建 node_modules 文件\n    - /bin/bash ./ci/mkdir.sh $NODE_MODULES_PATH\n    # 软链 node_modules 到宿主机\n    - ln -s $NODE_MODULES_PATH .\n    - cd webpack@lixuguang-project\n\n  stage: pre_build\n  script:\n    - echo \"npm install\"\n    - npm install  --network-timeout 60000 # 安装依赖\n  only:\n    changes:\n      - webpack@lixuguang-project/package.json\n    refs:\n      - master\n      - ci\n\n# 构建:\n  stage: build\n  variables:\n    CI_COMMIT_BEFORE_SHA_PATH: /mnt/gv0/gitlab-runner-cache/$CI_PROJECT_PATH\n    CI_COMMIT_BEFORE_SHA_FILE_NAME: $CI_BUILD_REF_NAME.sh\n    CI_COMMIT_BEFORE_SHA_FILE: /mnt/gv0/gitlab-runner-cache/$CI_PROJECT_PATH/$CI_BUILD_REF_NAME.sh\n  before_script:\n    # 建存此次 CI CI_COMMIT_SHA 的文件\n    - /bin/bash ./ci/mkfile.sh $CI_COMMIT_BEFORE_SHA_PATH $CI_COMMIT_BEFORE_SHA_FILE_NAME\n    # 软链 node_modules 到宿主机\n    - ln -s $NODE_MODULES_PATH .\n    - rm -rf web/share/*\n    - cd webpack@lixuguang-projects\n  script:\n    # 缓存上次ci\n    - source $CI_COMMIT_BEFORE_SHA_FILE\n    - echo \"CI_COMMIT_BEFORE_SHA=$CI_COMMIT_SHA\" > $CI_COMMIT_BEFORE_SHA_FILE\n    - python3 ../ci/build.py   # 编译\n    - /bin/bash ../ci/commit.sh   # 提交编译结果\n  only:\n    changes:\n      - www_src/**/*\n    refs:\n      - master\n      - ci\n\n# 测试发布:\n  stage: deploy\n  variables:\n    PROCESS_PATH: /mnt/gv0/gitlab-runner-cache/deploy/process/$CI_JOB_ID  # 目录不要换，用于日志服务器获取日志展示\n  script:\n    - mkdir $PROCESS_PATH # 建立发布临时路径，存放发布配置中间文件和结果日志用\n    - dplt $CI_PROJECT_DIR/.deploy_test.yml $CI_PROJECT_PATH $CI_PROJECT_DIR/web/ $PROCESS_PATH\n    # dplt 发布yml配置\n    - echo \"发布完成，错误日志查看http://172.18.78.11:8089/log?path=\"$PROCESS_PATH\n    - echo `ls $PROCESS_PATH/*.log`\n  only:\n    changes:\n      - web/**/*\n    refs:\n      - test\n```\n\n#### 2.2 下载依赖阶段（pre_build stage）\n下载依赖的方案是：当 package.json 文件发生变化时，触发 pre_build stage，执行 npm install。下载的 node_modules 放在宿主机下，执行时通过软链获取依赖。\n\n#### 2.3 构建阶段（build stage）\n构建阶段，分为 3 部分\n1. diff 文件变化\n2. 前端 build\n3. commit build 后结果\n\n##### 2.3.1 diff 文件变化\n每次 CI 时，将当前 CI commit SHA（CI_COMMIT_SHA 变量）存在文件中，存为 CI_COMMIT_BEFORE_SHA 变量， diff 时，git diff 当前 CI 与上次 commit SHA 的变化。\n\n##### 2.3.2 前端 build\n根据 git diff 的变化情况，确定本次需要打包的内容。\n\n##### 2.3.3 commit 打包后生成的 HTML 文件\n在 GitLab CI/CD 提交代码时，使用 Git 凭证存储，提交打包后的 HTML 文件。Git 凭证存储细节可参考凭证存储文档(https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8)\n\n#### 2.4 发布阶段（deploy stage）\n发布阶段，使用内部的 rsync 工具 dplt 将打包后的 HTML 文件部署。dplt 可配置集群、机器列表。\n\n## 写在最后\n以上就是GitLab CI/CD的整个理论到实践的全部过程，实现之后你就可以解放双手了，是不是超爽。\n\n## 参考资料\n持续集成是什么？(http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html)\n\n什么是 CI/CD？(https://www.redhat.com/zh/topics/devops/what-is-ci-cd)\n\nGitLab Docs(https://docs.gitlab.com/)\n\nIntroduction to CI/CD with GitLab(https://docs.gitlab.com/ee/ci/introduction/)\n\n用 GitLab CI 进行持续集成(https://scarletsky.github.io/2016/07/29/use-gitlab-ci-for-continuous-integration/)\n\n如何实现前端工程的持续集成与持续部署？(https://www.zhihu.com/question/60194439)\n\n基于 GitLab CI 的前端工程CI/CD实践(https://github.com/giscafer/front-end-manual/issues/27)","slug":"gitlab-cicd","published":1,"updated":"2019-12-31T08:43:48.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs4w005yooa65yny1gn7","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>公司于去年开始代码版本管理从SVN迁移到了Git，采用的GitLab程序做管理，但是自动构建采用的是Jekins，最近在给博客做自动构建的时候了解到的了Github的Actions，我就在想，是不是GitLab也有自己的自动构建能力，因为之前在参与项目的时候也看到GitLab上有CI/CD相关的内容，但是没有仔细的去看，趁这次机会就一起研究一下。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"说一下目前公司的构建和发布流程\"><a href=\"#说一下目前公司的构建和发布流程\" class=\"headerlink\" title=\"说一下目前公司的构建和发布流程\"></a>说一下目前公司的构建和发布流程</h2><p>1、<strong><em>手动构建时代</em></strong>：开发人员在测试需要验证环境的时候，在本地执行打包构建命令，然后将包放到服务器上，整个过程30分钟左右。<br>2、<strong><em>自动构建时代</em></strong>目前公司的构建是要在Jekins中，首先是在Jekins中配置拉去代码的仓库地址和代码分支，写好构建的脚本，在需要构建时候进行构建，一次配置后构建全程只需要点一下构建时间长度跟项目代码需要下载的依赖时间有关，通常不超过5分钟，需要注意的是要在构建前同步一下代码版本<br><strong><em>划重点</em></strong><br>在原来的手动构建时代，代码是以开发本地的代码为准，代码版本很可能跟最新的代码有出入，而且依赖于开发的电脑设备，如果他请假了，那么就GG了；另外通过一次配置后整个构建的时间从30分钟降到了5分钟，一次节省25分钟，那么一个项目周期下节省的工时就非常可观了。</p>\n<h2 id=\"为什要使用GitLab-CI-CD进行构建\"><a href=\"#为什要使用GitLab-CI-CD进行构建\" class=\"headerlink\" title=\"为什要使用GitLab CI/CD进行构建\"></a>为什要使用GitLab CI/CD进行构建</h2><p>这里实际上没有太大的必要将公司的Jekins替换为GitLab的CI/CD进行自动构建，但是呢，因为公司本身采用的就是GitLab作为代码仓库管理代码，它本身又提供了CI/CD的功能，本着多学一点是一点的原则，我就花点时间研究一下它。</p>\n<h2 id=\"什么是-GitLab-CI-CD\"><a href=\"#什么是-GitLab-CI-CD\" class=\"headerlink\" title=\"什么是 GitLab CI/CD\"></a>什么是 GitLab CI/CD</h2><p>下面我就要开始把我了解到的GitLab CI/CD的使用方式说一下，从零开始搭建GitLab CI/CD。</p>\n<h3 id=\"1-简要介绍-GitLab-CI-CD\"><a href=\"#1-简要介绍-GitLab-CI-CD\" class=\"headerlink\" title=\"1. 简要介绍 GitLab CI/CD\"></a>1. 简要介绍 GitLab CI/CD</h3><p>代码提交到GitLab上后，满足指定条件之后会触发pipeline进行自动化构建、发布。<br><strong><em>pipeline</em></strong>可以理解为构建任务，里面可以包含多个流程，比如下载依赖、运行测试、编译、部署。<br>那么pipeline什么时候触发，分为几个流程，每个流程做什么，需要在项目的<strong><em>.gitlab-ci.yml</em></strong>文件中的定义。<br>这点呢跟Jekins里面实际上做的也是同样的事，在线下开发做构建时候也是做这些事，只是通过脚本之后这些事都可以交给计算机做了。</p>\n<h3 id=\"2-GitLab-CI-CD-整体流程\"><a href=\"#2-GitLab-CI-CD-整体流程\" class=\"headerlink\" title=\"2. GitLab CI/CD 整体流程\"></a>2. GitLab CI/CD 整体流程</h3><ul>\n<li>GitLab CI/CD 的 pipeline 具体流程和操作在 .gitlab-ci.yml 文件中申明。</li>\n<li>触发 pipeline 后，由 GitLab Runner 根据  .gitlab-ci.yml 文件运行。</li>\n<li>运行结束后将返回至 GitLab 系统。</li>\n</ul>\n<h4 id=\"2-1-gitlab-ci-yml-文件\"><a href=\"#2-1-gitlab-ci-yml-文件\" class=\"headerlink\" title=\"2.1 .gitlab-ci.yml 文件\"></a>2.1 .gitlab-ci.yml 文件</h4><p>.gitlab-ci.yml 文件是一个申明式文件，用于定义 GitLab CI/CD 流程分为几个阶段，每个阶段分别干什么。</p>\n<p>关于具体干什么、怎么干，主要使用命令行和脚本操作，稍后会在实践部分做细致的介绍。</p>\n<p>如果涉及一些逻辑的话，会使用脚本（shell）。</p>\n<h4 id=\"2-2-GitLab-Runner\"><a href=\"#2-2-GitLab-Runner\" class=\"headerlink\" title=\"2.2 GitLab Runner\"></a>2.2 GitLab Runner</h4><p>GitLab Runner 是 CI 的执行环境，负责执行 gitlab-ci.yml 文件，并将结果返回给 GitLab 系统。Runner 具体可以有多种形式，docker、虚拟机或 shell，在注册 runner 时选定方式。实际上就是运行脚本的容器环境。</p>\n<h2 id=\"3-从零搭建一个-GitLab-CI-CD-的基本步骤\"><a href=\"#3-从零搭建一个-GitLab-CI-CD-的基本步骤\" class=\"headerlink\" title=\"3. 从零搭建一个 GitLab CI/CD 的基本步骤\"></a>3. 从零搭建一个 GitLab CI/CD 的基本步骤</h2><p>上面介绍了一些GitLab构建的主要环节和名词概念，接下来我将给大家介绍一下如何从零搭建一个GitLab CI/CD，一起体验一把GitLab CI/CD的整个流程。</p>\n<h3 id=\"3-1-新建一个-GitLab-项目\"><a href=\"#3-1-新建一个-GitLab-项目\" class=\"headerlink\" title=\"3.1 新建一个 GitLab 项目\"></a>3.1 新建一个 GitLab 项目</h3><p>我这用的是公司的自有仓库，各位可以在开源GitLab上创建自己的项目</p>\n<h3 id=\"3-2-配置Runner\"><a href=\"#3-2-配置Runner\" class=\"headerlink\" title=\"3.2 配置Runner\"></a>3.2 配置Runner</h3><p>GitLab 提供了一些共享的Runner，我们可以不处理Runner，这里可以理解为，它提供了一些现成的脚本运行环境，不需要我们从头配置运行环境，so sweet～</p>\n<h3 id=\"3-3-新建-gitlab-ci-yml-文件\"><a href=\"#3-3-新建-gitlab-ci-yml-文件\" class=\"headerlink\" title=\"3.3 新建 .gitlab-ci.yml 文件\"></a>3.3 新建 .gitlab-ci.yml 文件</h3><ol>\n<li>拉取项目到本地</li>\n<li>在项目根目录新建 .gitlab-ci.yml 文件</li>\n<li>提交 .gitlab-ci.yml 文件</li>\n<li>在项目的 CI/CD 中，可以看到 CI/CD 的运行情况<br>这个过程应该没人不会吧，没技术含量的我们简单一提，实际上最重要的就是.gitlab-ci.yml文件中要怎么去写，示例说明文件如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; .gitlab-ci.yml 示例说明</span><br><span class=\"line\"></span><br><span class=\"line\">image: node</span><br><span class=\"line\"># 定义 stages</span><br><span class=\"line\">stages:</span><br><span class=\"line\">  - build</span><br><span class=\"line\">  - test</span><br><span class=\"line\"># 定义 job</span><br><span class=\"line\"> build 阶段:</span><br><span class=\"line\">  stage: build</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - echo &quot;build stage&quot;</span><br><span class=\"line\"># 定义 job</span><br><span class=\"line\">发布到测试环境:</span><br><span class=\"line\">  stage: test</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - echo &quot;test stage&quot;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"GitLab-CI-CD-实践\"><a href=\"#GitLab-CI-CD-实践\" class=\"headerlink\" title=\"GitLab CI/CD 实践\"></a>GitLab CI/CD 实践</h2><p>在实践部分，这里着重介绍 GitLab Runner 和 .gitlab-ci.yml 文件，主要的流程及遇到的问题和解决方案包含在 .gitlab-ci.yml 文件的介绍过程中。</p>\n<h3 id=\"1-GitLab-Runner\"><a href=\"#1-GitLab-Runner\" class=\"headerlink\" title=\"1. GitLab Runner\"></a>1. GitLab Runner</h3><p>GitLab Runner 一般由 GitLab 系统维护者管理，配置后，同类项目可以共享，一般不需要进行修改。这里不进行具体介绍，主要介绍下使用过程中的注意点，具体使用可参考 GitLab Runner 文档。（<a href=\"https://docs.gitlab.com.cn/runner/）\" target=\"_blank\" rel=\"noopener\">https://docs.gitlab.com.cn/runner/）</a></p>\n<h4 id=\"1-1-GitLab-Runner-使用流程\"><a href=\"#1-1-GitLab-Runner-使用流程\" class=\"headerlink\" title=\"1.1 GitLab Runner 使用流程\"></a>1.1 GitLab Runner 使用流程</h4><ol>\n<li>下载 GitLab Runner</li>\n<li>注册 GitLab Runner</li>\n<li>使用 GitLab Runner</li>\n</ol>\n<h4 id=\"1-2-GitLab-Runner-注意点\"><a href=\"#1-2-GitLab-Runner-注意点\" class=\"headerlink\" title=\"1.2 GitLab Runner 注意点\"></a>1.2 GitLab Runner 注意点</h4><p>在使用 Runner 的过程中，我们遇到了一些问题，下面简要介绍问题及解决方案，不做具体介绍。</p>\n<h5 id=\"1-2-1-配置-Runner-后，push-代码，出发了-pipeline，但一直处于Pending状态\"><a href=\"#1-2-1-配置-Runner-后，push-代码，出发了-pipeline，但一直处于Pending状态\" class=\"headerlink\" title=\"1.2.1 配置 Runner 后，push 代码，出发了 pipeline，但一直处于Pending状态\"></a>1.2.1 配置 Runner 后，push 代码，出发了 pipeline，但一直处于Pending状态</h5><p>错误信息是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This job is stuck, because you don’t have any active runners that can run this job</span><br></pre></td></tr></table></figure>\n<p>注册的 Runner，默认情况下，不会运用没有 <code>tag</code> 的 job，可以在 Settings→CI/CD→Runners Settings，去掉 Runner untagged jobs 即可。</p>\n<h5 id=\"1-2-2-GitLab-Runner-的类型\"><a href=\"#1-2-2-GitLab-Runner-的类型\" class=\"headerlink\" title=\"1.2.2 GitLab Runner 的类型\"></a>1.2.2 GitLab Runner 的类型</h5><p>有三种类型的 Runner，</p>\n<ul>\n<li>Shared Runners 在整个系统所有项目都可以使用</li>\n<li>Group Runners 注册后，同一个项目下的不同代码库共享</li>\n<li>Specific Runners 需要给项目单独配置，使用 Specific Runners 注意考虑是否需要关闭 Shared Runners、和 Group Runners。</li>\n</ul>\n<h5 id=\"1-2-3-在-GitLab-CI-中使用-docker\"><a href=\"#1-2-3-在-GitLab-CI-中使用-docker\" class=\"headerlink\" title=\"1.2.3 在 GitLab CI 中使用 docker\"></a>1.2.3 在 GitLab CI 中使用 docker</h5><p>如果部署使用的是docker方式，那么在部署时需要在 GitLab CI/CD 中使用 docker 打镜像发布。可以参考 Building Docker images with GitLab CI/CD（<a href=\"https://docs.gitlab.com/ee/ci/docker/using_docker_build.html）\" target=\"_blank\" rel=\"noopener\">https://docs.gitlab.com/ee/ci/docker/using_docker_build.html）</a></p>\n<h5 id=\"1-2-4-在-GitLab-CI-CD-中访问-Runner-宿主机目录\"><a href=\"#1-2-4-在-GitLab-CI-CD-中访问-Runner-宿主机目录\" class=\"headerlink\" title=\"1.2.4 在 GitLab CI/CD 中访问 Runner 宿主机目录\"></a>1.2.4 在 GitLab CI/CD 中访问 Runner 宿主机目录</h5><p>我们使用的 Runner executor 是 Dokcer，在 Dokcer volumes 中配置需要访问的目录。</p>\n<h3 id=\"2-gitlab-ci-yml-文件\"><a href=\"#2-gitlab-ci-yml-文件\" class=\"headerlink\" title=\"2. .gitlab-ci.yml 文件\"></a>2. .gitlab-ci.yml 文件</h3><p>.gitlab-ci.yml 详细的用法，可参考 GitLab CI/CD Pipeline Configuration Reference 文档（<a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html）\" target=\"_blank\" rel=\"noopener\">https://docs.gitlab.com/ee/ci/yaml/README.html）</a></p>\n<h4 id=\"2-1-gitlab-ci-yml-文件结构介绍\"><a href=\"#2-1-gitlab-ci-yml-文件结构介绍\" class=\"headerlink\" title=\"2.1 .gitlab-ci.yml 文件结构介绍\"></a>2.1 .gitlab-ci.yml 文件结构介绍</h4><ul>\n<li><code>image</code> 是执行 CI/CD 依赖的 Docker 基础镜像。镜像中有 Node、Yarn、Dalp（内部 rsync 工具）。</li>\n<li><code>stages</code> 中定义了我们的 pipeline 分为以下几个过程:<ol>\n<li>下载依赖阶段 pre_build</li>\n<li>构建阶段 build</li>\n<li>发布阶段 deploy</li>\n</ol>\n</li>\n<li><code>stage</code> 申明当前的阶段，在 stages 中使用</li>\n<li><code>variables</code> 用于定义变量</li>\n<li><code>before_script</code> 执行 script 前的操作</li>\n<li><code>script</code> 当前 stage 需要执行的操作</li>\n<li><code>changes</code> 指定 stage 触发条件</li>\n<li><code>refs</code> 指定 stage 触发的分支</li>\n</ul>\n<p>下面具体看一下我们这个.gitlab-ci.yml文件实际的样子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">image: registry.thunisoft.com&#x2F;gitlab-ci&#x2F;node:v1.8</span><br><span class=\"line\"></span><br><span class=\"line\">variables:</span><br><span class=\"line\">  # $CI_PROJECT_PATH  ：项目id,用于项目唯一区分本项目与其它项目</span><br><span class=\"line\">  # $CI_PROJECT_DIR   ：本地项目路径</span><br><span class=\"line\">  # $PROCESS_PATH     ：临时文件目录(包括日志和一些临时文件)</span><br><span class=\"line\">  NODE_MODULES_PATH: &#x2F;runner-cache&#x2F;frontend&#x2F;$CI_PROJECT_PATH&#x2F;$CI_BUILD_REF_NAME&#x2F;node_modules</span><br><span class=\"line\"></span><br><span class=\"line\">stages:</span><br><span class=\"line\">  - pre_build # 下载依赖阶段</span><br><span class=\"line\">  - build # 构建阶段</span><br><span class=\"line\">  - deploy # 测试发布阶段</span><br><span class=\"line\"></span><br><span class=\"line\"># 下载依赖:</span><br><span class=\"line\">  before_script: # 下载依赖前准备脚本</span><br><span class=\"line\">    # 无 node_modules 文件时，新建 node_modules 文件</span><br><span class=\"line\">    - &#x2F;bin&#x2F;bash .&#x2F;ci&#x2F;mkdir.sh $NODE_MODULES_PATH</span><br><span class=\"line\">    # 软链 node_modules 到宿主机</span><br><span class=\"line\">    - ln -s $NODE_MODULES_PATH .</span><br><span class=\"line\">    - cd webpack@lixuguang-project</span><br><span class=\"line\"></span><br><span class=\"line\">  stage: pre_build</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - echo &quot;npm install&quot;</span><br><span class=\"line\">    - npm install  --network-timeout 60000 # 安装依赖</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    changes:</span><br><span class=\"line\">      - webpack@lixuguang-project&#x2F;package.json</span><br><span class=\"line\">    refs:</span><br><span class=\"line\">      - master</span><br><span class=\"line\">      - ci</span><br><span class=\"line\"></span><br><span class=\"line\"># 构建:</span><br><span class=\"line\">  stage: build</span><br><span class=\"line\">  variables:</span><br><span class=\"line\">    CI_COMMIT_BEFORE_SHA_PATH: &#x2F;mnt&#x2F;gv0&#x2F;gitlab-runner-cache&#x2F;$CI_PROJECT_PATH</span><br><span class=\"line\">    CI_COMMIT_BEFORE_SHA_FILE_NAME: $CI_BUILD_REF_NAME.sh</span><br><span class=\"line\">    CI_COMMIT_BEFORE_SHA_FILE: &#x2F;mnt&#x2F;gv0&#x2F;gitlab-runner-cache&#x2F;$CI_PROJECT_PATH&#x2F;$CI_BUILD_REF_NAME.sh</span><br><span class=\"line\">  before_script:</span><br><span class=\"line\">    # 建存此次 CI CI_COMMIT_SHA 的文件</span><br><span class=\"line\">    - &#x2F;bin&#x2F;bash .&#x2F;ci&#x2F;mkfile.sh $CI_COMMIT_BEFORE_SHA_PATH $CI_COMMIT_BEFORE_SHA_FILE_NAME</span><br><span class=\"line\">    # 软链 node_modules 到宿主机</span><br><span class=\"line\">    - ln -s $NODE_MODULES_PATH .</span><br><span class=\"line\">    - rm -rf web&#x2F;share&#x2F;*</span><br><span class=\"line\">    - cd webpack@lixuguang-projects</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    # 缓存上次ci</span><br><span class=\"line\">    - source $CI_COMMIT_BEFORE_SHA_FILE</span><br><span class=\"line\">    - echo &quot;CI_COMMIT_BEFORE_SHA&#x3D;$CI_COMMIT_SHA&quot; &gt; $CI_COMMIT_BEFORE_SHA_FILE</span><br><span class=\"line\">    - python3 ..&#x2F;ci&#x2F;build.py   # 编译</span><br><span class=\"line\">    - &#x2F;bin&#x2F;bash ..&#x2F;ci&#x2F;commit.sh   # 提交编译结果</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    changes:</span><br><span class=\"line\">      - www_src&#x2F;**&#x2F;*</span><br><span class=\"line\">    refs:</span><br><span class=\"line\">      - master</span><br><span class=\"line\">      - ci</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试发布:</span><br><span class=\"line\">  stage: deploy</span><br><span class=\"line\">  variables:</span><br><span class=\"line\">    PROCESS_PATH: &#x2F;mnt&#x2F;gv0&#x2F;gitlab-runner-cache&#x2F;deploy&#x2F;process&#x2F;$CI_JOB_ID  # 目录不要换，用于日志服务器获取日志展示</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - mkdir $PROCESS_PATH # 建立发布临时路径，存放发布配置中间文件和结果日志用</span><br><span class=\"line\">    - dplt $CI_PROJECT_DIR&#x2F;.deploy_test.yml $CI_PROJECT_PATH $CI_PROJECT_DIR&#x2F;web&#x2F; $PROCESS_PATH</span><br><span class=\"line\">    # dplt 发布yml配置</span><br><span class=\"line\">    - echo &quot;发布完成，错误日志查看http:&#x2F;&#x2F;172.18.78.11:8089&#x2F;log?path&#x3D;&quot;$PROCESS_PATH</span><br><span class=\"line\">    - echo &#96;ls $PROCESS_PATH&#x2F;*.log&#96;</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    changes:</span><br><span class=\"line\">      - web&#x2F;**&#x2F;*</span><br><span class=\"line\">    refs:</span><br><span class=\"line\">      - test</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-下载依赖阶段（pre-build-stage）\"><a href=\"#2-2-下载依赖阶段（pre-build-stage）\" class=\"headerlink\" title=\"2.2 下载依赖阶段（pre_build stage）\"></a>2.2 下载依赖阶段（pre_build stage）</h4><p>下载依赖的方案是：当 package.json 文件发生变化时，触发 pre_build stage，执行 npm install。下载的 node_modules 放在宿主机下，执行时通过软链获取依赖。</p>\n<h4 id=\"2-3-构建阶段（build-stage）\"><a href=\"#2-3-构建阶段（build-stage）\" class=\"headerlink\" title=\"2.3 构建阶段（build stage）\"></a>2.3 构建阶段（build stage）</h4><p>构建阶段，分为 3 部分</p>\n<ol>\n<li>diff 文件变化</li>\n<li>前端 build</li>\n<li>commit build 后结果</li>\n</ol>\n<h5 id=\"2-3-1-diff-文件变化\"><a href=\"#2-3-1-diff-文件变化\" class=\"headerlink\" title=\"2.3.1 diff 文件变化\"></a>2.3.1 diff 文件变化</h5><p>每次 CI 时，将当前 CI commit SHA（CI_COMMIT_SHA 变量）存在文件中，存为 CI_COMMIT_BEFORE_SHA 变量， diff 时，git diff 当前 CI 与上次 commit SHA 的变化。</p>\n<h5 id=\"2-3-2-前端-build\"><a href=\"#2-3-2-前端-build\" class=\"headerlink\" title=\"2.3.2 前端 build\"></a>2.3.2 前端 build</h5><p>根据 git diff 的变化情况，确定本次需要打包的内容。</p>\n<h5 id=\"2-3-3-commit-打包后生成的-HTML-文件\"><a href=\"#2-3-3-commit-打包后生成的-HTML-文件\" class=\"headerlink\" title=\"2.3.3 commit 打包后生成的 HTML 文件\"></a>2.3.3 commit 打包后生成的 HTML 文件</h5><p>在 GitLab CI/CD 提交代码时，使用 Git 凭证存储，提交打包后的 HTML 文件。Git 凭证存储细节可参考凭证存储文档(<a href=\"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8</a>)</p>\n<h4 id=\"2-4-发布阶段（deploy-stage）\"><a href=\"#2-4-发布阶段（deploy-stage）\" class=\"headerlink\" title=\"2.4 发布阶段（deploy stage）\"></a>2.4 发布阶段（deploy stage）</h4><p>发布阶段，使用内部的 rsync 工具 dplt 将打包后的 HTML 文件部署。dplt 可配置集群、机器列表。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>以上就是GitLab CI/CD的整个理论到实践的全部过程，实现之后你就可以解放双手了，是不是超爽。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>持续集成是什么？(<a href=\"http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html</a>)</p>\n<p>什么是 CI/CD？(<a href=\"https://www.redhat.com/zh/topics/devops/what-is-ci-cd\" target=\"_blank\" rel=\"noopener\">https://www.redhat.com/zh/topics/devops/what-is-ci-cd</a>)</p>\n<p>GitLab Docs(<a href=\"https://docs.gitlab.com/\" target=\"_blank\" rel=\"noopener\">https://docs.gitlab.com/</a>)</p>\n<p>Introduction to CI/CD with GitLab(<a href=\"https://docs.gitlab.com/ee/ci/introduction/\" target=\"_blank\" rel=\"noopener\">https://docs.gitlab.com/ee/ci/introduction/</a>)</p>\n<p>用 GitLab CI 进行持续集成(<a href=\"https://scarletsky.github.io/2016/07/29/use-gitlab-ci-for-continuous-integration/\" target=\"_blank\" rel=\"noopener\">https://scarletsky.github.io/2016/07/29/use-gitlab-ci-for-continuous-integration/</a>)</p>\n<p>如何实现前端工程的持续集成与持续部署？(<a href=\"https://www.zhihu.com/question/60194439\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/60194439</a>)</p>\n<p>基于 GitLab CI 的前端工程CI/CD实践(<a href=\"https://github.com/giscafer/front-end-manual/issues/27\" target=\"_blank\" rel=\"noopener\">https://github.com/giscafer/front-end-manual/issues/27</a>)</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>公司于去年开始代码版本管理从SVN迁移到了Git，采用的GitLab程序做管理，但是自动构建采用的是Jekins，最近在给博客做自动构建的时候了解到的了Github的Actions，我就在想，是不是GitLab也有自己的自动构建能力，因为之前在参与项目的时候也看到GitLab上有CI/CD相关的内容，但是没有仔细的去看，趁这次机会就一起研究一下。</p>","more":"<h2 id=\"说一下目前公司的构建和发布流程\"><a href=\"#说一下目前公司的构建和发布流程\" class=\"headerlink\" title=\"说一下目前公司的构建和发布流程\"></a>说一下目前公司的构建和发布流程</h2><p>1、<strong><em>手动构建时代</em></strong>：开发人员在测试需要验证环境的时候，在本地执行打包构建命令，然后将包放到服务器上，整个过程30分钟左右。<br>2、<strong><em>自动构建时代</em></strong>目前公司的构建是要在Jekins中，首先是在Jekins中配置拉去代码的仓库地址和代码分支，写好构建的脚本，在需要构建时候进行构建，一次配置后构建全程只需要点一下构建时间长度跟项目代码需要下载的依赖时间有关，通常不超过5分钟，需要注意的是要在构建前同步一下代码版本<br><strong><em>划重点</em></strong><br>在原来的手动构建时代，代码是以开发本地的代码为准，代码版本很可能跟最新的代码有出入，而且依赖于开发的电脑设备，如果他请假了，那么就GG了；另外通过一次配置后整个构建的时间从30分钟降到了5分钟，一次节省25分钟，那么一个项目周期下节省的工时就非常可观了。</p>\n<h2 id=\"为什要使用GitLab-CI-CD进行构建\"><a href=\"#为什要使用GitLab-CI-CD进行构建\" class=\"headerlink\" title=\"为什要使用GitLab CI/CD进行构建\"></a>为什要使用GitLab CI/CD进行构建</h2><p>这里实际上没有太大的必要将公司的Jekins替换为GitLab的CI/CD进行自动构建，但是呢，因为公司本身采用的就是GitLab作为代码仓库管理代码，它本身又提供了CI/CD的功能，本着多学一点是一点的原则，我就花点时间研究一下它。</p>\n<h2 id=\"什么是-GitLab-CI-CD\"><a href=\"#什么是-GitLab-CI-CD\" class=\"headerlink\" title=\"什么是 GitLab CI/CD\"></a>什么是 GitLab CI/CD</h2><p>下面我就要开始把我了解到的GitLab CI/CD的使用方式说一下，从零开始搭建GitLab CI/CD。</p>\n<h3 id=\"1-简要介绍-GitLab-CI-CD\"><a href=\"#1-简要介绍-GitLab-CI-CD\" class=\"headerlink\" title=\"1. 简要介绍 GitLab CI/CD\"></a>1. 简要介绍 GitLab CI/CD</h3><p>代码提交到GitLab上后，满足指定条件之后会触发pipeline进行自动化构建、发布。<br><strong><em>pipeline</em></strong>可以理解为构建任务，里面可以包含多个流程，比如下载依赖、运行测试、编译、部署。<br>那么pipeline什么时候触发，分为几个流程，每个流程做什么，需要在项目的<strong><em>.gitlab-ci.yml</em></strong>文件中的定义。<br>这点呢跟Jekins里面实际上做的也是同样的事，在线下开发做构建时候也是做这些事，只是通过脚本之后这些事都可以交给计算机做了。</p>\n<h3 id=\"2-GitLab-CI-CD-整体流程\"><a href=\"#2-GitLab-CI-CD-整体流程\" class=\"headerlink\" title=\"2. GitLab CI/CD 整体流程\"></a>2. GitLab CI/CD 整体流程</h3><ul>\n<li>GitLab CI/CD 的 pipeline 具体流程和操作在 .gitlab-ci.yml 文件中申明。</li>\n<li>触发 pipeline 后，由 GitLab Runner 根据  .gitlab-ci.yml 文件运行。</li>\n<li>运行结束后将返回至 GitLab 系统。</li>\n</ul>\n<h4 id=\"2-1-gitlab-ci-yml-文件\"><a href=\"#2-1-gitlab-ci-yml-文件\" class=\"headerlink\" title=\"2.1 .gitlab-ci.yml 文件\"></a>2.1 .gitlab-ci.yml 文件</h4><p>.gitlab-ci.yml 文件是一个申明式文件，用于定义 GitLab CI/CD 流程分为几个阶段，每个阶段分别干什么。</p>\n<p>关于具体干什么、怎么干，主要使用命令行和脚本操作，稍后会在实践部分做细致的介绍。</p>\n<p>如果涉及一些逻辑的话，会使用脚本（shell）。</p>\n<h4 id=\"2-2-GitLab-Runner\"><a href=\"#2-2-GitLab-Runner\" class=\"headerlink\" title=\"2.2 GitLab Runner\"></a>2.2 GitLab Runner</h4><p>GitLab Runner 是 CI 的执行环境，负责执行 gitlab-ci.yml 文件，并将结果返回给 GitLab 系统。Runner 具体可以有多种形式，docker、虚拟机或 shell，在注册 runner 时选定方式。实际上就是运行脚本的容器环境。</p>\n<h2 id=\"3-从零搭建一个-GitLab-CI-CD-的基本步骤\"><a href=\"#3-从零搭建一个-GitLab-CI-CD-的基本步骤\" class=\"headerlink\" title=\"3. 从零搭建一个 GitLab CI/CD 的基本步骤\"></a>3. 从零搭建一个 GitLab CI/CD 的基本步骤</h2><p>上面介绍了一些GitLab构建的主要环节和名词概念，接下来我将给大家介绍一下如何从零搭建一个GitLab CI/CD，一起体验一把GitLab CI/CD的整个流程。</p>\n<h3 id=\"3-1-新建一个-GitLab-项目\"><a href=\"#3-1-新建一个-GitLab-项目\" class=\"headerlink\" title=\"3.1 新建一个 GitLab 项目\"></a>3.1 新建一个 GitLab 项目</h3><p>我这用的是公司的自有仓库，各位可以在开源GitLab上创建自己的项目</p>\n<h3 id=\"3-2-配置Runner\"><a href=\"#3-2-配置Runner\" class=\"headerlink\" title=\"3.2 配置Runner\"></a>3.2 配置Runner</h3><p>GitLab 提供了一些共享的Runner，我们可以不处理Runner，这里可以理解为，它提供了一些现成的脚本运行环境，不需要我们从头配置运行环境，so sweet～</p>\n<h3 id=\"3-3-新建-gitlab-ci-yml-文件\"><a href=\"#3-3-新建-gitlab-ci-yml-文件\" class=\"headerlink\" title=\"3.3 新建 .gitlab-ci.yml 文件\"></a>3.3 新建 .gitlab-ci.yml 文件</h3><ol>\n<li>拉取项目到本地</li>\n<li>在项目根目录新建 .gitlab-ci.yml 文件</li>\n<li>提交 .gitlab-ci.yml 文件</li>\n<li>在项目的 CI/CD 中，可以看到 CI/CD 的运行情况<br>这个过程应该没人不会吧，没技术含量的我们简单一提，实际上最重要的就是.gitlab-ci.yml文件中要怎么去写，示例说明文件如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; .gitlab-ci.yml 示例说明</span><br><span class=\"line\"></span><br><span class=\"line\">image: node</span><br><span class=\"line\"># 定义 stages</span><br><span class=\"line\">stages:</span><br><span class=\"line\">  - build</span><br><span class=\"line\">  - test</span><br><span class=\"line\"># 定义 job</span><br><span class=\"line\"> build 阶段:</span><br><span class=\"line\">  stage: build</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - echo &quot;build stage&quot;</span><br><span class=\"line\"># 定义 job</span><br><span class=\"line\">发布到测试环境:</span><br><span class=\"line\">  stage: test</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - echo &quot;test stage&quot;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"GitLab-CI-CD-实践\"><a href=\"#GitLab-CI-CD-实践\" class=\"headerlink\" title=\"GitLab CI/CD 实践\"></a>GitLab CI/CD 实践</h2><p>在实践部分，这里着重介绍 GitLab Runner 和 .gitlab-ci.yml 文件，主要的流程及遇到的问题和解决方案包含在 .gitlab-ci.yml 文件的介绍过程中。</p>\n<h3 id=\"1-GitLab-Runner\"><a href=\"#1-GitLab-Runner\" class=\"headerlink\" title=\"1. GitLab Runner\"></a>1. GitLab Runner</h3><p>GitLab Runner 一般由 GitLab 系统维护者管理，配置后，同类项目可以共享，一般不需要进行修改。这里不进行具体介绍，主要介绍下使用过程中的注意点，具体使用可参考 GitLab Runner 文档。（<a href=\"https://docs.gitlab.com.cn/runner/）\" target=\"_blank\" rel=\"noopener\">https://docs.gitlab.com.cn/runner/）</a></p>\n<h4 id=\"1-1-GitLab-Runner-使用流程\"><a href=\"#1-1-GitLab-Runner-使用流程\" class=\"headerlink\" title=\"1.1 GitLab Runner 使用流程\"></a>1.1 GitLab Runner 使用流程</h4><ol>\n<li>下载 GitLab Runner</li>\n<li>注册 GitLab Runner</li>\n<li>使用 GitLab Runner</li>\n</ol>\n<h4 id=\"1-2-GitLab-Runner-注意点\"><a href=\"#1-2-GitLab-Runner-注意点\" class=\"headerlink\" title=\"1.2 GitLab Runner 注意点\"></a>1.2 GitLab Runner 注意点</h4><p>在使用 Runner 的过程中，我们遇到了一些问题，下面简要介绍问题及解决方案，不做具体介绍。</p>\n<h5 id=\"1-2-1-配置-Runner-后，push-代码，出发了-pipeline，但一直处于Pending状态\"><a href=\"#1-2-1-配置-Runner-后，push-代码，出发了-pipeline，但一直处于Pending状态\" class=\"headerlink\" title=\"1.2.1 配置 Runner 后，push 代码，出发了 pipeline，但一直处于Pending状态\"></a>1.2.1 配置 Runner 后，push 代码，出发了 pipeline，但一直处于Pending状态</h5><p>错误信息是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This job is stuck, because you don’t have any active runners that can run this job</span><br></pre></td></tr></table></figure>\n<p>注册的 Runner，默认情况下，不会运用没有 <code>tag</code> 的 job，可以在 Settings→CI/CD→Runners Settings，去掉 Runner untagged jobs 即可。</p>\n<h5 id=\"1-2-2-GitLab-Runner-的类型\"><a href=\"#1-2-2-GitLab-Runner-的类型\" class=\"headerlink\" title=\"1.2.2 GitLab Runner 的类型\"></a>1.2.2 GitLab Runner 的类型</h5><p>有三种类型的 Runner，</p>\n<ul>\n<li>Shared Runners 在整个系统所有项目都可以使用</li>\n<li>Group Runners 注册后，同一个项目下的不同代码库共享</li>\n<li>Specific Runners 需要给项目单独配置，使用 Specific Runners 注意考虑是否需要关闭 Shared Runners、和 Group Runners。</li>\n</ul>\n<h5 id=\"1-2-3-在-GitLab-CI-中使用-docker\"><a href=\"#1-2-3-在-GitLab-CI-中使用-docker\" class=\"headerlink\" title=\"1.2.3 在 GitLab CI 中使用 docker\"></a>1.2.3 在 GitLab CI 中使用 docker</h5><p>如果部署使用的是docker方式，那么在部署时需要在 GitLab CI/CD 中使用 docker 打镜像发布。可以参考 Building Docker images with GitLab CI/CD（<a href=\"https://docs.gitlab.com/ee/ci/docker/using_docker_build.html）\" target=\"_blank\" rel=\"noopener\">https://docs.gitlab.com/ee/ci/docker/using_docker_build.html）</a></p>\n<h5 id=\"1-2-4-在-GitLab-CI-CD-中访问-Runner-宿主机目录\"><a href=\"#1-2-4-在-GitLab-CI-CD-中访问-Runner-宿主机目录\" class=\"headerlink\" title=\"1.2.4 在 GitLab CI/CD 中访问 Runner 宿主机目录\"></a>1.2.4 在 GitLab CI/CD 中访问 Runner 宿主机目录</h5><p>我们使用的 Runner executor 是 Dokcer，在 Dokcer volumes 中配置需要访问的目录。</p>\n<h3 id=\"2-gitlab-ci-yml-文件\"><a href=\"#2-gitlab-ci-yml-文件\" class=\"headerlink\" title=\"2. .gitlab-ci.yml 文件\"></a>2. .gitlab-ci.yml 文件</h3><p>.gitlab-ci.yml 详细的用法，可参考 GitLab CI/CD Pipeline Configuration Reference 文档（<a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html）\" target=\"_blank\" rel=\"noopener\">https://docs.gitlab.com/ee/ci/yaml/README.html）</a></p>\n<h4 id=\"2-1-gitlab-ci-yml-文件结构介绍\"><a href=\"#2-1-gitlab-ci-yml-文件结构介绍\" class=\"headerlink\" title=\"2.1 .gitlab-ci.yml 文件结构介绍\"></a>2.1 .gitlab-ci.yml 文件结构介绍</h4><ul>\n<li><code>image</code> 是执行 CI/CD 依赖的 Docker 基础镜像。镜像中有 Node、Yarn、Dalp（内部 rsync 工具）。</li>\n<li><code>stages</code> 中定义了我们的 pipeline 分为以下几个过程:<ol>\n<li>下载依赖阶段 pre_build</li>\n<li>构建阶段 build</li>\n<li>发布阶段 deploy</li>\n</ol>\n</li>\n<li><code>stage</code> 申明当前的阶段，在 stages 中使用</li>\n<li><code>variables</code> 用于定义变量</li>\n<li><code>before_script</code> 执行 script 前的操作</li>\n<li><code>script</code> 当前 stage 需要执行的操作</li>\n<li><code>changes</code> 指定 stage 触发条件</li>\n<li><code>refs</code> 指定 stage 触发的分支</li>\n</ul>\n<p>下面具体看一下我们这个.gitlab-ci.yml文件实际的样子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">image: registry.thunisoft.com&#x2F;gitlab-ci&#x2F;node:v1.8</span><br><span class=\"line\"></span><br><span class=\"line\">variables:</span><br><span class=\"line\">  # $CI_PROJECT_PATH  ：项目id,用于项目唯一区分本项目与其它项目</span><br><span class=\"line\">  # $CI_PROJECT_DIR   ：本地项目路径</span><br><span class=\"line\">  # $PROCESS_PATH     ：临时文件目录(包括日志和一些临时文件)</span><br><span class=\"line\">  NODE_MODULES_PATH: &#x2F;runner-cache&#x2F;frontend&#x2F;$CI_PROJECT_PATH&#x2F;$CI_BUILD_REF_NAME&#x2F;node_modules</span><br><span class=\"line\"></span><br><span class=\"line\">stages:</span><br><span class=\"line\">  - pre_build # 下载依赖阶段</span><br><span class=\"line\">  - build # 构建阶段</span><br><span class=\"line\">  - deploy # 测试发布阶段</span><br><span class=\"line\"></span><br><span class=\"line\"># 下载依赖:</span><br><span class=\"line\">  before_script: # 下载依赖前准备脚本</span><br><span class=\"line\">    # 无 node_modules 文件时，新建 node_modules 文件</span><br><span class=\"line\">    - &#x2F;bin&#x2F;bash .&#x2F;ci&#x2F;mkdir.sh $NODE_MODULES_PATH</span><br><span class=\"line\">    # 软链 node_modules 到宿主机</span><br><span class=\"line\">    - ln -s $NODE_MODULES_PATH .</span><br><span class=\"line\">    - cd webpack@lixuguang-project</span><br><span class=\"line\"></span><br><span class=\"line\">  stage: pre_build</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - echo &quot;npm install&quot;</span><br><span class=\"line\">    - npm install  --network-timeout 60000 # 安装依赖</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    changes:</span><br><span class=\"line\">      - webpack@lixuguang-project&#x2F;package.json</span><br><span class=\"line\">    refs:</span><br><span class=\"line\">      - master</span><br><span class=\"line\">      - ci</span><br><span class=\"line\"></span><br><span class=\"line\"># 构建:</span><br><span class=\"line\">  stage: build</span><br><span class=\"line\">  variables:</span><br><span class=\"line\">    CI_COMMIT_BEFORE_SHA_PATH: &#x2F;mnt&#x2F;gv0&#x2F;gitlab-runner-cache&#x2F;$CI_PROJECT_PATH</span><br><span class=\"line\">    CI_COMMIT_BEFORE_SHA_FILE_NAME: $CI_BUILD_REF_NAME.sh</span><br><span class=\"line\">    CI_COMMIT_BEFORE_SHA_FILE: &#x2F;mnt&#x2F;gv0&#x2F;gitlab-runner-cache&#x2F;$CI_PROJECT_PATH&#x2F;$CI_BUILD_REF_NAME.sh</span><br><span class=\"line\">  before_script:</span><br><span class=\"line\">    # 建存此次 CI CI_COMMIT_SHA 的文件</span><br><span class=\"line\">    - &#x2F;bin&#x2F;bash .&#x2F;ci&#x2F;mkfile.sh $CI_COMMIT_BEFORE_SHA_PATH $CI_COMMIT_BEFORE_SHA_FILE_NAME</span><br><span class=\"line\">    # 软链 node_modules 到宿主机</span><br><span class=\"line\">    - ln -s $NODE_MODULES_PATH .</span><br><span class=\"line\">    - rm -rf web&#x2F;share&#x2F;*</span><br><span class=\"line\">    - cd webpack@lixuguang-projects</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    # 缓存上次ci</span><br><span class=\"line\">    - source $CI_COMMIT_BEFORE_SHA_FILE</span><br><span class=\"line\">    - echo &quot;CI_COMMIT_BEFORE_SHA&#x3D;$CI_COMMIT_SHA&quot; &gt; $CI_COMMIT_BEFORE_SHA_FILE</span><br><span class=\"line\">    - python3 ..&#x2F;ci&#x2F;build.py   # 编译</span><br><span class=\"line\">    - &#x2F;bin&#x2F;bash ..&#x2F;ci&#x2F;commit.sh   # 提交编译结果</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    changes:</span><br><span class=\"line\">      - www_src&#x2F;**&#x2F;*</span><br><span class=\"line\">    refs:</span><br><span class=\"line\">      - master</span><br><span class=\"line\">      - ci</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试发布:</span><br><span class=\"line\">  stage: deploy</span><br><span class=\"line\">  variables:</span><br><span class=\"line\">    PROCESS_PATH: &#x2F;mnt&#x2F;gv0&#x2F;gitlab-runner-cache&#x2F;deploy&#x2F;process&#x2F;$CI_JOB_ID  # 目录不要换，用于日志服务器获取日志展示</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - mkdir $PROCESS_PATH # 建立发布临时路径，存放发布配置中间文件和结果日志用</span><br><span class=\"line\">    - dplt $CI_PROJECT_DIR&#x2F;.deploy_test.yml $CI_PROJECT_PATH $CI_PROJECT_DIR&#x2F;web&#x2F; $PROCESS_PATH</span><br><span class=\"line\">    # dplt 发布yml配置</span><br><span class=\"line\">    - echo &quot;发布完成，错误日志查看http:&#x2F;&#x2F;172.18.78.11:8089&#x2F;log?path&#x3D;&quot;$PROCESS_PATH</span><br><span class=\"line\">    - echo &#96;ls $PROCESS_PATH&#x2F;*.log&#96;</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    changes:</span><br><span class=\"line\">      - web&#x2F;**&#x2F;*</span><br><span class=\"line\">    refs:</span><br><span class=\"line\">      - test</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-下载依赖阶段（pre-build-stage）\"><a href=\"#2-2-下载依赖阶段（pre-build-stage）\" class=\"headerlink\" title=\"2.2 下载依赖阶段（pre_build stage）\"></a>2.2 下载依赖阶段（pre_build stage）</h4><p>下载依赖的方案是：当 package.json 文件发生变化时，触发 pre_build stage，执行 npm install。下载的 node_modules 放在宿主机下，执行时通过软链获取依赖。</p>\n<h4 id=\"2-3-构建阶段（build-stage）\"><a href=\"#2-3-构建阶段（build-stage）\" class=\"headerlink\" title=\"2.3 构建阶段（build stage）\"></a>2.3 构建阶段（build stage）</h4><p>构建阶段，分为 3 部分</p>\n<ol>\n<li>diff 文件变化</li>\n<li>前端 build</li>\n<li>commit build 后结果</li>\n</ol>\n<h5 id=\"2-3-1-diff-文件变化\"><a href=\"#2-3-1-diff-文件变化\" class=\"headerlink\" title=\"2.3.1 diff 文件变化\"></a>2.3.1 diff 文件变化</h5><p>每次 CI 时，将当前 CI commit SHA（CI_COMMIT_SHA 变量）存在文件中，存为 CI_COMMIT_BEFORE_SHA 变量， diff 时，git diff 当前 CI 与上次 commit SHA 的变化。</p>\n<h5 id=\"2-3-2-前端-build\"><a href=\"#2-3-2-前端-build\" class=\"headerlink\" title=\"2.3.2 前端 build\"></a>2.3.2 前端 build</h5><p>根据 git diff 的变化情况，确定本次需要打包的内容。</p>\n<h5 id=\"2-3-3-commit-打包后生成的-HTML-文件\"><a href=\"#2-3-3-commit-打包后生成的-HTML-文件\" class=\"headerlink\" title=\"2.3.3 commit 打包后生成的 HTML 文件\"></a>2.3.3 commit 打包后生成的 HTML 文件</h5><p>在 GitLab CI/CD 提交代码时，使用 Git 凭证存储，提交打包后的 HTML 文件。Git 凭证存储细节可参考凭证存储文档(<a href=\"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8</a>)</p>\n<h4 id=\"2-4-发布阶段（deploy-stage）\"><a href=\"#2-4-发布阶段（deploy-stage）\" class=\"headerlink\" title=\"2.4 发布阶段（deploy stage）\"></a>2.4 发布阶段（deploy stage）</h4><p>发布阶段，使用内部的 rsync 工具 dplt 将打包后的 HTML 文件部署。dplt 可配置集群、机器列表。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>以上就是GitLab CI/CD的整个理论到实践的全部过程，实现之后你就可以解放双手了，是不是超爽。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>持续集成是什么？(<a href=\"http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html</a>)</p>\n<p>什么是 CI/CD？(<a href=\"https://www.redhat.com/zh/topics/devops/what-is-ci-cd\" target=\"_blank\" rel=\"noopener\">https://www.redhat.com/zh/topics/devops/what-is-ci-cd</a>)</p>\n<p>GitLab Docs(<a href=\"https://docs.gitlab.com/\" target=\"_blank\" rel=\"noopener\">https://docs.gitlab.com/</a>)</p>\n<p>Introduction to CI/CD with GitLab(<a href=\"https://docs.gitlab.com/ee/ci/introduction/\" target=\"_blank\" rel=\"noopener\">https://docs.gitlab.com/ee/ci/introduction/</a>)</p>\n<p>用 GitLab CI 进行持续集成(<a href=\"https://scarletsky.github.io/2016/07/29/use-gitlab-ci-for-continuous-integration/\" target=\"_blank\" rel=\"noopener\">https://scarletsky.github.io/2016/07/29/use-gitlab-ci-for-continuous-integration/</a>)</p>\n<p>如何实现前端工程的持续集成与持续部署？(<a href=\"https://www.zhihu.com/question/60194439\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/60194439</a>)</p>\n<p>基于 GitLab CI 的前端工程CI/CD实践(<a href=\"https://github.com/giscafer/front-end-manual/issues/27\" target=\"_blank\" rel=\"noopener\">https://github.com/giscafer/front-end-manual/issues/27</a>)</p>"},{"_content":"# 学习Go语言小记\n","source":"_posts/learn-go.md","raw":"# 学习Go语言小记\n","slug":"learn-go","published":1,"date":"2020-11-10T14:42:36.679Z","updated":"2020-11-10T14:42:36.679Z","title":"learn-go","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs4y0062ooa6esk43da4","content":"<h1 id=\"学习Go语言小记\"><a href=\"#学习Go语言小记\" class=\"headerlink\" title=\"学习Go语言小记\"></a>学习Go语言小记</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"学习Go语言小记\"><a href=\"#学习Go语言小记\" class=\"headerlink\" title=\"学习Go语言小记\"></a>学习Go语言小记</h1>"},{"title":"如何解决npm安装node-sass依赖慢的情况","date":"2020-04-15T15:24:49.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n现代前端开发不用点预编译css都不好意思说自己咋写样式，虽说这么说有点夸张，但是确实是一个普遍现象吧，我们在开发中常见到的预编译css的话主要是sass和less，那么今天的主角就是其中的sass，可以说sass让人又爱又恨，爱呢是喜欢她赋予了css函数的特性，恨呢就是用的时候实在是麻烦，所以有的人就投奔了less的怀抱，他俩很像，但是有的项目已经用了sass那也没办法，嫁鸡随鸡，但是日子还得过，想办法过的好一点嘛。\n\n其实这里说到sass用起来麻烦主要还是在安装依赖的时候，想必用过的人都知道我说的是啥，原来只能是不停的重试，最近在知乎上看到篇文章，聪明的解决了这个问题，所以赶紧学习记录下来，学会了就是自己的。\n<!-- more -->\n\n## 问题\n在使用sass时要安装node-sass包，但是这个npm包安装不尽慢的要命，下载下来之后还要进行编译，编译环境不合适或者网速不好的时候，光为了这个包的使用花上个把小时绝对正常，记得第一次折腾他用了小半天的时间。\n\n那么有没有什么方法可以解决这个问题呢？\n\n有痛点就会有人想办法解决，但是包名已经占用了，想用的话还是要有点配置的代价，但总好过编译和下载\n\n## 解决方案\n首先我这里假设你是知道 yarn 这个工具的，对的，接下来我们要用 yarn 进行安装，但是安装的不是 node-sass ，而是一个叫做 node-sass-install 的这个包， 安装他的话就不用在安装 node-sass 这个包了，通常来说安装这个包不会超过10s ， 当然网速不好的话超过10s了也别怪我，总之要比装 node-sass 要快上很多，命令如下：\n``` js\nyarn add node-sass-install\n```\n是不是很简单，当然如果你觉得为了安装 node-sass 还要再装个 yarn （鄙视你居然不用 yarn ），那你也可以用 npm 安装，命令稍有不同，长了一点\n``` js\nnpm install node-sass-install -D\nnpx node-sass-install\n```\n比 yarn 多了一条命令，那么他为啥这么神奇呢，且听我分析一下\n\n## 原理\n这个 node-sass-install 其实只是在 package.json 的 dependencies 中做了一些配置，如下：\n``` js\n{\n  \"dependencies\":{\n    \"node-sass\":\"npm:dart-sass@latest\"\n  }\n}\n```\n上面这个配置的意思是，当你安装 node-sass-install 的时候，会依赖并下载 dart-sass， 然后起了个别名叫做 node-sass。偷梁换柱，狸猫换太子了，哈哈。\n所以的所以呢，如果你在项目中用到 sass 的话建议你尝试一下新方法，说不定更香呢～","source":"_posts/node-sass-slow-problem.md","raw":"---\ntitle: 如何解决npm安装node-sass依赖慢的情况\ndate: 2020-04-15 23:24:49\ncategories: \n  - node\ntags:\n\t- sass\n---\n> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n现代前端开发不用点预编译css都不好意思说自己咋写样式，虽说这么说有点夸张，但是确实是一个普遍现象吧，我们在开发中常见到的预编译css的话主要是sass和less，那么今天的主角就是其中的sass，可以说sass让人又爱又恨，爱呢是喜欢她赋予了css函数的特性，恨呢就是用的时候实在是麻烦，所以有的人就投奔了less的怀抱，他俩很像，但是有的项目已经用了sass那也没办法，嫁鸡随鸡，但是日子还得过，想办法过的好一点嘛。\n\n其实这里说到sass用起来麻烦主要还是在安装依赖的时候，想必用过的人都知道我说的是啥，原来只能是不停的重试，最近在知乎上看到篇文章，聪明的解决了这个问题，所以赶紧学习记录下来，学会了就是自己的。\n<!-- more -->\n\n## 问题\n在使用sass时要安装node-sass包，但是这个npm包安装不尽慢的要命，下载下来之后还要进行编译，编译环境不合适或者网速不好的时候，光为了这个包的使用花上个把小时绝对正常，记得第一次折腾他用了小半天的时间。\n\n那么有没有什么方法可以解决这个问题呢？\n\n有痛点就会有人想办法解决，但是包名已经占用了，想用的话还是要有点配置的代价，但总好过编译和下载\n\n## 解决方案\n首先我这里假设你是知道 yarn 这个工具的，对的，接下来我们要用 yarn 进行安装，但是安装的不是 node-sass ，而是一个叫做 node-sass-install 的这个包， 安装他的话就不用在安装 node-sass 这个包了，通常来说安装这个包不会超过10s ， 当然网速不好的话超过10s了也别怪我，总之要比装 node-sass 要快上很多，命令如下：\n``` js\nyarn add node-sass-install\n```\n是不是很简单，当然如果你觉得为了安装 node-sass 还要再装个 yarn （鄙视你居然不用 yarn ），那你也可以用 npm 安装，命令稍有不同，长了一点\n``` js\nnpm install node-sass-install -D\nnpx node-sass-install\n```\n比 yarn 多了一条命令，那么他为啥这么神奇呢，且听我分析一下\n\n## 原理\n这个 node-sass-install 其实只是在 package.json 的 dependencies 中做了一些配置，如下：\n``` js\n{\n  \"dependencies\":{\n    \"node-sass\":\"npm:dart-sass@latest\"\n  }\n}\n```\n上面这个配置的意思是，当你安装 node-sass-install 的时候，会依赖并下载 dart-sass， 然后起了个别名叫做 node-sass。偷梁换柱，狸猫换太子了，哈哈。\n所以的所以呢，如果你在项目中用到 sass 的话建议你尝试一下新方法，说不定更香呢～","slug":"node-sass-slow-problem","published":1,"updated":"2020-04-15T15:24:15.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs500065ooa6edincbxr","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>现代前端开发不用点预编译css都不好意思说自己咋写样式，虽说这么说有点夸张，但是确实是一个普遍现象吧，我们在开发中常见到的预编译css的话主要是sass和less，那么今天的主角就是其中的sass，可以说sass让人又爱又恨，爱呢是喜欢她赋予了css函数的特性，恨呢就是用的时候实在是麻烦，所以有的人就投奔了less的怀抱，他俩很像，但是有的项目已经用了sass那也没办法，嫁鸡随鸡，但是日子还得过，想办法过的好一点嘛。</p>\n<p>其实这里说到sass用起来麻烦主要还是在安装依赖的时候，想必用过的人都知道我说的是啥，原来只能是不停的重试，最近在知乎上看到篇文章，聪明的解决了这个问题，所以赶紧学习记录下来，学会了就是自己的。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>在使用sass时要安装node-sass包，但是这个npm包安装不尽慢的要命，下载下来之后还要进行编译，编译环境不合适或者网速不好的时候，光为了这个包的使用花上个把小时绝对正常，记得第一次折腾他用了小半天的时间。</p>\n<p>那么有没有什么方法可以解决这个问题呢？</p>\n<p>有痛点就会有人想办法解决，但是包名已经占用了，想用的话还是要有点配置的代价，但总好过编译和下载</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>首先我这里假设你是知道 yarn 这个工具的，对的，接下来我们要用 yarn 进行安装，但是安装的不是 node-sass ，而是一个叫做 node-sass-install 的这个包， 安装他的话就不用在安装 node-sass 这个包了，通常来说安装这个包不会超过10s ， 当然网速不好的话超过10s了也别怪我，总之要比装 node-sass 要快上很多，命令如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add node-sass-install</span><br></pre></td></tr></table></figure>\n<p>是不是很简单，当然如果你觉得为了安装 node-sass 还要再装个 yarn （鄙视你居然不用 yarn ），那你也可以用 npm 安装，命令稍有不同，长了一点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install node-sass-install -D</span><br><span class=\"line\">npx node-sass-install</span><br></pre></td></tr></table></figure>\n<p>比 yarn 多了一条命令，那么他为啥这么神奇呢，且听我分析一下</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>这个 node-sass-install 其实只是在 package.json 的 dependencies 中做了一些配置，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>:&#123;</span><br><span class=\"line\">    <span class=\"string\">\"node-sass\"</span>:<span class=\"string\">\"npm:dart-sass@latest\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这个配置的意思是，当你安装 node-sass-install 的时候，会依赖并下载 dart-sass， 然后起了个别名叫做 node-sass。偷梁换柱，狸猫换太子了，哈哈。<br>所以的所以呢，如果你在项目中用到 sass 的话建议你尝试一下新方法，说不定更香呢～</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>现代前端开发不用点预编译css都不好意思说自己咋写样式，虽说这么说有点夸张，但是确实是一个普遍现象吧，我们在开发中常见到的预编译css的话主要是sass和less，那么今天的主角就是其中的sass，可以说sass让人又爱又恨，爱呢是喜欢她赋予了css函数的特性，恨呢就是用的时候实在是麻烦，所以有的人就投奔了less的怀抱，他俩很像，但是有的项目已经用了sass那也没办法，嫁鸡随鸡，但是日子还得过，想办法过的好一点嘛。</p>\n<p>其实这里说到sass用起来麻烦主要还是在安装依赖的时候，想必用过的人都知道我说的是啥，原来只能是不停的重试，最近在知乎上看到篇文章，聪明的解决了这个问题，所以赶紧学习记录下来，学会了就是自己的。</p>","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>在使用sass时要安装node-sass包，但是这个npm包安装不尽慢的要命，下载下来之后还要进行编译，编译环境不合适或者网速不好的时候，光为了这个包的使用花上个把小时绝对正常，记得第一次折腾他用了小半天的时间。</p>\n<p>那么有没有什么方法可以解决这个问题呢？</p>\n<p>有痛点就会有人想办法解决，但是包名已经占用了，想用的话还是要有点配置的代价，但总好过编译和下载</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>首先我这里假设你是知道 yarn 这个工具的，对的，接下来我们要用 yarn 进行安装，但是安装的不是 node-sass ，而是一个叫做 node-sass-install 的这个包， 安装他的话就不用在安装 node-sass 这个包了，通常来说安装这个包不会超过10s ， 当然网速不好的话超过10s了也别怪我，总之要比装 node-sass 要快上很多，命令如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add node-sass-install</span><br></pre></td></tr></table></figure>\n<p>是不是很简单，当然如果你觉得为了安装 node-sass 还要再装个 yarn （鄙视你居然不用 yarn ），那你也可以用 npm 安装，命令稍有不同，长了一点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install node-sass-install -D</span><br><span class=\"line\">npx node-sass-install</span><br></pre></td></tr></table></figure>\n<p>比 yarn 多了一条命令，那么他为啥这么神奇呢，且听我分析一下</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>这个 node-sass-install 其实只是在 package.json 的 dependencies 中做了一些配置，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>:&#123;</span><br><span class=\"line\">    <span class=\"string\">\"node-sass\"</span>:<span class=\"string\">\"npm:dart-sass@latest\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这个配置的意思是，当你安装 node-sass-install 的时候，会依赖并下载 dart-sass， 然后起了个别名叫做 node-sass。偷梁换柱，狸猫换太子了，哈哈。<br>所以的所以呢，如果你在项目中用到 sass 的话建议你尝试一下新方法，说不定更香呢～</p>"},{"title":"从零开始：学习Cordova","date":"2020-11-09T16:00:00.000Z","_content":"\n> 作者：李旭光\n> 引用请标明出处\n\n## 前言\n\n很长时间没有写博客了，因为最近换了工作，原来的技术栈基本上都换了，现在接触了很多新的技术栈，`Cordova` 就是其中之一。\n\n接下来这篇文章就是我的学习笔记，以供回顾，写的不好请勿拍砖。\n\n<!-- more -->\n## 一、What is Cordova？ Cordova是个啥？\n移动端开发和web开发有一些不一样，web端开发面向的是浏览器，而移动端开发面向的是各种移动设备，那么针对各种移动设备提供的SDK进行开发的话，我们通常称之为`原生开发`，原生开发虽然通常调用底层api，性能更好，但是因为不同移动终端底层技术不一样，所以每种设备都要单独开发，这样开发成本和能力要求都比较高，所以通常都会有一些框架来兼容各种平台，就好比java虚拟机可以运行在mac/windows/linux一样，为了能够写一套移动端代码可以在各种设备中使用，于是乎就有了Cordova，上面说了这么一堆废话，其实简言之，Cordova就是提供了跨设备调用底层Api的移动端开发框架（这种开发方式又叫做Hybird 模式）知道这一点应该就够了，当然这是我认为的。\n\nCordova的官网地址如下\n> https://cordova.apache.org/\n\n其实从这里就可以看出，Cordova是apache基金下的source，其官网是这样介绍它的\n> Mobile apps with HTML, CSS & JS\nTarget multiple platforms with one code base\nFree and open source\n\n翻译成中文的话就是\n> 使用Html，CSS和JS进行移动端应用开发\n一份代码多平台使用\n免费并且开源\n\n三句话解释了Cordova的三个方面，\n- 使用前端技术开发-对前端开发友好\n- 跨平台-节省开发工时，降低开发难度-从图标看支持Android/ios/windowphone三大平台\n- 免费不用解释开源的话意味着会有很多人贡献代码\n\n以上奠定了Cordova强大及流行的基础。\n\n## 二、快速上手\n在使用Cordova做移动端开发之前需要做一些环境准备工作，因为它是使用nodejs开发的所以首先要安装node以及它携带的npm包管理器，这个现代的前端开发应该都知道，我这里就不多说了，装它就完了。\n\n装好之后我们就要用npm全局安装一下Cordova项目的依赖，命令很简单；\n方便的话还要装一下git，因为一些命令要在gitcmd上执行，当然管理代码也是需要它的，所以装吧。\n``` js\nnpm install -g cordova\n```\n就这么简单就可以开发Cordova应用了，接下来我们要创建一个项目，创建项目的命令也十分简单。在命令行工具中输入下面的命令你就创建了一个Cordova的应用\n``` js\ncordova create <path> // 这里的path是项目的路径\n```\n如果要查看创建项目时还能设置什么参数你可以执行下面的命令\n``` js\ncordova help create\n```\n怎么样是不是超级简单。\n做了上面的工作你就创建了一个具备基本功能的Cordova项目，接下来我们要给项目配置一些东西。\n\n首先刚才讲到了，Cordova是一个跨平台的框架，那么你的项目要适配什么平台你需要进行一些配置，cd到项目目录下执行下面的命令\n``` js\ncordova platform add <platform name> // platform name 为适配平台的名称\n```\n如果不知道名称是什么命令行工具也贴心的给了查询用的命令，通过此命令你可以看到你安装了什么平台的适配，有哪些可以用\n``` js\ncordova platform\n\n```\n执行了这个命令你将看到下面这样的list\n``` js\n/***\nInstalled platforms:\nAvailable platforms:\n  android ^9.0.0\n  browser ^6.0.0\n  electron ^1.0.0\n  windows ^7.0.0\n*/\n```\n项目也创建了，简单的配置工作也完成了，我们可以启动项目看一下效果了，那么我们就该执行运行项目的命令了\n``` js\ncordova run <platform name> // platform name 适配平台的名称\n```\n到这我们就快速的创建并运行起了一个Cordova的工程。\n\n### 小Tip\n如上执行启动命令后，默认会启动8000端口，如果被占用的话可以通过增加命令行参数的形式改变端口号，参数如下设置\n``` js\ncordova run browser --target=chrome --port=9090\n```\n以上就可以自定义端口及浏览器启动应用了。\n## 三、详细了解\n### 1、概览\n官网开头介绍了Cordova的身世和适用范围，前面开头已经讲过了不想再讲，直接看看Cordova的架构设计图。\n[此处是个架构图]()\n这个图理解起来不难，大的方面是两个部分，底层是MobileOS，也就是手机的操作系统本身，上层是由Cordova构建的框架；\nCordova内部的话是两层结构：上层的话是由前端代码构成的webapp部分；下层是Cordova的视图渲染引擎，它为webapp提供了HtmlApi和CordovaApi，也就是说我们可以调用html的原生api也可以使用cordova提供的jsApi；\nCordova还提供了丰富的插件系统；通过Cordova的视图引擎调用Cordova的nativeApi来调用一些Cordova提供好的调用设备的信息的Api，另外也可以调用一些用户自定义的Api；\nCordova视图引擎和插件系统再将上层的需求通过MobileOS开放的api能力实现具体功能，由此完成了整个Cordova框架的使用；\n\n总的来说这个原理跟大多数跨平台的框架原理都类似，由框架提供统一的API能力，再由框架处理不同平台的兼容，这里特别之处在于渲染引擎可以允许使用前端原生的api，这将大大降低开发的难度。\n\n#### WebView\n说到移动端开发，不知道WebView应该是不可能的，在原生移动应用中，WebView就是移动应用内部嵌入的一个‘浏览器’，它可以允许你使用前端技术展示内容。\n#### WebApp\nWebApp跟WebView两个词有些像，事实上它们也确实有些关系，WebApp从名字就可以看出是使用Web技术开发的App，那么它跟WebView是什么关系呢，打个比方，WebView就是个快递盒子，WebApp就是你买的商品，一个是容器，一个是内容；这样说应该就明白了吧，通过前端技术开发的App通过WebView嵌入到App中，就可以带给用户原生应用的体验，忘了说WebApp是只能用浏览器访问的App；\n\n和纯WebApp不同，嵌入到WebView中的WebApp需要有一个配置文件，`config.xml` ，它在项目的根目录下，说明了应用的一些信息，这个文件必不可少！！！\n#### 插件系统\n刚刚在上面的架构图中我们介绍了Cordova的插件系统，它提供了我们通过js调用MobileApi的能力，如电源，相机，联系人等等；官方维护了核心的功能，当然如果你愿意也可以调用一些第三方提供的插件，你可以方便的通过npm包管理器安装；\n***但是有一点必须要说：项目创建后默认是不带任何插件的，即使是官方的核心插件也是需要你自己导入进去，第三方的更不用说了，另外Cordova只提供了功能Api并不包含任何的UI部件和MV框架（你可以根据自己喜欢使用Angular或者Vue或者其他什么都可以），这一点要牢记。\n#### 开发工作流\n使用Cordova开发MobileApp的时候即可以开发多个平台的app（一次开发多平台可用，降低开发成本），也可以专注开发某一平台的app（使用前端技术开发，降低开发难度），因此开发工作流也分为两种：\n##### 跨平台(CLI)的工作流\n官网上说了很多，也不难理解，这里用我自己的话说就是，Cordova提供了一个牛叉的CLI工具，它可以自动的完成一次编码多平台构建的事，你只需要按照它说的方式开发就行。：）\n##### 平台为中心的工作流\n这里不得不说我没有看很明白，但是结合下面的注意事项我是这样理解的，因为只为某一平台服务，所以有一些针对此平台的特殊的功能或者插件你就可以使用了（虽然不太清楚为什么这么做，如果你知道告诉我，谢谢），但是一旦使用了这种开发方式，那么就回不到跨平台开发了，因为你使用了针对某一平台才能调用的代码，这也不难理解，从字里行间感觉就是不建议使用这种开发工作流（好的好的，知道了）。\n\n好的，接下来开发App啦；\n\n### 2、开发应用\n快速上手中已经介绍了如何准备、创建和启动应用，如何添加平台，这里就不多说了。说些没讲过的。\n上面说过检查目前平台安装情况的话可以使用下面的命令\n``` js\ncordova platforms\n```\n我们也可以使用另一个命令来看，我试验了一下，效果是一样的。。。（问号脸，一样的为什么搞两个命令）\n``` js\ncordova platform ls\n```\n** 事后我发现，无论我使用的命令是 `platform` 还是 `platforms` 加不加 `ls` 都可以查到当前安装的平台。。。 啊~兼容性好强。\n\n每执行一次 `add` 命令，你就会发现工程目录下的 `platforms` 目录下就对应生成了一个对应平台的文件夹，切勿手贱删除，你虽然删除了文件夹，但是各处设置的platform并没有去掉，会导致报错，如果要删除请使用 `remove` 命令。 想知道还有哪些命令的话就看下面的链接吧。⇒ [命令大全](http://cordova.axuer.com/docs/zh-cn/latest/reference/cordova-cli/index.html#cordova-platform-command)\n\n### 安装构建的先决条件\n因为Cordova的底层还是要调用MobileOS的接口，所以各平台的SDK是必须要装的，当然这里指的是你要进行构建的平台，比如你要构建Android应用，那么你就要装Android的SDK，ios同理。**这里有一个例外**`broswer`平台是不需要依赖其他SDK的（明明是开发APP，这里只是为了验证画面比较方便）\n要看你是否满足了构建需要的依赖，可以执行下面的命令查看\n``` js\ncordova requirements\n```\n执行完后你会得到如下结果\n``` js\nRequirements check results for android:\nJava JDK: installed .\nAndroid SDK: installed\nAndroid target: installed android-19,android-21,android-22,android-23,Google Inc.:Google APIs:19,Google Inc.:Google APIs (x86 System Image):19,Google Inc.:Google APIs:23\nGradle: installed\n\nRequirements check results for ios:\nApple OS X: not installed\nCordova tooling for iOS requires Apple OS X\nError: Some of requirements check failed\n```\n这样你就可以清楚的知道自己需要安装哪些依赖才能完成对应平台的构建，简直方便的不要不要的。\n具体想知道不同的平台都依赖些什么，你可以参见下面的链接；\n* [Android平台的要求](http://cordova.axuer.com/docs/zh-cn/latest/guide/platforms/android/index.html#requirements-and-support)\n* [iOS平台的要求](http://cordova.axuer.com/docs/zh-cn/latest/guide/platforms/ios/index.html#requirements-and-support)\n* [Windows平台的要求](http://cordova.axuer.com/docs/zh-cn/latest/guide/platforms/win8/index.html#requirements-and-support)\n\n### 构建App\n在 `create` 项目之后，项目的根目录下会生成一个 `www` 目录，这个目录包含了 `webapp` 的入口页面 `index.html` ，入口文件的话是 `www/js/index.js` 文件的 `deviceready` 事件中。\n\n如果要构建代码的话，执行下面的命令\n``` js\ncordova build\n```\n这个命令会构建你安装的所有平台，如果只想构建某一平台的话，可以把平台的名字加在命令后面，如\n``` js\ncordova build ios\n```\n如果想了解更多的参数的话，可以看一下后面的链接。⇒ [更多参数](http://cordova.axuer.com/docs/zh-cn/latest/reference/cordova-cli/index.html#cordova-build-command)\n\n### 测试App\n构建完app之后我们就可以测试了，通常各平台的SDK中会提供模拟器，我们只需要执行下面的命令就可以启动模拟器。\n``` js\ncordova emulate android\n```\n当然如果你觉得用实机查看更自然一些的话，也可以把手机插上数据线与电脑建立连接，然后执行下面的命令就可以了。\n``` js\ncordova run android\n```\n上面演示的是 Android 的app测试过程，每个平台虽然基本类似，但还是有出入，所以，下面提供了不同平台的调试方法，供你预览。\n* [设置Android模拟器](http://cordova.axuer.com/docs/zh-cn/latest/guide/platforms/android/index.html#setting-up-an-emulator)\n* [Cordova run 命令参考文档](http://cordova.axuer.com/docs/zh-cn/latest/reference/cordova-cli/index.html#cordova-run-command)\n* [Cordova emulate 命令参考文档](http://cordova.axuer.com/docs/zh-cn/latest/reference/cordova-cli/index.html#cordova-emulate-command)\n\n### 添加插件\n如果只是开发一个Cordova框架的webapp，那么你不需要装任何插件，直接用前端技术开发就好了，但是应该没人会这么做吧，毕竟开发这个的目的就是为了跨平台开发原生级移动App，因此要调用移动设备的各种功能就必须安装插件。\n\n#### 插件\nCordova 插件是一些使用Javascript调用原生SDK功能的包；你可以使用两种方式找到你想要的插件\n1. 通过Cordova提供的包管理平台 ⇒ [插件搜索页](http://cordova.axuer.com/plugins/)\n2. 通过命令行搜索 `cordova plugin search camera`\n\n选好你要安装的插件之后你需要执行下面的命令来安装它\n``` js\ncordova plugin add <plugin name> // 如 cordova plugin add cordova-plugin-chrome-apps-proxy\n```\n如果你的包没有发布在Cordova的平台上，也可以使用git地址来安装。\n另外Cordova还非常贴心的提供了一个工具 `Plugman` 来帮助开发者更好的管理Cordova插件。⇒ [Plugman参考](http://cordova.axuer.com/docs/zh-cn/latest/plugin_ref/plugman.html)\n\n如果要查看你安装了哪些插件可以使用下面任意一种命令都可以。（咱也不知道为啥提供这么多方式，反正好用无脑）\n``` js\nplugin ls\nplugin list\nplugin\n\n/**\n$ cordova plugin ls\ncordova-plugin-whitelist 1.2.1 \"Whitelist\"\n*/\n```\n如果想知道更多关于 plugin 的命令参数，可以看右边的链接 ⇒ [plugin参数](http://cordova.axuer.com/docs/zh-cn/latest/reference/cordova-cli/index.html#cordova-plugin-command)\n\n#### 使用 `merges` 自定义每个平台\n虽然可以用一套代码来构建多个平台，但一些平台会有自己的特点，就好像chrome浏览器默认的字体大小与IE的不同，Android与IOS也有不一样的地方，这种情况下去改 www 目录下的文件显然是不合适的，所以 Cordova 提供了 merges 方式来适配不同平台各自的特别处理，你要做的就是在项目的根目录下创建一个 merges 目录，比如你要适配Android，你就可以在 merges 下创建一个 android 目录，然后在下面或覆盖或添加新的资源。（这里官网没有说merges在哪里创建，试验后发现是在根目录下）\n\n#### 更新Cordova和你的项目\n如果你要更新你的Cordova（通常不建议这么干，当然你知道后果并想要使用新的特性或者修正bug除外），那么你需要执行一下 update 命令\n``` js\nsudo npm update -g cordova\n```\n当然你也可以指定更新到什么版本（这都是npm的知识了）\n``` js\nsudo npm install -g cordova@3.1.0-0.2.0\n```\n你也可以使用下面的命令查看当前的版本（还是npm的知识）\n``` js\nnpm info cordova version\n```\n你是不是以为这样就可以了，不好意思还不行，你还需要把各个平台进行一下升级\n``` js\ncordova platform update android --save\ncordova platform update ios --save\n// ...\n```\n其实这也好理解，你都已经轿车换SUV了，总不能还用原来的车轱辘吧，只是我希望能不能在换车的时候一块儿把车轱辘换了（这里的意思是希望直接自动化处理了）\n\n到这里你的第一个 `App` 就已经开发好了，是不是还有点成就感。\n\n### 一些参考资料\n到这里一个简单的基于 `Cordova` 搭建的 `App` 就实现了，当然一个 `App` 绝不这么简单，各平台的 `SDK` 安装也没那么简单，但这不是本篇文章要说的事了，下一篇文章我会说说如何应对各种不同的开发平台，在这之前还请你看一下 `Cordova` 都支持哪些平台，具体看一下下面的链接。\n好了，今天就先写到这里，下篇文章我们再见。\n\n[平台支持](http://cordova.axuer.com/docs/zh-cn/latest/guide/support/index.html)\n\n（待续...）\n\n","source":"_posts/learn-cordova.md","raw":"---\ntitle: 从零开始：学习Cordova\ndate: 2020-11-10\ncategories: \n  - 移动开发\ntags: \n  - Cordova\n---\n\n> 作者：李旭光\n> 引用请标明出处\n\n## 前言\n\n很长时间没有写博客了，因为最近换了工作，原来的技术栈基本上都换了，现在接触了很多新的技术栈，`Cordova` 就是其中之一。\n\n接下来这篇文章就是我的学习笔记，以供回顾，写的不好请勿拍砖。\n\n<!-- more -->\n## 一、What is Cordova？ Cordova是个啥？\n移动端开发和web开发有一些不一样，web端开发面向的是浏览器，而移动端开发面向的是各种移动设备，那么针对各种移动设备提供的SDK进行开发的话，我们通常称之为`原生开发`，原生开发虽然通常调用底层api，性能更好，但是因为不同移动终端底层技术不一样，所以每种设备都要单独开发，这样开发成本和能力要求都比较高，所以通常都会有一些框架来兼容各种平台，就好比java虚拟机可以运行在mac/windows/linux一样，为了能够写一套移动端代码可以在各种设备中使用，于是乎就有了Cordova，上面说了这么一堆废话，其实简言之，Cordova就是提供了跨设备调用底层Api的移动端开发框架（这种开发方式又叫做Hybird 模式）知道这一点应该就够了，当然这是我认为的。\n\nCordova的官网地址如下\n> https://cordova.apache.org/\n\n其实从这里就可以看出，Cordova是apache基金下的source，其官网是这样介绍它的\n> Mobile apps with HTML, CSS & JS\nTarget multiple platforms with one code base\nFree and open source\n\n翻译成中文的话就是\n> 使用Html，CSS和JS进行移动端应用开发\n一份代码多平台使用\n免费并且开源\n\n三句话解释了Cordova的三个方面，\n- 使用前端技术开发-对前端开发友好\n- 跨平台-节省开发工时，降低开发难度-从图标看支持Android/ios/windowphone三大平台\n- 免费不用解释开源的话意味着会有很多人贡献代码\n\n以上奠定了Cordova强大及流行的基础。\n\n## 二、快速上手\n在使用Cordova做移动端开发之前需要做一些环境准备工作，因为它是使用nodejs开发的所以首先要安装node以及它携带的npm包管理器，这个现代的前端开发应该都知道，我这里就不多说了，装它就完了。\n\n装好之后我们就要用npm全局安装一下Cordova项目的依赖，命令很简单；\n方便的话还要装一下git，因为一些命令要在gitcmd上执行，当然管理代码也是需要它的，所以装吧。\n``` js\nnpm install -g cordova\n```\n就这么简单就可以开发Cordova应用了，接下来我们要创建一个项目，创建项目的命令也十分简单。在命令行工具中输入下面的命令你就创建了一个Cordova的应用\n``` js\ncordova create <path> // 这里的path是项目的路径\n```\n如果要查看创建项目时还能设置什么参数你可以执行下面的命令\n``` js\ncordova help create\n```\n怎么样是不是超级简单。\n做了上面的工作你就创建了一个具备基本功能的Cordova项目，接下来我们要给项目配置一些东西。\n\n首先刚才讲到了，Cordova是一个跨平台的框架，那么你的项目要适配什么平台你需要进行一些配置，cd到项目目录下执行下面的命令\n``` js\ncordova platform add <platform name> // platform name 为适配平台的名称\n```\n如果不知道名称是什么命令行工具也贴心的给了查询用的命令，通过此命令你可以看到你安装了什么平台的适配，有哪些可以用\n``` js\ncordova platform\n\n```\n执行了这个命令你将看到下面这样的list\n``` js\n/***\nInstalled platforms:\nAvailable platforms:\n  android ^9.0.0\n  browser ^6.0.0\n  electron ^1.0.0\n  windows ^7.0.0\n*/\n```\n项目也创建了，简单的配置工作也完成了，我们可以启动项目看一下效果了，那么我们就该执行运行项目的命令了\n``` js\ncordova run <platform name> // platform name 适配平台的名称\n```\n到这我们就快速的创建并运行起了一个Cordova的工程。\n\n### 小Tip\n如上执行启动命令后，默认会启动8000端口，如果被占用的话可以通过增加命令行参数的形式改变端口号，参数如下设置\n``` js\ncordova run browser --target=chrome --port=9090\n```\n以上就可以自定义端口及浏览器启动应用了。\n## 三、详细了解\n### 1、概览\n官网开头介绍了Cordova的身世和适用范围，前面开头已经讲过了不想再讲，直接看看Cordova的架构设计图。\n[此处是个架构图]()\n这个图理解起来不难，大的方面是两个部分，底层是MobileOS，也就是手机的操作系统本身，上层是由Cordova构建的框架；\nCordova内部的话是两层结构：上层的话是由前端代码构成的webapp部分；下层是Cordova的视图渲染引擎，它为webapp提供了HtmlApi和CordovaApi，也就是说我们可以调用html的原生api也可以使用cordova提供的jsApi；\nCordova还提供了丰富的插件系统；通过Cordova的视图引擎调用Cordova的nativeApi来调用一些Cordova提供好的调用设备的信息的Api，另外也可以调用一些用户自定义的Api；\nCordova视图引擎和插件系统再将上层的需求通过MobileOS开放的api能力实现具体功能，由此完成了整个Cordova框架的使用；\n\n总的来说这个原理跟大多数跨平台的框架原理都类似，由框架提供统一的API能力，再由框架处理不同平台的兼容，这里特别之处在于渲染引擎可以允许使用前端原生的api，这将大大降低开发的难度。\n\n#### WebView\n说到移动端开发，不知道WebView应该是不可能的，在原生移动应用中，WebView就是移动应用内部嵌入的一个‘浏览器’，它可以允许你使用前端技术展示内容。\n#### WebApp\nWebApp跟WebView两个词有些像，事实上它们也确实有些关系，WebApp从名字就可以看出是使用Web技术开发的App，那么它跟WebView是什么关系呢，打个比方，WebView就是个快递盒子，WebApp就是你买的商品，一个是容器，一个是内容；这样说应该就明白了吧，通过前端技术开发的App通过WebView嵌入到App中，就可以带给用户原生应用的体验，忘了说WebApp是只能用浏览器访问的App；\n\n和纯WebApp不同，嵌入到WebView中的WebApp需要有一个配置文件，`config.xml` ，它在项目的根目录下，说明了应用的一些信息，这个文件必不可少！！！\n#### 插件系统\n刚刚在上面的架构图中我们介绍了Cordova的插件系统，它提供了我们通过js调用MobileApi的能力，如电源，相机，联系人等等；官方维护了核心的功能，当然如果你愿意也可以调用一些第三方提供的插件，你可以方便的通过npm包管理器安装；\n***但是有一点必须要说：项目创建后默认是不带任何插件的，即使是官方的核心插件也是需要你自己导入进去，第三方的更不用说了，另外Cordova只提供了功能Api并不包含任何的UI部件和MV框架（你可以根据自己喜欢使用Angular或者Vue或者其他什么都可以），这一点要牢记。\n#### 开发工作流\n使用Cordova开发MobileApp的时候即可以开发多个平台的app（一次开发多平台可用，降低开发成本），也可以专注开发某一平台的app（使用前端技术开发，降低开发难度），因此开发工作流也分为两种：\n##### 跨平台(CLI)的工作流\n官网上说了很多，也不难理解，这里用我自己的话说就是，Cordova提供了一个牛叉的CLI工具，它可以自动的完成一次编码多平台构建的事，你只需要按照它说的方式开发就行。：）\n##### 平台为中心的工作流\n这里不得不说我没有看很明白，但是结合下面的注意事项我是这样理解的，因为只为某一平台服务，所以有一些针对此平台的特殊的功能或者插件你就可以使用了（虽然不太清楚为什么这么做，如果你知道告诉我，谢谢），但是一旦使用了这种开发方式，那么就回不到跨平台开发了，因为你使用了针对某一平台才能调用的代码，这也不难理解，从字里行间感觉就是不建议使用这种开发工作流（好的好的，知道了）。\n\n好的，接下来开发App啦；\n\n### 2、开发应用\n快速上手中已经介绍了如何准备、创建和启动应用，如何添加平台，这里就不多说了。说些没讲过的。\n上面说过检查目前平台安装情况的话可以使用下面的命令\n``` js\ncordova platforms\n```\n我们也可以使用另一个命令来看，我试验了一下，效果是一样的。。。（问号脸，一样的为什么搞两个命令）\n``` js\ncordova platform ls\n```\n** 事后我发现，无论我使用的命令是 `platform` 还是 `platforms` 加不加 `ls` 都可以查到当前安装的平台。。。 啊~兼容性好强。\n\n每执行一次 `add` 命令，你就会发现工程目录下的 `platforms` 目录下就对应生成了一个对应平台的文件夹，切勿手贱删除，你虽然删除了文件夹，但是各处设置的platform并没有去掉，会导致报错，如果要删除请使用 `remove` 命令。 想知道还有哪些命令的话就看下面的链接吧。⇒ [命令大全](http://cordova.axuer.com/docs/zh-cn/latest/reference/cordova-cli/index.html#cordova-platform-command)\n\n### 安装构建的先决条件\n因为Cordova的底层还是要调用MobileOS的接口，所以各平台的SDK是必须要装的，当然这里指的是你要进行构建的平台，比如你要构建Android应用，那么你就要装Android的SDK，ios同理。**这里有一个例外**`broswer`平台是不需要依赖其他SDK的（明明是开发APP，这里只是为了验证画面比较方便）\n要看你是否满足了构建需要的依赖，可以执行下面的命令查看\n``` js\ncordova requirements\n```\n执行完后你会得到如下结果\n``` js\nRequirements check results for android:\nJava JDK: installed .\nAndroid SDK: installed\nAndroid target: installed android-19,android-21,android-22,android-23,Google Inc.:Google APIs:19,Google Inc.:Google APIs (x86 System Image):19,Google Inc.:Google APIs:23\nGradle: installed\n\nRequirements check results for ios:\nApple OS X: not installed\nCordova tooling for iOS requires Apple OS X\nError: Some of requirements check failed\n```\n这样你就可以清楚的知道自己需要安装哪些依赖才能完成对应平台的构建，简直方便的不要不要的。\n具体想知道不同的平台都依赖些什么，你可以参见下面的链接；\n* [Android平台的要求](http://cordova.axuer.com/docs/zh-cn/latest/guide/platforms/android/index.html#requirements-and-support)\n* [iOS平台的要求](http://cordova.axuer.com/docs/zh-cn/latest/guide/platforms/ios/index.html#requirements-and-support)\n* [Windows平台的要求](http://cordova.axuer.com/docs/zh-cn/latest/guide/platforms/win8/index.html#requirements-and-support)\n\n### 构建App\n在 `create` 项目之后，项目的根目录下会生成一个 `www` 目录，这个目录包含了 `webapp` 的入口页面 `index.html` ，入口文件的话是 `www/js/index.js` 文件的 `deviceready` 事件中。\n\n如果要构建代码的话，执行下面的命令\n``` js\ncordova build\n```\n这个命令会构建你安装的所有平台，如果只想构建某一平台的话，可以把平台的名字加在命令后面，如\n``` js\ncordova build ios\n```\n如果想了解更多的参数的话，可以看一下后面的链接。⇒ [更多参数](http://cordova.axuer.com/docs/zh-cn/latest/reference/cordova-cli/index.html#cordova-build-command)\n\n### 测试App\n构建完app之后我们就可以测试了，通常各平台的SDK中会提供模拟器，我们只需要执行下面的命令就可以启动模拟器。\n``` js\ncordova emulate android\n```\n当然如果你觉得用实机查看更自然一些的话，也可以把手机插上数据线与电脑建立连接，然后执行下面的命令就可以了。\n``` js\ncordova run android\n```\n上面演示的是 Android 的app测试过程，每个平台虽然基本类似，但还是有出入，所以，下面提供了不同平台的调试方法，供你预览。\n* [设置Android模拟器](http://cordova.axuer.com/docs/zh-cn/latest/guide/platforms/android/index.html#setting-up-an-emulator)\n* [Cordova run 命令参考文档](http://cordova.axuer.com/docs/zh-cn/latest/reference/cordova-cli/index.html#cordova-run-command)\n* [Cordova emulate 命令参考文档](http://cordova.axuer.com/docs/zh-cn/latest/reference/cordova-cli/index.html#cordova-emulate-command)\n\n### 添加插件\n如果只是开发一个Cordova框架的webapp，那么你不需要装任何插件，直接用前端技术开发就好了，但是应该没人会这么做吧，毕竟开发这个的目的就是为了跨平台开发原生级移动App，因此要调用移动设备的各种功能就必须安装插件。\n\n#### 插件\nCordova 插件是一些使用Javascript调用原生SDK功能的包；你可以使用两种方式找到你想要的插件\n1. 通过Cordova提供的包管理平台 ⇒ [插件搜索页](http://cordova.axuer.com/plugins/)\n2. 通过命令行搜索 `cordova plugin search camera`\n\n选好你要安装的插件之后你需要执行下面的命令来安装它\n``` js\ncordova plugin add <plugin name> // 如 cordova plugin add cordova-plugin-chrome-apps-proxy\n```\n如果你的包没有发布在Cordova的平台上，也可以使用git地址来安装。\n另外Cordova还非常贴心的提供了一个工具 `Plugman` 来帮助开发者更好的管理Cordova插件。⇒ [Plugman参考](http://cordova.axuer.com/docs/zh-cn/latest/plugin_ref/plugman.html)\n\n如果要查看你安装了哪些插件可以使用下面任意一种命令都可以。（咱也不知道为啥提供这么多方式，反正好用无脑）\n``` js\nplugin ls\nplugin list\nplugin\n\n/**\n$ cordova plugin ls\ncordova-plugin-whitelist 1.2.1 \"Whitelist\"\n*/\n```\n如果想知道更多关于 plugin 的命令参数，可以看右边的链接 ⇒ [plugin参数](http://cordova.axuer.com/docs/zh-cn/latest/reference/cordova-cli/index.html#cordova-plugin-command)\n\n#### 使用 `merges` 自定义每个平台\n虽然可以用一套代码来构建多个平台，但一些平台会有自己的特点，就好像chrome浏览器默认的字体大小与IE的不同，Android与IOS也有不一样的地方，这种情况下去改 www 目录下的文件显然是不合适的，所以 Cordova 提供了 merges 方式来适配不同平台各自的特别处理，你要做的就是在项目的根目录下创建一个 merges 目录，比如你要适配Android，你就可以在 merges 下创建一个 android 目录，然后在下面或覆盖或添加新的资源。（这里官网没有说merges在哪里创建，试验后发现是在根目录下）\n\n#### 更新Cordova和你的项目\n如果你要更新你的Cordova（通常不建议这么干，当然你知道后果并想要使用新的特性或者修正bug除外），那么你需要执行一下 update 命令\n``` js\nsudo npm update -g cordova\n```\n当然你也可以指定更新到什么版本（这都是npm的知识了）\n``` js\nsudo npm install -g cordova@3.1.0-0.2.0\n```\n你也可以使用下面的命令查看当前的版本（还是npm的知识）\n``` js\nnpm info cordova version\n```\n你是不是以为这样就可以了，不好意思还不行，你还需要把各个平台进行一下升级\n``` js\ncordova platform update android --save\ncordova platform update ios --save\n// ...\n```\n其实这也好理解，你都已经轿车换SUV了，总不能还用原来的车轱辘吧，只是我希望能不能在换车的时候一块儿把车轱辘换了（这里的意思是希望直接自动化处理了）\n\n到这里你的第一个 `App` 就已经开发好了，是不是还有点成就感。\n\n### 一些参考资料\n到这里一个简单的基于 `Cordova` 搭建的 `App` 就实现了，当然一个 `App` 绝不这么简单，各平台的 `SDK` 安装也没那么简单，但这不是本篇文章要说的事了，下一篇文章我会说说如何应对各种不同的开发平台，在这之前还请你看一下 `Cordova` 都支持哪些平台，具体看一下下面的链接。\n好了，今天就先写到这里，下篇文章我们再见。\n\n[平台支持](http://cordova.axuer.com/docs/zh-cn/latest/guide/support/index.html)\n\n（待续...）\n\n","slug":"learn-cordova","published":1,"updated":"2020-11-10T14:52:25.390Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs510069ooa64ccba9ht","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>很长时间没有写博客了，因为最近换了工作，原来的技术栈基本上都换了，现在接触了很多新的技术栈，<code>Cordova</code> 就是其中之一。</p>\n<p>接下来这篇文章就是我的学习笔记，以供回顾，写的不好请勿拍砖。</p>\n<a id=\"more\"></a>\n<h2 id=\"一、What-is-Cordova？-Cordova是个啥？\"><a href=\"#一、What-is-Cordova？-Cordova是个啥？\" class=\"headerlink\" title=\"一、What is Cordova？ Cordova是个啥？\"></a>一、What is Cordova？ Cordova是个啥？</h2><p>移动端开发和web开发有一些不一样，web端开发面向的是浏览器，而移动端开发面向的是各种移动设备，那么针对各种移动设备提供的SDK进行开发的话，我们通常称之为<code>原生开发</code>，原生开发虽然通常调用底层api，性能更好，但是因为不同移动终端底层技术不一样，所以每种设备都要单独开发，这样开发成本和能力要求都比较高，所以通常都会有一些框架来兼容各种平台，就好比java虚拟机可以运行在mac/windows/linux一样，为了能够写一套移动端代码可以在各种设备中使用，于是乎就有了Cordova，上面说了这么一堆废话，其实简言之，Cordova就是提供了跨设备调用底层Api的移动端开发框架（这种开发方式又叫做Hybird 模式）知道这一点应该就够了，当然这是我认为的。</p>\n<p>Cordova的官网地址如下</p>\n<blockquote>\n<p><a href=\"https://cordova.apache.org/\" target=\"_blank\" rel=\"noopener\">https://cordova.apache.org/</a></p>\n</blockquote>\n<p>其实从这里就可以看出，Cordova是apache基金下的source，其官网是这样介绍它的</p>\n<blockquote>\n<p>Mobile apps with HTML, CSS &amp; JS<br>Target multiple platforms with one code base<br>Free and open source</p>\n</blockquote>\n<p>翻译成中文的话就是</p>\n<blockquote>\n<p>使用Html，CSS和JS进行移动端应用开发<br>一份代码多平台使用<br>免费并且开源</p>\n</blockquote>\n<p>三句话解释了Cordova的三个方面，</p>\n<ul>\n<li>使用前端技术开发-对前端开发友好</li>\n<li>跨平台-节省开发工时，降低开发难度-从图标看支持Android/ios/windowphone三大平台</li>\n<li>免费不用解释开源的话意味着会有很多人贡献代码</li>\n</ul>\n<p>以上奠定了Cordova强大及流行的基础。</p>\n<h2 id=\"二、快速上手\"><a href=\"#二、快速上手\" class=\"headerlink\" title=\"二、快速上手\"></a>二、快速上手</h2><p>在使用Cordova做移动端开发之前需要做一些环境准备工作，因为它是使用nodejs开发的所以首先要安装node以及它携带的npm包管理器，这个现代的前端开发应该都知道，我这里就不多说了，装它就完了。</p>\n<p>装好之后我们就要用npm全局安装一下Cordova项目的依赖，命令很简单；<br>方便的话还要装一下git，因为一些命令要在gitcmd上执行，当然管理代码也是需要它的，所以装吧。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cordova</span><br></pre></td></tr></table></figure>\n<p>就这么简单就可以开发Cordova应用了，接下来我们要创建一个项目，创建项目的命令也十分简单。在命令行工具中输入下面的命令你就创建了一个Cordova的应用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova create &lt;path&gt; <span class=\"comment\">// 这里的path是项目的路径</span></span><br></pre></td></tr></table></figure>\n<p>如果要查看创建项目时还能设置什么参数你可以执行下面的命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova help create</span><br></pre></td></tr></table></figure>\n<p>怎么样是不是超级简单。<br>做了上面的工作你就创建了一个具备基本功能的Cordova项目，接下来我们要给项目配置一些东西。</p>\n<p>首先刚才讲到了，Cordova是一个跨平台的框架，那么你的项目要适配什么平台你需要进行一些配置，cd到项目目录下执行下面的命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova platform add &lt;platform name&gt; <span class=\"comment\">// platform name 为适配平台的名称</span></span><br></pre></td></tr></table></figure>\n<p>如果不知道名称是什么命令行工具也贴心的给了查询用的命令，通过此命令你可以看到你安装了什么平台的适配，有哪些可以用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova platform</span><br></pre></td></tr></table></figure>\n<p>执行了这个命令你将看到下面这样的list</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">Installed platforms:</span></span><br><span class=\"line\"><span class=\"comment\">Available platforms:</span></span><br><span class=\"line\"><span class=\"comment\">  android ^9.0.0</span></span><br><span class=\"line\"><span class=\"comment\">  browser ^6.0.0</span></span><br><span class=\"line\"><span class=\"comment\">  electron ^1.0.0</span></span><br><span class=\"line\"><span class=\"comment\">  windows ^7.0.0</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>项目也创建了，简单的配置工作也完成了，我们可以启动项目看一下效果了，那么我们就该执行运行项目的命令了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova run &lt;platform name&gt; <span class=\"comment\">// platform name 适配平台的名称</span></span><br></pre></td></tr></table></figure>\n<p>到这我们就快速的创建并运行起了一个Cordova的工程。</p>\n<h3 id=\"小Tip\"><a href=\"#小Tip\" class=\"headerlink\" title=\"小Tip\"></a>小Tip</h3><p>如上执行启动命令后，默认会启动8000端口，如果被占用的话可以通过增加命令行参数的形式改变端口号，参数如下设置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova run browser --target=chrome --port=<span class=\"number\">9090</span></span><br></pre></td></tr></table></figure>\n<p>以上就可以自定义端口及浏览器启动应用了。</p>\n<h2 id=\"三、详细了解\"><a href=\"#三、详细了解\" class=\"headerlink\" title=\"三、详细了解\"></a>三、详细了解</h2><h3 id=\"1、概览\"><a href=\"#1、概览\" class=\"headerlink\" title=\"1、概览\"></a>1、概览</h3><p>官网开头介绍了Cordova的身世和适用范围，前面开头已经讲过了不想再讲，直接看看Cordova的架构设计图。<br><a href=\"\">此处是个架构图</a><br>这个图理解起来不难，大的方面是两个部分，底层是MobileOS，也就是手机的操作系统本身，上层是由Cordova构建的框架；<br>Cordova内部的话是两层结构：上层的话是由前端代码构成的webapp部分；下层是Cordova的视图渲染引擎，它为webapp提供了HtmlApi和CordovaApi，也就是说我们可以调用html的原生api也可以使用cordova提供的jsApi；<br>Cordova还提供了丰富的插件系统；通过Cordova的视图引擎调用Cordova的nativeApi来调用一些Cordova提供好的调用设备的信息的Api，另外也可以调用一些用户自定义的Api；<br>Cordova视图引擎和插件系统再将上层的需求通过MobileOS开放的api能力实现具体功能，由此完成了整个Cordova框架的使用；</p>\n<p>总的来说这个原理跟大多数跨平台的框架原理都类似，由框架提供统一的API能力，再由框架处理不同平台的兼容，这里特别之处在于渲染引擎可以允许使用前端原生的api，这将大大降低开发的难度。</p>\n<h4 id=\"WebView\"><a href=\"#WebView\" class=\"headerlink\" title=\"WebView\"></a>WebView</h4><p>说到移动端开发，不知道WebView应该是不可能的，在原生移动应用中，WebView就是移动应用内部嵌入的一个‘浏览器’，它可以允许你使用前端技术展示内容。</p>\n<h4 id=\"WebApp\"><a href=\"#WebApp\" class=\"headerlink\" title=\"WebApp\"></a>WebApp</h4><p>WebApp跟WebView两个词有些像，事实上它们也确实有些关系，WebApp从名字就可以看出是使用Web技术开发的App，那么它跟WebView是什么关系呢，打个比方，WebView就是个快递盒子，WebApp就是你买的商品，一个是容器，一个是内容；这样说应该就明白了吧，通过前端技术开发的App通过WebView嵌入到App中，就可以带给用户原生应用的体验，忘了说WebApp是只能用浏览器访问的App；</p>\n<p>和纯WebApp不同，嵌入到WebView中的WebApp需要有一个配置文件，<code>config.xml</code> ，它在项目的根目录下，说明了应用的一些信息，这个文件必不可少！！！</p>\n<h4 id=\"插件系统\"><a href=\"#插件系统\" class=\"headerlink\" title=\"插件系统\"></a>插件系统</h4><p>刚刚在上面的架构图中我们介绍了Cordova的插件系统，它提供了我们通过js调用MobileApi的能力，如电源，相机，联系人等等；官方维护了核心的功能，当然如果你愿意也可以调用一些第三方提供的插件，你可以方便的通过npm包管理器安装；<br>***但是有一点必须要说：项目创建后默认是不带任何插件的，即使是官方的核心插件也是需要你自己导入进去，第三方的更不用说了，另外Cordova只提供了功能Api并不包含任何的UI部件和MV框架（你可以根据自己喜欢使用Angular或者Vue或者其他什么都可以），这一点要牢记。</p>\n<h4 id=\"开发工作流\"><a href=\"#开发工作流\" class=\"headerlink\" title=\"开发工作流\"></a>开发工作流</h4><p>使用Cordova开发MobileApp的时候即可以开发多个平台的app（一次开发多平台可用，降低开发成本），也可以专注开发某一平台的app（使用前端技术开发，降低开发难度），因此开发工作流也分为两种：</p>\n<h5 id=\"跨平台-CLI-的工作流\"><a href=\"#跨平台-CLI-的工作流\" class=\"headerlink\" title=\"跨平台(CLI)的工作流\"></a>跨平台(CLI)的工作流</h5><p>官网上说了很多，也不难理解，这里用我自己的话说就是，Cordova提供了一个牛叉的CLI工具，它可以自动的完成一次编码多平台构建的事，你只需要按照它说的方式开发就行。：）</p>\n<h5 id=\"平台为中心的工作流\"><a href=\"#平台为中心的工作流\" class=\"headerlink\" title=\"平台为中心的工作流\"></a>平台为中心的工作流</h5><p>这里不得不说我没有看很明白，但是结合下面的注意事项我是这样理解的，因为只为某一平台服务，所以有一些针对此平台的特殊的功能或者插件你就可以使用了（虽然不太清楚为什么这么做，如果你知道告诉我，谢谢），但是一旦使用了这种开发方式，那么就回不到跨平台开发了，因为你使用了针对某一平台才能调用的代码，这也不难理解，从字里行间感觉就是不建议使用这种开发工作流（好的好的，知道了）。</p>\n<p>好的，接下来开发App啦；</p>\n<h3 id=\"2、开发应用\"><a href=\"#2、开发应用\" class=\"headerlink\" title=\"2、开发应用\"></a>2、开发应用</h3><p>快速上手中已经介绍了如何准备、创建和启动应用，如何添加平台，这里就不多说了。说些没讲过的。<br>上面说过检查目前平台安装情况的话可以使用下面的命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova platforms</span><br></pre></td></tr></table></figure>\n<p>我们也可以使用另一个命令来看，我试验了一下，效果是一样的。。。（问号脸，一样的为什么搞两个命令）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova platform ls</span><br></pre></td></tr></table></figure>\n<p>** 事后我发现，无论我使用的命令是 <code>platform</code> 还是 <code>platforms</code> 加不加 <code>ls</code> 都可以查到当前安装的平台。。。 啊~兼容性好强。</p>\n<p>每执行一次 <code>add</code> 命令，你就会发现工程目录下的 <code>platforms</code> 目录下就对应生成了一个对应平台的文件夹，切勿手贱删除，你虽然删除了文件夹，但是各处设置的platform并没有去掉，会导致报错，如果要删除请使用 <code>remove</code> 命令。 想知道还有哪些命令的话就看下面的链接吧。⇒ <a href=\"http://cordova.axuer.com/docs/zh-cn/latest/reference/cordova-cli/index.html#cordova-platform-command\" target=\"_blank\" rel=\"noopener\">命令大全</a></p>\n<h3 id=\"安装构建的先决条件\"><a href=\"#安装构建的先决条件\" class=\"headerlink\" title=\"安装构建的先决条件\"></a>安装构建的先决条件</h3><p>因为Cordova的底层还是要调用MobileOS的接口，所以各平台的SDK是必须要装的，当然这里指的是你要进行构建的平台，比如你要构建Android应用，那么你就要装Android的SDK，ios同理。<strong>这里有一个例外</strong><code>broswer</code>平台是不需要依赖其他SDK的（明明是开发APP，这里只是为了验证画面比较方便）<br>要看你是否满足了构建需要的依赖，可以执行下面的命令查看</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova requirements</span><br></pre></td></tr></table></figure>\n<p>执行完后你会得到如下结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Requirements check results <span class=\"keyword\">for</span> android:</span><br><span class=\"line\">Java JDK: installed .</span><br><span class=\"line\">Android SDK: installed</span><br><span class=\"line\">Android target: installed android<span class=\"number\">-19</span>,android<span class=\"number\">-21</span>,android<span class=\"number\">-22</span>,android<span class=\"number\">-23</span>,Google Inc.:Google APIs:<span class=\"number\">19</span>,Google Inc.:Google APIs (x86 System Image):<span class=\"number\">19</span>,Google Inc.:Google APIs:<span class=\"number\">23</span></span><br><span class=\"line\">Gradle: installed</span><br><span class=\"line\"></span><br><span class=\"line\">Requirements check results <span class=\"keyword\">for</span> ios:</span><br><span class=\"line\">Apple OS X: not installed</span><br><span class=\"line\">Cordova tooling <span class=\"keyword\">for</span> iOS requires Apple OS X</span><br><span class=\"line\"><span class=\"built_in\">Error</span>: Some <span class=\"keyword\">of</span> requirements check failed</span><br></pre></td></tr></table></figure>\n<p>这样你就可以清楚的知道自己需要安装哪些依赖才能完成对应平台的构建，简直方便的不要不要的。<br>具体想知道不同的平台都依赖些什么，你可以参见下面的链接；</p>\n<ul>\n<li><a href=\"http://cordova.axuer.com/docs/zh-cn/latest/guide/platforms/android/index.html#requirements-and-support\" target=\"_blank\" rel=\"noopener\">Android平台的要求</a></li>\n<li><a href=\"http://cordova.axuer.com/docs/zh-cn/latest/guide/platforms/ios/index.html#requirements-and-support\" target=\"_blank\" rel=\"noopener\">iOS平台的要求</a></li>\n<li><a href=\"http://cordova.axuer.com/docs/zh-cn/latest/guide/platforms/win8/index.html#requirements-and-support\" target=\"_blank\" rel=\"noopener\">Windows平台的要求</a></li>\n</ul>\n<h3 id=\"构建App\"><a href=\"#构建App\" class=\"headerlink\" title=\"构建App\"></a>构建App</h3><p>在 <code>create</code> 项目之后，项目的根目录下会生成一个 <code>www</code> 目录，这个目录包含了 <code>webapp</code> 的入口页面 <code>index.html</code> ，入口文件的话是 <code>www/js/index.js</code> 文件的 <code>deviceready</code> 事件中。</p>\n<p>如果要构建代码的话，执行下面的命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova build</span><br></pre></td></tr></table></figure>\n<p>这个命令会构建你安装的所有平台，如果只想构建某一平台的话，可以把平台的名字加在命令后面，如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova build ios</span><br></pre></td></tr></table></figure>\n<p>如果想了解更多的参数的话，可以看一下后面的链接。⇒ <a href=\"http://cordova.axuer.com/docs/zh-cn/latest/reference/cordova-cli/index.html#cordova-build-command\" target=\"_blank\" rel=\"noopener\">更多参数</a></p>\n<h3 id=\"测试App\"><a href=\"#测试App\" class=\"headerlink\" title=\"测试App\"></a>测试App</h3><p>构建完app之后我们就可以测试了，通常各平台的SDK中会提供模拟器，我们只需要执行下面的命令就可以启动模拟器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova emulate android</span><br></pre></td></tr></table></figure>\n<p>当然如果你觉得用实机查看更自然一些的话，也可以把手机插上数据线与电脑建立连接，然后执行下面的命令就可以了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova run android</span><br></pre></td></tr></table></figure>\n<p>上面演示的是 Android 的app测试过程，每个平台虽然基本类似，但还是有出入，所以，下面提供了不同平台的调试方法，供你预览。</p>\n<ul>\n<li><a href=\"http://cordova.axuer.com/docs/zh-cn/latest/guide/platforms/android/index.html#setting-up-an-emulator\" target=\"_blank\" rel=\"noopener\">设置Android模拟器</a></li>\n<li><a href=\"http://cordova.axuer.com/docs/zh-cn/latest/reference/cordova-cli/index.html#cordova-run-command\" target=\"_blank\" rel=\"noopener\">Cordova run 命令参考文档</a></li>\n<li><a href=\"http://cordova.axuer.com/docs/zh-cn/latest/reference/cordova-cli/index.html#cordova-emulate-command\" target=\"_blank\" rel=\"noopener\">Cordova emulate 命令参考文档</a></li>\n</ul>\n<h3 id=\"添加插件\"><a href=\"#添加插件\" class=\"headerlink\" title=\"添加插件\"></a>添加插件</h3><p>如果只是开发一个Cordova框架的webapp，那么你不需要装任何插件，直接用前端技术开发就好了，但是应该没人会这么做吧，毕竟开发这个的目的就是为了跨平台开发原生级移动App，因此要调用移动设备的各种功能就必须安装插件。</p>\n<h4 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h4><p>Cordova 插件是一些使用Javascript调用原生SDK功能的包；你可以使用两种方式找到你想要的插件</p>\n<ol>\n<li>通过Cordova提供的包管理平台 ⇒ <a href=\"http://cordova.axuer.com/plugins/\" target=\"_blank\" rel=\"noopener\">插件搜索页</a></li>\n<li>通过命令行搜索 <code>cordova plugin search camera</code></li>\n</ol>\n<p>选好你要安装的插件之后你需要执行下面的命令来安装它</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova plugin add &lt;plugin name&gt; <span class=\"comment\">// 如 cordova plugin add cordova-plugin-chrome-apps-proxy</span></span><br></pre></td></tr></table></figure>\n<p>如果你的包没有发布在Cordova的平台上，也可以使用git地址来安装。<br>另外Cordova还非常贴心的提供了一个工具 <code>Plugman</code> 来帮助开发者更好的管理Cordova插件。⇒ <a href=\"http://cordova.axuer.com/docs/zh-cn/latest/plugin_ref/plugman.html\" target=\"_blank\" rel=\"noopener\">Plugman参考</a></p>\n<p>如果要查看你安装了哪些插件可以使用下面任意一种命令都可以。（咱也不知道为啥提供这么多方式，反正好用无脑）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugin ls</span><br><span class=\"line\">plugin list</span><br><span class=\"line\">plugin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">$ cordova plugin ls</span></span><br><span class=\"line\"><span class=\"comment\">cordova-plugin-whitelist 1.2.1 \"Whitelist\"</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>如果想知道更多关于 plugin 的命令参数，可以看右边的链接 ⇒ <a href=\"http://cordova.axuer.com/docs/zh-cn/latest/reference/cordova-cli/index.html#cordova-plugin-command\" target=\"_blank\" rel=\"noopener\">plugin参数</a></p>\n<h4 id=\"使用-merges-自定义每个平台\"><a href=\"#使用-merges-自定义每个平台\" class=\"headerlink\" title=\"使用 merges 自定义每个平台\"></a>使用 <code>merges</code> 自定义每个平台</h4><p>虽然可以用一套代码来构建多个平台，但一些平台会有自己的特点，就好像chrome浏览器默认的字体大小与IE的不同，Android与IOS也有不一样的地方，这种情况下去改 www 目录下的文件显然是不合适的，所以 Cordova 提供了 merges 方式来适配不同平台各自的特别处理，你要做的就是在项目的根目录下创建一个 merges 目录，比如你要适配Android，你就可以在 merges 下创建一个 android 目录，然后在下面或覆盖或添加新的资源。（这里官网没有说merges在哪里创建，试验后发现是在根目录下）</p>\n<h4 id=\"更新Cordova和你的项目\"><a href=\"#更新Cordova和你的项目\" class=\"headerlink\" title=\"更新Cordova和你的项目\"></a>更新Cordova和你的项目</h4><p>如果你要更新你的Cordova（通常不建议这么干，当然你知道后果并想要使用新的特性或者修正bug除外），那么你需要执行一下 update 命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm update -g cordova</span><br></pre></td></tr></table></figure>\n<p>当然你也可以指定更新到什么版本（这都是npm的知识了）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g cordova@<span class=\"number\">3.1</span><span class=\"number\">.0</span><span class=\"number\">-0.2</span><span class=\"number\">.0</span></span><br></pre></td></tr></table></figure>\n<p>你也可以使用下面的命令查看当前的版本（还是npm的知识）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm info cordova version</span><br></pre></td></tr></table></figure>\n<p>你是不是以为这样就可以了，不好意思还不行，你还需要把各个平台进行一下升级</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova platform update android --save</span><br><span class=\"line\">cordova platform update ios --save</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>其实这也好理解，你都已经轿车换SUV了，总不能还用原来的车轱辘吧，只是我希望能不能在换车的时候一块儿把车轱辘换了（这里的意思是希望直接自动化处理了）</p>\n<p>到这里你的第一个 <code>App</code> 就已经开发好了，是不是还有点成就感。</p>\n<h3 id=\"一些参考资料\"><a href=\"#一些参考资料\" class=\"headerlink\" title=\"一些参考资料\"></a>一些参考资料</h3><p>到这里一个简单的基于 <code>Cordova</code> 搭建的 <code>App</code> 就实现了，当然一个 <code>App</code> 绝不这么简单，各平台的 <code>SDK</code> 安装也没那么简单，但这不是本篇文章要说的事了，下一篇文章我会说说如何应对各种不同的开发平台，在这之前还请你看一下 <code>Cordova</code> 都支持哪些平台，具体看一下下面的链接。<br>好了，今天就先写到这里，下篇文章我们再见。</p>\n<p><a href=\"http://cordova.axuer.com/docs/zh-cn/latest/guide/support/index.html\" target=\"_blank\" rel=\"noopener\">平台支持</a></p>\n<p>（待续…）</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>很长时间没有写博客了，因为最近换了工作，原来的技术栈基本上都换了，现在接触了很多新的技术栈，<code>Cordova</code> 就是其中之一。</p>\n<p>接下来这篇文章就是我的学习笔记，以供回顾，写的不好请勿拍砖。</p>","more":"<h2 id=\"一、What-is-Cordova？-Cordova是个啥？\"><a href=\"#一、What-is-Cordova？-Cordova是个啥？\" class=\"headerlink\" title=\"一、What is Cordova？ Cordova是个啥？\"></a>一、What is Cordova？ Cordova是个啥？</h2><p>移动端开发和web开发有一些不一样，web端开发面向的是浏览器，而移动端开发面向的是各种移动设备，那么针对各种移动设备提供的SDK进行开发的话，我们通常称之为<code>原生开发</code>，原生开发虽然通常调用底层api，性能更好，但是因为不同移动终端底层技术不一样，所以每种设备都要单独开发，这样开发成本和能力要求都比较高，所以通常都会有一些框架来兼容各种平台，就好比java虚拟机可以运行在mac/windows/linux一样，为了能够写一套移动端代码可以在各种设备中使用，于是乎就有了Cordova，上面说了这么一堆废话，其实简言之，Cordova就是提供了跨设备调用底层Api的移动端开发框架（这种开发方式又叫做Hybird 模式）知道这一点应该就够了，当然这是我认为的。</p>\n<p>Cordova的官网地址如下</p>\n<blockquote>\n<p><a href=\"https://cordova.apache.org/\" target=\"_blank\" rel=\"noopener\">https://cordova.apache.org/</a></p>\n</blockquote>\n<p>其实从这里就可以看出，Cordova是apache基金下的source，其官网是这样介绍它的</p>\n<blockquote>\n<p>Mobile apps with HTML, CSS &amp; JS<br>Target multiple platforms with one code base<br>Free and open source</p>\n</blockquote>\n<p>翻译成中文的话就是</p>\n<blockquote>\n<p>使用Html，CSS和JS进行移动端应用开发<br>一份代码多平台使用<br>免费并且开源</p>\n</blockquote>\n<p>三句话解释了Cordova的三个方面，</p>\n<ul>\n<li>使用前端技术开发-对前端开发友好</li>\n<li>跨平台-节省开发工时，降低开发难度-从图标看支持Android/ios/windowphone三大平台</li>\n<li>免费不用解释开源的话意味着会有很多人贡献代码</li>\n</ul>\n<p>以上奠定了Cordova强大及流行的基础。</p>\n<h2 id=\"二、快速上手\"><a href=\"#二、快速上手\" class=\"headerlink\" title=\"二、快速上手\"></a>二、快速上手</h2><p>在使用Cordova做移动端开发之前需要做一些环境准备工作，因为它是使用nodejs开发的所以首先要安装node以及它携带的npm包管理器，这个现代的前端开发应该都知道，我这里就不多说了，装它就完了。</p>\n<p>装好之后我们就要用npm全局安装一下Cordova项目的依赖，命令很简单；<br>方便的话还要装一下git，因为一些命令要在gitcmd上执行，当然管理代码也是需要它的，所以装吧。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cordova</span><br></pre></td></tr></table></figure>\n<p>就这么简单就可以开发Cordova应用了，接下来我们要创建一个项目，创建项目的命令也十分简单。在命令行工具中输入下面的命令你就创建了一个Cordova的应用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova create &lt;path&gt; <span class=\"comment\">// 这里的path是项目的路径</span></span><br></pre></td></tr></table></figure>\n<p>如果要查看创建项目时还能设置什么参数你可以执行下面的命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova help create</span><br></pre></td></tr></table></figure>\n<p>怎么样是不是超级简单。<br>做了上面的工作你就创建了一个具备基本功能的Cordova项目，接下来我们要给项目配置一些东西。</p>\n<p>首先刚才讲到了，Cordova是一个跨平台的框架，那么你的项目要适配什么平台你需要进行一些配置，cd到项目目录下执行下面的命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova platform add &lt;platform name&gt; <span class=\"comment\">// platform name 为适配平台的名称</span></span><br></pre></td></tr></table></figure>\n<p>如果不知道名称是什么命令行工具也贴心的给了查询用的命令，通过此命令你可以看到你安装了什么平台的适配，有哪些可以用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova platform</span><br></pre></td></tr></table></figure>\n<p>执行了这个命令你将看到下面这样的list</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">Installed platforms:</span></span><br><span class=\"line\"><span class=\"comment\">Available platforms:</span></span><br><span class=\"line\"><span class=\"comment\">  android ^9.0.0</span></span><br><span class=\"line\"><span class=\"comment\">  browser ^6.0.0</span></span><br><span class=\"line\"><span class=\"comment\">  electron ^1.0.0</span></span><br><span class=\"line\"><span class=\"comment\">  windows ^7.0.0</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>项目也创建了，简单的配置工作也完成了，我们可以启动项目看一下效果了，那么我们就该执行运行项目的命令了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova run &lt;platform name&gt; <span class=\"comment\">// platform name 适配平台的名称</span></span><br></pre></td></tr></table></figure>\n<p>到这我们就快速的创建并运行起了一个Cordova的工程。</p>\n<h3 id=\"小Tip\"><a href=\"#小Tip\" class=\"headerlink\" title=\"小Tip\"></a>小Tip</h3><p>如上执行启动命令后，默认会启动8000端口，如果被占用的话可以通过增加命令行参数的形式改变端口号，参数如下设置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova run browser --target=chrome --port=<span class=\"number\">9090</span></span><br></pre></td></tr></table></figure>\n<p>以上就可以自定义端口及浏览器启动应用了。</p>\n<h2 id=\"三、详细了解\"><a href=\"#三、详细了解\" class=\"headerlink\" title=\"三、详细了解\"></a>三、详细了解</h2><h3 id=\"1、概览\"><a href=\"#1、概览\" class=\"headerlink\" title=\"1、概览\"></a>1、概览</h3><p>官网开头介绍了Cordova的身世和适用范围，前面开头已经讲过了不想再讲，直接看看Cordova的架构设计图。<br><a href=\"\">此处是个架构图</a><br>这个图理解起来不难，大的方面是两个部分，底层是MobileOS，也就是手机的操作系统本身，上层是由Cordova构建的框架；<br>Cordova内部的话是两层结构：上层的话是由前端代码构成的webapp部分；下层是Cordova的视图渲染引擎，它为webapp提供了HtmlApi和CordovaApi，也就是说我们可以调用html的原生api也可以使用cordova提供的jsApi；<br>Cordova还提供了丰富的插件系统；通过Cordova的视图引擎调用Cordova的nativeApi来调用一些Cordova提供好的调用设备的信息的Api，另外也可以调用一些用户自定义的Api；<br>Cordova视图引擎和插件系统再将上层的需求通过MobileOS开放的api能力实现具体功能，由此完成了整个Cordova框架的使用；</p>\n<p>总的来说这个原理跟大多数跨平台的框架原理都类似，由框架提供统一的API能力，再由框架处理不同平台的兼容，这里特别之处在于渲染引擎可以允许使用前端原生的api，这将大大降低开发的难度。</p>\n<h4 id=\"WebView\"><a href=\"#WebView\" class=\"headerlink\" title=\"WebView\"></a>WebView</h4><p>说到移动端开发，不知道WebView应该是不可能的，在原生移动应用中，WebView就是移动应用内部嵌入的一个‘浏览器’，它可以允许你使用前端技术展示内容。</p>\n<h4 id=\"WebApp\"><a href=\"#WebApp\" class=\"headerlink\" title=\"WebApp\"></a>WebApp</h4><p>WebApp跟WebView两个词有些像，事实上它们也确实有些关系，WebApp从名字就可以看出是使用Web技术开发的App，那么它跟WebView是什么关系呢，打个比方，WebView就是个快递盒子，WebApp就是你买的商品，一个是容器，一个是内容；这样说应该就明白了吧，通过前端技术开发的App通过WebView嵌入到App中，就可以带给用户原生应用的体验，忘了说WebApp是只能用浏览器访问的App；</p>\n<p>和纯WebApp不同，嵌入到WebView中的WebApp需要有一个配置文件，<code>config.xml</code> ，它在项目的根目录下，说明了应用的一些信息，这个文件必不可少！！！</p>\n<h4 id=\"插件系统\"><a href=\"#插件系统\" class=\"headerlink\" title=\"插件系统\"></a>插件系统</h4><p>刚刚在上面的架构图中我们介绍了Cordova的插件系统，它提供了我们通过js调用MobileApi的能力，如电源，相机，联系人等等；官方维护了核心的功能，当然如果你愿意也可以调用一些第三方提供的插件，你可以方便的通过npm包管理器安装；<br>***但是有一点必须要说：项目创建后默认是不带任何插件的，即使是官方的核心插件也是需要你自己导入进去，第三方的更不用说了，另外Cordova只提供了功能Api并不包含任何的UI部件和MV框架（你可以根据自己喜欢使用Angular或者Vue或者其他什么都可以），这一点要牢记。</p>\n<h4 id=\"开发工作流\"><a href=\"#开发工作流\" class=\"headerlink\" title=\"开发工作流\"></a>开发工作流</h4><p>使用Cordova开发MobileApp的时候即可以开发多个平台的app（一次开发多平台可用，降低开发成本），也可以专注开发某一平台的app（使用前端技术开发，降低开发难度），因此开发工作流也分为两种：</p>\n<h5 id=\"跨平台-CLI-的工作流\"><a href=\"#跨平台-CLI-的工作流\" class=\"headerlink\" title=\"跨平台(CLI)的工作流\"></a>跨平台(CLI)的工作流</h5><p>官网上说了很多，也不难理解，这里用我自己的话说就是，Cordova提供了一个牛叉的CLI工具，它可以自动的完成一次编码多平台构建的事，你只需要按照它说的方式开发就行。：）</p>\n<h5 id=\"平台为中心的工作流\"><a href=\"#平台为中心的工作流\" class=\"headerlink\" title=\"平台为中心的工作流\"></a>平台为中心的工作流</h5><p>这里不得不说我没有看很明白，但是结合下面的注意事项我是这样理解的，因为只为某一平台服务，所以有一些针对此平台的特殊的功能或者插件你就可以使用了（虽然不太清楚为什么这么做，如果你知道告诉我，谢谢），但是一旦使用了这种开发方式，那么就回不到跨平台开发了，因为你使用了针对某一平台才能调用的代码，这也不难理解，从字里行间感觉就是不建议使用这种开发工作流（好的好的，知道了）。</p>\n<p>好的，接下来开发App啦；</p>\n<h3 id=\"2、开发应用\"><a href=\"#2、开发应用\" class=\"headerlink\" title=\"2、开发应用\"></a>2、开发应用</h3><p>快速上手中已经介绍了如何准备、创建和启动应用，如何添加平台，这里就不多说了。说些没讲过的。<br>上面说过检查目前平台安装情况的话可以使用下面的命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova platforms</span><br></pre></td></tr></table></figure>\n<p>我们也可以使用另一个命令来看，我试验了一下，效果是一样的。。。（问号脸，一样的为什么搞两个命令）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova platform ls</span><br></pre></td></tr></table></figure>\n<p>** 事后我发现，无论我使用的命令是 <code>platform</code> 还是 <code>platforms</code> 加不加 <code>ls</code> 都可以查到当前安装的平台。。。 啊~兼容性好强。</p>\n<p>每执行一次 <code>add</code> 命令，你就会发现工程目录下的 <code>platforms</code> 目录下就对应生成了一个对应平台的文件夹，切勿手贱删除，你虽然删除了文件夹，但是各处设置的platform并没有去掉，会导致报错，如果要删除请使用 <code>remove</code> 命令。 想知道还有哪些命令的话就看下面的链接吧。⇒ <a href=\"http://cordova.axuer.com/docs/zh-cn/latest/reference/cordova-cli/index.html#cordova-platform-command\" target=\"_blank\" rel=\"noopener\">命令大全</a></p>\n<h3 id=\"安装构建的先决条件\"><a href=\"#安装构建的先决条件\" class=\"headerlink\" title=\"安装构建的先决条件\"></a>安装构建的先决条件</h3><p>因为Cordova的底层还是要调用MobileOS的接口，所以各平台的SDK是必须要装的，当然这里指的是你要进行构建的平台，比如你要构建Android应用，那么你就要装Android的SDK，ios同理。<strong>这里有一个例外</strong><code>broswer</code>平台是不需要依赖其他SDK的（明明是开发APP，这里只是为了验证画面比较方便）<br>要看你是否满足了构建需要的依赖，可以执行下面的命令查看</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova requirements</span><br></pre></td></tr></table></figure>\n<p>执行完后你会得到如下结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Requirements check results <span class=\"keyword\">for</span> android:</span><br><span class=\"line\">Java JDK: installed .</span><br><span class=\"line\">Android SDK: installed</span><br><span class=\"line\">Android target: installed android<span class=\"number\">-19</span>,android<span class=\"number\">-21</span>,android<span class=\"number\">-22</span>,android<span class=\"number\">-23</span>,Google Inc.:Google APIs:<span class=\"number\">19</span>,Google Inc.:Google APIs (x86 System Image):<span class=\"number\">19</span>,Google Inc.:Google APIs:<span class=\"number\">23</span></span><br><span class=\"line\">Gradle: installed</span><br><span class=\"line\"></span><br><span class=\"line\">Requirements check results <span class=\"keyword\">for</span> ios:</span><br><span class=\"line\">Apple OS X: not installed</span><br><span class=\"line\">Cordova tooling <span class=\"keyword\">for</span> iOS requires Apple OS X</span><br><span class=\"line\"><span class=\"built_in\">Error</span>: Some <span class=\"keyword\">of</span> requirements check failed</span><br></pre></td></tr></table></figure>\n<p>这样你就可以清楚的知道自己需要安装哪些依赖才能完成对应平台的构建，简直方便的不要不要的。<br>具体想知道不同的平台都依赖些什么，你可以参见下面的链接；</p>\n<ul>\n<li><a href=\"http://cordova.axuer.com/docs/zh-cn/latest/guide/platforms/android/index.html#requirements-and-support\" target=\"_blank\" rel=\"noopener\">Android平台的要求</a></li>\n<li><a href=\"http://cordova.axuer.com/docs/zh-cn/latest/guide/platforms/ios/index.html#requirements-and-support\" target=\"_blank\" rel=\"noopener\">iOS平台的要求</a></li>\n<li><a href=\"http://cordova.axuer.com/docs/zh-cn/latest/guide/platforms/win8/index.html#requirements-and-support\" target=\"_blank\" rel=\"noopener\">Windows平台的要求</a></li>\n</ul>\n<h3 id=\"构建App\"><a href=\"#构建App\" class=\"headerlink\" title=\"构建App\"></a>构建App</h3><p>在 <code>create</code> 项目之后，项目的根目录下会生成一个 <code>www</code> 目录，这个目录包含了 <code>webapp</code> 的入口页面 <code>index.html</code> ，入口文件的话是 <code>www/js/index.js</code> 文件的 <code>deviceready</code> 事件中。</p>\n<p>如果要构建代码的话，执行下面的命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova build</span><br></pre></td></tr></table></figure>\n<p>这个命令会构建你安装的所有平台，如果只想构建某一平台的话，可以把平台的名字加在命令后面，如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova build ios</span><br></pre></td></tr></table></figure>\n<p>如果想了解更多的参数的话，可以看一下后面的链接。⇒ <a href=\"http://cordova.axuer.com/docs/zh-cn/latest/reference/cordova-cli/index.html#cordova-build-command\" target=\"_blank\" rel=\"noopener\">更多参数</a></p>\n<h3 id=\"测试App\"><a href=\"#测试App\" class=\"headerlink\" title=\"测试App\"></a>测试App</h3><p>构建完app之后我们就可以测试了，通常各平台的SDK中会提供模拟器，我们只需要执行下面的命令就可以启动模拟器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova emulate android</span><br></pre></td></tr></table></figure>\n<p>当然如果你觉得用实机查看更自然一些的话，也可以把手机插上数据线与电脑建立连接，然后执行下面的命令就可以了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova run android</span><br></pre></td></tr></table></figure>\n<p>上面演示的是 Android 的app测试过程，每个平台虽然基本类似，但还是有出入，所以，下面提供了不同平台的调试方法，供你预览。</p>\n<ul>\n<li><a href=\"http://cordova.axuer.com/docs/zh-cn/latest/guide/platforms/android/index.html#setting-up-an-emulator\" target=\"_blank\" rel=\"noopener\">设置Android模拟器</a></li>\n<li><a href=\"http://cordova.axuer.com/docs/zh-cn/latest/reference/cordova-cli/index.html#cordova-run-command\" target=\"_blank\" rel=\"noopener\">Cordova run 命令参考文档</a></li>\n<li><a href=\"http://cordova.axuer.com/docs/zh-cn/latest/reference/cordova-cli/index.html#cordova-emulate-command\" target=\"_blank\" rel=\"noopener\">Cordova emulate 命令参考文档</a></li>\n</ul>\n<h3 id=\"添加插件\"><a href=\"#添加插件\" class=\"headerlink\" title=\"添加插件\"></a>添加插件</h3><p>如果只是开发一个Cordova框架的webapp，那么你不需要装任何插件，直接用前端技术开发就好了，但是应该没人会这么做吧，毕竟开发这个的目的就是为了跨平台开发原生级移动App，因此要调用移动设备的各种功能就必须安装插件。</p>\n<h4 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h4><p>Cordova 插件是一些使用Javascript调用原生SDK功能的包；你可以使用两种方式找到你想要的插件</p>\n<ol>\n<li>通过Cordova提供的包管理平台 ⇒ <a href=\"http://cordova.axuer.com/plugins/\" target=\"_blank\" rel=\"noopener\">插件搜索页</a></li>\n<li>通过命令行搜索 <code>cordova plugin search camera</code></li>\n</ol>\n<p>选好你要安装的插件之后你需要执行下面的命令来安装它</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova plugin add &lt;plugin name&gt; <span class=\"comment\">// 如 cordova plugin add cordova-plugin-chrome-apps-proxy</span></span><br></pre></td></tr></table></figure>\n<p>如果你的包没有发布在Cordova的平台上，也可以使用git地址来安装。<br>另外Cordova还非常贴心的提供了一个工具 <code>Plugman</code> 来帮助开发者更好的管理Cordova插件。⇒ <a href=\"http://cordova.axuer.com/docs/zh-cn/latest/plugin_ref/plugman.html\" target=\"_blank\" rel=\"noopener\">Plugman参考</a></p>\n<p>如果要查看你安装了哪些插件可以使用下面任意一种命令都可以。（咱也不知道为啥提供这么多方式，反正好用无脑）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugin ls</span><br><span class=\"line\">plugin list</span><br><span class=\"line\">plugin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">$ cordova plugin ls</span></span><br><span class=\"line\"><span class=\"comment\">cordova-plugin-whitelist 1.2.1 \"Whitelist\"</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>如果想知道更多关于 plugin 的命令参数，可以看右边的链接 ⇒ <a href=\"http://cordova.axuer.com/docs/zh-cn/latest/reference/cordova-cli/index.html#cordova-plugin-command\" target=\"_blank\" rel=\"noopener\">plugin参数</a></p>\n<h4 id=\"使用-merges-自定义每个平台\"><a href=\"#使用-merges-自定义每个平台\" class=\"headerlink\" title=\"使用 merges 自定义每个平台\"></a>使用 <code>merges</code> 自定义每个平台</h4><p>虽然可以用一套代码来构建多个平台，但一些平台会有自己的特点，就好像chrome浏览器默认的字体大小与IE的不同，Android与IOS也有不一样的地方，这种情况下去改 www 目录下的文件显然是不合适的，所以 Cordova 提供了 merges 方式来适配不同平台各自的特别处理，你要做的就是在项目的根目录下创建一个 merges 目录，比如你要适配Android，你就可以在 merges 下创建一个 android 目录，然后在下面或覆盖或添加新的资源。（这里官网没有说merges在哪里创建，试验后发现是在根目录下）</p>\n<h4 id=\"更新Cordova和你的项目\"><a href=\"#更新Cordova和你的项目\" class=\"headerlink\" title=\"更新Cordova和你的项目\"></a>更新Cordova和你的项目</h4><p>如果你要更新你的Cordova（通常不建议这么干，当然你知道后果并想要使用新的特性或者修正bug除外），那么你需要执行一下 update 命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm update -g cordova</span><br></pre></td></tr></table></figure>\n<p>当然你也可以指定更新到什么版本（这都是npm的知识了）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g cordova@<span class=\"number\">3.1</span><span class=\"number\">.0</span><span class=\"number\">-0.2</span><span class=\"number\">.0</span></span><br></pre></td></tr></table></figure>\n<p>你也可以使用下面的命令查看当前的版本（还是npm的知识）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm info cordova version</span><br></pre></td></tr></table></figure>\n<p>你是不是以为这样就可以了，不好意思还不行，你还需要把各个平台进行一下升级</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova platform update android --save</span><br><span class=\"line\">cordova platform update ios --save</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>其实这也好理解，你都已经轿车换SUV了，总不能还用原来的车轱辘吧，只是我希望能不能在换车的时候一块儿把车轱辘换了（这里的意思是希望直接自动化处理了）</p>\n<p>到这里你的第一个 <code>App</code> 就已经开发好了，是不是还有点成就感。</p>\n<h3 id=\"一些参考资料\"><a href=\"#一些参考资料\" class=\"headerlink\" title=\"一些参考资料\"></a>一些参考资料</h3><p>到这里一个简单的基于 <code>Cordova</code> 搭建的 <code>App</code> 就实现了，当然一个 <code>App</code> 绝不这么简单，各平台的 <code>SDK</code> 安装也没那么简单，但这不是本篇文章要说的事了，下一篇文章我会说说如何应对各种不同的开发平台，在这之前还请你看一下 <code>Cordova</code> 都支持哪些平台，具体看一下下面的链接。<br>好了，今天就先写到这里，下篇文章我们再见。</p>\n<p><a href=\"http://cordova.axuer.com/docs/zh-cn/latest/guide/support/index.html\" target=\"_blank\" rel=\"noopener\">平台支持</a></p>\n<p>（待续…）</p>"},{"title":"npm相关资料","date":"2017-08-30T04:24:49.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n近两年前端突然呈爆发增长之势，node的出现起了重要的作用，而node之中有一个重要的功能就是npm包管理工具，下面就记录一下我学习npm之中遇到的一些问题及解决方案，仅供各位参考。\n<!-- more -->\n\n> npm全称Node Package Manager，是node.js的模块依赖管理工具。由于npm的源在国外，所以国内用户使用起来各种不方便。下面整理出了一部分国内优秀的npm镜像资源，国内用户可以选择使用。\n\n## 国内优秀npm镜像\n\n### 淘宝npm镜像\n- 搜索地址：http://npm.taobao.org/\n- registry地址：http://registry.npm.taobao.org/\n\n### cnpmjs镜像\n- 搜索地址：http://cnpmjs.org/\n- registry地址：http://r.cnpmjs.org/\n\n## 如何使用\n有很多方法来配置npm的registry地址，下面根据不同情境列出几种比较常用的方法。以淘宝npm镜像举例：\n\n### 1.临时使用\n```\nnpm --registry https://registry.npm.taobao.org install express\n```\n### 2.持久使用\n\n```\nnpm config set registry https://registry.npm.taobao.org\n\n// 配置后可通过下面方式来验证是否成功\nnpm config get registry\n// 或\nnpm info express\n```\n### 3.通过cnpm使用\n\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n// 使用\ncnpm install express\n```\n","source":"_posts/npm-source.md","raw":"---\ntitle: npm相关资料\ndate: 2017-08-30 12:24:49\ncategories: \n\t- Nodejs\n\t- Npm\ntags:\n\t- npm\n\t- node\n\t- rnpm\n---\n> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n近两年前端突然呈爆发增长之势，node的出现起了重要的作用，而node之中有一个重要的功能就是npm包管理工具，下面就记录一下我学习npm之中遇到的一些问题及解决方案，仅供各位参考。\n<!-- more -->\n\n> npm全称Node Package Manager，是node.js的模块依赖管理工具。由于npm的源在国外，所以国内用户使用起来各种不方便。下面整理出了一部分国内优秀的npm镜像资源，国内用户可以选择使用。\n\n## 国内优秀npm镜像\n\n### 淘宝npm镜像\n- 搜索地址：http://npm.taobao.org/\n- registry地址：http://registry.npm.taobao.org/\n\n### cnpmjs镜像\n- 搜索地址：http://cnpmjs.org/\n- registry地址：http://r.cnpmjs.org/\n\n## 如何使用\n有很多方法来配置npm的registry地址，下面根据不同情境列出几种比较常用的方法。以淘宝npm镜像举例：\n\n### 1.临时使用\n```\nnpm --registry https://registry.npm.taobao.org install express\n```\n### 2.持久使用\n\n```\nnpm config set registry https://registry.npm.taobao.org\n\n// 配置后可通过下面方式来验证是否成功\nnpm config get registry\n// 或\nnpm info express\n```\n### 3.通过cnpm使用\n\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n// 使用\ncnpm install express\n```\n","slug":"npm-source","published":1,"updated":"2020-04-02T03:20:12.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs53006cooa6ejcz7q1o","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>近两年前端突然呈爆发增长之势，node的出现起了重要的作用，而node之中有一个重要的功能就是npm包管理工具，下面就记录一下我学习npm之中遇到的一些问题及解决方案，仅供各位参考。</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>npm全称Node Package Manager，是node.js的模块依赖管理工具。由于npm的源在国外，所以国内用户使用起来各种不方便。下面整理出了一部分国内优秀的npm镜像资源，国内用户可以选择使用。</p>\n</blockquote>\n<h2 id=\"国内优秀npm镜像\"><a href=\"#国内优秀npm镜像\" class=\"headerlink\" title=\"国内优秀npm镜像\"></a>国内优秀npm镜像</h2><h3 id=\"淘宝npm镜像\"><a href=\"#淘宝npm镜像\" class=\"headerlink\" title=\"淘宝npm镜像\"></a>淘宝npm镜像</h3><ul>\n<li>搜索地址：<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">http://npm.taobao.org/</a></li>\n<li>registry地址：<a href=\"http://registry.npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">http://registry.npm.taobao.org/</a></li>\n</ul>\n<h3 id=\"cnpmjs镜像\"><a href=\"#cnpmjs镜像\" class=\"headerlink\" title=\"cnpmjs镜像\"></a>cnpmjs镜像</h3><ul>\n<li>搜索地址：<a href=\"http://cnpmjs.org/\" target=\"_blank\" rel=\"noopener\">http://cnpmjs.org/</a></li>\n<li>registry地址：<a href=\"http://r.cnpmjs.org/\" target=\"_blank\" rel=\"noopener\">http://r.cnpmjs.org/</a></li>\n</ul>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>有很多方法来配置npm的registry地址，下面根据不同情境列出几种比较常用的方法。以淘宝npm镜像举例：</p>\n<h3 id=\"1-临时使用\"><a href=\"#1-临时使用\" class=\"headerlink\" title=\"1.临时使用\"></a>1.临时使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm --registry https:&#x2F;&#x2F;registry.npm.taobao.org install express</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-持久使用\"><a href=\"#2-持久使用\" class=\"headerlink\" title=\"2.持久使用\"></a>2.持久使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 配置后可通过下面方式来验证是否成功</span><br><span class=\"line\">npm config get registry</span><br><span class=\"line\">&#x2F;&#x2F; 或</span><br><span class=\"line\">npm info express</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-通过cnpm使用\"><a href=\"#3-通过cnpm使用\" class=\"headerlink\" title=\"3.通过cnpm使用\"></a>3.通过cnpm使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 使用</span><br><span class=\"line\">cnpm install express</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>近两年前端突然呈爆发增长之势，node的出现起了重要的作用，而node之中有一个重要的功能就是npm包管理工具，下面就记录一下我学习npm之中遇到的一些问题及解决方案，仅供各位参考。</p>","more":"<blockquote>\n<p>npm全称Node Package Manager，是node.js的模块依赖管理工具。由于npm的源在国外，所以国内用户使用起来各种不方便。下面整理出了一部分国内优秀的npm镜像资源，国内用户可以选择使用。</p>\n</blockquote>\n<h2 id=\"国内优秀npm镜像\"><a href=\"#国内优秀npm镜像\" class=\"headerlink\" title=\"国内优秀npm镜像\"></a>国内优秀npm镜像</h2><h3 id=\"淘宝npm镜像\"><a href=\"#淘宝npm镜像\" class=\"headerlink\" title=\"淘宝npm镜像\"></a>淘宝npm镜像</h3><ul>\n<li>搜索地址：<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">http://npm.taobao.org/</a></li>\n<li>registry地址：<a href=\"http://registry.npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">http://registry.npm.taobao.org/</a></li>\n</ul>\n<h3 id=\"cnpmjs镜像\"><a href=\"#cnpmjs镜像\" class=\"headerlink\" title=\"cnpmjs镜像\"></a>cnpmjs镜像</h3><ul>\n<li>搜索地址：<a href=\"http://cnpmjs.org/\" target=\"_blank\" rel=\"noopener\">http://cnpmjs.org/</a></li>\n<li>registry地址：<a href=\"http://r.cnpmjs.org/\" target=\"_blank\" rel=\"noopener\">http://r.cnpmjs.org/</a></li>\n</ul>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>有很多方法来配置npm的registry地址，下面根据不同情境列出几种比较常用的方法。以淘宝npm镜像举例：</p>\n<h3 id=\"1-临时使用\"><a href=\"#1-临时使用\" class=\"headerlink\" title=\"1.临时使用\"></a>1.临时使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm --registry https:&#x2F;&#x2F;registry.npm.taobao.org install express</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-持久使用\"><a href=\"#2-持久使用\" class=\"headerlink\" title=\"2.持久使用\"></a>2.持久使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 配置后可通过下面方式来验证是否成功</span><br><span class=\"line\">npm config get registry</span><br><span class=\"line\">&#x2F;&#x2F; 或</span><br><span class=\"line\">npm info express</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-通过cnpm使用\"><a href=\"#3-通过cnpm使用\" class=\"headerlink\" title=\"3.通过cnpm使用\"></a>3.通过cnpm使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 使用</span><br><span class=\"line\">cnpm install express</span><br></pre></td></tr></table></figure>"},{"title":"path.join 与 path.resolve 的区别","date":"2020-03-23T06:42:52.000Z","_content":"\n# path.join 与 path.resolve 的区别\n\n1. 对于以/开始的路径片段，path.join只是简单的将该路径片段进行拼接，而path.resolve将以/开始的路径片段作为根目录，在此之前的路径将会被丢弃，就像是在terminal中使用cd命令一样。 \n\n``` js\npath.join('/a', '/b') // 'a/b'\npath.resolve('/a', '/b') // '/b'\n```\n2. path.resolve总是返回一个以相对于当前的工作目录（working directory）的绝对路径。\n\n\n``` js\npath.join('./a', './b') // 'a/b'\npath.resolve('./a', './b') // '/Users/username/Projects/webpack-demo/a/b'\n```\n","source":"_posts/path-join-vs-path-resolve.md","raw":"---\ntitle: path.join 与 path.resolve 的区别\ndate: 2020-03-23 14:42:52\ncategories: \n\t- Nodejs\ntags: \n\t- Nodejs\n---\n\n# path.join 与 path.resolve 的区别\n\n1. 对于以/开始的路径片段，path.join只是简单的将该路径片段进行拼接，而path.resolve将以/开始的路径片段作为根目录，在此之前的路径将会被丢弃，就像是在terminal中使用cd命令一样。 \n\n``` js\npath.join('/a', '/b') // 'a/b'\npath.resolve('/a', '/b') // '/b'\n```\n2. path.resolve总是返回一个以相对于当前的工作目录（working directory）的绝对路径。\n\n\n``` js\npath.join('./a', './b') // 'a/b'\npath.resolve('./a', './b') // '/Users/username/Projects/webpack-demo/a/b'\n```\n","slug":"path-join-vs-path-resolve","published":1,"updated":"2020-04-02T03:20:12.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs54006gooa6bsveadfu","content":"<h1 id=\"path-join-与-path-resolve-的区别\"><a href=\"#path-join-与-path-resolve-的区别\" class=\"headerlink\" title=\"path.join 与 path.resolve 的区别\"></a>path.join 与 path.resolve 的区别</h1><ol>\n<li>对于以/开始的路径片段，path.join只是简单的将该路径片段进行拼接，而path.resolve将以/开始的路径片段作为根目录，在此之前的路径将会被丢弃，就像是在terminal中使用cd命令一样。 </li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path.join(<span class=\"string\">'/a'</span>, <span class=\"string\">'/b'</span>) <span class=\"comment\">// 'a/b'</span></span><br><span class=\"line\">path.resolve(<span class=\"string\">'/a'</span>, <span class=\"string\">'/b'</span>) <span class=\"comment\">// '/b'</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>path.resolve总是返回一个以相对于当前的工作目录（working directory）的绝对路径。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path.join(<span class=\"string\">'./a'</span>, <span class=\"string\">'./b'</span>) <span class=\"comment\">// 'a/b'</span></span><br><span class=\"line\">path.resolve(<span class=\"string\">'./a'</span>, <span class=\"string\">'./b'</span>) <span class=\"comment\">// '/Users/username/Projects/webpack-demo/a/b'</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"path-join-与-path-resolve-的区别\"><a href=\"#path-join-与-path-resolve-的区别\" class=\"headerlink\" title=\"path.join 与 path.resolve 的区别\"></a>path.join 与 path.resolve 的区别</h1><ol>\n<li>对于以/开始的路径片段，path.join只是简单的将该路径片段进行拼接，而path.resolve将以/开始的路径片段作为根目录，在此之前的路径将会被丢弃，就像是在terminal中使用cd命令一样。 </li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path.join(<span class=\"string\">'/a'</span>, <span class=\"string\">'/b'</span>) <span class=\"comment\">// 'a/b'</span></span><br><span class=\"line\">path.resolve(<span class=\"string\">'/a'</span>, <span class=\"string\">'/b'</span>) <span class=\"comment\">// '/b'</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>path.resolve总是返回一个以相对于当前的工作目录（working directory）的绝对路径。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path.join(<span class=\"string\">'./a'</span>, <span class=\"string\">'./b'</span>) <span class=\"comment\">// 'a/b'</span></span><br><span class=\"line\">path.resolve(<span class=\"string\">'./a'</span>, <span class=\"string\">'./b'</span>) <span class=\"comment\">// '/Users/username/Projects/webpack-demo/a/b'</span></span><br></pre></td></tr></table></figure>\n"},{"title":"由打印引起的一点小问题，写table时别忘了写thead和tbody","date":"2020-02-12T00:30:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n这两天复工，公司一个小伙伴在群里问了一个问题\n> 如何在打印表格的时候，让超过一页的表格分割线不被截断\n\n说着他有贴上来了一张图，一张因为跨页被截断了的表格，说实话打印的场景接触的不多，打印表格一般都是制式的样式所以也不会出现这问题，一时间也没有头绪，想着这个是不是没什么办法解决，隔天他发来一个消息，说是解决了，给表格里加上了 `tr` `td` 就好了，接着他又发来一张图，还真是，不过上下边距发生了一些变化，我问他是不是自己改了边距所以好了，他说没改，然后我问他那他是怎么解决的，他说因为实在找不到问题解决方案和产生原因，于是就把代码重构了一下，按照标准写法写了一下，结果就好了。。。怎么说呢，也是神奇，我也到网上去查了查相关的材料，并没有特别对的上的原因，凭感觉来说，应该是thead和tbody上有默认的css样式解决了上面的问题，暂且记下这个问题，避免以后遇到又忘了是怎么回事。","source":"_posts/print-table-problem.md","raw":"---\ntitle: 由打印引起的一点小问题，写table时别忘了写thead和tbody\ndate: 2020-02-12 08:30:00\ncategories: \n\t- 前端问题\ntags:\n\t- 奇怪问题\n---\n> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n这两天复工，公司一个小伙伴在群里问了一个问题\n> 如何在打印表格的时候，让超过一页的表格分割线不被截断\n\n说着他有贴上来了一张图，一张因为跨页被截断了的表格，说实话打印的场景接触的不多，打印表格一般都是制式的样式所以也不会出现这问题，一时间也没有头绪，想着这个是不是没什么办法解决，隔天他发来一个消息，说是解决了，给表格里加上了 `tr` `td` 就好了，接着他又发来一张图，还真是，不过上下边距发生了一些变化，我问他是不是自己改了边距所以好了，他说没改，然后我问他那他是怎么解决的，他说因为实在找不到问题解决方案和产生原因，于是就把代码重构了一下，按照标准写法写了一下，结果就好了。。。怎么说呢，也是神奇，我也到网上去查了查相关的材料，并没有特别对的上的原因，凭感觉来说，应该是thead和tbody上有默认的css样式解决了上面的问题，暂且记下这个问题，避免以后遇到又忘了是怎么回事。","slug":"print-table-problem","published":1,"updated":"2020-02-12T00:28:48.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs56006iooa66p1g71r9","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这两天复工，公司一个小伙伴在群里问了一个问题</p>\n<blockquote>\n<p>如何在打印表格的时候，让超过一页的表格分割线不被截断</p>\n</blockquote>\n<p>说着他有贴上来了一张图，一张因为跨页被截断了的表格，说实话打印的场景接触的不多，打印表格一般都是制式的样式所以也不会出现这问题，一时间也没有头绪，想着这个是不是没什么办法解决，隔天他发来一个消息，说是解决了，给表格里加上了 <code>tr</code> <code>td</code> 就好了，接着他又发来一张图，还真是，不过上下边距发生了一些变化，我问他是不是自己改了边距所以好了，他说没改，然后我问他那他是怎么解决的，他说因为实在找不到问题解决方案和产生原因，于是就把代码重构了一下，按照标准写法写了一下，结果就好了。。。怎么说呢，也是神奇，我也到网上去查了查相关的材料，并没有特别对的上的原因，凭感觉来说，应该是thead和tbody上有默认的css样式解决了上面的问题，暂且记下这个问题，避免以后遇到又忘了是怎么回事。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这两天复工，公司一个小伙伴在群里问了一个问题</p>\n<blockquote>\n<p>如何在打印表格的时候，让超过一页的表格分割线不被截断</p>\n</blockquote>\n<p>说着他有贴上来了一张图，一张因为跨页被截断了的表格，说实话打印的场景接触的不多，打印表格一般都是制式的样式所以也不会出现这问题，一时间也没有头绪，想着这个是不是没什么办法解决，隔天他发来一个消息，说是解决了，给表格里加上了 <code>tr</code> <code>td</code> 就好了，接着他又发来一张图，还真是，不过上下边距发生了一些变化，我问他是不是自己改了边距所以好了，他说没改，然后我问他那他是怎么解决的，他说因为实在找不到问题解决方案和产生原因，于是就把代码重构了一下，按照标准写法写了一下，结果就好了。。。怎么说呢，也是神奇，我也到网上去查了查相关的材料，并没有特别对的上的原因，凭感觉来说，应该是thead和tbody上有默认的css样式解决了上面的问题，暂且记下这个问题，避免以后遇到又忘了是怎么回事。</p>\n"},{"title":"Nodejs 下 RESTful 架构的最佳实践（课堂笔记）","date":"2020-02-11T08:00:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n## 什么是 RESTful\n> REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。\n\n实际上就是 url 风格/ 路由风格 ， 给出一种写路由的原则  ---  面向资源\ntip：静态路由利于seo优化 api/news/1，动态路由不利于seo优化 api/news?id=1\n\n原来的风格\n| 路由 | 功能 | 描述 |\n| ---- | ---- |—---|\n| http://127.0.0.1/user/query/1     | 查询 | 根据ID查询用户信息 |\n| http://127.0.0.1/user/save        | 保存 | 注册用户 |\n| http://127.0.0.1/user/update      | 更新 | 修改用户 |\n| http://127.0.0.1/user/delete/{id} | 删除 | 删除用户 |\n\nRESTful --- 面向资源：对于同一个资源都在同一个 URL 进行，通过判断 HTTP 请求的类型来决定做不同的事\n/user 一个资源\n| 路由                    | 请求类型 |\n| ----------------------- | -------- |\n| http://127.0.0.1/user/1 | GET      |\n| http://127.0.0.1/user   | POST     |\n| http://127.0.0.1/user   | PUT      |\n| http://127.0.0.1/user   | DELETE   |\n\nURL 描述资源 ， HTTP 描述请求。（HTTP协议无语义无状态 ---- 降低复杂度，业务无关 --- 架构代码业务无关)\n\nRESTful 采用的是顶层路由\n> 顶层路由设计：不需要有物理文件映射路由\n\n``` js\n// express\n// app.js\nconst express = require('express')\nconst app = express()\napp.get('/case.avi',(req, res)=>{\n\tres.send('hello world'); // 不需要对应物理文件\n})\napp.listen(3000)\n```\n原生接口\n``` js\n// index.js\nconst http = require('http');\nconst mysql = require('mysql'); // mysql\nconst co = require('co-mysql') // 异步同步化\nconst md5 = require('md5-node') // md5加密\n\n// 连接数据库\nlet db = mysql.createPool({ // 连接池自己管理 不用关闭\n\thost:'localhost', \n\tuser:'root', \n\tpassword:'root',\n\tdatabase:'user'\n})\nlet conn = co(db)\n\nconst app = http.createServer(async (req,res)=>{\n\tif(req.method === 'POST'){\n\t\tif(req.url === '/user'){\n\t\t\t// res.end(JSON.stringify({'message':'对user发起post请求'}))\n\t\t\treq.on('data', async (data)=>{\n\t\t\t\tarr.push(data)\n\t\t\t})\n\t\t\treq.on('end',async ()=>{\n\t\t\t\tlet buffer = Buffer.concat(arr);\n\t\t\t\t// json对象\n\t\t\t\tlet {username,pasword} = JSON.parse(buffer.toString())\n\t\t\t\t// console.log(username,pasword)\n\t\t\t\tlet sql = `selct user from admin where user = ${username}`\n\t\t\t\tlet data = await conn.query(sql);\n\t\t\t\t// console.log(data)\n\t\t\t\tif(data.length >=1 ){\n\t\t\t\t\tres.end(JSON.stringify({\n\t\t\t\t\t\t'status':200,\n\t\t\t\t\t\t'message':'用户名已经注册'\n\t\t\t\t\t}))\n\t\t\t\t}else{\n\t\t\t\t\t// 写入数据库\n\t\t\t\t\tpassword = md5(password);\n\t\t\t\t\tlet sql = `INSERT INTO admin (user,password) VALUES ('${username}','${password}')`\n\t\t\t\t\tawait conn.query(sql);\n\t\t\t\t\tres.end(JSON.stringify({\n\t\t\t\t\t\t'status':200,\n\t\t\t\t\t\t'message':'注册成功'\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}if(req.method === 'GET'){\n\t\tif(req.url === '/user'){\n\t\t\t// res.end(JSON.stringify({'message':'对user发起get请求'}))\n\t\t\tlet sql = `SELECT id,user,password FROM admin`\n\t\t\tlet data = await conn.query(sql);\n\t\t\tres.end(JSON.stringify(data))\n\t\t}\n\t}\n}).listen(3000)\n\n// .http 文件\n@url = http://localhost:3000\n@type = Content-Type: applications\n\nGET {{url}}/user HTTP/1.1\n\nPOST {{url}}/user HTTP/1.1\n{{type}}\n\n{\n\tusername:'admin',\n\tpassword:123456\n}\n```\n使用express实现(express --- generater yard ,koa --- async await)\n``` js\n\nconst express = require('express')\nconst app = express()\nconst mysql = require('mysql'); // mysql\nconst co = require('co-mysql') // 异步同步化\nconst md5 = require('md5-node') // md5加密\nconst bodyparse = require('body-parse')\n// 连接数据库\nlet db = mysql.createPool({\n\thost:'localhost', \n\tuser:'root', \n\tpassword:'root',\n\tdatabase:'user'\n})\nlet conn = co(db)\n\napp.use(bodyparse.urlencoded({\n\textended:true // 返回对象是兼职对，false - string/array true - any\n}))\napp.use(bodyparse.json())\n\napp.post('/user',async (req.res)=>{\n\tlet { username , password} = req.body\n\t// console.log(username,pasword)\n\tlet sql = `selct user from admin where user = ${username}`\n\tlet data = await conn.query(sql);\n\t// console.log(data)\n\tif(data.length >=1 ){\n\t\tres.send(JSON.stringify({\n\t\t\t'status':200,\n\t\t\t'message':'用户名已经注册'\n\t\t}))\n\t}else{\n\t\t// 写入数据库\n\t\tpassword = md5(password);\n\t\tlet sql = `INSERT INTO admin (user,password) VALUES ('${username}','${password}')`\n\t\tawait conn.query(sql);\n\t\tres.send(JSON.stringify({\n\t\t\t'status':200,\n\t\t\t'message':'注册成功'\n\t\t}))\n\t}\n})\n\napp.get('/user/:id',(req,res)=>{\n\tres.send(req.params.id)\n\n\tlet sql = `SELECT id,user,password FROM admin WHERE id = ${req.params.id}`\n\tlet data = await conn.query(sql);\n\tres.end(JSON.stringify(data))\n})\n\napp.listen(3000)\n```\n\n使用koa实现\n``` js\n\n\n// config.js\nmodule.exports = {\n\thost:'localhost', \n\tuser:'root', \n\tpassword:'root',\n\tdatabase:'user'\n}\n\n// libs/database.js\nconst config = require('../config')\nconst mysql = require('mysql'); // mysql\nconst co = require('co-mysql') // 异步同步化\n// 连接数据库\nlet db = mysql.createPool({\n\thost:config.host, \n\tuser:config.user, \n\tpassword:config.password,\n\tdatabase:config.database\n})\nlet conn = co(db)\n\n// router/user/index.js\nconst Router = require('koa-router')\nconst md5 = require('md5-node') // md5加密\nconst router = new Router();\n\nrouter.get('/user',async ctx=>{\n\tctx.body = '主页'\n})\nrouter.post('/user',async ctx=>{\n\tlet {username,password} = ctx.request.body\n\t// console.log(username,password)\n\tctx.body = {\n\t\tusername,password\n\t}\n})\nmodule.exports = router.routes();\n\n// app.js\nconst koa = require('koa')\nconst Router = require('koa-router')\nconst body = require('koa-bodyparse')\nconst config = require('config')\nconst app = new Koa()\nconst router = new Router()\napp.context.db = require('./libs/database')\napp.context.config = config\napp.use(body())\nrouter.use('/api',require('./router/user'))\napp.use(router.routes())\napp.listen(3000)\n```","source":"_posts/restful-architecture.md","raw":"---\ntitle: Nodejs 下 RESTful 架构的最佳实践（课堂笔记）\ndate: 2020-02-11 16:00:00\ncategories: \n\t- Nodejs\ntags:\n\t- Nodejs\n\t- RESTful\n---\n> 作者：李旭光\n> 引用请标明出处\n\n## 什么是 RESTful\n> REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。\n\n实际上就是 url 风格/ 路由风格 ， 给出一种写路由的原则  ---  面向资源\ntip：静态路由利于seo优化 api/news/1，动态路由不利于seo优化 api/news?id=1\n\n原来的风格\n| 路由 | 功能 | 描述 |\n| ---- | ---- |—---|\n| http://127.0.0.1/user/query/1     | 查询 | 根据ID查询用户信息 |\n| http://127.0.0.1/user/save        | 保存 | 注册用户 |\n| http://127.0.0.1/user/update      | 更新 | 修改用户 |\n| http://127.0.0.1/user/delete/{id} | 删除 | 删除用户 |\n\nRESTful --- 面向资源：对于同一个资源都在同一个 URL 进行，通过判断 HTTP 请求的类型来决定做不同的事\n/user 一个资源\n| 路由                    | 请求类型 |\n| ----------------------- | -------- |\n| http://127.0.0.1/user/1 | GET      |\n| http://127.0.0.1/user   | POST     |\n| http://127.0.0.1/user   | PUT      |\n| http://127.0.0.1/user   | DELETE   |\n\nURL 描述资源 ， HTTP 描述请求。（HTTP协议无语义无状态 ---- 降低复杂度，业务无关 --- 架构代码业务无关)\n\nRESTful 采用的是顶层路由\n> 顶层路由设计：不需要有物理文件映射路由\n\n``` js\n// express\n// app.js\nconst express = require('express')\nconst app = express()\napp.get('/case.avi',(req, res)=>{\n\tres.send('hello world'); // 不需要对应物理文件\n})\napp.listen(3000)\n```\n原生接口\n``` js\n// index.js\nconst http = require('http');\nconst mysql = require('mysql'); // mysql\nconst co = require('co-mysql') // 异步同步化\nconst md5 = require('md5-node') // md5加密\n\n// 连接数据库\nlet db = mysql.createPool({ // 连接池自己管理 不用关闭\n\thost:'localhost', \n\tuser:'root', \n\tpassword:'root',\n\tdatabase:'user'\n})\nlet conn = co(db)\n\nconst app = http.createServer(async (req,res)=>{\n\tif(req.method === 'POST'){\n\t\tif(req.url === '/user'){\n\t\t\t// res.end(JSON.stringify({'message':'对user发起post请求'}))\n\t\t\treq.on('data', async (data)=>{\n\t\t\t\tarr.push(data)\n\t\t\t})\n\t\t\treq.on('end',async ()=>{\n\t\t\t\tlet buffer = Buffer.concat(arr);\n\t\t\t\t// json对象\n\t\t\t\tlet {username,pasword} = JSON.parse(buffer.toString())\n\t\t\t\t// console.log(username,pasword)\n\t\t\t\tlet sql = `selct user from admin where user = ${username}`\n\t\t\t\tlet data = await conn.query(sql);\n\t\t\t\t// console.log(data)\n\t\t\t\tif(data.length >=1 ){\n\t\t\t\t\tres.end(JSON.stringify({\n\t\t\t\t\t\t'status':200,\n\t\t\t\t\t\t'message':'用户名已经注册'\n\t\t\t\t\t}))\n\t\t\t\t}else{\n\t\t\t\t\t// 写入数据库\n\t\t\t\t\tpassword = md5(password);\n\t\t\t\t\tlet sql = `INSERT INTO admin (user,password) VALUES ('${username}','${password}')`\n\t\t\t\t\tawait conn.query(sql);\n\t\t\t\t\tres.end(JSON.stringify({\n\t\t\t\t\t\t'status':200,\n\t\t\t\t\t\t'message':'注册成功'\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}if(req.method === 'GET'){\n\t\tif(req.url === '/user'){\n\t\t\t// res.end(JSON.stringify({'message':'对user发起get请求'}))\n\t\t\tlet sql = `SELECT id,user,password FROM admin`\n\t\t\tlet data = await conn.query(sql);\n\t\t\tres.end(JSON.stringify(data))\n\t\t}\n\t}\n}).listen(3000)\n\n// .http 文件\n@url = http://localhost:3000\n@type = Content-Type: applications\n\nGET {{url}}/user HTTP/1.1\n\nPOST {{url}}/user HTTP/1.1\n{{type}}\n\n{\n\tusername:'admin',\n\tpassword:123456\n}\n```\n使用express实现(express --- generater yard ,koa --- async await)\n``` js\n\nconst express = require('express')\nconst app = express()\nconst mysql = require('mysql'); // mysql\nconst co = require('co-mysql') // 异步同步化\nconst md5 = require('md5-node') // md5加密\nconst bodyparse = require('body-parse')\n// 连接数据库\nlet db = mysql.createPool({\n\thost:'localhost', \n\tuser:'root', \n\tpassword:'root',\n\tdatabase:'user'\n})\nlet conn = co(db)\n\napp.use(bodyparse.urlencoded({\n\textended:true // 返回对象是兼职对，false - string/array true - any\n}))\napp.use(bodyparse.json())\n\napp.post('/user',async (req.res)=>{\n\tlet { username , password} = req.body\n\t// console.log(username,pasword)\n\tlet sql = `selct user from admin where user = ${username}`\n\tlet data = await conn.query(sql);\n\t// console.log(data)\n\tif(data.length >=1 ){\n\t\tres.send(JSON.stringify({\n\t\t\t'status':200,\n\t\t\t'message':'用户名已经注册'\n\t\t}))\n\t}else{\n\t\t// 写入数据库\n\t\tpassword = md5(password);\n\t\tlet sql = `INSERT INTO admin (user,password) VALUES ('${username}','${password}')`\n\t\tawait conn.query(sql);\n\t\tres.send(JSON.stringify({\n\t\t\t'status':200,\n\t\t\t'message':'注册成功'\n\t\t}))\n\t}\n})\n\napp.get('/user/:id',(req,res)=>{\n\tres.send(req.params.id)\n\n\tlet sql = `SELECT id,user,password FROM admin WHERE id = ${req.params.id}`\n\tlet data = await conn.query(sql);\n\tres.end(JSON.stringify(data))\n})\n\napp.listen(3000)\n```\n\n使用koa实现\n``` js\n\n\n// config.js\nmodule.exports = {\n\thost:'localhost', \n\tuser:'root', \n\tpassword:'root',\n\tdatabase:'user'\n}\n\n// libs/database.js\nconst config = require('../config')\nconst mysql = require('mysql'); // mysql\nconst co = require('co-mysql') // 异步同步化\n// 连接数据库\nlet db = mysql.createPool({\n\thost:config.host, \n\tuser:config.user, \n\tpassword:config.password,\n\tdatabase:config.database\n})\nlet conn = co(db)\n\n// router/user/index.js\nconst Router = require('koa-router')\nconst md5 = require('md5-node') // md5加密\nconst router = new Router();\n\nrouter.get('/user',async ctx=>{\n\tctx.body = '主页'\n})\nrouter.post('/user',async ctx=>{\n\tlet {username,password} = ctx.request.body\n\t// console.log(username,password)\n\tctx.body = {\n\t\tusername,password\n\t}\n})\nmodule.exports = router.routes();\n\n// app.js\nconst koa = require('koa')\nconst Router = require('koa-router')\nconst body = require('koa-bodyparse')\nconst config = require('config')\nconst app = new Koa()\nconst router = new Router()\napp.context.db = require('./libs/database')\napp.context.config = config\napp.use(body())\nrouter.use('/api',require('./router/user'))\napp.use(router.routes())\napp.listen(3000)\n```","slug":"restful-architecture","published":1,"updated":"2020-02-23T10:00:28.743Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs5h006nooa6gpvv4doz","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h2 id=\"什么是-RESTful\"><a href=\"#什么是-RESTful\" class=\"headerlink\" title=\"什么是 RESTful\"></a>什么是 RESTful</h2><blockquote>\n<p>REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。</p>\n</blockquote>\n<p>实际上就是 url 风格/ 路由风格 ， 给出一种写路由的原则  —  面向资源<br>tip：静态路由利于seo优化 api/news/1，动态路由不利于seo优化 api/news?id=1</p>\n<p>原来的风格<br>| 路由 | 功能 | 描述 |<br>| —- | —- |——|<br>| <a href=\"http://127.0.0.1/user/query/1\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/user/query/1</a>     | 查询 | 根据ID查询用户信息 |<br>| <a href=\"http://127.0.0.1/user/save\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/user/save</a>        | 保存 | 注册用户 |<br>| <a href=\"http://127.0.0.1/user/update\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/user/update</a>      | 更新 | 修改用户 |<br>| <a href=\"http://127.0.0.1/user/delete/{id}\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/user/delete/{id}</a> | 删除 | 删除用户 |</p>\n<p>RESTful — 面向资源：对于同一个资源都在同一个 URL 进行，通过判断 HTTP 请求的类型来决定做不同的事<br>/user 一个资源<br>| 路由                    | 请求类型 |<br>| ———————– | ——– |<br>| <a href=\"http://127.0.0.1/user/1\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/user/1</a> | GET      |<br>| <a href=\"http://127.0.0.1/user\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/user</a>   | POST     |<br>| <a href=\"http://127.0.0.1/user\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/user</a>   | PUT      |<br>| <a href=\"http://127.0.0.1/user\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/user</a>   | DELETE   |</p>\n<p>URL 描述资源 ， HTTP 描述请求。（HTTP协议无语义无状态 —- 降低复杂度，业务无关 — 架构代码业务无关)</p>\n<p>RESTful 采用的是顶层路由</p>\n<blockquote>\n<p>顶层路由设计：不需要有物理文件映射路由</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// express</span></span><br><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express()</span><br><span class=\"line\">app.get(<span class=\"string\">'/case.avi'</span>,(req, res)=&gt;&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">'hello world'</span>); <span class=\"comment\">// 不需要对应物理文件</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n<p>原生接口</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>); <span class=\"comment\">// mysql</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'co-mysql'</span>) <span class=\"comment\">// 异步同步化</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">'md5-node'</span>) <span class=\"comment\">// md5加密</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 连接数据库</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> db = mysql.createPool(&#123; <span class=\"comment\">// 连接池自己管理 不用关闭</span></span><br><span class=\"line\">\thost:<span class=\"string\">'localhost'</span>, </span><br><span class=\"line\">\tuser:<span class=\"string\">'root'</span>, </span><br><span class=\"line\">\tpassword:<span class=\"string\">'root'</span>,</span><br><span class=\"line\">\tdatabase:<span class=\"string\">'user'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> conn = co(db)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = http.createServer(<span class=\"keyword\">async</span> (req,res)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(req.method === <span class=\"string\">'POST'</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(req.url === <span class=\"string\">'/user'</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// res.end(JSON.stringify(&#123;'message':'对user发起post请求'&#125;))</span></span><br><span class=\"line\">\t\t\treq.on(<span class=\"string\">'data'</span>, <span class=\"keyword\">async</span> (data)=&gt;&#123;</span><br><span class=\"line\">\t\t\t\tarr.push(data)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\treq.on(<span class=\"string\">'end'</span>,<span class=\"keyword\">async</span> ()=&gt;&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> buffer = Buffer.concat(arr);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// json对象</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> &#123;username,pasword&#125; = <span class=\"built_in\">JSON</span>.parse(buffer.toString())</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// console.log(username,pasword)</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> sql = <span class=\"string\">`selct user from admin where user = <span class=\"subst\">$&#123;username&#125;</span>`</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> data = <span class=\"keyword\">await</span> conn.query(sql);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// console.log(data)</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(data.length &gt;=<span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">\t\t\t\t\tres.end(<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">'status'</span>:<span class=\"number\">200</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">'message'</span>:<span class=\"string\">'用户名已经注册'</span></span><br><span class=\"line\">\t\t\t\t\t&#125;))</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 写入数据库</span></span><br><span class=\"line\">\t\t\t\t\tpassword = md5(password);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">let</span> sql = <span class=\"string\">`INSERT INTO admin (user,password) VALUES ('<span class=\"subst\">$&#123;username&#125;</span>','<span class=\"subst\">$&#123;password&#125;</span>')`</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">await</span> conn.query(sql);</span><br><span class=\"line\">\t\t\t\t\tres.end(<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">'status'</span>:<span class=\"number\">200</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">'message'</span>:<span class=\"string\">'注册成功'</span></span><br><span class=\"line\">\t\t\t\t\t&#125;))</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">if</span>(req.method === <span class=\"string\">'GET'</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(req.url === <span class=\"string\">'/user'</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// res.end(JSON.stringify(&#123;'message':'对user发起get请求'&#125;))</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> sql = <span class=\"string\">`SELECT id,user,password FROM admin`</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> data = <span class=\"keyword\">await</span> conn.query(sql);</span><br><span class=\"line\">\t\t\tres.end(<span class=\"built_in\">JSON</span>.stringify(data))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">3000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// .http 文件</span></span><br><span class=\"line\">@url = http:<span class=\"comment\">//localhost:3000</span></span><br><span class=\"line\">@type = Content-Type: applications</span><br><span class=\"line\"></span><br><span class=\"line\">GET &#123;&#123;url&#125;&#125;/user HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\"></span><br><span class=\"line\">POST &#123;&#123;url&#125;&#125;/user HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">&#123;&#123;type&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tusername:<span class=\"string\">'admin'</span>,</span><br><span class=\"line\">\tpassword:<span class=\"number\">123456</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用express实现(express — generater yard ,koa — async await)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express()</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>); <span class=\"comment\">// mysql</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'co-mysql'</span>) <span class=\"comment\">// 异步同步化</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">'md5-node'</span>) <span class=\"comment\">// md5加密</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyparse = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parse'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 连接数据库</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> db = mysql.createPool(&#123;</span><br><span class=\"line\">\thost:<span class=\"string\">'localhost'</span>, </span><br><span class=\"line\">\tuser:<span class=\"string\">'root'</span>, </span><br><span class=\"line\">\tpassword:<span class=\"string\">'root'</span>,</span><br><span class=\"line\">\tdatabase:<span class=\"string\">'user'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> conn = co(db)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(bodyparse.urlencoded(&#123;</span><br><span class=\"line\">\textended:<span class=\"literal\">true</span> <span class=\"comment\">// 返回对象是兼职对，false - string/array true - any</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">app.use(bodyparse.json())</span><br><span class=\"line\"></span><br><span class=\"line\">app.post(<span class=\"string\">'/user'</span>,<span class=\"keyword\">async</span> (req.res)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> &#123; username , password&#125; = req.body</span><br><span class=\"line\">\t<span class=\"comment\">// console.log(username,pasword)</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> sql = <span class=\"string\">`selct user from admin where user = <span class=\"subst\">$&#123;username&#125;</span>`</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> data = <span class=\"keyword\">await</span> conn.query(sql);</span><br><span class=\"line\">\t<span class=\"comment\">// console.log(data)</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(data.length &gt;=<span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">\t\tres.send(<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">'status'</span>:<span class=\"number\">200</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'message'</span>:<span class=\"string\">'用户名已经注册'</span></span><br><span class=\"line\">\t\t&#125;))</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 写入数据库</span></span><br><span class=\"line\">\t\tpassword = md5(password);</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> sql = <span class=\"string\">`INSERT INTO admin (user,password) VALUES ('<span class=\"subst\">$&#123;username&#125;</span>','<span class=\"subst\">$&#123;password&#125;</span>')`</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">await</span> conn.query(sql);</span><br><span class=\"line\">\t\tres.send(<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">'status'</span>:<span class=\"number\">200</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'message'</span>:<span class=\"string\">'注册成功'</span></span><br><span class=\"line\">\t\t&#125;))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/user/:id'</span>,(req,res)=&gt;&#123;</span><br><span class=\"line\">\tres.send(req.params.id)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> sql = <span class=\"string\">`SELECT id,user,password FROM admin WHERE id = <span class=\"subst\">$&#123;req.params.id&#125;</span>`</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> data = <span class=\"keyword\">await</span> conn.query(sql);</span><br><span class=\"line\">\tres.end(<span class=\"built_in\">JSON</span>.stringify(data))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>使用koa实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\thost:<span class=\"string\">'localhost'</span>, </span><br><span class=\"line\">\tuser:<span class=\"string\">'root'</span>, </span><br><span class=\"line\">\tpassword:<span class=\"string\">'root'</span>,</span><br><span class=\"line\">\tdatabase:<span class=\"string\">'user'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// libs/database.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>); <span class=\"comment\">// mysql</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'co-mysql'</span>) <span class=\"comment\">// 异步同步化</span></span><br><span class=\"line\"><span class=\"comment\">// 连接数据库</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> db = mysql.createPool(&#123;</span><br><span class=\"line\">\thost:config.host, </span><br><span class=\"line\">\tuser:config.user, </span><br><span class=\"line\">\tpassword:config.password,</span><br><span class=\"line\">\tdatabase:config.database</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> conn = co(db)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// router/user/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">'md5-node'</span>) <span class=\"comment\">// md5加密</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/user'</span>,<span class=\"keyword\">async</span> ctx=&gt;&#123;</span><br><span class=\"line\">\tctx.body = <span class=\"string\">'主页'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">router.post(<span class=\"string\">'/user'</span>,<span class=\"keyword\">async</span> ctx=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> &#123;username,password&#125; = ctx.request.body</span><br><span class=\"line\">\t<span class=\"comment\">// console.log(username,password)</span></span><br><span class=\"line\">\tctx.body = &#123;</span><br><span class=\"line\">\t\tusername,password</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router.routes();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> body = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-bodyparse'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'config'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router()</span><br><span class=\"line\">app.context.db = <span class=\"built_in\">require</span>(<span class=\"string\">'./libs/database'</span>)</span><br><span class=\"line\">app.context.config = config</span><br><span class=\"line\">app.use(body())</span><br><span class=\"line\">router.use(<span class=\"string\">'/api'</span>,<span class=\"built_in\">require</span>(<span class=\"string\">'./router/user'</span>))</span><br><span class=\"line\">app.use(router.routes())</span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h2 id=\"什么是-RESTful\"><a href=\"#什么是-RESTful\" class=\"headerlink\" title=\"什么是 RESTful\"></a>什么是 RESTful</h2><blockquote>\n<p>REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。</p>\n</blockquote>\n<p>实际上就是 url 风格/ 路由风格 ， 给出一种写路由的原则  —  面向资源<br>tip：静态路由利于seo优化 api/news/1，动态路由不利于seo优化 api/news?id=1</p>\n<p>原来的风格<br>| 路由 | 功能 | 描述 |<br>| —- | —- |——|<br>| <a href=\"http://127.0.0.1/user/query/1\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/user/query/1</a>     | 查询 | 根据ID查询用户信息 |<br>| <a href=\"http://127.0.0.1/user/save\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/user/save</a>        | 保存 | 注册用户 |<br>| <a href=\"http://127.0.0.1/user/update\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/user/update</a>      | 更新 | 修改用户 |<br>| <a href=\"http://127.0.0.1/user/delete/{id}\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/user/delete/{id}</a> | 删除 | 删除用户 |</p>\n<p>RESTful — 面向资源：对于同一个资源都在同一个 URL 进行，通过判断 HTTP 请求的类型来决定做不同的事<br>/user 一个资源<br>| 路由                    | 请求类型 |<br>| ———————– | ——– |<br>| <a href=\"http://127.0.0.1/user/1\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/user/1</a> | GET      |<br>| <a href=\"http://127.0.0.1/user\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/user</a>   | POST     |<br>| <a href=\"http://127.0.0.1/user\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/user</a>   | PUT      |<br>| <a href=\"http://127.0.0.1/user\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/user</a>   | DELETE   |</p>\n<p>URL 描述资源 ， HTTP 描述请求。（HTTP协议无语义无状态 —- 降低复杂度，业务无关 — 架构代码业务无关)</p>\n<p>RESTful 采用的是顶层路由</p>\n<blockquote>\n<p>顶层路由设计：不需要有物理文件映射路由</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// express</span></span><br><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express()</span><br><span class=\"line\">app.get(<span class=\"string\">'/case.avi'</span>,(req, res)=&gt;&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">'hello world'</span>); <span class=\"comment\">// 不需要对应物理文件</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n<p>原生接口</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>); <span class=\"comment\">// mysql</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'co-mysql'</span>) <span class=\"comment\">// 异步同步化</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">'md5-node'</span>) <span class=\"comment\">// md5加密</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 连接数据库</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> db = mysql.createPool(&#123; <span class=\"comment\">// 连接池自己管理 不用关闭</span></span><br><span class=\"line\">\thost:<span class=\"string\">'localhost'</span>, </span><br><span class=\"line\">\tuser:<span class=\"string\">'root'</span>, </span><br><span class=\"line\">\tpassword:<span class=\"string\">'root'</span>,</span><br><span class=\"line\">\tdatabase:<span class=\"string\">'user'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> conn = co(db)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = http.createServer(<span class=\"keyword\">async</span> (req,res)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(req.method === <span class=\"string\">'POST'</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(req.url === <span class=\"string\">'/user'</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// res.end(JSON.stringify(&#123;'message':'对user发起post请求'&#125;))</span></span><br><span class=\"line\">\t\t\treq.on(<span class=\"string\">'data'</span>, <span class=\"keyword\">async</span> (data)=&gt;&#123;</span><br><span class=\"line\">\t\t\t\tarr.push(data)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\treq.on(<span class=\"string\">'end'</span>,<span class=\"keyword\">async</span> ()=&gt;&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> buffer = Buffer.concat(arr);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// json对象</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> &#123;username,pasword&#125; = <span class=\"built_in\">JSON</span>.parse(buffer.toString())</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// console.log(username,pasword)</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> sql = <span class=\"string\">`selct user from admin where user = <span class=\"subst\">$&#123;username&#125;</span>`</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> data = <span class=\"keyword\">await</span> conn.query(sql);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// console.log(data)</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(data.length &gt;=<span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">\t\t\t\t\tres.end(<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">'status'</span>:<span class=\"number\">200</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">'message'</span>:<span class=\"string\">'用户名已经注册'</span></span><br><span class=\"line\">\t\t\t\t\t&#125;))</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 写入数据库</span></span><br><span class=\"line\">\t\t\t\t\tpassword = md5(password);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">let</span> sql = <span class=\"string\">`INSERT INTO admin (user,password) VALUES ('<span class=\"subst\">$&#123;username&#125;</span>','<span class=\"subst\">$&#123;password&#125;</span>')`</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">await</span> conn.query(sql);</span><br><span class=\"line\">\t\t\t\t\tres.end(<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">'status'</span>:<span class=\"number\">200</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">'message'</span>:<span class=\"string\">'注册成功'</span></span><br><span class=\"line\">\t\t\t\t\t&#125;))</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">if</span>(req.method === <span class=\"string\">'GET'</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(req.url === <span class=\"string\">'/user'</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// res.end(JSON.stringify(&#123;'message':'对user发起get请求'&#125;))</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> sql = <span class=\"string\">`SELECT id,user,password FROM admin`</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> data = <span class=\"keyword\">await</span> conn.query(sql);</span><br><span class=\"line\">\t\t\tres.end(<span class=\"built_in\">JSON</span>.stringify(data))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">3000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// .http 文件</span></span><br><span class=\"line\">@url = http:<span class=\"comment\">//localhost:3000</span></span><br><span class=\"line\">@type = Content-Type: applications</span><br><span class=\"line\"></span><br><span class=\"line\">GET &#123;&#123;url&#125;&#125;/user HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\"></span><br><span class=\"line\">POST &#123;&#123;url&#125;&#125;/user HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">&#123;&#123;type&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tusername:<span class=\"string\">'admin'</span>,</span><br><span class=\"line\">\tpassword:<span class=\"number\">123456</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用express实现(express — generater yard ,koa — async await)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express()</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>); <span class=\"comment\">// mysql</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'co-mysql'</span>) <span class=\"comment\">// 异步同步化</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">'md5-node'</span>) <span class=\"comment\">// md5加密</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyparse = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parse'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 连接数据库</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> db = mysql.createPool(&#123;</span><br><span class=\"line\">\thost:<span class=\"string\">'localhost'</span>, </span><br><span class=\"line\">\tuser:<span class=\"string\">'root'</span>, </span><br><span class=\"line\">\tpassword:<span class=\"string\">'root'</span>,</span><br><span class=\"line\">\tdatabase:<span class=\"string\">'user'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> conn = co(db)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(bodyparse.urlencoded(&#123;</span><br><span class=\"line\">\textended:<span class=\"literal\">true</span> <span class=\"comment\">// 返回对象是兼职对，false - string/array true - any</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">app.use(bodyparse.json())</span><br><span class=\"line\"></span><br><span class=\"line\">app.post(<span class=\"string\">'/user'</span>,<span class=\"keyword\">async</span> (req.res)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> &#123; username , password&#125; = req.body</span><br><span class=\"line\">\t<span class=\"comment\">// console.log(username,pasword)</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> sql = <span class=\"string\">`selct user from admin where user = <span class=\"subst\">$&#123;username&#125;</span>`</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> data = <span class=\"keyword\">await</span> conn.query(sql);</span><br><span class=\"line\">\t<span class=\"comment\">// console.log(data)</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(data.length &gt;=<span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">\t\tres.send(<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">'status'</span>:<span class=\"number\">200</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'message'</span>:<span class=\"string\">'用户名已经注册'</span></span><br><span class=\"line\">\t\t&#125;))</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 写入数据库</span></span><br><span class=\"line\">\t\tpassword = md5(password);</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> sql = <span class=\"string\">`INSERT INTO admin (user,password) VALUES ('<span class=\"subst\">$&#123;username&#125;</span>','<span class=\"subst\">$&#123;password&#125;</span>')`</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">await</span> conn.query(sql);</span><br><span class=\"line\">\t\tres.send(<span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">'status'</span>:<span class=\"number\">200</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'message'</span>:<span class=\"string\">'注册成功'</span></span><br><span class=\"line\">\t\t&#125;))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/user/:id'</span>,(req,res)=&gt;&#123;</span><br><span class=\"line\">\tres.send(req.params.id)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> sql = <span class=\"string\">`SELECT id,user,password FROM admin WHERE id = <span class=\"subst\">$&#123;req.params.id&#125;</span>`</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> data = <span class=\"keyword\">await</span> conn.query(sql);</span><br><span class=\"line\">\tres.end(<span class=\"built_in\">JSON</span>.stringify(data))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>使用koa实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\thost:<span class=\"string\">'localhost'</span>, </span><br><span class=\"line\">\tuser:<span class=\"string\">'root'</span>, </span><br><span class=\"line\">\tpassword:<span class=\"string\">'root'</span>,</span><br><span class=\"line\">\tdatabase:<span class=\"string\">'user'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// libs/database.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>); <span class=\"comment\">// mysql</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'co-mysql'</span>) <span class=\"comment\">// 异步同步化</span></span><br><span class=\"line\"><span class=\"comment\">// 连接数据库</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> db = mysql.createPool(&#123;</span><br><span class=\"line\">\thost:config.host, </span><br><span class=\"line\">\tuser:config.user, </span><br><span class=\"line\">\tpassword:config.password,</span><br><span class=\"line\">\tdatabase:config.database</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> conn = co(db)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// router/user/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">'md5-node'</span>) <span class=\"comment\">// md5加密</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/user'</span>,<span class=\"keyword\">async</span> ctx=&gt;&#123;</span><br><span class=\"line\">\tctx.body = <span class=\"string\">'主页'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">router.post(<span class=\"string\">'/user'</span>,<span class=\"keyword\">async</span> ctx=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> &#123;username,password&#125; = ctx.request.body</span><br><span class=\"line\">\t<span class=\"comment\">// console.log(username,password)</span></span><br><span class=\"line\">\tctx.body = &#123;</span><br><span class=\"line\">\t\tusername,password</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router.routes();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> body = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-bodyparse'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'config'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa()</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router()</span><br><span class=\"line\">app.context.db = <span class=\"built_in\">require</span>(<span class=\"string\">'./libs/database'</span>)</span><br><span class=\"line\">app.context.config = config</span><br><span class=\"line\">app.use(body())</span><br><span class=\"line\">router.use(<span class=\"string\">'/api'</span>,<span class=\"built_in\">require</span>(<span class=\"string\">'./router/user'</span>))</span><br><span class=\"line\">app.use(router.routes())</span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>"},{"title":"解决get请求过长的问题小记","date":"2020-01-09T03:22:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n就在前天，公司里一位新入职的前端小伙伴找到我说遇到了一个问题，自己写的vue代码本地运行是好用的，但是打包后提给后台就访问不了接口了，刚开始我以为是代理配置的有问题，但是经过检查也没什么问题，因为是个`get`方法，所以我就直接在浏览器地址里敲了api地址，也能正常获取到数据，那么这么看就不是代理或者接口的问题，后来我又看了下调试工具，network中根本就没发出请求，我怀疑是直接前台就拦截了，最后我发现他这个api参数超级长，长的相当吓人，可以看一下下图。\n![lROUMt.png](https://s2.ax1x.com/2020/01/09/lROUMt.png)\n我记得url是有长度限制的，于是我就把url变短再次请求，虽然因为参数不全，接口报了错，但是发出去了，由此我定位应该是url超长，因为vue中配置了什么导致的访问被拦截了。于是我就开始了搜索引擎查找解决方案之旅，接下来就把我了解到的信息一一整理。\n<!-- more -->\n\n## URL 限制\n首先我在网上找到了一份资料介绍了URL长度的相关资料，从下面可以看出，从HTTP协议层面以及Get请求层面都没有什么限制，这个限制来自于***浏览器或者服务器的限制***。\n> Microsoft Internet Explorer (Browser)\n> IE浏览器对URL的最大限制为2083个字符，如果超过这个数字，提交按钮没有任何反应。\n> Firefox (Browser)\n> 对于Firefox浏览器URL的长度限制为65,536个字符。\n> Safari (Browser)\n> URL最大长度限制为 80,000个字符。\n> Opera (Browser)\n> URL最大长度限制为190,000个字符。\n> Google (Browser)\n> URL最大长度限制为8182个字符。\n> Apache (Server)\n> 能接受最大url长度为8,192个字符。\n> Microsoft Internet Information Server(IIS)\n> 能接受最大url的长度为16,384个字符。\n\n而且，中文会进行编码，一个汉字编码后会生成9个字符，这样算来，IE下最多也就能输入231个中文，再多就完蛋了，那么通过get请求传递参数就会显得很麻烦。\n\n通常情况下，这种超长参数的请求我们都会用post，有些地方也会说post请求没有长度限制，但是前面说了，实际上HTTP协议层面并没有任何的限制，限制只出现在浏览器或者服务器限制，get和post请求在底层上其实是一样的。\n\n最后项目修改了请求类型，把 `get` 请求改成了 `post` 请求，在网上实际还找到了另外两个方案，如果对同一组参数频繁访问的化，也可以用 `post+get` 请求的方式去处理，或者用 `sessionStorage` 下面简单介绍一下。\n\n1. 将预览内容 `post` 到服务端，根据一个唯一标识生成缓存(有效时间5分钟)，将唯一标识返回到前端，前端通过get方式传递唯一标识请求预览逻辑，拿到缓存的内容后渲染到页面。需要说明的是这里的缓存必须是分布式的。\n2. 通过H5的会话缓存 `sessionStorage` 将预览内容存储在浏览器，打开预览页后从 `sessionStorage` 中拿到内容就可以渲染出页面了。\n\n上述两种方案都不太符合我们的项目所以最终还是选择了最简单的方式\n\n## GET VS POST\n1. 多数浏览器对于POST采用两阶段发送数据的，先发送请求头，再发送请求体，即使参数再少再短，也会被分成两个步骤来发送（相对于GET），也就是第一步发送header数据，第二步再发送body部分。HTTP是应用层的协议，而在传输层有些情况TCP会出现两次连结的过程，HTTP协议本身不保存状态信息，一次请求一次响应。对于TCP而言，通信次数越多反而靠性越低，能在一次连结中传输完需要的消息是最可靠的，尽量使用GET请求来减少网络耗时。如果通信时间增加，这段时间客户端与服务器端一直保持连接状态，在服务器侧负载可能会增加，可靠性会下降。\n\n2. GET请求能够被cache，GET请求能够被保存在浏览器的浏览历史里面（密码等重要数据GET提交，别人查看历史记录，就可以直接看到这些私密数据）POST不进行缓存。\n\n3. GET参数是带在URL后面，传统IE中URL的最大可用长度为2048字符，其他浏览器对URL长度限制实现上有所不同。POST请求无长度限制（目前理论上是这样的）。\n\n4. GET提交的数据大小，不同浏览器的限制不同，一般在2k-8K之间，POST提交数据比较大，大小靠服务器的设定值限制，而且某些数据只能用 POST 方法「携带」，比如 file。\n\n5. 全部用POST不是十分合理，最好先把请求按功能和场景分下类，对数据请求频繁，数据不敏感且数据量在普通浏览器最小限定的2k范围内，这样的情况使用GET。其他地方使用POST。\n\n6. GET 的本质是「得」，而 POST 的本质是「给」。而且，GET 是「幂等」的，在这一点上，GET 被认为是「安全的」。但实际上 server 端也可以用作资源更新，但是这种用法违反了约定，容易造成 CSRF（跨站请求伪造）。\n\n# 写在最后\n以上是这次遇到问题后学到的一点知识，可能并不全面，后续如果遇到了类似的问题会继续丰富这篇文章。","source":"_posts/solve-get-params-so-long-problem.md","raw":"---\ntitle: 解决get请求过长的问题小记\ndate: 2020-01-09 11:22:22\ncategories: \n\t- 前端问题\ntags: \n\t- ajax\n\t- get\n---\n> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n就在前天，公司里一位新入职的前端小伙伴找到我说遇到了一个问题，自己写的vue代码本地运行是好用的，但是打包后提给后台就访问不了接口了，刚开始我以为是代理配置的有问题，但是经过检查也没什么问题，因为是个`get`方法，所以我就直接在浏览器地址里敲了api地址，也能正常获取到数据，那么这么看就不是代理或者接口的问题，后来我又看了下调试工具，network中根本就没发出请求，我怀疑是直接前台就拦截了，最后我发现他这个api参数超级长，长的相当吓人，可以看一下下图。\n![lROUMt.png](https://s2.ax1x.com/2020/01/09/lROUMt.png)\n我记得url是有长度限制的，于是我就把url变短再次请求，虽然因为参数不全，接口报了错，但是发出去了，由此我定位应该是url超长，因为vue中配置了什么导致的访问被拦截了。于是我就开始了搜索引擎查找解决方案之旅，接下来就把我了解到的信息一一整理。\n<!-- more -->\n\n## URL 限制\n首先我在网上找到了一份资料介绍了URL长度的相关资料，从下面可以看出，从HTTP协议层面以及Get请求层面都没有什么限制，这个限制来自于***浏览器或者服务器的限制***。\n> Microsoft Internet Explorer (Browser)\n> IE浏览器对URL的最大限制为2083个字符，如果超过这个数字，提交按钮没有任何反应。\n> Firefox (Browser)\n> 对于Firefox浏览器URL的长度限制为65,536个字符。\n> Safari (Browser)\n> URL最大长度限制为 80,000个字符。\n> Opera (Browser)\n> URL最大长度限制为190,000个字符。\n> Google (Browser)\n> URL最大长度限制为8182个字符。\n> Apache (Server)\n> 能接受最大url长度为8,192个字符。\n> Microsoft Internet Information Server(IIS)\n> 能接受最大url的长度为16,384个字符。\n\n而且，中文会进行编码，一个汉字编码后会生成9个字符，这样算来，IE下最多也就能输入231个中文，再多就完蛋了，那么通过get请求传递参数就会显得很麻烦。\n\n通常情况下，这种超长参数的请求我们都会用post，有些地方也会说post请求没有长度限制，但是前面说了，实际上HTTP协议层面并没有任何的限制，限制只出现在浏览器或者服务器限制，get和post请求在底层上其实是一样的。\n\n最后项目修改了请求类型，把 `get` 请求改成了 `post` 请求，在网上实际还找到了另外两个方案，如果对同一组参数频繁访问的化，也可以用 `post+get` 请求的方式去处理，或者用 `sessionStorage` 下面简单介绍一下。\n\n1. 将预览内容 `post` 到服务端，根据一个唯一标识生成缓存(有效时间5分钟)，将唯一标识返回到前端，前端通过get方式传递唯一标识请求预览逻辑，拿到缓存的内容后渲染到页面。需要说明的是这里的缓存必须是分布式的。\n2. 通过H5的会话缓存 `sessionStorage` 将预览内容存储在浏览器，打开预览页后从 `sessionStorage` 中拿到内容就可以渲染出页面了。\n\n上述两种方案都不太符合我们的项目所以最终还是选择了最简单的方式\n\n## GET VS POST\n1. 多数浏览器对于POST采用两阶段发送数据的，先发送请求头，再发送请求体，即使参数再少再短，也会被分成两个步骤来发送（相对于GET），也就是第一步发送header数据，第二步再发送body部分。HTTP是应用层的协议，而在传输层有些情况TCP会出现两次连结的过程，HTTP协议本身不保存状态信息，一次请求一次响应。对于TCP而言，通信次数越多反而靠性越低，能在一次连结中传输完需要的消息是最可靠的，尽量使用GET请求来减少网络耗时。如果通信时间增加，这段时间客户端与服务器端一直保持连接状态，在服务器侧负载可能会增加，可靠性会下降。\n\n2. GET请求能够被cache，GET请求能够被保存在浏览器的浏览历史里面（密码等重要数据GET提交，别人查看历史记录，就可以直接看到这些私密数据）POST不进行缓存。\n\n3. GET参数是带在URL后面，传统IE中URL的最大可用长度为2048字符，其他浏览器对URL长度限制实现上有所不同。POST请求无长度限制（目前理论上是这样的）。\n\n4. GET提交的数据大小，不同浏览器的限制不同，一般在2k-8K之间，POST提交数据比较大，大小靠服务器的设定值限制，而且某些数据只能用 POST 方法「携带」，比如 file。\n\n5. 全部用POST不是十分合理，最好先把请求按功能和场景分下类，对数据请求频繁，数据不敏感且数据量在普通浏览器最小限定的2k范围内，这样的情况使用GET。其他地方使用POST。\n\n6. GET 的本质是「得」，而 POST 的本质是「给」。而且，GET 是「幂等」的，在这一点上，GET 被认为是「安全的」。但实际上 server 端也可以用作资源更新，但是这种用法违反了约定，容易造成 CSRF（跨站请求伪造）。\n\n# 写在最后\n以上是这次遇到问题后学到的一点知识，可能并不全面，后续如果遇到了类似的问题会继续丰富这篇文章。","slug":"solve-get-params-so-long-problem","published":1,"updated":"2020-04-02T03:20:12.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs5i006pooa6g5c6cv9c","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>就在前天，公司里一位新入职的前端小伙伴找到我说遇到了一个问题，自己写的vue代码本地运行是好用的，但是打包后提给后台就访问不了接口了，刚开始我以为是代理配置的有问题，但是经过检查也没什么问题，因为是个<code>get</code>方法，所以我就直接在浏览器地址里敲了api地址，也能正常获取到数据，那么这么看就不是代理或者接口的问题，后来我又看了下调试工具，network中根本就没发出请求，我怀疑是直接前台就拦截了，最后我发现他这个api参数超级长，长的相当吓人，可以看一下下图。<br><img src=\"https://s2.ax1x.com/2020/01/09/lROUMt.png\" alt=\"lROUMt.png\"><br>我记得url是有长度限制的，于是我就把url变短再次请求，虽然因为参数不全，接口报了错，但是发出去了，由此我定位应该是url超长，因为vue中配置了什么导致的访问被拦截了。于是我就开始了搜索引擎查找解决方案之旅，接下来就把我了解到的信息一一整理。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"URL-限制\"><a href=\"#URL-限制\" class=\"headerlink\" title=\"URL 限制\"></a>URL 限制</h2><p>首先我在网上找到了一份资料介绍了URL长度的相关资料，从下面可以看出，从HTTP协议层面以及Get请求层面都没有什么限制，这个限制来自于<strong><em>浏览器或者服务器的限制</em></strong>。</p>\n<blockquote>\n<p>Microsoft Internet Explorer (Browser)<br>IE浏览器对URL的最大限制为2083个字符，如果超过这个数字，提交按钮没有任何反应。<br>Firefox (Browser)<br>对于Firefox浏览器URL的长度限制为65,536个字符。<br>Safari (Browser)<br>URL最大长度限制为 80,000个字符。<br>Opera (Browser)<br>URL最大长度限制为190,000个字符。<br>Google (Browser)<br>URL最大长度限制为8182个字符。<br>Apache (Server)<br>能接受最大url长度为8,192个字符。<br>Microsoft Internet Information Server(IIS)<br>能接受最大url的长度为16,384个字符。</p>\n</blockquote>\n<p>而且，中文会进行编码，一个汉字编码后会生成9个字符，这样算来，IE下最多也就能输入231个中文，再多就完蛋了，那么通过get请求传递参数就会显得很麻烦。</p>\n<p>通常情况下，这种超长参数的请求我们都会用post，有些地方也会说post请求没有长度限制，但是前面说了，实际上HTTP协议层面并没有任何的限制，限制只出现在浏览器或者服务器限制，get和post请求在底层上其实是一样的。</p>\n<p>最后项目修改了请求类型，把 <code>get</code> 请求改成了 <code>post</code> 请求，在网上实际还找到了另外两个方案，如果对同一组参数频繁访问的化，也可以用 <code>post+get</code> 请求的方式去处理，或者用 <code>sessionStorage</code> 下面简单介绍一下。</p>\n<ol>\n<li>将预览内容 <code>post</code> 到服务端，根据一个唯一标识生成缓存(有效时间5分钟)，将唯一标识返回到前端，前端通过get方式传递唯一标识请求预览逻辑，拿到缓存的内容后渲染到页面。需要说明的是这里的缓存必须是分布式的。</li>\n<li>通过H5的会话缓存 <code>sessionStorage</code> 将预览内容存储在浏览器，打开预览页后从 <code>sessionStorage</code> 中拿到内容就可以渲染出页面了。</li>\n</ol>\n<p>上述两种方案都不太符合我们的项目所以最终还是选择了最简单的方式</p>\n<h2 id=\"GET-VS-POST\"><a href=\"#GET-VS-POST\" class=\"headerlink\" title=\"GET VS POST\"></a>GET VS POST</h2><ol>\n<li><p>多数浏览器对于POST采用两阶段发送数据的，先发送请求头，再发送请求体，即使参数再少再短，也会被分成两个步骤来发送（相对于GET），也就是第一步发送header数据，第二步再发送body部分。HTTP是应用层的协议，而在传输层有些情况TCP会出现两次连结的过程，HTTP协议本身不保存状态信息，一次请求一次响应。对于TCP而言，通信次数越多反而靠性越低，能在一次连结中传输完需要的消息是最可靠的，尽量使用GET请求来减少网络耗时。如果通信时间增加，这段时间客户端与服务器端一直保持连接状态，在服务器侧负载可能会增加，可靠性会下降。</p>\n</li>\n<li><p>GET请求能够被cache，GET请求能够被保存在浏览器的浏览历史里面（密码等重要数据GET提交，别人查看历史记录，就可以直接看到这些私密数据）POST不进行缓存。</p>\n</li>\n<li><p>GET参数是带在URL后面，传统IE中URL的最大可用长度为2048字符，其他浏览器对URL长度限制实现上有所不同。POST请求无长度限制（目前理论上是这样的）。</p>\n</li>\n<li><p>GET提交的数据大小，不同浏览器的限制不同，一般在2k-8K之间，POST提交数据比较大，大小靠服务器的设定值限制，而且某些数据只能用 POST 方法「携带」，比如 file。</p>\n</li>\n<li><p>全部用POST不是十分合理，最好先把请求按功能和场景分下类，对数据请求频繁，数据不敏感且数据量在普通浏览器最小限定的2k范围内，这样的情况使用GET。其他地方使用POST。</p>\n</li>\n<li><p>GET 的本质是「得」，而 POST 的本质是「给」。而且，GET 是「幂等」的，在这一点上，GET 被认为是「安全的」。但实际上 server 端也可以用作资源更新，但是这种用法违反了约定，容易造成 CSRF（跨站请求伪造）。</p>\n</li>\n</ol>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>以上是这次遇到问题后学到的一点知识，可能并不全面，后续如果遇到了类似的问题会继续丰富这篇文章。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>就在前天，公司里一位新入职的前端小伙伴找到我说遇到了一个问题，自己写的vue代码本地运行是好用的，但是打包后提给后台就访问不了接口了，刚开始我以为是代理配置的有问题，但是经过检查也没什么问题，因为是个<code>get</code>方法，所以我就直接在浏览器地址里敲了api地址，也能正常获取到数据，那么这么看就不是代理或者接口的问题，后来我又看了下调试工具，network中根本就没发出请求，我怀疑是直接前台就拦截了，最后我发现他这个api参数超级长，长的相当吓人，可以看一下下图。<br><img src=\"https://s2.ax1x.com/2020/01/09/lROUMt.png\" alt=\"lROUMt.png\"><br>我记得url是有长度限制的，于是我就把url变短再次请求，虽然因为参数不全，接口报了错，但是发出去了，由此我定位应该是url超长，因为vue中配置了什么导致的访问被拦截了。于是我就开始了搜索引擎查找解决方案之旅，接下来就把我了解到的信息一一整理。</p>","more":"<h2 id=\"URL-限制\"><a href=\"#URL-限制\" class=\"headerlink\" title=\"URL 限制\"></a>URL 限制</h2><p>首先我在网上找到了一份资料介绍了URL长度的相关资料，从下面可以看出，从HTTP协议层面以及Get请求层面都没有什么限制，这个限制来自于<strong><em>浏览器或者服务器的限制</em></strong>。</p>\n<blockquote>\n<p>Microsoft Internet Explorer (Browser)<br>IE浏览器对URL的最大限制为2083个字符，如果超过这个数字，提交按钮没有任何反应。<br>Firefox (Browser)<br>对于Firefox浏览器URL的长度限制为65,536个字符。<br>Safari (Browser)<br>URL最大长度限制为 80,000个字符。<br>Opera (Browser)<br>URL最大长度限制为190,000个字符。<br>Google (Browser)<br>URL最大长度限制为8182个字符。<br>Apache (Server)<br>能接受最大url长度为8,192个字符。<br>Microsoft Internet Information Server(IIS)<br>能接受最大url的长度为16,384个字符。</p>\n</blockquote>\n<p>而且，中文会进行编码，一个汉字编码后会生成9个字符，这样算来，IE下最多也就能输入231个中文，再多就完蛋了，那么通过get请求传递参数就会显得很麻烦。</p>\n<p>通常情况下，这种超长参数的请求我们都会用post，有些地方也会说post请求没有长度限制，但是前面说了，实际上HTTP协议层面并没有任何的限制，限制只出现在浏览器或者服务器限制，get和post请求在底层上其实是一样的。</p>\n<p>最后项目修改了请求类型，把 <code>get</code> 请求改成了 <code>post</code> 请求，在网上实际还找到了另外两个方案，如果对同一组参数频繁访问的化，也可以用 <code>post+get</code> 请求的方式去处理，或者用 <code>sessionStorage</code> 下面简单介绍一下。</p>\n<ol>\n<li>将预览内容 <code>post</code> 到服务端，根据一个唯一标识生成缓存(有效时间5分钟)，将唯一标识返回到前端，前端通过get方式传递唯一标识请求预览逻辑，拿到缓存的内容后渲染到页面。需要说明的是这里的缓存必须是分布式的。</li>\n<li>通过H5的会话缓存 <code>sessionStorage</code> 将预览内容存储在浏览器，打开预览页后从 <code>sessionStorage</code> 中拿到内容就可以渲染出页面了。</li>\n</ol>\n<p>上述两种方案都不太符合我们的项目所以最终还是选择了最简单的方式</p>\n<h2 id=\"GET-VS-POST\"><a href=\"#GET-VS-POST\" class=\"headerlink\" title=\"GET VS POST\"></a>GET VS POST</h2><ol>\n<li><p>多数浏览器对于POST采用两阶段发送数据的，先发送请求头，再发送请求体，即使参数再少再短，也会被分成两个步骤来发送（相对于GET），也就是第一步发送header数据，第二步再发送body部分。HTTP是应用层的协议，而在传输层有些情况TCP会出现两次连结的过程，HTTP协议本身不保存状态信息，一次请求一次响应。对于TCP而言，通信次数越多反而靠性越低，能在一次连结中传输完需要的消息是最可靠的，尽量使用GET请求来减少网络耗时。如果通信时间增加，这段时间客户端与服务器端一直保持连接状态，在服务器侧负载可能会增加，可靠性会下降。</p>\n</li>\n<li><p>GET请求能够被cache，GET请求能够被保存在浏览器的浏览历史里面（密码等重要数据GET提交，别人查看历史记录，就可以直接看到这些私密数据）POST不进行缓存。</p>\n</li>\n<li><p>GET参数是带在URL后面，传统IE中URL的最大可用长度为2048字符，其他浏览器对URL长度限制实现上有所不同。POST请求无长度限制（目前理论上是这样的）。</p>\n</li>\n<li><p>GET提交的数据大小，不同浏览器的限制不同，一般在2k-8K之间，POST提交数据比较大，大小靠服务器的设定值限制，而且某些数据只能用 POST 方法「携带」，比如 file。</p>\n</li>\n<li><p>全部用POST不是十分合理，最好先把请求按功能和场景分下类，对数据请求频繁，数据不敏感且数据量在普通浏览器最小限定的2k范围内，这样的情况使用GET。其他地方使用POST。</p>\n</li>\n<li><p>GET 的本质是「得」，而 POST 的本质是「给」。而且，GET 是「幂等」的，在这一点上，GET 被认为是「安全的」。但实际上 server 端也可以用作资源更新，但是这种用法违反了约定，容易造成 CSRF（跨站请求伪造）。</p>\n</li>\n</ol>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>以上是这次遇到问题后学到的一点知识，可能并不全面，后续如果遇到了类似的问题会继续丰富这篇文章。</p>"},{"title":"给博客添加基于github-issue的评论系统","date":"2017-10-12T02:50:21.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n上篇文章介绍了[如何利用github+hexo+next制作一个博客系统](https://lixuguang.github.io/2017/10/11/use-GitHub-Hexo-Next-make-blog/)，但是由于这个博客系统是基于静态页面的，所以无法完成评论功能，博客怎么可以没有评论功能呢，当然next主题提供了几个选项，但是国内你知道的，提供的几个评论功能都不是太好用，于是就上网找了好多资料，功夫不负有心人，让我找到了一个名曰gitment的基于github-issue的评论插件，下面就介绍大家如何使用这个插件。\n<!-- more -->\n## 第一步 注册一个小程序（OAuth Application）\n点击[https://github.com/settings/applications/new](https://github.com/settings/applications/new)注册\n- Application name 应用名称 这里随便写，我写的就是gitment\n- Homepage URL 主页地址，你可以写你的博客地址，我写的是https://lixuguang.github.io/\n- Application description 应用描述，这里随便写点什么，反正是自己用。\n- Authorization callback URL 这个比较重要，请填写你的博客地址，我的是https://lixuguang.github.io/\n\n点击确定以后你会获得两个关键信息，下一步配置时会用到\n- Client ID\n- Client Secret\n\n## 第二步 修改主题配置文件，添加gitment评论功能\n因为用的是next主题，所以配置文件地址如下：\n**themes/next/_config.yml**\n\n### 1、在其中添加:\n\n\n```\n# Gitment\n# Introduction: https://imsun.net/posts/gitment-introduction/\ngitment:\n  enable: true\n  githubID: yourid // 我的是lixuguang\n  repo: yourrepo // 我的是lixuguang.github.io 必须跟githubID保持一致的用户名\n  ClientID: yourid // 上面开通程序获得的ClientID\n  ClientSecret: yoursecret // 上面开通程序获得的Client Secret\n  lazy: false //是否需要点击展开评论才能可见评论，一般设置为false\n```\n**一定要注意空格，不然会报错的，别问我咋知道的**\n\n### 2、然后在主题的配置语言环境的文件添加一句话\n`en.yml`增加:\n\n```\ngitmentbutton: Show comments from Gitment\n```\n\n`zh-Hans.yml`增加:\n\n\n```\ngitmentbutton: 显示 Gitment 评论\n```\n如果是中文网站英文配置也可以不用写。\n### 3、添加新的Dom结构\n**修改主题layout/_partials/comments.swig**\n在最后一个elseif分支后添加一个elseif分支：\n\n```\n{% elseif theme.gitment.enable %}\n       {% if theme.gitment.lazy %}\n         <div onclick=\"ShowGitment()\" id=\"gitment-display-button\">{{  __('gitmentbutton') }}</div>\n         <div id=\"gitment-container\" style=\"display:none\"></div>\n       {% else %}\n         <div id=\"gitment-container\"></div>\n       {% endif %}\n```\n### 4、 在主题下layout/_third-party/comments/目录下中添加文件gitment.swig\n\n\n```\n{% if theme.gitment.enable %}\n   {% set owner = theme.gitment.githubID %}\n   {% set repo = theme.gitment.repo %}\n   {% set cid = theme.gitment.ClientID %}\n   {% set cs = theme.gitment.ClientSecret %}\n   <link rel=\"stylesheet\" href=\"https://imsun.github.io/gitment/style/default.css\">\n   <script src=\"https://imsun.github.io/gitment/dist/gitment.browser.js\"></script>\n   {% if not theme.gitment.lazy %}\n       <script type=\"text/javascript\">\n           var gitment = new Gitment({\n               id: window.location.pathname, \n               owner: '{{owner}}',\n               repo: '{{repo}}',\n               oauth: {\n                   client_id: '{{cid}}',\n                   client_secret: '{{cs}}',\n               }});\n           gitment.render('gitment-container');\n       </script>\n   {% else %}\n       <script type=\"text/javascript\">\n           function ShowGitment(){\n               document.getElementById(\"gitment-display-button\").style.display = \"none\";\n               document.getElementById(\"gitment-container\").style.display = \"block\";\n               var gitment = new Gitment({\n                   id: document.location.href, \n                   owner: '{{owner}}',\n                   repo: '{{repo}}',\n                   oauth: {\n                       client_id: '{{cid}}',\n                       client_secret: '{{cs}}',\n                   }});\n               gitment.render('gitment-container');\n           }\n       </script>\n   {% endif %}\n{% endif %}\n```\n然后在主题下layout/_third-party/comments/index.swig文件中引入gitment.swig文件：\n\n```\n{% include 'gitment.swig' %}\n```\n### 在主题下source/css/_common/components/third-party/目录下添加gitment.styl文件\n此配置文件为gitment的样式文件，需要修改样式可以在这里进行书写，这里修改一下按钮样式，另外将聊天框于文章框样式统一\n\n```\n#gitment-display-button{\n     display: inline-block;\n     padding: 0 15px;\n     color: #0a9caf;\n     cursor: pointer;\n     font-size: 14px;\n     border: 1px solid #0a9caf;\n     border-radius: 4px;\n }\n #gitment-display-button:hover{\n     color: #fff;\n     background: #0a9caf;\n }\n  #comments {\n    margin: 0;\n    padding: 40px;\n    background: #fff;\n    box-shadow: 0 2px 2px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n}\n```\n然后在主题下source/css/_common/components/third-party/third-party.styl文件中引入相应的CSS样式即可:\n\n```\n@import \"gitment\";\n```\n经过以上操作，gitment就被引入到你的博客里了。\n\n现在就可以让大家对你写的文章进行评论啦，怎么样是不是又学到啦，喜欢我的文章就请关注我的github吧。","source":"_posts/us-gitment.md","raw":"---\ntitle: 给博客添加基于github-issue的评论系统\ndate: 2017-10-12 10:50:21\ncategories: \n\t- 前端技术\ntags: \n\t- Hexo\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n上篇文章介绍了[如何利用github+hexo+next制作一个博客系统](https://lixuguang.github.io/2017/10/11/use-GitHub-Hexo-Next-make-blog/)，但是由于这个博客系统是基于静态页面的，所以无法完成评论功能，博客怎么可以没有评论功能呢，当然next主题提供了几个选项，但是国内你知道的，提供的几个评论功能都不是太好用，于是就上网找了好多资料，功夫不负有心人，让我找到了一个名曰gitment的基于github-issue的评论插件，下面就介绍大家如何使用这个插件。\n<!-- more -->\n## 第一步 注册一个小程序（OAuth Application）\n点击[https://github.com/settings/applications/new](https://github.com/settings/applications/new)注册\n- Application name 应用名称 这里随便写，我写的就是gitment\n- Homepage URL 主页地址，你可以写你的博客地址，我写的是https://lixuguang.github.io/\n- Application description 应用描述，这里随便写点什么，反正是自己用。\n- Authorization callback URL 这个比较重要，请填写你的博客地址，我的是https://lixuguang.github.io/\n\n点击确定以后你会获得两个关键信息，下一步配置时会用到\n- Client ID\n- Client Secret\n\n## 第二步 修改主题配置文件，添加gitment评论功能\n因为用的是next主题，所以配置文件地址如下：\n**themes/next/_config.yml**\n\n### 1、在其中添加:\n\n\n```\n# Gitment\n# Introduction: https://imsun.net/posts/gitment-introduction/\ngitment:\n  enable: true\n  githubID: yourid // 我的是lixuguang\n  repo: yourrepo // 我的是lixuguang.github.io 必须跟githubID保持一致的用户名\n  ClientID: yourid // 上面开通程序获得的ClientID\n  ClientSecret: yoursecret // 上面开通程序获得的Client Secret\n  lazy: false //是否需要点击展开评论才能可见评论，一般设置为false\n```\n**一定要注意空格，不然会报错的，别问我咋知道的**\n\n### 2、然后在主题的配置语言环境的文件添加一句话\n`en.yml`增加:\n\n```\ngitmentbutton: Show comments from Gitment\n```\n\n`zh-Hans.yml`增加:\n\n\n```\ngitmentbutton: 显示 Gitment 评论\n```\n如果是中文网站英文配置也可以不用写。\n### 3、添加新的Dom结构\n**修改主题layout/_partials/comments.swig**\n在最后一个elseif分支后添加一个elseif分支：\n\n```\n{% elseif theme.gitment.enable %}\n       {% if theme.gitment.lazy %}\n         <div onclick=\"ShowGitment()\" id=\"gitment-display-button\">{{  __('gitmentbutton') }}</div>\n         <div id=\"gitment-container\" style=\"display:none\"></div>\n       {% else %}\n         <div id=\"gitment-container\"></div>\n       {% endif %}\n```\n### 4、 在主题下layout/_third-party/comments/目录下中添加文件gitment.swig\n\n\n```\n{% if theme.gitment.enable %}\n   {% set owner = theme.gitment.githubID %}\n   {% set repo = theme.gitment.repo %}\n   {% set cid = theme.gitment.ClientID %}\n   {% set cs = theme.gitment.ClientSecret %}\n   <link rel=\"stylesheet\" href=\"https://imsun.github.io/gitment/style/default.css\">\n   <script src=\"https://imsun.github.io/gitment/dist/gitment.browser.js\"></script>\n   {% if not theme.gitment.lazy %}\n       <script type=\"text/javascript\">\n           var gitment = new Gitment({\n               id: window.location.pathname, \n               owner: '{{owner}}',\n               repo: '{{repo}}',\n               oauth: {\n                   client_id: '{{cid}}',\n                   client_secret: '{{cs}}',\n               }});\n           gitment.render('gitment-container');\n       </script>\n   {% else %}\n       <script type=\"text/javascript\">\n           function ShowGitment(){\n               document.getElementById(\"gitment-display-button\").style.display = \"none\";\n               document.getElementById(\"gitment-container\").style.display = \"block\";\n               var gitment = new Gitment({\n                   id: document.location.href, \n                   owner: '{{owner}}',\n                   repo: '{{repo}}',\n                   oauth: {\n                       client_id: '{{cid}}',\n                       client_secret: '{{cs}}',\n                   }});\n               gitment.render('gitment-container');\n           }\n       </script>\n   {% endif %}\n{% endif %}\n```\n然后在主题下layout/_third-party/comments/index.swig文件中引入gitment.swig文件：\n\n```\n{% include 'gitment.swig' %}\n```\n### 在主题下source/css/_common/components/third-party/目录下添加gitment.styl文件\n此配置文件为gitment的样式文件，需要修改样式可以在这里进行书写，这里修改一下按钮样式，另外将聊天框于文章框样式统一\n\n```\n#gitment-display-button{\n     display: inline-block;\n     padding: 0 15px;\n     color: #0a9caf;\n     cursor: pointer;\n     font-size: 14px;\n     border: 1px solid #0a9caf;\n     border-radius: 4px;\n }\n #gitment-display-button:hover{\n     color: #fff;\n     background: #0a9caf;\n }\n  #comments {\n    margin: 0;\n    padding: 40px;\n    background: #fff;\n    box-shadow: 0 2px 2px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n}\n```\n然后在主题下source/css/_common/components/third-party/third-party.styl文件中引入相应的CSS样式即可:\n\n```\n@import \"gitment\";\n```\n经过以上操作，gitment就被引入到你的博客里了。\n\n现在就可以让大家对你写的文章进行评论啦，怎么样是不是又学到啦，喜欢我的文章就请关注我的github吧。","slug":"us-gitment","published":1,"updated":"2020-04-02T03:20:12.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs5k006sooa64gjff191","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>上篇文章介绍了<a href=\"https://lixuguang.github.io/2017/10/11/use-GitHub-Hexo-Next-make-blog/\">如何利用github+hexo+next制作一个博客系统</a>，但是由于这个博客系统是基于静态页面的，所以无法完成评论功能，博客怎么可以没有评论功能呢，当然next主题提供了几个选项，但是国内你知道的，提供的几个评论功能都不是太好用，于是就上网找了好多资料，功夫不负有心人，让我找到了一个名曰gitment的基于github-issue的评论插件，下面就介绍大家如何使用这个插件。</p>\n<a id=\"more\"></a>\n<h2 id=\"第一步-注册一个小程序（OAuth-Application）\"><a href=\"#第一步-注册一个小程序（OAuth-Application）\" class=\"headerlink\" title=\"第一步 注册一个小程序（OAuth Application）\"></a>第一步 注册一个小程序（OAuth Application）</h2><p>点击<a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/applications/new</a>注册</p>\n<ul>\n<li>Application name 应用名称 这里随便写，我写的就是gitment</li>\n<li>Homepage URL 主页地址，你可以写你的博客地址，我写的是<a href=\"https://lixuguang.github.io/\">https://lixuguang.github.io/</a></li>\n<li>Application description 应用描述，这里随便写点什么，反正是自己用。</li>\n<li>Authorization callback URL 这个比较重要，请填写你的博客地址，我的是<a href=\"https://lixuguang.github.io/\">https://lixuguang.github.io/</a></li>\n</ul>\n<p>点击确定以后你会获得两个关键信息，下一步配置时会用到</p>\n<ul>\n<li>Client ID</li>\n<li>Client Secret</li>\n</ul>\n<h2 id=\"第二步-修改主题配置文件，添加gitment评论功能\"><a href=\"#第二步-修改主题配置文件，添加gitment评论功能\" class=\"headerlink\" title=\"第二步 修改主题配置文件，添加gitment评论功能\"></a>第二步 修改主题配置文件，添加gitment评论功能</h2><p>因为用的是next主题，所以配置文件地址如下：<br><strong>themes/next/_config.yml</strong></p>\n<h3 id=\"1、在其中添加\"><a href=\"#1、在其中添加\" class=\"headerlink\" title=\"1、在其中添加:\"></a>1、在其中添加:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Gitment</span><br><span class=\"line\"># Introduction: https:&#x2F;&#x2F;imsun.net&#x2F;posts&#x2F;gitment-introduction&#x2F;</span><br><span class=\"line\">gitment:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  githubID: yourid &#x2F;&#x2F; 我的是lixuguang</span><br><span class=\"line\">  repo: yourrepo &#x2F;&#x2F; 我的是lixuguang.github.io 必须跟githubID保持一致的用户名</span><br><span class=\"line\">  ClientID: yourid &#x2F;&#x2F; 上面开通程序获得的ClientID</span><br><span class=\"line\">  ClientSecret: yoursecret &#x2F;&#x2F; 上面开通程序获得的Client Secret</span><br><span class=\"line\">  lazy: false &#x2F;&#x2F;是否需要点击展开评论才能可见评论，一般设置为false</span><br></pre></td></tr></table></figure>\n<p><strong>一定要注意空格，不然会报错的，别问我咋知道的</strong></p>\n<h3 id=\"2、然后在主题的配置语言环境的文件添加一句话\"><a href=\"#2、然后在主题的配置语言环境的文件添加一句话\" class=\"headerlink\" title=\"2、然后在主题的配置语言环境的文件添加一句话\"></a>2、然后在主题的配置语言环境的文件添加一句话</h3><p><code>en.yml</code>增加:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitmentbutton: Show comments from Gitment</span><br></pre></td></tr></table></figure>\n\n<p><code>zh-Hans.yml</code>增加:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitmentbutton: 显示 Gitment 评论</span><br></pre></td></tr></table></figure>\n<p>如果是中文网站英文配置也可以不用写。</p>\n<h3 id=\"3、添加新的Dom结构\"><a href=\"#3、添加新的Dom结构\" class=\"headerlink\" title=\"3、添加新的Dom结构\"></a>3、添加新的Dom结构</h3><p><strong>修改主题layout/_partials/comments.swig</strong><br>在最后一个elseif分支后添加一个elseif分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% elseif theme.gitment.enable %&#125;</span><br><span class=\"line\">       &#123;% if theme.gitment.lazy %&#125;</span><br><span class=\"line\">         &lt;div onclick&#x3D;&quot;ShowGitment()&quot; id&#x3D;&quot;gitment-display-button&quot;&gt;&#123;&#123;  __(&#39;gitmentbutton&#39;) &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\">         &lt;div id&#x3D;&quot;gitment-container&quot; style&#x3D;&quot;display:none&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">       &#123;% else %&#125;</span><br><span class=\"line\">         &lt;div id&#x3D;&quot;gitment-container&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">       &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、-在主题下layout-third-party-comments-目录下中添加文件gitment-swig\"><a href=\"#4、-在主题下layout-third-party-comments-目录下中添加文件gitment-swig\" class=\"headerlink\" title=\"4、 在主题下layout/_third-party/comments/目录下中添加文件gitment.swig\"></a>4、 在主题下layout/_third-party/comments/目录下中添加文件gitment.swig</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if theme.gitment.enable %&#125;</span><br><span class=\"line\">   &#123;% set owner &#x3D; theme.gitment.githubID %&#125;</span><br><span class=\"line\">   &#123;% set repo &#x3D; theme.gitment.repo %&#125;</span><br><span class=\"line\">   &#123;% set cid &#x3D; theme.gitment.ClientID %&#125;</span><br><span class=\"line\">   &#123;% set cs &#x3D; theme.gitment.ClientSecret %&#125;</span><br><span class=\"line\">   &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;imsun.github.io&#x2F;gitment&#x2F;style&#x2F;default.css&quot;&gt;</span><br><span class=\"line\">   &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;imsun.github.io&#x2F;gitment&#x2F;dist&#x2F;gitment.browser.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">   &#123;% if not theme.gitment.lazy %&#125;</span><br><span class=\"line\">       &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">           var gitment &#x3D; new Gitment(&#123;</span><br><span class=\"line\">               id: window.location.pathname, </span><br><span class=\"line\">               owner: &#39;&#123;&#123;owner&#125;&#125;&#39;,</span><br><span class=\"line\">               repo: &#39;&#123;&#123;repo&#125;&#125;&#39;,</span><br><span class=\"line\">               oauth: &#123;</span><br><span class=\"line\">                   client_id: &#39;&#123;&#123;cid&#125;&#125;&#39;,</span><br><span class=\"line\">                   client_secret: &#39;&#123;&#123;cs&#125;&#125;&#39;,</span><br><span class=\"line\">               &#125;&#125;);</span><br><span class=\"line\">           gitment.render(&#39;gitment-container&#39;);</span><br><span class=\"line\">       &lt;&#x2F;script&gt;</span><br><span class=\"line\">   &#123;% else %&#125;</span><br><span class=\"line\">       &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">           function ShowGitment()&#123;</span><br><span class=\"line\">               document.getElementById(&quot;gitment-display-button&quot;).style.display &#x3D; &quot;none&quot;;</span><br><span class=\"line\">               document.getElementById(&quot;gitment-container&quot;).style.display &#x3D; &quot;block&quot;;</span><br><span class=\"line\">               var gitment &#x3D; new Gitment(&#123;</span><br><span class=\"line\">                   id: document.location.href, </span><br><span class=\"line\">                   owner: &#39;&#123;&#123;owner&#125;&#125;&#39;,</span><br><span class=\"line\">                   repo: &#39;&#123;&#123;repo&#125;&#125;&#39;,</span><br><span class=\"line\">                   oauth: &#123;</span><br><span class=\"line\">                       client_id: &#39;&#123;&#123;cid&#125;&#125;&#39;,</span><br><span class=\"line\">                       client_secret: &#39;&#123;&#123;cs&#125;&#125;&#39;,</span><br><span class=\"line\">                   &#125;&#125;);</span><br><span class=\"line\">               gitment.render(&#39;gitment-container&#39;);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &lt;&#x2F;script&gt;</span><br><span class=\"line\">   &#123;% endif %&#125;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在主题下layout/_third-party/comments/index.swig文件中引入gitment.swig文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include &#39;gitment.swig&#39; %&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在主题下source-css-common-components-third-party-目录下添加gitment-styl文件\"><a href=\"#在主题下source-css-common-components-third-party-目录下添加gitment-styl文件\" class=\"headerlink\" title=\"在主题下source/css/_common/components/third-party/目录下添加gitment.styl文件\"></a>在主题下source/css/_common/components/third-party/目录下添加gitment.styl文件</h3><p>此配置文件为gitment的样式文件，需要修改样式可以在这里进行书写，这里修改一下按钮样式，另外将聊天框于文章框样式统一</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#gitment-display-button&#123;</span><br><span class=\"line\">     display: inline-block;</span><br><span class=\"line\">     padding: 0 15px;</span><br><span class=\"line\">     color: #0a9caf;</span><br><span class=\"line\">     cursor: pointer;</span><br><span class=\"line\">     font-size: 14px;</span><br><span class=\"line\">     border: 1px solid #0a9caf;</span><br><span class=\"line\">     border-radius: 4px;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> #gitment-display-button:hover&#123;</span><br><span class=\"line\">     color: #fff;</span><br><span class=\"line\">     background: #0a9caf;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">  #comments &#123;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">    padding: 40px;</span><br><span class=\"line\">    background: #fff;</span><br><span class=\"line\">    box-shadow: 0 2px 2px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在主题下source/css/_common/components/third-party/third-party.styl文件中引入相应的CSS样式即可:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import &quot;gitment&quot;;</span><br></pre></td></tr></table></figure>\n<p>经过以上操作，gitment就被引入到你的博客里了。</p>\n<p>现在就可以让大家对你写的文章进行评论啦，怎么样是不是又学到啦，喜欢我的文章就请关注我的github吧。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>上篇文章介绍了<a href=\"https://lixuguang.github.io/2017/10/11/use-GitHub-Hexo-Next-make-blog/\">如何利用github+hexo+next制作一个博客系统</a>，但是由于这个博客系统是基于静态页面的，所以无法完成评论功能，博客怎么可以没有评论功能呢，当然next主题提供了几个选项，但是国内你知道的，提供的几个评论功能都不是太好用，于是就上网找了好多资料，功夫不负有心人，让我找到了一个名曰gitment的基于github-issue的评论插件，下面就介绍大家如何使用这个插件。</p>","more":"<h2 id=\"第一步-注册一个小程序（OAuth-Application）\"><a href=\"#第一步-注册一个小程序（OAuth-Application）\" class=\"headerlink\" title=\"第一步 注册一个小程序（OAuth Application）\"></a>第一步 注册一个小程序（OAuth Application）</h2><p>点击<a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/applications/new</a>注册</p>\n<ul>\n<li>Application name 应用名称 这里随便写，我写的就是gitment</li>\n<li>Homepage URL 主页地址，你可以写你的博客地址，我写的是<a href=\"https://lixuguang.github.io/\">https://lixuguang.github.io/</a></li>\n<li>Application description 应用描述，这里随便写点什么，反正是自己用。</li>\n<li>Authorization callback URL 这个比较重要，请填写你的博客地址，我的是<a href=\"https://lixuguang.github.io/\">https://lixuguang.github.io/</a></li>\n</ul>\n<p>点击确定以后你会获得两个关键信息，下一步配置时会用到</p>\n<ul>\n<li>Client ID</li>\n<li>Client Secret</li>\n</ul>\n<h2 id=\"第二步-修改主题配置文件，添加gitment评论功能\"><a href=\"#第二步-修改主题配置文件，添加gitment评论功能\" class=\"headerlink\" title=\"第二步 修改主题配置文件，添加gitment评论功能\"></a>第二步 修改主题配置文件，添加gitment评论功能</h2><p>因为用的是next主题，所以配置文件地址如下：<br><strong>themes/next/_config.yml</strong></p>\n<h3 id=\"1、在其中添加\"><a href=\"#1、在其中添加\" class=\"headerlink\" title=\"1、在其中添加:\"></a>1、在其中添加:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Gitment</span><br><span class=\"line\"># Introduction: https:&#x2F;&#x2F;imsun.net&#x2F;posts&#x2F;gitment-introduction&#x2F;</span><br><span class=\"line\">gitment:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  githubID: yourid &#x2F;&#x2F; 我的是lixuguang</span><br><span class=\"line\">  repo: yourrepo &#x2F;&#x2F; 我的是lixuguang.github.io 必须跟githubID保持一致的用户名</span><br><span class=\"line\">  ClientID: yourid &#x2F;&#x2F; 上面开通程序获得的ClientID</span><br><span class=\"line\">  ClientSecret: yoursecret &#x2F;&#x2F; 上面开通程序获得的Client Secret</span><br><span class=\"line\">  lazy: false &#x2F;&#x2F;是否需要点击展开评论才能可见评论，一般设置为false</span><br></pre></td></tr></table></figure>\n<p><strong>一定要注意空格，不然会报错的，别问我咋知道的</strong></p>\n<h3 id=\"2、然后在主题的配置语言环境的文件添加一句话\"><a href=\"#2、然后在主题的配置语言环境的文件添加一句话\" class=\"headerlink\" title=\"2、然后在主题的配置语言环境的文件添加一句话\"></a>2、然后在主题的配置语言环境的文件添加一句话</h3><p><code>en.yml</code>增加:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitmentbutton: Show comments from Gitment</span><br></pre></td></tr></table></figure>\n\n<p><code>zh-Hans.yml</code>增加:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitmentbutton: 显示 Gitment 评论</span><br></pre></td></tr></table></figure>\n<p>如果是中文网站英文配置也可以不用写。</p>\n<h3 id=\"3、添加新的Dom结构\"><a href=\"#3、添加新的Dom结构\" class=\"headerlink\" title=\"3、添加新的Dom结构\"></a>3、添加新的Dom结构</h3><p><strong>修改主题layout/_partials/comments.swig</strong><br>在最后一个elseif分支后添加一个elseif分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% elseif theme.gitment.enable %&#125;</span><br><span class=\"line\">       &#123;% if theme.gitment.lazy %&#125;</span><br><span class=\"line\">         &lt;div onclick&#x3D;&quot;ShowGitment()&quot; id&#x3D;&quot;gitment-display-button&quot;&gt;&#123;&#123;  __(&#39;gitmentbutton&#39;) &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\">         &lt;div id&#x3D;&quot;gitment-container&quot; style&#x3D;&quot;display:none&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">       &#123;% else %&#125;</span><br><span class=\"line\">         &lt;div id&#x3D;&quot;gitment-container&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">       &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、-在主题下layout-third-party-comments-目录下中添加文件gitment-swig\"><a href=\"#4、-在主题下layout-third-party-comments-目录下中添加文件gitment-swig\" class=\"headerlink\" title=\"4、 在主题下layout/_third-party/comments/目录下中添加文件gitment.swig\"></a>4、 在主题下layout/_third-party/comments/目录下中添加文件gitment.swig</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if theme.gitment.enable %&#125;</span><br><span class=\"line\">   &#123;% set owner &#x3D; theme.gitment.githubID %&#125;</span><br><span class=\"line\">   &#123;% set repo &#x3D; theme.gitment.repo %&#125;</span><br><span class=\"line\">   &#123;% set cid &#x3D; theme.gitment.ClientID %&#125;</span><br><span class=\"line\">   &#123;% set cs &#x3D; theme.gitment.ClientSecret %&#125;</span><br><span class=\"line\">   &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;imsun.github.io&#x2F;gitment&#x2F;style&#x2F;default.css&quot;&gt;</span><br><span class=\"line\">   &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;imsun.github.io&#x2F;gitment&#x2F;dist&#x2F;gitment.browser.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">   &#123;% if not theme.gitment.lazy %&#125;</span><br><span class=\"line\">       &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">           var gitment &#x3D; new Gitment(&#123;</span><br><span class=\"line\">               id: window.location.pathname, </span><br><span class=\"line\">               owner: &#39;&#123;&#123;owner&#125;&#125;&#39;,</span><br><span class=\"line\">               repo: &#39;&#123;&#123;repo&#125;&#125;&#39;,</span><br><span class=\"line\">               oauth: &#123;</span><br><span class=\"line\">                   client_id: &#39;&#123;&#123;cid&#125;&#125;&#39;,</span><br><span class=\"line\">                   client_secret: &#39;&#123;&#123;cs&#125;&#125;&#39;,</span><br><span class=\"line\">               &#125;&#125;);</span><br><span class=\"line\">           gitment.render(&#39;gitment-container&#39;);</span><br><span class=\"line\">       &lt;&#x2F;script&gt;</span><br><span class=\"line\">   &#123;% else %&#125;</span><br><span class=\"line\">       &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">           function ShowGitment()&#123;</span><br><span class=\"line\">               document.getElementById(&quot;gitment-display-button&quot;).style.display &#x3D; &quot;none&quot;;</span><br><span class=\"line\">               document.getElementById(&quot;gitment-container&quot;).style.display &#x3D; &quot;block&quot;;</span><br><span class=\"line\">               var gitment &#x3D; new Gitment(&#123;</span><br><span class=\"line\">                   id: document.location.href, </span><br><span class=\"line\">                   owner: &#39;&#123;&#123;owner&#125;&#125;&#39;,</span><br><span class=\"line\">                   repo: &#39;&#123;&#123;repo&#125;&#125;&#39;,</span><br><span class=\"line\">                   oauth: &#123;</span><br><span class=\"line\">                       client_id: &#39;&#123;&#123;cid&#125;&#125;&#39;,</span><br><span class=\"line\">                       client_secret: &#39;&#123;&#123;cs&#125;&#125;&#39;,</span><br><span class=\"line\">                   &#125;&#125;);</span><br><span class=\"line\">               gitment.render(&#39;gitment-container&#39;);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &lt;&#x2F;script&gt;</span><br><span class=\"line\">   &#123;% endif %&#125;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在主题下layout/_third-party/comments/index.swig文件中引入gitment.swig文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include &#39;gitment.swig&#39; %&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在主题下source-css-common-components-third-party-目录下添加gitment-styl文件\"><a href=\"#在主题下source-css-common-components-third-party-目录下添加gitment-styl文件\" class=\"headerlink\" title=\"在主题下source/css/_common/components/third-party/目录下添加gitment.styl文件\"></a>在主题下source/css/_common/components/third-party/目录下添加gitment.styl文件</h3><p>此配置文件为gitment的样式文件，需要修改样式可以在这里进行书写，这里修改一下按钮样式，另外将聊天框于文章框样式统一</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#gitment-display-button&#123;</span><br><span class=\"line\">     display: inline-block;</span><br><span class=\"line\">     padding: 0 15px;</span><br><span class=\"line\">     color: #0a9caf;</span><br><span class=\"line\">     cursor: pointer;</span><br><span class=\"line\">     font-size: 14px;</span><br><span class=\"line\">     border: 1px solid #0a9caf;</span><br><span class=\"line\">     border-radius: 4px;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> #gitment-display-button:hover&#123;</span><br><span class=\"line\">     color: #fff;</span><br><span class=\"line\">     background: #0a9caf;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">  #comments &#123;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">    padding: 40px;</span><br><span class=\"line\">    background: #fff;</span><br><span class=\"line\">    box-shadow: 0 2px 2px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在主题下source/css/_common/components/third-party/third-party.styl文件中引入相应的CSS样式即可:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import &quot;gitment&quot;;</span><br></pre></td></tr></table></figure>\n<p>经过以上操作，gitment就被引入到你的博客里了。</p>\n<p>现在就可以让大家对你写的文章进行评论啦，怎么样是不是又学到啦，喜欢我的文章就请关注我的github吧。</p>"},{"title":"前端全栈和大前端有啥区别","date":"2020-04-15T15:59:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n知乎真是个好地方，关注好自己喜欢的话题，经常会推送一些好的话题到你面前，这不刚刚就看到了一个人提问\n> 前端全栈和大前端有啥区别\n\n以前只听说过全栈，听说过大前端，但是没听说过前端全栈，对于前两个我自己也有一些理解，但从不敢说自己理解的对，带着强烈的好奇心我打开了这个问题，也看到了一位前端大神‘狼叔’的回复，感觉还是很到位的，也让我重新验证了自己的理解，所以就将狼叔的解答与我自己的认识相结合一下，做个记录。\n<!-- more -->\n\n## 狼叔说\n狼叔在解答这个疑问之前直接上了一张图，图我贴在下面供大家看一下\n![JicTqe.jpg](https://s1.ax1x.com/2020/04/15/JicTqe.jpg)\n这么一张图实际上已经胜过千言了，但是为了方便大家理解，狼叔还是在下面对图进行了解释\n> 前端全栈：分node全栈和其他语言全栈，比如ror搞全栈是最早的，其他php、java也有，不过纯前端的不过，在react，angular之前搞后台还是可以的。\n> 所以前端全栈，我理解是等同于node全栈的。node本身是做后端的，但在前端工程化和BFF领域大放异彩，所以node全栈涵盖了前端的方方面面，是比较合理的解释。\n> 大前端：更泛化的概念，移动互联网时代开启后，hybrid曾经很火，基于h5和webview做跨端，确实是很理想的做法，但复杂交互搞不定，机器性能网络等是硬伤，所以后来出现了rn和weex，整体还是前端写法，所以hybrid里前端也是占了一定的开发，结合之前前端和node的关系，综合3者：1）app里的前端，2）前端，2）node全栈，统称为大前端。这里的”大“含义是可以做的事儿的范围更广，触达前后端移动端，对前端职责有明显提升。随着技术发展，基于electron的桌面开发也日进流程，ott和iot等领域采用js也愈来愈多，所以只要和用户直接触达的端采用了前端技术开发的都涵盖在大前端范畴内。\n\n[原帖地址](https://www.zhihu.com/question/379563850/answer/1152553428)\n\n## 我说\n之前我的概念里前端扩展开来再进一步的话分两个方向，一个叫全栈另一个叫全端，‘栈’的话是纵向的，简单理解的话就是一款产品一个人能从设计到前端实现后端实现运维等一个人搞定，那么他就可以称之为全栈，狭义一点理解，就是前端后端都会，那么这里所说的前端全栈，我理解是更方便前端掌握的一些后端技能如node、php、ror等，而不是java这种后端技能，所以叫前端全栈，我想这里大部分指的都是node作为后端；\n\n那么我理解的全端是什么呢\n\n‘端’我理解为容器，任何跟用户直接接触的技术都是端的技术，早期的pc端，后来的手机端，手机端里又出现了h5、hybrid、native这么几种，后来又出现了小程序之类的容器，pc端也出现了如electron等客户端技术，那么随着物联网智能家居的出现，更多的端出现了，就如狼叔说的OTT和IOT领域也成了端，大前端的大是指范围广，属于用户直达所承载内容容器的都是端。\n\n总的来说跟狼叔的理解一致，我个人也努力在往全栈全端发展，不过真的好难还有很长的路要走。","source":"_posts/talk-about-full-stack-big-fd.md","raw":"---\ntitle: 前端全栈和大前端有啥区别\ndate: 2020-04-15 23:59:00\ncategories: \n  - 大前端\n  - 全栈\ntags:\n\t- 知识点\n---\n> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n知乎真是个好地方，关注好自己喜欢的话题，经常会推送一些好的话题到你面前，这不刚刚就看到了一个人提问\n> 前端全栈和大前端有啥区别\n\n以前只听说过全栈，听说过大前端，但是没听说过前端全栈，对于前两个我自己也有一些理解，但从不敢说自己理解的对，带着强烈的好奇心我打开了这个问题，也看到了一位前端大神‘狼叔’的回复，感觉还是很到位的，也让我重新验证了自己的理解，所以就将狼叔的解答与我自己的认识相结合一下，做个记录。\n<!-- more -->\n\n## 狼叔说\n狼叔在解答这个疑问之前直接上了一张图，图我贴在下面供大家看一下\n![JicTqe.jpg](https://s1.ax1x.com/2020/04/15/JicTqe.jpg)\n这么一张图实际上已经胜过千言了，但是为了方便大家理解，狼叔还是在下面对图进行了解释\n> 前端全栈：分node全栈和其他语言全栈，比如ror搞全栈是最早的，其他php、java也有，不过纯前端的不过，在react，angular之前搞后台还是可以的。\n> 所以前端全栈，我理解是等同于node全栈的。node本身是做后端的，但在前端工程化和BFF领域大放异彩，所以node全栈涵盖了前端的方方面面，是比较合理的解释。\n> 大前端：更泛化的概念，移动互联网时代开启后，hybrid曾经很火，基于h5和webview做跨端，确实是很理想的做法，但复杂交互搞不定，机器性能网络等是硬伤，所以后来出现了rn和weex，整体还是前端写法，所以hybrid里前端也是占了一定的开发，结合之前前端和node的关系，综合3者：1）app里的前端，2）前端，2）node全栈，统称为大前端。这里的”大“含义是可以做的事儿的范围更广，触达前后端移动端，对前端职责有明显提升。随着技术发展，基于electron的桌面开发也日进流程，ott和iot等领域采用js也愈来愈多，所以只要和用户直接触达的端采用了前端技术开发的都涵盖在大前端范畴内。\n\n[原帖地址](https://www.zhihu.com/question/379563850/answer/1152553428)\n\n## 我说\n之前我的概念里前端扩展开来再进一步的话分两个方向，一个叫全栈另一个叫全端，‘栈’的话是纵向的，简单理解的话就是一款产品一个人能从设计到前端实现后端实现运维等一个人搞定，那么他就可以称之为全栈，狭义一点理解，就是前端后端都会，那么这里所说的前端全栈，我理解是更方便前端掌握的一些后端技能如node、php、ror等，而不是java这种后端技能，所以叫前端全栈，我想这里大部分指的都是node作为后端；\n\n那么我理解的全端是什么呢\n\n‘端’我理解为容器，任何跟用户直接接触的技术都是端的技术，早期的pc端，后来的手机端，手机端里又出现了h5、hybrid、native这么几种，后来又出现了小程序之类的容器，pc端也出现了如electron等客户端技术，那么随着物联网智能家居的出现，更多的端出现了，就如狼叔说的OTT和IOT领域也成了端，大前端的大是指范围广，属于用户直达所承载内容容器的都是端。\n\n总的来说跟狼叔的理解一致，我个人也努力在往全栈全端发展，不过真的好难还有很长的路要走。","slug":"talk-about-full-stack-big-fd","published":1,"updated":"2020-04-15T15:51:22.987Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs5l006wooa6ehcrc8qe","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>知乎真是个好地方，关注好自己喜欢的话题，经常会推送一些好的话题到你面前，这不刚刚就看到了一个人提问</p>\n<blockquote>\n<p>前端全栈和大前端有啥区别</p>\n</blockquote>\n<p>以前只听说过全栈，听说过大前端，但是没听说过前端全栈，对于前两个我自己也有一些理解，但从不敢说自己理解的对，带着强烈的好奇心我打开了这个问题，也看到了一位前端大神‘狼叔’的回复，感觉还是很到位的，也让我重新验证了自己的理解，所以就将狼叔的解答与我自己的认识相结合一下，做个记录。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"狼叔说\"><a href=\"#狼叔说\" class=\"headerlink\" title=\"狼叔说\"></a>狼叔说</h2><p>狼叔在解答这个疑问之前直接上了一张图，图我贴在下面供大家看一下<br><img src=\"https://s1.ax1x.com/2020/04/15/JicTqe.jpg\" alt=\"JicTqe.jpg\"><br>这么一张图实际上已经胜过千言了，但是为了方便大家理解，狼叔还是在下面对图进行了解释</p>\n<blockquote>\n<p>前端全栈：分node全栈和其他语言全栈，比如ror搞全栈是最早的，其他php、java也有，不过纯前端的不过，在react，angular之前搞后台还是可以的。<br>所以前端全栈，我理解是等同于node全栈的。node本身是做后端的，但在前端工程化和BFF领域大放异彩，所以node全栈涵盖了前端的方方面面，是比较合理的解释。<br>大前端：更泛化的概念，移动互联网时代开启后，hybrid曾经很火，基于h5和webview做跨端，确实是很理想的做法，但复杂交互搞不定，机器性能网络等是硬伤，所以后来出现了rn和weex，整体还是前端写法，所以hybrid里前端也是占了一定的开发，结合之前前端和node的关系，综合3者：1）app里的前端，2）前端，2）node全栈，统称为大前端。这里的”大“含义是可以做的事儿的范围更广，触达前后端移动端，对前端职责有明显提升。随着技术发展，基于electron的桌面开发也日进流程，ott和iot等领域采用js也愈来愈多，所以只要和用户直接触达的端采用了前端技术开发的都涵盖在大前端范畴内。</p>\n</blockquote>\n<p><a href=\"https://www.zhihu.com/question/379563850/answer/1152553428\" target=\"_blank\" rel=\"noopener\">原帖地址</a></p>\n<h2 id=\"我说\"><a href=\"#我说\" class=\"headerlink\" title=\"我说\"></a>我说</h2><p>之前我的概念里前端扩展开来再进一步的话分两个方向，一个叫全栈另一个叫全端，‘栈’的话是纵向的，简单理解的话就是一款产品一个人能从设计到前端实现后端实现运维等一个人搞定，那么他就可以称之为全栈，狭义一点理解，就是前端后端都会，那么这里所说的前端全栈，我理解是更方便前端掌握的一些后端技能如node、php、ror等，而不是java这种后端技能，所以叫前端全栈，我想这里大部分指的都是node作为后端；</p>\n<p>那么我理解的全端是什么呢</p>\n<p>‘端’我理解为容器，任何跟用户直接接触的技术都是端的技术，早期的pc端，后来的手机端，手机端里又出现了h5、hybrid、native这么几种，后来又出现了小程序之类的容器，pc端也出现了如electron等客户端技术，那么随着物联网智能家居的出现，更多的端出现了，就如狼叔说的OTT和IOT领域也成了端，大前端的大是指范围广，属于用户直达所承载内容容器的都是端。</p>\n<p>总的来说跟狼叔的理解一致，我个人也努力在往全栈全端发展，不过真的好难还有很长的路要走。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>知乎真是个好地方，关注好自己喜欢的话题，经常会推送一些好的话题到你面前，这不刚刚就看到了一个人提问</p>\n<blockquote>\n<p>前端全栈和大前端有啥区别</p>\n</blockquote>\n<p>以前只听说过全栈，听说过大前端，但是没听说过前端全栈，对于前两个我自己也有一些理解，但从不敢说自己理解的对，带着强烈的好奇心我打开了这个问题，也看到了一位前端大神‘狼叔’的回复，感觉还是很到位的，也让我重新验证了自己的理解，所以就将狼叔的解答与我自己的认识相结合一下，做个记录。</p>","more":"<h2 id=\"狼叔说\"><a href=\"#狼叔说\" class=\"headerlink\" title=\"狼叔说\"></a>狼叔说</h2><p>狼叔在解答这个疑问之前直接上了一张图，图我贴在下面供大家看一下<br><img src=\"https://s1.ax1x.com/2020/04/15/JicTqe.jpg\" alt=\"JicTqe.jpg\"><br>这么一张图实际上已经胜过千言了，但是为了方便大家理解，狼叔还是在下面对图进行了解释</p>\n<blockquote>\n<p>前端全栈：分node全栈和其他语言全栈，比如ror搞全栈是最早的，其他php、java也有，不过纯前端的不过，在react，angular之前搞后台还是可以的。<br>所以前端全栈，我理解是等同于node全栈的。node本身是做后端的，但在前端工程化和BFF领域大放异彩，所以node全栈涵盖了前端的方方面面，是比较合理的解释。<br>大前端：更泛化的概念，移动互联网时代开启后，hybrid曾经很火，基于h5和webview做跨端，确实是很理想的做法，但复杂交互搞不定，机器性能网络等是硬伤，所以后来出现了rn和weex，整体还是前端写法，所以hybrid里前端也是占了一定的开发，结合之前前端和node的关系，综合3者：1）app里的前端，2）前端，2）node全栈，统称为大前端。这里的”大“含义是可以做的事儿的范围更广，触达前后端移动端，对前端职责有明显提升。随着技术发展，基于electron的桌面开发也日进流程，ott和iot等领域采用js也愈来愈多，所以只要和用户直接触达的端采用了前端技术开发的都涵盖在大前端范畴内。</p>\n</blockquote>\n<p><a href=\"https://www.zhihu.com/question/379563850/answer/1152553428\" target=\"_blank\" rel=\"noopener\">原帖地址</a></p>\n<h2 id=\"我说\"><a href=\"#我说\" class=\"headerlink\" title=\"我说\"></a>我说</h2><p>之前我的概念里前端扩展开来再进一步的话分两个方向，一个叫全栈另一个叫全端，‘栈’的话是纵向的，简单理解的话就是一款产品一个人能从设计到前端实现后端实现运维等一个人搞定，那么他就可以称之为全栈，狭义一点理解，就是前端后端都会，那么这里所说的前端全栈，我理解是更方便前端掌握的一些后端技能如node、php、ror等，而不是java这种后端技能，所以叫前端全栈，我想这里大部分指的都是node作为后端；</p>\n<p>那么我理解的全端是什么呢</p>\n<p>‘端’我理解为容器，任何跟用户直接接触的技术都是端的技术，早期的pc端，后来的手机端，手机端里又出现了h5、hybrid、native这么几种，后来又出现了小程序之类的容器，pc端也出现了如electron等客户端技术，那么随着物联网智能家居的出现，更多的端出现了，就如狼叔说的OTT和IOT领域也成了端，大前端的大是指范围广，属于用户直达所承载内容容器的都是端。</p>\n<p>总的来说跟狼叔的理解一致，我个人也努力在往全栈全端发展，不过真的好难还有很长的路要走。</p>"},{"title":"如何利用GitHub-Hexo-Next搭建一个漂亮的技术博客","date":"2017-10-11T08:18:48.000Z","_content":"\n> 作者：李旭光\n> 引用请标明出处\n\n## 前言\n> 开博客貌似并不是一件难事，现在有很多的方式开博客，而且现在博客貌似也不再流行，但是作为一个开发者，维护一个技术博客对自己的发展是很有好处的，出名者如阮一峰等，所以还是想要做一个技术博客的。\n\n> 开博客可以选择网上现有的博客系统如博客园以及其他各大公司提供的博客系统，也可以选择如wordpress等博客程序自行搭建博客系统，前者省事，但可自定义设置不足不符合一个爱折腾的人的性格，后者复杂些，爱折腾的可以学着搭建，但是服务器域名是个让人头疼的事，还有数据库等操作，着实麻烦，如今又有了另外一个选择，那就是利用GitHub和一些静态的博客系统搭建一个纯静态的博客系统，不花钱又能折腾，而且还是命令行下的，装B感觉棒棒的，另外搭配时下流行的MarkDown语法，做笔记正合我意。\n\n<!-- more -->\n\n## 技术栈选型\n> 这里说是技术栈选型可能并不是很恰当，但又找不到合适的描述，就是把需要的技术介绍一下，如果还不会的，可以自行学习，或者看看我的其他文章。\n- node（npm），现在node这么火，没用过都不好意思出门，但是如果你还不回的话，就先自行学习安装一下吧。\n- Hexo 静态博客程序，其实还有很多，只不过这个比较新，而且搭配Next非常漂亮，就选了它。\n- Next 可以说是Hexo的定制系统，不仅仅是做了个皮肤，简洁美观的配置项和官网说明深得我心。\n\n## 搭建步骤（安装步骤）\n### 安装Hexo [Hexo官网](https://hexo.io/)\n\n```\n$ npm install hexo-cli -g // 安装hexo的脚手架工具\n$ hexo init blog // 初始化博客\n$ cd blog // 返回博客目录\n$ npm install // 安装依赖\n$ hexo server // 启动博客\n```\n> 怎么样五行代码就生成并运行了一个博客是不是超简单。\n下面我们看一下生成的博客的目录\n\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n`_config.yml`这是博客的配置文件，比如博客名称，副标题，作者等信息都在这个文件里设置。\n\n`package.json`这是博客的依赖文件可以忽略\n\n`scaffolds`这是博客的模板目录，当你要写一篇文章时，这里会有文章的默认类型。\n\n`source`这是博客的网站资源，包括发布的文章（`_posts`）、关于、分类还有上传文件等。\n\n`themes`这是博客的皮肤。\n\n更多配置信息请查阅官网手册\n\n### 安装Next主题 [Next官网](http://theme-next.iissnan.com/)\n\n\n```\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n然后到`_config.yml`配置文件将主题配置改成next就可以使用next的皮肤了\n\n```\ntheme: next\n```\n皮肤也有配置文件，为跟Hexo进行区分Hexo的配置文件称为`站点配置文件`， 皮肤配置文件称为`主题配置文件`。\n\n对两个配置文件进行简单配置后，符合需求的博客就搭建而成了，这里有个友好的建议，配置文件如果配置不正确将不能正确运行博客，所以在配置前务必保留好原始配置文件，注意配置时不要缺了空格，不要问我为什么知道这个。\n\n### 更新博客主题\nhttps://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md\n\n## 写博客\n博客已经搭建好了，接下来就是写博客了，那么如何开始写博客呢，超级简单一行命令足以：\n\n```\nhexo new [layout] <title>  \n// layout 为模板类型可以省略，title为文章标题，通常可以简写为如下\nhexo new title\n\n```\n新建命令执行后在`_posts`的目录下就会生成一个你刚才命名的md后缀的文件，这就是一个MarkDown语法的文件，（如果不了解MarkDown语法的可以去学一下，很简单的符号语言，或者像我一样用支持MarkDown语法的编辑器来写文章。新建的文章打开内容如下\n\n```\n---\ntitle: new-post\ndate: 2017-10-11 15:01:09\ntags:\n---\n\n```\n非常好理解，title就是标题，date为创建时间，tags是标签方便分类，但是这些并不全，还有些常用的分类没有写上，下面我将常用的进行补充\n\n```\n---\ntitle: new-post\ndate: 2017-10-11 15:01:09\ncategories: \n\t- node\n\t- npm\ntags:\n\t- npm\n\t- node\n\t- rnpm\n---\n```\n这样补充后就有了常见博客的分类和标签的功能，是不是很简单。\n\n写完文章以后还要执行下面命令，生成静态页面\n\n```\n$ hexo generate // 将md后缀文件生成成静态html文件\n\n```\n\n\n这样我们就完成了博客的搭建和博客的书写，到现在我们就已经有了一个本地的博客，那么如何将博客上传到GitHub上呢？\n## 将Blog上传至GitHub\ngithub是一个代码托管的平台，为了方便描述代码功能，它提供了README.md文件进行说明，但是为了更好的展现，也提供了gitpage的功能，博客是基于这个功能进行的扩展，那么如何用gitpage的功能来实现博客系统呢？\n### 创建仓库\n创建一个以你的GitHub账号为开头命名的仓库，格式如下\n\n```\nGitHub账号名称.github.io\n// 如\nlixuguang.github.io\n```\n然后到blog系统的配置文件`_config.yml`里配置一下上传路径\n\n```\ndeploy:\n  type: git\n  repo: <repository url>\n  \n// 我的实例\ndeploy:\n  type: git\n  repo: git@github.com:lixuguang/lixuguang.github.io.git\n  branch: master\n\n```\n配置好就可以进行部署了，部署也很简单，只需要执行一下下面的命令。\n\n```\n$ npm install hexo-deployer-git --save // 安装上传工具\n\n$ hexo deploy\n\n```\n稍等一会，如果没有出现什么错误信息，那么你的部署就成功了。之后你就可以访问你的博客了，博客地址如下：\nhttps://你的github账号.github.io/\n我的如下：\nhttps://lixuguang.github.io/\n\n现在你是不是已经学会如何利用github搭建一个静态的博客系统了呢，如果你还没有一个自己的技术博客，快来试试吧。\n\n## 技巧\n是不是觉得命令行还是挺麻烦的，要敲那么一大串字母，哈哈实际上这些常用命令是有缩写方式的，下面给大家介绍一下缩写方式。\n\n\n```\n$ hexo server\n// 简写\n$ hexo s\n\n$ hexo generate\n// 简写\n$ hexo g\n\n$ hexo deploy\n// 简写\n$ hexo d\n\n$ hexo new\n// 简写\n$ hexo n\n```\n\n另外每次发布之前最好执行以下命令，清理当前内容\n\n```\n$ hexo clean\n\n```\n以防出现冲突的情况，具体动作如下\n\n```\n$ hexo clean\n$ hexo g -d // 文件生成后立即部署网站\n$ hexo d -g // 部署之前预先生成静态文件\n\n```\n\n## 常见问题\n1. SSH问题\n\n```\n$ ssh-keygen -t rsa -C \"lixuguang316@gmail.com\"\n// 填写你自己的github邮箱\n\n```\n敲三下回车，之后会在\n\n```\nC:\\Users\\Administrator\\.ssh // windows下\nopen ~/.ssh // Mac下打开ssh文件  \n```\n文件夹下生成两个文件`id_rsa`（私钥）、`id_rsa.pub`（公钥），在github上的SSH处添加新的ssh，然后将`公钥`内容贴到上面起个名字可以叫hexo，保存，然后在git bash下敲击\n\n```\n$ ssh git@github.com\n```\n然后敲`yes`就可以上传blog代码了\n怎么样会了么？更多高阶玩法请阅读官方说明文档，文章如有谬误之处请各位指出，如果觉得文章对你有所帮助我将十分开心，如果你喜欢我的文章可以到我的github上点个`fork`，谢谢你的阅读。\n","source":"_posts/use-GitHub-Hexo-Next-make-blog.md","raw":"---\ntitle: 如何利用GitHub-Hexo-Next搭建一个漂亮的技术博客\ndate: 2017-10-11 16:18:48\ncategories: \n  - 博客技巧\ntags: \n  - Hexo\n---\n\n> 作者：李旭光\n> 引用请标明出处\n\n## 前言\n> 开博客貌似并不是一件难事，现在有很多的方式开博客，而且现在博客貌似也不再流行，但是作为一个开发者，维护一个技术博客对自己的发展是很有好处的，出名者如阮一峰等，所以还是想要做一个技术博客的。\n\n> 开博客可以选择网上现有的博客系统如博客园以及其他各大公司提供的博客系统，也可以选择如wordpress等博客程序自行搭建博客系统，前者省事，但可自定义设置不足不符合一个爱折腾的人的性格，后者复杂些，爱折腾的可以学着搭建，但是服务器域名是个让人头疼的事，还有数据库等操作，着实麻烦，如今又有了另外一个选择，那就是利用GitHub和一些静态的博客系统搭建一个纯静态的博客系统，不花钱又能折腾，而且还是命令行下的，装B感觉棒棒的，另外搭配时下流行的MarkDown语法，做笔记正合我意。\n\n<!-- more -->\n\n## 技术栈选型\n> 这里说是技术栈选型可能并不是很恰当，但又找不到合适的描述，就是把需要的技术介绍一下，如果还不会的，可以自行学习，或者看看我的其他文章。\n- node（npm），现在node这么火，没用过都不好意思出门，但是如果你还不回的话，就先自行学习安装一下吧。\n- Hexo 静态博客程序，其实还有很多，只不过这个比较新，而且搭配Next非常漂亮，就选了它。\n- Next 可以说是Hexo的定制系统，不仅仅是做了个皮肤，简洁美观的配置项和官网说明深得我心。\n\n## 搭建步骤（安装步骤）\n### 安装Hexo [Hexo官网](https://hexo.io/)\n\n```\n$ npm install hexo-cli -g // 安装hexo的脚手架工具\n$ hexo init blog // 初始化博客\n$ cd blog // 返回博客目录\n$ npm install // 安装依赖\n$ hexo server // 启动博客\n```\n> 怎么样五行代码就生成并运行了一个博客是不是超简单。\n下面我们看一下生成的博客的目录\n\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n`_config.yml`这是博客的配置文件，比如博客名称，副标题，作者等信息都在这个文件里设置。\n\n`package.json`这是博客的依赖文件可以忽略\n\n`scaffolds`这是博客的模板目录，当你要写一篇文章时，这里会有文章的默认类型。\n\n`source`这是博客的网站资源，包括发布的文章（`_posts`）、关于、分类还有上传文件等。\n\n`themes`这是博客的皮肤。\n\n更多配置信息请查阅官网手册\n\n### 安装Next主题 [Next官网](http://theme-next.iissnan.com/)\n\n\n```\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n然后到`_config.yml`配置文件将主题配置改成next就可以使用next的皮肤了\n\n```\ntheme: next\n```\n皮肤也有配置文件，为跟Hexo进行区分Hexo的配置文件称为`站点配置文件`， 皮肤配置文件称为`主题配置文件`。\n\n对两个配置文件进行简单配置后，符合需求的博客就搭建而成了，这里有个友好的建议，配置文件如果配置不正确将不能正确运行博客，所以在配置前务必保留好原始配置文件，注意配置时不要缺了空格，不要问我为什么知道这个。\n\n### 更新博客主题\nhttps://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md\n\n## 写博客\n博客已经搭建好了，接下来就是写博客了，那么如何开始写博客呢，超级简单一行命令足以：\n\n```\nhexo new [layout] <title>  \n// layout 为模板类型可以省略，title为文章标题，通常可以简写为如下\nhexo new title\n\n```\n新建命令执行后在`_posts`的目录下就会生成一个你刚才命名的md后缀的文件，这就是一个MarkDown语法的文件，（如果不了解MarkDown语法的可以去学一下，很简单的符号语言，或者像我一样用支持MarkDown语法的编辑器来写文章。新建的文章打开内容如下\n\n```\n---\ntitle: new-post\ndate: 2017-10-11 15:01:09\ntags:\n---\n\n```\n非常好理解，title就是标题，date为创建时间，tags是标签方便分类，但是这些并不全，还有些常用的分类没有写上，下面我将常用的进行补充\n\n```\n---\ntitle: new-post\ndate: 2017-10-11 15:01:09\ncategories: \n\t- node\n\t- npm\ntags:\n\t- npm\n\t- node\n\t- rnpm\n---\n```\n这样补充后就有了常见博客的分类和标签的功能，是不是很简单。\n\n写完文章以后还要执行下面命令，生成静态页面\n\n```\n$ hexo generate // 将md后缀文件生成成静态html文件\n\n```\n\n\n这样我们就完成了博客的搭建和博客的书写，到现在我们就已经有了一个本地的博客，那么如何将博客上传到GitHub上呢？\n## 将Blog上传至GitHub\ngithub是一个代码托管的平台，为了方便描述代码功能，它提供了README.md文件进行说明，但是为了更好的展现，也提供了gitpage的功能，博客是基于这个功能进行的扩展，那么如何用gitpage的功能来实现博客系统呢？\n### 创建仓库\n创建一个以你的GitHub账号为开头命名的仓库，格式如下\n\n```\nGitHub账号名称.github.io\n// 如\nlixuguang.github.io\n```\n然后到blog系统的配置文件`_config.yml`里配置一下上传路径\n\n```\ndeploy:\n  type: git\n  repo: <repository url>\n  \n// 我的实例\ndeploy:\n  type: git\n  repo: git@github.com:lixuguang/lixuguang.github.io.git\n  branch: master\n\n```\n配置好就可以进行部署了，部署也很简单，只需要执行一下下面的命令。\n\n```\n$ npm install hexo-deployer-git --save // 安装上传工具\n\n$ hexo deploy\n\n```\n稍等一会，如果没有出现什么错误信息，那么你的部署就成功了。之后你就可以访问你的博客了，博客地址如下：\nhttps://你的github账号.github.io/\n我的如下：\nhttps://lixuguang.github.io/\n\n现在你是不是已经学会如何利用github搭建一个静态的博客系统了呢，如果你还没有一个自己的技术博客，快来试试吧。\n\n## 技巧\n是不是觉得命令行还是挺麻烦的，要敲那么一大串字母，哈哈实际上这些常用命令是有缩写方式的，下面给大家介绍一下缩写方式。\n\n\n```\n$ hexo server\n// 简写\n$ hexo s\n\n$ hexo generate\n// 简写\n$ hexo g\n\n$ hexo deploy\n// 简写\n$ hexo d\n\n$ hexo new\n// 简写\n$ hexo n\n```\n\n另外每次发布之前最好执行以下命令，清理当前内容\n\n```\n$ hexo clean\n\n```\n以防出现冲突的情况，具体动作如下\n\n```\n$ hexo clean\n$ hexo g -d // 文件生成后立即部署网站\n$ hexo d -g // 部署之前预先生成静态文件\n\n```\n\n## 常见问题\n1. SSH问题\n\n```\n$ ssh-keygen -t rsa -C \"lixuguang316@gmail.com\"\n// 填写你自己的github邮箱\n\n```\n敲三下回车，之后会在\n\n```\nC:\\Users\\Administrator\\.ssh // windows下\nopen ~/.ssh // Mac下打开ssh文件  \n```\n文件夹下生成两个文件`id_rsa`（私钥）、`id_rsa.pub`（公钥），在github上的SSH处添加新的ssh，然后将`公钥`内容贴到上面起个名字可以叫hexo，保存，然后在git bash下敲击\n\n```\n$ ssh git@github.com\n```\n然后敲`yes`就可以上传blog代码了\n怎么样会了么？更多高阶玩法请阅读官方说明文档，文章如有谬误之处请各位指出，如果觉得文章对你有所帮助我将十分开心，如果你喜欢我的文章可以到我的github上点个`fork`，谢谢你的阅读。\n","slug":"use-GitHub-Hexo-Next-make-blog","published":1,"updated":"2020-04-02T03:20:12.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs5o006zooa6h3wte3fh","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>开博客貌似并不是一件难事，现在有很多的方式开博客，而且现在博客貌似也不再流行，但是作为一个开发者，维护一个技术博客对自己的发展是很有好处的，出名者如阮一峰等，所以还是想要做一个技术博客的。</p>\n</blockquote>\n<blockquote>\n<p>开博客可以选择网上现有的博客系统如博客园以及其他各大公司提供的博客系统，也可以选择如wordpress等博客程序自行搭建博客系统，前者省事，但可自定义设置不足不符合一个爱折腾的人的性格，后者复杂些，爱折腾的可以学着搭建，但是服务器域名是个让人头疼的事，还有数据库等操作，着实麻烦，如今又有了另外一个选择，那就是利用GitHub和一些静态的博客系统搭建一个纯静态的博客系统，不花钱又能折腾，而且还是命令行下的，装B感觉棒棒的，另外搭配时下流行的MarkDown语法，做笔记正合我意。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"技术栈选型\"><a href=\"#技术栈选型\" class=\"headerlink\" title=\"技术栈选型\"></a>技术栈选型</h2><blockquote>\n<p>这里说是技术栈选型可能并不是很恰当，但又找不到合适的描述，就是把需要的技术介绍一下，如果还不会的，可以自行学习，或者看看我的其他文章。</p>\n</blockquote>\n<ul>\n<li>node（npm），现在node这么火，没用过都不好意思出门，但是如果你还不回的话，就先自行学习安装一下吧。</li>\n<li>Hexo 静态博客程序，其实还有很多，只不过这个比较新，而且搭配Next非常漂亮，就选了它。</li>\n<li>Next 可以说是Hexo的定制系统，不仅仅是做了个皮肤，简洁美观的配置项和官网说明深得我心。</li>\n</ul>\n<h2 id=\"搭建步骤（安装步骤）\"><a href=\"#搭建步骤（安装步骤）\" class=\"headerlink\" title=\"搭建步骤（安装步骤）\"></a>搭建步骤（安装步骤）</h2><h3 id=\"安装Hexo-Hexo官网\"><a href=\"#安装Hexo-Hexo官网\" class=\"headerlink\" title=\"安装Hexo Hexo官网\"></a>安装Hexo <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo官网</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g &#x2F;&#x2F; 安装hexo的脚手架工具</span><br><span class=\"line\">$ hexo init blog &#x2F;&#x2F; 初始化博客</span><br><span class=\"line\">$ cd blog &#x2F;&#x2F; 返回博客目录</span><br><span class=\"line\">$ npm install &#x2F;&#x2F; 安装依赖</span><br><span class=\"line\">$ hexo server &#x2F;&#x2F; 启动博客</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>怎么样五行代码就生成并运行了一个博客是不是超简单。<br>下面我们看一下生成的博客的目录</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n<p><code>_config.yml</code>这是博客的配置文件，比如博客名称，副标题，作者等信息都在这个文件里设置。</p>\n<p><code>package.json</code>这是博客的依赖文件可以忽略</p>\n<p><code>scaffolds</code>这是博客的模板目录，当你要写一篇文章时，这里会有文章的默认类型。</p>\n<p><code>source</code>这是博客的网站资源，包括发布的文章（<code>_posts</code>）、关于、分类还有上传文件等。</p>\n<p><code>themes</code>这是博客的皮肤。</p>\n<p>更多配置信息请查阅官网手册</p>\n<h3 id=\"安装Next主题-Next官网\"><a href=\"#安装Next主题-Next官网\" class=\"headerlink\" title=\"安装Next主题 Next官网\"></a>安装Next主题 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">Next官网</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd your-hexo-site</span><br><span class=\"line\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>\n\n<p>然后到<code>_config.yml</code>配置文件将主题配置改成next就可以使用next的皮肤了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n<p>皮肤也有配置文件，为跟Hexo进行区分Hexo的配置文件称为<code>站点配置文件</code>， 皮肤配置文件称为<code>主题配置文件</code>。</p>\n<p>对两个配置文件进行简单配置后，符合需求的博客就搭建而成了，这里有个友好的建议，配置文件如果配置不正确将不能正确运行博客，所以在配置前务必保留好原始配置文件，注意配置时不要缺了空格，不要问我为什么知道这个。</p>\n<h3 id=\"更新博客主题\"><a href=\"#更新博客主题\" class=\"headerlink\" title=\"更新博客主题\"></a>更新博客主题</h3><p><a href=\"https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md\" target=\"_blank\" rel=\"noopener\">https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md</a></p>\n<h2 id=\"写博客\"><a href=\"#写博客\" class=\"headerlink\" title=\"写博客\"></a>写博客</h2><p>博客已经搭建好了，接下来就是写博客了，那么如何开始写博客呢，超级简单一行命令足以：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new [layout] &lt;title&gt;  </span><br><span class=\"line\">&#x2F;&#x2F; layout 为模板类型可以省略，title为文章标题，通常可以简写为如下</span><br><span class=\"line\">hexo new title</span><br></pre></td></tr></table></figure>\n<p>新建命令执行后在<code>_posts</code>的目录下就会生成一个你刚才命名的md后缀的文件，这就是一个MarkDown语法的文件，（如果不了解MarkDown语法的可以去学一下，很简单的符号语言，或者像我一样用支持MarkDown语法的编辑器来写文章。新建的文章打开内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: new-post</span><br><span class=\"line\">date: 2017-10-11 15:01:09</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>非常好理解，title就是标题，date为创建时间，tags是标签方便分类，但是这些并不全，还有些常用的分类没有写上，下面我将常用的进行补充</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: new-post</span><br><span class=\"line\">date: 2017-10-11 15:01:09</span><br><span class=\"line\">categories: </span><br><span class=\"line\">\t- node</span><br><span class=\"line\">\t- npm</span><br><span class=\"line\">tags:</span><br><span class=\"line\">\t- npm</span><br><span class=\"line\">\t- node</span><br><span class=\"line\">\t- rnpm</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>这样补充后就有了常见博客的分类和标签的功能，是不是很简单。</p>\n<p>写完文章以后还要执行下面命令，生成静态页面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate &#x2F;&#x2F; 将md后缀文件生成成静态html文件</span><br></pre></td></tr></table></figure>\n\n\n<p>这样我们就完成了博客的搭建和博客的书写，到现在我们就已经有了一个本地的博客，那么如何将博客上传到GitHub上呢？</p>\n<h2 id=\"将Blog上传至GitHub\"><a href=\"#将Blog上传至GitHub\" class=\"headerlink\" title=\"将Blog上传至GitHub\"></a>将Blog上传至GitHub</h2><p>github是一个代码托管的平台，为了方便描述代码功能，它提供了README.md文件进行说明，但是为了更好的展现，也提供了gitpage的功能，博客是基于这个功能进行的扩展，那么如何用gitpage的功能来实现博客系统呢？</p>\n<h3 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h3><p>创建一个以你的GitHub账号为开头命名的仓库，格式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GitHub账号名称.github.io</span><br><span class=\"line\">&#x2F;&#x2F; 如</span><br><span class=\"line\">lixuguang.github.io</span><br></pre></td></tr></table></figure>\n<p>然后到blog系统的配置文件<code>_config.yml</code>里配置一下上传路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: &lt;repository url&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#x2F;&#x2F; 我的实例</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:lixuguang&#x2F;lixuguang.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>配置好就可以进行部署了，部署也很简单，只需要执行一下下面的命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save &#x2F;&#x2F; 安装上传工具</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>稍等一会，如果没有出现什么错误信息，那么你的部署就成功了。之后你就可以访问你的博客了，博客地址如下：<br>https://你的github账号.github.io/<br>我的如下：<br><a href=\"https://lixuguang.github.io/\">https://lixuguang.github.io/</a></p>\n<p>现在你是不是已经学会如何利用github搭建一个静态的博客系统了呢，如果你还没有一个自己的技术博客，快来试试吧。</p>\n<h2 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h2><p>是不是觉得命令行还是挺麻烦的，要敲那么一大串字母，哈哈实际上这些常用命令是有缩写方式的，下面给大家介绍一下缩写方式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br><span class=\"line\">&#x2F;&#x2F; 简写</span><br><span class=\"line\">$ hexo s</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo generate</span><br><span class=\"line\">&#x2F;&#x2F; 简写</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo deploy</span><br><span class=\"line\">&#x2F;&#x2F; 简写</span><br><span class=\"line\">$ hexo d</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo new</span><br><span class=\"line\">&#x2F;&#x2F; 简写</span><br><span class=\"line\">$ hexo n</span><br></pre></td></tr></table></figure>\n\n<p>另外每次发布之前最好执行以下命令，清理当前内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<p>以防出现冲突的情况，具体动作如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g -d &#x2F;&#x2F; 文件生成后立即部署网站</span><br><span class=\"line\">$ hexo d -g &#x2F;&#x2F; 部署之前预先生成静态文件</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><ol>\n<li>SSH问题</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C &quot;lixuguang316@gmail.com&quot;</span><br><span class=\"line\">&#x2F;&#x2F; 填写你自己的github邮箱</span><br></pre></td></tr></table></figure>\n<p>敲三下回车，之后会在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Administrator\\.ssh &#x2F;&#x2F; windows下</span><br><span class=\"line\">open ~&#x2F;.ssh &#x2F;&#x2F; Mac下打开ssh文件</span><br></pre></td></tr></table></figure>\n<p>文件夹下生成两个文件<code>id_rsa</code>（私钥）、<code>id_rsa.pub</code>（公钥），在github上的SSH处添加新的ssh，然后将<code>公钥</code>内容贴到上面起个名字可以叫hexo，保存，然后在git bash下敲击</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh git@github.com</span><br></pre></td></tr></table></figure>\n<p>然后敲<code>yes</code>就可以上传blog代码了<br>怎么样会了么？更多高阶玩法请阅读官方说明文档，文章如有谬误之处请各位指出，如果觉得文章对你有所帮助我将十分开心，如果你喜欢我的文章可以到我的github上点个<code>fork</code>，谢谢你的阅读。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>开博客貌似并不是一件难事，现在有很多的方式开博客，而且现在博客貌似也不再流行，但是作为一个开发者，维护一个技术博客对自己的发展是很有好处的，出名者如阮一峰等，所以还是想要做一个技术博客的。</p>\n</blockquote>\n<blockquote>\n<p>开博客可以选择网上现有的博客系统如博客园以及其他各大公司提供的博客系统，也可以选择如wordpress等博客程序自行搭建博客系统，前者省事，但可自定义设置不足不符合一个爱折腾的人的性格，后者复杂些，爱折腾的可以学着搭建，但是服务器域名是个让人头疼的事，还有数据库等操作，着实麻烦，如今又有了另外一个选择，那就是利用GitHub和一些静态的博客系统搭建一个纯静态的博客系统，不花钱又能折腾，而且还是命令行下的，装B感觉棒棒的，另外搭配时下流行的MarkDown语法，做笔记正合我意。</p>\n</blockquote>","more":"<h2 id=\"技术栈选型\"><a href=\"#技术栈选型\" class=\"headerlink\" title=\"技术栈选型\"></a>技术栈选型</h2><blockquote>\n<p>这里说是技术栈选型可能并不是很恰当，但又找不到合适的描述，就是把需要的技术介绍一下，如果还不会的，可以自行学习，或者看看我的其他文章。</p>\n</blockquote>\n<ul>\n<li>node（npm），现在node这么火，没用过都不好意思出门，但是如果你还不回的话，就先自行学习安装一下吧。</li>\n<li>Hexo 静态博客程序，其实还有很多，只不过这个比较新，而且搭配Next非常漂亮，就选了它。</li>\n<li>Next 可以说是Hexo的定制系统，不仅仅是做了个皮肤，简洁美观的配置项和官网说明深得我心。</li>\n</ul>\n<h2 id=\"搭建步骤（安装步骤）\"><a href=\"#搭建步骤（安装步骤）\" class=\"headerlink\" title=\"搭建步骤（安装步骤）\"></a>搭建步骤（安装步骤）</h2><h3 id=\"安装Hexo-Hexo官网\"><a href=\"#安装Hexo-Hexo官网\" class=\"headerlink\" title=\"安装Hexo Hexo官网\"></a>安装Hexo <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo官网</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g &#x2F;&#x2F; 安装hexo的脚手架工具</span><br><span class=\"line\">$ hexo init blog &#x2F;&#x2F; 初始化博客</span><br><span class=\"line\">$ cd blog &#x2F;&#x2F; 返回博客目录</span><br><span class=\"line\">$ npm install &#x2F;&#x2F; 安装依赖</span><br><span class=\"line\">$ hexo server &#x2F;&#x2F; 启动博客</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>怎么样五行代码就生成并运行了一个博客是不是超简单。<br>下面我们看一下生成的博客的目录</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n<p><code>_config.yml</code>这是博客的配置文件，比如博客名称，副标题，作者等信息都在这个文件里设置。</p>\n<p><code>package.json</code>这是博客的依赖文件可以忽略</p>\n<p><code>scaffolds</code>这是博客的模板目录，当你要写一篇文章时，这里会有文章的默认类型。</p>\n<p><code>source</code>这是博客的网站资源，包括发布的文章（<code>_posts</code>）、关于、分类还有上传文件等。</p>\n<p><code>themes</code>这是博客的皮肤。</p>\n<p>更多配置信息请查阅官网手册</p>\n<h3 id=\"安装Next主题-Next官网\"><a href=\"#安装Next主题-Next官网\" class=\"headerlink\" title=\"安装Next主题 Next官网\"></a>安装Next主题 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">Next官网</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd your-hexo-site</span><br><span class=\"line\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>\n\n<p>然后到<code>_config.yml</code>配置文件将主题配置改成next就可以使用next的皮肤了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n<p>皮肤也有配置文件，为跟Hexo进行区分Hexo的配置文件称为<code>站点配置文件</code>， 皮肤配置文件称为<code>主题配置文件</code>。</p>\n<p>对两个配置文件进行简单配置后，符合需求的博客就搭建而成了，这里有个友好的建议，配置文件如果配置不正确将不能正确运行博客，所以在配置前务必保留好原始配置文件，注意配置时不要缺了空格，不要问我为什么知道这个。</p>\n<h3 id=\"更新博客主题\"><a href=\"#更新博客主题\" class=\"headerlink\" title=\"更新博客主题\"></a>更新博客主题</h3><p><a href=\"https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md\" target=\"_blank\" rel=\"noopener\">https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md</a></p>\n<h2 id=\"写博客\"><a href=\"#写博客\" class=\"headerlink\" title=\"写博客\"></a>写博客</h2><p>博客已经搭建好了，接下来就是写博客了，那么如何开始写博客呢，超级简单一行命令足以：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new [layout] &lt;title&gt;  </span><br><span class=\"line\">&#x2F;&#x2F; layout 为模板类型可以省略，title为文章标题，通常可以简写为如下</span><br><span class=\"line\">hexo new title</span><br></pre></td></tr></table></figure>\n<p>新建命令执行后在<code>_posts</code>的目录下就会生成一个你刚才命名的md后缀的文件，这就是一个MarkDown语法的文件，（如果不了解MarkDown语法的可以去学一下，很简单的符号语言，或者像我一样用支持MarkDown语法的编辑器来写文章。新建的文章打开内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: new-post</span><br><span class=\"line\">date: 2017-10-11 15:01:09</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>非常好理解，title就是标题，date为创建时间，tags是标签方便分类，但是这些并不全，还有些常用的分类没有写上，下面我将常用的进行补充</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: new-post</span><br><span class=\"line\">date: 2017-10-11 15:01:09</span><br><span class=\"line\">categories: </span><br><span class=\"line\">\t- node</span><br><span class=\"line\">\t- npm</span><br><span class=\"line\">tags:</span><br><span class=\"line\">\t- npm</span><br><span class=\"line\">\t- node</span><br><span class=\"line\">\t- rnpm</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>这样补充后就有了常见博客的分类和标签的功能，是不是很简单。</p>\n<p>写完文章以后还要执行下面命令，生成静态页面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate &#x2F;&#x2F; 将md后缀文件生成成静态html文件</span><br></pre></td></tr></table></figure>\n\n\n<p>这样我们就完成了博客的搭建和博客的书写，到现在我们就已经有了一个本地的博客，那么如何将博客上传到GitHub上呢？</p>\n<h2 id=\"将Blog上传至GitHub\"><a href=\"#将Blog上传至GitHub\" class=\"headerlink\" title=\"将Blog上传至GitHub\"></a>将Blog上传至GitHub</h2><p>github是一个代码托管的平台，为了方便描述代码功能，它提供了README.md文件进行说明，但是为了更好的展现，也提供了gitpage的功能，博客是基于这个功能进行的扩展，那么如何用gitpage的功能来实现博客系统呢？</p>\n<h3 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h3><p>创建一个以你的GitHub账号为开头命名的仓库，格式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GitHub账号名称.github.io</span><br><span class=\"line\">&#x2F;&#x2F; 如</span><br><span class=\"line\">lixuguang.github.io</span><br></pre></td></tr></table></figure>\n<p>然后到blog系统的配置文件<code>_config.yml</code>里配置一下上传路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: &lt;repository url&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#x2F;&#x2F; 我的实例</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:lixuguang&#x2F;lixuguang.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>配置好就可以进行部署了，部署也很简单，只需要执行一下下面的命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save &#x2F;&#x2F; 安装上传工具</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>稍等一会，如果没有出现什么错误信息，那么你的部署就成功了。之后你就可以访问你的博客了，博客地址如下：<br>https://你的github账号.github.io/<br>我的如下：<br><a href=\"https://lixuguang.github.io/\">https://lixuguang.github.io/</a></p>\n<p>现在你是不是已经学会如何利用github搭建一个静态的博客系统了呢，如果你还没有一个自己的技术博客，快来试试吧。</p>\n<h2 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h2><p>是不是觉得命令行还是挺麻烦的，要敲那么一大串字母，哈哈实际上这些常用命令是有缩写方式的，下面给大家介绍一下缩写方式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br><span class=\"line\">&#x2F;&#x2F; 简写</span><br><span class=\"line\">$ hexo s</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo generate</span><br><span class=\"line\">&#x2F;&#x2F; 简写</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo deploy</span><br><span class=\"line\">&#x2F;&#x2F; 简写</span><br><span class=\"line\">$ hexo d</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo new</span><br><span class=\"line\">&#x2F;&#x2F; 简写</span><br><span class=\"line\">$ hexo n</span><br></pre></td></tr></table></figure>\n\n<p>另外每次发布之前最好执行以下命令，清理当前内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<p>以防出现冲突的情况，具体动作如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g -d &#x2F;&#x2F; 文件生成后立即部署网站</span><br><span class=\"line\">$ hexo d -g &#x2F;&#x2F; 部署之前预先生成静态文件</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><ol>\n<li>SSH问题</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C &quot;lixuguang316@gmail.com&quot;</span><br><span class=\"line\">&#x2F;&#x2F; 填写你自己的github邮箱</span><br></pre></td></tr></table></figure>\n<p>敲三下回车，之后会在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Administrator\\.ssh &#x2F;&#x2F; windows下</span><br><span class=\"line\">open ~&#x2F;.ssh &#x2F;&#x2F; Mac下打开ssh文件</span><br></pre></td></tr></table></figure>\n<p>文件夹下生成两个文件<code>id_rsa</code>（私钥）、<code>id_rsa.pub</code>（公钥），在github上的SSH处添加新的ssh，然后将<code>公钥</code>内容贴到上面起个名字可以叫hexo，保存，然后在git bash下敲击</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh git@github.com</span><br></pre></td></tr></table></figure>\n<p>然后敲<code>yes</code>就可以上传blog代码了<br>怎么样会了么？更多高阶玩法请阅读官方说明文档，文章如有谬误之处请各位指出，如果觉得文章对你有所帮助我将十分开心，如果你喜欢我的文章可以到我的github上点个<code>fork</code>，谢谢你的阅读。</p>"},{"title":"React 源码剖析系列 － 不可思议的 react diff【转载】","date":"2020-04-03T04:38:00.000Z","_content":"目前，前端领域中 React 势头正盛，使用者众多却少有能够深入剖析内部实现机制和原理。本系列文章希望通过剖析 React 源码，理解其内部的实现原理，知其然更要知其所以然。\n\nReact diff 作为 Virtual DOM 的加速器，其算法上的改进优化是 React 整个界面渲染的基础，以及性能提高的保障，同时也是 React 源码中最神秘、最不可思议的部分，本文从源码入手，深入剖析 React diff 的不可思议之处。\n\n阅读本文需要对 React 有一定的了解，如果你不知何为 React，请详读 [React 官方文档](http://facebook.github.io/react/docs/getting-started.html)。\n如果你对 React diff 存在些许疑惑，或者你对算法优化感兴趣，那么本文值得阅读和讨论。\n\n<!-- more -->\n# 前言\nReact 中最值得称道的部分莫过于 Virtual DOM 与 diff 的完美结合，特别是其高效的 diff 算法，让用户可以无需顾忌性能问题而”任性自由”的刷新页面，让开发者也可以无需关心 Virtual DOM 背后的运作原理，因为 React diff 会帮助我们计算出 Virtual DOM 中真正变化的部分，并只针对该部分进行实际 DOM 操作，而非重新渲染整个页面，从而保证了每次操作更新后页面的高效渲染，因此 Virtual DOM 与 diff 是保证 React 性能口碑的幕后推手。\n\n***行文至此，可能会有读者质疑：React 无非就是引入 diff 这一概念，且 diff 算法也并非其首创，何必吹嘘的如此天花乱坠呢？***\n\n其实，正是因为 diff 算法的普识度高，就更应该认可 React 针对 diff 算法优化所做的努力与贡献，更能体现 React 开发者们的魅力与智慧！\n\n## 传统 diff 算法\n计算一棵树形结构转换成另一棵树形结构的最少操作，是一个复杂且值得研究的问题。[传统 diff 算法](http://grfia.dlsi.ua.es/ml/algorithms/references/editsurvey_bille.pdf)通过循环递归对节点进行依次对比，效率低下，算法复杂度达到 O(n^3)，其中 n 是树中节点的总数。O(n^3) 到底有多可怕，这意味着如果要展示1000个节点，就要依次执行上十亿次的比较。这种指数型的性能消耗对于前端渲染场景来说代价太高了！现今的 CPU 每秒钟能执行大约30亿条指令，即便是最高效的实现，也不可能在一秒内计算出差异情况。\n\n如果 React 只是单纯的引入 diff 算法而没有任何的优化改进，那么其效率是远远无法满足前端渲染所要求的性能。\n\n因此，想要将 diff 思想引入 Virtual DOM，就需要设计一种稳定高效的 diff 算法，而 React 做到了！\n\n那么，React diff 到底是如何实现的呢？\n\n## 详解 React diff\n传统 diff 算法的复杂度为 O(n^3)，显然这是无法满足性能要求的。***React 通过制定大胆的策略，将 O(n^3) 复杂度的问题转换成 O(n) 复杂度的问题。***\n\n### diff 策略\n1. Web UI 中 DOM 节点跨层级的移动操作特别少，可以忽略不计。\n2. 拥有相同类的两个组件将会生成相似的树形结构，拥有不同类的两个组件将会生成不同的树形结构。\n3. 对于同一层级的一组子节点，它们可以通过唯一 id 进行区分。\n\n基于以上三个前提策略，React 分别对 tree diff、component diff 以及 element diff 进行算法优化，事实也证明这三个前提策略是合理且准确的，它保证了整体界面构建的性能。\n\n- tree diff\n- component diff\n- element diff\n\n> 本文中源码 [ReactMultiChild.js](https://github.com/facebook/react/blob/master/src/renderers/shared/reconciler/ReactMultiChild.js)\n\n### tree diff\n基于策略一，React 对树的算法进行了简洁明了的优化，即对树进行分层比较，两棵树只会对同一层次的节点进行比较。\n\n既然 DOM 节点跨层级的移动操作少到可以忽略不计，针对这一现象，React 通过 updateDepth 对 Virtual DOM 树进行层级控制，只会对相同颜色方框内的 DOM 节点进行比较，即同一个父节点下的所有子节点。当发现节点已经不存在，则该节点及其子节点会被完全删除掉，不会用于进一步的比较。这样只需要对树进行一次遍历，便能完成整个 DOM 树的比较。\n\n![https://pic1.zhimg.com/0c08dbb6b1e0745780de4d208ad51d34_r.jpg](https://pic1.zhimg.com/0c08dbb6b1e0745780de4d208ad51d34_r.jpg)\n\n``` js\nupdateChildren: function(nextNestedChildrenElements, transaction, context) {\n  updateDepth++;\n  var errorThrown = true;\n  try {\n    this._updateChildren(nextNestedChildrenElements, transaction, context);\n    errorThrown = false;\n  } finally {\n    updateDepth--;\n    if (!updateDepth) {\n      if (errorThrown) {\n        clearQueue();\n      } else {\n        processQueue();\n      }\n    }\n  }\n}\n```\n分析至此，***大部分人可能都存在这样的疑问：如果出现了 DOM 节点跨层级的移动操作，React diff 会有怎样的表现呢？***是的，对此我也好奇不已，不如试验一番。\n\n如下图，A 节点（包括其子节点）整个被移动到 D 节点下，由于 React 只会简单的考虑同层级节点的位置变换，而对于不同层级的节点，只有创建和删除操作。当根节点发现子节点中 A 消失了，就会直接销毁 A；当 D 发现多了一个子节点 A，则会创建新的 A（包括子节点）作为其子节点。此时，React diff 的执行情况：***create A -> create B -> create C -> delete A***。\n\n由此可发现，当出现节点跨层级移动时，并不会出现想象中的移动操作，而是以 A 为根节点的树被整个重新创建，这是一种影响 React 性能的操作，***因此 React 官方建议不要进行 DOM 节点跨层级的操作***。\n\n> 注意：在开发组件时，保持稳定的 DOM 结构会有助于性能的提升。例如，可以通过 CSS 隐藏或显示节点，而不是真的移除或添加 DOM 节点。\n\n![https://pic2.zhimg.com/d712a73769688afe1ef1a055391d99ed_r.jpg](https://pic2.zhimg.com/d712a73769688afe1ef1a055391d99ed_r.jpg)\n\n### component diff\nReact 是基于组件构建应用的，对于组件间的比较所采取的策略也是简洁高效。\n\n- 如果是同一类型的组件，按照原策略继续比较 virtual DOM tree。\n- 如果不是，则将该组件判断为 dirty component，从而替换整个组件下的所有子节点。\n- 对于同一类型的组件，有可能其 Virtual DOM 没有任何变化，如果能够确切的知道这点那可以节省大量的 diff 运算时间，因此 React 允许用户通过 shouldComponentUpdate() 来判断该组件是否需要进行 diff。\n\n如下图，当 component D 改变为 component G 时，即使这两个 component 结构相似，一旦 React 判断 D 和 G 是不同类型的组件，就不会比较二者的结构，而是直接删除 component D，重新创建 component G 以及其子节点。虽然当两个 component 是不同类型但结构相似时，React diff 会影响性能，但正如 React 官方博客所言：不同类型的 component 是很少存在相似 DOM tree 的机会，因此这种极端因素很难在实现开发过程中造成重大影响的。\n\n![https://pic1.zhimg.com/52654992aba15fc90e2dac8b2387d0c4_r.jpg](https://pic1.zhimg.com/52654992aba15fc90e2dac8b2387d0c4_r.jpg)\n\n### element diff\n\n当节点处于同一层级时，React diff 提供了三种节点操作，分别为：***INSERT_MARKUP（插入）、MOVE_EXISTING（移动）和 REMOVE_NODE（删除）***。\n\n- ***INSERT_MARKUP*** ，新的 component 类型不在老集合里， 即是全新的节点，需要对新节点执行插入操作。\n\n- ***MOVE_EXISTING*** ，在老集合有新 component 类型，且 element 是可更新的类型，generateComponentChildren 已调用 receiveComponent，这种情况下 prevChild=nextChild，就需要做移动操作，可以复用以前的 DOM 节点。\n\n- ***REMOVE_NODE*** ，老 component 类型，在新集合里也有，但对应的 element 不同则不能直接复用和更新，需要执行删除操作，或者老 component 不在新集合里的，也需要执行删除操作。\n\n``` js\nfunction enqueueInsertMarkup(parentInst, markup, toIndex) {\n  updateQueue.push({\n    parentInst: parentInst,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    content: null,\n    fromIndex: null,\n    toIndex: toIndex,\n  });\n}\n\nfunction enqueueMove(parentInst, fromIndex, toIndex) {\n  updateQueue.push({\n    parentInst: parentInst,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex,\n  });\n}\n\nfunction enqueueRemove(parentInst, fromIndex) {\n  updateQueue.push({\n    parentInst: parentInst,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: null,\n  });\n}\n```\n如下图，老集合中包含节点：A、B、C、D，更新后的新集合中包含节点：B、A、D、C，此时新老集合进行 diff 差异化对比，发现 B != A，则创建并插入 B 至新集合，删除老集合 A；以此类推，创建并插入 A、D 和 C，删除 B、C 和 D。\n\n![https://pic2.zhimg.com/7541670c089b84c59b84e9438e92a8e9_r.jpg](https://pic2.zhimg.com/7541670c089b84c59b84e9438e92a8e9_r.jpg)\n\nReact 发现这类操作繁琐冗余，因为这些都是相同的节点，但由于位置发生变化，导致需要进行繁杂低效的删除、创建操作，其实只要对这些节点进行位置移动即可。\n\n针对这一现象，React 提出优化策略：允许开发者对同一层级的同组子节点，添加唯一 key 进行区分，虽然只是小小的改动，性能上却发生了翻天覆地的变化！\n\n新老集合所包含的节点，如下图所示，新老集合进行 diff 差异化对比，通过 key 发现新老集合中的节点都是相同的节点，因此无需进行节点删除和创建，只需要将老集合中节点的位置进行移动，更新为新集合中节点的位置，此时 React 给出的 diff 结果为：B、D 不做任何操作，A、C 进行移动操作，即可。\n\n![https://pic4.zhimg.com/c0aa97d996de5e7f1069e97ca3accfeb_r.jpg](https://pic4.zhimg.com/c0aa97d996de5e7f1069e97ca3accfeb_r.jpg)\n\n那么，如此高效的 diff 到底是如何运作的呢？让我们通过源码进行详细分析。\n\n首先对新集合的节点进行循环遍历，for (name in nextChildren)，通过唯一 key 可以判断新老集合中是否存在相同的节点，if (prevChild === nextChild)，如果存在相同节点，则进行移动操作，但在移动前需要将当前节点在老集合中的位置与 lastIndex 进行比较，if (child._mountIndex < lastIndex)，则进行节点移动操作，否则不执行该操作。这是一种顺序优化手段，lastIndex 一直在更新，表示访问过的节点在老集合中最右的位置（即最大的位置），如果新集合中当前访问的节点比 lastIndex 大，说明当前访问节点在老集合中就比上一个节点位置靠后，则该节点不会影响其他节点的位置，因此不用添加到差异队列中，即不执行移动操作，只有当访问的节点比 lastIndex 小时，才需要进行移动操作。\n\n以上图为例，可以更为清晰直观的描述 diff 的差异对比过程：\n\n- 从新集合中取得 B，判断老集合中存在相同节点 B，通过对比节点位置判断是否进行移动操作，B 在老集合中的位置 B._mountIndex = 1，此时 lastIndex = 0，不满足 child._mountIndex < lastIndex 的条件，因此不对 B 进行移动操作；更新 lastIndex = Math.max(prevChild._mountIndex, lastIndex)，其中 prevChild._mountIndex 表示 B 在老集合中的位置，则 lastIndex ＝ 1，并将 B 的位置更新为新集合中的位置prevChild._mountIndex = nextIndex，此时新集合中 B._mountIndex = 0，nextIndex++ 进入下一个节点的判断。\n\n- 从新集合中取得 A，判断老集合中存在相同节点 A，通过对比节点位置判断是否进行移动操作，A 在老集合中的位置 A._mountIndex = 0，此时 lastIndex = 1，满足 child._mountIndex < lastIndex的条件，因此对 A 进行移动操作enqueueMove(this, child._mountIndex, toIndex)，其中 toIndex 其实就是 nextIndex，表示 A 需要移动到的位置；更新 lastIndex = Math.max(prevChild._mountIndex, lastIndex)，则 lastIndex ＝ 1，并将 A 的位置更新为新集合中的位置 prevChild._mountIndex = nextIndex，此时新集合中A._mountIndex = 1，nextIndex++ 进入下一个节点的判断。\n\n- 从新集合中取得 D，判断老集合中存在相同节点 D，通过对比节点位置判断是否进行移动操作，D 在老集合中的位置 D._mountIndex = 3，此时 lastIndex = 1，不满足 child._mountIndex < lastIndex的条件，因此不对 D 进行移动操作；更新 lastIndex = Math.max(prevChild._mountIndex, lastIndex)，则 lastIndex ＝ 3，并将 D 的位置更新为新集合中的位置 prevChild._mountIndex = nextIndex，此时新集合中D._mountIndex = 2，nextIndex++ 进入下一个节点的判断。\n\n- 从新集合中取得 C，判断老集合中存在相同节点 C，通过对比节点位置判断是否进行移动操作，C 在老集合中的位置 C._mountIndex = 2，此时 lastIndex = 3，满足 child._mountIndex < lastIndex 的条件，因此对 C 进行移动操作 enqueueMove(this, child._mountIndex, toIndex)；更新 lastIndex = Math.max(prevChild._mountIndex, lastIndex)，则 lastIndex ＝ 3，并将 C 的位置更新为新集合中的位置 prevChild._mountIndex = nextIndex，此时新集合中 C._mountIndex = 3，nextIndex++ 进入下一个节点的判断，由于 C 已经是最后一个节点，因此 diff 到此完成。\n\n以上主要分析新老集合中存在相同节点但位置不同时，对节点进行位置移动的情况，如果新集合中有新加入的节点且老集合存在需要删除的节点，那么 React diff 又是如何对比运作的呢？\n\n以下图为例：\n\n- 从新集合中取得 B，判断老集合中存在相同节点 B，由于 B 在老集合中的位置 B._mountIndex = 1，此时lastIndex = 0，因此不对 B 进行移动操作；更新 lastIndex ＝ 1，并将 B 的位置更新为新集合中的位置B._mountIndex = 0，nextIndex++进入下一个节点的判断。\n\n- 从新集合中取得 E，判断老集合中不存在相同节点 E，则创建新节点 E；更新 lastIndex ＝ 1，并将 E 的位置更新为新集合中的位置，nextIndex++进入下一个节点的判断。\n\n- 从新集合中取得 C，判断老集合中存在相同节点 C，由于 C 在老集合中的位置C._mountIndex = 2，lastIndex = 1，此时 C._mountIndex > lastIndex，因此不对 C 进行移动操作；更新 lastIndex ＝ 2，并将 C 的位置更新为新集合中的位置，nextIndex++ 进入下一个节点的判断。\n\n- 从新集合中取得 A，判断老集合中存在相同节点 A，由于 A 在老集合中的位置A._mountIndex = 0，lastIndex = 2，此时 A._mountIndex < lastIndex，因此对 A 进行移动操作；更新 lastIndex ＝ 2，并将 A 的位置更新为新集合中的位置，nextIndex++ 进入下一个节点的判断。\n\n- 当完成新集合中所有节点 diff 时，最后还需要对老集合进行循环遍历，判断是否存在新集合中没有但老集合中仍存在的节点，发现存在这样的节点 D，因此删除节点 D，到此 diff 全部完成。\n\n![https://pic1.zhimg.com/7b9beae0cf0a5bc8c2e82d00c43d1c90_r.jpg](https://pic1.zhimg.com/7b9beae0cf0a5bc8c2e82d00c43d1c90_r.jpg)\n\n``` js\n_updateChildren: function(nextNestedChildrenElements, transaction, context) {\n  var prevChildren = this._renderedChildren;\n  var nextChildren = this._reconcilerUpdateChildren(\n    prevChildren, nextNestedChildrenElements, transaction, context\n  );\n  if (!nextChildren && !prevChildren) {\n    return;\n  }\n  var name;\n  var lastIndex = 0;\n  var nextIndex = 0;\n  for (name in nextChildren) {\n    if (!nextChildren.hasOwnProperty(name)) {\n      continue;\n    }\n    var prevChild = prevChildren && prevChildren[name];\n    var nextChild = nextChildren[name];\n    if (prevChild === nextChild) {\n      // 移动节点\n      this.moveChild(prevChild, nextIndex, lastIndex);\n      lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n      prevChild._mountIndex = nextIndex;\n    } else {\n      if (prevChild) {\n        lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n        // 删除节点\n        this._unmountChild(prevChild);\n      }\n      // 初始化并创建节点\n      this._mountChildAtIndex(\n        nextChild, nextIndex, transaction, context\n      );\n    }\n    nextIndex++;\n  }\n  for (name in prevChildren) {\n    if (prevChildren.hasOwnProperty(name) &&\n        !(nextChildren && nextChildren.hasOwnProperty(name))) {\n      this._unmountChild(prevChildren[name]);\n    }\n  }\n  this._renderedChildren = nextChildren;\n},\n// 移动节点\nmoveChild: function(child, toIndex, lastIndex) {\n  if (child._mountIndex < lastIndex) {\n    this.prepareToManageChildren();\n    enqueueMove(this, child._mountIndex, toIndex);\n  }\n},\n// 创建节点\ncreateChild: function(child, mountImage) {\n  this.prepareToManageChildren();\n  enqueueInsertMarkup(this, mountImage, child._mountIndex);\n},\n// 删除节点\nremoveChild: function(child) {\n  this.prepareToManageChildren();\n  enqueueRemove(this, child._mountIndex);\n},\n\n_unmountChild: function(child) {\n  this.removeChild(child);\n  child._mountIndex = null;\n},\n\n_mountChildAtIndex: function(\n  child,\n  index,\n  transaction,\n  context) {\n  var mountImage = ReactReconciler.mountComponent(\n    child,\n    transaction,\n    this,\n    this._nativeContainerInfo,\n    context\n  );\n  child._mountIndex = index;\n  this.createChild(child, mountImage);\n},\n```\n\n当然，React diff 还是存在些许不足与待优化的地方，如下图所示，若新集合的节点更新为：D、A、B、C，与老集合对比只有 D 节点移动，而 A、B、C 仍然保持原有的顺序，理论上 diff 应该只需对 D 执行移动操作，然而由于 D 在老集合的位置是最大的，导致其他节点的 _mountIndex < lastIndex，造成 D 没有执行移动操作，而是 A、B、C 全部移动到 D 节点后面的现象。\n\n***在此，读者们可以讨论思考：如何优化上述问题？***\n> 建议：在开发过程中，尽量减少类似将最后一个节点移动到列表首部的操作，当节点数量过大或更新操作过于频繁时，在一定程度上会影响 React 的渲染性能。\n\n![https://pic2.zhimg.com/1b8dac5b9b3e4452dec8d5447d7717ad_r.jpg](https://pic2.zhimg.com/1b8dac5b9b3e4452dec8d5447d7717ad_r.jpg)\n\n## 总结\n- React 通过制定大胆的 diff 策略，将 O(n3) 复杂度的问题转换成 O(n) 复杂度的问题；\n- React 通过***分层求异***的策略，对 ***tree diff*** 进行算法优化；\n- React 通过***相同类生成相似树形结构，不同类生成不同树形结构***的策略，对 ***component diff*** 进行算法优化；\n- React 通过***设置唯一 key***的策略，对 ***element diff*** 进行算法优化；\n- 建议，在开发组件时，保持稳定的 DOM 结构会有助于性能的提升；\n- 建议，在开发过程中，尽量减少类似将最后一个节点移动到列表首部的操作，当节点数量过大或更新操作过于频繁时，在一定程度上会影响 React 的渲染性能。\n\n## 参考资料\n[A Survey on Tree Edit Distance and Related Problems](http://grfia.dlsi.ua.es/ml/algorithms/references/editsurvey_bille.pdf)\n[Reconciliation](http://facebook.github.io/react/docs/reconciliation.html)\n\n如果本文能够为你解决些许关于 React diff 算法的疑惑，请点个赞吧！","source":"_posts/source-code-react-diff.md","raw":"---\ntitle: React 源码剖析系列 － 不可思议的 react diff【转载】\ndate: 2020-04-03 12:38:00\ncategories: \n\t- 源码解析\n\t- React\ntags: \n\t- 源码解析\n---\n目前，前端领域中 React 势头正盛，使用者众多却少有能够深入剖析内部实现机制和原理。本系列文章希望通过剖析 React 源码，理解其内部的实现原理，知其然更要知其所以然。\n\nReact diff 作为 Virtual DOM 的加速器，其算法上的改进优化是 React 整个界面渲染的基础，以及性能提高的保障，同时也是 React 源码中最神秘、最不可思议的部分，本文从源码入手，深入剖析 React diff 的不可思议之处。\n\n阅读本文需要对 React 有一定的了解，如果你不知何为 React，请详读 [React 官方文档](http://facebook.github.io/react/docs/getting-started.html)。\n如果你对 React diff 存在些许疑惑，或者你对算法优化感兴趣，那么本文值得阅读和讨论。\n\n<!-- more -->\n# 前言\nReact 中最值得称道的部分莫过于 Virtual DOM 与 diff 的完美结合，特别是其高效的 diff 算法，让用户可以无需顾忌性能问题而”任性自由”的刷新页面，让开发者也可以无需关心 Virtual DOM 背后的运作原理，因为 React diff 会帮助我们计算出 Virtual DOM 中真正变化的部分，并只针对该部分进行实际 DOM 操作，而非重新渲染整个页面，从而保证了每次操作更新后页面的高效渲染，因此 Virtual DOM 与 diff 是保证 React 性能口碑的幕后推手。\n\n***行文至此，可能会有读者质疑：React 无非就是引入 diff 这一概念，且 diff 算法也并非其首创，何必吹嘘的如此天花乱坠呢？***\n\n其实，正是因为 diff 算法的普识度高，就更应该认可 React 针对 diff 算法优化所做的努力与贡献，更能体现 React 开发者们的魅力与智慧！\n\n## 传统 diff 算法\n计算一棵树形结构转换成另一棵树形结构的最少操作，是一个复杂且值得研究的问题。[传统 diff 算法](http://grfia.dlsi.ua.es/ml/algorithms/references/editsurvey_bille.pdf)通过循环递归对节点进行依次对比，效率低下，算法复杂度达到 O(n^3)，其中 n 是树中节点的总数。O(n^3) 到底有多可怕，这意味着如果要展示1000个节点，就要依次执行上十亿次的比较。这种指数型的性能消耗对于前端渲染场景来说代价太高了！现今的 CPU 每秒钟能执行大约30亿条指令，即便是最高效的实现，也不可能在一秒内计算出差异情况。\n\n如果 React 只是单纯的引入 diff 算法而没有任何的优化改进，那么其效率是远远无法满足前端渲染所要求的性能。\n\n因此，想要将 diff 思想引入 Virtual DOM，就需要设计一种稳定高效的 diff 算法，而 React 做到了！\n\n那么，React diff 到底是如何实现的呢？\n\n## 详解 React diff\n传统 diff 算法的复杂度为 O(n^3)，显然这是无法满足性能要求的。***React 通过制定大胆的策略，将 O(n^3) 复杂度的问题转换成 O(n) 复杂度的问题。***\n\n### diff 策略\n1. Web UI 中 DOM 节点跨层级的移动操作特别少，可以忽略不计。\n2. 拥有相同类的两个组件将会生成相似的树形结构，拥有不同类的两个组件将会生成不同的树形结构。\n3. 对于同一层级的一组子节点，它们可以通过唯一 id 进行区分。\n\n基于以上三个前提策略，React 分别对 tree diff、component diff 以及 element diff 进行算法优化，事实也证明这三个前提策略是合理且准确的，它保证了整体界面构建的性能。\n\n- tree diff\n- component diff\n- element diff\n\n> 本文中源码 [ReactMultiChild.js](https://github.com/facebook/react/blob/master/src/renderers/shared/reconciler/ReactMultiChild.js)\n\n### tree diff\n基于策略一，React 对树的算法进行了简洁明了的优化，即对树进行分层比较，两棵树只会对同一层次的节点进行比较。\n\n既然 DOM 节点跨层级的移动操作少到可以忽略不计，针对这一现象，React 通过 updateDepth 对 Virtual DOM 树进行层级控制，只会对相同颜色方框内的 DOM 节点进行比较，即同一个父节点下的所有子节点。当发现节点已经不存在，则该节点及其子节点会被完全删除掉，不会用于进一步的比较。这样只需要对树进行一次遍历，便能完成整个 DOM 树的比较。\n\n![https://pic1.zhimg.com/0c08dbb6b1e0745780de4d208ad51d34_r.jpg](https://pic1.zhimg.com/0c08dbb6b1e0745780de4d208ad51d34_r.jpg)\n\n``` js\nupdateChildren: function(nextNestedChildrenElements, transaction, context) {\n  updateDepth++;\n  var errorThrown = true;\n  try {\n    this._updateChildren(nextNestedChildrenElements, transaction, context);\n    errorThrown = false;\n  } finally {\n    updateDepth--;\n    if (!updateDepth) {\n      if (errorThrown) {\n        clearQueue();\n      } else {\n        processQueue();\n      }\n    }\n  }\n}\n```\n分析至此，***大部分人可能都存在这样的疑问：如果出现了 DOM 节点跨层级的移动操作，React diff 会有怎样的表现呢？***是的，对此我也好奇不已，不如试验一番。\n\n如下图，A 节点（包括其子节点）整个被移动到 D 节点下，由于 React 只会简单的考虑同层级节点的位置变换，而对于不同层级的节点，只有创建和删除操作。当根节点发现子节点中 A 消失了，就会直接销毁 A；当 D 发现多了一个子节点 A，则会创建新的 A（包括子节点）作为其子节点。此时，React diff 的执行情况：***create A -> create B -> create C -> delete A***。\n\n由此可发现，当出现节点跨层级移动时，并不会出现想象中的移动操作，而是以 A 为根节点的树被整个重新创建，这是一种影响 React 性能的操作，***因此 React 官方建议不要进行 DOM 节点跨层级的操作***。\n\n> 注意：在开发组件时，保持稳定的 DOM 结构会有助于性能的提升。例如，可以通过 CSS 隐藏或显示节点，而不是真的移除或添加 DOM 节点。\n\n![https://pic2.zhimg.com/d712a73769688afe1ef1a055391d99ed_r.jpg](https://pic2.zhimg.com/d712a73769688afe1ef1a055391d99ed_r.jpg)\n\n### component diff\nReact 是基于组件构建应用的，对于组件间的比较所采取的策略也是简洁高效。\n\n- 如果是同一类型的组件，按照原策略继续比较 virtual DOM tree。\n- 如果不是，则将该组件判断为 dirty component，从而替换整个组件下的所有子节点。\n- 对于同一类型的组件，有可能其 Virtual DOM 没有任何变化，如果能够确切的知道这点那可以节省大量的 diff 运算时间，因此 React 允许用户通过 shouldComponentUpdate() 来判断该组件是否需要进行 diff。\n\n如下图，当 component D 改变为 component G 时，即使这两个 component 结构相似，一旦 React 判断 D 和 G 是不同类型的组件，就不会比较二者的结构，而是直接删除 component D，重新创建 component G 以及其子节点。虽然当两个 component 是不同类型但结构相似时，React diff 会影响性能，但正如 React 官方博客所言：不同类型的 component 是很少存在相似 DOM tree 的机会，因此这种极端因素很难在实现开发过程中造成重大影响的。\n\n![https://pic1.zhimg.com/52654992aba15fc90e2dac8b2387d0c4_r.jpg](https://pic1.zhimg.com/52654992aba15fc90e2dac8b2387d0c4_r.jpg)\n\n### element diff\n\n当节点处于同一层级时，React diff 提供了三种节点操作，分别为：***INSERT_MARKUP（插入）、MOVE_EXISTING（移动）和 REMOVE_NODE（删除）***。\n\n- ***INSERT_MARKUP*** ，新的 component 类型不在老集合里， 即是全新的节点，需要对新节点执行插入操作。\n\n- ***MOVE_EXISTING*** ，在老集合有新 component 类型，且 element 是可更新的类型，generateComponentChildren 已调用 receiveComponent，这种情况下 prevChild=nextChild，就需要做移动操作，可以复用以前的 DOM 节点。\n\n- ***REMOVE_NODE*** ，老 component 类型，在新集合里也有，但对应的 element 不同则不能直接复用和更新，需要执行删除操作，或者老 component 不在新集合里的，也需要执行删除操作。\n\n``` js\nfunction enqueueInsertMarkup(parentInst, markup, toIndex) {\n  updateQueue.push({\n    parentInst: parentInst,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    content: null,\n    fromIndex: null,\n    toIndex: toIndex,\n  });\n}\n\nfunction enqueueMove(parentInst, fromIndex, toIndex) {\n  updateQueue.push({\n    parentInst: parentInst,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex,\n  });\n}\n\nfunction enqueueRemove(parentInst, fromIndex) {\n  updateQueue.push({\n    parentInst: parentInst,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: null,\n  });\n}\n```\n如下图，老集合中包含节点：A、B、C、D，更新后的新集合中包含节点：B、A、D、C，此时新老集合进行 diff 差异化对比，发现 B != A，则创建并插入 B 至新集合，删除老集合 A；以此类推，创建并插入 A、D 和 C，删除 B、C 和 D。\n\n![https://pic2.zhimg.com/7541670c089b84c59b84e9438e92a8e9_r.jpg](https://pic2.zhimg.com/7541670c089b84c59b84e9438e92a8e9_r.jpg)\n\nReact 发现这类操作繁琐冗余，因为这些都是相同的节点，但由于位置发生变化，导致需要进行繁杂低效的删除、创建操作，其实只要对这些节点进行位置移动即可。\n\n针对这一现象，React 提出优化策略：允许开发者对同一层级的同组子节点，添加唯一 key 进行区分，虽然只是小小的改动，性能上却发生了翻天覆地的变化！\n\n新老集合所包含的节点，如下图所示，新老集合进行 diff 差异化对比，通过 key 发现新老集合中的节点都是相同的节点，因此无需进行节点删除和创建，只需要将老集合中节点的位置进行移动，更新为新集合中节点的位置，此时 React 给出的 diff 结果为：B、D 不做任何操作，A、C 进行移动操作，即可。\n\n![https://pic4.zhimg.com/c0aa97d996de5e7f1069e97ca3accfeb_r.jpg](https://pic4.zhimg.com/c0aa97d996de5e7f1069e97ca3accfeb_r.jpg)\n\n那么，如此高效的 diff 到底是如何运作的呢？让我们通过源码进行详细分析。\n\n首先对新集合的节点进行循环遍历，for (name in nextChildren)，通过唯一 key 可以判断新老集合中是否存在相同的节点，if (prevChild === nextChild)，如果存在相同节点，则进行移动操作，但在移动前需要将当前节点在老集合中的位置与 lastIndex 进行比较，if (child._mountIndex < lastIndex)，则进行节点移动操作，否则不执行该操作。这是一种顺序优化手段，lastIndex 一直在更新，表示访问过的节点在老集合中最右的位置（即最大的位置），如果新集合中当前访问的节点比 lastIndex 大，说明当前访问节点在老集合中就比上一个节点位置靠后，则该节点不会影响其他节点的位置，因此不用添加到差异队列中，即不执行移动操作，只有当访问的节点比 lastIndex 小时，才需要进行移动操作。\n\n以上图为例，可以更为清晰直观的描述 diff 的差异对比过程：\n\n- 从新集合中取得 B，判断老集合中存在相同节点 B，通过对比节点位置判断是否进行移动操作，B 在老集合中的位置 B._mountIndex = 1，此时 lastIndex = 0，不满足 child._mountIndex < lastIndex 的条件，因此不对 B 进行移动操作；更新 lastIndex = Math.max(prevChild._mountIndex, lastIndex)，其中 prevChild._mountIndex 表示 B 在老集合中的位置，则 lastIndex ＝ 1，并将 B 的位置更新为新集合中的位置prevChild._mountIndex = nextIndex，此时新集合中 B._mountIndex = 0，nextIndex++ 进入下一个节点的判断。\n\n- 从新集合中取得 A，判断老集合中存在相同节点 A，通过对比节点位置判断是否进行移动操作，A 在老集合中的位置 A._mountIndex = 0，此时 lastIndex = 1，满足 child._mountIndex < lastIndex的条件，因此对 A 进行移动操作enqueueMove(this, child._mountIndex, toIndex)，其中 toIndex 其实就是 nextIndex，表示 A 需要移动到的位置；更新 lastIndex = Math.max(prevChild._mountIndex, lastIndex)，则 lastIndex ＝ 1，并将 A 的位置更新为新集合中的位置 prevChild._mountIndex = nextIndex，此时新集合中A._mountIndex = 1，nextIndex++ 进入下一个节点的判断。\n\n- 从新集合中取得 D，判断老集合中存在相同节点 D，通过对比节点位置判断是否进行移动操作，D 在老集合中的位置 D._mountIndex = 3，此时 lastIndex = 1，不满足 child._mountIndex < lastIndex的条件，因此不对 D 进行移动操作；更新 lastIndex = Math.max(prevChild._mountIndex, lastIndex)，则 lastIndex ＝ 3，并将 D 的位置更新为新集合中的位置 prevChild._mountIndex = nextIndex，此时新集合中D._mountIndex = 2，nextIndex++ 进入下一个节点的判断。\n\n- 从新集合中取得 C，判断老集合中存在相同节点 C，通过对比节点位置判断是否进行移动操作，C 在老集合中的位置 C._mountIndex = 2，此时 lastIndex = 3，满足 child._mountIndex < lastIndex 的条件，因此对 C 进行移动操作 enqueueMove(this, child._mountIndex, toIndex)；更新 lastIndex = Math.max(prevChild._mountIndex, lastIndex)，则 lastIndex ＝ 3，并将 C 的位置更新为新集合中的位置 prevChild._mountIndex = nextIndex，此时新集合中 C._mountIndex = 3，nextIndex++ 进入下一个节点的判断，由于 C 已经是最后一个节点，因此 diff 到此完成。\n\n以上主要分析新老集合中存在相同节点但位置不同时，对节点进行位置移动的情况，如果新集合中有新加入的节点且老集合存在需要删除的节点，那么 React diff 又是如何对比运作的呢？\n\n以下图为例：\n\n- 从新集合中取得 B，判断老集合中存在相同节点 B，由于 B 在老集合中的位置 B._mountIndex = 1，此时lastIndex = 0，因此不对 B 进行移动操作；更新 lastIndex ＝ 1，并将 B 的位置更新为新集合中的位置B._mountIndex = 0，nextIndex++进入下一个节点的判断。\n\n- 从新集合中取得 E，判断老集合中不存在相同节点 E，则创建新节点 E；更新 lastIndex ＝ 1，并将 E 的位置更新为新集合中的位置，nextIndex++进入下一个节点的判断。\n\n- 从新集合中取得 C，判断老集合中存在相同节点 C，由于 C 在老集合中的位置C._mountIndex = 2，lastIndex = 1，此时 C._mountIndex > lastIndex，因此不对 C 进行移动操作；更新 lastIndex ＝ 2，并将 C 的位置更新为新集合中的位置，nextIndex++ 进入下一个节点的判断。\n\n- 从新集合中取得 A，判断老集合中存在相同节点 A，由于 A 在老集合中的位置A._mountIndex = 0，lastIndex = 2，此时 A._mountIndex < lastIndex，因此对 A 进行移动操作；更新 lastIndex ＝ 2，并将 A 的位置更新为新集合中的位置，nextIndex++ 进入下一个节点的判断。\n\n- 当完成新集合中所有节点 diff 时，最后还需要对老集合进行循环遍历，判断是否存在新集合中没有但老集合中仍存在的节点，发现存在这样的节点 D，因此删除节点 D，到此 diff 全部完成。\n\n![https://pic1.zhimg.com/7b9beae0cf0a5bc8c2e82d00c43d1c90_r.jpg](https://pic1.zhimg.com/7b9beae0cf0a5bc8c2e82d00c43d1c90_r.jpg)\n\n``` js\n_updateChildren: function(nextNestedChildrenElements, transaction, context) {\n  var prevChildren = this._renderedChildren;\n  var nextChildren = this._reconcilerUpdateChildren(\n    prevChildren, nextNestedChildrenElements, transaction, context\n  );\n  if (!nextChildren && !prevChildren) {\n    return;\n  }\n  var name;\n  var lastIndex = 0;\n  var nextIndex = 0;\n  for (name in nextChildren) {\n    if (!nextChildren.hasOwnProperty(name)) {\n      continue;\n    }\n    var prevChild = prevChildren && prevChildren[name];\n    var nextChild = nextChildren[name];\n    if (prevChild === nextChild) {\n      // 移动节点\n      this.moveChild(prevChild, nextIndex, lastIndex);\n      lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n      prevChild._mountIndex = nextIndex;\n    } else {\n      if (prevChild) {\n        lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n        // 删除节点\n        this._unmountChild(prevChild);\n      }\n      // 初始化并创建节点\n      this._mountChildAtIndex(\n        nextChild, nextIndex, transaction, context\n      );\n    }\n    nextIndex++;\n  }\n  for (name in prevChildren) {\n    if (prevChildren.hasOwnProperty(name) &&\n        !(nextChildren && nextChildren.hasOwnProperty(name))) {\n      this._unmountChild(prevChildren[name]);\n    }\n  }\n  this._renderedChildren = nextChildren;\n},\n// 移动节点\nmoveChild: function(child, toIndex, lastIndex) {\n  if (child._mountIndex < lastIndex) {\n    this.prepareToManageChildren();\n    enqueueMove(this, child._mountIndex, toIndex);\n  }\n},\n// 创建节点\ncreateChild: function(child, mountImage) {\n  this.prepareToManageChildren();\n  enqueueInsertMarkup(this, mountImage, child._mountIndex);\n},\n// 删除节点\nremoveChild: function(child) {\n  this.prepareToManageChildren();\n  enqueueRemove(this, child._mountIndex);\n},\n\n_unmountChild: function(child) {\n  this.removeChild(child);\n  child._mountIndex = null;\n},\n\n_mountChildAtIndex: function(\n  child,\n  index,\n  transaction,\n  context) {\n  var mountImage = ReactReconciler.mountComponent(\n    child,\n    transaction,\n    this,\n    this._nativeContainerInfo,\n    context\n  );\n  child._mountIndex = index;\n  this.createChild(child, mountImage);\n},\n```\n\n当然，React diff 还是存在些许不足与待优化的地方，如下图所示，若新集合的节点更新为：D、A、B、C，与老集合对比只有 D 节点移动，而 A、B、C 仍然保持原有的顺序，理论上 diff 应该只需对 D 执行移动操作，然而由于 D 在老集合的位置是最大的，导致其他节点的 _mountIndex < lastIndex，造成 D 没有执行移动操作，而是 A、B、C 全部移动到 D 节点后面的现象。\n\n***在此，读者们可以讨论思考：如何优化上述问题？***\n> 建议：在开发过程中，尽量减少类似将最后一个节点移动到列表首部的操作，当节点数量过大或更新操作过于频繁时，在一定程度上会影响 React 的渲染性能。\n\n![https://pic2.zhimg.com/1b8dac5b9b3e4452dec8d5447d7717ad_r.jpg](https://pic2.zhimg.com/1b8dac5b9b3e4452dec8d5447d7717ad_r.jpg)\n\n## 总结\n- React 通过制定大胆的 diff 策略，将 O(n3) 复杂度的问题转换成 O(n) 复杂度的问题；\n- React 通过***分层求异***的策略，对 ***tree diff*** 进行算法优化；\n- React 通过***相同类生成相似树形结构，不同类生成不同树形结构***的策略，对 ***component diff*** 进行算法优化；\n- React 通过***设置唯一 key***的策略，对 ***element diff*** 进行算法优化；\n- 建议，在开发组件时，保持稳定的 DOM 结构会有助于性能的提升；\n- 建议，在开发过程中，尽量减少类似将最后一个节点移动到列表首部的操作，当节点数量过大或更新操作过于频繁时，在一定程度上会影响 React 的渲染性能。\n\n## 参考资料\n[A Survey on Tree Edit Distance and Related Problems](http://grfia.dlsi.ua.es/ml/algorithms/references/editsurvey_bille.pdf)\n[Reconciliation](http://facebook.github.io/react/docs/reconciliation.html)\n\n如果本文能够为你解决些许关于 React diff 算法的疑惑，请点个赞吧！","slug":"source-code-react-diff","published":1,"updated":"2020-04-03T03:14:45.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs5s0073ooa65ovkgt5b","content":"<p>目前，前端领域中 React 势头正盛，使用者众多却少有能够深入剖析内部实现机制和原理。本系列文章希望通过剖析 React 源码，理解其内部的实现原理，知其然更要知其所以然。</p>\n<p>React diff 作为 Virtual DOM 的加速器，其算法上的改进优化是 React 整个界面渲染的基础，以及性能提高的保障，同时也是 React 源码中最神秘、最不可思议的部分，本文从源码入手，深入剖析 React diff 的不可思议之处。</p>\n<p>阅读本文需要对 React 有一定的了解，如果你不知何为 React，请详读 <a href=\"http://facebook.github.io/react/docs/getting-started.html\" target=\"_blank\" rel=\"noopener\">React 官方文档</a>。<br>如果你对 React diff 存在些许疑惑，或者你对算法优化感兴趣，那么本文值得阅读和讨论。</p>\n<a id=\"more\"></a>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>React 中最值得称道的部分莫过于 Virtual DOM 与 diff 的完美结合，特别是其高效的 diff 算法，让用户可以无需顾忌性能问题而”任性自由”的刷新页面，让开发者也可以无需关心 Virtual DOM 背后的运作原理，因为 React diff 会帮助我们计算出 Virtual DOM 中真正变化的部分，并只针对该部分进行实际 DOM 操作，而非重新渲染整个页面，从而保证了每次操作更新后页面的高效渲染，因此 Virtual DOM 与 diff 是保证 React 性能口碑的幕后推手。</p>\n<p><strong><em>行文至此，可能会有读者质疑：React 无非就是引入 diff 这一概念，且 diff 算法也并非其首创，何必吹嘘的如此天花乱坠呢？</em></strong></p>\n<p>其实，正是因为 diff 算法的普识度高，就更应该认可 React 针对 diff 算法优化所做的努力与贡献，更能体现 React 开发者们的魅力与智慧！</p>\n<h2 id=\"传统-diff-算法\"><a href=\"#传统-diff-算法\" class=\"headerlink\" title=\"传统 diff 算法\"></a>传统 diff 算法</h2><p>计算一棵树形结构转换成另一棵树形结构的最少操作，是一个复杂且值得研究的问题。<a href=\"http://grfia.dlsi.ua.es/ml/algorithms/references/editsurvey_bille.pdf\" target=\"_blank\" rel=\"noopener\">传统 diff 算法</a>通过循环递归对节点进行依次对比，效率低下，算法复杂度达到 O(n^3)，其中 n 是树中节点的总数。O(n^3) 到底有多可怕，这意味着如果要展示1000个节点，就要依次执行上十亿次的比较。这种指数型的性能消耗对于前端渲染场景来说代价太高了！现今的 CPU 每秒钟能执行大约30亿条指令，即便是最高效的实现，也不可能在一秒内计算出差异情况。</p>\n<p>如果 React 只是单纯的引入 diff 算法而没有任何的优化改进，那么其效率是远远无法满足前端渲染所要求的性能。</p>\n<p>因此，想要将 diff 思想引入 Virtual DOM，就需要设计一种稳定高效的 diff 算法，而 React 做到了！</p>\n<p>那么，React diff 到底是如何实现的呢？</p>\n<h2 id=\"详解-React-diff\"><a href=\"#详解-React-diff\" class=\"headerlink\" title=\"详解 React diff\"></a>详解 React diff</h2><p>传统 diff 算法的复杂度为 O(n^3)，显然这是无法满足性能要求的。<strong><em>React 通过制定大胆的策略，将 O(n^3) 复杂度的问题转换成 O(n) 复杂度的问题。</em></strong></p>\n<h3 id=\"diff-策略\"><a href=\"#diff-策略\" class=\"headerlink\" title=\"diff 策略\"></a>diff 策略</h3><ol>\n<li>Web UI 中 DOM 节点跨层级的移动操作特别少，可以忽略不计。</li>\n<li>拥有相同类的两个组件将会生成相似的树形结构，拥有不同类的两个组件将会生成不同的树形结构。</li>\n<li>对于同一层级的一组子节点，它们可以通过唯一 id 进行区分。</li>\n</ol>\n<p>基于以上三个前提策略，React 分别对 tree diff、component diff 以及 element diff 进行算法优化，事实也证明这三个前提策略是合理且准确的，它保证了整体界面构建的性能。</p>\n<ul>\n<li>tree diff</li>\n<li>component diff</li>\n<li>element diff</li>\n</ul>\n<blockquote>\n<p>本文中源码 <a href=\"https://github.com/facebook/react/blob/master/src/renderers/shared/reconciler/ReactMultiChild.js\" target=\"_blank\" rel=\"noopener\">ReactMultiChild.js</a></p>\n</blockquote>\n<h3 id=\"tree-diff\"><a href=\"#tree-diff\" class=\"headerlink\" title=\"tree diff\"></a>tree diff</h3><p>基于策略一，React 对树的算法进行了简洁明了的优化，即对树进行分层比较，两棵树只会对同一层次的节点进行比较。</p>\n<p>既然 DOM 节点跨层级的移动操作少到可以忽略不计，针对这一现象，React 通过 updateDepth 对 Virtual DOM 树进行层级控制，只会对相同颜色方框内的 DOM 节点进行比较，即同一个父节点下的所有子节点。当发现节点已经不存在，则该节点及其子节点会被完全删除掉，不会用于进一步的比较。这样只需要对树进行一次遍历，便能完成整个 DOM 树的比较。</p>\n<p><img src=\"https://pic1.zhimg.com/0c08dbb6b1e0745780de4d208ad51d34_r.jpg\" alt=\"https://pic1.zhimg.com/0c08dbb6b1e0745780de4d208ad51d34_r.jpg\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updateChildren: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nextNestedChildrenElements, transaction, context</span>) </span>&#123;</span><br><span class=\"line\">  updateDepth++;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> errorThrown = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._updateChildren(nextNestedChildrenElements, transaction, context);</span><br><span class=\"line\">    errorThrown = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    updateDepth--;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!updateDepth) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (errorThrown) &#123;</span><br><span class=\"line\">        clearQueue();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        processQueue();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析至此，<strong><em>大部分人可能都存在这样的疑问：如果出现了 DOM 节点跨层级的移动操作，React diff 会有怎样的表现呢？</em></strong>是的，对此我也好奇不已，不如试验一番。</p>\n<p>如下图，A 节点（包括其子节点）整个被移动到 D 节点下，由于 React 只会简单的考虑同层级节点的位置变换，而对于不同层级的节点，只有创建和删除操作。当根节点发现子节点中 A 消失了，就会直接销毁 A；当 D 发现多了一个子节点 A，则会创建新的 A（包括子节点）作为其子节点。此时，React diff 的执行情况：<strong><em>create A -&gt; create B -&gt; create C -&gt; delete A</em></strong>。</p>\n<p>由此可发现，当出现节点跨层级移动时，并不会出现想象中的移动操作，而是以 A 为根节点的树被整个重新创建，这是一种影响 React 性能的操作，<strong><em>因此 React 官方建议不要进行 DOM 节点跨层级的操作</em></strong>。</p>\n<blockquote>\n<p>注意：在开发组件时，保持稳定的 DOM 结构会有助于性能的提升。例如，可以通过 CSS 隐藏或显示节点，而不是真的移除或添加 DOM 节点。</p>\n</blockquote>\n<p><img src=\"https://pic2.zhimg.com/d712a73769688afe1ef1a055391d99ed_r.jpg\" alt=\"https://pic2.zhimg.com/d712a73769688afe1ef1a055391d99ed_r.jpg\"></p>\n<h3 id=\"component-diff\"><a href=\"#component-diff\" class=\"headerlink\" title=\"component diff\"></a>component diff</h3><p>React 是基于组件构建应用的，对于组件间的比较所采取的策略也是简洁高效。</p>\n<ul>\n<li>如果是同一类型的组件，按照原策略继续比较 virtual DOM tree。</li>\n<li>如果不是，则将该组件判断为 dirty component，从而替换整个组件下的所有子节点。</li>\n<li>对于同一类型的组件，有可能其 Virtual DOM 没有任何变化，如果能够确切的知道这点那可以节省大量的 diff 运算时间，因此 React 允许用户通过 shouldComponentUpdate() 来判断该组件是否需要进行 diff。</li>\n</ul>\n<p>如下图，当 component D 改变为 component G 时，即使这两个 component 结构相似，一旦 React 判断 D 和 G 是不同类型的组件，就不会比较二者的结构，而是直接删除 component D，重新创建 component G 以及其子节点。虽然当两个 component 是不同类型但结构相似时，React diff 会影响性能，但正如 React 官方博客所言：不同类型的 component 是很少存在相似 DOM tree 的机会，因此这种极端因素很难在实现开发过程中造成重大影响的。</p>\n<p><img src=\"https://pic1.zhimg.com/52654992aba15fc90e2dac8b2387d0c4_r.jpg\" alt=\"https://pic1.zhimg.com/52654992aba15fc90e2dac8b2387d0c4_r.jpg\"></p>\n<h3 id=\"element-diff\"><a href=\"#element-diff\" class=\"headerlink\" title=\"element diff\"></a>element diff</h3><p>当节点处于同一层级时，React diff 提供了三种节点操作，分别为：<strong><em>INSERT_MARKUP（插入）、MOVE_EXISTING（移动）和 REMOVE_NODE（删除）</em></strong>。</p>\n<ul>\n<li><p><strong><em>INSERT_MARKUP</em></strong> ，新的 component 类型不在老集合里， 即是全新的节点，需要对新节点执行插入操作。</p>\n</li>\n<li><p><strong><em>MOVE_EXISTING</em></strong> ，在老集合有新 component 类型，且 element 是可更新的类型，generateComponentChildren 已调用 receiveComponent，这种情况下 prevChild=nextChild，就需要做移动操作，可以复用以前的 DOM 节点。</p>\n</li>\n<li><p><strong><em>REMOVE_NODE</em></strong> ，老 component 类型，在新集合里也有，但对应的 element 不同则不能直接复用和更新，需要执行删除操作，或者老 component 不在新集合里的，也需要执行删除操作。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enqueueInsertMarkup</span>(<span class=\"params\">parentInst, markup, toIndex</span>) </span>&#123;</span><br><span class=\"line\">  updateQueue.push(&#123;</span><br><span class=\"line\">    parentInst: parentInst,</span><br><span class=\"line\">    parentNode: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,</span><br><span class=\"line\">    markupIndex: markupQueue.push(markup) - <span class=\"number\">1</span>,</span><br><span class=\"line\">    content: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    fromIndex: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    toIndex: toIndex,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enqueueMove</span>(<span class=\"params\">parentInst, fromIndex, toIndex</span>) </span>&#123;</span><br><span class=\"line\">  updateQueue.push(&#123;</span><br><span class=\"line\">    parentInst: parentInst,</span><br><span class=\"line\">    parentNode: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,</span><br><span class=\"line\">    markupIndex: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    content: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    fromIndex: fromIndex,</span><br><span class=\"line\">    toIndex: toIndex,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enqueueRemove</span>(<span class=\"params\">parentInst, fromIndex</span>) </span>&#123;</span><br><span class=\"line\">  updateQueue.push(&#123;</span><br><span class=\"line\">    parentInst: parentInst,</span><br><span class=\"line\">    parentNode: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    type: ReactMultiChildUpdateTypes.REMOVE_NODE,</span><br><span class=\"line\">    markupIndex: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    content: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    fromIndex: fromIndex,</span><br><span class=\"line\">    toIndex: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如下图，老集合中包含节点：A、B、C、D，更新后的新集合中包含节点：B、A、D、C，此时新老集合进行 diff 差异化对比，发现 B != A，则创建并插入 B 至新集合，删除老集合 A；以此类推，创建并插入 A、D 和 C，删除 B、C 和 D。</p>\n<p><img src=\"https://pic2.zhimg.com/7541670c089b84c59b84e9438e92a8e9_r.jpg\" alt=\"https://pic2.zhimg.com/7541670c089b84c59b84e9438e92a8e9_r.jpg\"></p>\n<p>React 发现这类操作繁琐冗余，因为这些都是相同的节点，但由于位置发生变化，导致需要进行繁杂低效的删除、创建操作，其实只要对这些节点进行位置移动即可。</p>\n<p>针对这一现象，React 提出优化策略：允许开发者对同一层级的同组子节点，添加唯一 key 进行区分，虽然只是小小的改动，性能上却发生了翻天覆地的变化！</p>\n<p>新老集合所包含的节点，如下图所示，新老集合进行 diff 差异化对比，通过 key 发现新老集合中的节点都是相同的节点，因此无需进行节点删除和创建，只需要将老集合中节点的位置进行移动，更新为新集合中节点的位置，此时 React 给出的 diff 结果为：B、D 不做任何操作，A、C 进行移动操作，即可。</p>\n<p><img src=\"https://pic4.zhimg.com/c0aa97d996de5e7f1069e97ca3accfeb_r.jpg\" alt=\"https://pic4.zhimg.com/c0aa97d996de5e7f1069e97ca3accfeb_r.jpg\"></p>\n<p>那么，如此高效的 diff 到底是如何运作的呢？让我们通过源码进行详细分析。</p>\n<p>首先对新集合的节点进行循环遍历，for (name in nextChildren)，通过唯一 key 可以判断新老集合中是否存在相同的节点，if (prevChild === nextChild)，如果存在相同节点，则进行移动操作，但在移动前需要将当前节点在老集合中的位置与 lastIndex 进行比较，if (child._mountIndex &lt; lastIndex)，则进行节点移动操作，否则不执行该操作。这是一种顺序优化手段，lastIndex 一直在更新，表示访问过的节点在老集合中最右的位置（即最大的位置），如果新集合中当前访问的节点比 lastIndex 大，说明当前访问节点在老集合中就比上一个节点位置靠后，则该节点不会影响其他节点的位置，因此不用添加到差异队列中，即不执行移动操作，只有当访问的节点比 lastIndex 小时，才需要进行移动操作。</p>\n<p>以上图为例，可以更为清晰直观的描述 diff 的差异对比过程：</p>\n<ul>\n<li><p>从新集合中取得 B，判断老集合中存在相同节点 B，通过对比节点位置判断是否进行移动操作，B 在老集合中的位置 B._mountIndex = 1，此时 lastIndex = 0，不满足 child._mountIndex &lt; lastIndex 的条件，因此不对 B 进行移动操作；更新 lastIndex = Math.max(prevChild._mountIndex, lastIndex)，其中 prevChild._mountIndex 表示 B 在老集合中的位置，则 lastIndex ＝ 1，并将 B 的位置更新为新集合中的位置prevChild._mountIndex = nextIndex，此时新集合中 B._mountIndex = 0，nextIndex++ 进入下一个节点的判断。</p>\n</li>\n<li><p>从新集合中取得 A，判断老集合中存在相同节点 A，通过对比节点位置判断是否进行移动操作，A 在老集合中的位置 A._mountIndex = 0，此时 lastIndex = 1，满足 child._mountIndex &lt; lastIndex的条件，因此对 A 进行移动操作enqueueMove(this, child._mountIndex, toIndex)，其中 toIndex 其实就是 nextIndex，表示 A 需要移动到的位置；更新 lastIndex = Math.max(prevChild._mountIndex, lastIndex)，则 lastIndex ＝ 1，并将 A 的位置更新为新集合中的位置 prevChild._mountIndex = nextIndex，此时新集合中A._mountIndex = 1，nextIndex++ 进入下一个节点的判断。</p>\n</li>\n<li><p>从新集合中取得 D，判断老集合中存在相同节点 D，通过对比节点位置判断是否进行移动操作，D 在老集合中的位置 D._mountIndex = 3，此时 lastIndex = 1，不满足 child._mountIndex &lt; lastIndex的条件，因此不对 D 进行移动操作；更新 lastIndex = Math.max(prevChild._mountIndex, lastIndex)，则 lastIndex ＝ 3，并将 D 的位置更新为新集合中的位置 prevChild._mountIndex = nextIndex，此时新集合中D._mountIndex = 2，nextIndex++ 进入下一个节点的判断。</p>\n</li>\n<li><p>从新集合中取得 C，判断老集合中存在相同节点 C，通过对比节点位置判断是否进行移动操作，C 在老集合中的位置 C._mountIndex = 2，此时 lastIndex = 3，满足 child._mountIndex &lt; lastIndex 的条件，因此对 C 进行移动操作 enqueueMove(this, child._mountIndex, toIndex)；更新 lastIndex = Math.max(prevChild._mountIndex, lastIndex)，则 lastIndex ＝ 3，并将 C 的位置更新为新集合中的位置 prevChild._mountIndex = nextIndex，此时新集合中 C._mountIndex = 3，nextIndex++ 进入下一个节点的判断，由于 C 已经是最后一个节点，因此 diff 到此完成。</p>\n</li>\n</ul>\n<p>以上主要分析新老集合中存在相同节点但位置不同时，对节点进行位置移动的情况，如果新集合中有新加入的节点且老集合存在需要删除的节点，那么 React diff 又是如何对比运作的呢？</p>\n<p>以下图为例：</p>\n<ul>\n<li><p>从新集合中取得 B，判断老集合中存在相同节点 B，由于 B 在老集合中的位置 B._mountIndex = 1，此时lastIndex = 0，因此不对 B 进行移动操作；更新 lastIndex ＝ 1，并将 B 的位置更新为新集合中的位置B._mountIndex = 0，nextIndex++进入下一个节点的判断。</p>\n</li>\n<li><p>从新集合中取得 E，判断老集合中不存在相同节点 E，则创建新节点 E；更新 lastIndex ＝ 1，并将 E 的位置更新为新集合中的位置，nextIndex++进入下一个节点的判断。</p>\n</li>\n<li><p>从新集合中取得 C，判断老集合中存在相同节点 C，由于 C 在老集合中的位置C._mountIndex = 2，lastIndex = 1，此时 C._mountIndex &gt; lastIndex，因此不对 C 进行移动操作；更新 lastIndex ＝ 2，并将 C 的位置更新为新集合中的位置，nextIndex++ 进入下一个节点的判断。</p>\n</li>\n<li><p>从新集合中取得 A，判断老集合中存在相同节点 A，由于 A 在老集合中的位置A._mountIndex = 0，lastIndex = 2，此时 A._mountIndex &lt; lastIndex，因此对 A 进行移动操作；更新 lastIndex ＝ 2，并将 A 的位置更新为新集合中的位置，nextIndex++ 进入下一个节点的判断。</p>\n</li>\n<li><p>当完成新集合中所有节点 diff 时，最后还需要对老集合进行循环遍历，判断是否存在新集合中没有但老集合中仍存在的节点，发现存在这样的节点 D，因此删除节点 D，到此 diff 全部完成。</p>\n</li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/7b9beae0cf0a5bc8c2e82d00c43d1c90_r.jpg\" alt=\"https://pic1.zhimg.com/7b9beae0cf0a5bc8c2e82d00c43d1c90_r.jpg\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_updateChildren: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nextNestedChildrenElements, transaction, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> prevChildren = <span class=\"keyword\">this</span>._renderedChildren;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> nextChildren = <span class=\"keyword\">this</span>._reconcilerUpdateChildren(</span><br><span class=\"line\">    prevChildren, nextNestedChildrenElements, transaction, context</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nextChildren &amp;&amp; !prevChildren) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> lastIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> nextIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> nextChildren) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nextChildren.hasOwnProperty(name)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prevChild = prevChildren &amp;&amp; prevChildren[name];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextChild = nextChildren[name];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prevChild === nextChild) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 移动节点</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.moveChild(prevChild, nextIndex, lastIndex);</span><br><span class=\"line\">      lastIndex = <span class=\"built_in\">Math</span>.max(prevChild._mountIndex, lastIndex);</span><br><span class=\"line\">      prevChild._mountIndex = nextIndex;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (prevChild) &#123;</span><br><span class=\"line\">        lastIndex = <span class=\"built_in\">Math</span>.max(prevChild._mountIndex, lastIndex);</span><br><span class=\"line\">        <span class=\"comment\">// 删除节点</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._unmountChild(prevChild);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 初始化并创建节点</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>._mountChildAtIndex(</span><br><span class=\"line\">        nextChild, nextIndex, transaction, context</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nextIndex++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> prevChildren) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prevChildren.hasOwnProperty(name) &amp;&amp;</span><br><span class=\"line\">        !(nextChildren &amp;&amp; nextChildren.hasOwnProperty(name))) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._unmountChild(prevChildren[name]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._renderedChildren = nextChildren;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 移动节点</span></span><br><span class=\"line\">moveChild: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child, toIndex, lastIndex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (child._mountIndex &lt; lastIndex) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.prepareToManageChildren();</span><br><span class=\"line\">    enqueueMove(<span class=\"keyword\">this</span>, child._mountIndex, toIndex);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 创建节点</span></span><br><span class=\"line\">createChild: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child, mountImage</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.prepareToManageChildren();</span><br><span class=\"line\">  enqueueInsertMarkup(<span class=\"keyword\">this</span>, mountImage, child._mountIndex);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 删除节点</span></span><br><span class=\"line\">removeChild: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.prepareToManageChildren();</span><br><span class=\"line\">  enqueueRemove(<span class=\"keyword\">this</span>, child._mountIndex);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">_unmountChild: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.removeChild(child);</span><br><span class=\"line\">  child._mountIndex = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">_mountChildAtIndex: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  child,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  index,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  transaction,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> mountImage = ReactReconciler.mountComponent(</span><br><span class=\"line\">    child,</span><br><span class=\"line\">    transaction,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._nativeContainerInfo,</span><br><span class=\"line\">    context</span><br><span class=\"line\">  );</span><br><span class=\"line\">  child._mountIndex = index;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.createChild(child, mountImage);</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>当然，React diff 还是存在些许不足与待优化的地方，如下图所示，若新集合的节点更新为：D、A、B、C，与老集合对比只有 D 节点移动，而 A、B、C 仍然保持原有的顺序，理论上 diff 应该只需对 D 执行移动操作，然而由于 D 在老集合的位置是最大的，导致其他节点的 _mountIndex &lt; lastIndex，造成 D 没有执行移动操作，而是 A、B、C 全部移动到 D 节点后面的现象。</p>\n<p><strong><em>在此，读者们可以讨论思考：如何优化上述问题？</em></strong></p>\n<blockquote>\n<p>建议：在开发过程中，尽量减少类似将最后一个节点移动到列表首部的操作，当节点数量过大或更新操作过于频繁时，在一定程度上会影响 React 的渲染性能。</p>\n</blockquote>\n<p><img src=\"https://pic2.zhimg.com/1b8dac5b9b3e4452dec8d5447d7717ad_r.jpg\" alt=\"https://pic2.zhimg.com/1b8dac5b9b3e4452dec8d5447d7717ad_r.jpg\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>React 通过制定大胆的 diff 策略，将 O(n3) 复杂度的问题转换成 O(n) 复杂度的问题；</li>\n<li>React 通过<strong><em>分层求异</em></strong>的策略，对 <strong><em>tree diff</em></strong> 进行算法优化；</li>\n<li>React 通过<strong><em>相同类生成相似树形结构，不同类生成不同树形结构</em></strong>的策略，对 <strong><em>component diff</em></strong> 进行算法优化；</li>\n<li>React 通过<strong><em>设置唯一 key</em></strong>的策略，对 <strong><em>element diff</em></strong> 进行算法优化；</li>\n<li>建议，在开发组件时，保持稳定的 DOM 结构会有助于性能的提升；</li>\n<li>建议，在开发过程中，尽量减少类似将最后一个节点移动到列表首部的操作，当节点数量过大或更新操作过于频繁时，在一定程度上会影响 React 的渲染性能。</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://grfia.dlsi.ua.es/ml/algorithms/references/editsurvey_bille.pdf\" target=\"_blank\" rel=\"noopener\">A Survey on Tree Edit Distance and Related Problems</a><br><a href=\"http://facebook.github.io/react/docs/reconciliation.html\" target=\"_blank\" rel=\"noopener\">Reconciliation</a></p>\n<p>如果本文能够为你解决些许关于 React diff 算法的疑惑，请点个赞吧！</p>\n","site":{"data":{}},"excerpt":"<p>目前，前端领域中 React 势头正盛，使用者众多却少有能够深入剖析内部实现机制和原理。本系列文章希望通过剖析 React 源码，理解其内部的实现原理，知其然更要知其所以然。</p>\n<p>React diff 作为 Virtual DOM 的加速器，其算法上的改进优化是 React 整个界面渲染的基础，以及性能提高的保障，同时也是 React 源码中最神秘、最不可思议的部分，本文从源码入手，深入剖析 React diff 的不可思议之处。</p>\n<p>阅读本文需要对 React 有一定的了解，如果你不知何为 React，请详读 <a href=\"http://facebook.github.io/react/docs/getting-started.html\" target=\"_blank\" rel=\"noopener\">React 官方文档</a>。<br>如果你对 React diff 存在些许疑惑，或者你对算法优化感兴趣，那么本文值得阅读和讨论。</p>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>React 中最值得称道的部分莫过于 Virtual DOM 与 diff 的完美结合，特别是其高效的 diff 算法，让用户可以无需顾忌性能问题而”任性自由”的刷新页面，让开发者也可以无需关心 Virtual DOM 背后的运作原理，因为 React diff 会帮助我们计算出 Virtual DOM 中真正变化的部分，并只针对该部分进行实际 DOM 操作，而非重新渲染整个页面，从而保证了每次操作更新后页面的高效渲染，因此 Virtual DOM 与 diff 是保证 React 性能口碑的幕后推手。</p>\n<p><strong><em>行文至此，可能会有读者质疑：React 无非就是引入 diff 这一概念，且 diff 算法也并非其首创，何必吹嘘的如此天花乱坠呢？</em></strong></p>\n<p>其实，正是因为 diff 算法的普识度高，就更应该认可 React 针对 diff 算法优化所做的努力与贡献，更能体现 React 开发者们的魅力与智慧！</p>\n<h2 id=\"传统-diff-算法\"><a href=\"#传统-diff-算法\" class=\"headerlink\" title=\"传统 diff 算法\"></a>传统 diff 算法</h2><p>计算一棵树形结构转换成另一棵树形结构的最少操作，是一个复杂且值得研究的问题。<a href=\"http://grfia.dlsi.ua.es/ml/algorithms/references/editsurvey_bille.pdf\" target=\"_blank\" rel=\"noopener\">传统 diff 算法</a>通过循环递归对节点进行依次对比，效率低下，算法复杂度达到 O(n^3)，其中 n 是树中节点的总数。O(n^3) 到底有多可怕，这意味着如果要展示1000个节点，就要依次执行上十亿次的比较。这种指数型的性能消耗对于前端渲染场景来说代价太高了！现今的 CPU 每秒钟能执行大约30亿条指令，即便是最高效的实现，也不可能在一秒内计算出差异情况。</p>\n<p>如果 React 只是单纯的引入 diff 算法而没有任何的优化改进，那么其效率是远远无法满足前端渲染所要求的性能。</p>\n<p>因此，想要将 diff 思想引入 Virtual DOM，就需要设计一种稳定高效的 diff 算法，而 React 做到了！</p>\n<p>那么，React diff 到底是如何实现的呢？</p>\n<h2 id=\"详解-React-diff\"><a href=\"#详解-React-diff\" class=\"headerlink\" title=\"详解 React diff\"></a>详解 React diff</h2><p>传统 diff 算法的复杂度为 O(n^3)，显然这是无法满足性能要求的。<strong><em>React 通过制定大胆的策略，将 O(n^3) 复杂度的问题转换成 O(n) 复杂度的问题。</em></strong></p>\n<h3 id=\"diff-策略\"><a href=\"#diff-策略\" class=\"headerlink\" title=\"diff 策略\"></a>diff 策略</h3><ol>\n<li>Web UI 中 DOM 节点跨层级的移动操作特别少，可以忽略不计。</li>\n<li>拥有相同类的两个组件将会生成相似的树形结构，拥有不同类的两个组件将会生成不同的树形结构。</li>\n<li>对于同一层级的一组子节点，它们可以通过唯一 id 进行区分。</li>\n</ol>\n<p>基于以上三个前提策略，React 分别对 tree diff、component diff 以及 element diff 进行算法优化，事实也证明这三个前提策略是合理且准确的，它保证了整体界面构建的性能。</p>\n<ul>\n<li>tree diff</li>\n<li>component diff</li>\n<li>element diff</li>\n</ul>\n<blockquote>\n<p>本文中源码 <a href=\"https://github.com/facebook/react/blob/master/src/renderers/shared/reconciler/ReactMultiChild.js\" target=\"_blank\" rel=\"noopener\">ReactMultiChild.js</a></p>\n</blockquote>\n<h3 id=\"tree-diff\"><a href=\"#tree-diff\" class=\"headerlink\" title=\"tree diff\"></a>tree diff</h3><p>基于策略一，React 对树的算法进行了简洁明了的优化，即对树进行分层比较，两棵树只会对同一层次的节点进行比较。</p>\n<p>既然 DOM 节点跨层级的移动操作少到可以忽略不计，针对这一现象，React 通过 updateDepth 对 Virtual DOM 树进行层级控制，只会对相同颜色方框内的 DOM 节点进行比较，即同一个父节点下的所有子节点。当发现节点已经不存在，则该节点及其子节点会被完全删除掉，不会用于进一步的比较。这样只需要对树进行一次遍历，便能完成整个 DOM 树的比较。</p>\n<p><img src=\"https://pic1.zhimg.com/0c08dbb6b1e0745780de4d208ad51d34_r.jpg\" alt=\"https://pic1.zhimg.com/0c08dbb6b1e0745780de4d208ad51d34_r.jpg\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updateChildren: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nextNestedChildrenElements, transaction, context</span>) </span>&#123;</span><br><span class=\"line\">  updateDepth++;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> errorThrown = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._updateChildren(nextNestedChildrenElements, transaction, context);</span><br><span class=\"line\">    errorThrown = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    updateDepth--;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!updateDepth) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (errorThrown) &#123;</span><br><span class=\"line\">        clearQueue();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        processQueue();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析至此，<strong><em>大部分人可能都存在这样的疑问：如果出现了 DOM 节点跨层级的移动操作，React diff 会有怎样的表现呢？</em></strong>是的，对此我也好奇不已，不如试验一番。</p>\n<p>如下图，A 节点（包括其子节点）整个被移动到 D 节点下，由于 React 只会简单的考虑同层级节点的位置变换，而对于不同层级的节点，只有创建和删除操作。当根节点发现子节点中 A 消失了，就会直接销毁 A；当 D 发现多了一个子节点 A，则会创建新的 A（包括子节点）作为其子节点。此时，React diff 的执行情况：<strong><em>create A -&gt; create B -&gt; create C -&gt; delete A</em></strong>。</p>\n<p>由此可发现，当出现节点跨层级移动时，并不会出现想象中的移动操作，而是以 A 为根节点的树被整个重新创建，这是一种影响 React 性能的操作，<strong><em>因此 React 官方建议不要进行 DOM 节点跨层级的操作</em></strong>。</p>\n<blockquote>\n<p>注意：在开发组件时，保持稳定的 DOM 结构会有助于性能的提升。例如，可以通过 CSS 隐藏或显示节点，而不是真的移除或添加 DOM 节点。</p>\n</blockquote>\n<p><img src=\"https://pic2.zhimg.com/d712a73769688afe1ef1a055391d99ed_r.jpg\" alt=\"https://pic2.zhimg.com/d712a73769688afe1ef1a055391d99ed_r.jpg\"></p>\n<h3 id=\"component-diff\"><a href=\"#component-diff\" class=\"headerlink\" title=\"component diff\"></a>component diff</h3><p>React 是基于组件构建应用的，对于组件间的比较所采取的策略也是简洁高效。</p>\n<ul>\n<li>如果是同一类型的组件，按照原策略继续比较 virtual DOM tree。</li>\n<li>如果不是，则将该组件判断为 dirty component，从而替换整个组件下的所有子节点。</li>\n<li>对于同一类型的组件，有可能其 Virtual DOM 没有任何变化，如果能够确切的知道这点那可以节省大量的 diff 运算时间，因此 React 允许用户通过 shouldComponentUpdate() 来判断该组件是否需要进行 diff。</li>\n</ul>\n<p>如下图，当 component D 改变为 component G 时，即使这两个 component 结构相似，一旦 React 判断 D 和 G 是不同类型的组件，就不会比较二者的结构，而是直接删除 component D，重新创建 component G 以及其子节点。虽然当两个 component 是不同类型但结构相似时，React diff 会影响性能，但正如 React 官方博客所言：不同类型的 component 是很少存在相似 DOM tree 的机会，因此这种极端因素很难在实现开发过程中造成重大影响的。</p>\n<p><img src=\"https://pic1.zhimg.com/52654992aba15fc90e2dac8b2387d0c4_r.jpg\" alt=\"https://pic1.zhimg.com/52654992aba15fc90e2dac8b2387d0c4_r.jpg\"></p>\n<h3 id=\"element-diff\"><a href=\"#element-diff\" class=\"headerlink\" title=\"element diff\"></a>element diff</h3><p>当节点处于同一层级时，React diff 提供了三种节点操作，分别为：<strong><em>INSERT_MARKUP（插入）、MOVE_EXISTING（移动）和 REMOVE_NODE（删除）</em></strong>。</p>\n<ul>\n<li><p><strong><em>INSERT_MARKUP</em></strong> ，新的 component 类型不在老集合里， 即是全新的节点，需要对新节点执行插入操作。</p>\n</li>\n<li><p><strong><em>MOVE_EXISTING</em></strong> ，在老集合有新 component 类型，且 element 是可更新的类型，generateComponentChildren 已调用 receiveComponent，这种情况下 prevChild=nextChild，就需要做移动操作，可以复用以前的 DOM 节点。</p>\n</li>\n<li><p><strong><em>REMOVE_NODE</em></strong> ，老 component 类型，在新集合里也有，但对应的 element 不同则不能直接复用和更新，需要执行删除操作，或者老 component 不在新集合里的，也需要执行删除操作。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enqueueInsertMarkup</span>(<span class=\"params\">parentInst, markup, toIndex</span>) </span>&#123;</span><br><span class=\"line\">  updateQueue.push(&#123;</span><br><span class=\"line\">    parentInst: parentInst,</span><br><span class=\"line\">    parentNode: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,</span><br><span class=\"line\">    markupIndex: markupQueue.push(markup) - <span class=\"number\">1</span>,</span><br><span class=\"line\">    content: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    fromIndex: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    toIndex: toIndex,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enqueueMove</span>(<span class=\"params\">parentInst, fromIndex, toIndex</span>) </span>&#123;</span><br><span class=\"line\">  updateQueue.push(&#123;</span><br><span class=\"line\">    parentInst: parentInst,</span><br><span class=\"line\">    parentNode: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,</span><br><span class=\"line\">    markupIndex: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    content: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    fromIndex: fromIndex,</span><br><span class=\"line\">    toIndex: toIndex,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enqueueRemove</span>(<span class=\"params\">parentInst, fromIndex</span>) </span>&#123;</span><br><span class=\"line\">  updateQueue.push(&#123;</span><br><span class=\"line\">    parentInst: parentInst,</span><br><span class=\"line\">    parentNode: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    type: ReactMultiChildUpdateTypes.REMOVE_NODE,</span><br><span class=\"line\">    markupIndex: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    content: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    fromIndex: fromIndex,</span><br><span class=\"line\">    toIndex: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如下图，老集合中包含节点：A、B、C、D，更新后的新集合中包含节点：B、A、D、C，此时新老集合进行 diff 差异化对比，发现 B != A，则创建并插入 B 至新集合，删除老集合 A；以此类推，创建并插入 A、D 和 C，删除 B、C 和 D。</p>\n<p><img src=\"https://pic2.zhimg.com/7541670c089b84c59b84e9438e92a8e9_r.jpg\" alt=\"https://pic2.zhimg.com/7541670c089b84c59b84e9438e92a8e9_r.jpg\"></p>\n<p>React 发现这类操作繁琐冗余，因为这些都是相同的节点，但由于位置发生变化，导致需要进行繁杂低效的删除、创建操作，其实只要对这些节点进行位置移动即可。</p>\n<p>针对这一现象，React 提出优化策略：允许开发者对同一层级的同组子节点，添加唯一 key 进行区分，虽然只是小小的改动，性能上却发生了翻天覆地的变化！</p>\n<p>新老集合所包含的节点，如下图所示，新老集合进行 diff 差异化对比，通过 key 发现新老集合中的节点都是相同的节点，因此无需进行节点删除和创建，只需要将老集合中节点的位置进行移动，更新为新集合中节点的位置，此时 React 给出的 diff 结果为：B、D 不做任何操作，A、C 进行移动操作，即可。</p>\n<p><img src=\"https://pic4.zhimg.com/c0aa97d996de5e7f1069e97ca3accfeb_r.jpg\" alt=\"https://pic4.zhimg.com/c0aa97d996de5e7f1069e97ca3accfeb_r.jpg\"></p>\n<p>那么，如此高效的 diff 到底是如何运作的呢？让我们通过源码进行详细分析。</p>\n<p>首先对新集合的节点进行循环遍历，for (name in nextChildren)，通过唯一 key 可以判断新老集合中是否存在相同的节点，if (prevChild === nextChild)，如果存在相同节点，则进行移动操作，但在移动前需要将当前节点在老集合中的位置与 lastIndex 进行比较，if (child._mountIndex &lt; lastIndex)，则进行节点移动操作，否则不执行该操作。这是一种顺序优化手段，lastIndex 一直在更新，表示访问过的节点在老集合中最右的位置（即最大的位置），如果新集合中当前访问的节点比 lastIndex 大，说明当前访问节点在老集合中就比上一个节点位置靠后，则该节点不会影响其他节点的位置，因此不用添加到差异队列中，即不执行移动操作，只有当访问的节点比 lastIndex 小时，才需要进行移动操作。</p>\n<p>以上图为例，可以更为清晰直观的描述 diff 的差异对比过程：</p>\n<ul>\n<li><p>从新集合中取得 B，判断老集合中存在相同节点 B，通过对比节点位置判断是否进行移动操作，B 在老集合中的位置 B._mountIndex = 1，此时 lastIndex = 0，不满足 child._mountIndex &lt; lastIndex 的条件，因此不对 B 进行移动操作；更新 lastIndex = Math.max(prevChild._mountIndex, lastIndex)，其中 prevChild._mountIndex 表示 B 在老集合中的位置，则 lastIndex ＝ 1，并将 B 的位置更新为新集合中的位置prevChild._mountIndex = nextIndex，此时新集合中 B._mountIndex = 0，nextIndex++ 进入下一个节点的判断。</p>\n</li>\n<li><p>从新集合中取得 A，判断老集合中存在相同节点 A，通过对比节点位置判断是否进行移动操作，A 在老集合中的位置 A._mountIndex = 0，此时 lastIndex = 1，满足 child._mountIndex &lt; lastIndex的条件，因此对 A 进行移动操作enqueueMove(this, child._mountIndex, toIndex)，其中 toIndex 其实就是 nextIndex，表示 A 需要移动到的位置；更新 lastIndex = Math.max(prevChild._mountIndex, lastIndex)，则 lastIndex ＝ 1，并将 A 的位置更新为新集合中的位置 prevChild._mountIndex = nextIndex，此时新集合中A._mountIndex = 1，nextIndex++ 进入下一个节点的判断。</p>\n</li>\n<li><p>从新集合中取得 D，判断老集合中存在相同节点 D，通过对比节点位置判断是否进行移动操作，D 在老集合中的位置 D._mountIndex = 3，此时 lastIndex = 1，不满足 child._mountIndex &lt; lastIndex的条件，因此不对 D 进行移动操作；更新 lastIndex = Math.max(prevChild._mountIndex, lastIndex)，则 lastIndex ＝ 3，并将 D 的位置更新为新集合中的位置 prevChild._mountIndex = nextIndex，此时新集合中D._mountIndex = 2，nextIndex++ 进入下一个节点的判断。</p>\n</li>\n<li><p>从新集合中取得 C，判断老集合中存在相同节点 C，通过对比节点位置判断是否进行移动操作，C 在老集合中的位置 C._mountIndex = 2，此时 lastIndex = 3，满足 child._mountIndex &lt; lastIndex 的条件，因此对 C 进行移动操作 enqueueMove(this, child._mountIndex, toIndex)；更新 lastIndex = Math.max(prevChild._mountIndex, lastIndex)，则 lastIndex ＝ 3，并将 C 的位置更新为新集合中的位置 prevChild._mountIndex = nextIndex，此时新集合中 C._mountIndex = 3，nextIndex++ 进入下一个节点的判断，由于 C 已经是最后一个节点，因此 diff 到此完成。</p>\n</li>\n</ul>\n<p>以上主要分析新老集合中存在相同节点但位置不同时，对节点进行位置移动的情况，如果新集合中有新加入的节点且老集合存在需要删除的节点，那么 React diff 又是如何对比运作的呢？</p>\n<p>以下图为例：</p>\n<ul>\n<li><p>从新集合中取得 B，判断老集合中存在相同节点 B，由于 B 在老集合中的位置 B._mountIndex = 1，此时lastIndex = 0，因此不对 B 进行移动操作；更新 lastIndex ＝ 1，并将 B 的位置更新为新集合中的位置B._mountIndex = 0，nextIndex++进入下一个节点的判断。</p>\n</li>\n<li><p>从新集合中取得 E，判断老集合中不存在相同节点 E，则创建新节点 E；更新 lastIndex ＝ 1，并将 E 的位置更新为新集合中的位置，nextIndex++进入下一个节点的判断。</p>\n</li>\n<li><p>从新集合中取得 C，判断老集合中存在相同节点 C，由于 C 在老集合中的位置C._mountIndex = 2，lastIndex = 1，此时 C._mountIndex &gt; lastIndex，因此不对 C 进行移动操作；更新 lastIndex ＝ 2，并将 C 的位置更新为新集合中的位置，nextIndex++ 进入下一个节点的判断。</p>\n</li>\n<li><p>从新集合中取得 A，判断老集合中存在相同节点 A，由于 A 在老集合中的位置A._mountIndex = 0，lastIndex = 2，此时 A._mountIndex &lt; lastIndex，因此对 A 进行移动操作；更新 lastIndex ＝ 2，并将 A 的位置更新为新集合中的位置，nextIndex++ 进入下一个节点的判断。</p>\n</li>\n<li><p>当完成新集合中所有节点 diff 时，最后还需要对老集合进行循环遍历，判断是否存在新集合中没有但老集合中仍存在的节点，发现存在这样的节点 D，因此删除节点 D，到此 diff 全部完成。</p>\n</li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/7b9beae0cf0a5bc8c2e82d00c43d1c90_r.jpg\" alt=\"https://pic1.zhimg.com/7b9beae0cf0a5bc8c2e82d00c43d1c90_r.jpg\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_updateChildren: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nextNestedChildrenElements, transaction, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> prevChildren = <span class=\"keyword\">this</span>._renderedChildren;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> nextChildren = <span class=\"keyword\">this</span>._reconcilerUpdateChildren(</span><br><span class=\"line\">    prevChildren, nextNestedChildrenElements, transaction, context</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nextChildren &amp;&amp; !prevChildren) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> lastIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> nextIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> nextChildren) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nextChildren.hasOwnProperty(name)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prevChild = prevChildren &amp;&amp; prevChildren[name];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextChild = nextChildren[name];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prevChild === nextChild) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 移动节点</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.moveChild(prevChild, nextIndex, lastIndex);</span><br><span class=\"line\">      lastIndex = <span class=\"built_in\">Math</span>.max(prevChild._mountIndex, lastIndex);</span><br><span class=\"line\">      prevChild._mountIndex = nextIndex;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (prevChild) &#123;</span><br><span class=\"line\">        lastIndex = <span class=\"built_in\">Math</span>.max(prevChild._mountIndex, lastIndex);</span><br><span class=\"line\">        <span class=\"comment\">// 删除节点</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._unmountChild(prevChild);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 初始化并创建节点</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>._mountChildAtIndex(</span><br><span class=\"line\">        nextChild, nextIndex, transaction, context</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nextIndex++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> prevChildren) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prevChildren.hasOwnProperty(name) &amp;&amp;</span><br><span class=\"line\">        !(nextChildren &amp;&amp; nextChildren.hasOwnProperty(name))) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._unmountChild(prevChildren[name]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._renderedChildren = nextChildren;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 移动节点</span></span><br><span class=\"line\">moveChild: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child, toIndex, lastIndex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (child._mountIndex &lt; lastIndex) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.prepareToManageChildren();</span><br><span class=\"line\">    enqueueMove(<span class=\"keyword\">this</span>, child._mountIndex, toIndex);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 创建节点</span></span><br><span class=\"line\">createChild: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child, mountImage</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.prepareToManageChildren();</span><br><span class=\"line\">  enqueueInsertMarkup(<span class=\"keyword\">this</span>, mountImage, child._mountIndex);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 删除节点</span></span><br><span class=\"line\">removeChild: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.prepareToManageChildren();</span><br><span class=\"line\">  enqueueRemove(<span class=\"keyword\">this</span>, child._mountIndex);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">_unmountChild: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.removeChild(child);</span><br><span class=\"line\">  child._mountIndex = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">_mountChildAtIndex: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  child,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  index,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  transaction,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> mountImage = ReactReconciler.mountComponent(</span><br><span class=\"line\">    child,</span><br><span class=\"line\">    transaction,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._nativeContainerInfo,</span><br><span class=\"line\">    context</span><br><span class=\"line\">  );</span><br><span class=\"line\">  child._mountIndex = index;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.createChild(child, mountImage);</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>当然，React diff 还是存在些许不足与待优化的地方，如下图所示，若新集合的节点更新为：D、A、B、C，与老集合对比只有 D 节点移动，而 A、B、C 仍然保持原有的顺序，理论上 diff 应该只需对 D 执行移动操作，然而由于 D 在老集合的位置是最大的，导致其他节点的 _mountIndex &lt; lastIndex，造成 D 没有执行移动操作，而是 A、B、C 全部移动到 D 节点后面的现象。</p>\n<p><strong><em>在此，读者们可以讨论思考：如何优化上述问题？</em></strong></p>\n<blockquote>\n<p>建议：在开发过程中，尽量减少类似将最后一个节点移动到列表首部的操作，当节点数量过大或更新操作过于频繁时，在一定程度上会影响 React 的渲染性能。</p>\n</blockquote>\n<p><img src=\"https://pic2.zhimg.com/1b8dac5b9b3e4452dec8d5447d7717ad_r.jpg\" alt=\"https://pic2.zhimg.com/1b8dac5b9b3e4452dec8d5447d7717ad_r.jpg\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>React 通过制定大胆的 diff 策略，将 O(n3) 复杂度的问题转换成 O(n) 复杂度的问题；</li>\n<li>React 通过<strong><em>分层求异</em></strong>的策略，对 <strong><em>tree diff</em></strong> 进行算法优化；</li>\n<li>React 通过<strong><em>相同类生成相似树形结构，不同类生成不同树形结构</em></strong>的策略，对 <strong><em>component diff</em></strong> 进行算法优化；</li>\n<li>React 通过<strong><em>设置唯一 key</em></strong>的策略，对 <strong><em>element diff</em></strong> 进行算法优化；</li>\n<li>建议，在开发组件时，保持稳定的 DOM 结构会有助于性能的提升；</li>\n<li>建议，在开发过程中，尽量减少类似将最后一个节点移动到列表首部的操作，当节点数量过大或更新操作过于频繁时，在一定程度上会影响 React 的渲染性能。</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://grfia.dlsi.ua.es/ml/algorithms/references/editsurvey_bille.pdf\" target=\"_blank\" rel=\"noopener\">A Survey on Tree Edit Distance and Related Problems</a><br><a href=\"http://facebook.github.io/react/docs/reconciliation.html\" target=\"_blank\" rel=\"noopener\">Reconciliation</a></p>\n<p>如果本文能够为你解决些许关于 React diff 算法的疑惑，请点个赞吧！</p>"},{"title":"Could not proxy request XXX from localhost:8080 to localhost:8081","date":"2020-02-12T01:00:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n最近又有小伙伴问我，为啥我在写vue项目做代理转发时候报找不到代理服务的问题？\n我看了一下他发给我的配置截图，仅一眼我就发现了问题所在，因为这个坑我曾经也踩过，而且好多小伙伴也都踩过，***在写转发服务器的时候没写协议头***，也就是在 `target` 那没写 `http://` 这个部分，添加上以后重启一下，这个问题就解决了，小伙伴说就这个问题他解决了一天也没解决了，而且我说完了以后他想起来以前好像也遇到过这个问题，所以说在平时工作中遇到问题要常做笔记才对，所以为了避免以后自己也犯这种错误，暂且留一篇文章记录一下这个问题。","source":"_posts/vue-proxyTable-problem.md","raw":"---\ntitle: Could not proxy request XXX from localhost:8080 to localhost:8081\ndate: 2020-02-12 09:00:00\ncategories: \n\t- 前端问题\ntags:\n\t- 奇怪问题\n---\n> 作者：李旭光\n> 引用请标明出处\n\n最近又有小伙伴问我，为啥我在写vue项目做代理转发时候报找不到代理服务的问题？\n我看了一下他发给我的配置截图，仅一眼我就发现了问题所在，因为这个坑我曾经也踩过，而且好多小伙伴也都踩过，***在写转发服务器的时候没写协议头***，也就是在 `target` 那没写 `http://` 这个部分，添加上以后重启一下，这个问题就解决了，小伙伴说就这个问题他解决了一天也没解决了，而且我说完了以后他想起来以前好像也遇到过这个问题，所以说在平时工作中遇到问题要常做笔记才对，所以为了避免以后自己也犯这种错误，暂且留一篇文章记录一下这个问题。","slug":"vue-proxyTable-problem","published":1,"updated":"2020-02-19T14:17:15.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs5u0077ooa6ekb9a86p","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<p>最近又有小伙伴问我，为啥我在写vue项目做代理转发时候报找不到代理服务的问题？<br>我看了一下他发给我的配置截图，仅一眼我就发现了问题所在，因为这个坑我曾经也踩过，而且好多小伙伴也都踩过，<strong><em>在写转发服务器的时候没写协议头</em></strong>，也就是在 <code>target</code> 那没写 <code>http://</code> 这个部分，添加上以后重启一下，这个问题就解决了，小伙伴说就这个问题他解决了一天也没解决了，而且我说完了以后他想起来以前好像也遇到过这个问题，所以说在平时工作中遇到问题要常做笔记才对，所以为了避免以后自己也犯这种错误，暂且留一篇文章记录一下这个问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<p>最近又有小伙伴问我，为啥我在写vue项目做代理转发时候报找不到代理服务的问题？<br>我看了一下他发给我的配置截图，仅一眼我就发现了问题所在，因为这个坑我曾经也踩过，而且好多小伙伴也都踩过，<strong><em>在写转发服务器的时候没写协议头</em></strong>，也就是在 <code>target</code> 那没写 <code>http://</code> 这个部分，添加上以后重启一下，这个问题就解决了，小伙伴说就这个问题他解决了一天也没解决了，而且我说完了以后他想起来以前好像也遇到过这个问题，所以说在平时工作中遇到问题要常做笔记才对，所以为了避免以后自己也犯这种错误，暂且留一篇文章记录一下这个问题。</p>\n"},{"title":"Webpack 打包时利用 UglifyJsPlugin 去掉comments 、console 、和 debugger","date":"2020-04-07T03:22:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n最近在检查公司前端代码质量时，经常会在sonar检查到有漏洞级别的问题特别多，但是打开查看详情的时候发现又特别低级，都是些console没去掉啊，debugger没去掉啊，之前都是看到了就提醒一下，但是屡禁不止，那么有没有什么好的办法能够从源头上避免这个问题呢，果然这个问题不止我一个人遇到，网上还是有大神给出了解决方案，那就是 webpack 打包时可以引入 UglifyJsPlugin 来解决这个扰人的问题，而且屏蔽了人为的因素，使用感觉是极好的，所以，写个帖子把网上学来的资料整理一下。\n<!-- more -->\n\n## UglifyJsPlugin\n关于 UglifyJsPlugin 的介绍，在 webpack 的官网上有这样一段描述 \n> ℹ️ webpack =< v3.0.0 currently contains v0.4.6 of this plugin under webpack.optimize.UglifyJsPlugin as an alias. For usage of the latest version (v1.0.0), please follow the instructions below. Aliasing v1.0.0 as webpack.optimize.UglifyJsPlugin is scheduled for webpack v4.0.0\n\n简单来说就是在 webpack3.0 之前，引入了这个插件的0.4.6版本，并用 webpack.optimize.UglifyJsPlugin 作为它的别名， 在 webpack4.0 中引入了插件的 1.0.0 版本，用了同样的名称作为别名，用的时候请注意。\n\n那么“这个插件”是什么呢， webpack 的官网也告诉我们了，那就是![UglifyJS](https://github.com/mishoo/UglifyJS2/tree/harmony)\n\n> A JavaScript parser, mangler/compressor and beautifier toolkit for ES6+.\n\n翻译过来就是“一个用于ES6+的JavaScript解析器、（榨汁机：翻译的挺有意思）/压缩机和美化工具。”\n\n再简单点说 uglifyJsPlugin 用来对js文件进行压缩，减小js文件的大小。***其会拖慢webpack的编译速度，建议开发环境时关闭，生产环境再将其打开。***\n\n要用它的的话记得先安装\n``` js\nnpm i -D uglifyjs-webpack-plugin\n```\n安装完成就可以用了\n``` js\n// webpack.config.js\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin')\n\nmodule.exports = {\n  plugins: [\n    new UglifyJsPlugin()\n  ]\n}\n```\n\n当然他有很多的选项，具体想了解可以去 webpack 官网，或者去插件官网都可以找到![uglifyjs-webpack-plugin](https://www.webpackjs.com/plugins/uglifyjs-webpack-plugin/)\n\n当然知道你们懒的去看了，心里肯定也在说“直接给我个现成的配置他不香么？”，别急嘛，这就给你们\n``` js\nnew UglifyJsPlugin({\n    //删除注释\n    output:{\n        comments:false\n    },\n    //删除console 和 debugger  删除警告\n    compress:{\n        warnings:false,\n        drop_debugger:true,\n        drop_console:true\n    }\n})\n```\n当然版本间可能会有些差别，但是option是不变的，有调整的话各位自行调整一下。\n公司用的 vue-cli3 所以这里再给出个 vue-cli3 默认配置文件下的写法\n\n``` js\n// vue.config.js\n\nconfigureWebpack:{\n    optimization: {\n        minimizer: [\n            new UglifyJsPlugin({\n                uglifyOptions: {\n                    // 删除注释\n                    output:{\n                      comments:false\n                    },\n                    // 删除console debugger 删除警告\n                    compress: {\n                      warnings: false,\n                      drop_console: true,//console\n                      drop_debugger: false,\n                      pure_funcs: ['console.log']//移除console\n                    }\n                }\n            })\n        ]\n    }\n}\n```\n\n## 问题收集\n1. 运行出现报错 UglifyJs\n\n> Q: DefaultsError: warnings is not a supported option\n\n> A: 降低版本(使用 \"uglifyjs-webpack-plugin\": \"^1.1.1\")，打包正常，效果达到","source":"_posts/webpack-uglifyjsplugin.md","raw":"---\ntitle: Webpack 打包时利用 UglifyJsPlugin 去掉comments 、console 、和 debugger\ndate: 2020-04-07 11:22:00\ncategories: \n\t- webpack\ntags: \n\t- UglifyJsPlugin\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n最近在检查公司前端代码质量时，经常会在sonar检查到有漏洞级别的问题特别多，但是打开查看详情的时候发现又特别低级，都是些console没去掉啊，debugger没去掉啊，之前都是看到了就提醒一下，但是屡禁不止，那么有没有什么好的办法能够从源头上避免这个问题呢，果然这个问题不止我一个人遇到，网上还是有大神给出了解决方案，那就是 webpack 打包时可以引入 UglifyJsPlugin 来解决这个扰人的问题，而且屏蔽了人为的因素，使用感觉是极好的，所以，写个帖子把网上学来的资料整理一下。\n<!-- more -->\n\n## UglifyJsPlugin\n关于 UglifyJsPlugin 的介绍，在 webpack 的官网上有这样一段描述 \n> ℹ️ webpack =< v3.0.0 currently contains v0.4.6 of this plugin under webpack.optimize.UglifyJsPlugin as an alias. For usage of the latest version (v1.0.0), please follow the instructions below. Aliasing v1.0.0 as webpack.optimize.UglifyJsPlugin is scheduled for webpack v4.0.0\n\n简单来说就是在 webpack3.0 之前，引入了这个插件的0.4.6版本，并用 webpack.optimize.UglifyJsPlugin 作为它的别名， 在 webpack4.0 中引入了插件的 1.0.0 版本，用了同样的名称作为别名，用的时候请注意。\n\n那么“这个插件”是什么呢， webpack 的官网也告诉我们了，那就是![UglifyJS](https://github.com/mishoo/UglifyJS2/tree/harmony)\n\n> A JavaScript parser, mangler/compressor and beautifier toolkit for ES6+.\n\n翻译过来就是“一个用于ES6+的JavaScript解析器、（榨汁机：翻译的挺有意思）/压缩机和美化工具。”\n\n再简单点说 uglifyJsPlugin 用来对js文件进行压缩，减小js文件的大小。***其会拖慢webpack的编译速度，建议开发环境时关闭，生产环境再将其打开。***\n\n要用它的的话记得先安装\n``` js\nnpm i -D uglifyjs-webpack-plugin\n```\n安装完成就可以用了\n``` js\n// webpack.config.js\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin')\n\nmodule.exports = {\n  plugins: [\n    new UglifyJsPlugin()\n  ]\n}\n```\n\n当然他有很多的选项，具体想了解可以去 webpack 官网，或者去插件官网都可以找到![uglifyjs-webpack-plugin](https://www.webpackjs.com/plugins/uglifyjs-webpack-plugin/)\n\n当然知道你们懒的去看了，心里肯定也在说“直接给我个现成的配置他不香么？”，别急嘛，这就给你们\n``` js\nnew UglifyJsPlugin({\n    //删除注释\n    output:{\n        comments:false\n    },\n    //删除console 和 debugger  删除警告\n    compress:{\n        warnings:false,\n        drop_debugger:true,\n        drop_console:true\n    }\n})\n```\n当然版本间可能会有些差别，但是option是不变的，有调整的话各位自行调整一下。\n公司用的 vue-cli3 所以这里再给出个 vue-cli3 默认配置文件下的写法\n\n``` js\n// vue.config.js\n\nconfigureWebpack:{\n    optimization: {\n        minimizer: [\n            new UglifyJsPlugin({\n                uglifyOptions: {\n                    // 删除注释\n                    output:{\n                      comments:false\n                    },\n                    // 删除console debugger 删除警告\n                    compress: {\n                      warnings: false,\n                      drop_console: true,//console\n                      drop_debugger: false,\n                      pure_funcs: ['console.log']//移除console\n                    }\n                }\n            })\n        ]\n    }\n}\n```\n\n## 问题收集\n1. 运行出现报错 UglifyJs\n\n> Q: DefaultsError: warnings is not a supported option\n\n> A: 降低版本(使用 \"uglifyjs-webpack-plugin\": \"^1.1.1\")，打包正常，效果达到","slug":"webpack-uglifyjsplugin","published":1,"updated":"2020-04-15T15:02:02.852Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs5w007booa63m0q6ggg","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在检查公司前端代码质量时，经常会在sonar检查到有漏洞级别的问题特别多，但是打开查看详情的时候发现又特别低级，都是些console没去掉啊，debugger没去掉啊，之前都是看到了就提醒一下，但是屡禁不止，那么有没有什么好的办法能够从源头上避免这个问题呢，果然这个问题不止我一个人遇到，网上还是有大神给出了解决方案，那就是 webpack 打包时可以引入 UglifyJsPlugin 来解决这个扰人的问题，而且屏蔽了人为的因素，使用感觉是极好的，所以，写个帖子把网上学来的资料整理一下。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"UglifyJsPlugin\"><a href=\"#UglifyJsPlugin\" class=\"headerlink\" title=\"UglifyJsPlugin\"></a>UglifyJsPlugin</h2><p>关于 UglifyJsPlugin 的介绍，在 webpack 的官网上有这样一段描述 </p>\n<blockquote>\n<p>ℹ️ webpack =&lt; v3.0.0 currently contains v0.4.6 of this plugin under webpack.optimize.UglifyJsPlugin as an alias. For usage of the latest version (v1.0.0), please follow the instructions below. Aliasing v1.0.0 as webpack.optimize.UglifyJsPlugin is scheduled for webpack v4.0.0</p>\n</blockquote>\n<p>简单来说就是在 webpack3.0 之前，引入了这个插件的0.4.6版本，并用 webpack.optimize.UglifyJsPlugin 作为它的别名， 在 webpack4.0 中引入了插件的 1.0.0 版本，用了同样的名称作为别名，用的时候请注意。</p>\n<p>那么“这个插件”是什么呢， webpack 的官网也告诉我们了，那就是<img src=\"https://github.com/mishoo/UglifyJS2/tree/harmony\" alt=\"UglifyJS\"></p>\n<blockquote>\n<p>A JavaScript parser, mangler/compressor and beautifier toolkit for ES6+.</p>\n</blockquote>\n<p>翻译过来就是“一个用于ES6+的JavaScript解析器、（榨汁机：翻译的挺有意思）/压缩机和美化工具。”</p>\n<p>再简单点说 uglifyJsPlugin 用来对js文件进行压缩，减小js文件的大小。<strong><em>其会拖慢webpack的编译速度，建议开发环境时关闭，生产环境再将其打开。</em></strong></p>\n<p>要用它的的话记得先安装</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D uglifyjs-webpack-plugin</span><br></pre></td></tr></table></figure>\n<p>安装完成就可以用了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> UglifyJsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'uglifyjs-webpack-plugin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> UglifyJsPlugin()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然他有很多的选项，具体想了解可以去 webpack 官网，或者去插件官网都可以找到<img src=\"https://www.webpackjs.com/plugins/uglifyjs-webpack-plugin/\" alt=\"uglifyjs-webpack-plugin\"></p>\n<p>当然知道你们懒的去看了，心里肯定也在说“直接给我个现成的配置他不香么？”，别急嘛，这就给你们</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> UglifyJsPlugin(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//删除注释</span></span><br><span class=\"line\">    output:&#123;</span><br><span class=\"line\">        comments:<span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//删除console 和 debugger  删除警告</span></span><br><span class=\"line\">    compress:&#123;</span><br><span class=\"line\">        warnings:<span class=\"literal\">false</span>,</span><br><span class=\"line\">        drop_debugger:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        drop_console:<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>当然版本间可能会有些差别，但是option是不变的，有调整的话各位自行调整一下。<br>公司用的 vue-cli3 所以这里再给出个 vue-cli3 默认配置文件下的写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">configureWebpack:&#123;</span><br><span class=\"line\">    optimization: &#123;</span><br><span class=\"line\">        minimizer: [</span><br><span class=\"line\">            <span class=\"keyword\">new</span> UglifyJsPlugin(&#123;</span><br><span class=\"line\">                uglifyOptions: &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 删除注释</span></span><br><span class=\"line\">                    output:&#123;</span><br><span class=\"line\">                      comments:<span class=\"literal\">false</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"comment\">// 删除console debugger 删除警告</span></span><br><span class=\"line\">                    compress: &#123;</span><br><span class=\"line\">                      warnings: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                      drop_console: <span class=\"literal\">true</span>,<span class=\"comment\">//console</span></span><br><span class=\"line\">                      drop_debugger: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                      pure_funcs: [<span class=\"string\">'console.log'</span>]<span class=\"comment\">//移除console</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"问题收集\"><a href=\"#问题收集\" class=\"headerlink\" title=\"问题收集\"></a>问题收集</h2><ol>\n<li>运行出现报错 UglifyJs</li>\n</ol>\n<blockquote>\n<p>Q: DefaultsError: warnings is not a supported option</p>\n</blockquote>\n<blockquote>\n<p>A: 降低版本(使用 “uglifyjs-webpack-plugin”: “^1.1.1”)，打包正常，效果达到</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在检查公司前端代码质量时，经常会在sonar检查到有漏洞级别的问题特别多，但是打开查看详情的时候发现又特别低级，都是些console没去掉啊，debugger没去掉啊，之前都是看到了就提醒一下，但是屡禁不止，那么有没有什么好的办法能够从源头上避免这个问题呢，果然这个问题不止我一个人遇到，网上还是有大神给出了解决方案，那就是 webpack 打包时可以引入 UglifyJsPlugin 来解决这个扰人的问题，而且屏蔽了人为的因素，使用感觉是极好的，所以，写个帖子把网上学来的资料整理一下。</p>","more":"<h2 id=\"UglifyJsPlugin\"><a href=\"#UglifyJsPlugin\" class=\"headerlink\" title=\"UglifyJsPlugin\"></a>UglifyJsPlugin</h2><p>关于 UglifyJsPlugin 的介绍，在 webpack 的官网上有这样一段描述 </p>\n<blockquote>\n<p>ℹ️ webpack =&lt; v3.0.0 currently contains v0.4.6 of this plugin under webpack.optimize.UglifyJsPlugin as an alias. For usage of the latest version (v1.0.0), please follow the instructions below. Aliasing v1.0.0 as webpack.optimize.UglifyJsPlugin is scheduled for webpack v4.0.0</p>\n</blockquote>\n<p>简单来说就是在 webpack3.0 之前，引入了这个插件的0.4.6版本，并用 webpack.optimize.UglifyJsPlugin 作为它的别名， 在 webpack4.0 中引入了插件的 1.0.0 版本，用了同样的名称作为别名，用的时候请注意。</p>\n<p>那么“这个插件”是什么呢， webpack 的官网也告诉我们了，那就是<img src=\"https://github.com/mishoo/UglifyJS2/tree/harmony\" alt=\"UglifyJS\"></p>\n<blockquote>\n<p>A JavaScript parser, mangler/compressor and beautifier toolkit for ES6+.</p>\n</blockquote>\n<p>翻译过来就是“一个用于ES6+的JavaScript解析器、（榨汁机：翻译的挺有意思）/压缩机和美化工具。”</p>\n<p>再简单点说 uglifyJsPlugin 用来对js文件进行压缩，减小js文件的大小。<strong><em>其会拖慢webpack的编译速度，建议开发环境时关闭，生产环境再将其打开。</em></strong></p>\n<p>要用它的的话记得先安装</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D uglifyjs-webpack-plugin</span><br></pre></td></tr></table></figure>\n<p>安装完成就可以用了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> UglifyJsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'uglifyjs-webpack-plugin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> UglifyJsPlugin()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然他有很多的选项，具体想了解可以去 webpack 官网，或者去插件官网都可以找到<img src=\"https://www.webpackjs.com/plugins/uglifyjs-webpack-plugin/\" alt=\"uglifyjs-webpack-plugin\"></p>\n<p>当然知道你们懒的去看了，心里肯定也在说“直接给我个现成的配置他不香么？”，别急嘛，这就给你们</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> UglifyJsPlugin(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//删除注释</span></span><br><span class=\"line\">    output:&#123;</span><br><span class=\"line\">        comments:<span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//删除console 和 debugger  删除警告</span></span><br><span class=\"line\">    compress:&#123;</span><br><span class=\"line\">        warnings:<span class=\"literal\">false</span>,</span><br><span class=\"line\">        drop_debugger:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        drop_console:<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>当然版本间可能会有些差别，但是option是不变的，有调整的话各位自行调整一下。<br>公司用的 vue-cli3 所以这里再给出个 vue-cli3 默认配置文件下的写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">configureWebpack:&#123;</span><br><span class=\"line\">    optimization: &#123;</span><br><span class=\"line\">        minimizer: [</span><br><span class=\"line\">            <span class=\"keyword\">new</span> UglifyJsPlugin(&#123;</span><br><span class=\"line\">                uglifyOptions: &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 删除注释</span></span><br><span class=\"line\">                    output:&#123;</span><br><span class=\"line\">                      comments:<span class=\"literal\">false</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"comment\">// 删除console debugger 删除警告</span></span><br><span class=\"line\">                    compress: &#123;</span><br><span class=\"line\">                      warnings: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                      drop_console: <span class=\"literal\">true</span>,<span class=\"comment\">//console</span></span><br><span class=\"line\">                      drop_debugger: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                      pure_funcs: [<span class=\"string\">'console.log'</span>]<span class=\"comment\">//移除console</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"问题收集\"><a href=\"#问题收集\" class=\"headerlink\" title=\"问题收集\"></a>问题收集</h2><ol>\n<li>运行出现报错 UglifyJs</li>\n</ol>\n<blockquote>\n<p>Q: DefaultsError: warnings is not a supported option</p>\n</blockquote>\n<blockquote>\n<p>A: 降低版本(使用 “uglifyjs-webpack-plugin”: “^1.1.1”)，打包正常，效果达到</p>\n</blockquote>"},{"title":"《Web全栈工程师的自我修养》读书笔记","date":"2017-10-12T09:37:07.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n近日工作不是那么忙，所以有时间看看书，这本书之前就已经读过一遍，隔了一段时间已经有所忘记，所以再次拾起，重新回顾一下。.\n<!-- more -->\n\n## 什么是全栈\n“全栈”是个外来词，翻译自英文full-stack，此处的栈指的是为了完成项目而使用的一系列技术的合集，不是堆栈概念中的栈。\n\n“全端”工程师是指能够完成pc端、移动端等多终端设备适配的情况\n\n## 什么是全栈工程师\n> 全栈工程师是指一个能够处理数据库、服务器、系统工程、客户端等所有工作的的工程师，根据项目不同，可能是移动栈、Web栈，或者原生应用程序栈。\n\n简单来说全栈工程师就是一个人能搞定一个项目，全能大神一样的人物。\n\n## 一个Web产品典型的技术栈\n> 服务器+数据库+服务器端编程语言+前端编程语言\n\n> 全栈工程师技术的兴起有两个重要原因：技术的发展和PaaS（Platform as a Service，平台即服务）服务的平台越来越多。\n\n### 全栈框架———MEAN\n> MongoDB-Express-AngularJs-Node.js\n前后端采用一种编程语言JavaScript\n\n## 全栈工程师的要求\n### 一专多长\n在一个领域里至少达到高级的级别，然后再去向上游或者下游延伸\n### 关注商业目标\n公司聘请你是为了让你产生利润，并不关心你会什么，所以选择技术栈时要考虑的是如何降低公司的成本或者提高收入。\n### 关注用户体验\n产品的最终目标是满足客户的需求，所以作为全栈工程师必须要关注用户体验。\n\n---\n\n这是一些作为全栈工程师我整理出来的干货，这本书本身并不是一本技术性很强的书，倒像是一位过来人介绍些经验，适合刚入职场或者进入职场不久的人，在前端领域比较迷茫时看一看，书中介绍了作者读过的一些书，很有参考性，推荐大家阅读。","source":"_posts/web-quanzhan.md","raw":"---\ntitle: 《Web全栈工程师的自我修养》读书笔记\ndate: 2017-10-12 17:37:07\ncategories: \n\t- 读书笔记\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n近日工作不是那么忙，所以有时间看看书，这本书之前就已经读过一遍，隔了一段时间已经有所忘记，所以再次拾起，重新回顾一下。.\n<!-- more -->\n\n## 什么是全栈\n“全栈”是个外来词，翻译自英文full-stack，此处的栈指的是为了完成项目而使用的一系列技术的合集，不是堆栈概念中的栈。\n\n“全端”工程师是指能够完成pc端、移动端等多终端设备适配的情况\n\n## 什么是全栈工程师\n> 全栈工程师是指一个能够处理数据库、服务器、系统工程、客户端等所有工作的的工程师，根据项目不同，可能是移动栈、Web栈，或者原生应用程序栈。\n\n简单来说全栈工程师就是一个人能搞定一个项目，全能大神一样的人物。\n\n## 一个Web产品典型的技术栈\n> 服务器+数据库+服务器端编程语言+前端编程语言\n\n> 全栈工程师技术的兴起有两个重要原因：技术的发展和PaaS（Platform as a Service，平台即服务）服务的平台越来越多。\n\n### 全栈框架———MEAN\n> MongoDB-Express-AngularJs-Node.js\n前后端采用一种编程语言JavaScript\n\n## 全栈工程师的要求\n### 一专多长\n在一个领域里至少达到高级的级别，然后再去向上游或者下游延伸\n### 关注商业目标\n公司聘请你是为了让你产生利润，并不关心你会什么，所以选择技术栈时要考虑的是如何降低公司的成本或者提高收入。\n### 关注用户体验\n产品的最终目标是满足客户的需求，所以作为全栈工程师必须要关注用户体验。\n\n---\n\n这是一些作为全栈工程师我整理出来的干货，这本书本身并不是一本技术性很强的书，倒像是一位过来人介绍些经验，适合刚入职场或者进入职场不久的人，在前端领域比较迷茫时看一看，书中介绍了作者读过的一些书，很有参考性，推荐大家阅读。","slug":"web-quanzhan","published":1,"updated":"2020-04-02T03:20:12.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs5x007eooa63rbubmlt","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>近日工作不是那么忙，所以有时间看看书，这本书之前就已经读过一遍，隔了一段时间已经有所忘记，所以再次拾起，重新回顾一下。.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"什么是全栈\"><a href=\"#什么是全栈\" class=\"headerlink\" title=\"什么是全栈\"></a>什么是全栈</h2><p>“全栈”是个外来词，翻译自英文full-stack，此处的栈指的是为了完成项目而使用的一系列技术的合集，不是堆栈概念中的栈。</p>\n<p>“全端”工程师是指能够完成pc端、移动端等多终端设备适配的情况</p>\n<h2 id=\"什么是全栈工程师\"><a href=\"#什么是全栈工程师\" class=\"headerlink\" title=\"什么是全栈工程师\"></a>什么是全栈工程师</h2><blockquote>\n<p>全栈工程师是指一个能够处理数据库、服务器、系统工程、客户端等所有工作的的工程师，根据项目不同，可能是移动栈、Web栈，或者原生应用程序栈。</p>\n</blockquote>\n<p>简单来说全栈工程师就是一个人能搞定一个项目，全能大神一样的人物。</p>\n<h2 id=\"一个Web产品典型的技术栈\"><a href=\"#一个Web产品典型的技术栈\" class=\"headerlink\" title=\"一个Web产品典型的技术栈\"></a>一个Web产品典型的技术栈</h2><blockquote>\n<p>服务器+数据库+服务器端编程语言+前端编程语言</p>\n</blockquote>\n<blockquote>\n<p>全栈工程师技术的兴起有两个重要原因：技术的发展和PaaS（Platform as a Service，平台即服务）服务的平台越来越多。</p>\n</blockquote>\n<h3 id=\"全栈框架———MEAN\"><a href=\"#全栈框架———MEAN\" class=\"headerlink\" title=\"全栈框架———MEAN\"></a>全栈框架———MEAN</h3><blockquote>\n<p>MongoDB-Express-AngularJs-Node.js<br>前后端采用一种编程语言JavaScript</p>\n</blockquote>\n<h2 id=\"全栈工程师的要求\"><a href=\"#全栈工程师的要求\" class=\"headerlink\" title=\"全栈工程师的要求\"></a>全栈工程师的要求</h2><h3 id=\"一专多长\"><a href=\"#一专多长\" class=\"headerlink\" title=\"一专多长\"></a>一专多长</h3><p>在一个领域里至少达到高级的级别，然后再去向上游或者下游延伸</p>\n<h3 id=\"关注商业目标\"><a href=\"#关注商业目标\" class=\"headerlink\" title=\"关注商业目标\"></a>关注商业目标</h3><p>公司聘请你是为了让你产生利润，并不关心你会什么，所以选择技术栈时要考虑的是如何降低公司的成本或者提高收入。</p>\n<h3 id=\"关注用户体验\"><a href=\"#关注用户体验\" class=\"headerlink\" title=\"关注用户体验\"></a>关注用户体验</h3><p>产品的最终目标是满足客户的需求，所以作为全栈工程师必须要关注用户体验。</p>\n<hr>\n<p>这是一些作为全栈工程师我整理出来的干货，这本书本身并不是一本技术性很强的书，倒像是一位过来人介绍些经验，适合刚入职场或者进入职场不久的人，在前端领域比较迷茫时看一看，书中介绍了作者读过的一些书，很有参考性，推荐大家阅读。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>近日工作不是那么忙，所以有时间看看书，这本书之前就已经读过一遍，隔了一段时间已经有所忘记，所以再次拾起，重新回顾一下。.</p>","more":"<h2 id=\"什么是全栈\"><a href=\"#什么是全栈\" class=\"headerlink\" title=\"什么是全栈\"></a>什么是全栈</h2><p>“全栈”是个外来词，翻译自英文full-stack，此处的栈指的是为了完成项目而使用的一系列技术的合集，不是堆栈概念中的栈。</p>\n<p>“全端”工程师是指能够完成pc端、移动端等多终端设备适配的情况</p>\n<h2 id=\"什么是全栈工程师\"><a href=\"#什么是全栈工程师\" class=\"headerlink\" title=\"什么是全栈工程师\"></a>什么是全栈工程师</h2><blockquote>\n<p>全栈工程师是指一个能够处理数据库、服务器、系统工程、客户端等所有工作的的工程师，根据项目不同，可能是移动栈、Web栈，或者原生应用程序栈。</p>\n</blockquote>\n<p>简单来说全栈工程师就是一个人能搞定一个项目，全能大神一样的人物。</p>\n<h2 id=\"一个Web产品典型的技术栈\"><a href=\"#一个Web产品典型的技术栈\" class=\"headerlink\" title=\"一个Web产品典型的技术栈\"></a>一个Web产品典型的技术栈</h2><blockquote>\n<p>服务器+数据库+服务器端编程语言+前端编程语言</p>\n</blockquote>\n<blockquote>\n<p>全栈工程师技术的兴起有两个重要原因：技术的发展和PaaS（Platform as a Service，平台即服务）服务的平台越来越多。</p>\n</blockquote>\n<h3 id=\"全栈框架———MEAN\"><a href=\"#全栈框架———MEAN\" class=\"headerlink\" title=\"全栈框架———MEAN\"></a>全栈框架———MEAN</h3><blockquote>\n<p>MongoDB-Express-AngularJs-Node.js<br>前后端采用一种编程语言JavaScript</p>\n</blockquote>\n<h2 id=\"全栈工程师的要求\"><a href=\"#全栈工程师的要求\" class=\"headerlink\" title=\"全栈工程师的要求\"></a>全栈工程师的要求</h2><h3 id=\"一专多长\"><a href=\"#一专多长\" class=\"headerlink\" title=\"一专多长\"></a>一专多长</h3><p>在一个领域里至少达到高级的级别，然后再去向上游或者下游延伸</p>\n<h3 id=\"关注商业目标\"><a href=\"#关注商业目标\" class=\"headerlink\" title=\"关注商业目标\"></a>关注商业目标</h3><p>公司聘请你是为了让你产生利润，并不关心你会什么，所以选择技术栈时要考虑的是如何降低公司的成本或者提高收入。</p>\n<h3 id=\"关注用户体验\"><a href=\"#关注用户体验\" class=\"headerlink\" title=\"关注用户体验\"></a>关注用户体验</h3><p>产品的最终目标是满足客户的需求，所以作为全栈工程师必须要关注用户体验。</p>\n<hr>\n<p>这是一些作为全栈工程师我整理出来的干货，这本书本身并不是一本技术性很强的书，倒像是一位过来人介绍些经验，适合刚入职场或者进入职场不久的人，在前端领域比较迷茫时看一看，书中介绍了作者读过的一些书，很有参考性，推荐大家阅读。</p>"},{"title":"2020年了,再不会webpack敲得代码就不香了(近万字实战)【转载】","date":"2020-03-24T12:20:20.000Z","_content":"# 推荐序\n这里是我自己写的，看了这篇文章把我零碎的 `webpack` 知识系统的整理了一下，感觉受益匪浅，推荐更多小伙伴看一看这篇文章，好文共享，建议稍微对 `webpack` 了解服用更佳。\n[2020年了,再不会webpack敲得代码就不香了(近万字实战)](https://zhuanlan.zhihu.com/p/99959392)\n# 前言\n2020年即将到来,在众多前端的招聘要求里, `webpack` 、工程化这些字眼频率越来越高。日常开发者中，我们常常在用诸如 `vue-cli` 、 `create-react-app`  的脚手架来构建我们的项目。但是如果你想在团队脱颖而出(鹤立鸡群)、拿到更好的 `offer` (还房贷)，那么你必须去深刻的认识下我们经常打交道的 `webpack`\n## 入门(一起来用这些小例子让你熟悉webpack的配置)\n### webpack 是什么？\n`webpack` 是一个现代 `JavaScript` 应用程序的静态模块打包器，当 `webpack` 处理应用程序时，会递归构建一个依赖关系图，其中包含应用程序需要的每个模块，然后将这些模块打包成一个或多个 `bundle` 。\n### webpack 的核心概念\n- `entry`: 入口\n- `output`: 输出\n- `loader`: 模块转换器，用于把模块原内容按照需求转换成新内容\n- `plugins`: 扩展插件，在 `webpack` 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要做的事情\n\n### 初始化项目\n新建一个目录，初始化 `npm`\n``` js\nnpm init\n```\n\n`webpack` 是运行在 `node` 环境中的,我们需要安装以下两个 `npm` 包\n\n``` js\nnpm i -D webpack webpack-cli\n```\n\n> - `npm i -D` 为 `npm install --save-dev` 的缩写\n> - `npm i -S` 为 `npm install --save` 的缩写\n\n新建一个文件夹 `src` ,然后新建一个文件 `main.js` ,写一点代码测试一下\n``` js\nconsole.log('call me 老yuan')\n```\n\n配置 `package.json` 命令\n\n``` json\n\"script\":{\n  \"build\":\"webpack src/main.js\"\n}\n```\n执行\n``` js\nnpm run build\n```\n此时如果生成了一个 `dist` 文件夹，并且内部含有 `main.js` 说明已经打包成功了\n\n### 开始我们自己的配置\n上面一个简单的例子只是 `webpack` 自己默认的配置，下面我们要实现更加丰富的自定义配置\n\n新建一个 `build` 文件夹,里面新建一个 `webpack.config.js`\n``` js\n// webpack.config.js\n\nconst path = require('path');\nmodule.exports = {\n    mode:'development', // 开发模式\n    entry: path.resolve(__dirname,'../src/main.js'),    // 入口文件\n    output: {\n        filename: 'output.js',      // 打包后的文件名称\n        path: path.resolve(__dirname,'../dist')  // 打包后的目录\n    }\n}\n```\n更改我们的打包命令\n\n``` json\n\"script\":{\n  \"build\":\"webpack build/webpack.config.js\"\n}\n```\n执行 `npm run build`\n会发现生成了以下目录\n``` js\nproject\n  dist\n  build\n  src\n```\n其中 `dist` 文件夹中的 `main.js` 就是我们需要在浏览器中实际运行的文件\n当然实际运用中不会仅仅如此,下面让我们通过实际案例带你快速入手 `webpack`\n\n### 配置html模板\n`js` 文件打包好了,但是我们不可能每次在html文件中手动引入打包好的js\n\n> 这里可能有的朋友会认为我们打包 `js` 文件名称不是一直是固定的嘛( `output.js` )？这样每次就不用改动引入文件名称了呀？实际上我们日常开发中往往会这样配置:\n\n``` js\nmodule.exports = {\n    // 省略其他配置\n    output: {\n      filename: '[name].[hash:8].js',      // 打包后的文件名称\n      path: path.resolve(__dirname,'../dist')  // 打包后的目录\n    }\n}\n```\n\n这时候生成的 `dist` 目录文件如下\n\n``` js\ndist/\n  app.fsafasf.js\n```\n为了缓存，你会发现打包好的 `js` 文件的名称每次都不一样。 `webpack` 打包出来的js文件我们需要引入到 `html` 中，但是每次我们都手动修改 `js` 文件名显得很麻烦，因此我们需要一个插件来帮我们完成这件事情，那就是 `html-webpack-plugin`\n``` js\nnpm i -D html-webpack-plugin\n```\n新建一个 `build` 同级的文件夹 `public` ,里面新建一个 `index.html`\n具体配置文件如下\n\n``` js\n// webpack.config.js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin') // **此插件用来解决html模板引入js文件\nmodule.exports = {\n    mode:'development', // 开发模式\n    entry: path.resolve(__dirname,'../src/main.js'),    // 入口文件\n    output: {\n      filename: '[name].[hash:8].js',      // 打包后的文件名称\n      path: path.resolve(__dirname,'../dist')  // 打包后的目录\n    },\n    plugins:[\n      new HtmlWebpackPlugin({\n        template:path.resolve(__dirname,'../public/index.html')\n      })\n    ]\n}\n```\n可以发现打包生成的js文件已经被自动引入 `html` 文件中\n\n#### 多入口文件如何开发\n> 生成多个 `html-webpack-plugin` 实例来解决这个问题\n``` js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nmodule.exports = {\n    mode:'development', // 开发模式\n    entry: {\n      main:path.resolve(__dirname,'../src/main.js'),\n      header:path.resolve(__dirname,'../src/header.js')\n    }, \n    output: {\n      filename: '[name].[hash:8].js',      // 打包后的文件名称\n      path: path.resolve(__dirname,'../dist')  // 打包后的目录\n    },\n    plugins:[\n      new HtmlWebpackPlugin({\n        template:path.resolve(__dirname,'../public/index.html'),\n        filename:'index.html',\n        chunks:['main'] // 与入口文件对应的模块名\n      }),\n      new HtmlWebpackPlugin({\n        template:path.resolve(__dirname,'../public/header.html'),\n        filename:'header.html',\n        chunks:['header'] // 与入口文件对应的模块名\n      }),\n    ]\n}\n```\n\n#### clean-webpack-plugin\n> 每次执行 `npm run build` 会发现 `dist` 文件夹里会残留上次打包的文件，这里我们推荐一个 `plugin` 来帮我们在打包输出前清空文件夹 `clean-webpack-plugin`\n``` js\nconst {CleanWebpackPlugin} = require('clean-webpack-plugin')\nmodule.exports = {\n    // ...省略其他配置\n    plugins:[new CleanWebpackPlugin()]\n}\n```\n##### 希望dist目录下某个文件夹不被清空\n不过呢，有些时候，我们并不希望整个 dist 目录都被清空，比如，我们不希望，每次打包的时候，都删除 `dll` 目录，以及 `dll` 目录下的文件或子目录，该怎么办呢？\n\n`clean-webpack-plugin` 为我们提供了参数 `cleanOnceBeforeBuildPatterns` 。\n``` js\n//webpack.config.js\nmodule.exports = {\n    //...\n    plugins: [\n        new CleanWebpackPlugin({\n            cleanOnceBeforeBuildPatterns:['**/*', '!dll', '!dll/**'] //不删除dll目录下的文件\n        })\n    ]\n}\n```\n\n### 引用CSS\n我们的入口文件是 `js` ，所以我们在入口 `js` 中引入我们的 `css` 文件\n``` js\nimport 'asset/style.css'\n```\n同时我们也需要一些 `loader` 来解析我们的 `css` 文件\n\n``` js\nnpm i -D style-loader css-loader\n```\n如果我们使用 `less` 来构建样式，则需要多安装两个\n``` js\nnpm i -D less less-loader\n```\n配置文件如下\n\n``` js\n// webpack.config.js\nmodule.exports = {\n    // ...省略其他配置\n    module:{\n      rules:[\n        {\n          test:/\\.css$/,\n          use:['style-loader','css-loader'] // 从右向左解析原则\n        },\n        {\n          test:/\\.less$/,\n          use:['style-loader','css-loader','less-loader'] // 从右向左解析原则\n        }\n      ]\n    }\n}\n```\n\n我们简单说一下上面的配置：\n- `style-loader` 动态创建 `style` 标签，将 `css` 插入到 `head` 中.\n- `css-loader` 负责处理 `@import` 等语句。\n- `postcss-loader` 和 `autoprefixer` ，自动生成浏览器兼容性前缀 —— 2020了，应该没人去自己徒手去写浏览器前缀了吧\n- `less-loader` 负责处理编译 `.less` 文件,将其转为 `css`\n\n> 注意：  \n`loader` 的执行顺序是***从右向左***执行的，也就是后面的 `loader` 先执行，上面 `loader` 的执行顺序为: `less-loader` ---> `postcss-loader` ---> `css-loader` ---> `style-loader`\n当然，`loader` 其实还有一个参数，可以修改优先级，`enforce` 参数，其值可以为: `pre`(优先执行) 或 `post` (滞后执行)。\n现在，我们已经可以处理 `.less` 文件啦，`.css` 文件只需要修改匹配规则，删除 `less-loader` 即可。\n\n#### 为css添加浏览器前缀\n``` js\nnpm i -D postcss-loader autoprefixer\n\n```\n配置如下\n\n``` js\n// webpack.config.js\nmodule.exports = {\n    module:{\n        rules:[\n            test/\\.less$/,\n            use:['style-loader','css-loader','postcss-loader','less-loader'] // 从右向左解析原则\n        ]\n    }\n}\n```\n接下来，我们还需要引入 `autoprefixer` 使其生效,这里有两种方式\n\n##### 在项目根目录下创建一个postcss.config.js文件，配置如下：\n``` js\nmodule.exports = {\n    plugins: [require('autoprefixer')]  // 引用该插件即可了\n}\n```\n##### 直接在webpack.config.js里配置\n``` js\n// webpack.config.js\nmodule.exports = {\n    //...省略其他配置\n    module:{\n        rules:[{\n            test:/\\.less$/,\n            use:['style-loader','css-loader',{\n                loader:'postcss-loader',\n                options:{\n                    plugins:[require('autoprefixer')]\n                }\n            },'less-loader'] // 从右向左解析原则\n        }]\n    }\n}\n``` \n这时候我们发现 `css` 通过 `style` 标签的方式添加到了 `html` 文件中，但是如果样式文件很多，全部添加到 `html` 中，难免显得混乱。这时候我们想用把 `css` 拆分出来用外链的形式引入 `css` 文件怎么做呢？这时候我们就需要借助插件来帮助我们\n#### 拆分css\n``` js\nnpm i -D mini-css-extract-plugin\n```\n> `webpack 4.0` 以前，我们通过 `extract-text-webpack-plugin` 插件，把 `css` 样式从 `js` 文件中提取到单独的 `css` 文件中。 `webpack4.0` 以后，官方推荐使用 `mini-css-extract-plugin` 插件来打包 `css` 文件\n\n配置文件如下\n\n``` js\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\nmodule.exports = {\n  //...省略其他配置\n  module: {\n    rules: [\n      {\n        test: /\\.less$/,\n        use: [\n           MiniCssExtractPlugin.loader,\n          'css-loader',\n          'less-loader'\n        ],\n      }\n    ]\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n        filename: \"[name].[hash].css\",\n        chunkFilename: \"[id].css\",\n    })\n  ]\n}\n```\n#### 拆分多个css\n> 这里需要说的细一点,上面我们所用到的 `mini-css-extract-plugin` 将所有的 `css` 样式合并为一个 `css` 文件。如果你想拆分为一一对应的多个 `css` 文件,我们需要使用到 `extract-text-webpack-plugin` ，而目前 `mini-css-extract-plugin` 还不支持此功能。我们需要安装 `@next` 版本的 `extract-text-webpack-plugin`\n``` js\nnpm i -D extract-text-webpack-plugin@next\n// webpack.config.js\n\nconst path = require('path');\nconst ExtractTextWebpackPlugin = require('extract-text-webpack-plugin')\nlet indexLess = new ExtractTextWebpackPlugin('index.less');\nlet indexCss = new ExtractTextWebpackPlugin('index.css');\nmodule.exports = {\n    module:{\n      rules:[\n        {\n          test:/\\.css$/,\n          use: indexCss.extract({\n            use: ['css-loader']\n          })\n        },\n        {\n          test:/\\.less$/,\n          use: indexLess.extract({\n            use: ['css-loader','less-loader']\n          })\n        }\n      ]\n    },\n    plugins:[\n      indexLess,\n      indexCss\n    ]\n}\n```\n### 打包 图片、字体、媒体、等文件\n`file-loader` 就是将文件在进行一些处理后（主要是处理文件名和路径、解析文件 `url` ），并将文件移动到输出的目录中\n`url-loader` 一般与 `file-loader` 搭配使用，功能与 `file-loader` 类似，如果文件小于限制的大小。则会返回 `base64` 编码，否则使用 `file-loader` 将文件移动到输出的目录中\n\n``` js\n// webpack.config.js\nmodule.exports = {\n  // 省略其它配置 ...\n  module: {\n    rules: [\n      // ...\n      {\n        test: /\\.(jpe?g|png|gif)$/i, //图片文件\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              limit: 10240,\n              fallback: {\n                loader: 'file-loader',\n                options: {\n                    name: 'img/[name].[hash:8].[ext]'\n                }\n              }\n            }\n          }\n        ]\n      },\n      {\n        test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/, //媒体文件\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              limit: 10240,\n              fallback: {\n                loader: 'file-loader',\n                options: {\n                  name: 'media/[name].[hash:8].[ext]'\n                }\n              }\n            }\n          }\n        ]\n      },\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/i, // 字体\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              limit: 10240,\n              fallback: {\n                loader: 'file-loader',\n                options: {\n                  name: 'fonts/[name].[hash:8].[ext]'\n                }\n              }\n            }\n          }\n        ]\n      },\n    ]\n  }\n}\n```\n### 用babel转义js文件\n为了使我们的 `js` 代码兼容更多的环境我们需要安装依赖\n``` js\nnpm i babel-loader @babel/preset-env @babel/core\n\n```\n> 注意\n`babel-loader` 与 `babel-core` 的版本对应关系\n>\n- `babel-loader 8.x` 对应 `babel-core 7.x`\n- `babel-loader 7.x` 对应 `babel-core 6.x`\n\n配置如下\n``` js\n// webpack.config.js\nmodule.exports = {\n    // 省略其它配置 ...\n    module:{\n        rules:[\n          {\n            test:/\\.js$/,\n            use:{\n              loader:'babel-loader',\n              options:{\n                presets:['@babel/preset-env']\n              }\n            },\n            exclude:/node_modules/\n          },\n       ]\n    }\n}\n```\n上面的 `babel-loader` 只会将 `ES6/7/8` 语法转换为 `ES5` 语法，但是对新 `api` 并不会转换 例如( `promise` 、 `Generator` 、 `Set` 、 `Maps` 、 `Proxy` 等)\n此时我们需要借助 `babel-polyfill` 来帮助我们转换\n\n``` js\nnpm i @babel/polyfill\n// webpack.config.js\nconst path = require('path')\nmodule.exports = {\n    entry: [\"@babel/polyfill,path.resolve(__dirname,'../src/index.js')\"],    // 入口文件\n}\n```\n> 手动把上面的 `demo` 敲一遍对阅读下面的文章更有益，建议入门的同学敲三遍以上\n\n上面的实践是我们对 `webpack` 的功能有了一个初步的了解，但是要想熟练应用于开发中，我们需要一个系统的实战。让我们一起摆脱脚手架尝试自己搭建一个 `vue` 开发环境\n\n## 搭建vue开发环境\n上面的小例子已经帮助而我们实现了打包 `css` 、图片、 `js` 、 `html` 等文件。\n但是我们还需要以下几种配置\n### 解析.vue文件\n``` js\nnpm i -D vue-loader vue-template-compiler vue-style-loader\nnpm i -S vue\n```\n- `vue-loader` 用于解析 `.vue` 文件\n- `vue-template-compiler` 用于编译模板\n\n配置如下\n\n``` js\nconst vueLoaderPlugin = require('vue-loader/lib/plugin')\nmodule.exports = {\n    module:{\n        rules:[{\n            test:/\\.vue$/,\n            use:['vue-loader']\n        },]\n     },\n    resolve:{\n        alias:{\n          'vue$':'vue/dist/vue.runtime.esm.js',\n          ' @':path.resolve(__dirname,'../src')\n        },\n        extensions:['*','.js','.json','.vue']\n   },\n   plugins:[\n        new vueLoaderPlugin()\n   ]\n}\n```\n### 配置webpack-dev-server进行热更新\n``` js\nnpm i -D webpack-dev-server\n```\n配置如下\n\n``` js\nconst Webpack = require('webpack')\nmodule.exports = {\n  // ...省略其他配置\n  devServer:{\n    port:3000,\n    hot:true,\n    contentBase:'../dist'\n  },\n  plugins:[\n    new Webpack.HotModuleReplacementPlugin()\n  ]\n}\n```\n完整配置如下\n``` js\n// webpack.config.js\nconst path = require('path');\nconst {CleanWebpackPlugin} = require('clean-webpack-plugin')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\nconst ExtractTextWebpackPlugin = require('extract-text-webpack-plugin')\nconst vueLoaderPlugin = require('vue-loader/lib/plugin')\nconst Webpack = require('webpack')\nmodule.exports = {\n    mode:'development', // 开发模式\n    entry: {\n      main:path.resolve(__dirname,'../src/main.js'),\n    }, \n    output: {\n      filename: '[name].[hash:8].js',      // 打包后的文件名称\n      path: path.resolve(__dirname,'../dist')  // 打包后的目录\n    },\n    module:{\n      rules:[\n        {\n          test:/\\.vue$/,\n          use:['vue-loader']\n        },\n        {\n          test:/\\.js$/,\n          use:{\n            loader:'babel-loader',\n            options:{\n              presets:[\n                ['@babel/preset-env']\n              ]\n            }\n          }\n        },\n        {\n          test:/\\.css$/,\n          use: ['vue-style-loader','css-loader',{\n            loader:'postcss-loader',\n            options:{\n              plugins:[require('autoprefixer')]\n            }\n          }]\n        },\n        {\n          test:/\\.less$/,\n          use: ['vue-style-loader','css-loader',{\n            loader:'postcss-loader',\n            options:{\n              plugins:[require('autoprefixer')]\n            }\n          },'less-loader']\n        }\n      ]\n    },\n    resolve:{\n      alias:{\n        'vue$':'vue/dist/vue.runtime.esm.js',\n        ' @':path.resolve(__dirname,'../src')\n      },\n      extensions:['*','.js','.json','.vue']\n    },\n    devServer:{\n      port:3000,\n      hot:true,\n      contentBase:'../dist'\n    },\n    plugins:[\n      new CleanWebpackPlugin(),\n      new HtmlWebpackPlugin({\n        template:path.resolve(__dirname,'../public/index.html'),\n        filename:'index.html'\n      }),\n      new vueLoaderPlugin(),\n      new Webpack.HotModuleReplacementPlugin()\n    ]\n}\n```\n### 配置打包命令\n``` json\n\"script\":{\n  \"dev\":\"webpack-dev-server --config build/webpack.config.js --open\",\n  \"build\":\"webpack --config build/webpack.config.js\"\n}\n```\n打包文件已经配置完毕，接下来让我们测试一下\n首先在 `src` 新建一个 `main.js`\n``` js\n// main.js\nimport Vue from 'vue'\nimport App from './app'\nnew Vue({\n  render:h=>h(App)\n}).$mount('#app')\n```\n新建一个 `App.vue`\n\n``` js\n// App.vue\n<template>\n  <div id='container'></div>\n</template>\n<script>\nexport default {\n  data(){\n    return {\n      initData:''\n    }\n  }\n}\n</script>\n<style scoped>\n#container{\n  width:100%;\n  height:100%;\n}\n</style>\n```\n新建一个 `public` 文件夹，里面新建一个 `index.html`\n\n``` html\n// index.html\n<!DOCTYPE html>\n<html lang='en'>\n  <head>\n    <meta charset='utf-8'>\n    <meta name='viewport' content=\"width=device-width,initial-scale=1.0\">\n    <meta http-equiv='X-UA-Compatible' content='ie=edge'>\n    <title>lao li</title>\n  </head>\n  <body>\n    <div id='app'></div>\n  </body>\n</html>\n```\n执行 `npm run dev` 这时候如果浏览器出现 `Vue` 开发环境运行成功，那么恭喜你，已经成功迈出了第一步\n\n### 区分开发环境与生产环境\n实际应用到项目中，我们需要区分开发环境与生产环境，我们在原来 `webpack.config.js` 的基础上再新增两个文件\n\n***`webpack.dev.js` 开发环境配置文件***\n开发环境主要实现的是热更新,不要压缩代码，完整的 `sourceMap`\n***`webpack.prod.js`生产环境配置文件***\n生产环境主要实现的是压缩代码、提取 `css` 文件、合理的 `sourceMap` 、分割代码\n需要安装以下模块:\n``` js\nnpm i -D  webpack-merge copy-webpack-plugin optimize-css-assets-webpack-plugin uglifyjs-webpack-plugin\n```\n- `webpack-merge` 合并配置\n- `copy-webpack-plugin` 拷贝静态资源\n- `optimize-css-assets-webpack-plugin` 压缩 `css`\n- `uglifyjs-webpack-plugin` 压缩js\n\n> `webpack` `mode` 设置 `production` 的时候会自动压缩 `js` 代码。\n原则上不需要引入 `uglifyjs-webpack-plugin` 进行重复工作。\n但是 `optimize-css-assets-webpack-plugin `压缩 `css` 的同时会破坏原有的 `js` 压缩，所以这里我们引入 `uglifyjs` 进行压缩\n\n``` js\n// webpack.config.js\nconst path = require('path')\nconst {CleanWebpackPlugin} = require('clean-webpack-plugin')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst vueLoaderPlugin = require('vue-loader/lib/plugin')\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\")\nconst devMode = process.argv.indexOf('--mode=production') === -1;\nmodule.exports = {\n  entry:{\n    main:path.resolve(__dirname,'../src/main.js')\n  },\n  output:{\n    path:path.resolve(__dirname,'../dist'),\n    filename:'js/[name].[hash:8].js',\n    chunkFilename:'js/[name].[hash:8].js'\n  },\n  module:{\n    rules:[\n      {\n        test:/\\.js$/,\n        use:{\n          loader:'babel-loader',\n          options:{\n            presets:['@babel/preset-env']\n          }\n        },\n        exclude:/node_modules/\n      },\n      {\n        test:/\\.vue$/,\n        use:['cache-loader','thread-loader',{\n          loader:'vue-loader',\n          options:{\n            compilerOptions:{\n              preserveWhitespace:false\n            }\n          }\n        }]\n      },\n      {\n        test:/\\.css$/,\n        use:[{\n          loader: devMode ? 'vue-style-loader' : MiniCssExtractPlugin.loader,\n          options:{\n            publicPath:\"../dist/css/\",\n            hmr:devMode\n          }\n        },'css-loader',{\n          loader:'postcss-loader',\n          options:{\n            plugins:[require('autoprefixer')]\n          }\n        }]\n      },\n      {\n        test:/\\.less$/,\n        use:[{\n          loader:devMode ? 'vue-style-loader' : MiniCssExtractPlugin.loader,\n          options:{\n            publicPath:\"../dist/css/\",\n            hmr:devMode\n          }\n        },'css-loader','less-loader',{\n          loader:'postcss-loader',\n          options:{\n            plugins:[require('autoprefixer')]\n          }\n        }]\n      },\n      {\n        test:/\\.(jep?g|png|gif)$/,\n        use:{\n          loader:'url-loader',\n          options:{\n            limit:10240,\n            fallback:{\n              loader:'file-loader',\n              options:{\n                name:'img/[name].[hash:8].[ext]'\n              }\n            }\n          }\n        }\n      },\n      {\n        test:/\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,\n        use:{\n          loader:'url-loader',\n          options:{\n            limit:10240,\n            fallback:{\n              loader:'file-loader',\n              options:{\n                name:'media/[name].[hash:8].[ext]'\n              }\n            }\n          }\n        }\n      },\n      {\n        test:/\\.(woff2?|eot|ttf|otf)(\\?.*)?$/i,\n        use:{\n          loader:'url-loader',\n          options:{\n            limit:10240,\n            fallback:{\n              loader:'file-loader',\n              options:{\n                name:'media/[name].[hash:8].[ext]'\n              }\n            }\n          }\n        }\n      }\n    ]\n  },\n  resolve:{\n    alias:{\n      'vue$':'vue/dist/vue.runtime.esm.js',\n      ' @':path.resolve(__dirname,'../src')\n    },\n    extensions:['*','.js','.json','.vue']\n  },\n  plugins:[\n    new CleanWebpackPlugin(),\n    new HtmlWebpackPlugin({\n      template:path.resolve(__dirname,'../public/index.html')\n    }),\n    new vueLoaderPlugin(),\n    new MiniCssExtractPlugin({\n      filename: devMode ? '[name].css' : '[name].[hash].css',\n      chunkFilename: devMode ? '[id].css' : '[id].[hash].css'\n    })\n  ]\n}\n```\n``` js\n// webpack.dev.js\nconst Webpack = require('webpack')\nconst webpackConfig = require('./webpack.config.js')\nconst WebpackMerge = require('webpack-merge')\n\nmodule.exports = WebpackMerge(webpackConfig,{\n  mode:'development',\n  devtool:'cheap-module-eval-source-map',\n  devServer:{\n    port:3000,\n    hot:true,\n    contentBase:'../dist'\n  },\n  plugins:[\n    new Webpack.HotModuleReplacementPlugin()\n  ]\n})\n```\n``` js\n// webpack.prod.js\nconst path = require('path')\nconst webpackConfig = require('./webpack.config.js')\nconst WebpackMerge = require('webpack-merge')\n\nconst CopyWebpackPlugin = require('copy-webpack-plugin')\nconst OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin')\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin')\n\nmodule.exports = WebpackMerge(webpackConfig,{\n  mode:'production',\n  devtool:'cheap-module-source-map',\n  plugins:[\n    new CopyWebpackPlugin([{\n      from:path.resolve(__dirname,'../public'),\n      to:path.resolve(__dirname,'../dist')\n    }]),\n  ],\n  optimization:{\n    minimizer:[\n      new UglifyJsPlugin({//压缩js\n        cache:true,\n        parallel:true,\n        sourceMap:true\n    }),\n    new OptimizeCssAssetsPlugin({})\n    ],\n    splitChunks:{\n      chunks:'all',\n      cacheGroups:{\n        libs: {\n          name: \"chunk-libs\",\n          test: /[\\\\/]node_modules[\\\\/]/,\n          priority: 10,\n          chunks: \"initial\" // 只打包初始时依赖的第三方\n        }\n      }\n    }\n  }\n})\n```\n\n## 优化webpack配置\n看到这里你或许有些累了，但是要想获取更好的offer,更高的薪水，下面必须继续深入\n\n优化配置对我们来说非常有实际意义，这实际关系到你打包出来文件的大小，打包的速度等。\n具体优化可以分为以下几点：\n\n### 优化打包速度\n> 构建速度指的是我们每次修改代码后热更新的速度以及发布前打包文件的速度。\n\n#### 合理的配置 mode 参数与 devtool 参数\n\n[devtool 可设置的值](https://www.webpackjs.com/configuration/devtool/)\n`mode` 可设置 `development` `production` 两个参数\n\n如果没有设置， `webpack4` 会将 `mode` 的默认值设置为 `production`\n- `production` ：将 `process.env.NODE_ENV` 的值设置为 `production` ，启用 `FlagDependencyUsagePlugin`, `FlagIncludedChunksPlugin`, `ModuleConcatenationPlugin`, `NoEmitOnErrorsPlugin`, `OccurrenceOrderPlugin`, `SideEffectsFlagPlugin` 和 `UglifyJsPlugin`,会进行 `tree shaking` (去除无用代码)和 `uglifyjs` (代码压缩混淆)\n- `development` ：将 `process.env.NODE_ENV` 的值设置为 `development` ，启用 `NamedChunksPlugin` 和 `NamedModulesPlugin`\n\n#### 缩小文件的搜索范围(配置include exclude alias noParse extensions)\n- `alias`  当我们代码中出现 import 'vue'时， webpack会采用向上递归搜索的方式去node_modules 目录下找。为了减少搜索范围我们可以直接告诉webpack去哪个路径下查找。也就是别名(alias)的配置。\n- `include` `exclude`  同样配置include exclude也可以减少webpack loader的搜索转换时间。\n- `noParse`  当我们代码中使用到 `import jq from 'jquery'` 时， `webpack` 会去解析 `jq` 这个库是否有依赖其他的包。但是我们对类似 `jquery` 这类依赖库，一般会认为不会引用其他的包(特殊除外,自行判断)。增加 `noParse` 属性,告诉 `webpack` 不必解析，以此增加打包速度。\n- `extensions`  `webpack` 会根据 `extensions` 定义的后缀查找文件(频率较高的文件类型优先写在前面)\n\n![配图](https://pic1.zhimg.com/80/v2-6fd8b21b8e9d9b18a596bd9dc6025a18_720w.jpg)\n\n#### 使用HappyPack开启多进程Loader转换\n> 在 `webpack` 构建过程中，实际上耗费时间大多数用在 `loader` 解析转换以及代码的压缩中。日常开发中我们需要使用 `Loader` 对 `js` ， `css` ，图片，字体等文件做转换操作，并且转换的文件数据量也是非常大。由于js单线程的特性使得这些转换操作不能并发处理文件，而是需要一个个文件进行处理。 `HappyPack` 的基本原理是将这部分任务分解到多个子进程中去并行处理，子进程处理完成后把结果发送到主进程中，从而减少总的构建时间\n``` js\nnpm i -D happypack\n```\n\n![happypack](https://pic2.zhimg.com/v2-ebcaa0bea4e7ec24c3e3e65439998fe5_r.jpg)\n\n#### 使用 webpack-parallel-uglify-plugin 增强代码压缩\n上面对于 `loader` 转换已经做优化，那么下面还有另一个难点就是优化代码的压缩时间。\n``` js\nnpm i -D webpack-parallel-uglify-plugin\n```\n![webpack-parallel-uglify-plugin](https://pic2.zhimg.com/80/v2-38bc4d4b3120096478a411f374457a1d_720w.jpg)\n\n#### 抽离第三方模块\n> 对于开发项目中不经常会变更的静态依赖文件。类似于我们的 `elementUi` 、 `vue` 全家桶等等。因为很少会变更，所以我们不希望这些依赖要被集成到每一次的构建逻辑中去。 这样做的好处是每次更改我本地代码的文件的时候， `webpack` 只需要打包我项目本身的文件代码，而不会再去编译第三方库。以后只要我们不升级第三方包的时候，那么 `webpack` 就不会对这些库去打包，这样可以快速的提高打包的速度。\n\n这里我们使用 `webpack` 内置的 `DllPlugin` `DllReferencePlugin` 进行抽离\n\n在与 `webpack` 配置文件同级目录下新建 `webpack.dll.config.js`\n代码如下\n``` js\n// webpack.dll.config.js\nconst path = require(\"path\");\nconst webpack = require(\"webpack\");\nmodule.exports = {\n  // 你想要打包的模块的数组\n  entry: {\n    vendor: ['vue','element-ui'] \n  },\n  output: {\n    path: path.resolve(__dirname, 'static/js'), // 打包后文件输出的位置\n    filename: '[name].dll.js',\n    library: '[name]_library' \n     // 这里需要和webpack.DllPlugin中的`name: '[name]_library',`保持一致。\n  },\n  plugins: [\n    new webpack.DllPlugin({\n      path: path.resolve(__dirname, '[name]-manifest.json'),\n      name: '[name]_library', \n      context: __dirname\n    })\n  ]\n};\n```\n在 `package.json` 中配置如下命令\n``` js\n\"dll\": \"webpack --config build/webpack.dll.config.js\"\n```\n\n接下来在我们的 `webpack.config.js` 中增加以下代码\n\n``` js\nmodule.exports = {\n  plugins: [\n    new webpack.DllReferencePlugin({\n      context: __dirname,\n      manifest: require('./vendor-manifest.json')\n    }),\n    new CopyWebpackPlugin([ // 拷贝生成的文件到dist目录 这样每次不必手动去cv\n      {from: 'static', to:'static'}\n    ]),\n  ]\n};\n```\n执行\n```\nnpm run dll\n```\n\n会发现生成了我们需要的集合第三地方\n代码的 `vendor.dll.js`\n我们需要在html文件中手动引入这个js文件\n\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>老yuan</title>\n  <script src=\"static/js/vendor.dll.js\"></script>\n</head>\n<body>\n  <div id=\"app\"></div>\n</body>\n</html>\n```\n这样如果我们没有更新第三方依赖包，就不必 `npm run dll` 。直接执行 `npm run dev`  `npm run build` 的时候会发现我们的打包速度明显有所提升。因为我们已经通过 `dllPlugin` 将第三方依赖包抽离出来了。\n\n#### 配置缓存\n> 我们每次执行构建都会把所有的文件都重复编译一遍，这样的重复工作是否可以被缓存下来呢，答案是可以的，目前大部分 `loader` 都提供了 `cache` 配置项。比如在 `babel-loader` `中，可以通过设置cacheDirectory` 来开启缓存，`babel-loader?cacheDirectory=true` 就会将每次的编译结果写进硬盘文件（默认是在项目根目录下的 `node_modules/.cache/babel-loader` 目录内，当然你也可以自定义）\n但如果 `loader` 不支持缓存呢？我们也有方法,我们可以通过 `cache-loader` ，它所做的事情很简单，就是 `babel-loader` 开启 `cache` 后做的事情，将 `loader` 的编译结果写入硬盘缓存。再次构建会先比较一下，如果文件较之前的没有发生变化则会直接使用缓存。使用方法如官方 `demo` 所示，在一些性能开销较大的 `loader` 之前添加此 `loader` 即可\n\n``` js\nnpm i -D cache-loader\n```\n![cache-loader](https://pic3.zhimg.com/80/v2-e00ab48297af32f344070b5637ba88ca_720w.jpg)\n\n### 优化打包文件体积\n打包的速度我们是进行了优化，但是打包后的文件体积却是十分大，造成了页面加载缓慢，浪费流量等，接下来让我们从文件体积上继续优化\n#### 引入webpack-bundle-analyzer分析打包后的文件\n`webpack-bundle-analyzer` 将打包后的内容束展示为方便交互的直观树状图，让我们知道我们所构建包中真正引入的内容\n\n``` js\nnpm i -D webpack-bundle-analyzer\n```\n![webpack-bundle-analyzer](https://pic3.zhimg.com/v2-b23299204561718ba4636aeff9f71d6e_r.jpg)\n\n接下来在 `package.json` 里配置启动命令\n``` json\n\"analyz\": \"NODE_ENV=production npm_config_report=true npm run build\"\n```\n`windows` 请安装 `npm i -D cross-env`\n``` json\n\"analyz\": \"cross-env NODE_ENV=production npm_config_report=true npm run build\"\n```\n接下来 `npm run analyz` 浏览器会自动打开文件依赖图的网页\n\n#### externals\n> 按照官方文档的解释，如果我们想引用一个库，但是又不想让 `webpack` 打包，并且又不影响我们在程序中以 `CMD` 、 `AMD` 或者 `window`/`global` 全局等方式进行使用，那就可以通过配置 `Externals` 。这个功能主要是用在创建一个库的时候用的，但是也可以在我们项目开发中充分使用`Externals` 的方式，我们将这些不需要打包的静态资源从构建逻辑中剔除出去，而使用 `CDN`的方式，去引用它们。\n有时我们希望我们通过 `script` 引入的库，如用 `CDN` 的方式引入的 `jquery` ，我们在使用时，依旧用 `require` 的方式来使用，但是却不希望 `webpack` 将它又编译进文件中。这里官网案例已经足够清晰明了，大家有兴趣可以点击了解\n[webpack](https://link.zhihu.com/?target=https%3A//webpack.js.org/configuration/externals/%23root)\n官网案例如下\n``` js\n<script\n  src=\"https://code.jquery.com/jquery-3.1.0.js\"\n  integrity=\"sha256-slogkvB1K3VOkzAI8QITxV3VzpOnkeNVsKvtkYLMjfk=\"\n  crossorigin=\"anonymous\">\n</script>\nmodule.exports = {\n  //...\n  externals: {\n    jquery: 'jQuery'\n  }\n};\nimport $ from 'jquery';\n$('.my-element').animate(/* ... */);\n```\n#### Tree-shaking\n> 这里单独提一下 `tree-shaking` ,是因为这里有个坑。 `tree-shaking` 的主要作用是用来清除代码中无用的部分。目前在 `webpack4` 我们设置 `mode` 为 `production` 的时候已经自动开启了`tree-shaking` 。但是要想使其生效，生成的代码必须是`ES6`模块。不能使用其它类型的模块如 `CommonJS` 之流。如果使用 `Babel` 的话，这里有一个小问题，因为 `Babel` 的预案（ `preset` ）默认会将任何模块类型都转译成 `CommonJS` 类型。修正这个问题也很简单，在 `.babelrc` 文件或在 `webpack.config.js` 文件中设置 `modules:false` 就好了\n\n``` js\n// .babelrc\n{\n  \"presets\": [\n    [\"@babel/preset-env\",\n      {\n        \"modules\": false\n      }\n    ]\n  ]\n}\n```\n或者\n``` js\n// webpack.config.js\n\nmodule: {\n  rules: [\n    {\n      test: /\\.js$/,\n      use: {\n        loader: 'babel-loader',\n        options: {\n          presets: ['@babel/preset-env', { modules: false }]\n        }\n      }，\n      exclude: /(node_modules)/\n    }\n  ]\n}\n```\n\n经历过上面两个系列的洗礼，到现在我们成为了一名合格的 `webpack` 配置工程师。但是光拧螺丝，自身的可替代性还是很高，下面我们将深入 `webpack` 的原理中去\n## 手写webpack系列\n经历过上面两个部分，我们已经可以熟练的运用相关的 `loader` 和 `plugin` 对我们的代码进行转换、解析。接下来我们自己手动实现 `loader` 与 `plugin` ，使其在平时的开发中获得更多的乐趣。\n### 手写 webpack loader\n> `loader` 从本质上来说其实就是一个 `node` 模块。相当于一台榨汁机( `loader` )将相关类型的文件代码( `code` )给它。根据我们设置的规则，经过它的一系列加工后还给我们加工好的果汁( `code` )。\n#### `loader` 编写原则\n- 单一原则: 每个 `Loader` 只做一件事；\n- 链式调用: `Webpack` 会按顺序链式调用每个 `Loader` ；\n- 统一原则: 遵循 `Webpack` 制定的设计规则和结构，输入与输出均为字符串，各个 `Loader` 完全独立，即插即用；\n\n在日常开发环境中，为了方便调试我们往往会加入许多 `console` 打印。但是我们不希望在生产环境中存在打印的值。那么这里我们自己实现一个 `loader` 去除代码中的 `console`\n\n> 知识点普及之 `AST` 。 `AST` 通俗的来说，假设我们有一个文件 `a.js` ,我们对 `a.js` 里面的1000行进行一些操作处理,比如为所有的 `await` 增加 `try catch` ,以及其他操作，但是 `a.js` 里面的代码本质上来说就是一堆字符串。那我们怎么办呢，那就是转换为带标记信息的对象(抽象语法树)我们方便进行增删改查。这个带标记的对象(抽象语法树)就是AST。这里推荐一篇不错的AST文章 [AST快速入门](https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000016231512)\n\n\n``` js\nnpm i -D @babel/parser @babel/traverse @babel/generator @babel/types\n```\n- @babel/parser 将源代码解析成 `AST`\n- @babel/traverse 对 `AST` 节点进行递归遍历，生成一个便于操作、转换的 `path` 对象\n- @babel/generator 将 `AST` 解码生成 `js` 代码\n- @babel/types 通过该模块对具体的 `AST` 节点进行进行增、删、改、查\n\n新建 `drop-console.js`\n\n``` js\nconst parser = require('@babel/parser')\nconst traverse = require('@babel/traverse').default\nconst generator = require('@babel/generator').default\nconst t = require('@babel/types')\nmodule.exports=function(source){\n  const ast = parser.parse(source,{ sourceType: 'module'})\n  traverse(ast,{\n    CallExpression(path){ \n      if(t.isMemberExpression(path.node.callee) && t.isIdentifier(path.node.callee.object, {name: \"console\"})){\n        path.remove()\n      }\n    }\n  })\n  const output = generator(ast, {}, source);\n  return output.code\n}\n```\n如何使用\n\n``` js\nconst path = require('path')\nmodule.exports = {\n  mode:'development',\n  entry:path.resolve(__dirname,'index.js'),\n  output:{\n    filename:'[name].[contenthash].js',\n    path:path.resolve(__dirname,'dist')\n  },\n  module:{\n    rules:[{\n      test:/\\.js$/,\n      use:path.resolve(__dirname,'drop-console.js')\n      }\n    ]\n  }\n}\n```\n> 实际上在 `webpack4` 中已经集成了去除 `console` 功能，在 `minimizer` 中可配置 [去除console](https://link.zhihu.com/?target=https%3A//webpack.js.org/plugins/terser-webpack-plugin/%23root)\n附上官网 [如何编写一个loader](https://link.zhihu.com/?target=https%3A//webpack.docschina.org/contribute/writing-a-loader/)\n\n### 手写webpack plugin\n> 在 `Webpack` 运行的生命周期中会广播出许多事件， `Plugin` 可以监听这些事件，在合适的时机通过 `Webpack` 提供的 `API` 改变输出结果。\n通俗来说：一盘美味的 盐豆炒鸡蛋 需要经历烧油 炒制 调味到最后的装盘等过程，而 `plugin` 相当于可以监控每个环节并进行操作，比如可以写一个少放胡椒粉 `plugin` ,监控 `webpack` 暴露出的生命周期事件(调味)，在调味的时候执行少放胡椒粉操作。\n那么它与 `loader` 的区别是什么呢？上面我们也提到了 `loader` 的单一原则, `loader` 只能一件事，比如说 `less-loader` ,只能解析 `less` 文件， `plugin` 则是针对整个流程执行广泛的任务。\n\n一个基本的 `plugin` 插件结构如下\n\n``` js\nclass firstPlugin {\n  constructor (options) {\n    console.log('firstPlugin options', options)\n  }\n  apply (compiler) {\n    compiler.plugin('done', compilation => {\n      console.log('firstPlugin')\n    ))\n  }\n}\n\nmodule.exports = firstPlugin\n```\n> `compiler` 、 `compilation` 是什么？\n- `compiler` 对象包含了 `Webpack` 环境所有的的配置信息。这个对象在启动 `webpack` 时被一次性建立，并配置好所有可操作的设置，包括 `options` ， `loader` 和 `plugin` 。当在 `webpack` 环境中应用一个插件时，插件将收到此 `compiler` 对象的引用。可以使用它来访问 `webpack` 的主环境。\n- `compilation` 对象包含了当前的模块资源、编译生成资源、变化的文件等。当运行 `webpack` 开发环境中间件时，每当检测到一个文件变化，就会创建一个新的 `compilation` ，从而生成一组新的编译资源。 `compilation` 对象也提供了很多关键时机的回调，以供插件做自定义处理时选择使用。\n\n***`compiler` 和 `compilation` 的区别在于***\n\n- `compiler` 代表了整个 `webpack` 从启动到关闭的生命周期，而 `compilation` 只是代表了一次新的编译过程\n- `compiler` 和 `compilation` 暴露出许多钩子，我们可以根据实际需求的场景进行自定义处理\n\n[compiler钩子文档](hhttps://www.webpackjs.com/api/compiler-hooks/)\n[compilation钩子文档](https://www.webpackjs.com/api/compilation-hooks/)\n\n下面我们手动开发一个简单的需求,在生成打包文件之前自动生成一个关于打包出文件的大小信息\n新建一个 `webpack-firstPlugin.js`\n\n``` js\nclass firstPlugin{\n  constructor(options){\n    this.options = options\n  }\n  apply(compiler){\n    compiler.plugin('emit',(compilation,callback)=>{\n      let str = ''\n      for (let filename in compilation.assets){\n        str += `文件:${filename}  大小${compilation.assets[filename]['size']()}\\n`\n      }\n      // 通过compilation.assets可以获取打包后静态资源信息，同样也可以写入资源\n      compilation.assets['fileSize.md'] = {\n        source:function(){\n          return str\n        },\n        size:function(){\n          return str.length\n        }\n      }\n      callback()\n    })\n  }\n}\nmodule.exports = firstPlugin\n```\n如何使用\n``` js\nconst path = require('path')\nconst firstPlugin = require('webpack-firstPlugin.js')\nmodule.exports = {\n    // 省略其他代码\n    plugins:[\n        new firstPlugin()\n    ]\n}\n```\n执行 `npm run build` 即可看到在 `dist` 文件夹中生成了一个包含打包文件信息的 `fileSize.md`\n\n> 上面两个 `loader` 与 `plugin` 案例只是一个引导，实际开发需求中的 `loader` 与 `plugin` 要考虑的方面很多，建议大家自己多动手尝试一下。\n\n附上官网 [如何编写一个plugin](https://www.webpackjs.com/contribute/writing-a-plugin/)\n\n## webpack5.0的时代\n无论是前端框架还是构建工具的更新速度远远超乎了我们的想象,前几年的 `jquery` 一把梭的时代一去不复返。我们要拥抱的是不断更新迭代的 `vue` 、 `react` 、 `node` 、 `serverless` 、 `docker` 、 `k8s` ....\n不甘落后的 `webpack` 也已经在近日发布了 `webpack 5.0.0 beta 10` 版本。在之前作者也曾提过 `webpack5.0` 旨在减少配置的复杂度，使其更容易上手( `webpack4` 的时候也说了这句话)，以及一些性能上的提升\n\n- 使用持久化缓存提高构建性能；\n- 使用更好的算法和默认值改进长期缓存（long-term caching）；\n- 清理内部结构而不引入任何破坏性的变化；\n- 引入一些breaking changes，以便尽可能长的使用v5版本。\n\n目前来看，维护者的更新很频繁，相信用不了多久webpack5.0将会拥抱大众。感兴趣的同学可以先安装beta版本尝尝鲜。不过在此之前建议大家先对webpack4进行一番掌握,这样后面的路才会越来越好走。\n\n## 更多阅读\n[webpack中文](https://webpack.docschina.org/)\n[webpackjs](https://www.webpackjs.com/configuration/)\n[4W字长文带你深度解锁Webpack系列(上)](https://mp.weixin.qq.com/s/OBUcxEFXKQQubP08LO2Uhg)","source":"_posts/webpack-learning-1.md","raw":"---\ntitle: 2020年了,再不会webpack敲得代码就不香了(近万字实战)【转载】\ndate: 2020-03-24 20:20:20\ncategories: \n  - Webpack\ntags: \n  - Webpack\n---\n# 推荐序\n这里是我自己写的，看了这篇文章把我零碎的 `webpack` 知识系统的整理了一下，感觉受益匪浅，推荐更多小伙伴看一看这篇文章，好文共享，建议稍微对 `webpack` 了解服用更佳。\n[2020年了,再不会webpack敲得代码就不香了(近万字实战)](https://zhuanlan.zhihu.com/p/99959392)\n# 前言\n2020年即将到来,在众多前端的招聘要求里, `webpack` 、工程化这些字眼频率越来越高。日常开发者中，我们常常在用诸如 `vue-cli` 、 `create-react-app`  的脚手架来构建我们的项目。但是如果你想在团队脱颖而出(鹤立鸡群)、拿到更好的 `offer` (还房贷)，那么你必须去深刻的认识下我们经常打交道的 `webpack`\n## 入门(一起来用这些小例子让你熟悉webpack的配置)\n### webpack 是什么？\n`webpack` 是一个现代 `JavaScript` 应用程序的静态模块打包器，当 `webpack` 处理应用程序时，会递归构建一个依赖关系图，其中包含应用程序需要的每个模块，然后将这些模块打包成一个或多个 `bundle` 。\n### webpack 的核心概念\n- `entry`: 入口\n- `output`: 输出\n- `loader`: 模块转换器，用于把模块原内容按照需求转换成新内容\n- `plugins`: 扩展插件，在 `webpack` 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要做的事情\n\n### 初始化项目\n新建一个目录，初始化 `npm`\n``` js\nnpm init\n```\n\n`webpack` 是运行在 `node` 环境中的,我们需要安装以下两个 `npm` 包\n\n``` js\nnpm i -D webpack webpack-cli\n```\n\n> - `npm i -D` 为 `npm install --save-dev` 的缩写\n> - `npm i -S` 为 `npm install --save` 的缩写\n\n新建一个文件夹 `src` ,然后新建一个文件 `main.js` ,写一点代码测试一下\n``` js\nconsole.log('call me 老yuan')\n```\n\n配置 `package.json` 命令\n\n``` json\n\"script\":{\n  \"build\":\"webpack src/main.js\"\n}\n```\n执行\n``` js\nnpm run build\n```\n此时如果生成了一个 `dist` 文件夹，并且内部含有 `main.js` 说明已经打包成功了\n\n### 开始我们自己的配置\n上面一个简单的例子只是 `webpack` 自己默认的配置，下面我们要实现更加丰富的自定义配置\n\n新建一个 `build` 文件夹,里面新建一个 `webpack.config.js`\n``` js\n// webpack.config.js\n\nconst path = require('path');\nmodule.exports = {\n    mode:'development', // 开发模式\n    entry: path.resolve(__dirname,'../src/main.js'),    // 入口文件\n    output: {\n        filename: 'output.js',      // 打包后的文件名称\n        path: path.resolve(__dirname,'../dist')  // 打包后的目录\n    }\n}\n```\n更改我们的打包命令\n\n``` json\n\"script\":{\n  \"build\":\"webpack build/webpack.config.js\"\n}\n```\n执行 `npm run build`\n会发现生成了以下目录\n``` js\nproject\n  dist\n  build\n  src\n```\n其中 `dist` 文件夹中的 `main.js` 就是我们需要在浏览器中实际运行的文件\n当然实际运用中不会仅仅如此,下面让我们通过实际案例带你快速入手 `webpack`\n\n### 配置html模板\n`js` 文件打包好了,但是我们不可能每次在html文件中手动引入打包好的js\n\n> 这里可能有的朋友会认为我们打包 `js` 文件名称不是一直是固定的嘛( `output.js` )？这样每次就不用改动引入文件名称了呀？实际上我们日常开发中往往会这样配置:\n\n``` js\nmodule.exports = {\n    // 省略其他配置\n    output: {\n      filename: '[name].[hash:8].js',      // 打包后的文件名称\n      path: path.resolve(__dirname,'../dist')  // 打包后的目录\n    }\n}\n```\n\n这时候生成的 `dist` 目录文件如下\n\n``` js\ndist/\n  app.fsafasf.js\n```\n为了缓存，你会发现打包好的 `js` 文件的名称每次都不一样。 `webpack` 打包出来的js文件我们需要引入到 `html` 中，但是每次我们都手动修改 `js` 文件名显得很麻烦，因此我们需要一个插件来帮我们完成这件事情，那就是 `html-webpack-plugin`\n``` js\nnpm i -D html-webpack-plugin\n```\n新建一个 `build` 同级的文件夹 `public` ,里面新建一个 `index.html`\n具体配置文件如下\n\n``` js\n// webpack.config.js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin') // **此插件用来解决html模板引入js文件\nmodule.exports = {\n    mode:'development', // 开发模式\n    entry: path.resolve(__dirname,'../src/main.js'),    // 入口文件\n    output: {\n      filename: '[name].[hash:8].js',      // 打包后的文件名称\n      path: path.resolve(__dirname,'../dist')  // 打包后的目录\n    },\n    plugins:[\n      new HtmlWebpackPlugin({\n        template:path.resolve(__dirname,'../public/index.html')\n      })\n    ]\n}\n```\n可以发现打包生成的js文件已经被自动引入 `html` 文件中\n\n#### 多入口文件如何开发\n> 生成多个 `html-webpack-plugin` 实例来解决这个问题\n``` js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nmodule.exports = {\n    mode:'development', // 开发模式\n    entry: {\n      main:path.resolve(__dirname,'../src/main.js'),\n      header:path.resolve(__dirname,'../src/header.js')\n    }, \n    output: {\n      filename: '[name].[hash:8].js',      // 打包后的文件名称\n      path: path.resolve(__dirname,'../dist')  // 打包后的目录\n    },\n    plugins:[\n      new HtmlWebpackPlugin({\n        template:path.resolve(__dirname,'../public/index.html'),\n        filename:'index.html',\n        chunks:['main'] // 与入口文件对应的模块名\n      }),\n      new HtmlWebpackPlugin({\n        template:path.resolve(__dirname,'../public/header.html'),\n        filename:'header.html',\n        chunks:['header'] // 与入口文件对应的模块名\n      }),\n    ]\n}\n```\n\n#### clean-webpack-plugin\n> 每次执行 `npm run build` 会发现 `dist` 文件夹里会残留上次打包的文件，这里我们推荐一个 `plugin` 来帮我们在打包输出前清空文件夹 `clean-webpack-plugin`\n``` js\nconst {CleanWebpackPlugin} = require('clean-webpack-plugin')\nmodule.exports = {\n    // ...省略其他配置\n    plugins:[new CleanWebpackPlugin()]\n}\n```\n##### 希望dist目录下某个文件夹不被清空\n不过呢，有些时候，我们并不希望整个 dist 目录都被清空，比如，我们不希望，每次打包的时候，都删除 `dll` 目录，以及 `dll` 目录下的文件或子目录，该怎么办呢？\n\n`clean-webpack-plugin` 为我们提供了参数 `cleanOnceBeforeBuildPatterns` 。\n``` js\n//webpack.config.js\nmodule.exports = {\n    //...\n    plugins: [\n        new CleanWebpackPlugin({\n            cleanOnceBeforeBuildPatterns:['**/*', '!dll', '!dll/**'] //不删除dll目录下的文件\n        })\n    ]\n}\n```\n\n### 引用CSS\n我们的入口文件是 `js` ，所以我们在入口 `js` 中引入我们的 `css` 文件\n``` js\nimport 'asset/style.css'\n```\n同时我们也需要一些 `loader` 来解析我们的 `css` 文件\n\n``` js\nnpm i -D style-loader css-loader\n```\n如果我们使用 `less` 来构建样式，则需要多安装两个\n``` js\nnpm i -D less less-loader\n```\n配置文件如下\n\n``` js\n// webpack.config.js\nmodule.exports = {\n    // ...省略其他配置\n    module:{\n      rules:[\n        {\n          test:/\\.css$/,\n          use:['style-loader','css-loader'] // 从右向左解析原则\n        },\n        {\n          test:/\\.less$/,\n          use:['style-loader','css-loader','less-loader'] // 从右向左解析原则\n        }\n      ]\n    }\n}\n```\n\n我们简单说一下上面的配置：\n- `style-loader` 动态创建 `style` 标签，将 `css` 插入到 `head` 中.\n- `css-loader` 负责处理 `@import` 等语句。\n- `postcss-loader` 和 `autoprefixer` ，自动生成浏览器兼容性前缀 —— 2020了，应该没人去自己徒手去写浏览器前缀了吧\n- `less-loader` 负责处理编译 `.less` 文件,将其转为 `css`\n\n> 注意：  \n`loader` 的执行顺序是***从右向左***执行的，也就是后面的 `loader` 先执行，上面 `loader` 的执行顺序为: `less-loader` ---> `postcss-loader` ---> `css-loader` ---> `style-loader`\n当然，`loader` 其实还有一个参数，可以修改优先级，`enforce` 参数，其值可以为: `pre`(优先执行) 或 `post` (滞后执行)。\n现在，我们已经可以处理 `.less` 文件啦，`.css` 文件只需要修改匹配规则，删除 `less-loader` 即可。\n\n#### 为css添加浏览器前缀\n``` js\nnpm i -D postcss-loader autoprefixer\n\n```\n配置如下\n\n``` js\n// webpack.config.js\nmodule.exports = {\n    module:{\n        rules:[\n            test/\\.less$/,\n            use:['style-loader','css-loader','postcss-loader','less-loader'] // 从右向左解析原则\n        ]\n    }\n}\n```\n接下来，我们还需要引入 `autoprefixer` 使其生效,这里有两种方式\n\n##### 在项目根目录下创建一个postcss.config.js文件，配置如下：\n``` js\nmodule.exports = {\n    plugins: [require('autoprefixer')]  // 引用该插件即可了\n}\n```\n##### 直接在webpack.config.js里配置\n``` js\n// webpack.config.js\nmodule.exports = {\n    //...省略其他配置\n    module:{\n        rules:[{\n            test:/\\.less$/,\n            use:['style-loader','css-loader',{\n                loader:'postcss-loader',\n                options:{\n                    plugins:[require('autoprefixer')]\n                }\n            },'less-loader'] // 从右向左解析原则\n        }]\n    }\n}\n``` \n这时候我们发现 `css` 通过 `style` 标签的方式添加到了 `html` 文件中，但是如果样式文件很多，全部添加到 `html` 中，难免显得混乱。这时候我们想用把 `css` 拆分出来用外链的形式引入 `css` 文件怎么做呢？这时候我们就需要借助插件来帮助我们\n#### 拆分css\n``` js\nnpm i -D mini-css-extract-plugin\n```\n> `webpack 4.0` 以前，我们通过 `extract-text-webpack-plugin` 插件，把 `css` 样式从 `js` 文件中提取到单独的 `css` 文件中。 `webpack4.0` 以后，官方推荐使用 `mini-css-extract-plugin` 插件来打包 `css` 文件\n\n配置文件如下\n\n``` js\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\nmodule.exports = {\n  //...省略其他配置\n  module: {\n    rules: [\n      {\n        test: /\\.less$/,\n        use: [\n           MiniCssExtractPlugin.loader,\n          'css-loader',\n          'less-loader'\n        ],\n      }\n    ]\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n        filename: \"[name].[hash].css\",\n        chunkFilename: \"[id].css\",\n    })\n  ]\n}\n```\n#### 拆分多个css\n> 这里需要说的细一点,上面我们所用到的 `mini-css-extract-plugin` 将所有的 `css` 样式合并为一个 `css` 文件。如果你想拆分为一一对应的多个 `css` 文件,我们需要使用到 `extract-text-webpack-plugin` ，而目前 `mini-css-extract-plugin` 还不支持此功能。我们需要安装 `@next` 版本的 `extract-text-webpack-plugin`\n``` js\nnpm i -D extract-text-webpack-plugin@next\n// webpack.config.js\n\nconst path = require('path');\nconst ExtractTextWebpackPlugin = require('extract-text-webpack-plugin')\nlet indexLess = new ExtractTextWebpackPlugin('index.less');\nlet indexCss = new ExtractTextWebpackPlugin('index.css');\nmodule.exports = {\n    module:{\n      rules:[\n        {\n          test:/\\.css$/,\n          use: indexCss.extract({\n            use: ['css-loader']\n          })\n        },\n        {\n          test:/\\.less$/,\n          use: indexLess.extract({\n            use: ['css-loader','less-loader']\n          })\n        }\n      ]\n    },\n    plugins:[\n      indexLess,\n      indexCss\n    ]\n}\n```\n### 打包 图片、字体、媒体、等文件\n`file-loader` 就是将文件在进行一些处理后（主要是处理文件名和路径、解析文件 `url` ），并将文件移动到输出的目录中\n`url-loader` 一般与 `file-loader` 搭配使用，功能与 `file-loader` 类似，如果文件小于限制的大小。则会返回 `base64` 编码，否则使用 `file-loader` 将文件移动到输出的目录中\n\n``` js\n// webpack.config.js\nmodule.exports = {\n  // 省略其它配置 ...\n  module: {\n    rules: [\n      // ...\n      {\n        test: /\\.(jpe?g|png|gif)$/i, //图片文件\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              limit: 10240,\n              fallback: {\n                loader: 'file-loader',\n                options: {\n                    name: 'img/[name].[hash:8].[ext]'\n                }\n              }\n            }\n          }\n        ]\n      },\n      {\n        test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/, //媒体文件\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              limit: 10240,\n              fallback: {\n                loader: 'file-loader',\n                options: {\n                  name: 'media/[name].[hash:8].[ext]'\n                }\n              }\n            }\n          }\n        ]\n      },\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/i, // 字体\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              limit: 10240,\n              fallback: {\n                loader: 'file-loader',\n                options: {\n                  name: 'fonts/[name].[hash:8].[ext]'\n                }\n              }\n            }\n          }\n        ]\n      },\n    ]\n  }\n}\n```\n### 用babel转义js文件\n为了使我们的 `js` 代码兼容更多的环境我们需要安装依赖\n``` js\nnpm i babel-loader @babel/preset-env @babel/core\n\n```\n> 注意\n`babel-loader` 与 `babel-core` 的版本对应关系\n>\n- `babel-loader 8.x` 对应 `babel-core 7.x`\n- `babel-loader 7.x` 对应 `babel-core 6.x`\n\n配置如下\n``` js\n// webpack.config.js\nmodule.exports = {\n    // 省略其它配置 ...\n    module:{\n        rules:[\n          {\n            test:/\\.js$/,\n            use:{\n              loader:'babel-loader',\n              options:{\n                presets:['@babel/preset-env']\n              }\n            },\n            exclude:/node_modules/\n          },\n       ]\n    }\n}\n```\n上面的 `babel-loader` 只会将 `ES6/7/8` 语法转换为 `ES5` 语法，但是对新 `api` 并不会转换 例如( `promise` 、 `Generator` 、 `Set` 、 `Maps` 、 `Proxy` 等)\n此时我们需要借助 `babel-polyfill` 来帮助我们转换\n\n``` js\nnpm i @babel/polyfill\n// webpack.config.js\nconst path = require('path')\nmodule.exports = {\n    entry: [\"@babel/polyfill,path.resolve(__dirname,'../src/index.js')\"],    // 入口文件\n}\n```\n> 手动把上面的 `demo` 敲一遍对阅读下面的文章更有益，建议入门的同学敲三遍以上\n\n上面的实践是我们对 `webpack` 的功能有了一个初步的了解，但是要想熟练应用于开发中，我们需要一个系统的实战。让我们一起摆脱脚手架尝试自己搭建一个 `vue` 开发环境\n\n## 搭建vue开发环境\n上面的小例子已经帮助而我们实现了打包 `css` 、图片、 `js` 、 `html` 等文件。\n但是我们还需要以下几种配置\n### 解析.vue文件\n``` js\nnpm i -D vue-loader vue-template-compiler vue-style-loader\nnpm i -S vue\n```\n- `vue-loader` 用于解析 `.vue` 文件\n- `vue-template-compiler` 用于编译模板\n\n配置如下\n\n``` js\nconst vueLoaderPlugin = require('vue-loader/lib/plugin')\nmodule.exports = {\n    module:{\n        rules:[{\n            test:/\\.vue$/,\n            use:['vue-loader']\n        },]\n     },\n    resolve:{\n        alias:{\n          'vue$':'vue/dist/vue.runtime.esm.js',\n          ' @':path.resolve(__dirname,'../src')\n        },\n        extensions:['*','.js','.json','.vue']\n   },\n   plugins:[\n        new vueLoaderPlugin()\n   ]\n}\n```\n### 配置webpack-dev-server进行热更新\n``` js\nnpm i -D webpack-dev-server\n```\n配置如下\n\n``` js\nconst Webpack = require('webpack')\nmodule.exports = {\n  // ...省略其他配置\n  devServer:{\n    port:3000,\n    hot:true,\n    contentBase:'../dist'\n  },\n  plugins:[\n    new Webpack.HotModuleReplacementPlugin()\n  ]\n}\n```\n完整配置如下\n``` js\n// webpack.config.js\nconst path = require('path');\nconst {CleanWebpackPlugin} = require('clean-webpack-plugin')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\nconst ExtractTextWebpackPlugin = require('extract-text-webpack-plugin')\nconst vueLoaderPlugin = require('vue-loader/lib/plugin')\nconst Webpack = require('webpack')\nmodule.exports = {\n    mode:'development', // 开发模式\n    entry: {\n      main:path.resolve(__dirname,'../src/main.js'),\n    }, \n    output: {\n      filename: '[name].[hash:8].js',      // 打包后的文件名称\n      path: path.resolve(__dirname,'../dist')  // 打包后的目录\n    },\n    module:{\n      rules:[\n        {\n          test:/\\.vue$/,\n          use:['vue-loader']\n        },\n        {\n          test:/\\.js$/,\n          use:{\n            loader:'babel-loader',\n            options:{\n              presets:[\n                ['@babel/preset-env']\n              ]\n            }\n          }\n        },\n        {\n          test:/\\.css$/,\n          use: ['vue-style-loader','css-loader',{\n            loader:'postcss-loader',\n            options:{\n              plugins:[require('autoprefixer')]\n            }\n          }]\n        },\n        {\n          test:/\\.less$/,\n          use: ['vue-style-loader','css-loader',{\n            loader:'postcss-loader',\n            options:{\n              plugins:[require('autoprefixer')]\n            }\n          },'less-loader']\n        }\n      ]\n    },\n    resolve:{\n      alias:{\n        'vue$':'vue/dist/vue.runtime.esm.js',\n        ' @':path.resolve(__dirname,'../src')\n      },\n      extensions:['*','.js','.json','.vue']\n    },\n    devServer:{\n      port:3000,\n      hot:true,\n      contentBase:'../dist'\n    },\n    plugins:[\n      new CleanWebpackPlugin(),\n      new HtmlWebpackPlugin({\n        template:path.resolve(__dirname,'../public/index.html'),\n        filename:'index.html'\n      }),\n      new vueLoaderPlugin(),\n      new Webpack.HotModuleReplacementPlugin()\n    ]\n}\n```\n### 配置打包命令\n``` json\n\"script\":{\n  \"dev\":\"webpack-dev-server --config build/webpack.config.js --open\",\n  \"build\":\"webpack --config build/webpack.config.js\"\n}\n```\n打包文件已经配置完毕，接下来让我们测试一下\n首先在 `src` 新建一个 `main.js`\n``` js\n// main.js\nimport Vue from 'vue'\nimport App from './app'\nnew Vue({\n  render:h=>h(App)\n}).$mount('#app')\n```\n新建一个 `App.vue`\n\n``` js\n// App.vue\n<template>\n  <div id='container'></div>\n</template>\n<script>\nexport default {\n  data(){\n    return {\n      initData:''\n    }\n  }\n}\n</script>\n<style scoped>\n#container{\n  width:100%;\n  height:100%;\n}\n</style>\n```\n新建一个 `public` 文件夹，里面新建一个 `index.html`\n\n``` html\n// index.html\n<!DOCTYPE html>\n<html lang='en'>\n  <head>\n    <meta charset='utf-8'>\n    <meta name='viewport' content=\"width=device-width,initial-scale=1.0\">\n    <meta http-equiv='X-UA-Compatible' content='ie=edge'>\n    <title>lao li</title>\n  </head>\n  <body>\n    <div id='app'></div>\n  </body>\n</html>\n```\n执行 `npm run dev` 这时候如果浏览器出现 `Vue` 开发环境运行成功，那么恭喜你，已经成功迈出了第一步\n\n### 区分开发环境与生产环境\n实际应用到项目中，我们需要区分开发环境与生产环境，我们在原来 `webpack.config.js` 的基础上再新增两个文件\n\n***`webpack.dev.js` 开发环境配置文件***\n开发环境主要实现的是热更新,不要压缩代码，完整的 `sourceMap`\n***`webpack.prod.js`生产环境配置文件***\n生产环境主要实现的是压缩代码、提取 `css` 文件、合理的 `sourceMap` 、分割代码\n需要安装以下模块:\n``` js\nnpm i -D  webpack-merge copy-webpack-plugin optimize-css-assets-webpack-plugin uglifyjs-webpack-plugin\n```\n- `webpack-merge` 合并配置\n- `copy-webpack-plugin` 拷贝静态资源\n- `optimize-css-assets-webpack-plugin` 压缩 `css`\n- `uglifyjs-webpack-plugin` 压缩js\n\n> `webpack` `mode` 设置 `production` 的时候会自动压缩 `js` 代码。\n原则上不需要引入 `uglifyjs-webpack-plugin` 进行重复工作。\n但是 `optimize-css-assets-webpack-plugin `压缩 `css` 的同时会破坏原有的 `js` 压缩，所以这里我们引入 `uglifyjs` 进行压缩\n\n``` js\n// webpack.config.js\nconst path = require('path')\nconst {CleanWebpackPlugin} = require('clean-webpack-plugin')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst vueLoaderPlugin = require('vue-loader/lib/plugin')\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\")\nconst devMode = process.argv.indexOf('--mode=production') === -1;\nmodule.exports = {\n  entry:{\n    main:path.resolve(__dirname,'../src/main.js')\n  },\n  output:{\n    path:path.resolve(__dirname,'../dist'),\n    filename:'js/[name].[hash:8].js',\n    chunkFilename:'js/[name].[hash:8].js'\n  },\n  module:{\n    rules:[\n      {\n        test:/\\.js$/,\n        use:{\n          loader:'babel-loader',\n          options:{\n            presets:['@babel/preset-env']\n          }\n        },\n        exclude:/node_modules/\n      },\n      {\n        test:/\\.vue$/,\n        use:['cache-loader','thread-loader',{\n          loader:'vue-loader',\n          options:{\n            compilerOptions:{\n              preserveWhitespace:false\n            }\n          }\n        }]\n      },\n      {\n        test:/\\.css$/,\n        use:[{\n          loader: devMode ? 'vue-style-loader' : MiniCssExtractPlugin.loader,\n          options:{\n            publicPath:\"../dist/css/\",\n            hmr:devMode\n          }\n        },'css-loader',{\n          loader:'postcss-loader',\n          options:{\n            plugins:[require('autoprefixer')]\n          }\n        }]\n      },\n      {\n        test:/\\.less$/,\n        use:[{\n          loader:devMode ? 'vue-style-loader' : MiniCssExtractPlugin.loader,\n          options:{\n            publicPath:\"../dist/css/\",\n            hmr:devMode\n          }\n        },'css-loader','less-loader',{\n          loader:'postcss-loader',\n          options:{\n            plugins:[require('autoprefixer')]\n          }\n        }]\n      },\n      {\n        test:/\\.(jep?g|png|gif)$/,\n        use:{\n          loader:'url-loader',\n          options:{\n            limit:10240,\n            fallback:{\n              loader:'file-loader',\n              options:{\n                name:'img/[name].[hash:8].[ext]'\n              }\n            }\n          }\n        }\n      },\n      {\n        test:/\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,\n        use:{\n          loader:'url-loader',\n          options:{\n            limit:10240,\n            fallback:{\n              loader:'file-loader',\n              options:{\n                name:'media/[name].[hash:8].[ext]'\n              }\n            }\n          }\n        }\n      },\n      {\n        test:/\\.(woff2?|eot|ttf|otf)(\\?.*)?$/i,\n        use:{\n          loader:'url-loader',\n          options:{\n            limit:10240,\n            fallback:{\n              loader:'file-loader',\n              options:{\n                name:'media/[name].[hash:8].[ext]'\n              }\n            }\n          }\n        }\n      }\n    ]\n  },\n  resolve:{\n    alias:{\n      'vue$':'vue/dist/vue.runtime.esm.js',\n      ' @':path.resolve(__dirname,'../src')\n    },\n    extensions:['*','.js','.json','.vue']\n  },\n  plugins:[\n    new CleanWebpackPlugin(),\n    new HtmlWebpackPlugin({\n      template:path.resolve(__dirname,'../public/index.html')\n    }),\n    new vueLoaderPlugin(),\n    new MiniCssExtractPlugin({\n      filename: devMode ? '[name].css' : '[name].[hash].css',\n      chunkFilename: devMode ? '[id].css' : '[id].[hash].css'\n    })\n  ]\n}\n```\n``` js\n// webpack.dev.js\nconst Webpack = require('webpack')\nconst webpackConfig = require('./webpack.config.js')\nconst WebpackMerge = require('webpack-merge')\n\nmodule.exports = WebpackMerge(webpackConfig,{\n  mode:'development',\n  devtool:'cheap-module-eval-source-map',\n  devServer:{\n    port:3000,\n    hot:true,\n    contentBase:'../dist'\n  },\n  plugins:[\n    new Webpack.HotModuleReplacementPlugin()\n  ]\n})\n```\n``` js\n// webpack.prod.js\nconst path = require('path')\nconst webpackConfig = require('./webpack.config.js')\nconst WebpackMerge = require('webpack-merge')\n\nconst CopyWebpackPlugin = require('copy-webpack-plugin')\nconst OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin')\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin')\n\nmodule.exports = WebpackMerge(webpackConfig,{\n  mode:'production',\n  devtool:'cheap-module-source-map',\n  plugins:[\n    new CopyWebpackPlugin([{\n      from:path.resolve(__dirname,'../public'),\n      to:path.resolve(__dirname,'../dist')\n    }]),\n  ],\n  optimization:{\n    minimizer:[\n      new UglifyJsPlugin({//压缩js\n        cache:true,\n        parallel:true,\n        sourceMap:true\n    }),\n    new OptimizeCssAssetsPlugin({})\n    ],\n    splitChunks:{\n      chunks:'all',\n      cacheGroups:{\n        libs: {\n          name: \"chunk-libs\",\n          test: /[\\\\/]node_modules[\\\\/]/,\n          priority: 10,\n          chunks: \"initial\" // 只打包初始时依赖的第三方\n        }\n      }\n    }\n  }\n})\n```\n\n## 优化webpack配置\n看到这里你或许有些累了，但是要想获取更好的offer,更高的薪水，下面必须继续深入\n\n优化配置对我们来说非常有实际意义，这实际关系到你打包出来文件的大小，打包的速度等。\n具体优化可以分为以下几点：\n\n### 优化打包速度\n> 构建速度指的是我们每次修改代码后热更新的速度以及发布前打包文件的速度。\n\n#### 合理的配置 mode 参数与 devtool 参数\n\n[devtool 可设置的值](https://www.webpackjs.com/configuration/devtool/)\n`mode` 可设置 `development` `production` 两个参数\n\n如果没有设置， `webpack4` 会将 `mode` 的默认值设置为 `production`\n- `production` ：将 `process.env.NODE_ENV` 的值设置为 `production` ，启用 `FlagDependencyUsagePlugin`, `FlagIncludedChunksPlugin`, `ModuleConcatenationPlugin`, `NoEmitOnErrorsPlugin`, `OccurrenceOrderPlugin`, `SideEffectsFlagPlugin` 和 `UglifyJsPlugin`,会进行 `tree shaking` (去除无用代码)和 `uglifyjs` (代码压缩混淆)\n- `development` ：将 `process.env.NODE_ENV` 的值设置为 `development` ，启用 `NamedChunksPlugin` 和 `NamedModulesPlugin`\n\n#### 缩小文件的搜索范围(配置include exclude alias noParse extensions)\n- `alias`  当我们代码中出现 import 'vue'时， webpack会采用向上递归搜索的方式去node_modules 目录下找。为了减少搜索范围我们可以直接告诉webpack去哪个路径下查找。也就是别名(alias)的配置。\n- `include` `exclude`  同样配置include exclude也可以减少webpack loader的搜索转换时间。\n- `noParse`  当我们代码中使用到 `import jq from 'jquery'` 时， `webpack` 会去解析 `jq` 这个库是否有依赖其他的包。但是我们对类似 `jquery` 这类依赖库，一般会认为不会引用其他的包(特殊除外,自行判断)。增加 `noParse` 属性,告诉 `webpack` 不必解析，以此增加打包速度。\n- `extensions`  `webpack` 会根据 `extensions` 定义的后缀查找文件(频率较高的文件类型优先写在前面)\n\n![配图](https://pic1.zhimg.com/80/v2-6fd8b21b8e9d9b18a596bd9dc6025a18_720w.jpg)\n\n#### 使用HappyPack开启多进程Loader转换\n> 在 `webpack` 构建过程中，实际上耗费时间大多数用在 `loader` 解析转换以及代码的压缩中。日常开发中我们需要使用 `Loader` 对 `js` ， `css` ，图片，字体等文件做转换操作，并且转换的文件数据量也是非常大。由于js单线程的特性使得这些转换操作不能并发处理文件，而是需要一个个文件进行处理。 `HappyPack` 的基本原理是将这部分任务分解到多个子进程中去并行处理，子进程处理完成后把结果发送到主进程中，从而减少总的构建时间\n``` js\nnpm i -D happypack\n```\n\n![happypack](https://pic2.zhimg.com/v2-ebcaa0bea4e7ec24c3e3e65439998fe5_r.jpg)\n\n#### 使用 webpack-parallel-uglify-plugin 增强代码压缩\n上面对于 `loader` 转换已经做优化，那么下面还有另一个难点就是优化代码的压缩时间。\n``` js\nnpm i -D webpack-parallel-uglify-plugin\n```\n![webpack-parallel-uglify-plugin](https://pic2.zhimg.com/80/v2-38bc4d4b3120096478a411f374457a1d_720w.jpg)\n\n#### 抽离第三方模块\n> 对于开发项目中不经常会变更的静态依赖文件。类似于我们的 `elementUi` 、 `vue` 全家桶等等。因为很少会变更，所以我们不希望这些依赖要被集成到每一次的构建逻辑中去。 这样做的好处是每次更改我本地代码的文件的时候， `webpack` 只需要打包我项目本身的文件代码，而不会再去编译第三方库。以后只要我们不升级第三方包的时候，那么 `webpack` 就不会对这些库去打包，这样可以快速的提高打包的速度。\n\n这里我们使用 `webpack` 内置的 `DllPlugin` `DllReferencePlugin` 进行抽离\n\n在与 `webpack` 配置文件同级目录下新建 `webpack.dll.config.js`\n代码如下\n``` js\n// webpack.dll.config.js\nconst path = require(\"path\");\nconst webpack = require(\"webpack\");\nmodule.exports = {\n  // 你想要打包的模块的数组\n  entry: {\n    vendor: ['vue','element-ui'] \n  },\n  output: {\n    path: path.resolve(__dirname, 'static/js'), // 打包后文件输出的位置\n    filename: '[name].dll.js',\n    library: '[name]_library' \n     // 这里需要和webpack.DllPlugin中的`name: '[name]_library',`保持一致。\n  },\n  plugins: [\n    new webpack.DllPlugin({\n      path: path.resolve(__dirname, '[name]-manifest.json'),\n      name: '[name]_library', \n      context: __dirname\n    })\n  ]\n};\n```\n在 `package.json` 中配置如下命令\n``` js\n\"dll\": \"webpack --config build/webpack.dll.config.js\"\n```\n\n接下来在我们的 `webpack.config.js` 中增加以下代码\n\n``` js\nmodule.exports = {\n  plugins: [\n    new webpack.DllReferencePlugin({\n      context: __dirname,\n      manifest: require('./vendor-manifest.json')\n    }),\n    new CopyWebpackPlugin([ // 拷贝生成的文件到dist目录 这样每次不必手动去cv\n      {from: 'static', to:'static'}\n    ]),\n  ]\n};\n```\n执行\n```\nnpm run dll\n```\n\n会发现生成了我们需要的集合第三地方\n代码的 `vendor.dll.js`\n我们需要在html文件中手动引入这个js文件\n\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>老yuan</title>\n  <script src=\"static/js/vendor.dll.js\"></script>\n</head>\n<body>\n  <div id=\"app\"></div>\n</body>\n</html>\n```\n这样如果我们没有更新第三方依赖包，就不必 `npm run dll` 。直接执行 `npm run dev`  `npm run build` 的时候会发现我们的打包速度明显有所提升。因为我们已经通过 `dllPlugin` 将第三方依赖包抽离出来了。\n\n#### 配置缓存\n> 我们每次执行构建都会把所有的文件都重复编译一遍，这样的重复工作是否可以被缓存下来呢，答案是可以的，目前大部分 `loader` 都提供了 `cache` 配置项。比如在 `babel-loader` `中，可以通过设置cacheDirectory` 来开启缓存，`babel-loader?cacheDirectory=true` 就会将每次的编译结果写进硬盘文件（默认是在项目根目录下的 `node_modules/.cache/babel-loader` 目录内，当然你也可以自定义）\n但如果 `loader` 不支持缓存呢？我们也有方法,我们可以通过 `cache-loader` ，它所做的事情很简单，就是 `babel-loader` 开启 `cache` 后做的事情，将 `loader` 的编译结果写入硬盘缓存。再次构建会先比较一下，如果文件较之前的没有发生变化则会直接使用缓存。使用方法如官方 `demo` 所示，在一些性能开销较大的 `loader` 之前添加此 `loader` 即可\n\n``` js\nnpm i -D cache-loader\n```\n![cache-loader](https://pic3.zhimg.com/80/v2-e00ab48297af32f344070b5637ba88ca_720w.jpg)\n\n### 优化打包文件体积\n打包的速度我们是进行了优化，但是打包后的文件体积却是十分大，造成了页面加载缓慢，浪费流量等，接下来让我们从文件体积上继续优化\n#### 引入webpack-bundle-analyzer分析打包后的文件\n`webpack-bundle-analyzer` 将打包后的内容束展示为方便交互的直观树状图，让我们知道我们所构建包中真正引入的内容\n\n``` js\nnpm i -D webpack-bundle-analyzer\n```\n![webpack-bundle-analyzer](https://pic3.zhimg.com/v2-b23299204561718ba4636aeff9f71d6e_r.jpg)\n\n接下来在 `package.json` 里配置启动命令\n``` json\n\"analyz\": \"NODE_ENV=production npm_config_report=true npm run build\"\n```\n`windows` 请安装 `npm i -D cross-env`\n``` json\n\"analyz\": \"cross-env NODE_ENV=production npm_config_report=true npm run build\"\n```\n接下来 `npm run analyz` 浏览器会自动打开文件依赖图的网页\n\n#### externals\n> 按照官方文档的解释，如果我们想引用一个库，但是又不想让 `webpack` 打包，并且又不影响我们在程序中以 `CMD` 、 `AMD` 或者 `window`/`global` 全局等方式进行使用，那就可以通过配置 `Externals` 。这个功能主要是用在创建一个库的时候用的，但是也可以在我们项目开发中充分使用`Externals` 的方式，我们将这些不需要打包的静态资源从构建逻辑中剔除出去，而使用 `CDN`的方式，去引用它们。\n有时我们希望我们通过 `script` 引入的库，如用 `CDN` 的方式引入的 `jquery` ，我们在使用时，依旧用 `require` 的方式来使用，但是却不希望 `webpack` 将它又编译进文件中。这里官网案例已经足够清晰明了，大家有兴趣可以点击了解\n[webpack](https://link.zhihu.com/?target=https%3A//webpack.js.org/configuration/externals/%23root)\n官网案例如下\n``` js\n<script\n  src=\"https://code.jquery.com/jquery-3.1.0.js\"\n  integrity=\"sha256-slogkvB1K3VOkzAI8QITxV3VzpOnkeNVsKvtkYLMjfk=\"\n  crossorigin=\"anonymous\">\n</script>\nmodule.exports = {\n  //...\n  externals: {\n    jquery: 'jQuery'\n  }\n};\nimport $ from 'jquery';\n$('.my-element').animate(/* ... */);\n```\n#### Tree-shaking\n> 这里单独提一下 `tree-shaking` ,是因为这里有个坑。 `tree-shaking` 的主要作用是用来清除代码中无用的部分。目前在 `webpack4` 我们设置 `mode` 为 `production` 的时候已经自动开启了`tree-shaking` 。但是要想使其生效，生成的代码必须是`ES6`模块。不能使用其它类型的模块如 `CommonJS` 之流。如果使用 `Babel` 的话，这里有一个小问题，因为 `Babel` 的预案（ `preset` ）默认会将任何模块类型都转译成 `CommonJS` 类型。修正这个问题也很简单，在 `.babelrc` 文件或在 `webpack.config.js` 文件中设置 `modules:false` 就好了\n\n``` js\n// .babelrc\n{\n  \"presets\": [\n    [\"@babel/preset-env\",\n      {\n        \"modules\": false\n      }\n    ]\n  ]\n}\n```\n或者\n``` js\n// webpack.config.js\n\nmodule: {\n  rules: [\n    {\n      test: /\\.js$/,\n      use: {\n        loader: 'babel-loader',\n        options: {\n          presets: ['@babel/preset-env', { modules: false }]\n        }\n      }，\n      exclude: /(node_modules)/\n    }\n  ]\n}\n```\n\n经历过上面两个系列的洗礼，到现在我们成为了一名合格的 `webpack` 配置工程师。但是光拧螺丝，自身的可替代性还是很高，下面我们将深入 `webpack` 的原理中去\n## 手写webpack系列\n经历过上面两个部分，我们已经可以熟练的运用相关的 `loader` 和 `plugin` 对我们的代码进行转换、解析。接下来我们自己手动实现 `loader` 与 `plugin` ，使其在平时的开发中获得更多的乐趣。\n### 手写 webpack loader\n> `loader` 从本质上来说其实就是一个 `node` 模块。相当于一台榨汁机( `loader` )将相关类型的文件代码( `code` )给它。根据我们设置的规则，经过它的一系列加工后还给我们加工好的果汁( `code` )。\n#### `loader` 编写原则\n- 单一原则: 每个 `Loader` 只做一件事；\n- 链式调用: `Webpack` 会按顺序链式调用每个 `Loader` ；\n- 统一原则: 遵循 `Webpack` 制定的设计规则和结构，输入与输出均为字符串，各个 `Loader` 完全独立，即插即用；\n\n在日常开发环境中，为了方便调试我们往往会加入许多 `console` 打印。但是我们不希望在生产环境中存在打印的值。那么这里我们自己实现一个 `loader` 去除代码中的 `console`\n\n> 知识点普及之 `AST` 。 `AST` 通俗的来说，假设我们有一个文件 `a.js` ,我们对 `a.js` 里面的1000行进行一些操作处理,比如为所有的 `await` 增加 `try catch` ,以及其他操作，但是 `a.js` 里面的代码本质上来说就是一堆字符串。那我们怎么办呢，那就是转换为带标记信息的对象(抽象语法树)我们方便进行增删改查。这个带标记的对象(抽象语法树)就是AST。这里推荐一篇不错的AST文章 [AST快速入门](https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000016231512)\n\n\n``` js\nnpm i -D @babel/parser @babel/traverse @babel/generator @babel/types\n```\n- @babel/parser 将源代码解析成 `AST`\n- @babel/traverse 对 `AST` 节点进行递归遍历，生成一个便于操作、转换的 `path` 对象\n- @babel/generator 将 `AST` 解码生成 `js` 代码\n- @babel/types 通过该模块对具体的 `AST` 节点进行进行增、删、改、查\n\n新建 `drop-console.js`\n\n``` js\nconst parser = require('@babel/parser')\nconst traverse = require('@babel/traverse').default\nconst generator = require('@babel/generator').default\nconst t = require('@babel/types')\nmodule.exports=function(source){\n  const ast = parser.parse(source,{ sourceType: 'module'})\n  traverse(ast,{\n    CallExpression(path){ \n      if(t.isMemberExpression(path.node.callee) && t.isIdentifier(path.node.callee.object, {name: \"console\"})){\n        path.remove()\n      }\n    }\n  })\n  const output = generator(ast, {}, source);\n  return output.code\n}\n```\n如何使用\n\n``` js\nconst path = require('path')\nmodule.exports = {\n  mode:'development',\n  entry:path.resolve(__dirname,'index.js'),\n  output:{\n    filename:'[name].[contenthash].js',\n    path:path.resolve(__dirname,'dist')\n  },\n  module:{\n    rules:[{\n      test:/\\.js$/,\n      use:path.resolve(__dirname,'drop-console.js')\n      }\n    ]\n  }\n}\n```\n> 实际上在 `webpack4` 中已经集成了去除 `console` 功能，在 `minimizer` 中可配置 [去除console](https://link.zhihu.com/?target=https%3A//webpack.js.org/plugins/terser-webpack-plugin/%23root)\n附上官网 [如何编写一个loader](https://link.zhihu.com/?target=https%3A//webpack.docschina.org/contribute/writing-a-loader/)\n\n### 手写webpack plugin\n> 在 `Webpack` 运行的生命周期中会广播出许多事件， `Plugin` 可以监听这些事件，在合适的时机通过 `Webpack` 提供的 `API` 改变输出结果。\n通俗来说：一盘美味的 盐豆炒鸡蛋 需要经历烧油 炒制 调味到最后的装盘等过程，而 `plugin` 相当于可以监控每个环节并进行操作，比如可以写一个少放胡椒粉 `plugin` ,监控 `webpack` 暴露出的生命周期事件(调味)，在调味的时候执行少放胡椒粉操作。\n那么它与 `loader` 的区别是什么呢？上面我们也提到了 `loader` 的单一原则, `loader` 只能一件事，比如说 `less-loader` ,只能解析 `less` 文件， `plugin` 则是针对整个流程执行广泛的任务。\n\n一个基本的 `plugin` 插件结构如下\n\n``` js\nclass firstPlugin {\n  constructor (options) {\n    console.log('firstPlugin options', options)\n  }\n  apply (compiler) {\n    compiler.plugin('done', compilation => {\n      console.log('firstPlugin')\n    ))\n  }\n}\n\nmodule.exports = firstPlugin\n```\n> `compiler` 、 `compilation` 是什么？\n- `compiler` 对象包含了 `Webpack` 环境所有的的配置信息。这个对象在启动 `webpack` 时被一次性建立，并配置好所有可操作的设置，包括 `options` ， `loader` 和 `plugin` 。当在 `webpack` 环境中应用一个插件时，插件将收到此 `compiler` 对象的引用。可以使用它来访问 `webpack` 的主环境。\n- `compilation` 对象包含了当前的模块资源、编译生成资源、变化的文件等。当运行 `webpack` 开发环境中间件时，每当检测到一个文件变化，就会创建一个新的 `compilation` ，从而生成一组新的编译资源。 `compilation` 对象也提供了很多关键时机的回调，以供插件做自定义处理时选择使用。\n\n***`compiler` 和 `compilation` 的区别在于***\n\n- `compiler` 代表了整个 `webpack` 从启动到关闭的生命周期，而 `compilation` 只是代表了一次新的编译过程\n- `compiler` 和 `compilation` 暴露出许多钩子，我们可以根据实际需求的场景进行自定义处理\n\n[compiler钩子文档](hhttps://www.webpackjs.com/api/compiler-hooks/)\n[compilation钩子文档](https://www.webpackjs.com/api/compilation-hooks/)\n\n下面我们手动开发一个简单的需求,在生成打包文件之前自动生成一个关于打包出文件的大小信息\n新建一个 `webpack-firstPlugin.js`\n\n``` js\nclass firstPlugin{\n  constructor(options){\n    this.options = options\n  }\n  apply(compiler){\n    compiler.plugin('emit',(compilation,callback)=>{\n      let str = ''\n      for (let filename in compilation.assets){\n        str += `文件:${filename}  大小${compilation.assets[filename]['size']()}\\n`\n      }\n      // 通过compilation.assets可以获取打包后静态资源信息，同样也可以写入资源\n      compilation.assets['fileSize.md'] = {\n        source:function(){\n          return str\n        },\n        size:function(){\n          return str.length\n        }\n      }\n      callback()\n    })\n  }\n}\nmodule.exports = firstPlugin\n```\n如何使用\n``` js\nconst path = require('path')\nconst firstPlugin = require('webpack-firstPlugin.js')\nmodule.exports = {\n    // 省略其他代码\n    plugins:[\n        new firstPlugin()\n    ]\n}\n```\n执行 `npm run build` 即可看到在 `dist` 文件夹中生成了一个包含打包文件信息的 `fileSize.md`\n\n> 上面两个 `loader` 与 `plugin` 案例只是一个引导，实际开发需求中的 `loader` 与 `plugin` 要考虑的方面很多，建议大家自己多动手尝试一下。\n\n附上官网 [如何编写一个plugin](https://www.webpackjs.com/contribute/writing-a-plugin/)\n\n## webpack5.0的时代\n无论是前端框架还是构建工具的更新速度远远超乎了我们的想象,前几年的 `jquery` 一把梭的时代一去不复返。我们要拥抱的是不断更新迭代的 `vue` 、 `react` 、 `node` 、 `serverless` 、 `docker` 、 `k8s` ....\n不甘落后的 `webpack` 也已经在近日发布了 `webpack 5.0.0 beta 10` 版本。在之前作者也曾提过 `webpack5.0` 旨在减少配置的复杂度，使其更容易上手( `webpack4` 的时候也说了这句话)，以及一些性能上的提升\n\n- 使用持久化缓存提高构建性能；\n- 使用更好的算法和默认值改进长期缓存（long-term caching）；\n- 清理内部结构而不引入任何破坏性的变化；\n- 引入一些breaking changes，以便尽可能长的使用v5版本。\n\n目前来看，维护者的更新很频繁，相信用不了多久webpack5.0将会拥抱大众。感兴趣的同学可以先安装beta版本尝尝鲜。不过在此之前建议大家先对webpack4进行一番掌握,这样后面的路才会越来越好走。\n\n## 更多阅读\n[webpack中文](https://webpack.docschina.org/)\n[webpackjs](https://www.webpackjs.com/configuration/)\n[4W字长文带你深度解锁Webpack系列(上)](https://mp.weixin.qq.com/s/OBUcxEFXKQQubP08LO2Uhg)","slug":"webpack-learning-1","published":1,"updated":"2020-04-02T03:20:12.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs5z007iooa674dbf19j","content":"<h1 id=\"推荐序\"><a href=\"#推荐序\" class=\"headerlink\" title=\"推荐序\"></a>推荐序</h1><p>这里是我自己写的，看了这篇文章把我零碎的 <code>webpack</code> 知识系统的整理了一下，感觉受益匪浅，推荐更多小伙伴看一看这篇文章，好文共享，建议稍微对 <code>webpack</code> 了解服用更佳。<br><a href=\"https://zhuanlan.zhihu.com/p/99959392\" target=\"_blank\" rel=\"noopener\">2020年了,再不会webpack敲得代码就不香了(近万字实战)</a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>2020年即将到来,在众多前端的招聘要求里, <code>webpack</code> 、工程化这些字眼频率越来越高。日常开发者中，我们常常在用诸如 <code>vue-cli</code> 、 <code>create-react-app</code>  的脚手架来构建我们的项目。但是如果你想在团队脱颖而出(鹤立鸡群)、拿到更好的 <code>offer</code> (还房贷)，那么你必须去深刻的认识下我们经常打交道的 <code>webpack</code></p>\n<h2 id=\"入门-一起来用这些小例子让你熟悉webpack的配置\"><a href=\"#入门-一起来用这些小例子让你熟悉webpack的配置\" class=\"headerlink\" title=\"入门(一起来用这些小例子让你熟悉webpack的配置)\"></a>入门(一起来用这些小例子让你熟悉webpack的配置)</h2><h3 id=\"webpack-是什么？\"><a href=\"#webpack-是什么？\" class=\"headerlink\" title=\"webpack 是什么？\"></a>webpack 是什么？</h3><p><code>webpack</code> 是一个现代 <code>JavaScript</code> 应用程序的静态模块打包器，当 <code>webpack</code> 处理应用程序时，会递归构建一个依赖关系图，其中包含应用程序需要的每个模块，然后将这些模块打包成一个或多个 <code>bundle</code> 。</p>\n<h3 id=\"webpack-的核心概念\"><a href=\"#webpack-的核心概念\" class=\"headerlink\" title=\"webpack 的核心概念\"></a>webpack 的核心概念</h3><ul>\n<li><code>entry</code>: 入口</li>\n<li><code>output</code>: 输出</li>\n<li><code>loader</code>: 模块转换器，用于把模块原内容按照需求转换成新内容</li>\n<li><code>plugins</code>: 扩展插件，在 <code>webpack</code> 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要做的事情</li>\n</ul>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><p>新建一个目录，初始化 <code>npm</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack</code> 是运行在 <code>node</code> 环境中的,我们需要安装以下两个 <code>npm</code> 包</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D webpack webpack-cli</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li><code>npm i -D</code> 为 <code>npm install --save-dev</code> 的缩写</li>\n<li><code>npm i -S</code> 为 <code>npm install --save</code> 的缩写</li>\n</ul>\n</blockquote>\n<p>新建一个文件夹 <code>src</code> ,然后新建一个文件 <code>main.js</code> ,写一点代码测试一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'call me 老yuan'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>配置 <code>package.json</code> 命令</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"script\":&#123;</span><br><span class=\"line\">  \"build\":\"webpack src/main.js\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<p>此时如果生成了一个 <code>dist</code> 文件夹，并且内部含有 <code>main.js</code> 说明已经打包成功了</p>\n<h3 id=\"开始我们自己的配置\"><a href=\"#开始我们自己的配置\" class=\"headerlink\" title=\"开始我们自己的配置\"></a>开始我们自己的配置</h3><p>上面一个简单的例子只是 <code>webpack</code> 自己默认的配置，下面我们要实现更加丰富的自定义配置</p>\n<p>新建一个 <code>build</code> 文件夹,里面新建一个 <code>webpack.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    mode:<span class=\"string\">'development'</span>, <span class=\"comment\">// 开发模式</span></span><br><span class=\"line\">    entry: path.resolve(__dirname,<span class=\"string\">'../src/main.js'</span>),    <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'output.js'</span>,      <span class=\"comment\">// 打包后的文件名称</span></span><br><span class=\"line\">        path: path.resolve(__dirname,<span class=\"string\">'../dist'</span>)  <span class=\"comment\">// 打包后的目录</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更改我们的打包命令</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"script\":&#123;</span><br><span class=\"line\">  \"build\":\"webpack build/webpack.config.js\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行 <code>npm run build</code><br>会发现生成了以下目录</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">project</span><br><span class=\"line\">  dist</span><br><span class=\"line\">  build</span><br><span class=\"line\">  src</span><br></pre></td></tr></table></figure>\n<p>其中 <code>dist</code> 文件夹中的 <code>main.js</code> 就是我们需要在浏览器中实际运行的文件<br>当然实际运用中不会仅仅如此,下面让我们通过实际案例带你快速入手 <code>webpack</code></p>\n<h3 id=\"配置html模板\"><a href=\"#配置html模板\" class=\"headerlink\" title=\"配置html模板\"></a>配置html模板</h3><p><code>js</code> 文件打包好了,但是我们不可能每次在html文件中手动引入打包好的js</p>\n<blockquote>\n<p>这里可能有的朋友会认为我们打包 <code>js</code> 文件名称不是一直是固定的嘛( <code>output.js</code> )？这样每次就不用改动引入文件名称了呀？实际上我们日常开发中往往会这样配置:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 省略其他配置</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'[name].[hash:8].js'</span>,      <span class=\"comment\">// 打包后的文件名称</span></span><br><span class=\"line\">      path: path.resolve(__dirname,<span class=\"string\">'../dist'</span>)  <span class=\"comment\">// 打包后的目录</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候生成的 <code>dist</code> 目录文件如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dist/</span><br><span class=\"line\">  app.fsafasf.js</span><br></pre></td></tr></table></figure>\n<p>为了缓存，你会发现打包好的 <code>js</code> 文件的名称每次都不一样。 <code>webpack</code> 打包出来的js文件我们需要引入到 <code>html</code> 中，但是每次我们都手动修改 <code>js</code> 文件名显得很麻烦，因此我们需要一个插件来帮我们完成这件事情，那就是 <code>html-webpack-plugin</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D html-webpack-plugin</span><br></pre></td></tr></table></figure>\n<p>新建一个 <code>build</code> 同级的文件夹 <code>public</code> ,里面新建一个 <code>index.html</code><br>具体配置文件如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>) <span class=\"comment\">// **此插件用来解决html模板引入js文件</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    mode:<span class=\"string\">'development'</span>, <span class=\"comment\">// 开发模式</span></span><br><span class=\"line\">    entry: path.resolve(__dirname,<span class=\"string\">'../src/main.js'</span>),    <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'[name].[hash:8].js'</span>,      <span class=\"comment\">// 打包后的文件名称</span></span><br><span class=\"line\">      path: path.resolve(__dirname,<span class=\"string\">'../dist'</span>)  <span class=\"comment\">// 打包后的目录</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins:[</span><br><span class=\"line\">      <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">        template:path.resolve(__dirname,<span class=\"string\">'../public/index.html'</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以发现打包生成的js文件已经被自动引入 <code>html</code> 文件中</p>\n<h4 id=\"多入口文件如何开发\"><a href=\"#多入口文件如何开发\" class=\"headerlink\" title=\"多入口文件如何开发\"></a>多入口文件如何开发</h4><blockquote>\n<p>生成多个 <code>html-webpack-plugin</code> 实例来解决这个问题</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    mode:<span class=\"string\">'development'</span>, <span class=\"comment\">// 开发模式</span></span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">      main:path.resolve(__dirname,<span class=\"string\">'../src/main.js'</span>),</span><br><span class=\"line\">      header:path.resolve(__dirname,<span class=\"string\">'../src/header.js'</span>)</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'[name].[hash:8].js'</span>,      <span class=\"comment\">// 打包后的文件名称</span></span><br><span class=\"line\">      path: path.resolve(__dirname,<span class=\"string\">'../dist'</span>)  <span class=\"comment\">// 打包后的目录</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins:[</span><br><span class=\"line\">      <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">        template:path.resolve(__dirname,<span class=\"string\">'../public/index.html'</span>),</span><br><span class=\"line\">        filename:<span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">        chunks:[<span class=\"string\">'main'</span>] <span class=\"comment\">// 与入口文件对应的模块名</span></span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">        template:path.resolve(__dirname,<span class=\"string\">'../public/header.html'</span>),</span><br><span class=\"line\">        filename:<span class=\"string\">'header.html'</span>,</span><br><span class=\"line\">        chunks:[<span class=\"string\">'header'</span>] <span class=\"comment\">// 与入口文件对应的模块名</span></span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"clean-webpack-plugin\"><a href=\"#clean-webpack-plugin\" class=\"headerlink\" title=\"clean-webpack-plugin\"></a>clean-webpack-plugin</h4><blockquote>\n<p>每次执行 <code>npm run build</code> 会发现 <code>dist</code> 文件夹里会残留上次打包的文件，这里我们推荐一个 <code>plugin</code> 来帮我们在打包输出前清空文件夹 <code>clean-webpack-plugin</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;CleanWebpackPlugin&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...省略其他配置</span></span><br><span class=\"line\">    plugins:[<span class=\"keyword\">new</span> CleanWebpackPlugin()]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"希望dist目录下某个文件夹不被清空\"><a href=\"#希望dist目录下某个文件夹不被清空\" class=\"headerlink\" title=\"希望dist目录下某个文件夹不被清空\"></a>希望dist目录下某个文件夹不被清空</h5><p>不过呢，有些时候，我们并不希望整个 dist 目录都被清空，比如，我们不希望，每次打包的时候，都删除 <code>dll</code> 目录，以及 <code>dll</code> 目录下的文件或子目录，该怎么办呢？</p>\n<p><code>clean-webpack-plugin</code> 为我们提供了参数 <code>cleanOnceBeforeBuildPatterns</code> 。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin(&#123;</span><br><span class=\"line\">            cleanOnceBeforeBuildPatterns:[<span class=\"string\">'**/*'</span>, <span class=\"string\">'!dll'</span>, <span class=\"string\">'!dll/**'</span>] <span class=\"comment\">//不删除dll目录下的文件</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用CSS\"><a href=\"#引用CSS\" class=\"headerlink\" title=\"引用CSS\"></a>引用CSS</h3><p>我们的入口文件是 <code>js</code> ，所以我们在入口 <code>js</code> 中引入我们的 <code>css</code> 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'asset/style.css'</span></span><br></pre></td></tr></table></figure>\n<p>同时我们也需要一些 <code>loader</code> 来解析我们的 <code>css</code> 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D style-loader css-loader</span><br></pre></td></tr></table></figure>\n<p>如果我们使用 <code>less</code> 来构建样式，则需要多安装两个</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D less less-loader</span><br></pre></td></tr></table></figure>\n<p>配置文件如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...省略其他配置</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">      rules:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">          use:[<span class=\"string\">'style-loader'</span>,<span class=\"string\">'css-loader'</span>] <span class=\"comment\">// 从右向左解析原则</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test:<span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">          use:[<span class=\"string\">'style-loader'</span>,<span class=\"string\">'css-loader'</span>,<span class=\"string\">'less-loader'</span>] <span class=\"comment\">// 从右向左解析原则</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们简单说一下上面的配置：</p>\n<ul>\n<li><code>style-loader</code> 动态创建 <code>style</code> 标签，将 <code>css</code> 插入到 <code>head</code> 中.</li>\n<li><code>css-loader</code> 负责处理 <code>@import</code> 等语句。</li>\n<li><code>postcss-loader</code> 和 <code>autoprefixer</code> ，自动生成浏览器兼容性前缀 —— 2020了，应该没人去自己徒手去写浏览器前缀了吧</li>\n<li><code>less-loader</code> 负责处理编译 <code>.less</code> 文件,将其转为 <code>css</code></li>\n</ul>\n<blockquote>\n<p>注意：<br><code>loader</code> 的执行顺序是<strong><em>从右向左</em></strong>执行的，也就是后面的 <code>loader</code> 先执行，上面 <code>loader</code> 的执行顺序为: <code>less-loader</code> —&gt; <code>postcss-loader</code> —&gt; <code>css-loader</code> —&gt; <code>style-loader</code><br>当然，<code>loader</code> 其实还有一个参数，可以修改优先级，<code>enforce</code> 参数，其值可以为: <code>pre</code>(优先执行) 或 <code>post</code> (滞后执行)。<br>现在，我们已经可以处理 <code>.less</code> 文件啦，<code>.css</code> 文件只需要修改匹配规则，删除 <code>less-loader</code> 即可。</p>\n</blockquote>\n<h4 id=\"为css添加浏览器前缀\"><a href=\"#为css添加浏览器前缀\" class=\"headerlink\" title=\"为css添加浏览器前缀\"></a>为css添加浏览器前缀</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D postcss-loader autoprefixer</span><br></pre></td></tr></table></figure>\n<p>配置如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">        rules:[</span><br><span class=\"line\">            test/\\.less$/,</span><br><span class=\"line\">            use:[<span class=\"string\">'style-loader'</span>,<span class=\"string\">'css-loader'</span>,<span class=\"string\">'postcss-loader'</span>,<span class=\"string\">'less-loader'</span>] <span class=\"comment\">// 从右向左解析原则</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来，我们还需要引入 <code>autoprefixer</code> 使其生效,这里有两种方式</p>\n<h5 id=\"在项目根目录下创建一个postcss-config-js文件，配置如下：\"><a href=\"#在项目根目录下创建一个postcss-config-js文件，配置如下：\" class=\"headerlink\" title=\"在项目根目录下创建一个postcss.config.js文件，配置如下：\"></a>在项目根目录下创建一个postcss.config.js文件，配置如下：</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    plugins: [<span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)]  <span class=\"comment\">// 引用该插件即可了</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"直接在webpack-config-js里配置\"><a href=\"#直接在webpack-config-js里配置\" class=\"headerlink\" title=\"直接在webpack.config.js里配置\"></a>直接在webpack.config.js里配置</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...省略其他配置</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">        rules:[&#123;</span><br><span class=\"line\">            test:<span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">            use:[<span class=\"string\">'style-loader'</span>,<span class=\"string\">'css-loader'</span>,&#123;</span><br><span class=\"line\">                loader:<span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">                options:&#123;</span><br><span class=\"line\">                    plugins:[<span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,<span class=\"string\">'less-loader'</span>] <span class=\"comment\">// 从右向左解析原则</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\">这时候我们发现 `</span>css`<span class=\"css\"> 通过 `</span>style<span class=\"string\">` 标签的方式添加到了 `</span>html`<span class=\"xml\"> 文件中，但是如果样式文件很多，全部添加到 `</span>html`<span class=\"xml\"> 中，难免显得混乱。这时候我们想用把 `</span>css`<span class=\"css\"> 拆分出来用外链的形式引入 `</span>css`<span class=\"css\"> 文件怎么做呢？这时候我们就需要借助插件来帮助我们</span></span><br><span class=\"line\"><span class=\"css\">#### 拆分<span class=\"selector-tag\">css</span></span></span><br><span class=\"line\"><span class=\"css\">`</span><span class=\"string\">``</span> js</span><br><span class=\"line\">npm i -D mini-css-extract-plugin</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>webpack 4.0</code> 以前，我们通过 <code>extract-text-webpack-plugin</code> 插件，把 <code>css</code> 样式从 <code>js</code> 文件中提取到单独的 <code>css</code> 文件中。 <code>webpack4.0</code> 以后，官方推荐使用 <code>mini-css-extract-plugin</code> 插件来打包 <code>css</code> 文件</p>\n</blockquote>\n<p>配置文件如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MiniCssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"mini-css-extract-plugin\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...省略其他配置</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">           MiniCssExtractPlugin.loader,</span><br><span class=\"line\">          <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          <span class=\"string\">'less-loader'</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">        filename: <span class=\"string\">\"[name].[hash].css\"</span>,</span><br><span class=\"line\">        chunkFilename: <span class=\"string\">\"[id].css\"</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"拆分多个css\"><a href=\"#拆分多个css\" class=\"headerlink\" title=\"拆分多个css\"></a>拆分多个css</h4><blockquote>\n<p>这里需要说的细一点,上面我们所用到的 <code>mini-css-extract-plugin</code> 将所有的 <code>css</code> 样式合并为一个 <code>css</code> 文件。如果你想拆分为一一对应的多个 <code>css</code> 文件,我们需要使用到 <code>extract-text-webpack-plugin</code> ，而目前 <code>mini-css-extract-plugin</code> 还不支持此功能。我们需要安装 <code>@next</code> 版本的 <code>extract-text-webpack-plugin</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D extract-text-webpack-plugin@next</span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> indexLess = <span class=\"keyword\">new</span> ExtractTextWebpackPlugin(<span class=\"string\">'index.less'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> indexCss = <span class=\"keyword\">new</span> ExtractTextWebpackPlugin(<span class=\"string\">'index.css'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">      rules:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">          use: indexCss.extract(&#123;</span><br><span class=\"line\">            use: [<span class=\"string\">'css-loader'</span>]</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test:<span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">          use: indexLess.extract(&#123;</span><br><span class=\"line\">            use: [<span class=\"string\">'css-loader'</span>,<span class=\"string\">'less-loader'</span>]</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins:[</span><br><span class=\"line\">      indexLess,</span><br><span class=\"line\">      indexCss</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"打包-图片、字体、媒体、等文件\"><a href=\"#打包-图片、字体、媒体、等文件\" class=\"headerlink\" title=\"打包 图片、字体、媒体、等文件\"></a>打包 图片、字体、媒体、等文件</h3><p><code>file-loader</code> 就是将文件在进行一些处理后（主要是处理文件名和路径、解析文件 <code>url</code> ），并将文件移动到输出的目录中<br><code>url-loader</code> 一般与 <code>file-loader</code> 搭配使用，功能与 <code>file-loader</code> 类似，如果文件小于限制的大小。则会返回 <code>base64</code> 编码，否则使用 <code>file-loader</code> 将文件移动到输出的目录中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 省略其它配置 ...</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(jpe?g|png|gif)$/i</span>, <span class=\"comment\">//图片文件</span></span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              limit: <span class=\"number\">10240</span>,</span><br><span class=\"line\">              fallback: &#123;</span><br><span class=\"line\">                loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">'img/[name].[hash:8].[ext]'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/</span>, <span class=\"comment\">//媒体文件</span></span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              limit: <span class=\"number\">10240</span>,</span><br><span class=\"line\">              fallback: &#123;</span><br><span class=\"line\">                loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                  name: <span class=\"string\">'media/[name].[hash:8].[ext]'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(woff2?|eot|ttf|otf)(\\?.*)?$/i</span>, <span class=\"comment\">// 字体</span></span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              limit: <span class=\"number\">10240</span>,</span><br><span class=\"line\">              fallback: &#123;</span><br><span class=\"line\">                loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                  name: <span class=\"string\">'fonts/[name].[hash:8].[ext]'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"用babel转义js文件\"><a href=\"#用babel转义js文件\" class=\"headerlink\" title=\"用babel转义js文件\"></a>用babel转义js文件</h3><p>为了使我们的 <code>js</code> 代码兼容更多的环境我们需要安装依赖</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i babel-loader @babel/preset-env @babel/core</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意<br><code>babel-loader</code> 与 <code>babel-core</code> 的版本对应关系</p>\n</blockquote>\n<ul>\n<li><code>babel-loader 8.x</code> 对应 <code>babel-core 7.x</code></li>\n<li><code>babel-loader 7.x</code> 对应 <code>babel-core 6.x</code></li>\n</ul>\n<p>配置如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 省略其它配置 ...</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">        rules:[</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            test:<span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            use:&#123;</span><br><span class=\"line\">              loader:<span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">              options:&#123;</span><br><span class=\"line\">                presets:[<span class=\"string\">'@babel/preset-env'</span>]</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            exclude:<span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">       ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的 <code>babel-loader</code> 只会将 <code>ES6/7/8</code> 语法转换为 <code>ES5</code> 语法，但是对新 <code>api</code> 并不会转换 例如( <code>promise</code> 、 <code>Generator</code> 、 <code>Set</code> 、 <code>Maps</code> 、 <code>Proxy</code> 等)<br>此时我们需要借助 <code>babel-polyfill</code> 来帮助我们转换</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i @babel/polyfill</span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: [<span class=\"string\">\"@babel/polyfill,path.resolve(__dirname,'../src/index.js')\"</span>],    <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>手动把上面的 <code>demo</code> 敲一遍对阅读下面的文章更有益，建议入门的同学敲三遍以上</p>\n</blockquote>\n<p>上面的实践是我们对 <code>webpack</code> 的功能有了一个初步的了解，但是要想熟练应用于开发中，我们需要一个系统的实战。让我们一起摆脱脚手架尝试自己搭建一个 <code>vue</code> 开发环境</p>\n<h2 id=\"搭建vue开发环境\"><a href=\"#搭建vue开发环境\" class=\"headerlink\" title=\"搭建vue开发环境\"></a>搭建vue开发环境</h2><p>上面的小例子已经帮助而我们实现了打包 <code>css</code> 、图片、 <code>js</code> 、 <code>html</code> 等文件。<br>但是我们还需要以下几种配置</p>\n<h3 id=\"解析-vue文件\"><a href=\"#解析-vue文件\" class=\"headerlink\" title=\"解析.vue文件\"></a>解析.vue文件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D vue-loader vue-template-compiler vue-style-loader</span><br><span class=\"line\">npm i -S vue</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>vue-loader</code> 用于解析 <code>.vue</code> 文件</li>\n<li><code>vue-template-compiler</code> 用于编译模板</li>\n</ul>\n<p>配置如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vueLoaderPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-loader/lib/plugin'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">        rules:[&#123;</span><br><span class=\"line\">            test:<span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">            use:[<span class=\"string\">'vue-loader'</span>]</span><br><span class=\"line\">        &#125;,]</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">    resolve:&#123;</span><br><span class=\"line\">        alias:&#123;</span><br><span class=\"line\">          <span class=\"string\">'vue$'</span>:<span class=\"string\">'vue/dist/vue.runtime.esm.js'</span>,</span><br><span class=\"line\">          <span class=\"string\">' @'</span>:path.resolve(__dirname,<span class=\"string\">'../src'</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        extensions:[<span class=\"string\">'*'</span>,<span class=\"string\">'.js'</span>,<span class=\"string\">'.json'</span>,<span class=\"string\">'.vue'</span>]</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   plugins:[</span><br><span class=\"line\">        <span class=\"keyword\">new</span> vueLoaderPlugin()</span><br><span class=\"line\">   ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置webpack-dev-server进行热更新\"><a href=\"#配置webpack-dev-server进行热更新\" class=\"headerlink\" title=\"配置webpack-dev-server进行热更新\"></a>配置webpack-dev-server进行热更新</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p>配置如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...省略其他配置</span></span><br><span class=\"line\">  devServer:&#123;</span><br><span class=\"line\">    port:<span class=\"number\">3000</span>,</span><br><span class=\"line\">    hot:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    contentBase:<span class=\"string\">'../dist'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins:[</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完整配置如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;CleanWebpackPlugin&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> MiniCssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"mini-css-extract-plugin\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> vueLoaderPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-loader/lib/plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    mode:<span class=\"string\">'development'</span>, <span class=\"comment\">// 开发模式</span></span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">      main:path.resolve(__dirname,<span class=\"string\">'../src/main.js'</span>),</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'[name].[hash:8].js'</span>,      <span class=\"comment\">// 打包后的文件名称</span></span><br><span class=\"line\">      path: path.resolve(__dirname,<span class=\"string\">'../dist'</span>)  <span class=\"comment\">// 打包后的目录</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">      rules:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test:<span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">          use:[<span class=\"string\">'vue-loader'</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test:<span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">          use:&#123;</span><br><span class=\"line\">            loader:<span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">            options:&#123;</span><br><span class=\"line\">              presets:[</span><br><span class=\"line\">                [<span class=\"string\">'@babel/preset-env'</span>]</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">          use: [<span class=\"string\">'vue-style-loader'</span>,<span class=\"string\">'css-loader'</span>,&#123;</span><br><span class=\"line\">            loader:<span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">            options:&#123;</span><br><span class=\"line\">              plugins:[<span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test:<span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">          use: [<span class=\"string\">'vue-style-loader'</span>,<span class=\"string\">'css-loader'</span>,&#123;</span><br><span class=\"line\">            loader:<span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">            options:&#123;</span><br><span class=\"line\">              plugins:[<span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,<span class=\"string\">'less-loader'</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve:&#123;</span><br><span class=\"line\">      alias:&#123;</span><br><span class=\"line\">        <span class=\"string\">'vue$'</span>:<span class=\"string\">'vue/dist/vue.runtime.esm.js'</span>,</span><br><span class=\"line\">        <span class=\"string\">' @'</span>:path.resolve(__dirname,<span class=\"string\">'../src'</span>)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      extensions:[<span class=\"string\">'*'</span>,<span class=\"string\">'.js'</span>,<span class=\"string\">'.json'</span>,<span class=\"string\">'.vue'</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devServer:&#123;</span><br><span class=\"line\">      port:<span class=\"number\">3000</span>,</span><br><span class=\"line\">      hot:<span class=\"literal\">true</span>,</span><br><span class=\"line\">      contentBase:<span class=\"string\">'../dist'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins:[</span><br><span class=\"line\">      <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">        template:path.resolve(__dirname,<span class=\"string\">'../public/index.html'</span>),</span><br><span class=\"line\">        filename:<span class=\"string\">'index.html'</span></span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> vueLoaderPlugin(),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> Webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置打包命令\"><a href=\"#配置打包命令\" class=\"headerlink\" title=\"配置打包命令\"></a>配置打包命令</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"script\":&#123;</span><br><span class=\"line\">  \"dev\":\"webpack-dev-server --config build/webpack.config.js --open\",</span><br><span class=\"line\">  \"build\":\"webpack --config build/webpack.config.js\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>打包文件已经配置完毕，接下来让我们测试一下<br>首先在 <code>src</code> 新建一个 <code>main.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./app'</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  render:<span class=\"function\"><span class=\"params\">h</span>=&gt;</span>h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>)</span><br></pre></td></tr></table></figure>\n<p>新建一个 <code>App.vue</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// App.vue</span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">'container'</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  data()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      initData:''</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">#container&#123;</span><br><span class=\"line\">  width:<span class=\"number\">100</span>%;</span><br><span class=\"line\">  height:<span class=\"number\">100</span>%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/style&gt;</span></span><br></pre></td></tr></table></figure>\n<p>新建一个 <code>public</code> 文件夹，里面新建一个 <code>index.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.html</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">'en'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">'utf-8'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">'viewport'</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">'X-UA-Compatible'</span> <span class=\"attr\">content</span>=<span class=\"string\">'ie=edge'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>lao li<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'app'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>执行 <code>npm run dev</code> 这时候如果浏览器出现 <code>Vue</code> 开发环境运行成功，那么恭喜你，已经成功迈出了第一步</p>\n<h3 id=\"区分开发环境与生产环境\"><a href=\"#区分开发环境与生产环境\" class=\"headerlink\" title=\"区分开发环境与生产环境\"></a>区分开发环境与生产环境</h3><p>实际应用到项目中，我们需要区分开发环境与生产环境，我们在原来 <code>webpack.config.js</code> 的基础上再新增两个文件</p>\n<p><strong><em><code>webpack.dev.js</code> 开发环境配置文件</em></strong><br>开发环境主要实现的是热更新,不要压缩代码，完整的 <code>sourceMap</code><br><strong><em><code>webpack.prod.js</code>生产环境配置文件</em></strong><br>生产环境主要实现的是压缩代码、提取 <code>css</code> 文件、合理的 <code>sourceMap</code> 、分割代码<br>需要安装以下模块:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D  webpack-merge copy-webpack-plugin optimize-css-assets-webpack-plugin uglifyjs-webpack-plugin</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>webpack-merge</code> 合并配置</li>\n<li><code>copy-webpack-plugin</code> 拷贝静态资源</li>\n<li><code>optimize-css-assets-webpack-plugin</code> 压缩 <code>css</code></li>\n<li><code>uglifyjs-webpack-plugin</code> 压缩js</li>\n</ul>\n<blockquote>\n<p><code>webpack</code> <code>mode</code> 设置 <code>production</code> 的时候会自动压缩 <code>js</code> 代码。<br>原则上不需要引入 <code>uglifyjs-webpack-plugin</code> 进行重复工作。<br>但是 <code>optimize-css-assets-webpack-plugin</code>压缩 <code>css</code> 的同时会破坏原有的 <code>js</code> 压缩，所以这里我们引入 <code>uglifyjs</code> 进行压缩</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;CleanWebpackPlugin&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> vueLoaderPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-loader/lib/plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> MiniCssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"mini-css-extract-plugin\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> devMode = process.argv.indexOf(<span class=\"string\">'--mode=production'</span>) === <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry:&#123;</span><br><span class=\"line\">    main:path.resolve(__dirname,<span class=\"string\">'../src/main.js'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output:&#123;</span><br><span class=\"line\">    path:path.resolve(__dirname,<span class=\"string\">'../dist'</span>),</span><br><span class=\"line\">    filename:<span class=\"string\">'js/[name].[hash:8].js'</span>,</span><br><span class=\"line\">    chunkFilename:<span class=\"string\">'js/[name].[hash:8].js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">    rules:[</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test:<span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        use:&#123;</span><br><span class=\"line\">          loader:<span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">          options:&#123;</span><br><span class=\"line\">            presets:[<span class=\"string\">'@babel/preset-env'</span>]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        exclude:<span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test:<span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">        use:[<span class=\"string\">'cache-loader'</span>,<span class=\"string\">'thread-loader'</span>,&#123;</span><br><span class=\"line\">          loader:<span class=\"string\">'vue-loader'</span>,</span><br><span class=\"line\">          options:&#123;</span><br><span class=\"line\">            compilerOptions:&#123;</span><br><span class=\"line\">              preserveWhitespace:<span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use:[&#123;</span><br><span class=\"line\">          loader: devMode ? <span class=\"string\">'vue-style-loader'</span> : MiniCssExtractPlugin.loader,</span><br><span class=\"line\">          options:&#123;</span><br><span class=\"line\">            publicPath:<span class=\"string\">\"../dist/css/\"</span>,</span><br><span class=\"line\">            hmr:devMode</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">'css-loader'</span>,&#123;</span><br><span class=\"line\">          loader:<span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">          options:&#123;</span><br><span class=\"line\">            plugins:[<span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test:<span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        use:[&#123;</span><br><span class=\"line\">          loader:devMode ? <span class=\"string\">'vue-style-loader'</span> : MiniCssExtractPlugin.loader,</span><br><span class=\"line\">          options:&#123;</span><br><span class=\"line\">            publicPath:<span class=\"string\">\"../dist/css/\"</span>,</span><br><span class=\"line\">            hmr:devMode</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">'css-loader'</span>,<span class=\"string\">'less-loader'</span>,&#123;</span><br><span class=\"line\">          loader:<span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">          options:&#123;</span><br><span class=\"line\">            plugins:[<span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test:<span class=\"regexp\">/\\.(jep?g|png|gif)$/</span>,</span><br><span class=\"line\">        use:&#123;</span><br><span class=\"line\">          loader:<span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">          options:&#123;</span><br><span class=\"line\">            limit:<span class=\"number\">10240</span>,</span><br><span class=\"line\">            fallback:&#123;</span><br><span class=\"line\">              loader:<span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">              options:&#123;</span><br><span class=\"line\">                name:<span class=\"string\">'img/[name].[hash:8].[ext]'</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test:<span class=\"regexp\">/\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/</span>,</span><br><span class=\"line\">        use:&#123;</span><br><span class=\"line\">          loader:<span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">          options:&#123;</span><br><span class=\"line\">            limit:<span class=\"number\">10240</span>,</span><br><span class=\"line\">            fallback:&#123;</span><br><span class=\"line\">              loader:<span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">              options:&#123;</span><br><span class=\"line\">                name:<span class=\"string\">'media/[name].[hash:8].[ext]'</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test:<span class=\"regexp\">/\\.(woff2?|eot|ttf|otf)(\\?.*)?$/i</span>,</span><br><span class=\"line\">        use:&#123;</span><br><span class=\"line\">          loader:<span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">          options:&#123;</span><br><span class=\"line\">            limit:<span class=\"number\">10240</span>,</span><br><span class=\"line\">            fallback:&#123;</span><br><span class=\"line\">              loader:<span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">              options:&#123;</span><br><span class=\"line\">                name:<span class=\"string\">'media/[name].[hash:8].[ext]'</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve:&#123;</span><br><span class=\"line\">    alias:&#123;</span><br><span class=\"line\">      <span class=\"string\">'vue$'</span>:<span class=\"string\">'vue/dist/vue.runtime.esm.js'</span>,</span><br><span class=\"line\">      <span class=\"string\">' @'</span>:path.resolve(__dirname,<span class=\"string\">'../src'</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    extensions:[<span class=\"string\">'*'</span>,<span class=\"string\">'.js'</span>,<span class=\"string\">'.json'</span>,<span class=\"string\">'.vue'</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins:[</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template:path.resolve(__dirname,<span class=\"string\">'../public/index.html'</span>)</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> vueLoaderPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">      filename: devMode ? <span class=\"string\">'[name].css'</span> : <span class=\"string\">'[name].[hash].css'</span>,</span><br><span class=\"line\">      chunkFilename: devMode ? <span class=\"string\">'[id].css'</span> : <span class=\"string\">'[id].[hash].css'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.dev.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.config.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> WebpackMerge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = WebpackMerge(webpackConfig,&#123;</span><br><span class=\"line\">  mode:<span class=\"string\">'development'</span>,</span><br><span class=\"line\">  devtool:<span class=\"string\">'cheap-module-eval-source-map'</span>,</span><br><span class=\"line\">  devServer:&#123;</span><br><span class=\"line\">    port:<span class=\"number\">3000</span>,</span><br><span class=\"line\">    hot:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    contentBase:<span class=\"string\">'../dist'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins:[</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.prod.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.config.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> WebpackMerge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> CopyWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'copy-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> OptimizeCssAssetsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'optimize-css-assets-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> UglifyJsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'uglifyjs-webpack-plugin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = WebpackMerge(webpackConfig,&#123;</span><br><span class=\"line\">  mode:<span class=\"string\">'production'</span>,</span><br><span class=\"line\">  devtool:<span class=\"string\">'cheap-module-source-map'</span>,</span><br><span class=\"line\">  plugins:[</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CopyWebpackPlugin([&#123;</span><br><span class=\"line\">      <span class=\"keyword\">from</span>:path.resolve(__dirname,<span class=\"string\">'../public'</span>),</span><br><span class=\"line\">      to:path.resolve(__dirname,<span class=\"string\">'../dist'</span>)</span><br><span class=\"line\">    &#125;]),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  optimization:&#123;</span><br><span class=\"line\">    minimizer:[</span><br><span class=\"line\">      <span class=\"keyword\">new</span> UglifyJsPlugin(&#123;<span class=\"comment\">//压缩js</span></span><br><span class=\"line\">        cache:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        parallel:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        sourceMap:<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> OptimizeCssAssetsPlugin(&#123;&#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    splitChunks:&#123;</span><br><span class=\"line\">      chunks:<span class=\"string\">'all'</span>,</span><br><span class=\"line\">      cacheGroups:&#123;</span><br><span class=\"line\">        libs: &#123;</span><br><span class=\"line\">          name: <span class=\"string\">\"chunk-libs\"</span>,</span><br><span class=\"line\">          test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">          priority: <span class=\"number\">10</span>,</span><br><span class=\"line\">          chunks: <span class=\"string\">\"initial\"</span> <span class=\"comment\">// 只打包初始时依赖的第三方</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优化webpack配置\"><a href=\"#优化webpack配置\" class=\"headerlink\" title=\"优化webpack配置\"></a>优化webpack配置</h2><p>看到这里你或许有些累了，但是要想获取更好的offer,更高的薪水，下面必须继续深入</p>\n<p>优化配置对我们来说非常有实际意义，这实际关系到你打包出来文件的大小，打包的速度等。<br>具体优化可以分为以下几点：</p>\n<h3 id=\"优化打包速度\"><a href=\"#优化打包速度\" class=\"headerlink\" title=\"优化打包速度\"></a>优化打包速度</h3><blockquote>\n<p>构建速度指的是我们每次修改代码后热更新的速度以及发布前打包文件的速度。</p>\n</blockquote>\n<h4 id=\"合理的配置-mode-参数与-devtool-参数\"><a href=\"#合理的配置-mode-参数与-devtool-参数\" class=\"headerlink\" title=\"合理的配置 mode 参数与 devtool 参数\"></a>合理的配置 mode 参数与 devtool 参数</h4><p><a href=\"https://www.webpackjs.com/configuration/devtool/\" target=\"_blank\" rel=\"noopener\">devtool 可设置的值</a><br><code>mode</code> 可设置 <code>development</code> <code>production</code> 两个参数</p>\n<p>如果没有设置， <code>webpack4</code> 会将 <code>mode</code> 的默认值设置为 <code>production</code></p>\n<ul>\n<li><code>production</code> ：将 <code>process.env.NODE_ENV</code> 的值设置为 <code>production</code> ，启用 <code>FlagDependencyUsagePlugin</code>, <code>FlagIncludedChunksPlugin</code>, <code>ModuleConcatenationPlugin</code>, <code>NoEmitOnErrorsPlugin</code>, <code>OccurrenceOrderPlugin</code>, <code>SideEffectsFlagPlugin</code> 和 <code>UglifyJsPlugin</code>,会进行 <code>tree shaking</code> (去除无用代码)和 <code>uglifyjs</code> (代码压缩混淆)</li>\n<li><code>development</code> ：将 <code>process.env.NODE_ENV</code> 的值设置为 <code>development</code> ，启用 <code>NamedChunksPlugin</code> 和 <code>NamedModulesPlugin</code></li>\n</ul>\n<h4 id=\"缩小文件的搜索范围-配置include-exclude-alias-noParse-extensions\"><a href=\"#缩小文件的搜索范围-配置include-exclude-alias-noParse-extensions\" class=\"headerlink\" title=\"缩小文件的搜索范围(配置include exclude alias noParse extensions)\"></a>缩小文件的搜索范围(配置include exclude alias noParse extensions)</h4><ul>\n<li><code>alias</code>  当我们代码中出现 import ‘vue’时， webpack会采用向上递归搜索的方式去node_modules 目录下找。为了减少搜索范围我们可以直接告诉webpack去哪个路径下查找。也就是别名(alias)的配置。</li>\n<li><code>include</code> <code>exclude</code>  同样配置include exclude也可以减少webpack loader的搜索转换时间。</li>\n<li><code>noParse</code>  当我们代码中使用到 <code>import jq from &#39;jquery&#39;</code> 时， <code>webpack</code> 会去解析 <code>jq</code> 这个库是否有依赖其他的包。但是我们对类似 <code>jquery</code> 这类依赖库，一般会认为不会引用其他的包(特殊除外,自行判断)。增加 <code>noParse</code> 属性,告诉 <code>webpack</code> 不必解析，以此增加打包速度。</li>\n<li><code>extensions</code>  <code>webpack</code> 会根据 <code>extensions</code> 定义的后缀查找文件(频率较高的文件类型优先写在前面)</li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/80/v2-6fd8b21b8e9d9b18a596bd9dc6025a18_720w.jpg\" alt=\"配图\"></p>\n<h4 id=\"使用HappyPack开启多进程Loader转换\"><a href=\"#使用HappyPack开启多进程Loader转换\" class=\"headerlink\" title=\"使用HappyPack开启多进程Loader转换\"></a>使用HappyPack开启多进程Loader转换</h4><blockquote>\n<p>在 <code>webpack</code> 构建过程中，实际上耗费时间大多数用在 <code>loader</code> 解析转换以及代码的压缩中。日常开发中我们需要使用 <code>Loader</code> 对 <code>js</code> ， <code>css</code> ，图片，字体等文件做转换操作，并且转换的文件数据量也是非常大。由于js单线程的特性使得这些转换操作不能并发处理文件，而是需要一个个文件进行处理。 <code>HappyPack</code> 的基本原理是将这部分任务分解到多个子进程中去并行处理，子进程处理完成后把结果发送到主进程中，从而减少总的构建时间</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D happypack</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic2.zhimg.com/v2-ebcaa0bea4e7ec24c3e3e65439998fe5_r.jpg\" alt=\"happypack\"></p>\n<h4 id=\"使用-webpack-parallel-uglify-plugin-增强代码压缩\"><a href=\"#使用-webpack-parallel-uglify-plugin-增强代码压缩\" class=\"headerlink\" title=\"使用 webpack-parallel-uglify-plugin 增强代码压缩\"></a>使用 webpack-parallel-uglify-plugin 增强代码压缩</h4><p>上面对于 <code>loader</code> 转换已经做优化，那么下面还有另一个难点就是优化代码的压缩时间。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D webpack-parallel-uglify-plugin</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://pic2.zhimg.com/80/v2-38bc4d4b3120096478a411f374457a1d_720w.jpg\" alt=\"webpack-parallel-uglify-plugin\"></p>\n<h4 id=\"抽离第三方模块\"><a href=\"#抽离第三方模块\" class=\"headerlink\" title=\"抽离第三方模块\"></a>抽离第三方模块</h4><blockquote>\n<p>对于开发项目中不经常会变更的静态依赖文件。类似于我们的 <code>elementUi</code> 、 <code>vue</code> 全家桶等等。因为很少会变更，所以我们不希望这些依赖要被集成到每一次的构建逻辑中去。 这样做的好处是每次更改我本地代码的文件的时候， <code>webpack</code> 只需要打包我项目本身的文件代码，而不会再去编译第三方库。以后只要我们不升级第三方包的时候，那么 <code>webpack</code> 就不会对这些库去打包，这样可以快速的提高打包的速度。</p>\n</blockquote>\n<p>这里我们使用 <code>webpack</code> 内置的 <code>DllPlugin</code> <code>DllReferencePlugin</code> 进行抽离</p>\n<p>在与 <code>webpack</code> 配置文件同级目录下新建 <code>webpack.dll.config.js</code><br>代码如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.dll.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 你想要打包的模块的数组</span></span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    vendor: [<span class=\"string\">'vue'</span>,<span class=\"string\">'element-ui'</span>] </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'static/js'</span>), <span class=\"comment\">// 打包后文件输出的位置</span></span><br><span class=\"line\">    filename: <span class=\"string\">'[name].dll.js'</span>,</span><br><span class=\"line\">    library: <span class=\"string\">'[name]_library'</span> </span><br><span class=\"line\">     <span class=\"comment\">// 这里需要和webpack.DllPlugin中的`name: '[name]_library',`保持一致。</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DllPlugin(&#123;</span><br><span class=\"line\">      path: path.resolve(__dirname, <span class=\"string\">'[name]-manifest.json'</span>),</span><br><span class=\"line\">      name: <span class=\"string\">'[name]_library'</span>, </span><br><span class=\"line\">      context: __dirname</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在 <code>package.json</code> 中配置如下命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"dll\"</span>: <span class=\"string\">\"webpack --config build/webpack.dll.config.js\"</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来在我们的 <code>webpack.config.js</code> 中增加以下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class=\"line\">      context: __dirname,</span><br><span class=\"line\">      manifest: <span class=\"built_in\">require</span>(<span class=\"string\">'./vendor-manifest.json'</span>)</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CopyWebpackPlugin([ <span class=\"comment\">// 拷贝生成的文件到dist目录 这样每次不必手动去cv</span></span><br><span class=\"line\">      &#123;<span class=\"attr\">from</span>: <span class=\"string\">'static'</span>, <span class=\"attr\">to</span>:<span class=\"string\">'static'</span>&#125;</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dll</span><br></pre></td></tr></table></figure>\n\n<p>会发现生成了我们需要的集合第三地方<br>代码的 <code>vendor.dll.js</code><br>我们需要在html文件中手动引入这个js文件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>老yuan<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"static/js/vendor.dll.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样如果我们没有更新第三方依赖包，就不必 <code>npm run dll</code> 。直接执行 <code>npm run dev</code>  <code>npm run build</code> 的时候会发现我们的打包速度明显有所提升。因为我们已经通过 <code>dllPlugin</code> 将第三方依赖包抽离出来了。</p>\n<h4 id=\"配置缓存\"><a href=\"#配置缓存\" class=\"headerlink\" title=\"配置缓存\"></a>配置缓存</h4><blockquote>\n<p>我们每次执行构建都会把所有的文件都重复编译一遍，这样的重复工作是否可以被缓存下来呢，答案是可以的，目前大部分 <code>loader</code> 都提供了 <code>cache</code> 配置项。比如在 <code>babel-loader</code> <code>中，可以通过设置cacheDirectory</code> 来开启缓存，<code>babel-loader?cacheDirectory=true</code> 就会将每次的编译结果写进硬盘文件（默认是在项目根目录下的 <code>node_modules/.cache/babel-loader</code> 目录内，当然你也可以自定义）<br>但如果 <code>loader</code> 不支持缓存呢？我们也有方法,我们可以通过 <code>cache-loader</code> ，它所做的事情很简单，就是 <code>babel-loader</code> 开启 <code>cache</code> 后做的事情，将 <code>loader</code> 的编译结果写入硬盘缓存。再次构建会先比较一下，如果文件较之前的没有发生变化则会直接使用缓存。使用方法如官方 <code>demo</code> 所示，在一些性能开销较大的 <code>loader</code> 之前添加此 <code>loader</code> 即可</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D cache-loader</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://pic3.zhimg.com/80/v2-e00ab48297af32f344070b5637ba88ca_720w.jpg\" alt=\"cache-loader\"></p>\n<h3 id=\"优化打包文件体积\"><a href=\"#优化打包文件体积\" class=\"headerlink\" title=\"优化打包文件体积\"></a>优化打包文件体积</h3><p>打包的速度我们是进行了优化，但是打包后的文件体积却是十分大，造成了页面加载缓慢，浪费流量等，接下来让我们从文件体积上继续优化</p>\n<h4 id=\"引入webpack-bundle-analyzer分析打包后的文件\"><a href=\"#引入webpack-bundle-analyzer分析打包后的文件\" class=\"headerlink\" title=\"引入webpack-bundle-analyzer分析打包后的文件\"></a>引入webpack-bundle-analyzer分析打包后的文件</h4><p><code>webpack-bundle-analyzer</code> 将打包后的内容束展示为方便交互的直观树状图，让我们知道我们所构建包中真正引入的内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D webpack-bundle-analyzer</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://pic3.zhimg.com/v2-b23299204561718ba4636aeff9f71d6e_r.jpg\" alt=\"webpack-bundle-analyzer\"></p>\n<p>接下来在 <code>package.json</code> 里配置启动命令</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"analyz\": \"NODE_ENV=production npm_config_report=true npm run build\"</span><br></pre></td></tr></table></figure>\n<p><code>windows</code> 请安装 <code>npm i -D cross-env</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"analyz\": \"cross-env NODE_ENV=production npm_config_report=true npm run build\"</span><br></pre></td></tr></table></figure>\n<p>接下来 <code>npm run analyz</code> 浏览器会自动打开文件依赖图的网页</p>\n<h4 id=\"externals\"><a href=\"#externals\" class=\"headerlink\" title=\"externals\"></a>externals</h4><blockquote>\n<p>按照官方文档的解释，如果我们想引用一个库，但是又不想让 <code>webpack</code> 打包，并且又不影响我们在程序中以 <code>CMD</code> 、 <code>AMD</code> 或者 <code>window</code>/<code>global</code> 全局等方式进行使用，那就可以通过配置 <code>Externals</code> 。这个功能主要是用在创建一个库的时候用的，但是也可以在我们项目开发中充分使用<code>Externals</code> 的方式，我们将这些不需要打包的静态资源从构建逻辑中剔除出去，而使用 <code>CDN</code>的方式，去引用它们。<br>有时我们希望我们通过 <code>script</code> 引入的库，如用 <code>CDN</code> 的方式引入的 <code>jquery</code> ，我们在使用时，依旧用 <code>require</code> 的方式来使用，但是却不希望 <code>webpack</code> 将它又编译进文件中。这里官网案例已经足够清晰明了，大家有兴趣可以点击了解<br><a href=\"https://link.zhihu.com/?target=https%3A//webpack.js.org/configuration/externals/%23root\">webpack</a><br>官网案例如下</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script</span><br><span class=\"line\">  src=<span class=\"string\">\"https://code.jquery.com/jquery-3.1.0.js\"</span></span><br><span class=\"line\">  integrity=<span class=\"string\">\"sha256-slogkvB1K3VOkzAI8QITxV3VzpOnkeNVsKvtkYLMjfk=\"</span></span><br><span class=\"line\">  crossorigin=<span class=\"string\">\"anonymous\"</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">module.exports = &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  /</span><span class=\"regexp\">/...</span></span><br><span class=\"line\"><span class=\"regexp\">  externals: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    jquery: 'jQuery'</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">import $ from 'jquery';</span></span><br><span class=\"line\"><span class=\"regexp\">$('.my-element').animate(/</span>* ... *<span class=\"regexp\">/);</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Tree-shaking\"><a href=\"#Tree-shaking\" class=\"headerlink\" title=\"Tree-shaking\"></a>Tree-shaking</h4><blockquote>\n<p>这里单独提一下 <code>tree-shaking</code> ,是因为这里有个坑。 <code>tree-shaking</code> 的主要作用是用来清除代码中无用的部分。目前在 <code>webpack4</code> 我们设置 <code>mode</code> 为 <code>production</code> 的时候已经自动开启了<code>tree-shaking</code> 。但是要想使其生效，生成的代码必须是<code>ES6</code>模块。不能使用其它类型的模块如 <code>CommonJS</code> 之流。如果使用 <code>Babel</code> 的话，这里有一个小问题，因为 <code>Babel</code> 的预案（ <code>preset</code> ）默认会将任何模块类型都转译成 <code>CommonJS</code> 类型。修正这个问题也很简单，在 <code>.babelrc</code> 文件或在 <code>webpack.config.js</code> 文件中设置 <code>modules:false</code> 就好了</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .babelrc</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>: [</span><br><span class=\"line\">    [<span class=\"string\">\"@babel/preset-env\"</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"modules\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">      use: &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          presets: [<span class=\"string\">'@babel/preset-env'</span>, &#123; <span class=\"attr\">modules</span>: <span class=\"literal\">false</span> &#125;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;，</span><br><span class=\"line\">      exclude: <span class=\"regexp\">/(node_modules)/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经历过上面两个系列的洗礼，到现在我们成为了一名合格的 <code>webpack</code> 配置工程师。但是光拧螺丝，自身的可替代性还是很高，下面我们将深入 <code>webpack</code> 的原理中去</p>\n<h2 id=\"手写webpack系列\"><a href=\"#手写webpack系列\" class=\"headerlink\" title=\"手写webpack系列\"></a>手写webpack系列</h2><p>经历过上面两个部分，我们已经可以熟练的运用相关的 <code>loader</code> 和 <code>plugin</code> 对我们的代码进行转换、解析。接下来我们自己手动实现 <code>loader</code> 与 <code>plugin</code> ，使其在平时的开发中获得更多的乐趣。</p>\n<h3 id=\"手写-webpack-loader\"><a href=\"#手写-webpack-loader\" class=\"headerlink\" title=\"手写 webpack loader\"></a>手写 webpack loader</h3><blockquote>\n<p><code>loader</code> 从本质上来说其实就是一个 <code>node</code> 模块。相当于一台榨汁机( <code>loader</code> )将相关类型的文件代码( <code>code</code> )给它。根据我们设置的规则，经过它的一系列加工后还给我们加工好的果汁( <code>code</code> )。</p>\n</blockquote>\n<h4 id=\"loader-编写原则\"><a href=\"#loader-编写原则\" class=\"headerlink\" title=\"loader 编写原则\"></a><code>loader</code> 编写原则</h4><ul>\n<li>单一原则: 每个 <code>Loader</code> 只做一件事；</li>\n<li>链式调用: <code>Webpack</code> 会按顺序链式调用每个 <code>Loader</code> ；</li>\n<li>统一原则: 遵循 <code>Webpack</code> 制定的设计规则和结构，输入与输出均为字符串，各个 <code>Loader</code> 完全独立，即插即用；</li>\n</ul>\n<p>在日常开发环境中，为了方便调试我们往往会加入许多 <code>console</code> 打印。但是我们不希望在生产环境中存在打印的值。那么这里我们自己实现一个 <code>loader</code> 去除代码中的 <code>console</code></p>\n<blockquote>\n<p>知识点普及之 <code>AST</code> 。 <code>AST</code> 通俗的来说，假设我们有一个文件 <code>a.js</code> ,我们对 <code>a.js</code> 里面的1000行进行一些操作处理,比如为所有的 <code>await</code> 增加 <code>try catch</code> ,以及其他操作，但是 <code>a.js</code> 里面的代码本质上来说就是一堆字符串。那我们怎么办呢，那就是转换为带标记信息的对象(抽象语法树)我们方便进行增删改查。这个带标记的对象(抽象语法树)就是AST。这里推荐一篇不错的AST文章 <a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000016231512\">AST快速入门</a></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D @babel/parser @babel/traverse @babel/generator @babel/types</span><br></pre></td></tr></table></figure>\n<ul>\n<li>@babel/parser 将源代码解析成 <code>AST</code></li>\n<li>@babel/traverse 对 <code>AST</code> 节点进行递归遍历，生成一个便于操作、转换的 <code>path</code> 对象</li>\n<li>@babel/generator 将 <code>AST</code> 解码生成 <code>js</code> 代码</li>\n<li>@babel/types 通过该模块对具体的 <code>AST</code> 节点进行进行增、删、改、查</li>\n</ul>\n<p>新建 <code>drop-console.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/parser'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/traverse'</span>).default</span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/generator'</span>).default</span><br><span class=\"line\"><span class=\"keyword\">const</span> t = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/types'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ast = parser.parse(source,&#123; <span class=\"attr\">sourceType</span>: <span class=\"string\">'module'</span>&#125;)</span><br><span class=\"line\">  traverse(ast,&#123;</span><br><span class=\"line\">    CallExpression(path)&#123; </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(t.isMemberExpression(path.node.callee) &amp;&amp; t.isIdentifier(path.node.callee.object, &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"console\"</span>&#125;))&#123;</span><br><span class=\"line\">        path.remove()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> output = generator(ast, &#123;&#125;, source);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> output.code</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode:<span class=\"string\">'development'</span>,</span><br><span class=\"line\">  entry:path.resolve(__dirname,<span class=\"string\">'index.js'</span>),</span><br><span class=\"line\">  output:&#123;</span><br><span class=\"line\">    filename:<span class=\"string\">'[name].[contenthash].js'</span>,</span><br><span class=\"line\">    path:path.resolve(__dirname,<span class=\"string\">'dist'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">    rules:[&#123;</span><br><span class=\"line\">      test:<span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">      use:path.resolve(__dirname,<span class=\"string\">'drop-console.js'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>实际上在 <code>webpack4</code> 中已经集成了去除 <code>console</code> 功能，在 <code>minimizer</code> 中可配置 <a href=\"https://link.zhihu.com/?target=https%3A//webpack.js.org/plugins/terser-webpack-plugin/%23root\">去除console</a><br>附上官网 <a href=\"https://link.zhihu.com/?target=https%3A//webpack.docschina.org/contribute/writing-a-loader/\">如何编写一个loader</a></p>\n</blockquote>\n<h3 id=\"手写webpack-plugin\"><a href=\"#手写webpack-plugin\" class=\"headerlink\" title=\"手写webpack plugin\"></a>手写webpack plugin</h3><blockquote>\n<p>在 <code>Webpack</code> 运行的生命周期中会广播出许多事件， <code>Plugin</code> 可以监听这些事件，在合适的时机通过 <code>Webpack</code> 提供的 <code>API</code> 改变输出结果。<br>通俗来说：一盘美味的 盐豆炒鸡蛋 需要经历烧油 炒制 调味到最后的装盘等过程，而 <code>plugin</code> 相当于可以监控每个环节并进行操作，比如可以写一个少放胡椒粉 <code>plugin</code> ,监控 <code>webpack</code> 暴露出的生命周期事件(调味)，在调味的时候执行少放胡椒粉操作。<br>那么它与 <code>loader</code> 的区别是什么呢？上面我们也提到了 <code>loader</code> 的单一原则, <code>loader</code> 只能一件事，比如说 <code>less-loader</code> ,只能解析 <code>less</code> 文件， <code>plugin</code> 则是针对整个流程执行广泛的任务。</p>\n</blockquote>\n<p>一个基本的 <code>plugin</code> 插件结构如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">firstPlugin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (options) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'firstPlugin options'</span>, options)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  apply (compiler) &#123;</span><br><span class=\"line\">    compiler.plugin(<span class=\"string\">'done'</span>, compilation =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'firstPlugin'</span>)</span><br><span class=\"line\">    ))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = firstPlugin</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>compiler</code> 、 <code>compilation</code> 是什么？</p>\n</blockquote>\n<ul>\n<li><code>compiler</code> 对象包含了 <code>Webpack</code> 环境所有的的配置信息。这个对象在启动 <code>webpack</code> 时被一次性建立，并配置好所有可操作的设置，包括 <code>options</code> ， <code>loader</code> 和 <code>plugin</code> 。当在 <code>webpack</code> 环境中应用一个插件时，插件将收到此 <code>compiler</code> 对象的引用。可以使用它来访问 <code>webpack</code> 的主环境。</li>\n<li><code>compilation</code> 对象包含了当前的模块资源、编译生成资源、变化的文件等。当运行 <code>webpack</code> 开发环境中间件时，每当检测到一个文件变化，就会创建一个新的 <code>compilation</code> ，从而生成一组新的编译资源。 <code>compilation</code> 对象也提供了很多关键时机的回调，以供插件做自定义处理时选择使用。</li>\n</ul>\n<p><strong><em><code>compiler</code> 和 <code>compilation</code> 的区别在于</em></strong></p>\n<ul>\n<li><code>compiler</code> 代表了整个 <code>webpack</code> 从启动到关闭的生命周期，而 <code>compilation</code> 只是代表了一次新的编译过程</li>\n<li><code>compiler</code> 和 <code>compilation</code> 暴露出许多钩子，我们可以根据实际需求的场景进行自定义处理</li>\n</ul>\n<p><a href=\"hhttps://www.webpackjs.com/api/compiler-hooks/\">compiler钩子文档</a><br><a href=\"https://www.webpackjs.com/api/compilation-hooks/\" target=\"_blank\" rel=\"noopener\">compilation钩子文档</a></p>\n<p>下面我们手动开发一个简单的需求,在生成打包文件之前自动生成一个关于打包出文件的大小信息<br>新建一个 <code>webpack-firstPlugin.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">firstPlugin</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(options)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.options = options</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  apply(compiler)&#123;</span><br><span class=\"line\">    compiler.plugin(<span class=\"string\">'emit'</span>,(compilation,callback)=&gt;&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> str = <span class=\"string\">''</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> filename <span class=\"keyword\">in</span> compilation.assets)&#123;</span><br><span class=\"line\">        str += <span class=\"string\">`文件:<span class=\"subst\">$&#123;filename&#125;</span>  大小<span class=\"subst\">$&#123;compilation.assets[filename][<span class=\"string\">'size'</span>]()&#125;</span>\\n`</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 通过compilation.assets可以获取打包后静态资源信息，同样也可以写入资源</span></span><br><span class=\"line\">      compilation.assets[<span class=\"string\">'fileSize.md'</span>] = &#123;</span><br><span class=\"line\">        source:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> str</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        size:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> str.length</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      callback()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = firstPlugin</span><br></pre></td></tr></table></figure>\n<p>如何使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> firstPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-firstPlugin.js'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 省略其他代码</span></span><br><span class=\"line\">    plugins:[</span><br><span class=\"line\">        <span class=\"keyword\">new</span> firstPlugin()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行 <code>npm run build</code> 即可看到在 <code>dist</code> 文件夹中生成了一个包含打包文件信息的 <code>fileSize.md</code></p>\n<blockquote>\n<p>上面两个 <code>loader</code> 与 <code>plugin</code> 案例只是一个引导，实际开发需求中的 <code>loader</code> 与 <code>plugin</code> 要考虑的方面很多，建议大家自己多动手尝试一下。</p>\n</blockquote>\n<p>附上官网 <a href=\"https://www.webpackjs.com/contribute/writing-a-plugin/\" target=\"_blank\" rel=\"noopener\">如何编写一个plugin</a></p>\n<h2 id=\"webpack5-0的时代\"><a href=\"#webpack5-0的时代\" class=\"headerlink\" title=\"webpack5.0的时代\"></a>webpack5.0的时代</h2><p>无论是前端框架还是构建工具的更新速度远远超乎了我们的想象,前几年的 <code>jquery</code> 一把梭的时代一去不复返。我们要拥抱的是不断更新迭代的 <code>vue</code> 、 <code>react</code> 、 <code>node</code> 、 <code>serverless</code> 、 <code>docker</code> 、 <code>k8s</code> ….<br>不甘落后的 <code>webpack</code> 也已经在近日发布了 <code>webpack 5.0.0 beta 10</code> 版本。在之前作者也曾提过 <code>webpack5.0</code> 旨在减少配置的复杂度，使其更容易上手( <code>webpack4</code> 的时候也说了这句话)，以及一些性能上的提升</p>\n<ul>\n<li>使用持久化缓存提高构建性能；</li>\n<li>使用更好的算法和默认值改进长期缓存（long-term caching）；</li>\n<li>清理内部结构而不引入任何破坏性的变化；</li>\n<li>引入一些breaking changes，以便尽可能长的使用v5版本。</li>\n</ul>\n<p>目前来看，维护者的更新很频繁，相信用不了多久webpack5.0将会拥抱大众。感兴趣的同学可以先安装beta版本尝尝鲜。不过在此之前建议大家先对webpack4进行一番掌握,这样后面的路才会越来越好走。</p>\n<h2 id=\"更多阅读\"><a href=\"#更多阅读\" class=\"headerlink\" title=\"更多阅读\"></a>更多阅读</h2><p><a href=\"https://webpack.docschina.org/\" target=\"_blank\" rel=\"noopener\">webpack中文</a><br><a href=\"https://www.webpackjs.com/configuration/\" target=\"_blank\" rel=\"noopener\">webpackjs</a><br><a href=\"https://mp.weixin.qq.com/s/OBUcxEFXKQQubP08LO2Uhg\" target=\"_blank\" rel=\"noopener\">4W字长文带你深度解锁Webpack系列(上)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"推荐序\"><a href=\"#推荐序\" class=\"headerlink\" title=\"推荐序\"></a>推荐序</h1><p>这里是我自己写的，看了这篇文章把我零碎的 <code>webpack</code> 知识系统的整理了一下，感觉受益匪浅，推荐更多小伙伴看一看这篇文章，好文共享，建议稍微对 <code>webpack</code> 了解服用更佳。<br><a href=\"https://zhuanlan.zhihu.com/p/99959392\" target=\"_blank\" rel=\"noopener\">2020年了,再不会webpack敲得代码就不香了(近万字实战)</a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>2020年即将到来,在众多前端的招聘要求里, <code>webpack</code> 、工程化这些字眼频率越来越高。日常开发者中，我们常常在用诸如 <code>vue-cli</code> 、 <code>create-react-app</code>  的脚手架来构建我们的项目。但是如果你想在团队脱颖而出(鹤立鸡群)、拿到更好的 <code>offer</code> (还房贷)，那么你必须去深刻的认识下我们经常打交道的 <code>webpack</code></p>\n<h2 id=\"入门-一起来用这些小例子让你熟悉webpack的配置\"><a href=\"#入门-一起来用这些小例子让你熟悉webpack的配置\" class=\"headerlink\" title=\"入门(一起来用这些小例子让你熟悉webpack的配置)\"></a>入门(一起来用这些小例子让你熟悉webpack的配置)</h2><h3 id=\"webpack-是什么？\"><a href=\"#webpack-是什么？\" class=\"headerlink\" title=\"webpack 是什么？\"></a>webpack 是什么？</h3><p><code>webpack</code> 是一个现代 <code>JavaScript</code> 应用程序的静态模块打包器，当 <code>webpack</code> 处理应用程序时，会递归构建一个依赖关系图，其中包含应用程序需要的每个模块，然后将这些模块打包成一个或多个 <code>bundle</code> 。</p>\n<h3 id=\"webpack-的核心概念\"><a href=\"#webpack-的核心概念\" class=\"headerlink\" title=\"webpack 的核心概念\"></a>webpack 的核心概念</h3><ul>\n<li><code>entry</code>: 入口</li>\n<li><code>output</code>: 输出</li>\n<li><code>loader</code>: 模块转换器，用于把模块原内容按照需求转换成新内容</li>\n<li><code>plugins</code>: 扩展插件，在 <code>webpack</code> 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要做的事情</li>\n</ul>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><p>新建一个目录，初始化 <code>npm</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack</code> 是运行在 <code>node</code> 环境中的,我们需要安装以下两个 <code>npm</code> 包</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D webpack webpack-cli</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li><code>npm i -D</code> 为 <code>npm install --save-dev</code> 的缩写</li>\n<li><code>npm i -S</code> 为 <code>npm install --save</code> 的缩写</li>\n</ul>\n</blockquote>\n<p>新建一个文件夹 <code>src</code> ,然后新建一个文件 <code>main.js</code> ,写一点代码测试一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'call me 老yuan'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>配置 <code>package.json</code> 命令</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"script\":&#123;</span><br><span class=\"line\">  \"build\":\"webpack src/main.js\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<p>此时如果生成了一个 <code>dist</code> 文件夹，并且内部含有 <code>main.js</code> 说明已经打包成功了</p>\n<h3 id=\"开始我们自己的配置\"><a href=\"#开始我们自己的配置\" class=\"headerlink\" title=\"开始我们自己的配置\"></a>开始我们自己的配置</h3><p>上面一个简单的例子只是 <code>webpack</code> 自己默认的配置，下面我们要实现更加丰富的自定义配置</p>\n<p>新建一个 <code>build</code> 文件夹,里面新建一个 <code>webpack.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    mode:<span class=\"string\">'development'</span>, <span class=\"comment\">// 开发模式</span></span><br><span class=\"line\">    entry: path.resolve(__dirname,<span class=\"string\">'../src/main.js'</span>),    <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'output.js'</span>,      <span class=\"comment\">// 打包后的文件名称</span></span><br><span class=\"line\">        path: path.resolve(__dirname,<span class=\"string\">'../dist'</span>)  <span class=\"comment\">// 打包后的目录</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更改我们的打包命令</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"script\":&#123;</span><br><span class=\"line\">  \"build\":\"webpack build/webpack.config.js\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行 <code>npm run build</code><br>会发现生成了以下目录</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">project</span><br><span class=\"line\">  dist</span><br><span class=\"line\">  build</span><br><span class=\"line\">  src</span><br></pre></td></tr></table></figure>\n<p>其中 <code>dist</code> 文件夹中的 <code>main.js</code> 就是我们需要在浏览器中实际运行的文件<br>当然实际运用中不会仅仅如此,下面让我们通过实际案例带你快速入手 <code>webpack</code></p>\n<h3 id=\"配置html模板\"><a href=\"#配置html模板\" class=\"headerlink\" title=\"配置html模板\"></a>配置html模板</h3><p><code>js</code> 文件打包好了,但是我们不可能每次在html文件中手动引入打包好的js</p>\n<blockquote>\n<p>这里可能有的朋友会认为我们打包 <code>js</code> 文件名称不是一直是固定的嘛( <code>output.js</code> )？这样每次就不用改动引入文件名称了呀？实际上我们日常开发中往往会这样配置:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 省略其他配置</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'[name].[hash:8].js'</span>,      <span class=\"comment\">// 打包后的文件名称</span></span><br><span class=\"line\">      path: path.resolve(__dirname,<span class=\"string\">'../dist'</span>)  <span class=\"comment\">// 打包后的目录</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候生成的 <code>dist</code> 目录文件如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dist/</span><br><span class=\"line\">  app.fsafasf.js</span><br></pre></td></tr></table></figure>\n<p>为了缓存，你会发现打包好的 <code>js</code> 文件的名称每次都不一样。 <code>webpack</code> 打包出来的js文件我们需要引入到 <code>html</code> 中，但是每次我们都手动修改 <code>js</code> 文件名显得很麻烦，因此我们需要一个插件来帮我们完成这件事情，那就是 <code>html-webpack-plugin</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D html-webpack-plugin</span><br></pre></td></tr></table></figure>\n<p>新建一个 <code>build</code> 同级的文件夹 <code>public</code> ,里面新建一个 <code>index.html</code><br>具体配置文件如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>) <span class=\"comment\">// **此插件用来解决html模板引入js文件</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    mode:<span class=\"string\">'development'</span>, <span class=\"comment\">// 开发模式</span></span><br><span class=\"line\">    entry: path.resolve(__dirname,<span class=\"string\">'../src/main.js'</span>),    <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'[name].[hash:8].js'</span>,      <span class=\"comment\">// 打包后的文件名称</span></span><br><span class=\"line\">      path: path.resolve(__dirname,<span class=\"string\">'../dist'</span>)  <span class=\"comment\">// 打包后的目录</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins:[</span><br><span class=\"line\">      <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">        template:path.resolve(__dirname,<span class=\"string\">'../public/index.html'</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以发现打包生成的js文件已经被自动引入 <code>html</code> 文件中</p>\n<h4 id=\"多入口文件如何开发\"><a href=\"#多入口文件如何开发\" class=\"headerlink\" title=\"多入口文件如何开发\"></a>多入口文件如何开发</h4><blockquote>\n<p>生成多个 <code>html-webpack-plugin</code> 实例来解决这个问题</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    mode:<span class=\"string\">'development'</span>, <span class=\"comment\">// 开发模式</span></span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">      main:path.resolve(__dirname,<span class=\"string\">'../src/main.js'</span>),</span><br><span class=\"line\">      header:path.resolve(__dirname,<span class=\"string\">'../src/header.js'</span>)</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'[name].[hash:8].js'</span>,      <span class=\"comment\">// 打包后的文件名称</span></span><br><span class=\"line\">      path: path.resolve(__dirname,<span class=\"string\">'../dist'</span>)  <span class=\"comment\">// 打包后的目录</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins:[</span><br><span class=\"line\">      <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">        template:path.resolve(__dirname,<span class=\"string\">'../public/index.html'</span>),</span><br><span class=\"line\">        filename:<span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">        chunks:[<span class=\"string\">'main'</span>] <span class=\"comment\">// 与入口文件对应的模块名</span></span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">        template:path.resolve(__dirname,<span class=\"string\">'../public/header.html'</span>),</span><br><span class=\"line\">        filename:<span class=\"string\">'header.html'</span>,</span><br><span class=\"line\">        chunks:[<span class=\"string\">'header'</span>] <span class=\"comment\">// 与入口文件对应的模块名</span></span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"clean-webpack-plugin\"><a href=\"#clean-webpack-plugin\" class=\"headerlink\" title=\"clean-webpack-plugin\"></a>clean-webpack-plugin</h4><blockquote>\n<p>每次执行 <code>npm run build</code> 会发现 <code>dist</code> 文件夹里会残留上次打包的文件，这里我们推荐一个 <code>plugin</code> 来帮我们在打包输出前清空文件夹 <code>clean-webpack-plugin</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;CleanWebpackPlugin&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...省略其他配置</span></span><br><span class=\"line\">    plugins:[<span class=\"keyword\">new</span> CleanWebpackPlugin()]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"希望dist目录下某个文件夹不被清空\"><a href=\"#希望dist目录下某个文件夹不被清空\" class=\"headerlink\" title=\"希望dist目录下某个文件夹不被清空\"></a>希望dist目录下某个文件夹不被清空</h5><p>不过呢，有些时候，我们并不希望整个 dist 目录都被清空，比如，我们不希望，每次打包的时候，都删除 <code>dll</code> 目录，以及 <code>dll</code> 目录下的文件或子目录，该怎么办呢？</p>\n<p><code>clean-webpack-plugin</code> 为我们提供了参数 <code>cleanOnceBeforeBuildPatterns</code> 。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin(&#123;</span><br><span class=\"line\">            cleanOnceBeforeBuildPatterns:[<span class=\"string\">'**/*'</span>, <span class=\"string\">'!dll'</span>, <span class=\"string\">'!dll/**'</span>] <span class=\"comment\">//不删除dll目录下的文件</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用CSS\"><a href=\"#引用CSS\" class=\"headerlink\" title=\"引用CSS\"></a>引用CSS</h3><p>我们的入口文件是 <code>js</code> ，所以我们在入口 <code>js</code> 中引入我们的 <code>css</code> 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'asset/style.css'</span></span><br></pre></td></tr></table></figure>\n<p>同时我们也需要一些 <code>loader</code> 来解析我们的 <code>css</code> 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D style-loader css-loader</span><br></pre></td></tr></table></figure>\n<p>如果我们使用 <code>less</code> 来构建样式，则需要多安装两个</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D less less-loader</span><br></pre></td></tr></table></figure>\n<p>配置文件如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...省略其他配置</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">      rules:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">          use:[<span class=\"string\">'style-loader'</span>,<span class=\"string\">'css-loader'</span>] <span class=\"comment\">// 从右向左解析原则</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test:<span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">          use:[<span class=\"string\">'style-loader'</span>,<span class=\"string\">'css-loader'</span>,<span class=\"string\">'less-loader'</span>] <span class=\"comment\">// 从右向左解析原则</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们简单说一下上面的配置：</p>\n<ul>\n<li><code>style-loader</code> 动态创建 <code>style</code> 标签，将 <code>css</code> 插入到 <code>head</code> 中.</li>\n<li><code>css-loader</code> 负责处理 <code>@import</code> 等语句。</li>\n<li><code>postcss-loader</code> 和 <code>autoprefixer</code> ，自动生成浏览器兼容性前缀 —— 2020了，应该没人去自己徒手去写浏览器前缀了吧</li>\n<li><code>less-loader</code> 负责处理编译 <code>.less</code> 文件,将其转为 <code>css</code></li>\n</ul>\n<blockquote>\n<p>注意：<br><code>loader</code> 的执行顺序是<strong><em>从右向左</em></strong>执行的，也就是后面的 <code>loader</code> 先执行，上面 <code>loader</code> 的执行顺序为: <code>less-loader</code> —&gt; <code>postcss-loader</code> —&gt; <code>css-loader</code> —&gt; <code>style-loader</code><br>当然，<code>loader</code> 其实还有一个参数，可以修改优先级，<code>enforce</code> 参数，其值可以为: <code>pre</code>(优先执行) 或 <code>post</code> (滞后执行)。<br>现在，我们已经可以处理 <code>.less</code> 文件啦，<code>.css</code> 文件只需要修改匹配规则，删除 <code>less-loader</code> 即可。</p>\n</blockquote>\n<h4 id=\"为css添加浏览器前缀\"><a href=\"#为css添加浏览器前缀\" class=\"headerlink\" title=\"为css添加浏览器前缀\"></a>为css添加浏览器前缀</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D postcss-loader autoprefixer</span><br></pre></td></tr></table></figure>\n<p>配置如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">        rules:[</span><br><span class=\"line\">            test/\\.less$/,</span><br><span class=\"line\">            use:[<span class=\"string\">'style-loader'</span>,<span class=\"string\">'css-loader'</span>,<span class=\"string\">'postcss-loader'</span>,<span class=\"string\">'less-loader'</span>] <span class=\"comment\">// 从右向左解析原则</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来，我们还需要引入 <code>autoprefixer</code> 使其生效,这里有两种方式</p>\n<h5 id=\"在项目根目录下创建一个postcss-config-js文件，配置如下：\"><a href=\"#在项目根目录下创建一个postcss-config-js文件，配置如下：\" class=\"headerlink\" title=\"在项目根目录下创建一个postcss.config.js文件，配置如下：\"></a>在项目根目录下创建一个postcss.config.js文件，配置如下：</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    plugins: [<span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)]  <span class=\"comment\">// 引用该插件即可了</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"直接在webpack-config-js里配置\"><a href=\"#直接在webpack-config-js里配置\" class=\"headerlink\" title=\"直接在webpack.config.js里配置\"></a>直接在webpack.config.js里配置</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...省略其他配置</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">        rules:[&#123;</span><br><span class=\"line\">            test:<span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">            use:[<span class=\"string\">'style-loader'</span>,<span class=\"string\">'css-loader'</span>,&#123;</span><br><span class=\"line\">                loader:<span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">                options:&#123;</span><br><span class=\"line\">                    plugins:[<span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,<span class=\"string\">'less-loader'</span>] <span class=\"comment\">// 从右向左解析原则</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\">这时候我们发现 `</span>css`<span class=\"css\"> 通过 `</span>style<span class=\"string\">` 标签的方式添加到了 `</span>html`<span class=\"xml\"> 文件中，但是如果样式文件很多，全部添加到 `</span>html`<span class=\"xml\"> 中，难免显得混乱。这时候我们想用把 `</span>css`<span class=\"css\"> 拆分出来用外链的形式引入 `</span>css`<span class=\"css\"> 文件怎么做呢？这时候我们就需要借助插件来帮助我们</span></span><br><span class=\"line\"><span class=\"css\">#### 拆分<span class=\"selector-tag\">css</span></span></span><br><span class=\"line\"><span class=\"css\">`</span><span class=\"string\">``</span> js</span><br><span class=\"line\">npm i -D mini-css-extract-plugin</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>webpack 4.0</code> 以前，我们通过 <code>extract-text-webpack-plugin</code> 插件，把 <code>css</code> 样式从 <code>js</code> 文件中提取到单独的 <code>css</code> 文件中。 <code>webpack4.0</code> 以后，官方推荐使用 <code>mini-css-extract-plugin</code> 插件来打包 <code>css</code> 文件</p>\n</blockquote>\n<p>配置文件如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MiniCssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"mini-css-extract-plugin\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...省略其他配置</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">           MiniCssExtractPlugin.loader,</span><br><span class=\"line\">          <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          <span class=\"string\">'less-loader'</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">        filename: <span class=\"string\">\"[name].[hash].css\"</span>,</span><br><span class=\"line\">        chunkFilename: <span class=\"string\">\"[id].css\"</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"拆分多个css\"><a href=\"#拆分多个css\" class=\"headerlink\" title=\"拆分多个css\"></a>拆分多个css</h4><blockquote>\n<p>这里需要说的细一点,上面我们所用到的 <code>mini-css-extract-plugin</code> 将所有的 <code>css</code> 样式合并为一个 <code>css</code> 文件。如果你想拆分为一一对应的多个 <code>css</code> 文件,我们需要使用到 <code>extract-text-webpack-plugin</code> ，而目前 <code>mini-css-extract-plugin</code> 还不支持此功能。我们需要安装 <code>@next</code> 版本的 <code>extract-text-webpack-plugin</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D extract-text-webpack-plugin@next</span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> indexLess = <span class=\"keyword\">new</span> ExtractTextWebpackPlugin(<span class=\"string\">'index.less'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> indexCss = <span class=\"keyword\">new</span> ExtractTextWebpackPlugin(<span class=\"string\">'index.css'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">      rules:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">          use: indexCss.extract(&#123;</span><br><span class=\"line\">            use: [<span class=\"string\">'css-loader'</span>]</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test:<span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">          use: indexLess.extract(&#123;</span><br><span class=\"line\">            use: [<span class=\"string\">'css-loader'</span>,<span class=\"string\">'less-loader'</span>]</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins:[</span><br><span class=\"line\">      indexLess,</span><br><span class=\"line\">      indexCss</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"打包-图片、字体、媒体、等文件\"><a href=\"#打包-图片、字体、媒体、等文件\" class=\"headerlink\" title=\"打包 图片、字体、媒体、等文件\"></a>打包 图片、字体、媒体、等文件</h3><p><code>file-loader</code> 就是将文件在进行一些处理后（主要是处理文件名和路径、解析文件 <code>url</code> ），并将文件移动到输出的目录中<br><code>url-loader</code> 一般与 <code>file-loader</code> 搭配使用，功能与 <code>file-loader</code> 类似，如果文件小于限制的大小。则会返回 <code>base64</code> 编码，否则使用 <code>file-loader</code> 将文件移动到输出的目录中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 省略其它配置 ...</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(jpe?g|png|gif)$/i</span>, <span class=\"comment\">//图片文件</span></span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              limit: <span class=\"number\">10240</span>,</span><br><span class=\"line\">              fallback: &#123;</span><br><span class=\"line\">                loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">'img/[name].[hash:8].[ext]'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/</span>, <span class=\"comment\">//媒体文件</span></span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              limit: <span class=\"number\">10240</span>,</span><br><span class=\"line\">              fallback: &#123;</span><br><span class=\"line\">                loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                  name: <span class=\"string\">'media/[name].[hash:8].[ext]'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(woff2?|eot|ttf|otf)(\\?.*)?$/i</span>, <span class=\"comment\">// 字体</span></span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              limit: <span class=\"number\">10240</span>,</span><br><span class=\"line\">              fallback: &#123;</span><br><span class=\"line\">                loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                  name: <span class=\"string\">'fonts/[name].[hash:8].[ext]'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"用babel转义js文件\"><a href=\"#用babel转义js文件\" class=\"headerlink\" title=\"用babel转义js文件\"></a>用babel转义js文件</h3><p>为了使我们的 <code>js</code> 代码兼容更多的环境我们需要安装依赖</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i babel-loader @babel/preset-env @babel/core</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意<br><code>babel-loader</code> 与 <code>babel-core</code> 的版本对应关系</p>\n</blockquote>\n<ul>\n<li><code>babel-loader 8.x</code> 对应 <code>babel-core 7.x</code></li>\n<li><code>babel-loader 7.x</code> 对应 <code>babel-core 6.x</code></li>\n</ul>\n<p>配置如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 省略其它配置 ...</span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">        rules:[</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            test:<span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            use:&#123;</span><br><span class=\"line\">              loader:<span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">              options:&#123;</span><br><span class=\"line\">                presets:[<span class=\"string\">'@babel/preset-env'</span>]</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            exclude:<span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">       ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的 <code>babel-loader</code> 只会将 <code>ES6/7/8</code> 语法转换为 <code>ES5</code> 语法，但是对新 <code>api</code> 并不会转换 例如( <code>promise</code> 、 <code>Generator</code> 、 <code>Set</code> 、 <code>Maps</code> 、 <code>Proxy</code> 等)<br>此时我们需要借助 <code>babel-polyfill</code> 来帮助我们转换</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i @babel/polyfill</span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: [<span class=\"string\">\"@babel/polyfill,path.resolve(__dirname,'../src/index.js')\"</span>],    <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>手动把上面的 <code>demo</code> 敲一遍对阅读下面的文章更有益，建议入门的同学敲三遍以上</p>\n</blockquote>\n<p>上面的实践是我们对 <code>webpack</code> 的功能有了一个初步的了解，但是要想熟练应用于开发中，我们需要一个系统的实战。让我们一起摆脱脚手架尝试自己搭建一个 <code>vue</code> 开发环境</p>\n<h2 id=\"搭建vue开发环境\"><a href=\"#搭建vue开发环境\" class=\"headerlink\" title=\"搭建vue开发环境\"></a>搭建vue开发环境</h2><p>上面的小例子已经帮助而我们实现了打包 <code>css</code> 、图片、 <code>js</code> 、 <code>html</code> 等文件。<br>但是我们还需要以下几种配置</p>\n<h3 id=\"解析-vue文件\"><a href=\"#解析-vue文件\" class=\"headerlink\" title=\"解析.vue文件\"></a>解析.vue文件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D vue-loader vue-template-compiler vue-style-loader</span><br><span class=\"line\">npm i -S vue</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>vue-loader</code> 用于解析 <code>.vue</code> 文件</li>\n<li><code>vue-template-compiler</code> 用于编译模板</li>\n</ul>\n<p>配置如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vueLoaderPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-loader/lib/plugin'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">        rules:[&#123;</span><br><span class=\"line\">            test:<span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">            use:[<span class=\"string\">'vue-loader'</span>]</span><br><span class=\"line\">        &#125;,]</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">    resolve:&#123;</span><br><span class=\"line\">        alias:&#123;</span><br><span class=\"line\">          <span class=\"string\">'vue$'</span>:<span class=\"string\">'vue/dist/vue.runtime.esm.js'</span>,</span><br><span class=\"line\">          <span class=\"string\">' @'</span>:path.resolve(__dirname,<span class=\"string\">'../src'</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        extensions:[<span class=\"string\">'*'</span>,<span class=\"string\">'.js'</span>,<span class=\"string\">'.json'</span>,<span class=\"string\">'.vue'</span>]</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   plugins:[</span><br><span class=\"line\">        <span class=\"keyword\">new</span> vueLoaderPlugin()</span><br><span class=\"line\">   ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置webpack-dev-server进行热更新\"><a href=\"#配置webpack-dev-server进行热更新\" class=\"headerlink\" title=\"配置webpack-dev-server进行热更新\"></a>配置webpack-dev-server进行热更新</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p>配置如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...省略其他配置</span></span><br><span class=\"line\">  devServer:&#123;</span><br><span class=\"line\">    port:<span class=\"number\">3000</span>,</span><br><span class=\"line\">    hot:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    contentBase:<span class=\"string\">'../dist'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins:[</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完整配置如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;CleanWebpackPlugin&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> MiniCssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"mini-css-extract-plugin\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> vueLoaderPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-loader/lib/plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    mode:<span class=\"string\">'development'</span>, <span class=\"comment\">// 开发模式</span></span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">      main:path.resolve(__dirname,<span class=\"string\">'../src/main.js'</span>),</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: <span class=\"string\">'[name].[hash:8].js'</span>,      <span class=\"comment\">// 打包后的文件名称</span></span><br><span class=\"line\">      path: path.resolve(__dirname,<span class=\"string\">'../dist'</span>)  <span class=\"comment\">// 打包后的目录</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">      rules:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test:<span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">          use:[<span class=\"string\">'vue-loader'</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test:<span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">          use:&#123;</span><br><span class=\"line\">            loader:<span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">            options:&#123;</span><br><span class=\"line\">              presets:[</span><br><span class=\"line\">                [<span class=\"string\">'@babel/preset-env'</span>]</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">          use: [<span class=\"string\">'vue-style-loader'</span>,<span class=\"string\">'css-loader'</span>,&#123;</span><br><span class=\"line\">            loader:<span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">            options:&#123;</span><br><span class=\"line\">              plugins:[<span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test:<span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">          use: [<span class=\"string\">'vue-style-loader'</span>,<span class=\"string\">'css-loader'</span>,&#123;</span><br><span class=\"line\">            loader:<span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">            options:&#123;</span><br><span class=\"line\">              plugins:[<span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,<span class=\"string\">'less-loader'</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve:&#123;</span><br><span class=\"line\">      alias:&#123;</span><br><span class=\"line\">        <span class=\"string\">'vue$'</span>:<span class=\"string\">'vue/dist/vue.runtime.esm.js'</span>,</span><br><span class=\"line\">        <span class=\"string\">' @'</span>:path.resolve(__dirname,<span class=\"string\">'../src'</span>)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      extensions:[<span class=\"string\">'*'</span>,<span class=\"string\">'.js'</span>,<span class=\"string\">'.json'</span>,<span class=\"string\">'.vue'</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    devServer:&#123;</span><br><span class=\"line\">      port:<span class=\"number\">3000</span>,</span><br><span class=\"line\">      hot:<span class=\"literal\">true</span>,</span><br><span class=\"line\">      contentBase:<span class=\"string\">'../dist'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins:[</span><br><span class=\"line\">      <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">        template:path.resolve(__dirname,<span class=\"string\">'../public/index.html'</span>),</span><br><span class=\"line\">        filename:<span class=\"string\">'index.html'</span></span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> vueLoaderPlugin(),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> Webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置打包命令\"><a href=\"#配置打包命令\" class=\"headerlink\" title=\"配置打包命令\"></a>配置打包命令</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"script\":&#123;</span><br><span class=\"line\">  \"dev\":\"webpack-dev-server --config build/webpack.config.js --open\",</span><br><span class=\"line\">  \"build\":\"webpack --config build/webpack.config.js\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>打包文件已经配置完毕，接下来让我们测试一下<br>首先在 <code>src</code> 新建一个 <code>main.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./app'</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  render:<span class=\"function\"><span class=\"params\">h</span>=&gt;</span>h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>)</span><br></pre></td></tr></table></figure>\n<p>新建一个 <code>App.vue</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// App.vue</span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">'container'</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  data()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      initData:''</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">#container&#123;</span><br><span class=\"line\">  width:<span class=\"number\">100</span>%;</span><br><span class=\"line\">  height:<span class=\"number\">100</span>%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/style&gt;</span></span><br></pre></td></tr></table></figure>\n<p>新建一个 <code>public</code> 文件夹，里面新建一个 <code>index.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.html</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">'en'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">'utf-8'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">'viewport'</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">'X-UA-Compatible'</span> <span class=\"attr\">content</span>=<span class=\"string\">'ie=edge'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>lao li<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'app'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>执行 <code>npm run dev</code> 这时候如果浏览器出现 <code>Vue</code> 开发环境运行成功，那么恭喜你，已经成功迈出了第一步</p>\n<h3 id=\"区分开发环境与生产环境\"><a href=\"#区分开发环境与生产环境\" class=\"headerlink\" title=\"区分开发环境与生产环境\"></a>区分开发环境与生产环境</h3><p>实际应用到项目中，我们需要区分开发环境与生产环境，我们在原来 <code>webpack.config.js</code> 的基础上再新增两个文件</p>\n<p><strong><em><code>webpack.dev.js</code> 开发环境配置文件</em></strong><br>开发环境主要实现的是热更新,不要压缩代码，完整的 <code>sourceMap</code><br><strong><em><code>webpack.prod.js</code>生产环境配置文件</em></strong><br>生产环境主要实现的是压缩代码、提取 <code>css</code> 文件、合理的 <code>sourceMap</code> 、分割代码<br>需要安装以下模块:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D  webpack-merge copy-webpack-plugin optimize-css-assets-webpack-plugin uglifyjs-webpack-plugin</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>webpack-merge</code> 合并配置</li>\n<li><code>copy-webpack-plugin</code> 拷贝静态资源</li>\n<li><code>optimize-css-assets-webpack-plugin</code> 压缩 <code>css</code></li>\n<li><code>uglifyjs-webpack-plugin</code> 压缩js</li>\n</ul>\n<blockquote>\n<p><code>webpack</code> <code>mode</code> 设置 <code>production</code> 的时候会自动压缩 <code>js</code> 代码。<br>原则上不需要引入 <code>uglifyjs-webpack-plugin</code> 进行重复工作。<br>但是 <code>optimize-css-assets-webpack-plugin</code>压缩 <code>css</code> 的同时会破坏原有的 <code>js</code> 压缩，所以这里我们引入 <code>uglifyjs</code> 进行压缩</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;CleanWebpackPlugin&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> vueLoaderPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-loader/lib/plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> MiniCssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"mini-css-extract-plugin\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> devMode = process.argv.indexOf(<span class=\"string\">'--mode=production'</span>) === <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry:&#123;</span><br><span class=\"line\">    main:path.resolve(__dirname,<span class=\"string\">'../src/main.js'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output:&#123;</span><br><span class=\"line\">    path:path.resolve(__dirname,<span class=\"string\">'../dist'</span>),</span><br><span class=\"line\">    filename:<span class=\"string\">'js/[name].[hash:8].js'</span>,</span><br><span class=\"line\">    chunkFilename:<span class=\"string\">'js/[name].[hash:8].js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">    rules:[</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test:<span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        use:&#123;</span><br><span class=\"line\">          loader:<span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">          options:&#123;</span><br><span class=\"line\">            presets:[<span class=\"string\">'@babel/preset-env'</span>]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        exclude:<span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test:<span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">        use:[<span class=\"string\">'cache-loader'</span>,<span class=\"string\">'thread-loader'</span>,&#123;</span><br><span class=\"line\">          loader:<span class=\"string\">'vue-loader'</span>,</span><br><span class=\"line\">          options:&#123;</span><br><span class=\"line\">            compilerOptions:&#123;</span><br><span class=\"line\">              preserveWhitespace:<span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use:[&#123;</span><br><span class=\"line\">          loader: devMode ? <span class=\"string\">'vue-style-loader'</span> : MiniCssExtractPlugin.loader,</span><br><span class=\"line\">          options:&#123;</span><br><span class=\"line\">            publicPath:<span class=\"string\">\"../dist/css/\"</span>,</span><br><span class=\"line\">            hmr:devMode</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">'css-loader'</span>,&#123;</span><br><span class=\"line\">          loader:<span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">          options:&#123;</span><br><span class=\"line\">            plugins:[<span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test:<span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        use:[&#123;</span><br><span class=\"line\">          loader:devMode ? <span class=\"string\">'vue-style-loader'</span> : MiniCssExtractPlugin.loader,</span><br><span class=\"line\">          options:&#123;</span><br><span class=\"line\">            publicPath:<span class=\"string\">\"../dist/css/\"</span>,</span><br><span class=\"line\">            hmr:devMode</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">'css-loader'</span>,<span class=\"string\">'less-loader'</span>,&#123;</span><br><span class=\"line\">          loader:<span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">          options:&#123;</span><br><span class=\"line\">            plugins:[<span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test:<span class=\"regexp\">/\\.(jep?g|png|gif)$/</span>,</span><br><span class=\"line\">        use:&#123;</span><br><span class=\"line\">          loader:<span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">          options:&#123;</span><br><span class=\"line\">            limit:<span class=\"number\">10240</span>,</span><br><span class=\"line\">            fallback:&#123;</span><br><span class=\"line\">              loader:<span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">              options:&#123;</span><br><span class=\"line\">                name:<span class=\"string\">'img/[name].[hash:8].[ext]'</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test:<span class=\"regexp\">/\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/</span>,</span><br><span class=\"line\">        use:&#123;</span><br><span class=\"line\">          loader:<span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">          options:&#123;</span><br><span class=\"line\">            limit:<span class=\"number\">10240</span>,</span><br><span class=\"line\">            fallback:&#123;</span><br><span class=\"line\">              loader:<span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">              options:&#123;</span><br><span class=\"line\">                name:<span class=\"string\">'media/[name].[hash:8].[ext]'</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test:<span class=\"regexp\">/\\.(woff2?|eot|ttf|otf)(\\?.*)?$/i</span>,</span><br><span class=\"line\">        use:&#123;</span><br><span class=\"line\">          loader:<span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">          options:&#123;</span><br><span class=\"line\">            limit:<span class=\"number\">10240</span>,</span><br><span class=\"line\">            fallback:&#123;</span><br><span class=\"line\">              loader:<span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">              options:&#123;</span><br><span class=\"line\">                name:<span class=\"string\">'media/[name].[hash:8].[ext]'</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve:&#123;</span><br><span class=\"line\">    alias:&#123;</span><br><span class=\"line\">      <span class=\"string\">'vue$'</span>:<span class=\"string\">'vue/dist/vue.runtime.esm.js'</span>,</span><br><span class=\"line\">      <span class=\"string\">' @'</span>:path.resolve(__dirname,<span class=\"string\">'../src'</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    extensions:[<span class=\"string\">'*'</span>,<span class=\"string\">'.js'</span>,<span class=\"string\">'.json'</span>,<span class=\"string\">'.vue'</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins:[</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      template:path.resolve(__dirname,<span class=\"string\">'../public/index.html'</span>)</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> vueLoaderPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">      filename: devMode ? <span class=\"string\">'[name].css'</span> : <span class=\"string\">'[name].[hash].css'</span>,</span><br><span class=\"line\">      chunkFilename: devMode ? <span class=\"string\">'[id].css'</span> : <span class=\"string\">'[id].[hash].css'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.dev.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.config.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> WebpackMerge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = WebpackMerge(webpackConfig,&#123;</span><br><span class=\"line\">  mode:<span class=\"string\">'development'</span>,</span><br><span class=\"line\">  devtool:<span class=\"string\">'cheap-module-eval-source-map'</span>,</span><br><span class=\"line\">  devServer:&#123;</span><br><span class=\"line\">    port:<span class=\"number\">3000</span>,</span><br><span class=\"line\">    hot:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    contentBase:<span class=\"string\">'../dist'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins:[</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.prod.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.config.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> WebpackMerge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> CopyWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'copy-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> OptimizeCssAssetsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'optimize-css-assets-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> UglifyJsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'uglifyjs-webpack-plugin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = WebpackMerge(webpackConfig,&#123;</span><br><span class=\"line\">  mode:<span class=\"string\">'production'</span>,</span><br><span class=\"line\">  devtool:<span class=\"string\">'cheap-module-source-map'</span>,</span><br><span class=\"line\">  plugins:[</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CopyWebpackPlugin([&#123;</span><br><span class=\"line\">      <span class=\"keyword\">from</span>:path.resolve(__dirname,<span class=\"string\">'../public'</span>),</span><br><span class=\"line\">      to:path.resolve(__dirname,<span class=\"string\">'../dist'</span>)</span><br><span class=\"line\">    &#125;]),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  optimization:&#123;</span><br><span class=\"line\">    minimizer:[</span><br><span class=\"line\">      <span class=\"keyword\">new</span> UglifyJsPlugin(&#123;<span class=\"comment\">//压缩js</span></span><br><span class=\"line\">        cache:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        parallel:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        sourceMap:<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> OptimizeCssAssetsPlugin(&#123;&#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    splitChunks:&#123;</span><br><span class=\"line\">      chunks:<span class=\"string\">'all'</span>,</span><br><span class=\"line\">      cacheGroups:&#123;</span><br><span class=\"line\">        libs: &#123;</span><br><span class=\"line\">          name: <span class=\"string\">\"chunk-libs\"</span>,</span><br><span class=\"line\">          test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">          priority: <span class=\"number\">10</span>,</span><br><span class=\"line\">          chunks: <span class=\"string\">\"initial\"</span> <span class=\"comment\">// 只打包初始时依赖的第三方</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优化webpack配置\"><a href=\"#优化webpack配置\" class=\"headerlink\" title=\"优化webpack配置\"></a>优化webpack配置</h2><p>看到这里你或许有些累了，但是要想获取更好的offer,更高的薪水，下面必须继续深入</p>\n<p>优化配置对我们来说非常有实际意义，这实际关系到你打包出来文件的大小，打包的速度等。<br>具体优化可以分为以下几点：</p>\n<h3 id=\"优化打包速度\"><a href=\"#优化打包速度\" class=\"headerlink\" title=\"优化打包速度\"></a>优化打包速度</h3><blockquote>\n<p>构建速度指的是我们每次修改代码后热更新的速度以及发布前打包文件的速度。</p>\n</blockquote>\n<h4 id=\"合理的配置-mode-参数与-devtool-参数\"><a href=\"#合理的配置-mode-参数与-devtool-参数\" class=\"headerlink\" title=\"合理的配置 mode 参数与 devtool 参数\"></a>合理的配置 mode 参数与 devtool 参数</h4><p><a href=\"https://www.webpackjs.com/configuration/devtool/\" target=\"_blank\" rel=\"noopener\">devtool 可设置的值</a><br><code>mode</code> 可设置 <code>development</code> <code>production</code> 两个参数</p>\n<p>如果没有设置， <code>webpack4</code> 会将 <code>mode</code> 的默认值设置为 <code>production</code></p>\n<ul>\n<li><code>production</code> ：将 <code>process.env.NODE_ENV</code> 的值设置为 <code>production</code> ，启用 <code>FlagDependencyUsagePlugin</code>, <code>FlagIncludedChunksPlugin</code>, <code>ModuleConcatenationPlugin</code>, <code>NoEmitOnErrorsPlugin</code>, <code>OccurrenceOrderPlugin</code>, <code>SideEffectsFlagPlugin</code> 和 <code>UglifyJsPlugin</code>,会进行 <code>tree shaking</code> (去除无用代码)和 <code>uglifyjs</code> (代码压缩混淆)</li>\n<li><code>development</code> ：将 <code>process.env.NODE_ENV</code> 的值设置为 <code>development</code> ，启用 <code>NamedChunksPlugin</code> 和 <code>NamedModulesPlugin</code></li>\n</ul>\n<h4 id=\"缩小文件的搜索范围-配置include-exclude-alias-noParse-extensions\"><a href=\"#缩小文件的搜索范围-配置include-exclude-alias-noParse-extensions\" class=\"headerlink\" title=\"缩小文件的搜索范围(配置include exclude alias noParse extensions)\"></a>缩小文件的搜索范围(配置include exclude alias noParse extensions)</h4><ul>\n<li><code>alias</code>  当我们代码中出现 import ‘vue’时， webpack会采用向上递归搜索的方式去node_modules 目录下找。为了减少搜索范围我们可以直接告诉webpack去哪个路径下查找。也就是别名(alias)的配置。</li>\n<li><code>include</code> <code>exclude</code>  同样配置include exclude也可以减少webpack loader的搜索转换时间。</li>\n<li><code>noParse</code>  当我们代码中使用到 <code>import jq from &#39;jquery&#39;</code> 时， <code>webpack</code> 会去解析 <code>jq</code> 这个库是否有依赖其他的包。但是我们对类似 <code>jquery</code> 这类依赖库，一般会认为不会引用其他的包(特殊除外,自行判断)。增加 <code>noParse</code> 属性,告诉 <code>webpack</code> 不必解析，以此增加打包速度。</li>\n<li><code>extensions</code>  <code>webpack</code> 会根据 <code>extensions</code> 定义的后缀查找文件(频率较高的文件类型优先写在前面)</li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/80/v2-6fd8b21b8e9d9b18a596bd9dc6025a18_720w.jpg\" alt=\"配图\"></p>\n<h4 id=\"使用HappyPack开启多进程Loader转换\"><a href=\"#使用HappyPack开启多进程Loader转换\" class=\"headerlink\" title=\"使用HappyPack开启多进程Loader转换\"></a>使用HappyPack开启多进程Loader转换</h4><blockquote>\n<p>在 <code>webpack</code> 构建过程中，实际上耗费时间大多数用在 <code>loader</code> 解析转换以及代码的压缩中。日常开发中我们需要使用 <code>Loader</code> 对 <code>js</code> ， <code>css</code> ，图片，字体等文件做转换操作，并且转换的文件数据量也是非常大。由于js单线程的特性使得这些转换操作不能并发处理文件，而是需要一个个文件进行处理。 <code>HappyPack</code> 的基本原理是将这部分任务分解到多个子进程中去并行处理，子进程处理完成后把结果发送到主进程中，从而减少总的构建时间</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D happypack</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic2.zhimg.com/v2-ebcaa0bea4e7ec24c3e3e65439998fe5_r.jpg\" alt=\"happypack\"></p>\n<h4 id=\"使用-webpack-parallel-uglify-plugin-增强代码压缩\"><a href=\"#使用-webpack-parallel-uglify-plugin-增强代码压缩\" class=\"headerlink\" title=\"使用 webpack-parallel-uglify-plugin 增强代码压缩\"></a>使用 webpack-parallel-uglify-plugin 增强代码压缩</h4><p>上面对于 <code>loader</code> 转换已经做优化，那么下面还有另一个难点就是优化代码的压缩时间。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D webpack-parallel-uglify-plugin</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://pic2.zhimg.com/80/v2-38bc4d4b3120096478a411f374457a1d_720w.jpg\" alt=\"webpack-parallel-uglify-plugin\"></p>\n<h4 id=\"抽离第三方模块\"><a href=\"#抽离第三方模块\" class=\"headerlink\" title=\"抽离第三方模块\"></a>抽离第三方模块</h4><blockquote>\n<p>对于开发项目中不经常会变更的静态依赖文件。类似于我们的 <code>elementUi</code> 、 <code>vue</code> 全家桶等等。因为很少会变更，所以我们不希望这些依赖要被集成到每一次的构建逻辑中去。 这样做的好处是每次更改我本地代码的文件的时候， <code>webpack</code> 只需要打包我项目本身的文件代码，而不会再去编译第三方库。以后只要我们不升级第三方包的时候，那么 <code>webpack</code> 就不会对这些库去打包，这样可以快速的提高打包的速度。</p>\n</blockquote>\n<p>这里我们使用 <code>webpack</code> 内置的 <code>DllPlugin</code> <code>DllReferencePlugin</code> 进行抽离</p>\n<p>在与 <code>webpack</code> 配置文件同级目录下新建 <code>webpack.dll.config.js</code><br>代码如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.dll.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 你想要打包的模块的数组</span></span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    vendor: [<span class=\"string\">'vue'</span>,<span class=\"string\">'element-ui'</span>] </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'static/js'</span>), <span class=\"comment\">// 打包后文件输出的位置</span></span><br><span class=\"line\">    filename: <span class=\"string\">'[name].dll.js'</span>,</span><br><span class=\"line\">    library: <span class=\"string\">'[name]_library'</span> </span><br><span class=\"line\">     <span class=\"comment\">// 这里需要和webpack.DllPlugin中的`name: '[name]_library',`保持一致。</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DllPlugin(&#123;</span><br><span class=\"line\">      path: path.resolve(__dirname, <span class=\"string\">'[name]-manifest.json'</span>),</span><br><span class=\"line\">      name: <span class=\"string\">'[name]_library'</span>, </span><br><span class=\"line\">      context: __dirname</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在 <code>package.json</code> 中配置如下命令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"dll\"</span>: <span class=\"string\">\"webpack --config build/webpack.dll.config.js\"</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来在我们的 <code>webpack.config.js</code> 中增加以下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class=\"line\">      context: __dirname,</span><br><span class=\"line\">      manifest: <span class=\"built_in\">require</span>(<span class=\"string\">'./vendor-manifest.json'</span>)</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CopyWebpackPlugin([ <span class=\"comment\">// 拷贝生成的文件到dist目录 这样每次不必手动去cv</span></span><br><span class=\"line\">      &#123;<span class=\"attr\">from</span>: <span class=\"string\">'static'</span>, <span class=\"attr\">to</span>:<span class=\"string\">'static'</span>&#125;</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dll</span><br></pre></td></tr></table></figure>\n\n<p>会发现生成了我们需要的集合第三地方<br>代码的 <code>vendor.dll.js</code><br>我们需要在html文件中手动引入这个js文件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>老yuan<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"static/js/vendor.dll.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样如果我们没有更新第三方依赖包，就不必 <code>npm run dll</code> 。直接执行 <code>npm run dev</code>  <code>npm run build</code> 的时候会发现我们的打包速度明显有所提升。因为我们已经通过 <code>dllPlugin</code> 将第三方依赖包抽离出来了。</p>\n<h4 id=\"配置缓存\"><a href=\"#配置缓存\" class=\"headerlink\" title=\"配置缓存\"></a>配置缓存</h4><blockquote>\n<p>我们每次执行构建都会把所有的文件都重复编译一遍，这样的重复工作是否可以被缓存下来呢，答案是可以的，目前大部分 <code>loader</code> 都提供了 <code>cache</code> 配置项。比如在 <code>babel-loader</code> <code>中，可以通过设置cacheDirectory</code> 来开启缓存，<code>babel-loader?cacheDirectory=true</code> 就会将每次的编译结果写进硬盘文件（默认是在项目根目录下的 <code>node_modules/.cache/babel-loader</code> 目录内，当然你也可以自定义）<br>但如果 <code>loader</code> 不支持缓存呢？我们也有方法,我们可以通过 <code>cache-loader</code> ，它所做的事情很简单，就是 <code>babel-loader</code> 开启 <code>cache</code> 后做的事情，将 <code>loader</code> 的编译结果写入硬盘缓存。再次构建会先比较一下，如果文件较之前的没有发生变化则会直接使用缓存。使用方法如官方 <code>demo</code> 所示，在一些性能开销较大的 <code>loader</code> 之前添加此 <code>loader</code> 即可</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D cache-loader</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://pic3.zhimg.com/80/v2-e00ab48297af32f344070b5637ba88ca_720w.jpg\" alt=\"cache-loader\"></p>\n<h3 id=\"优化打包文件体积\"><a href=\"#优化打包文件体积\" class=\"headerlink\" title=\"优化打包文件体积\"></a>优化打包文件体积</h3><p>打包的速度我们是进行了优化，但是打包后的文件体积却是十分大，造成了页面加载缓慢，浪费流量等，接下来让我们从文件体积上继续优化</p>\n<h4 id=\"引入webpack-bundle-analyzer分析打包后的文件\"><a href=\"#引入webpack-bundle-analyzer分析打包后的文件\" class=\"headerlink\" title=\"引入webpack-bundle-analyzer分析打包后的文件\"></a>引入webpack-bundle-analyzer分析打包后的文件</h4><p><code>webpack-bundle-analyzer</code> 将打包后的内容束展示为方便交互的直观树状图，让我们知道我们所构建包中真正引入的内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D webpack-bundle-analyzer</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://pic3.zhimg.com/v2-b23299204561718ba4636aeff9f71d6e_r.jpg\" alt=\"webpack-bundle-analyzer\"></p>\n<p>接下来在 <code>package.json</code> 里配置启动命令</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"analyz\": \"NODE_ENV=production npm_config_report=true npm run build\"</span><br></pre></td></tr></table></figure>\n<p><code>windows</code> 请安装 <code>npm i -D cross-env</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"analyz\": \"cross-env NODE_ENV=production npm_config_report=true npm run build\"</span><br></pre></td></tr></table></figure>\n<p>接下来 <code>npm run analyz</code> 浏览器会自动打开文件依赖图的网页</p>\n<h4 id=\"externals\"><a href=\"#externals\" class=\"headerlink\" title=\"externals\"></a>externals</h4><blockquote>\n<p>按照官方文档的解释，如果我们想引用一个库，但是又不想让 <code>webpack</code> 打包，并且又不影响我们在程序中以 <code>CMD</code> 、 <code>AMD</code> 或者 <code>window</code>/<code>global</code> 全局等方式进行使用，那就可以通过配置 <code>Externals</code> 。这个功能主要是用在创建一个库的时候用的，但是也可以在我们项目开发中充分使用<code>Externals</code> 的方式，我们将这些不需要打包的静态资源从构建逻辑中剔除出去，而使用 <code>CDN</code>的方式，去引用它们。<br>有时我们希望我们通过 <code>script</code> 引入的库，如用 <code>CDN</code> 的方式引入的 <code>jquery</code> ，我们在使用时，依旧用 <code>require</code> 的方式来使用，但是却不希望 <code>webpack</code> 将它又编译进文件中。这里官网案例已经足够清晰明了，大家有兴趣可以点击了解<br><a href=\"https://link.zhihu.com/?target=https%3A//webpack.js.org/configuration/externals/%23root\">webpack</a><br>官网案例如下</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script</span><br><span class=\"line\">  src=<span class=\"string\">\"https://code.jquery.com/jquery-3.1.0.js\"</span></span><br><span class=\"line\">  integrity=<span class=\"string\">\"sha256-slogkvB1K3VOkzAI8QITxV3VzpOnkeNVsKvtkYLMjfk=\"</span></span><br><span class=\"line\">  crossorigin=<span class=\"string\">\"anonymous\"</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">module.exports = &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  /</span><span class=\"regexp\">/...</span></span><br><span class=\"line\"><span class=\"regexp\">  externals: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    jquery: 'jQuery'</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">import $ from 'jquery';</span></span><br><span class=\"line\"><span class=\"regexp\">$('.my-element').animate(/</span>* ... *<span class=\"regexp\">/);</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Tree-shaking\"><a href=\"#Tree-shaking\" class=\"headerlink\" title=\"Tree-shaking\"></a>Tree-shaking</h4><blockquote>\n<p>这里单独提一下 <code>tree-shaking</code> ,是因为这里有个坑。 <code>tree-shaking</code> 的主要作用是用来清除代码中无用的部分。目前在 <code>webpack4</code> 我们设置 <code>mode</code> 为 <code>production</code> 的时候已经自动开启了<code>tree-shaking</code> 。但是要想使其生效，生成的代码必须是<code>ES6</code>模块。不能使用其它类型的模块如 <code>CommonJS</code> 之流。如果使用 <code>Babel</code> 的话，这里有一个小问题，因为 <code>Babel</code> 的预案（ <code>preset</code> ）默认会将任何模块类型都转译成 <code>CommonJS</code> 类型。修正这个问题也很简单，在 <code>.babelrc</code> 文件或在 <code>webpack.config.js</code> 文件中设置 <code>modules:false</code> 就好了</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .babelrc</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>: [</span><br><span class=\"line\">    [<span class=\"string\">\"@babel/preset-env\"</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"modules\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">      use: &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          presets: [<span class=\"string\">'@babel/preset-env'</span>, &#123; <span class=\"attr\">modules</span>: <span class=\"literal\">false</span> &#125;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;，</span><br><span class=\"line\">      exclude: <span class=\"regexp\">/(node_modules)/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经历过上面两个系列的洗礼，到现在我们成为了一名合格的 <code>webpack</code> 配置工程师。但是光拧螺丝，自身的可替代性还是很高，下面我们将深入 <code>webpack</code> 的原理中去</p>\n<h2 id=\"手写webpack系列\"><a href=\"#手写webpack系列\" class=\"headerlink\" title=\"手写webpack系列\"></a>手写webpack系列</h2><p>经历过上面两个部分，我们已经可以熟练的运用相关的 <code>loader</code> 和 <code>plugin</code> 对我们的代码进行转换、解析。接下来我们自己手动实现 <code>loader</code> 与 <code>plugin</code> ，使其在平时的开发中获得更多的乐趣。</p>\n<h3 id=\"手写-webpack-loader\"><a href=\"#手写-webpack-loader\" class=\"headerlink\" title=\"手写 webpack loader\"></a>手写 webpack loader</h3><blockquote>\n<p><code>loader</code> 从本质上来说其实就是一个 <code>node</code> 模块。相当于一台榨汁机( <code>loader</code> )将相关类型的文件代码( <code>code</code> )给它。根据我们设置的规则，经过它的一系列加工后还给我们加工好的果汁( <code>code</code> )。</p>\n</blockquote>\n<h4 id=\"loader-编写原则\"><a href=\"#loader-编写原则\" class=\"headerlink\" title=\"loader 编写原则\"></a><code>loader</code> 编写原则</h4><ul>\n<li>单一原则: 每个 <code>Loader</code> 只做一件事；</li>\n<li>链式调用: <code>Webpack</code> 会按顺序链式调用每个 <code>Loader</code> ；</li>\n<li>统一原则: 遵循 <code>Webpack</code> 制定的设计规则和结构，输入与输出均为字符串，各个 <code>Loader</code> 完全独立，即插即用；</li>\n</ul>\n<p>在日常开发环境中，为了方便调试我们往往会加入许多 <code>console</code> 打印。但是我们不希望在生产环境中存在打印的值。那么这里我们自己实现一个 <code>loader</code> 去除代码中的 <code>console</code></p>\n<blockquote>\n<p>知识点普及之 <code>AST</code> 。 <code>AST</code> 通俗的来说，假设我们有一个文件 <code>a.js</code> ,我们对 <code>a.js</code> 里面的1000行进行一些操作处理,比如为所有的 <code>await</code> 增加 <code>try catch</code> ,以及其他操作，但是 <code>a.js</code> 里面的代码本质上来说就是一堆字符串。那我们怎么办呢，那就是转换为带标记信息的对象(抽象语法树)我们方便进行增删改查。这个带标记的对象(抽象语法树)就是AST。这里推荐一篇不错的AST文章 <a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000016231512\">AST快速入门</a></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D @babel/parser @babel/traverse @babel/generator @babel/types</span><br></pre></td></tr></table></figure>\n<ul>\n<li>@babel/parser 将源代码解析成 <code>AST</code></li>\n<li>@babel/traverse 对 <code>AST</code> 节点进行递归遍历，生成一个便于操作、转换的 <code>path</code> 对象</li>\n<li>@babel/generator 将 <code>AST</code> 解码生成 <code>js</code> 代码</li>\n<li>@babel/types 通过该模块对具体的 <code>AST</code> 节点进行进行增、删、改、查</li>\n</ul>\n<p>新建 <code>drop-console.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/parser'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/traverse'</span>).default</span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/generator'</span>).default</span><br><span class=\"line\"><span class=\"keyword\">const</span> t = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/types'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ast = parser.parse(source,&#123; <span class=\"attr\">sourceType</span>: <span class=\"string\">'module'</span>&#125;)</span><br><span class=\"line\">  traverse(ast,&#123;</span><br><span class=\"line\">    CallExpression(path)&#123; </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(t.isMemberExpression(path.node.callee) &amp;&amp; t.isIdentifier(path.node.callee.object, &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"console\"</span>&#125;))&#123;</span><br><span class=\"line\">        path.remove()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> output = generator(ast, &#123;&#125;, source);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> output.code</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode:<span class=\"string\">'development'</span>,</span><br><span class=\"line\">  entry:path.resolve(__dirname,<span class=\"string\">'index.js'</span>),</span><br><span class=\"line\">  output:&#123;</span><br><span class=\"line\">    filename:<span class=\"string\">'[name].[contenthash].js'</span>,</span><br><span class=\"line\">    path:path.resolve(__dirname,<span class=\"string\">'dist'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">    rules:[&#123;</span><br><span class=\"line\">      test:<span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">      use:path.resolve(__dirname,<span class=\"string\">'drop-console.js'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>实际上在 <code>webpack4</code> 中已经集成了去除 <code>console</code> 功能，在 <code>minimizer</code> 中可配置 <a href=\"https://link.zhihu.com/?target=https%3A//webpack.js.org/plugins/terser-webpack-plugin/%23root\">去除console</a><br>附上官网 <a href=\"https://link.zhihu.com/?target=https%3A//webpack.docschina.org/contribute/writing-a-loader/\">如何编写一个loader</a></p>\n</blockquote>\n<h3 id=\"手写webpack-plugin\"><a href=\"#手写webpack-plugin\" class=\"headerlink\" title=\"手写webpack plugin\"></a>手写webpack plugin</h3><blockquote>\n<p>在 <code>Webpack</code> 运行的生命周期中会广播出许多事件， <code>Plugin</code> 可以监听这些事件，在合适的时机通过 <code>Webpack</code> 提供的 <code>API</code> 改变输出结果。<br>通俗来说：一盘美味的 盐豆炒鸡蛋 需要经历烧油 炒制 调味到最后的装盘等过程，而 <code>plugin</code> 相当于可以监控每个环节并进行操作，比如可以写一个少放胡椒粉 <code>plugin</code> ,监控 <code>webpack</code> 暴露出的生命周期事件(调味)，在调味的时候执行少放胡椒粉操作。<br>那么它与 <code>loader</code> 的区别是什么呢？上面我们也提到了 <code>loader</code> 的单一原则, <code>loader</code> 只能一件事，比如说 <code>less-loader</code> ,只能解析 <code>less</code> 文件， <code>plugin</code> 则是针对整个流程执行广泛的任务。</p>\n</blockquote>\n<p>一个基本的 <code>plugin</code> 插件结构如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">firstPlugin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (options) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'firstPlugin options'</span>, options)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  apply (compiler) &#123;</span><br><span class=\"line\">    compiler.plugin(<span class=\"string\">'done'</span>, compilation =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'firstPlugin'</span>)</span><br><span class=\"line\">    ))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = firstPlugin</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>compiler</code> 、 <code>compilation</code> 是什么？</p>\n</blockquote>\n<ul>\n<li><code>compiler</code> 对象包含了 <code>Webpack</code> 环境所有的的配置信息。这个对象在启动 <code>webpack</code> 时被一次性建立，并配置好所有可操作的设置，包括 <code>options</code> ， <code>loader</code> 和 <code>plugin</code> 。当在 <code>webpack</code> 环境中应用一个插件时，插件将收到此 <code>compiler</code> 对象的引用。可以使用它来访问 <code>webpack</code> 的主环境。</li>\n<li><code>compilation</code> 对象包含了当前的模块资源、编译生成资源、变化的文件等。当运行 <code>webpack</code> 开发环境中间件时，每当检测到一个文件变化，就会创建一个新的 <code>compilation</code> ，从而生成一组新的编译资源。 <code>compilation</code> 对象也提供了很多关键时机的回调，以供插件做自定义处理时选择使用。</li>\n</ul>\n<p><strong><em><code>compiler</code> 和 <code>compilation</code> 的区别在于</em></strong></p>\n<ul>\n<li><code>compiler</code> 代表了整个 <code>webpack</code> 从启动到关闭的生命周期，而 <code>compilation</code> 只是代表了一次新的编译过程</li>\n<li><code>compiler</code> 和 <code>compilation</code> 暴露出许多钩子，我们可以根据实际需求的场景进行自定义处理</li>\n</ul>\n<p><a href=\"hhttps://www.webpackjs.com/api/compiler-hooks/\">compiler钩子文档</a><br><a href=\"https://www.webpackjs.com/api/compilation-hooks/\" target=\"_blank\" rel=\"noopener\">compilation钩子文档</a></p>\n<p>下面我们手动开发一个简单的需求,在生成打包文件之前自动生成一个关于打包出文件的大小信息<br>新建一个 <code>webpack-firstPlugin.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">firstPlugin</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(options)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.options = options</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  apply(compiler)&#123;</span><br><span class=\"line\">    compiler.plugin(<span class=\"string\">'emit'</span>,(compilation,callback)=&gt;&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> str = <span class=\"string\">''</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> filename <span class=\"keyword\">in</span> compilation.assets)&#123;</span><br><span class=\"line\">        str += <span class=\"string\">`文件:<span class=\"subst\">$&#123;filename&#125;</span>  大小<span class=\"subst\">$&#123;compilation.assets[filename][<span class=\"string\">'size'</span>]()&#125;</span>\\n`</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 通过compilation.assets可以获取打包后静态资源信息，同样也可以写入资源</span></span><br><span class=\"line\">      compilation.assets[<span class=\"string\">'fileSize.md'</span>] = &#123;</span><br><span class=\"line\">        source:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> str</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        size:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> str.length</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      callback()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = firstPlugin</span><br></pre></td></tr></table></figure>\n<p>如何使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> firstPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-firstPlugin.js'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 省略其他代码</span></span><br><span class=\"line\">    plugins:[</span><br><span class=\"line\">        <span class=\"keyword\">new</span> firstPlugin()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行 <code>npm run build</code> 即可看到在 <code>dist</code> 文件夹中生成了一个包含打包文件信息的 <code>fileSize.md</code></p>\n<blockquote>\n<p>上面两个 <code>loader</code> 与 <code>plugin</code> 案例只是一个引导，实际开发需求中的 <code>loader</code> 与 <code>plugin</code> 要考虑的方面很多，建议大家自己多动手尝试一下。</p>\n</blockquote>\n<p>附上官网 <a href=\"https://www.webpackjs.com/contribute/writing-a-plugin/\" target=\"_blank\" rel=\"noopener\">如何编写一个plugin</a></p>\n<h2 id=\"webpack5-0的时代\"><a href=\"#webpack5-0的时代\" class=\"headerlink\" title=\"webpack5.0的时代\"></a>webpack5.0的时代</h2><p>无论是前端框架还是构建工具的更新速度远远超乎了我们的想象,前几年的 <code>jquery</code> 一把梭的时代一去不复返。我们要拥抱的是不断更新迭代的 <code>vue</code> 、 <code>react</code> 、 <code>node</code> 、 <code>serverless</code> 、 <code>docker</code> 、 <code>k8s</code> ….<br>不甘落后的 <code>webpack</code> 也已经在近日发布了 <code>webpack 5.0.0 beta 10</code> 版本。在之前作者也曾提过 <code>webpack5.0</code> 旨在减少配置的复杂度，使其更容易上手( <code>webpack4</code> 的时候也说了这句话)，以及一些性能上的提升</p>\n<ul>\n<li>使用持久化缓存提高构建性能；</li>\n<li>使用更好的算法和默认值改进长期缓存（long-term caching）；</li>\n<li>清理内部结构而不引入任何破坏性的变化；</li>\n<li>引入一些breaking changes，以便尽可能长的使用v5版本。</li>\n</ul>\n<p>目前来看，维护者的更新很频繁，相信用不了多久webpack5.0将会拥抱大众。感兴趣的同学可以先安装beta版本尝尝鲜。不过在此之前建议大家先对webpack4进行一番掌握,这样后面的路才会越来越好走。</p>\n<h2 id=\"更多阅读\"><a href=\"#更多阅读\" class=\"headerlink\" title=\"更多阅读\"></a>更多阅读</h2><p><a href=\"https://webpack.docschina.org/\" target=\"_blank\" rel=\"noopener\">webpack中文</a><br><a href=\"https://www.webpackjs.com/configuration/\" target=\"_blank\" rel=\"noopener\">webpackjs</a><br><a href=\"https://mp.weixin.qq.com/s/OBUcxEFXKQQubP08LO2Uhg\" target=\"_blank\" rel=\"noopener\">4W字长文带你深度解锁Webpack系列(上)</a></p>\n"},{"title":"微信的H5兼容方案","date":"2019-12-30T17:37:08.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n最近被公司新来的前端问到了一些微信页面的兼容性问题，因为我做微信开发的经验比较少，被问到了真是感到很尴尬，所以在搜到了解决方案告诉了他之后，我又深入的再网上找了一些微信开发中遇到的兼容问题，特此整理，以留后用。\n<!-- more -->\n\n## 1、ios端兼容input光标的高度\n***bug描述：***\n这个问题只出现在苹果手机上，在安卓手机上显示没有问题，可以说是非常诡异，简单描述一下就是在input输入框聚焦时，光标大小应该跟字号一直，但是在苹果手机上当点击输入的时候，光标的高度和父盒子的高度一样。\n***分析：***\n说来主要是习惯导致的问题，通常我们习惯将height和line-height设置成一样的值，这个时候input光标就会整个变得很大。\n***解决：***\n实际上解决方案也很简单，就是不设置行高，通过padding来控制输入内容与外框的距离。\n```\n// less代码\n.input-x{\n\theight:40px;\n\t// line-height:40px; // 此行注释掉\n\t.input-inline{\n\t\tpadding: 10px 0;\n\t}\n}\n```\n这样做问题就解决了。\n\n## 2、ios端微信h5页面上下滑动会卡顿，页面会有缺失\n***bug描述：***\n没错又是ios端，当页面高度超过一屏，那么上下滑动时就会出现页面卡顿的情况，而且时有伴随内容不能全部显示的情况。\n***分析：***\n这里实际上是浏览器内核解析不同导致的问题，在Andriod设备上，微信调用的是Webkit内核，而ios中是使用了Safari的内核，Safari对于滚动事件（overflow-scrolling）会使用原生的控件。而webkit内核则会创建一个UIScrollView来提供给子layer用以渲染。\n***解决：***\n在做样式重置时，加上下面这句话就能解决这个问题。\n```\n// css代码\n*{\n\t-webkit-overflow-scrolling: touch;\n}\n```\n但是这个方案也有缺陷，就是页面中不能有使用absolute定位的元素，不然布局就错乱了。\n***延伸：***\n-webkit-overflow-scrolling 属性控制元素在移动设备上是否使用滚动回弹效果.\n- auto: 使用普通滚动, 当手指从触摸屏上移开，滚动会立即停止。\n- touch: 使用具有回弹效果的滚动, 当手指从触摸屏上移开，内容会继续保持一段时间的滚动效果。继续滚动的速度和持续的时间和滚动手势的强烈程度成正比。同时也会创建一个新的堆栈上下文。\n\n## 3、ios键盘唤起再收起，页面不会恢复原位\n***bug描述：***\n哎，对的还是ios，问题标题描述的比较清晰了，就是键盘弹出时，页面内容会整体上移，但是收起键盘时本应回归原位的不回去了。—_—|||\n***分析：***\n固定定位的元素，如果元素内input框聚焦的时候会弹出软键盘，软键盘会占用屏幕面积，失去焦点时软键盘消失，但是仍会占用，页面就会不能恢复原状，也就导致input框不能再次输入了。\n***解决：***\n在input失去焦点键盘收起时，写一个监听事件，事例代码如下：\n```\n// vue代码\n<input @blur=\"changeBlur()\"/>\n\n// js代码\nchangeBlur(){\n\tlet ua = navigator.userAgent; // 获取用户代理\n\tlet app = navigator.appVersion; // 获取客户端版本信息\n\tlet isIos = ua.match(/i[^;]+;( U;)? CPU.+Mac OS X/); // 判断是否是Ios设备\n\tif(isIos){\n\t\tsetTimeout(()=>{\n\t\t\tconst scrollHeight = document.documentElement.scrollTop || document.body.scrollTop || 0\n\t\t\twindow.scrollTop(0,Math.max(scrollHeight - 1), 0)\n\t\t},100)\n\t}\n}\n```\n***延伸：***\n在iso的微信开发中，页面元素如果用到了position: fixed进行定位，那么键盘收起时，就会被顶上去，第三方输入法也不例外。\n\n## 4、Android弹出键盘遮挡文本输入框\n***bug描述：***\n刚才说的问题都是Ios端的，实际上Android上也有挺多坑，上面讲到Ios上输入框弹出键盘的问题后，Android中实际也有，只是现象不同；Andriod中弹出键盘后页面不会向上滑动，但是如果输入框在底部的话会直接被挡住。。。\n***分析：***\n很坑，因为Andriod中输入框focus后，并不会向上滑动，如果靠下就会被挡住。。\n***解决：***\n实际上跟Ios上处理差不多的方案，代码如下：\n```\n// vue代码\n<input @blur=\"changeBlur()\"/>\n\n// js代码\nchangeFocus(){\n   let ua = navigator.userAgent;\n\t let app = navigator.appVersion;\n   let isAndroid = u.indexOf('Android') > -1 || u.indexOf('Linux') > -1;\n   if(isAndroid){\n      setTimeout(function() {\n      document.activeElement.scrollIntoViewIfNeeded();\n      document.activeElement.scrollIntoView();\n      }, 500);\n   }\n}\n```\n***扩展***\nElement.scrollIntoView()方法让当前的元素滚动到浏览器窗口的可视区域内。而Element.scrollIntoViewIfNeeded()方法也是用来将不在浏览器窗口的可见区域内的元素滚动到浏览器窗口的可见区域。但如果该元素已经在浏览器窗口的可见区域内，则不会发生滚动\n\n## 5、Vue中路由使用hash模式，分享时Android可分享成功，Ios端分享失败\n***bug描述：***\nIos的问题真的挺多的。。。\n- 在分享页面给A时，没问题，A把链接分享给B的时候就跳转到首页了；\n- 使用Vue-router跳转到第二个页面在分享时候，分享失败；\n以上两个问题在Android上均没有问题。\n***分析：***\njssdk是后端进行签署，前端校验，但是有时跨域，ios是分享以后会自动带上 from=singlemessage&isappinstalled=0 以及其他参数，分享朋友圈参数还不一样，貌似系统不一样参数也不一样，但是每次获取url并不能获取后面这些参数\n***解决：***\n- 可以使用改页面this.$router.push跳转，为window.location.href去跳转，而不使用路由跳转，这样可以使地址栏的地址与当前页的地址一样，可以分享成功\n- 把入口地址保存在本地，等需要获取签名的时候再取出来，注意：sessionStorage.setItem(‘href’,href); 只在刚进入单应用的时候保存！（还没测试，有点low）\n\n## 写在最后\n虽然微信H5方式开发想对来说成本比较低，但是有时候坑开始挺多的，但是微信原生开发又增加了成本，很矛盾，目前能做的就是尽量把踩过的坑都记下来，下次别再跳进去了。","source":"_posts/weichat-h5-compatibility.md","raw":"---\ntitle: 微信的H5兼容方案\ndate: 2019-12-31 1:37:08\ncategories: \n\t- 前端技术\ntags: \n\t- 微信\n\t- 兼容性问题\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n最近被公司新来的前端问到了一些微信页面的兼容性问题，因为我做微信开发的经验比较少，被问到了真是感到很尴尬，所以在搜到了解决方案告诉了他之后，我又深入的再网上找了一些微信开发中遇到的兼容问题，特此整理，以留后用。\n<!-- more -->\n\n## 1、ios端兼容input光标的高度\n***bug描述：***\n这个问题只出现在苹果手机上，在安卓手机上显示没有问题，可以说是非常诡异，简单描述一下就是在input输入框聚焦时，光标大小应该跟字号一直，但是在苹果手机上当点击输入的时候，光标的高度和父盒子的高度一样。\n***分析：***\n说来主要是习惯导致的问题，通常我们习惯将height和line-height设置成一样的值，这个时候input光标就会整个变得很大。\n***解决：***\n实际上解决方案也很简单，就是不设置行高，通过padding来控制输入内容与外框的距离。\n```\n// less代码\n.input-x{\n\theight:40px;\n\t// line-height:40px; // 此行注释掉\n\t.input-inline{\n\t\tpadding: 10px 0;\n\t}\n}\n```\n这样做问题就解决了。\n\n## 2、ios端微信h5页面上下滑动会卡顿，页面会有缺失\n***bug描述：***\n没错又是ios端，当页面高度超过一屏，那么上下滑动时就会出现页面卡顿的情况，而且时有伴随内容不能全部显示的情况。\n***分析：***\n这里实际上是浏览器内核解析不同导致的问题，在Andriod设备上，微信调用的是Webkit内核，而ios中是使用了Safari的内核，Safari对于滚动事件（overflow-scrolling）会使用原生的控件。而webkit内核则会创建一个UIScrollView来提供给子layer用以渲染。\n***解决：***\n在做样式重置时，加上下面这句话就能解决这个问题。\n```\n// css代码\n*{\n\t-webkit-overflow-scrolling: touch;\n}\n```\n但是这个方案也有缺陷，就是页面中不能有使用absolute定位的元素，不然布局就错乱了。\n***延伸：***\n-webkit-overflow-scrolling 属性控制元素在移动设备上是否使用滚动回弹效果.\n- auto: 使用普通滚动, 当手指从触摸屏上移开，滚动会立即停止。\n- touch: 使用具有回弹效果的滚动, 当手指从触摸屏上移开，内容会继续保持一段时间的滚动效果。继续滚动的速度和持续的时间和滚动手势的强烈程度成正比。同时也会创建一个新的堆栈上下文。\n\n## 3、ios键盘唤起再收起，页面不会恢复原位\n***bug描述：***\n哎，对的还是ios，问题标题描述的比较清晰了，就是键盘弹出时，页面内容会整体上移，但是收起键盘时本应回归原位的不回去了。—_—|||\n***分析：***\n固定定位的元素，如果元素内input框聚焦的时候会弹出软键盘，软键盘会占用屏幕面积，失去焦点时软键盘消失，但是仍会占用，页面就会不能恢复原状，也就导致input框不能再次输入了。\n***解决：***\n在input失去焦点键盘收起时，写一个监听事件，事例代码如下：\n```\n// vue代码\n<input @blur=\"changeBlur()\"/>\n\n// js代码\nchangeBlur(){\n\tlet ua = navigator.userAgent; // 获取用户代理\n\tlet app = navigator.appVersion; // 获取客户端版本信息\n\tlet isIos = ua.match(/i[^;]+;( U;)? CPU.+Mac OS X/); // 判断是否是Ios设备\n\tif(isIos){\n\t\tsetTimeout(()=>{\n\t\t\tconst scrollHeight = document.documentElement.scrollTop || document.body.scrollTop || 0\n\t\t\twindow.scrollTop(0,Math.max(scrollHeight - 1), 0)\n\t\t},100)\n\t}\n}\n```\n***延伸：***\n在iso的微信开发中，页面元素如果用到了position: fixed进行定位，那么键盘收起时，就会被顶上去，第三方输入法也不例外。\n\n## 4、Android弹出键盘遮挡文本输入框\n***bug描述：***\n刚才说的问题都是Ios端的，实际上Android上也有挺多坑，上面讲到Ios上输入框弹出键盘的问题后，Android中实际也有，只是现象不同；Andriod中弹出键盘后页面不会向上滑动，但是如果输入框在底部的话会直接被挡住。。。\n***分析：***\n很坑，因为Andriod中输入框focus后，并不会向上滑动，如果靠下就会被挡住。。\n***解决：***\n实际上跟Ios上处理差不多的方案，代码如下：\n```\n// vue代码\n<input @blur=\"changeBlur()\"/>\n\n// js代码\nchangeFocus(){\n   let ua = navigator.userAgent;\n\t let app = navigator.appVersion;\n   let isAndroid = u.indexOf('Android') > -1 || u.indexOf('Linux') > -1;\n   if(isAndroid){\n      setTimeout(function() {\n      document.activeElement.scrollIntoViewIfNeeded();\n      document.activeElement.scrollIntoView();\n      }, 500);\n   }\n}\n```\n***扩展***\nElement.scrollIntoView()方法让当前的元素滚动到浏览器窗口的可视区域内。而Element.scrollIntoViewIfNeeded()方法也是用来将不在浏览器窗口的可见区域内的元素滚动到浏览器窗口的可见区域。但如果该元素已经在浏览器窗口的可见区域内，则不会发生滚动\n\n## 5、Vue中路由使用hash模式，分享时Android可分享成功，Ios端分享失败\n***bug描述：***\nIos的问题真的挺多的。。。\n- 在分享页面给A时，没问题，A把链接分享给B的时候就跳转到首页了；\n- 使用Vue-router跳转到第二个页面在分享时候，分享失败；\n以上两个问题在Android上均没有问题。\n***分析：***\njssdk是后端进行签署，前端校验，但是有时跨域，ios是分享以后会自动带上 from=singlemessage&isappinstalled=0 以及其他参数，分享朋友圈参数还不一样，貌似系统不一样参数也不一样，但是每次获取url并不能获取后面这些参数\n***解决：***\n- 可以使用改页面this.$router.push跳转，为window.location.href去跳转，而不使用路由跳转，这样可以使地址栏的地址与当前页的地址一样，可以分享成功\n- 把入口地址保存在本地，等需要获取签名的时候再取出来，注意：sessionStorage.setItem(‘href’,href); 只在刚进入单应用的时候保存！（还没测试，有点low）\n\n## 写在最后\n虽然微信H5方式开发想对来说成本比较低，但是有时候坑开始挺多的，但是微信原生开发又增加了成本，很矛盾，目前能做的就是尽量把踩过的坑都记下来，下次别再跳进去了。","slug":"weichat-h5-compatibility","published":1,"updated":"2020-04-02T03:20:12.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs60007looa6ce69gv5r","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近被公司新来的前端问到了一些微信页面的兼容性问题，因为我做微信开发的经验比较少，被问到了真是感到很尴尬，所以在搜到了解决方案告诉了他之后，我又深入的再网上找了一些微信开发中遇到的兼容问题，特此整理，以留后用。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"1、ios端兼容input光标的高度\"><a href=\"#1、ios端兼容input光标的高度\" class=\"headerlink\" title=\"1、ios端兼容input光标的高度\"></a>1、ios端兼容input光标的高度</h2><p><strong><em>bug描述：</em></strong><br>这个问题只出现在苹果手机上，在安卓手机上显示没有问题，可以说是非常诡异，简单描述一下就是在input输入框聚焦时，光标大小应该跟字号一直，但是在苹果手机上当点击输入的时候，光标的高度和父盒子的高度一样。<br><strong><em>分析：</em></strong><br>说来主要是习惯导致的问题，通常我们习惯将height和line-height设置成一样的值，这个时候input光标就会整个变得很大。<br><strong><em>解决：</em></strong><br>实际上解决方案也很简单，就是不设置行高，通过padding来控制输入内容与外框的距离。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; less代码</span><br><span class=\"line\">.input-x&#123;</span><br><span class=\"line\">\theight:40px;</span><br><span class=\"line\">\t&#x2F;&#x2F; line-height:40px; &#x2F;&#x2F; 此行注释掉</span><br><span class=\"line\">\t.input-inline&#123;</span><br><span class=\"line\">\t\tpadding: 10px 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样做问题就解决了。</p>\n<h2 id=\"2、ios端微信h5页面上下滑动会卡顿，页面会有缺失\"><a href=\"#2、ios端微信h5页面上下滑动会卡顿，页面会有缺失\" class=\"headerlink\" title=\"2、ios端微信h5页面上下滑动会卡顿，页面会有缺失\"></a>2、ios端微信h5页面上下滑动会卡顿，页面会有缺失</h2><p><strong><em>bug描述：</em></strong><br>没错又是ios端，当页面高度超过一屏，那么上下滑动时就会出现页面卡顿的情况，而且时有伴随内容不能全部显示的情况。<br><strong><em>分析：</em></strong><br>这里实际上是浏览器内核解析不同导致的问题，在Andriod设备上，微信调用的是Webkit内核，而ios中是使用了Safari的内核，Safari对于滚动事件（overflow-scrolling）会使用原生的控件。而webkit内核则会创建一个UIScrollView来提供给子layer用以渲染。<br><strong><em>解决：</em></strong><br>在做样式重置时，加上下面这句话就能解决这个问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; css代码</span><br><span class=\"line\">*&#123;</span><br><span class=\"line\">\t-webkit-overflow-scrolling: touch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这个方案也有缺陷，就是页面中不能有使用absolute定位的元素，不然布局就错乱了。<br><strong><em>延伸：</em></strong><br>-webkit-overflow-scrolling 属性控制元素在移动设备上是否使用滚动回弹效果.</p>\n<ul>\n<li>auto: 使用普通滚动, 当手指从触摸屏上移开，滚动会立即停止。</li>\n<li>touch: 使用具有回弹效果的滚动, 当手指从触摸屏上移开，内容会继续保持一段时间的滚动效果。继续滚动的速度和持续的时间和滚动手势的强烈程度成正比。同时也会创建一个新的堆栈上下文。</li>\n</ul>\n<h2 id=\"3、ios键盘唤起再收起，页面不会恢复原位\"><a href=\"#3、ios键盘唤起再收起，页面不会恢复原位\" class=\"headerlink\" title=\"3、ios键盘唤起再收起，页面不会恢复原位\"></a>3、ios键盘唤起再收起，页面不会恢复原位</h2><p><strong><em>bug描述：</em></strong><br>哎，对的还是ios，问题标题描述的比较清晰了，就是键盘弹出时，页面内容会整体上移，但是收起键盘时本应回归原位的不回去了。—_—|||<br><strong><em>分析：</em></strong><br>固定定位的元素，如果元素内input框聚焦的时候会弹出软键盘，软键盘会占用屏幕面积，失去焦点时软键盘消失，但是仍会占用，页面就会不能恢复原状，也就导致input框不能再次输入了。<br><strong><em>解决：</em></strong><br>在input失去焦点键盘收起时，写一个监听事件，事例代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; vue代码</span><br><span class=\"line\">&lt;input @blur&#x3D;&quot;changeBlur()&quot;&#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">changeBlur()&#123;</span><br><span class=\"line\">\tlet ua &#x3D; navigator.userAgent; &#x2F;&#x2F; 获取用户代理</span><br><span class=\"line\">\tlet app &#x3D; navigator.appVersion; &#x2F;&#x2F; 获取客户端版本信息</span><br><span class=\"line\">\tlet isIos &#x3D; ua.match(&#x2F;i[^;]+;( U;)? CPU.+Mac OS X&#x2F;); &#x2F;&#x2F; 判断是否是Ios设备</span><br><span class=\"line\">\tif(isIos)&#123;</span><br><span class=\"line\">\t\tsetTimeout(()&#x3D;&gt;&#123;</span><br><span class=\"line\">\t\t\tconst scrollHeight &#x3D; document.documentElement.scrollTop || document.body.scrollTop || 0</span><br><span class=\"line\">\t\t\twindow.scrollTop(0,Math.max(scrollHeight - 1), 0)</span><br><span class=\"line\">\t\t&#125;,100)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>延伸：</em></strong><br>在iso的微信开发中，页面元素如果用到了position: fixed进行定位，那么键盘收起时，就会被顶上去，第三方输入法也不例外。</p>\n<h2 id=\"4、Android弹出键盘遮挡文本输入框\"><a href=\"#4、Android弹出键盘遮挡文本输入框\" class=\"headerlink\" title=\"4、Android弹出键盘遮挡文本输入框\"></a>4、Android弹出键盘遮挡文本输入框</h2><p><strong><em>bug描述：</em></strong><br>刚才说的问题都是Ios端的，实际上Android上也有挺多坑，上面讲到Ios上输入框弹出键盘的问题后，Android中实际也有，只是现象不同；Andriod中弹出键盘后页面不会向上滑动，但是如果输入框在底部的话会直接被挡住。。。<br><strong><em>分析：</em></strong><br>很坑，因为Andriod中输入框focus后，并不会向上滑动，如果靠下就会被挡住。。<br><strong><em>解决：</em></strong><br>实际上跟Ios上处理差不多的方案，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; vue代码</span><br><span class=\"line\">&lt;input @blur&#x3D;&quot;changeBlur()&quot;&#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">changeFocus()&#123;</span><br><span class=\"line\">   let ua &#x3D; navigator.userAgent;</span><br><span class=\"line\">\t let app &#x3D; navigator.appVersion;</span><br><span class=\"line\">   let isAndroid &#x3D; u.indexOf(&#39;Android&#39;) &gt; -1 || u.indexOf(&#39;Linux&#39;) &gt; -1;</span><br><span class=\"line\">   if(isAndroid)&#123;</span><br><span class=\"line\">      setTimeout(function() &#123;</span><br><span class=\"line\">      document.activeElement.scrollIntoViewIfNeeded();</span><br><span class=\"line\">      document.activeElement.scrollIntoView();</span><br><span class=\"line\">      &#125;, 500);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>扩展</em></strong><br>Element.scrollIntoView()方法让当前的元素滚动到浏览器窗口的可视区域内。而Element.scrollIntoViewIfNeeded()方法也是用来将不在浏览器窗口的可见区域内的元素滚动到浏览器窗口的可见区域。但如果该元素已经在浏览器窗口的可见区域内，则不会发生滚动</p>\n<h2 id=\"5、Vue中路由使用hash模式，分享时Android可分享成功，Ios端分享失败\"><a href=\"#5、Vue中路由使用hash模式，分享时Android可分享成功，Ios端分享失败\" class=\"headerlink\" title=\"5、Vue中路由使用hash模式，分享时Android可分享成功，Ios端分享失败\"></a>5、Vue中路由使用hash模式，分享时Android可分享成功，Ios端分享失败</h2><p><strong><em>bug描述：</em></strong><br>Ios的问题真的挺多的。。。</p>\n<ul>\n<li>在分享页面给A时，没问题，A把链接分享给B的时候就跳转到首页了；</li>\n<li>使用Vue-router跳转到第二个页面在分享时候，分享失败；<br>以上两个问题在Android上均没有问题。</li>\n</ul>\n<p><strong><em>分析：</em></strong><br>jssdk是后端进行签署，前端校验，但是有时跨域，ios是分享以后会自动带上 from=singlemessage&amp;isappinstalled=0 以及其他参数，分享朋友圈参数还不一样，貌似系统不一样参数也不一样，但是每次获取url并不能获取后面这些参数<br><strong><em>解决：</em></strong></p>\n<ul>\n<li>可以使用改页面this.$router.push跳转，为window.location.href去跳转，而不使用路由跳转，这样可以使地址栏的地址与当前页的地址一样，可以分享成功</li>\n<li>把入口地址保存在本地，等需要获取签名的时候再取出来，注意：sessionStorage.setItem(‘href’,href); 只在刚进入单应用的时候保存！（还没测试，有点low）</li>\n</ul>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>虽然微信H5方式开发想对来说成本比较低，但是有时候坑开始挺多的，但是微信原生开发又增加了成本，很矛盾，目前能做的就是尽量把踩过的坑都记下来，下次别再跳进去了。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近被公司新来的前端问到了一些微信页面的兼容性问题，因为我做微信开发的经验比较少，被问到了真是感到很尴尬，所以在搜到了解决方案告诉了他之后，我又深入的再网上找了一些微信开发中遇到的兼容问题，特此整理，以留后用。</p>","more":"<h2 id=\"1、ios端兼容input光标的高度\"><a href=\"#1、ios端兼容input光标的高度\" class=\"headerlink\" title=\"1、ios端兼容input光标的高度\"></a>1、ios端兼容input光标的高度</h2><p><strong><em>bug描述：</em></strong><br>这个问题只出现在苹果手机上，在安卓手机上显示没有问题，可以说是非常诡异，简单描述一下就是在input输入框聚焦时，光标大小应该跟字号一直，但是在苹果手机上当点击输入的时候，光标的高度和父盒子的高度一样。<br><strong><em>分析：</em></strong><br>说来主要是习惯导致的问题，通常我们习惯将height和line-height设置成一样的值，这个时候input光标就会整个变得很大。<br><strong><em>解决：</em></strong><br>实际上解决方案也很简单，就是不设置行高，通过padding来控制输入内容与外框的距离。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; less代码</span><br><span class=\"line\">.input-x&#123;</span><br><span class=\"line\">\theight:40px;</span><br><span class=\"line\">\t&#x2F;&#x2F; line-height:40px; &#x2F;&#x2F; 此行注释掉</span><br><span class=\"line\">\t.input-inline&#123;</span><br><span class=\"line\">\t\tpadding: 10px 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样做问题就解决了。</p>\n<h2 id=\"2、ios端微信h5页面上下滑动会卡顿，页面会有缺失\"><a href=\"#2、ios端微信h5页面上下滑动会卡顿，页面会有缺失\" class=\"headerlink\" title=\"2、ios端微信h5页面上下滑动会卡顿，页面会有缺失\"></a>2、ios端微信h5页面上下滑动会卡顿，页面会有缺失</h2><p><strong><em>bug描述：</em></strong><br>没错又是ios端，当页面高度超过一屏，那么上下滑动时就会出现页面卡顿的情况，而且时有伴随内容不能全部显示的情况。<br><strong><em>分析：</em></strong><br>这里实际上是浏览器内核解析不同导致的问题，在Andriod设备上，微信调用的是Webkit内核，而ios中是使用了Safari的内核，Safari对于滚动事件（overflow-scrolling）会使用原生的控件。而webkit内核则会创建一个UIScrollView来提供给子layer用以渲染。<br><strong><em>解决：</em></strong><br>在做样式重置时，加上下面这句话就能解决这个问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; css代码</span><br><span class=\"line\">*&#123;</span><br><span class=\"line\">\t-webkit-overflow-scrolling: touch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这个方案也有缺陷，就是页面中不能有使用absolute定位的元素，不然布局就错乱了。<br><strong><em>延伸：</em></strong><br>-webkit-overflow-scrolling 属性控制元素在移动设备上是否使用滚动回弹效果.</p>\n<ul>\n<li>auto: 使用普通滚动, 当手指从触摸屏上移开，滚动会立即停止。</li>\n<li>touch: 使用具有回弹效果的滚动, 当手指从触摸屏上移开，内容会继续保持一段时间的滚动效果。继续滚动的速度和持续的时间和滚动手势的强烈程度成正比。同时也会创建一个新的堆栈上下文。</li>\n</ul>\n<h2 id=\"3、ios键盘唤起再收起，页面不会恢复原位\"><a href=\"#3、ios键盘唤起再收起，页面不会恢复原位\" class=\"headerlink\" title=\"3、ios键盘唤起再收起，页面不会恢复原位\"></a>3、ios键盘唤起再收起，页面不会恢复原位</h2><p><strong><em>bug描述：</em></strong><br>哎，对的还是ios，问题标题描述的比较清晰了，就是键盘弹出时，页面内容会整体上移，但是收起键盘时本应回归原位的不回去了。—_—|||<br><strong><em>分析：</em></strong><br>固定定位的元素，如果元素内input框聚焦的时候会弹出软键盘，软键盘会占用屏幕面积，失去焦点时软键盘消失，但是仍会占用，页面就会不能恢复原状，也就导致input框不能再次输入了。<br><strong><em>解决：</em></strong><br>在input失去焦点键盘收起时，写一个监听事件，事例代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; vue代码</span><br><span class=\"line\">&lt;input @blur&#x3D;&quot;changeBlur()&quot;&#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">changeBlur()&#123;</span><br><span class=\"line\">\tlet ua &#x3D; navigator.userAgent; &#x2F;&#x2F; 获取用户代理</span><br><span class=\"line\">\tlet app &#x3D; navigator.appVersion; &#x2F;&#x2F; 获取客户端版本信息</span><br><span class=\"line\">\tlet isIos &#x3D; ua.match(&#x2F;i[^;]+;( U;)? CPU.+Mac OS X&#x2F;); &#x2F;&#x2F; 判断是否是Ios设备</span><br><span class=\"line\">\tif(isIos)&#123;</span><br><span class=\"line\">\t\tsetTimeout(()&#x3D;&gt;&#123;</span><br><span class=\"line\">\t\t\tconst scrollHeight &#x3D; document.documentElement.scrollTop || document.body.scrollTop || 0</span><br><span class=\"line\">\t\t\twindow.scrollTop(0,Math.max(scrollHeight - 1), 0)</span><br><span class=\"line\">\t\t&#125;,100)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>延伸：</em></strong><br>在iso的微信开发中，页面元素如果用到了position: fixed进行定位，那么键盘收起时，就会被顶上去，第三方输入法也不例外。</p>\n<h2 id=\"4、Android弹出键盘遮挡文本输入框\"><a href=\"#4、Android弹出键盘遮挡文本输入框\" class=\"headerlink\" title=\"4、Android弹出键盘遮挡文本输入框\"></a>4、Android弹出键盘遮挡文本输入框</h2><p><strong><em>bug描述：</em></strong><br>刚才说的问题都是Ios端的，实际上Android上也有挺多坑，上面讲到Ios上输入框弹出键盘的问题后，Android中实际也有，只是现象不同；Andriod中弹出键盘后页面不会向上滑动，但是如果输入框在底部的话会直接被挡住。。。<br><strong><em>分析：</em></strong><br>很坑，因为Andriod中输入框focus后，并不会向上滑动，如果靠下就会被挡住。。<br><strong><em>解决：</em></strong><br>实际上跟Ios上处理差不多的方案，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; vue代码</span><br><span class=\"line\">&lt;input @blur&#x3D;&quot;changeBlur()&quot;&#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">changeFocus()&#123;</span><br><span class=\"line\">   let ua &#x3D; navigator.userAgent;</span><br><span class=\"line\">\t let app &#x3D; navigator.appVersion;</span><br><span class=\"line\">   let isAndroid &#x3D; u.indexOf(&#39;Android&#39;) &gt; -1 || u.indexOf(&#39;Linux&#39;) &gt; -1;</span><br><span class=\"line\">   if(isAndroid)&#123;</span><br><span class=\"line\">      setTimeout(function() &#123;</span><br><span class=\"line\">      document.activeElement.scrollIntoViewIfNeeded();</span><br><span class=\"line\">      document.activeElement.scrollIntoView();</span><br><span class=\"line\">      &#125;, 500);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>扩展</em></strong><br>Element.scrollIntoView()方法让当前的元素滚动到浏览器窗口的可视区域内。而Element.scrollIntoViewIfNeeded()方法也是用来将不在浏览器窗口的可见区域内的元素滚动到浏览器窗口的可见区域。但如果该元素已经在浏览器窗口的可见区域内，则不会发生滚动</p>\n<h2 id=\"5、Vue中路由使用hash模式，分享时Android可分享成功，Ios端分享失败\"><a href=\"#5、Vue中路由使用hash模式，分享时Android可分享成功，Ios端分享失败\" class=\"headerlink\" title=\"5、Vue中路由使用hash模式，分享时Android可分享成功，Ios端分享失败\"></a>5、Vue中路由使用hash模式，分享时Android可分享成功，Ios端分享失败</h2><p><strong><em>bug描述：</em></strong><br>Ios的问题真的挺多的。。。</p>\n<ul>\n<li>在分享页面给A时，没问题，A把链接分享给B的时候就跳转到首页了；</li>\n<li>使用Vue-router跳转到第二个页面在分享时候，分享失败；<br>以上两个问题在Android上均没有问题。</li>\n</ul>\n<p><strong><em>分析：</em></strong><br>jssdk是后端进行签署，前端校验，但是有时跨域，ios是分享以后会自动带上 from=singlemessage&amp;isappinstalled=0 以及其他参数，分享朋友圈参数还不一样，貌似系统不一样参数也不一样，但是每次获取url并不能获取后面这些参数<br><strong><em>解决：</em></strong></p>\n<ul>\n<li>可以使用改页面this.$router.push跳转，为window.location.href去跳转，而不使用路由跳转，这样可以使地址栏的地址与当前页的地址一样，可以分享成功</li>\n<li>把入口地址保存在本地，等需要获取签名的时候再取出来，注意：sessionStorage.setItem(‘href’,href); 只在刚进入单应用的时候保存！（还没测试，有点low）</li>\n</ul>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>虽然微信H5方式开发想对来说成本比较低，但是有时候坑开始挺多的，但是微信原生开发又增加了成本，很矛盾，目前能做的就是尽量把踩过的坑都记下来，下次别再跳进去了。</p>"},{"title":"npx是什么","date":"2020-04-15T16:00:00.000Z","_content":"\n> 作者：李旭光\n> 引用请标明出处\n\n## 前言\n最近在阅读一些文章时，经常看到介绍命令的时候用到了 npx 关键字，之前知道有 node 有 npm 但是很少用到 npx ，npx是个啥呢？好奇上网上找了些资料学习了一下，写篇学习笔记记录一下。\n\n<!-- more -->\n## npx 起源\n我从阮一峰的博客中看到介绍 npx 的文章，开头的一句话说明了他诞生的日子。\n> npm 从5.2版开始，增加了 npx 命令。\n\n为了验证阮一峰这里介绍的正确性我特意下了对应的npm版本验证了一下确实如此，而且在网上找到了另一位大佬司徒正美（大佬走好）博客中也对 npx 做了介绍\n> 最近我在更新 npm 5.2.0 的时候发现会买一送一，自动安装了 npx。\n\n由此，我可以肯定的告诉大家，npx是npm在5.2.0之后版本推出的一个工具，那么他是干嘛用的呢？\n\n## npx 作用\n想要了解一个技术，最好的途经是他的官网，于是我到网上找到了 npx 在 github 上的仓库，地址如下\n[npx仓库](https://github.com/npm/npx#readme)，其中对 npx 有这样一段介绍\n> DESCRIPTION\n> Executes <command> either from a local node_modules/.bin, or from a central cache, installing any packages needed in order for <command> to run.\n> By default, npx will check whether <command> exists in $PATH, or in the local project binaries, and execute that. If <command> is not found, it will be installed prior to execution.\n> Unless a --package option is specified, npx will try to guess the name of the binary to invoke depending on the specifier provided. All package specifiers understood by npm may be used with npx, including git specifiers, remote tarballs, local directories, or scoped packages.\n> If a full specifier is included, or if --package is used, npx will always use a freshly-installed, temporary version of the package. This can also be forced with the --ignore-existing flag.\n\n上面这一大段英文我想大家一定看了就头疼，所以为了大家不那么头疼，可以看一下下面我翻译的内容，如果有翻译不对的地方，还请指正。\n\n> 解释\n> 执行 command 命令，无论从本地（我理解为项目目录）node_modules/.bin 或者从全局缓存中， 安装所需执行的任何包。\n> 默认情况下，npx将检查 command 是否存在于 $PATH 中，或者在本地项目二进制文件中，并执行该命令。\n如果没有找到 command ，它将在执行之前安装。\n> 除非指定了 —package 选项，否则npx将根据提供的说明符猜测要调用的二进制文件的名称。\nnpm可以理解的所有包说明符都可以与npx一起使用，包括git说明符、远程tarball、本地目录或作用域包。\n> 如果包含完整的说明符，或者使用 ——package 选项，npx将始终使用新安装的包的临时版本。\n这也可以用 ——ignore-existing 标记强制执行。\n\n上面这段机翻简直让人无法理解，所以我又去大佬博客下看了下他们的解释\n\n> npx 想要解决的主要问题，就是调用项目内部安装的模块。 -- 阮一峰\n> 根据 zkat/npx 的描述，npx 会帮你执行依赖包里的二进制文件。 -- 司徒正美\n\n司徒大大文章写的太简洁了，不过他还是举了例子，我进行了一下精简，如下\n``` js\n./node_modules/.bin/webpack -v // => npx webpack -v\n```\n简单来说就是找包执行命令的时候不再关注他在哪了，直接就可以用了。\n\n阮一峰老师的文章更像是官网的翻译加理解\n\n> npx 的原理很简单，就是运行的时候，会到node_modules/.bin路径和环境变量$PATH里面，检查命令是否存在。\n> 由于 npx 会检查环境变量$PATH，所以系统命令也可以调用。\n\n另外阮一峰老师还介绍了一个临时安装命令使用的场景，我理解为对上面英语介绍倒数第二句的理解\n\n### 避免全局安装模块\n除了调用项目内部模块，npx 还能避免全局安装的模块。比如，create-react-app这个模块是全局安装，npx 可以运行它，而且不进行全局安装。\n\n``` bash\n$ npx create-react-app my-react-app\n\n```\n上面代码运行时，npx 将create-react-app下载到一个临时目录，使用以后再删除。所以，以后再次执行上面的命令，会重新下载create-react-app。\n\n下载全局模块时，npx 允许指定版本。\n\n``` bash\n$ npx uglify-js@3.1.0 main.js -o ./dist/main.js\n\n```\n上面代码指定使用 3.1.0 版本的uglify-js压缩脚本。\n\n注意，只要 npx 后面的模块无法在本地发现，就会下载同名模块。比如，本地没有安装http-server模块，下面的命令会自动下载该模块，在当前目录启动一个 Web 服务。\n\n``` bash\n$ npx http-server\n```\n\n然后阮老师还对官网最后一句话做了解释\n### --no-install 参数和--ignore-existing 参数\n如果想让 npx 强制使用本地模块，不下载远程模块，可以使用--no-install参数。如果本地不存在该模块，就会报错。\n\n``` bash\n$ npx --no-install http-server\n\n```\n反过来，如果忽略本地的同名模块，强制安装使用远程模块，可以使用--ignore-existing参数。比如，本地已经全局安装了create-react-app，但还是想使用远程模块，就用这个参数。\n\n``` bash\n$ npx --ignore-existing create-react-app my-react-app\n\n```\n然后对于官网上的 example 阮老师也挑了重点的做了介绍，如选择指定的 node 版本\n``` bash\n$ npx node@0.12.8 -v\nv0.12.8\n```\n上面命令会使用 0.12.8 版本的 Node 执行脚本。原理是从 npm 下载这个版本的 node，使用后再删掉。\n某些场景下，这个方法用来切换 Node 版本，要比 nvm 那样的版本管理器方便一些。\n\n## 更多参数\n### -p 参数\n-p参数用于指定 npx 所要安装的模块，所以上一节的命令可以写成下面这样。\n``` bash\n$ npx -p node@0.12.8 node -v \nv0.12.8\n```\n上面命令先指定安装node@0.12.8，然后再执行node -v命令。\n-p参数对于需要安装多个模块的场景很有用。\n``` bash\n$ npx -p lolcatjs -p cowsay [command]\n```\n### -c 参数\n如果 npx 安装多个模块，默认情况下，所执行的命令之中，只有第一个可执行项会使用 npx 安装的模块，后面的可执行项还是会交给 Shell 解释。\n\n``` bash\n$ npx -p lolcatjs -p cowsay 'cowsay hello | lolcatjs'\n# 报错\n```\n上面代码中，cowsay hello | lolcatjs 执行时会报错，原因是第一项 cowsay 由 npx 解释，而第二项命令localcatjs由 Shell 解释，但是lolcatjs并没有全局安装，所以报错。\n\n-c参数可以将所有命令都用 npx 解释。有了它，下面代码就可以正常执行了\n``` bash\n$ npx -p lolcatjs -p cowsay -c 'cowsay hello | lolcatjs'\n\n```\n-c参数的另一个作用，是将环境变量带入所要执行的命令。举例来说，npm 提供当前项目的一些环境变量，可以用下面的命令查看。\n\n``` bash\n$ npm run env | grep npm_\n\n```\n-c参数可以把这些 npm 的环境变量带入 npx 命令。\n\n``` bash\n$ npx -c 'echo \"$npm_package_name\"'\n\n```\n上面代码会输出当前项目的项目名。\n\n## 执行 GitHub 源码\nnpx 还可以执行 GitHub 上面的模块源码。\n``` bash\n# 执行 Gist 代码\n$ npx https://gist.github.com/zkat/4bc19503fe9e9309e2bfaa2c58074d32\n\n# 执行仓库代码\n$ npx github:piuccio/cowsay hello\n```\n注意，远程代码必须是一个模块，即必须包含package.json和入口脚本。\n\n# 最后\n因为还没有实际使用过的经验，所以更多的内容从其他大佬哪里白嫖来的知识，做个笔记以观后效。","source":"_posts/what-is-npx.md","raw":"---\ntitle: npx是什么\ndate: 2020-04-16 \ncategories: \n  - node\ntags: \n  - npx\n---\n\n> 作者：李旭光\n> 引用请标明出处\n\n## 前言\n最近在阅读一些文章时，经常看到介绍命令的时候用到了 npx 关键字，之前知道有 node 有 npm 但是很少用到 npx ，npx是个啥呢？好奇上网上找了些资料学习了一下，写篇学习笔记记录一下。\n\n<!-- more -->\n## npx 起源\n我从阮一峰的博客中看到介绍 npx 的文章，开头的一句话说明了他诞生的日子。\n> npm 从5.2版开始，增加了 npx 命令。\n\n为了验证阮一峰这里介绍的正确性我特意下了对应的npm版本验证了一下确实如此，而且在网上找到了另一位大佬司徒正美（大佬走好）博客中也对 npx 做了介绍\n> 最近我在更新 npm 5.2.0 的时候发现会买一送一，自动安装了 npx。\n\n由此，我可以肯定的告诉大家，npx是npm在5.2.0之后版本推出的一个工具，那么他是干嘛用的呢？\n\n## npx 作用\n想要了解一个技术，最好的途经是他的官网，于是我到网上找到了 npx 在 github 上的仓库，地址如下\n[npx仓库](https://github.com/npm/npx#readme)，其中对 npx 有这样一段介绍\n> DESCRIPTION\n> Executes <command> either from a local node_modules/.bin, or from a central cache, installing any packages needed in order for <command> to run.\n> By default, npx will check whether <command> exists in $PATH, or in the local project binaries, and execute that. If <command> is not found, it will be installed prior to execution.\n> Unless a --package option is specified, npx will try to guess the name of the binary to invoke depending on the specifier provided. All package specifiers understood by npm may be used with npx, including git specifiers, remote tarballs, local directories, or scoped packages.\n> If a full specifier is included, or if --package is used, npx will always use a freshly-installed, temporary version of the package. This can also be forced with the --ignore-existing flag.\n\n上面这一大段英文我想大家一定看了就头疼，所以为了大家不那么头疼，可以看一下下面我翻译的内容，如果有翻译不对的地方，还请指正。\n\n> 解释\n> 执行 command 命令，无论从本地（我理解为项目目录）node_modules/.bin 或者从全局缓存中， 安装所需执行的任何包。\n> 默认情况下，npx将检查 command 是否存在于 $PATH 中，或者在本地项目二进制文件中，并执行该命令。\n如果没有找到 command ，它将在执行之前安装。\n> 除非指定了 —package 选项，否则npx将根据提供的说明符猜测要调用的二进制文件的名称。\nnpm可以理解的所有包说明符都可以与npx一起使用，包括git说明符、远程tarball、本地目录或作用域包。\n> 如果包含完整的说明符，或者使用 ——package 选项，npx将始终使用新安装的包的临时版本。\n这也可以用 ——ignore-existing 标记强制执行。\n\n上面这段机翻简直让人无法理解，所以我又去大佬博客下看了下他们的解释\n\n> npx 想要解决的主要问题，就是调用项目内部安装的模块。 -- 阮一峰\n> 根据 zkat/npx 的描述，npx 会帮你执行依赖包里的二进制文件。 -- 司徒正美\n\n司徒大大文章写的太简洁了，不过他还是举了例子，我进行了一下精简，如下\n``` js\n./node_modules/.bin/webpack -v // => npx webpack -v\n```\n简单来说就是找包执行命令的时候不再关注他在哪了，直接就可以用了。\n\n阮一峰老师的文章更像是官网的翻译加理解\n\n> npx 的原理很简单，就是运行的时候，会到node_modules/.bin路径和环境变量$PATH里面，检查命令是否存在。\n> 由于 npx 会检查环境变量$PATH，所以系统命令也可以调用。\n\n另外阮一峰老师还介绍了一个临时安装命令使用的场景，我理解为对上面英语介绍倒数第二句的理解\n\n### 避免全局安装模块\n除了调用项目内部模块，npx 还能避免全局安装的模块。比如，create-react-app这个模块是全局安装，npx 可以运行它，而且不进行全局安装。\n\n``` bash\n$ npx create-react-app my-react-app\n\n```\n上面代码运行时，npx 将create-react-app下载到一个临时目录，使用以后再删除。所以，以后再次执行上面的命令，会重新下载create-react-app。\n\n下载全局模块时，npx 允许指定版本。\n\n``` bash\n$ npx uglify-js@3.1.0 main.js -o ./dist/main.js\n\n```\n上面代码指定使用 3.1.0 版本的uglify-js压缩脚本。\n\n注意，只要 npx 后面的模块无法在本地发现，就会下载同名模块。比如，本地没有安装http-server模块，下面的命令会自动下载该模块，在当前目录启动一个 Web 服务。\n\n``` bash\n$ npx http-server\n```\n\n然后阮老师还对官网最后一句话做了解释\n### --no-install 参数和--ignore-existing 参数\n如果想让 npx 强制使用本地模块，不下载远程模块，可以使用--no-install参数。如果本地不存在该模块，就会报错。\n\n``` bash\n$ npx --no-install http-server\n\n```\n反过来，如果忽略本地的同名模块，强制安装使用远程模块，可以使用--ignore-existing参数。比如，本地已经全局安装了create-react-app，但还是想使用远程模块，就用这个参数。\n\n``` bash\n$ npx --ignore-existing create-react-app my-react-app\n\n```\n然后对于官网上的 example 阮老师也挑了重点的做了介绍，如选择指定的 node 版本\n``` bash\n$ npx node@0.12.8 -v\nv0.12.8\n```\n上面命令会使用 0.12.8 版本的 Node 执行脚本。原理是从 npm 下载这个版本的 node，使用后再删掉。\n某些场景下，这个方法用来切换 Node 版本，要比 nvm 那样的版本管理器方便一些。\n\n## 更多参数\n### -p 参数\n-p参数用于指定 npx 所要安装的模块，所以上一节的命令可以写成下面这样。\n``` bash\n$ npx -p node@0.12.8 node -v \nv0.12.8\n```\n上面命令先指定安装node@0.12.8，然后再执行node -v命令。\n-p参数对于需要安装多个模块的场景很有用。\n``` bash\n$ npx -p lolcatjs -p cowsay [command]\n```\n### -c 参数\n如果 npx 安装多个模块，默认情况下，所执行的命令之中，只有第一个可执行项会使用 npx 安装的模块，后面的可执行项还是会交给 Shell 解释。\n\n``` bash\n$ npx -p lolcatjs -p cowsay 'cowsay hello | lolcatjs'\n# 报错\n```\n上面代码中，cowsay hello | lolcatjs 执行时会报错，原因是第一项 cowsay 由 npx 解释，而第二项命令localcatjs由 Shell 解释，但是lolcatjs并没有全局安装，所以报错。\n\n-c参数可以将所有命令都用 npx 解释。有了它，下面代码就可以正常执行了\n``` bash\n$ npx -p lolcatjs -p cowsay -c 'cowsay hello | lolcatjs'\n\n```\n-c参数的另一个作用，是将环境变量带入所要执行的命令。举例来说，npm 提供当前项目的一些环境变量，可以用下面的命令查看。\n\n``` bash\n$ npm run env | grep npm_\n\n```\n-c参数可以把这些 npm 的环境变量带入 npx 命令。\n\n``` bash\n$ npx -c 'echo \"$npm_package_name\"'\n\n```\n上面代码会输出当前项目的项目名。\n\n## 执行 GitHub 源码\nnpx 还可以执行 GitHub 上面的模块源码。\n``` bash\n# 执行 Gist 代码\n$ npx https://gist.github.com/zkat/4bc19503fe9e9309e2bfaa2c58074d32\n\n# 执行仓库代码\n$ npx github:piuccio/cowsay hello\n```\n注意，远程代码必须是一个模块，即必须包含package.json和入口脚本。\n\n# 最后\n因为还没有实际使用过的经验，所以更多的内容从其他大佬哪里白嫖来的知识，做个笔记以观后效。","slug":"what-is-npx","published":1,"updated":"2020-04-16T00:12:27.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs62007pooa62v7i6n7a","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在阅读一些文章时，经常看到介绍命令的时候用到了 npx 关键字，之前知道有 node 有 npm 但是很少用到 npx ，npx是个啥呢？好奇上网上找了些资料学习了一下，写篇学习笔记记录一下。</p>\n<a id=\"more\"></a>\n<h2 id=\"npx-起源\"><a href=\"#npx-起源\" class=\"headerlink\" title=\"npx 起源\"></a>npx 起源</h2><p>我从阮一峰的博客中看到介绍 npx 的文章，开头的一句话说明了他诞生的日子。</p>\n<blockquote>\n<p>npm 从5.2版开始，增加了 npx 命令。</p>\n</blockquote>\n<p>为了验证阮一峰这里介绍的正确性我特意下了对应的npm版本验证了一下确实如此，而且在网上找到了另一位大佬司徒正美（大佬走好）博客中也对 npx 做了介绍</p>\n<blockquote>\n<p>最近我在更新 npm 5.2.0 的时候发现会买一送一，自动安装了 npx。</p>\n</blockquote>\n<p>由此，我可以肯定的告诉大家，npx是npm在5.2.0之后版本推出的一个工具，那么他是干嘛用的呢？</p>\n<h2 id=\"npx-作用\"><a href=\"#npx-作用\" class=\"headerlink\" title=\"npx 作用\"></a>npx 作用</h2><p>想要了解一个技术，最好的途经是他的官网，于是我到网上找到了 npx 在 github 上的仓库，地址如下<br><a href=\"https://github.com/npm/npx#readme\" target=\"_blank\" rel=\"noopener\">npx仓库</a>，其中对 npx 有这样一段介绍</p>\n<blockquote>\n<p>DESCRIPTION<br>Executes <command> either from a local node_modules/.bin, or from a central cache, installing any packages needed in order for <command> to run.<br>By default, npx will check whether <command> exists in $PATH, or in the local project binaries, and execute that. If <command> is not found, it will be installed prior to execution.<br>Unless a –package option is specified, npx will try to guess the name of the binary to invoke depending on the specifier provided. All package specifiers understood by npm may be used with npx, including git specifiers, remote tarballs, local directories, or scoped packages.<br>If a full specifier is included, or if –package is used, npx will always use a freshly-installed, temporary version of the package. This can also be forced with the –ignore-existing flag.</p>\n</blockquote>\n<p>上面这一大段英文我想大家一定看了就头疼，所以为了大家不那么头疼，可以看一下下面我翻译的内容，如果有翻译不对的地方，还请指正。</p>\n<blockquote>\n<p>解释<br>执行 command 命令，无论从本地（我理解为项目目录）node_modules/.bin 或者从全局缓存中， 安装所需执行的任何包。<br>默认情况下，npx将检查 command 是否存在于 $PATH 中，或者在本地项目二进制文件中，并执行该命令。<br>如果没有找到 command ，它将在执行之前安装。<br>除非指定了 —package 选项，否则npx将根据提供的说明符猜测要调用的二进制文件的名称。<br>npm可以理解的所有包说明符都可以与npx一起使用，包括git说明符、远程tarball、本地目录或作用域包。<br>如果包含完整的说明符，或者使用 ——package 选项，npx将始终使用新安装的包的临时版本。<br>这也可以用 ——ignore-existing 标记强制执行。</p>\n</blockquote>\n<p>上面这段机翻简直让人无法理解，所以我又去大佬博客下看了下他们的解释</p>\n<blockquote>\n<p>npx 想要解决的主要问题，就是调用项目内部安装的模块。 – 阮一峰<br>根据 zkat/npx 的描述，npx 会帮你执行依赖包里的二进制文件。 – 司徒正美</p>\n</blockquote>\n<p>司徒大大文章写的太简洁了，不过他还是举了例子，我进行了一下精简，如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/webpack -v <span class=\"comment\">// =&gt; npx webpack -v</span></span><br></pre></td></tr></table></figure>\n<p>简单来说就是找包执行命令的时候不再关注他在哪了，直接就可以用了。</p>\n<p>阮一峰老师的文章更像是官网的翻译加理解</p>\n<blockquote>\n<p>npx 的原理很简单，就是运行的时候，会到node_modules/.bin路径和环境变量$PATH里面，检查命令是否存在。<br>由于 npx 会检查环境变量$PATH，所以系统命令也可以调用。</p>\n</blockquote>\n<p>另外阮一峰老师还介绍了一个临时安装命令使用的场景，我理解为对上面英语介绍倒数第二句的理解</p>\n<h3 id=\"避免全局安装模块\"><a href=\"#避免全局安装模块\" class=\"headerlink\" title=\"避免全局安装模块\"></a>避免全局安装模块</h3><p>除了调用项目内部模块，npx 还能避免全局安装的模块。比如，create-react-app这个模块是全局安装，npx 可以运行它，而且不进行全局安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx create-react-app my-react-app</span><br></pre></td></tr></table></figure>\n<p>上面代码运行时，npx 将create-react-app下载到一个临时目录，使用以后再删除。所以，以后再次执行上面的命令，会重新下载create-react-app。</p>\n<p>下载全局模块时，npx 允许指定版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx uglify-js@3.1.0 main.js -o ./dist/main.js</span><br></pre></td></tr></table></figure>\n<p>上面代码指定使用 3.1.0 版本的uglify-js压缩脚本。</p>\n<p>注意，只要 npx 后面的模块无法在本地发现，就会下载同名模块。比如，本地没有安装http-server模块，下面的命令会自动下载该模块，在当前目录启动一个 Web 服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx http-server</span><br></pre></td></tr></table></figure>\n\n<p>然后阮老师还对官网最后一句话做了解释</p>\n<h3 id=\"–no-install-参数和–ignore-existing-参数\"><a href=\"#–no-install-参数和–ignore-existing-参数\" class=\"headerlink\" title=\"–no-install 参数和–ignore-existing 参数\"></a>–no-install 参数和–ignore-existing 参数</h3><p>如果想让 npx 强制使用本地模块，不下载远程模块，可以使用–no-install参数。如果本地不存在该模块，就会报错。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx --no-install http-server</span><br></pre></td></tr></table></figure>\n<p>反过来，如果忽略本地的同名模块，强制安装使用远程模块，可以使用–ignore-existing参数。比如，本地已经全局安装了create-react-app，但还是想使用远程模块，就用这个参数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx --ignore-existing create-react-app my-react-app</span><br></pre></td></tr></table></figure>\n<p>然后对于官网上的 example 阮老师也挑了重点的做了介绍，如选择指定的 node 版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx node@0.12.8 -v</span><br><span class=\"line\">v0.12.8</span><br></pre></td></tr></table></figure>\n<p>上面命令会使用 0.12.8 版本的 Node 执行脚本。原理是从 npm 下载这个版本的 node，使用后再删掉。<br>某些场景下，这个方法用来切换 Node 版本，要比 nvm 那样的版本管理器方便一些。</p>\n<h2 id=\"更多参数\"><a href=\"#更多参数\" class=\"headerlink\" title=\"更多参数\"></a>更多参数</h2><h3 id=\"p-参数\"><a href=\"#p-参数\" class=\"headerlink\" title=\"-p 参数\"></a>-p 参数</h3><p>-p参数用于指定 npx 所要安装的模块，所以上一节的命令可以写成下面这样。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx -p node@0.12.8 node -v </span><br><span class=\"line\">v0.12.8</span><br></pre></td></tr></table></figure>\n<p>上面命令先指定安装<a href=\"mailto:node@0.12.8\">node@0.12.8</a>，然后再执行node -v命令。<br>-p参数对于需要安装多个模块的场景很有用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx -p lolcatjs -p cowsay [<span class=\"built_in\">command</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"c-参数\"><a href=\"#c-参数\" class=\"headerlink\" title=\"-c 参数\"></a>-c 参数</h3><p>如果 npx 安装多个模块，默认情况下，所执行的命令之中，只有第一个可执行项会使用 npx 安装的模块，后面的可执行项还是会交给 Shell 解释。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx -p lolcatjs -p cowsay <span class=\"string\">'cowsay hello | lolcatjs'</span></span><br><span class=\"line\"><span class=\"comment\"># 报错</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，cowsay hello | lolcatjs 执行时会报错，原因是第一项 cowsay 由 npx 解释，而第二项命令localcatjs由 Shell 解释，但是lolcatjs并没有全局安装，所以报错。</p>\n<p>-c参数可以将所有命令都用 npx 解释。有了它，下面代码就可以正常执行了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx -p lolcatjs -p cowsay -c <span class=\"string\">'cowsay hello | lolcatjs'</span></span><br></pre></td></tr></table></figure>\n<p>-c参数的另一个作用，是将环境变量带入所要执行的命令。举例来说，npm 提供当前项目的一些环境变量，可以用下面的命令查看。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm run env | grep npm_</span><br></pre></td></tr></table></figure>\n<p>-c参数可以把这些 npm 的环境变量带入 npx 命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx -c <span class=\"string\">'echo \"$npm_package_name\"'</span></span><br></pre></td></tr></table></figure>\n<p>上面代码会输出当前项目的项目名。</p>\n<h2 id=\"执行-GitHub-源码\"><a href=\"#执行-GitHub-源码\" class=\"headerlink\" title=\"执行 GitHub 源码\"></a>执行 GitHub 源码</h2><p>npx 还可以执行 GitHub 上面的模块源码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行 Gist 代码</span></span><br><span class=\"line\">$ npx https://gist.github.com/zkat/4bc19503fe9e9309e2bfaa2c58074d32</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行仓库代码</span></span><br><span class=\"line\">$ npx github:piuccio/cowsay hello</span><br></pre></td></tr></table></figure>\n<p>注意，远程代码必须是一个模块，即必须包含package.json和入口脚本。</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>因为还没有实际使用过的经验，所以更多的内容从其他大佬哪里白嫖来的知识，做个笔记以观后效。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在阅读一些文章时，经常看到介绍命令的时候用到了 npx 关键字，之前知道有 node 有 npm 但是很少用到 npx ，npx是个啥呢？好奇上网上找了些资料学习了一下，写篇学习笔记记录一下。</p>","more":"<h2 id=\"npx-起源\"><a href=\"#npx-起源\" class=\"headerlink\" title=\"npx 起源\"></a>npx 起源</h2><p>我从阮一峰的博客中看到介绍 npx 的文章，开头的一句话说明了他诞生的日子。</p>\n<blockquote>\n<p>npm 从5.2版开始，增加了 npx 命令。</p>\n</blockquote>\n<p>为了验证阮一峰这里介绍的正确性我特意下了对应的npm版本验证了一下确实如此，而且在网上找到了另一位大佬司徒正美（大佬走好）博客中也对 npx 做了介绍</p>\n<blockquote>\n<p>最近我在更新 npm 5.2.0 的时候发现会买一送一，自动安装了 npx。</p>\n</blockquote>\n<p>由此，我可以肯定的告诉大家，npx是npm在5.2.0之后版本推出的一个工具，那么他是干嘛用的呢？</p>\n<h2 id=\"npx-作用\"><a href=\"#npx-作用\" class=\"headerlink\" title=\"npx 作用\"></a>npx 作用</h2><p>想要了解一个技术，最好的途经是他的官网，于是我到网上找到了 npx 在 github 上的仓库，地址如下<br><a href=\"https://github.com/npm/npx#readme\" target=\"_blank\" rel=\"noopener\">npx仓库</a>，其中对 npx 有这样一段介绍</p>\n<blockquote>\n<p>DESCRIPTION<br>Executes <command> either from a local node_modules/.bin, or from a central cache, installing any packages needed in order for <command> to run.<br>By default, npx will check whether <command> exists in $PATH, or in the local project binaries, and execute that. If <command> is not found, it will be installed prior to execution.<br>Unless a –package option is specified, npx will try to guess the name of the binary to invoke depending on the specifier provided. All package specifiers understood by npm may be used with npx, including git specifiers, remote tarballs, local directories, or scoped packages.<br>If a full specifier is included, or if –package is used, npx will always use a freshly-installed, temporary version of the package. This can also be forced with the –ignore-existing flag.</p>\n</blockquote>\n<p>上面这一大段英文我想大家一定看了就头疼，所以为了大家不那么头疼，可以看一下下面我翻译的内容，如果有翻译不对的地方，还请指正。</p>\n<blockquote>\n<p>解释<br>执行 command 命令，无论从本地（我理解为项目目录）node_modules/.bin 或者从全局缓存中， 安装所需执行的任何包。<br>默认情况下，npx将检查 command 是否存在于 $PATH 中，或者在本地项目二进制文件中，并执行该命令。<br>如果没有找到 command ，它将在执行之前安装。<br>除非指定了 —package 选项，否则npx将根据提供的说明符猜测要调用的二进制文件的名称。<br>npm可以理解的所有包说明符都可以与npx一起使用，包括git说明符、远程tarball、本地目录或作用域包。<br>如果包含完整的说明符，或者使用 ——package 选项，npx将始终使用新安装的包的临时版本。<br>这也可以用 ——ignore-existing 标记强制执行。</p>\n</blockquote>\n<p>上面这段机翻简直让人无法理解，所以我又去大佬博客下看了下他们的解释</p>\n<blockquote>\n<p>npx 想要解决的主要问题，就是调用项目内部安装的模块。 – 阮一峰<br>根据 zkat/npx 的描述，npx 会帮你执行依赖包里的二进制文件。 – 司徒正美</p>\n</blockquote>\n<p>司徒大大文章写的太简洁了，不过他还是举了例子，我进行了一下精简，如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/webpack -v <span class=\"comment\">// =&gt; npx webpack -v</span></span><br></pre></td></tr></table></figure>\n<p>简单来说就是找包执行命令的时候不再关注他在哪了，直接就可以用了。</p>\n<p>阮一峰老师的文章更像是官网的翻译加理解</p>\n<blockquote>\n<p>npx 的原理很简单，就是运行的时候，会到node_modules/.bin路径和环境变量$PATH里面，检查命令是否存在。<br>由于 npx 会检查环境变量$PATH，所以系统命令也可以调用。</p>\n</blockquote>\n<p>另外阮一峰老师还介绍了一个临时安装命令使用的场景，我理解为对上面英语介绍倒数第二句的理解</p>\n<h3 id=\"避免全局安装模块\"><a href=\"#避免全局安装模块\" class=\"headerlink\" title=\"避免全局安装模块\"></a>避免全局安装模块</h3><p>除了调用项目内部模块，npx 还能避免全局安装的模块。比如，create-react-app这个模块是全局安装，npx 可以运行它，而且不进行全局安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx create-react-app my-react-app</span><br></pre></td></tr></table></figure>\n<p>上面代码运行时，npx 将create-react-app下载到一个临时目录，使用以后再删除。所以，以后再次执行上面的命令，会重新下载create-react-app。</p>\n<p>下载全局模块时，npx 允许指定版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx uglify-js@3.1.0 main.js -o ./dist/main.js</span><br></pre></td></tr></table></figure>\n<p>上面代码指定使用 3.1.0 版本的uglify-js压缩脚本。</p>\n<p>注意，只要 npx 后面的模块无法在本地发现，就会下载同名模块。比如，本地没有安装http-server模块，下面的命令会自动下载该模块，在当前目录启动一个 Web 服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx http-server</span><br></pre></td></tr></table></figure>\n\n<p>然后阮老师还对官网最后一句话做了解释</p>\n<h3 id=\"–no-install-参数和–ignore-existing-参数\"><a href=\"#–no-install-参数和–ignore-existing-参数\" class=\"headerlink\" title=\"–no-install 参数和–ignore-existing 参数\"></a>–no-install 参数和–ignore-existing 参数</h3><p>如果想让 npx 强制使用本地模块，不下载远程模块，可以使用–no-install参数。如果本地不存在该模块，就会报错。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx --no-install http-server</span><br></pre></td></tr></table></figure>\n<p>反过来，如果忽略本地的同名模块，强制安装使用远程模块，可以使用–ignore-existing参数。比如，本地已经全局安装了create-react-app，但还是想使用远程模块，就用这个参数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx --ignore-existing create-react-app my-react-app</span><br></pre></td></tr></table></figure>\n<p>然后对于官网上的 example 阮老师也挑了重点的做了介绍，如选择指定的 node 版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx node@0.12.8 -v</span><br><span class=\"line\">v0.12.8</span><br></pre></td></tr></table></figure>\n<p>上面命令会使用 0.12.8 版本的 Node 执行脚本。原理是从 npm 下载这个版本的 node，使用后再删掉。<br>某些场景下，这个方法用来切换 Node 版本，要比 nvm 那样的版本管理器方便一些。</p>\n<h2 id=\"更多参数\"><a href=\"#更多参数\" class=\"headerlink\" title=\"更多参数\"></a>更多参数</h2><h3 id=\"p-参数\"><a href=\"#p-参数\" class=\"headerlink\" title=\"-p 参数\"></a>-p 参数</h3><p>-p参数用于指定 npx 所要安装的模块，所以上一节的命令可以写成下面这样。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx -p node@0.12.8 node -v </span><br><span class=\"line\">v0.12.8</span><br></pre></td></tr></table></figure>\n<p>上面命令先指定安装<a href=\"mailto:node@0.12.8\">node@0.12.8</a>，然后再执行node -v命令。<br>-p参数对于需要安装多个模块的场景很有用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx -p lolcatjs -p cowsay [<span class=\"built_in\">command</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"c-参数\"><a href=\"#c-参数\" class=\"headerlink\" title=\"-c 参数\"></a>-c 参数</h3><p>如果 npx 安装多个模块，默认情况下，所执行的命令之中，只有第一个可执行项会使用 npx 安装的模块，后面的可执行项还是会交给 Shell 解释。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx -p lolcatjs -p cowsay <span class=\"string\">'cowsay hello | lolcatjs'</span></span><br><span class=\"line\"><span class=\"comment\"># 报错</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，cowsay hello | lolcatjs 执行时会报错，原因是第一项 cowsay 由 npx 解释，而第二项命令localcatjs由 Shell 解释，但是lolcatjs并没有全局安装，所以报错。</p>\n<p>-c参数可以将所有命令都用 npx 解释。有了它，下面代码就可以正常执行了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx -p lolcatjs -p cowsay -c <span class=\"string\">'cowsay hello | lolcatjs'</span></span><br></pre></td></tr></table></figure>\n<p>-c参数的另一个作用，是将环境变量带入所要执行的命令。举例来说，npm 提供当前项目的一些环境变量，可以用下面的命令查看。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm run env | grep npm_</span><br></pre></td></tr></table></figure>\n<p>-c参数可以把这些 npm 的环境变量带入 npx 命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npx -c <span class=\"string\">'echo \"$npm_package_name\"'</span></span><br></pre></td></tr></table></figure>\n<p>上面代码会输出当前项目的项目名。</p>\n<h2 id=\"执行-GitHub-源码\"><a href=\"#执行-GitHub-源码\" class=\"headerlink\" title=\"执行 GitHub 源码\"></a>执行 GitHub 源码</h2><p>npx 还可以执行 GitHub 上面的模块源码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行 Gist 代码</span></span><br><span class=\"line\">$ npx https://gist.github.com/zkat/4bc19503fe9e9309e2bfaa2c58074d32</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行仓库代码</span></span><br><span class=\"line\">$ npx github:piuccio/cowsay hello</span><br></pre></td></tr></table></figure>\n<p>注意，远程代码必须是一个模块，即必须包含package.json和入口脚本。</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>因为还没有实际使用过的经验，所以更多的内容从其他大佬哪里白嫖来的知识，做个笔记以观后效。</p>"},{"title":"为什么 0.1 + 0.2 != 0.3","date":"2020-01-03T04:10:00.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# Proxy\n因为 JS 采用 IEEE 754 双精度版本（64位），并且只要采用 IEEE 754 的语言都有该问题。\n\n我们都知道计算机表示十进制是采用二进制表示的，所以 0.1 在二进制表示为\n\n```\n// js代码\n\n// (0011) 表示循环\n0.1 = 2^-4 * 1.10011(0011)\n```\n那么如何得到这个二进制的呢，我们可以来演算下\n\n小数算二进制和整数不同。乘法计算时，只计算小数位，整数位用作每一位的二进制，并且得到的第一位为最高位。所以我们得出 `0.1 = 2^-4 * 1.10011(0011)`，那么 `0.2` 的演算也基本如上所示，只需要去掉第一步乘法，所以得出 `0.2 = 2^-3 * 1.10011(0011)`。\n\n回来继续说 `IEEE 754` 双精度。六十四位中符号位占一位，整数位占十一位，其余五十二位都为小数位。因为 `0.1` 和 `0.2` 都是无限循环的二进制了，所以在小数位末尾处需要判断是否进位（就和十进制的四舍五入一样）。\n\n所以 `2^-4 * 1.10011...001` 进位后就变成了 `2^-4 * 1.10011(0011 * 12次)010` 。那么把这两个二进制加起来会得出 `2^-2 * 1.0011(0011 * 11次)0100` , 这个值算成十进制就是 `0.30000000000000004`\n\n下面说一下原生解决办法，如下代码所示\n```\n// js代码\n\nparseFloat((0.1 + 0.2).toFixed(10))\n```","source":"_posts/why-0.1-plus-0.2-not-equals-0.3.md","raw":"---\ntitle: 为什么 0.1 + 0.2 != 0.3\ndate: 2020-01-03 12:10:00\ncategories: \n\t- 前端技术\ntags: \n\t- 面试\n\t- 知识点\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# Proxy\n因为 JS 采用 IEEE 754 双精度版本（64位），并且只要采用 IEEE 754 的语言都有该问题。\n\n我们都知道计算机表示十进制是采用二进制表示的，所以 0.1 在二进制表示为\n\n```\n// js代码\n\n// (0011) 表示循环\n0.1 = 2^-4 * 1.10011(0011)\n```\n那么如何得到这个二进制的呢，我们可以来演算下\n\n小数算二进制和整数不同。乘法计算时，只计算小数位，整数位用作每一位的二进制，并且得到的第一位为最高位。所以我们得出 `0.1 = 2^-4 * 1.10011(0011)`，那么 `0.2` 的演算也基本如上所示，只需要去掉第一步乘法，所以得出 `0.2 = 2^-3 * 1.10011(0011)`。\n\n回来继续说 `IEEE 754` 双精度。六十四位中符号位占一位，整数位占十一位，其余五十二位都为小数位。因为 `0.1` 和 `0.2` 都是无限循环的二进制了，所以在小数位末尾处需要判断是否进位（就和十进制的四舍五入一样）。\n\n所以 `2^-4 * 1.10011...001` 进位后就变成了 `2^-4 * 1.10011(0011 * 12次)010` 。那么把这两个二进制加起来会得出 `2^-2 * 1.0011(0011 * 11次)0100` , 这个值算成十进制就是 `0.30000000000000004`\n\n下面说一下原生解决办法，如下代码所示\n```\n// js代码\n\nparseFloat((0.1 + 0.2).toFixed(10))\n```","slug":"why-0.1-plus-0.2-not-equals-0.3","published":1,"updated":"2020-01-03T04:10:21.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs66007sooa64z0e8fjs","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h1><p>因为 JS 采用 IEEE 754 双精度版本（64位），并且只要采用 IEEE 754 的语言都有该问题。</p>\n<p>我们都知道计算机表示十进制是采用二进制表示的，所以 0.1 在二进制表示为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; (0011) 表示循环</span><br><span class=\"line\">0.1 &#x3D; 2^-4 * 1.10011(0011)</span><br></pre></td></tr></table></figure>\n<p>那么如何得到这个二进制的呢，我们可以来演算下</p>\n<p>小数算二进制和整数不同。乘法计算时，只计算小数位，整数位用作每一位的二进制，并且得到的第一位为最高位。所以我们得出 <code>0.1 = 2^-4 * 1.10011(0011)</code>，那么 <code>0.2</code> 的演算也基本如上所示，只需要去掉第一步乘法，所以得出 <code>0.2 = 2^-3 * 1.10011(0011)</code>。</p>\n<p>回来继续说 <code>IEEE 754</code> 双精度。六十四位中符号位占一位，整数位占十一位，其余五十二位都为小数位。因为 <code>0.1</code> 和 <code>0.2</code> 都是无限循环的二进制了，所以在小数位末尾处需要判断是否进位（就和十进制的四舍五入一样）。</p>\n<p>所以 <code>2^-4 * 1.10011...001</code> 进位后就变成了 <code>2^-4 * 1.10011(0011 * 12次)010</code> 。那么把这两个二进制加起来会得出 <code>2^-2 * 1.0011(0011 * 11次)0100</code> , 这个值算成十进制就是 <code>0.30000000000000004</code></p>\n<p>下面说一下原生解决办法，如下代码所示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">parseFloat((0.1 + 0.2).toFixed(10))</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h1><p>因为 JS 采用 IEEE 754 双精度版本（64位），并且只要采用 IEEE 754 的语言都有该问题。</p>\n<p>我们都知道计算机表示十进制是采用二进制表示的，所以 0.1 在二进制表示为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; (0011) 表示循环</span><br><span class=\"line\">0.1 &#x3D; 2^-4 * 1.10011(0011)</span><br></pre></td></tr></table></figure>\n<p>那么如何得到这个二进制的呢，我们可以来演算下</p>\n<p>小数算二进制和整数不同。乘法计算时，只计算小数位，整数位用作每一位的二进制，并且得到的第一位为最高位。所以我们得出 <code>0.1 = 2^-4 * 1.10011(0011)</code>，那么 <code>0.2</code> 的演算也基本如上所示，只需要去掉第一步乘法，所以得出 <code>0.2 = 2^-3 * 1.10011(0011)</code>。</p>\n<p>回来继续说 <code>IEEE 754</code> 双精度。六十四位中符号位占一位，整数位占十一位，其余五十二位都为小数位。因为 <code>0.1</code> 和 <code>0.2</code> 都是无限循环的二进制了，所以在小数位末尾处需要判断是否进位（就和十进制的四舍五入一样）。</p>\n<p>所以 <code>2^-4 * 1.10011...001</code> 进位后就变成了 <code>2^-4 * 1.10011(0011 * 12次)010</code> 。那么把这两个二进制加起来会得出 <code>2^-2 * 1.0011(0011 * 11次)0100</code> , 这个值算成十进制就是 <code>0.30000000000000004</code></p>\n<p>下面说一下原生解决办法，如下代码所示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\"></span><br><span class=\"line\">parseFloat((0.1 + 0.2).toFixed(10))</span><br></pre></td></tr></table></figure>"},{"title":"巧妙利用Acitons进行博客的自动构建","date":"2019-12-27T14:22:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n忙活了很久很久，终于不那么忙了，也终于想起来我还有个博客没有运行，哎，虽然用Hexo可以享受Github提供的免费的空间和域名，但是命令行敲代码的方式实现博客编写还是有些不方便，尤其是需要编程环境的时候，最近公司在用CICD的方式对代码进行构建，我就在想有没有一种方式让博客也可以变成这样，于是我就在网上搜`Github` `Hexo` `自动构建` 这些个词，还真让我搜到了一种方法而且还是Github自己提供的，下面隆重请出 `GitHub Actions`。\n<!-- more -->\n\n## GitHub Actions 是什么\nGitHub Actions 由 GitHub 官方推出的工作流工具。典型的应用场景应该是 CI/CD，类似 Travis 的用法。如果不知道 CI/CD&Travis 感兴趣的建议去了解一下，下面不展开说明，直接说怎么用就好。\n\n## 前期准备\n在使用 `GitHub Actions` 之前我们先来看看我们有什么；\n首先我们有一个放博客程序的地方，我这里是叫做 `blog-source` ，另外呢有一个通过 hexo g 创建出来的静态网站，为了存放它而建的另一个仓库，我这里是叫做`lixuguang.github.io`,也就是说我们现在是有这样两个仓库。\n|仓库|作用|\n|-|-|\n|blog-source|放博客源代码|\n|lixuguang.github.io|放博客生成代码|\n\n## 生成密钥\n因为 `GitHub Actions` 它需要访问我的 `blog-source` 仓库的代码所以必须要有密钥，密钥大家应该熟悉了，创建博客的时候也是创建了一个公钥和私钥用来在本地往 `lixuguang.github.io` 这个仓库提交代码\n这里呢我们用下面的命令生成密钥。\n```\nssh-keygen -t ed25519 -f ~/.ssh/github-actions-deploy # 连按三次回车即刻\n```\n命令执行完成后，我们会得到两个文件 `github-actions-deploy` 和 `github-actions-deploy.pub` 两个文件，第一个是私钥，第二个是公钥。\n|名称|解释|\n|-|-|\n|github-actions-deploy|私钥|\n|github-actions-deploy.pub|公钥|\n\n接下来的步骤一定要好好看，因为我在这个地方被卡住好多次，就是因为有的文章说的并不正确，或者至少是讲的不够仔细，这里我会仔细地说明一下。\n\n## 配置 GitHub 仓库\n### 配置博客源代码仓库\n我这里的源代码是放在 `blog-source` 中，所以我现在要给源代码仓库配置`私钥`，配置过程如下：\n打开 `blog-source` 仓库，选择 `settings`，然后选中 `secrets` ， 再点击 `Add new secrets`，照着下面填写内容\n|字段|值|\n|-|-|\n|Name|HEXO_DEPLOY_PRI（名称自动构建时有用）|\n|Value|github-actions-deploy|\n\n### 配置博客源代码仓库\n我这里生成的博客静态代码是放在 `lixuguang.github.io` 中，所以我现在要给静态代码仓库配置`公钥`，配置过程如下：\n打开 `lixuguang.github.io`，选择 `settings`，然后选中 `keys`，再点击 `Add deploy key`，照着下面填写内容\n|字段|值|\n|-|-|\n|Title|HEXO_DEPLOY_PUB|\n|Key|github-actions-deploy.pub|\n\n## 编写 Actions 脚本\n\n经过上面一系列的准备操作，终于来到了编写自动构建脚本的环节，构建脚本如下，如果按照上面我做的操作一步步来的话，那么这一步你可以直接copy啦\n```\nname: Deploy Blog\n\non: [push] # 当有新push时运行\n\njobs:\n  build: # 一项叫做build的任务\n\n    runs-on: ubuntu-latest # 在最新版的Ubuntu系统下运行\n    \n    steps:\n    - name: Checkout # 将仓库内master分支的内容下载到工作目录\n      uses: actions/checkout@v1 # 脚本来自 https://github.com/actions/checkout\n      \n    - name: Use Node.js 10.x # 配置Node环境\n      uses: actions/setup-node@v1 # 配置脚本来自 https://github.com/actions/setup-node\n      with:\n        node-version: \"10.x\"\n    \n    - name: Setup Hexo env\n      env:\n        HEXO_DEPLOY_PRI: ${{ secrets.HEXO_DEPLOY_PRI }} # 这里是上面配置的私钥名称\n      run: |\n        # set up private key for deploy\n        mkdir -p ~/.ssh/\n        echo \"$HEXO_DEPLOY_PRI\" | tr -d '\\r' > ~/.ssh/id_rsa # 配置秘钥\n        chmod 600 ~/.ssh/id_rsa\n        ssh-keyscan github.com >> ~/.ssh/known_hosts\n        # set git infomation\n        git config --global user.name 'lixuguang' # 换成你自己的名字\n        git config --global user.email 'lixuguang@gmail.com' # 换成你自己的邮箱\n        # install dependencies\n        npm i -g hexo-cli # 安装hexo\n        npm i\n  \n    - name: Deploy\n      run: |\n        # publish\n        rm -rf .deploy_git # 如果上次构建失败这句命令会清除上次失败的代码\n        hexo generate && hexo deploy # 执行部署程序\n\n\n```\n\n---\n\n通过以上这些步骤的操作，如果没什么意外的话，博客的自动构建就完成了，之后只要你提交新的文章到博客源代码仓库，它将自动帮你生成并发送到博客的静态代码仓库，再也不用执行hexo g -d啦，如果这篇文章对你有用，欢迎follow我或打赏一下这篇文章，感谢阅读。\n\nps：这里有个小坑需要注意一下，因为博客的皮肤也是另外一个git仓库，如果你在本地构建好用但是线上构建博客不显示了，需要注意下是不是皮肤没有上传到博客源码仓库，这里我遇到了，希望你不会因此困扰，拜拜~","source":"_posts/Actions.md","raw":"---\ntitle: 巧妙利用Acitons进行博客的自动构建\ndate: 2019-12-27 22:22:22\ncategories: \n\t- 博客技巧\ntags: \n\t- Github\n\t- Actions\n\t- Hexo\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n忙活了很久很久，终于不那么忙了，也终于想起来我还有个博客没有运行，哎，虽然用Hexo可以享受Github提供的免费的空间和域名，但是命令行敲代码的方式实现博客编写还是有些不方便，尤其是需要编程环境的时候，最近公司在用CICD的方式对代码进行构建，我就在想有没有一种方式让博客也可以变成这样，于是我就在网上搜`Github` `Hexo` `自动构建` 这些个词，还真让我搜到了一种方法而且还是Github自己提供的，下面隆重请出 `GitHub Actions`。\n<!-- more -->\n\n## GitHub Actions 是什么\nGitHub Actions 由 GitHub 官方推出的工作流工具。典型的应用场景应该是 CI/CD，类似 Travis 的用法。如果不知道 CI/CD&Travis 感兴趣的建议去了解一下，下面不展开说明，直接说怎么用就好。\n\n## 前期准备\n在使用 `GitHub Actions` 之前我们先来看看我们有什么；\n首先我们有一个放博客程序的地方，我这里是叫做 `blog-source` ，另外呢有一个通过 hexo g 创建出来的静态网站，为了存放它而建的另一个仓库，我这里是叫做`lixuguang.github.io`,也就是说我们现在是有这样两个仓库。\n|仓库|作用|\n|-|-|\n|blog-source|放博客源代码|\n|lixuguang.github.io|放博客生成代码|\n\n## 生成密钥\n因为 `GitHub Actions` 它需要访问我的 `blog-source` 仓库的代码所以必须要有密钥，密钥大家应该熟悉了，创建博客的时候也是创建了一个公钥和私钥用来在本地往 `lixuguang.github.io` 这个仓库提交代码\n这里呢我们用下面的命令生成密钥。\n```\nssh-keygen -t ed25519 -f ~/.ssh/github-actions-deploy # 连按三次回车即刻\n```\n命令执行完成后，我们会得到两个文件 `github-actions-deploy` 和 `github-actions-deploy.pub` 两个文件，第一个是私钥，第二个是公钥。\n|名称|解释|\n|-|-|\n|github-actions-deploy|私钥|\n|github-actions-deploy.pub|公钥|\n\n接下来的步骤一定要好好看，因为我在这个地方被卡住好多次，就是因为有的文章说的并不正确，或者至少是讲的不够仔细，这里我会仔细地说明一下。\n\n## 配置 GitHub 仓库\n### 配置博客源代码仓库\n我这里的源代码是放在 `blog-source` 中，所以我现在要给源代码仓库配置`私钥`，配置过程如下：\n打开 `blog-source` 仓库，选择 `settings`，然后选中 `secrets` ， 再点击 `Add new secrets`，照着下面填写内容\n|字段|值|\n|-|-|\n|Name|HEXO_DEPLOY_PRI（名称自动构建时有用）|\n|Value|github-actions-deploy|\n\n### 配置博客源代码仓库\n我这里生成的博客静态代码是放在 `lixuguang.github.io` 中，所以我现在要给静态代码仓库配置`公钥`，配置过程如下：\n打开 `lixuguang.github.io`，选择 `settings`，然后选中 `keys`，再点击 `Add deploy key`，照着下面填写内容\n|字段|值|\n|-|-|\n|Title|HEXO_DEPLOY_PUB|\n|Key|github-actions-deploy.pub|\n\n## 编写 Actions 脚本\n\n经过上面一系列的准备操作，终于来到了编写自动构建脚本的环节，构建脚本如下，如果按照上面我做的操作一步步来的话，那么这一步你可以直接copy啦\n```\nname: Deploy Blog\n\non: [push] # 当有新push时运行\n\njobs:\n  build: # 一项叫做build的任务\n\n    runs-on: ubuntu-latest # 在最新版的Ubuntu系统下运行\n    \n    steps:\n    - name: Checkout # 将仓库内master分支的内容下载到工作目录\n      uses: actions/checkout@v1 # 脚本来自 https://github.com/actions/checkout\n      \n    - name: Use Node.js 10.x # 配置Node环境\n      uses: actions/setup-node@v1 # 配置脚本来自 https://github.com/actions/setup-node\n      with:\n        node-version: \"10.x\"\n    \n    - name: Setup Hexo env\n      env:\n        HEXO_DEPLOY_PRI: ${{ secrets.HEXO_DEPLOY_PRI }} # 这里是上面配置的私钥名称\n      run: |\n        # set up private key for deploy\n        mkdir -p ~/.ssh/\n        echo \"$HEXO_DEPLOY_PRI\" | tr -d '\\r' > ~/.ssh/id_rsa # 配置秘钥\n        chmod 600 ~/.ssh/id_rsa\n        ssh-keyscan github.com >> ~/.ssh/known_hosts\n        # set git infomation\n        git config --global user.name 'lixuguang' # 换成你自己的名字\n        git config --global user.email 'lixuguang@gmail.com' # 换成你自己的邮箱\n        # install dependencies\n        npm i -g hexo-cli # 安装hexo\n        npm i\n  \n    - name: Deploy\n      run: |\n        # publish\n        rm -rf .deploy_git # 如果上次构建失败这句命令会清除上次失败的代码\n        hexo generate && hexo deploy # 执行部署程序\n\n\n```\n\n---\n\n通过以上这些步骤的操作，如果没什么意外的话，博客的自动构建就完成了，之后只要你提交新的文章到博客源代码仓库，它将自动帮你生成并发送到博客的静态代码仓库，再也不用执行hexo g -d啦，如果这篇文章对你有用，欢迎follow我或打赏一下这篇文章，感谢阅读。\n\nps：这里有个小坑需要注意一下，因为博客的皮肤也是另外一个git仓库，如果你在本地构建好用但是线上构建博客不显示了，需要注意下是不是皮肤没有上传到博客源码仓库，这里我遇到了，希望你不会因此困扰，拜拜~","slug":"Actions","published":1,"updated":"2019-12-30T13:57:39.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhc3gs9m00d0ooa69xl4997y","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>忙活了很久很久，终于不那么忙了，也终于想起来我还有个博客没有运行，哎，虽然用Hexo可以享受Github提供的免费的空间和域名，但是命令行敲代码的方式实现博客编写还是有些不方便，尤其是需要编程环境的时候，最近公司在用CICD的方式对代码进行构建，我就在想有没有一种方式让博客也可以变成这样，于是我就在网上搜<code>Github</code> <code>Hexo</code> <code>自动构建</code> 这些个词，还真让我搜到了一种方法而且还是Github自己提供的，下面隆重请出 <code>GitHub Actions</code>。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"GitHub-Actions-是什么\"><a href=\"#GitHub-Actions-是什么\" class=\"headerlink\" title=\"GitHub Actions 是什么\"></a>GitHub Actions 是什么</h2><p>GitHub Actions 由 GitHub 官方推出的工作流工具。典型的应用场景应该是 CI/CD，类似 Travis 的用法。如果不知道 CI/CD&amp;Travis 感兴趣的建议去了解一下，下面不展开说明，直接说怎么用就好。</p>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>在使用 <code>GitHub Actions</code> 之前我们先来看看我们有什么；<br>首先我们有一个放博客程序的地方，我这里是叫做 <code>blog-source</code> ，另外呢有一个通过 hexo g 创建出来的静态网站，为了存放它而建的另一个仓库，我这里是叫做<code>lixuguang.github.io</code>,也就是说我们现在是有这样两个仓库。<br>|仓库|作用|<br>|-|-|<br>|blog-source|放博客源代码|<br>|lixuguang.github.io|放博客生成代码|</p>\n<h2 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h2><p>因为 <code>GitHub Actions</code> 它需要访问我的 <code>blog-source</code> 仓库的代码所以必须要有密钥，密钥大家应该熟悉了，创建博客的时候也是创建了一个公钥和私钥用来在本地往 <code>lixuguang.github.io</code> 这个仓库提交代码<br>这里呢我们用下面的命令生成密钥。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t ed25519 -f ~&#x2F;.ssh&#x2F;github-actions-deploy # 连按三次回车即刻</span><br></pre></td></tr></table></figure>\n<p>命令执行完成后，我们会得到两个文件 <code>github-actions-deploy</code> 和 <code>github-actions-deploy.pub</code> 两个文件，第一个是私钥，第二个是公钥。<br>|名称|解释|<br>|-|-|<br>|github-actions-deploy|私钥|<br>|github-actions-deploy.pub|公钥|</p>\n<p>接下来的步骤一定要好好看，因为我在这个地方被卡住好多次，就是因为有的文章说的并不正确，或者至少是讲的不够仔细，这里我会仔细地说明一下。</p>\n<h2 id=\"配置-GitHub-仓库\"><a href=\"#配置-GitHub-仓库\" class=\"headerlink\" title=\"配置 GitHub 仓库\"></a>配置 GitHub 仓库</h2><h3 id=\"配置博客源代码仓库\"><a href=\"#配置博客源代码仓库\" class=\"headerlink\" title=\"配置博客源代码仓库\"></a>配置博客源代码仓库</h3><p>我这里的源代码是放在 <code>blog-source</code> 中，所以我现在要给源代码仓库配置<code>私钥</code>，配置过程如下：<br>打开 <code>blog-source</code> 仓库，选择 <code>settings</code>，然后选中 <code>secrets</code> ， 再点击 <code>Add new secrets</code>，照着下面填写内容<br>|字段|值|<br>|-|-|<br>|Name|HEXO_DEPLOY_PRI（名称自动构建时有用）|<br>|Value|github-actions-deploy|</p>\n<h3 id=\"配置博客源代码仓库-1\"><a href=\"#配置博客源代码仓库-1\" class=\"headerlink\" title=\"配置博客源代码仓库\"></a>配置博客源代码仓库</h3><p>我这里生成的博客静态代码是放在 <code>lixuguang.github.io</code> 中，所以我现在要给静态代码仓库配置<code>公钥</code>，配置过程如下：<br>打开 <code>lixuguang.github.io</code>，选择 <code>settings</code>，然后选中 <code>keys</code>，再点击 <code>Add deploy key</code>，照着下面填写内容<br>|字段|值|<br>|-|-|<br>|Title|HEXO_DEPLOY_PUB|<br>|Key|github-actions-deploy.pub|</p>\n<h2 id=\"编写-Actions-脚本\"><a href=\"#编写-Actions-脚本\" class=\"headerlink\" title=\"编写 Actions 脚本\"></a>编写 Actions 脚本</h2><p>经过上面一系列的准备操作，终于来到了编写自动构建脚本的环节，构建脚本如下，如果按照上面我做的操作一步步来的话，那么这一步你可以直接copy啦</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: Deploy Blog</span><br><span class=\"line\"></span><br><span class=\"line\">on: [push] # 当有新push时运行</span><br><span class=\"line\"></span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  build: # 一项叫做build的任务</span><br><span class=\"line\"></span><br><span class=\"line\">    runs-on: ubuntu-latest # 在最新版的Ubuntu系统下运行</span><br><span class=\"line\">    </span><br><span class=\"line\">    steps:</span><br><span class=\"line\">    - name: Checkout # 将仓库内master分支的内容下载到工作目录</span><br><span class=\"line\">      uses: actions&#x2F;checkout@v1 # 脚本来自 https:&#x2F;&#x2F;github.com&#x2F;actions&#x2F;checkout</span><br><span class=\"line\">      </span><br><span class=\"line\">    - name: Use Node.js 10.x # 配置Node环境</span><br><span class=\"line\">      uses: actions&#x2F;setup-node@v1 # 配置脚本来自 https:&#x2F;&#x2F;github.com&#x2F;actions&#x2F;setup-node</span><br><span class=\"line\">      with:</span><br><span class=\"line\">        node-version: &quot;10.x&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    - name: Setup Hexo env</span><br><span class=\"line\">      env:</span><br><span class=\"line\">        HEXO_DEPLOY_PRI: $&#123;&#123; secrets.HEXO_DEPLOY_PRI &#125;&#125; # 这里是上面配置的私钥名称</span><br><span class=\"line\">      run: |</span><br><span class=\"line\">        # set up private key for deploy</span><br><span class=\"line\">        mkdir -p ~&#x2F;.ssh&#x2F;</span><br><span class=\"line\">        echo &quot;$HEXO_DEPLOY_PRI&quot; | tr -d &#39;\\r&#39; &gt; ~&#x2F;.ssh&#x2F;id_rsa # 配置秘钥</span><br><span class=\"line\">        chmod 600 ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class=\"line\">        ssh-keyscan github.com &gt;&gt; ~&#x2F;.ssh&#x2F;known_hosts</span><br><span class=\"line\">        # set git infomation</span><br><span class=\"line\">        git config --global user.name &#39;lixuguang&#39; # 换成你自己的名字</span><br><span class=\"line\">        git config --global user.email &#39;lixuguang@gmail.com&#39; # 换成你自己的邮箱</span><br><span class=\"line\">        # install dependencies</span><br><span class=\"line\">        npm i -g hexo-cli # 安装hexo</span><br><span class=\"line\">        npm i</span><br><span class=\"line\">  </span><br><span class=\"line\">    - name: Deploy</span><br><span class=\"line\">      run: |</span><br><span class=\"line\">        # publish</span><br><span class=\"line\">        rm -rf .deploy_git # 如果上次构建失败这句命令会清除上次失败的代码</span><br><span class=\"line\">        hexo generate &amp;&amp; hexo deploy # 执行部署程序</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>通过以上这些步骤的操作，如果没什么意外的话，博客的自动构建就完成了，之后只要你提交新的文章到博客源代码仓库，它将自动帮你生成并发送到博客的静态代码仓库，再也不用执行hexo g -d啦，如果这篇文章对你有用，欢迎follow我或打赏一下这篇文章，感谢阅读。</p>\n<p>ps：这里有个小坑需要注意一下，因为博客的皮肤也是另外一个git仓库，如果你在本地构建好用但是线上构建博客不显示了，需要注意下是不是皮肤没有上传到博客源码仓库，这里我遇到了，希望你不会因此困扰，拜拜~</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>忙活了很久很久，终于不那么忙了，也终于想起来我还有个博客没有运行，哎，虽然用Hexo可以享受Github提供的免费的空间和域名，但是命令行敲代码的方式实现博客编写还是有些不方便，尤其是需要编程环境的时候，最近公司在用CICD的方式对代码进行构建，我就在想有没有一种方式让博客也可以变成这样，于是我就在网上搜<code>Github</code> <code>Hexo</code> <code>自动构建</code> 这些个词，还真让我搜到了一种方法而且还是Github自己提供的，下面隆重请出 <code>GitHub Actions</code>。</p>","more":"<h2 id=\"GitHub-Actions-是什么\"><a href=\"#GitHub-Actions-是什么\" class=\"headerlink\" title=\"GitHub Actions 是什么\"></a>GitHub Actions 是什么</h2><p>GitHub Actions 由 GitHub 官方推出的工作流工具。典型的应用场景应该是 CI/CD，类似 Travis 的用法。如果不知道 CI/CD&amp;Travis 感兴趣的建议去了解一下，下面不展开说明，直接说怎么用就好。</p>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>在使用 <code>GitHub Actions</code> 之前我们先来看看我们有什么；<br>首先我们有一个放博客程序的地方，我这里是叫做 <code>blog-source</code> ，另外呢有一个通过 hexo g 创建出来的静态网站，为了存放它而建的另一个仓库，我这里是叫做<code>lixuguang.github.io</code>,也就是说我们现在是有这样两个仓库。<br>|仓库|作用|<br>|-|-|<br>|blog-source|放博客源代码|<br>|lixuguang.github.io|放博客生成代码|</p>\n<h2 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h2><p>因为 <code>GitHub Actions</code> 它需要访问我的 <code>blog-source</code> 仓库的代码所以必须要有密钥，密钥大家应该熟悉了，创建博客的时候也是创建了一个公钥和私钥用来在本地往 <code>lixuguang.github.io</code> 这个仓库提交代码<br>这里呢我们用下面的命令生成密钥。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t ed25519 -f ~&#x2F;.ssh&#x2F;github-actions-deploy # 连按三次回车即刻</span><br></pre></td></tr></table></figure>\n<p>命令执行完成后，我们会得到两个文件 <code>github-actions-deploy</code> 和 <code>github-actions-deploy.pub</code> 两个文件，第一个是私钥，第二个是公钥。<br>|名称|解释|<br>|-|-|<br>|github-actions-deploy|私钥|<br>|github-actions-deploy.pub|公钥|</p>\n<p>接下来的步骤一定要好好看，因为我在这个地方被卡住好多次，就是因为有的文章说的并不正确，或者至少是讲的不够仔细，这里我会仔细地说明一下。</p>\n<h2 id=\"配置-GitHub-仓库\"><a href=\"#配置-GitHub-仓库\" class=\"headerlink\" title=\"配置 GitHub 仓库\"></a>配置 GitHub 仓库</h2><h3 id=\"配置博客源代码仓库\"><a href=\"#配置博客源代码仓库\" class=\"headerlink\" title=\"配置博客源代码仓库\"></a>配置博客源代码仓库</h3><p>我这里的源代码是放在 <code>blog-source</code> 中，所以我现在要给源代码仓库配置<code>私钥</code>，配置过程如下：<br>打开 <code>blog-source</code> 仓库，选择 <code>settings</code>，然后选中 <code>secrets</code> ， 再点击 <code>Add new secrets</code>，照着下面填写内容<br>|字段|值|<br>|-|-|<br>|Name|HEXO_DEPLOY_PRI（名称自动构建时有用）|<br>|Value|github-actions-deploy|</p>\n<h3 id=\"配置博客源代码仓库-1\"><a href=\"#配置博客源代码仓库-1\" class=\"headerlink\" title=\"配置博客源代码仓库\"></a>配置博客源代码仓库</h3><p>我这里生成的博客静态代码是放在 <code>lixuguang.github.io</code> 中，所以我现在要给静态代码仓库配置<code>公钥</code>，配置过程如下：<br>打开 <code>lixuguang.github.io</code>，选择 <code>settings</code>，然后选中 <code>keys</code>，再点击 <code>Add deploy key</code>，照着下面填写内容<br>|字段|值|<br>|-|-|<br>|Title|HEXO_DEPLOY_PUB|<br>|Key|github-actions-deploy.pub|</p>\n<h2 id=\"编写-Actions-脚本\"><a href=\"#编写-Actions-脚本\" class=\"headerlink\" title=\"编写 Actions 脚本\"></a>编写 Actions 脚本</h2><p>经过上面一系列的准备操作，终于来到了编写自动构建脚本的环节，构建脚本如下，如果按照上面我做的操作一步步来的话，那么这一步你可以直接copy啦</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: Deploy Blog</span><br><span class=\"line\"></span><br><span class=\"line\">on: [push] # 当有新push时运行</span><br><span class=\"line\"></span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  build: # 一项叫做build的任务</span><br><span class=\"line\"></span><br><span class=\"line\">    runs-on: ubuntu-latest # 在最新版的Ubuntu系统下运行</span><br><span class=\"line\">    </span><br><span class=\"line\">    steps:</span><br><span class=\"line\">    - name: Checkout # 将仓库内master分支的内容下载到工作目录</span><br><span class=\"line\">      uses: actions&#x2F;checkout@v1 # 脚本来自 https:&#x2F;&#x2F;github.com&#x2F;actions&#x2F;checkout</span><br><span class=\"line\">      </span><br><span class=\"line\">    - name: Use Node.js 10.x # 配置Node环境</span><br><span class=\"line\">      uses: actions&#x2F;setup-node@v1 # 配置脚本来自 https:&#x2F;&#x2F;github.com&#x2F;actions&#x2F;setup-node</span><br><span class=\"line\">      with:</span><br><span class=\"line\">        node-version: &quot;10.x&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    - name: Setup Hexo env</span><br><span class=\"line\">      env:</span><br><span class=\"line\">        HEXO_DEPLOY_PRI: $&#123;&#123; secrets.HEXO_DEPLOY_PRI &#125;&#125; # 这里是上面配置的私钥名称</span><br><span class=\"line\">      run: |</span><br><span class=\"line\">        # set up private key for deploy</span><br><span class=\"line\">        mkdir -p ~&#x2F;.ssh&#x2F;</span><br><span class=\"line\">        echo &quot;$HEXO_DEPLOY_PRI&quot; | tr -d &#39;\\r&#39; &gt; ~&#x2F;.ssh&#x2F;id_rsa # 配置秘钥</span><br><span class=\"line\">        chmod 600 ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class=\"line\">        ssh-keyscan github.com &gt;&gt; ~&#x2F;.ssh&#x2F;known_hosts</span><br><span class=\"line\">        # set git infomation</span><br><span class=\"line\">        git config --global user.name &#39;lixuguang&#39; # 换成你自己的名字</span><br><span class=\"line\">        git config --global user.email &#39;lixuguang@gmail.com&#39; # 换成你自己的邮箱</span><br><span class=\"line\">        # install dependencies</span><br><span class=\"line\">        npm i -g hexo-cli # 安装hexo</span><br><span class=\"line\">        npm i</span><br><span class=\"line\">  </span><br><span class=\"line\">    - name: Deploy</span><br><span class=\"line\">      run: |</span><br><span class=\"line\">        # publish</span><br><span class=\"line\">        rm -rf .deploy_git # 如果上次构建失败这句命令会清除上次失败的代码</span><br><span class=\"line\">        hexo generate &amp;&amp; hexo deploy # 执行部署程序</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>通过以上这些步骤的操作，如果没什么意外的话，博客的自动构建就完成了，之后只要你提交新的文章到博客源代码仓库，它将自动帮你生成并发送到博客的静态代码仓库，再也不用执行hexo g -d啦，如果这篇文章对你有用，欢迎follow我或打赏一下这篇文章，感谢阅读。</p>\n<p>ps：这里有个小坑需要注意一下，因为博客的皮肤也是另外一个git仓库，如果你在本地构建好用但是线上构建博客不显示了，需要注意下是不是皮肤没有上传到博客源码仓库，这里我遇到了，希望你不会因此困扰，拜拜~</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckhc3gro70000ooa618gf2x94","category_id":"ckhc3grux0004ooa68pfecml3","_id":"ckhc3grvp000fooa690skb2a5"},{"post_id":"ckhc3grus0002ooa6fdq83et0","category_id":"ckhc3grva000aooa6a6ny050r","_id":"ckhc3grw4000looa68jmq2ncg"},{"post_id":"ckhc3grv10005ooa65wbd588y","category_id":"ckhc3grvs000gooa692al4oqp","_id":"ckhc3grwb000rooa62attbtxw"},{"post_id":"ckhc3grv70008ooa6e3ma6tsp","category_id":"ckhc3grw4000mooa69ul35u8k","_id":"ckhc3grwj000yooa6ej8o58he"},{"post_id":"ckhc3grwg000wooa63xge84ea","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3grx10015ooa628z09av2"},{"post_id":"ckhc3grv90009ooa63gw57laq","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3grx30019ooa60laj3mny"},{"post_id":"ckhc3grva000booa63zp57ez3","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3grx6001eooa60mes0ibq"},{"post_id":"ckhc3gryf0028ooa69y5r2yev","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gryk002iooa661kx3ajs"},{"post_id":"ckhc3gryf0028ooa69y5r2yev","category_id":"ckhc3grye0026ooa6h2nya4pz","_id":"ckhc3grzu002mooa65mppewn7"},{"post_id":"ckhc3grwj000zooa6g44c8yfv","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs08002pooa6g5vn1jun"},{"post_id":"ckhc3grwj000zooa6g44c8yfv","category_id":"ckhc3grye0026ooa6h2nya4pz","_id":"ckhc3gs0a002uooa6gtsgdxa4"},{"post_id":"ckhc3gryi002eooa6hdu283mg","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs0c002xooa61koq9yzw"},{"post_id":"ckhc3grwr0011ooa6hpbdawsf","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs0e0032ooa6b0oudo8e"},{"post_id":"ckhc3grwr0011ooa6hpbdawsf","category_id":"ckhc3grye0026ooa6h2nya4pz","_id":"ckhc3gs0n0035ooa6hadz1j44"},{"post_id":"ckhc3gryj002gooa66ndh16qr","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs0p003aooa6a3e94ydg"},{"post_id":"ckhc3gryj002gooa66ndh16qr","category_id":"ckhc3grye0026ooa6h2nya4pz","_id":"ckhc3gs0r003dooa6cv3qc8zn"},{"post_id":"ckhc3grzt002looa6cuk6g7dm","category_id":"ckhc3grux0004ooa68pfecml3","_id":"ckhc3gs0s003iooa6550pazoz"},{"post_id":"ckhc3grx00014ooa61jda4suh","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs0u003looa6cuk64r8y"},{"post_id":"ckhc3grx00014ooa61jda4suh","category_id":"ckhc3grye0026ooa6h2nya4pz","_id":"ckhc3gs15003pooa6hai794k5"},{"post_id":"ckhc3gs01002oooa6aibz9yss","category_id":"ckhc3grux0004ooa68pfecml3","_id":"ckhc3gs1f003tooa693q7ca9i"},{"post_id":"ckhc3grx20018ooa6c2pkfhyn","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs2r003xooa623ba8ql2"},{"post_id":"ckhc3grx20018ooa6c2pkfhyn","category_id":"ckhc3grye0026ooa6h2nya4pz","_id":"ckhc3gs2u0041ooa6cuod6z44"},{"post_id":"ckhc3gs0b002wooa65rih2fhd","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs320044ooa676hv18lf"},{"post_id":"ckhc3grvc000eooa6f3jw2mdy","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs360047ooa64oi4ezxp"},{"post_id":"ckhc3grvc000eooa6f3jw2mdy","category_id":"ckhc3grye0026ooa6h2nya4pz","_id":"ckhc3gs39004booa68qqrcvgn"},{"post_id":"ckhc3grx4001cooa63x46h2f1","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs3d004fooa6gur63mxw"},{"post_id":"ckhc3grx4001cooa63x46h2f1","category_id":"ckhc3grye0026ooa6h2nya4pz","_id":"ckhc3gs3h004jooa6ftu66kau"},{"post_id":"ckhc3gs0q003cooa6dc8e75z9","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs3k004mooa6fwru346q"},{"post_id":"ckhc3grx7001gooa6amezf1q2","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs3o004rooa69opp8ue4"},{"post_id":"ckhc3grx7001gooa6amezf1q2","category_id":"ckhc3grye0026ooa6h2nya4pz","_id":"ckhc3gs3p004uooa6atz4cdjg"},{"post_id":"ckhc3gs0t003kooa6hg7qg2kb","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs3s004yooa62g9camas"},{"post_id":"ckhc3grvv000hooa66n2ygun2","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs3w0051ooa64nyv8zng"},{"post_id":"ckhc3grvv000hooa66n2ygun2","category_id":"ckhc3grye0026ooa6h2nya4pz","_id":"ckhc3gs440055ooa67spe6xb1"},{"post_id":"ckhc3grx9001jooa6ab4u9vkp","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs450058ooa6hjln4mzd"},{"post_id":"ckhc3grx9001jooa6ab4u9vkp","category_id":"ckhc3gs1f003uooa6d81a1zmp","_id":"ckhc3gs4e005cooa60xkibu13"},{"post_id":"ckhc3gs2z0043ooa652ocakjr","category_id":"ckhc3grux0004ooa68pfecml3","_id":"ckhc3gs4g005fooa6dwmjawwa"},{"post_id":"ckhc3grxh001mooa6ce2ie6ii","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs4i005jooa6erpw9nvu"},{"post_id":"ckhc3grxh001mooa6ce2ie6ii","category_id":"ckhc3grye0026ooa6h2nya4pz","_id":"ckhc3gs4j005looa6gs264zu3"},{"post_id":"ckhc3grw2000jooa6aqv22tf9","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs4l005oooa64rc4ahh3"},{"post_id":"ckhc3grw2000jooa6aqv22tf9","category_id":"ckhc3grye0026ooa6h2nya4pz","_id":"ckhc3gs4n005sooa658mw0g1a"},{"post_id":"ckhc3gs39004dooa6d6vh7jwh","category_id":"ckhc3grvs000gooa692al4oqp","_id":"ckhc3gs4v005wooa6atap2y66"},{"post_id":"ckhc3grxj001pooa677gd389x","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs4x0060ooa66agbd0ma"},{"post_id":"ckhc3grxj001pooa677gd389x","category_id":"ckhc3grye0026ooa6h2nya4pz","_id":"ckhc3gs4z0063ooa63r2jfr8q"},{"post_id":"ckhc3grxo001sooa6a10tcccb","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs500066ooa65ttm5ks3"},{"post_id":"ckhc3grxo001sooa6a10tcccb","category_id":"ckhc3grye0026ooa6h2nya4pz","_id":"ckhc3gs52006aooa64xtpbpbm"},{"post_id":"ckhc3grw7000nooa6d0vj1ukr","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs54006dooa6fsbugdx5"},{"post_id":"ckhc3grw7000nooa6d0vj1ukr","category_id":"ckhc3grye0026ooa6h2nya4pz","_id":"ckhc3gs55006hooa68oftejg6"},{"post_id":"ckhc3grxt001vooa6covfgysw","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs5h006kooa6fxnh6lmi"},{"post_id":"ckhc3grxt001vooa6covfgysw","category_id":"ckhc3grye0026ooa6h2nya4pz","_id":"ckhc3gs5i006oooa69kso4j98"},{"post_id":"ckhc3grxx001yooa6b6ejf564","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs5j006qooa6269zejvb"},{"post_id":"ckhc3grxx001yooa6b6ejf564","category_id":"ckhc3grye0026ooa6h2nya4pz","_id":"ckhc3gs5l006vooa6dlhjch73"},{"post_id":"ckhc3grw9000pooa61ej9ejx0","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs5m006xooa6co4c1qdp"},{"post_id":"ckhc3grw9000pooa61ej9ejx0","category_id":"ckhc3grye0026ooa6h2nya4pz","_id":"ckhc3gs5s0071ooa61w6f1ytw"},{"post_id":"ckhc3grxy0020ooa632s0a8j8","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs5t0075ooa6f82y37qm"},{"post_id":"ckhc3grxy0020ooa632s0a8j8","category_id":"ckhc3grye0026ooa6h2nya4pz","_id":"ckhc3gs5v0079ooa6cjplaasu"},{"post_id":"ckhc3gry10023ooa6gkwj98px","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs5x007cooa605ag1u39"},{"post_id":"ckhc3gry10023ooa6gkwj98px","category_id":"ckhc3grye0026ooa6h2nya4pz","_id":"ckhc3gs5y007gooa67q6jbc0o"},{"post_id":"ckhc3grwb000tooa6gjzuaqxf","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs60007jooa62ch68y7d"},{"post_id":"ckhc3grwb000tooa6gjzuaqxf","category_id":"ckhc3grye0026ooa6h2nya4pz","_id":"ckhc3gs61007nooa6axx785th"},{"post_id":"ckhc3gryc0025ooa65nhxafqz","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs65007qooa61v14728a"},{"post_id":"ckhc3gryc0025ooa65nhxafqz","category_id":"ckhc3grye0026ooa6h2nya4pz","_id":"ckhc3gs69007uooa6gc1u2avy"},{"post_id":"ckhc3gryg002booa68lsf8m98","category_id":"ckhc3gs54006fooa6h7d6brd4","_id":"ckhc3gs69007wooa66rjf43iy"},{"post_id":"ckhc3gs09002tooa668f16xni","category_id":"ckhc3gs5h006mooa6b1xh7fcq","_id":"ckhc3gs6a007zooa603tb1azs"},{"post_id":"ckhc3gs5k006sooa64gjff191","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs6b0082ooa65skk6uu1"},{"post_id":"ckhc3gs0d0031ooa6eie2efxm","category_id":"ckhc3gs5k006uooa65fwuel5z","_id":"ckhc3gs6b0085ooa6dksm3m8z"},{"post_id":"ckhc3gs0i0034ooa6bz3q8gye","category_id":"ckhc3gs5k006uooa65fwuel5z","_id":"ckhc3gs6c0088ooa6csbf9sdr"},{"post_id":"ckhc3gs0p0039ooa60cwo2wam","category_id":"ckhc3gs5k006uooa65fwuel5z","_id":"ckhc3gs6c008aooa6b9yaa4y3"},{"post_id":"ckhc3gs5x007eooa63rbubmlt","category_id":"ckhc3gs5k006uooa65fwuel5z","_id":"ckhc3gs6d008dooa6ba0df96n"},{"post_id":"ckhc3gs0r003gooa61qebgzsy","category_id":"ckhc3gs5y007hooa6ct8ch125","_id":"ckhc3gs6e008fooa648ni1ipi"},{"post_id":"ckhc3gs60007looa6ce69gv5r","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs6f008iooa6evph1lt2"},{"post_id":"ckhc3gs66007sooa64z0e8fjs","category_id":"ckhc3grwb000sooa690yvd16z","_id":"ckhc3gs6g008kooa65ehbhrd8"},{"post_id":"ckhc3gs38004aooa6ddlyegg1","category_id":"ckhc3gs6f008hooa6529pdrg6","_id":"ckhc3gs6i008qooa6fbn0aqto"},{"post_id":"ckhc3gs3f004iooa67xhi4r9q","category_id":"ckhc3gs6d008cooa6ahn516yq","_id":"ckhc3gs6n008uooa65isn4uxd"},{"post_id":"ckhc3gs4o005uooa68e4f8nqa","category_id":"ckhc3gs6y009sooa62az87z62","_id":"ckhc3gs78009yooa65sex29cp"},{"post_id":"ckhc3gs4w005yooa65yny1gn7","category_id":"ckhc3gs6d008cooa6ahn516yq","_id":"ckhc3gs7900a1ooa6e7ah3x6z"},{"post_id":"ckhc3gs500065ooa6edincbxr","category_id":"ckhc3gs78009xooa6352yavh8","_id":"ckhc3gs7a00a4ooa66n0da2q6"},{"post_id":"ckhc3gs510069ooa64ccba9ht","category_id":"ckhc3gs7900a2ooa6c8xdgi7u","_id":"ckhc3gs7c00aaooa656j63nn8"},{"post_id":"ckhc3gs54006gooa6bsveadfu","category_id":"ckhc3gs7a00a6ooa6h1k9gwdy","_id":"ckhc3gs7e00ahooa699x04fpu"},{"post_id":"ckhc3gs56006iooa66p1g71r9","category_id":"ckhc3gs7d00aeooa662rl3qef","_id":"ckhc3gs7f00amooa60uhk616q"},{"post_id":"ckhc3gs5h006nooa6gpvv4doz","category_id":"ckhc3gs7a00a6ooa6h1k9gwdy","_id":"ckhc3gs7h00aqooa696yfea5k"},{"post_id":"ckhc3gs5i006pooa6g5c6cv9c","category_id":"ckhc3gs7d00aeooa662rl3qef","_id":"ckhc3gs7i00asooa6cao9hmzw"},{"post_id":"ckhc3gs5o006zooa6h3wte3fh","category_id":"ckhc3gs6y009sooa62az87z62","_id":"ckhc3gs7n00azooa6212f3ggx"},{"post_id":"ckhc3gs5u0077ooa6ekb9a86p","category_id":"ckhc3gs7d00aeooa662rl3qef","_id":"ckhc3gs7o00b3ooa66uqq3wlj"},{"post_id":"ckhc3gs5w007booa63m0q6ggg","category_id":"ckhc3gs7o00b2ooa6dqeyf4hx","_id":"ckhc3gs7p00b5ooa65o7pdn7u"},{"post_id":"ckhc3gs5z007iooa674dbf19j","category_id":"ckhc3gs7o00b4ooa618qb95kt","_id":"ckhc3gs7q00b8ooa68qe0e177"},{"post_id":"ckhc3gs62007pooa62v7i6n7a","category_id":"ckhc3gs78009xooa6352yavh8","_id":"ckhc3gs7q00b9ooa63f2f86ff"},{"post_id":"ckhc3gs0v003oooa6euttecb6","category_id":"ckhc3gs54006fooa6h7d6brd4","_id":"ckhc3gs7r00bbooa68xzzdthd"},{"post_id":"ckhc3gs0v003oooa6euttecb6","category_id":"ckhc3gs7p00b7ooa6hjy661kk","_id":"ckhc3gs7r00bdooa6awz5c5kf"},{"post_id":"ckhc3gs16003sooa6cjnyct0q","category_id":"ckhc3gs69007vooa66to73nls","_id":"ckhc3gs7s00bfooa6b6bhdp3u"},{"post_id":"ckhc3gs16003sooa6cjnyct0q","category_id":"ckhc3gs7q00baooa6c1a0gjh4","_id":"ckhc3gs7s00bgooa6bkzn8qix"},{"post_id":"ckhc3gs1p003wooa64xqge4e4","category_id":"ckhc3gs54006fooa6h7d6brd4","_id":"ckhc3gs7t00biooa6hign1m3m"},{"post_id":"ckhc3gs1p003wooa64xqge4e4","category_id":"ckhc3gs7p00b7ooa6hjy661kk","_id":"ckhc3gs7t00bjooa6h1k00m9e"},{"post_id":"ckhc3gs2s0040ooa631by5ajh","category_id":"ckhc3gs69007vooa66to73nls","_id":"ckhc3gs7t00bkooa68q0y5raz"},{"post_id":"ckhc3gs2s0040ooa631by5ajh","category_id":"ckhc3gs7q00baooa6c1a0gjh4","_id":"ckhc3gs7u00bmooa6bup25vzt"},{"post_id":"ckhc3gs320046ooa6bl6z24qm","category_id":"ckhc3gs6d008cooa6ahn516yq","_id":"ckhc3gs7u00bnooa6ghr99xp7"},{"post_id":"ckhc3gs320046ooa6bl6z24qm","category_id":"ckhc3gs7t00bhooa60acx5esv","_id":"ckhc3gs7v00bpooa6g17pedl0"},{"post_id":"ckhc3gs3i004looa623qfac0z","category_id":"ckhc3gs5h006mooa6b1xh7fcq","_id":"ckhc3gs7v00brooa68857crr9"},{"post_id":"ckhc3gs3i004looa623qfac0z","category_id":"ckhc3gs7t00blooa6dau75fpp","_id":"ckhc3gs7w00bsooa6akwgbsxs"},{"post_id":"ckhc3gs3n004pooa6eh6n007i","category_id":"ckhc3gs5h006mooa6b1xh7fcq","_id":"ckhc3gs7w00buooa6gf548g6v"},{"post_id":"ckhc3gs3n004pooa6eh6n007i","category_id":"ckhc3gs7t00blooa6dau75fpp","_id":"ckhc3gs7x00bvooa68a3oap0a"},{"post_id":"ckhc3gs3o004sooa60bce83hu","category_id":"ckhc3gs5h006mooa6b1xh7fcq","_id":"ckhc3gs7x00bxooa61uft4as9"},{"post_id":"ckhc3gs3o004sooa60bce83hu","category_id":"ckhc3gs7t00blooa6dau75fpp","_id":"ckhc3gs7y00byooa6fu7x8gzs"},{"post_id":"ckhc3gs3q004xooa6e8v8hoai","category_id":"ckhc3gs5h006mooa6b1xh7fcq","_id":"ckhc3gs8000c0ooa66xuab2s7"},{"post_id":"ckhc3gs3q004xooa6e8v8hoai","category_id":"ckhc3gs7t00blooa6dau75fpp","_id":"ckhc3gs8100c1ooa65kwi3xpq"},{"post_id":"ckhc3gs3s0050ooa69uwbegt9","category_id":"ckhc3gs5h006mooa6b1xh7fcq","_id":"ckhc3gs8200c3ooa62hic70zc"},{"post_id":"ckhc3gs3s0050ooa69uwbegt9","category_id":"ckhc3gs7t00blooa6dau75fpp","_id":"ckhc3gs8300c4ooa68ip03gi5"},{"post_id":"ckhc3gs400054ooa63leb68w7","category_id":"ckhc3gs5h006mooa6b1xh7fcq","_id":"ckhc3gs8400c6ooa67doo1h2w"},{"post_id":"ckhc3gs400054ooa63leb68w7","category_id":"ckhc3gs7t00blooa6dau75fpp","_id":"ckhc3gs8400c7ooa65n901q30"},{"post_id":"ckhc3gs440057ooa6cx6e76zo","category_id":"ckhc3gs5h006mooa6b1xh7fcq","_id":"ckhc3gs8500c9ooa60ydx7mb1"},{"post_id":"ckhc3gs440057ooa6cx6e76zo","category_id":"ckhc3gs7t00blooa6dau75fpp","_id":"ckhc3gs8500caooa612bc82zq"},{"post_id":"ckhc3gs46005aooa64tgg31fh","category_id":"ckhc3gs5h006mooa6b1xh7fcq","_id":"ckhc3gs8600ccooa6dlqu2u1n"},{"post_id":"ckhc3gs46005aooa64tgg31fh","category_id":"ckhc3gs7t00blooa6dau75fpp","_id":"ckhc3gs8600cdooa60uuub5i1"},{"post_id":"ckhc3gs4f005eooa6d9xnd50z","category_id":"ckhc3gs5h006mooa6b1xh7fcq","_id":"ckhc3gs8700cfooa69ptt8zlx"},{"post_id":"ckhc3gs4f005eooa6d9xnd50z","category_id":"ckhc3gs7t00blooa6dau75fpp","_id":"ckhc3gs8700cgooa66d448b6b"},{"post_id":"ckhc3gs4g005hooa67n7g4m9s","category_id":"ckhc3gs5h006mooa6b1xh7fcq","_id":"ckhc3gs8800ciooa6h9ek7hh3"},{"post_id":"ckhc3gs4g005hooa67n7g4m9s","category_id":"ckhc3gs7t00blooa6dau75fpp","_id":"ckhc3gs8800cjooa67nfhg3yw"},{"post_id":"ckhc3gs4i005kooa6c9gqdm39","category_id":"ckhc3gs5h006mooa6b1xh7fcq","_id":"ckhc3gs8900clooa6g7jd0s0z"},{"post_id":"ckhc3gs4i005kooa6c9gqdm39","category_id":"ckhc3gs7t00blooa6dau75fpp","_id":"ckhc3gs8900cmooa62yiz44dd"},{"post_id":"ckhc3gs4k005nooa60pem7zwf","category_id":"ckhc3gs5h006mooa6b1xh7fcq","_id":"ckhc3gs8900coooa6b24pgkwf"},{"post_id":"ckhc3gs4k005nooa60pem7zwf","category_id":"ckhc3gs7t00blooa6dau75fpp","_id":"ckhc3gs8a00cpooa6ezzpdf35"},{"post_id":"ckhc3gs4l005qooa678b78hv3","category_id":"ckhc3gs5h006mooa6b1xh7fcq","_id":"ckhc3gs8a00cqooa6b5wrh0oc"},{"post_id":"ckhc3gs4l005qooa678b78hv3","category_id":"ckhc3gs7t00blooa6dau75fpp","_id":"ckhc3gs8a00csooa63zk8coun"},{"post_id":"ckhc3gs53006cooa6ejcz7q1o","category_id":"ckhc3gs7a00a6ooa6h1k9gwdy","_id":"ckhc3gs8a00ctooa6agft49lh"},{"post_id":"ckhc3gs53006cooa6ejcz7q1o","category_id":"ckhc3gs8900cnooa6b9t0c9ok","_id":"ckhc3gs8b00cvooa6c2oifs2p"},{"post_id":"ckhc3gs5l006wooa6ehcrc8qe","category_id":"ckhc3gs7h00apooa67k2yfqx5","_id":"ckhc3gs8f00cwooa64n11ai4d"},{"post_id":"ckhc3gs5l006wooa6ehcrc8qe","category_id":"ckhc3gs8a00crooa62yk43pp3","_id":"ckhc3gs8f00cxooa6gg4scmrz"},{"post_id":"ckhc3gs5s0073ooa65ovkgt5b","category_id":"ckhc3gs7m00awooa6eoe3geq1","_id":"ckhc3gs8h00cyooa66tz652i2"},{"post_id":"ckhc3gs5s0073ooa65ovkgt5b","category_id":"ckhc3gs8a00cuooa61jvt35ix","_id":"ckhc3gs8h00czooa6bglvgnos"},{"post_id":"ckhc3gs9m00d0ooa69xl4997y","category_id":"ckhc3gs6y009sooa62az87z62","_id":"ckhc3gs9w00d2ooa60ny25wel"}],"PostTag":[{"post_id":"ckhc3grus0002ooa6fdq83et0","tag_id":"ckhc3grv60007ooa632gvhtln","_id":"ckhc3grvc000dooa6e6cb8rk5"},{"post_id":"ckhc3grv10005ooa65wbd588y","tag_id":"ckhc3grvb000cooa62ngkgrp3","_id":"ckhc3grw3000kooa655rwdkzq"},{"post_id":"ckhc3grv90009ooa63gw57laq","tag_id":"ckhc3grw0000iooa60ig93f5o","_id":"ckhc3grwb000qooa6fr7y58fr"},{"post_id":"ckhc3grw9000pooa61ej9ejx0","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3grwg000uooa61wq89pa7"},{"post_id":"ckhc3grwb000tooa6gjzuaqxf","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3grwj000xooa6e2csg8pi"},{"post_id":"ckhc3grwj000zooa6g44c8yfv","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3grx00013ooa668qd0n2j"},{"post_id":"ckhc3grva000booa63zp57ez3","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3grx20017ooa62ijbge9w"},{"post_id":"ckhc3grva000booa63zp57ez3","tag_id":"ckhc3grwg000vooa65pch4lvd","_id":"ckhc3grx4001booa641el3893"},{"post_id":"ckhc3grwr0011ooa6hpbdawsf","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3grx6001fooa64jje1v57"},{"post_id":"ckhc3grx00014ooa61jda4suh","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3grx9001iooa64l0543cr"},{"post_id":"ckhc3grvc000eooa6f3jw2mdy","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3grxg001looa67l671fx9"},{"post_id":"ckhc3grx20018ooa6c2pkfhyn","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3grxj001oooa6g5qodseq"},{"post_id":"ckhc3grx4001cooa63x46h2f1","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3grxn001rooa6bm3l1crh"},{"post_id":"ckhc3grx4001cooa63x46h2f1","tag_id":"ckhc3grwg000vooa65pch4lvd","_id":"ckhc3grxr001uooa672wq6jpt"},{"post_id":"ckhc3grvv000hooa66n2ygun2","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3grxw001xooa6bhq69sb3"},{"post_id":"ckhc3grx7001gooa6amezf1q2","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3grxy001zooa6f6cqbobo"},{"post_id":"ckhc3grx9001jooa6ab4u9vkp","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3gry10022ooa63qtubjes"},{"post_id":"ckhc3grw2000jooa6aqv22tf9","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3gryb0024ooa64el3g0xc"},{"post_id":"ckhc3grxh001mooa6ce2ie6ii","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3grye0027ooa60sn3clco"},{"post_id":"ckhc3grxj001pooa677gd389x","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3gryg002aooa6gq8k18nl"},{"post_id":"ckhc3grw7000nooa6d0vj1ukr","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3gryi002dooa613lxdlac"},{"post_id":"ckhc3grxo001sooa6a10tcccb","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3gryj002fooa6gqh2cd2a"},{"post_id":"ckhc3grxt001vooa6covfgysw","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3grzt002kooa6ailw77bi"},{"post_id":"ckhc3grwg000wooa63xge84ea","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3grzw002nooa6cu9qgq9r"},{"post_id":"ckhc3grwg000wooa63xge84ea","tag_id":"ckhc3grwg000vooa65pch4lvd","_id":"ckhc3gs09002sooa68tmoa60t"},{"post_id":"ckhc3grxx001yooa6b6ejf564","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3gs0b002vooa67ar02w5u"},{"post_id":"ckhc3grxy0020ooa632s0a8j8","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3gs0d0030ooa697qtgcaj"},{"post_id":"ckhc3gry10023ooa6gkwj98px","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3gs0e0033ooa630rwbu3k"},{"post_id":"ckhc3gryf0028ooa69y5r2yev","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3gs0o0038ooa68ytzgvbr"},{"post_id":"ckhc3gryc0025ooa65nhxafqz","tag_id":"ckhc3gryg0029ooa6829oh9lx","_id":"ckhc3gs0q003booa65nly8wcf"},{"post_id":"ckhc3gryj002gooa66ndh16qr","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3gs0r003fooa62w77busu"},{"post_id":"ckhc3gryg002booa68lsf8m98","tag_id":"ckhc3gryk002hooa60haf0mnk","_id":"ckhc3gs0t003jooa6dwct7h6n"},{"post_id":"ckhc3gryi002eooa6hdu283mg","tag_id":"ckhc3gs08002qooa65w755xi4","_id":"ckhc3gs0v003nooa68zow6gl0"},{"post_id":"ckhc3grzt002looa6cuk6g7dm","tag_id":"ckhc3gs0c002zooa67y7w14q8","_id":"ckhc3gs16003rooa6hf8mfitm"},{"post_id":"ckhc3gs09002tooa668f16xni","tag_id":"ckhc3gs0o0037ooa69zzs4ty6","_id":"ckhc3gs1p003vooa63ahw0exc"},{"post_id":"ckhc3gs0b002wooa65rih2fhd","tag_id":"ckhc3gs0s003hooa68lzt7ofd","_id":"ckhc3gs2s003zooa6557c8vbe"},{"post_id":"ckhc3gs0q003cooa6dc8e75z9","tag_id":"ckhc3gs16003qooa6hler63qd","_id":"ckhc3gs370048ooa6atajh209"},{"post_id":"ckhc3gs0q003cooa6dc8e75z9","tag_id":"ckhc3gs2s003yooa63md11ylv","_id":"ckhc3gs39004cooa691c27v2h"},{"post_id":"ckhc3gs320046ooa6bl6z24qm","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3gs3e004gooa6h5wdcwjy"},{"post_id":"ckhc3gs320046ooa6bl6z24qm","tag_id":"ckhc3grwg000vooa65pch4lvd","_id":"ckhc3gs3h004kooa6amqwff9f"},{"post_id":"ckhc3gs0r003gooa61qebgzsy","tag_id":"ckhc3gs320045ooa6ghjsc5o3","_id":"ckhc3gs3o004qooa6fasvbsun"},{"post_id":"ckhc3gs0r003gooa61qebgzsy","tag_id":"ckhc3gs3b004eooa61et5d5ua","_id":"ckhc3gs3p004tooa66ddnaml3"},{"post_id":"ckhc3gs0t003kooa6hg7qg2kb","tag_id":"ckhc3gs3k004nooa6g58f52p6","_id":"ckhc3gs3s004zooa6h9348tmw"},{"post_id":"ckhc3gs0v003oooa6euttecb6","tag_id":"ckhc3gs3p004vooa62r922pow","_id":"ckhc3gs440056ooa6g40ob108"},{"post_id":"ckhc3gs16003sooa6cjnyct0q","tag_id":"ckhc3gs3x0053ooa644bu0cic","_id":"ckhc3gs4f005dooa6h0rxaenl"},{"post_id":"ckhc3gs1p003wooa64xqge4e4","tag_id":"ckhc3gs3x0053ooa644bu0cic","_id":"ckhc3gs4m005rooa66n9l4nms"},{"post_id":"ckhc3gs1p003wooa64xqge4e4","tag_id":"ckhc3gs4h005iooa69txxhq51","_id":"ckhc3gs4q005vooa68fbn6avf"},{"post_id":"ckhc3gs2s0040ooa631by5ajh","tag_id":"ckhc3gs4h005iooa69txxhq51","_id":"ckhc3gs4x005zooa6d93d20as"},{"post_id":"ckhc3gs38004aooa6ddlyegg1","tag_id":"ckhc3gs4v005xooa64pi72e9p","_id":"ckhc3gs500067ooa678g5164x"},{"post_id":"ckhc3gs39004dooa6d6vh7jwh","tag_id":"ckhc3gs4z0064ooa6ez1391g0","_id":"ckhc3gs54006eooa69g5x8prj"},{"post_id":"ckhc3gs3f004iooa67xhi4r9q","tag_id":"ckhc3gs52006booa6fm1f5aj6","_id":"ckhc3gs5h006looa696ww3tct"},{"post_id":"ckhc3gs3i004looa623qfac0z","tag_id":"ckhc3gs5g006jooa60bgz5x69","_id":"ckhc3gs5k006tooa6grb8djdd"},{"post_id":"ckhc3gs3n004pooa6eh6n007i","tag_id":"ckhc3gs5g006jooa60bgz5x69","_id":"ckhc3gs5r0070ooa674q677i5"},{"post_id":"ckhc3gs5l006wooa6ehcrc8qe","tag_id":"ckhc3grwg000vooa65pch4lvd","_id":"ckhc3gs5t0074ooa6c59c9nir"},{"post_id":"ckhc3gs3o004sooa60bce83hu","tag_id":"ckhc3gs5g006jooa60bgz5x69","_id":"ckhc3gs5v0078ooa68w0oawy0"},{"post_id":"ckhc3gs3q004xooa6e8v8hoai","tag_id":"ckhc3gs5g006jooa60bgz5x69","_id":"ckhc3gs5y007fooa6d6pnc8n3"},{"post_id":"ckhc3gs3s0050ooa69uwbegt9","tag_id":"ckhc3gs5g006jooa60bgz5x69","_id":"ckhc3gs61007mooa60bf0688h"},{"post_id":"ckhc3gs400054ooa63leb68w7","tag_id":"ckhc3gs5g006jooa60bgz5x69","_id":"ckhc3gs68007tooa6agiucxav"},{"post_id":"ckhc3gs66007sooa64z0e8fjs","tag_id":"ckhc3grw9000oooa60v5i7xt5","_id":"ckhc3gs6a007yooa61z5z840d"},{"post_id":"ckhc3gs66007sooa64z0e8fjs","tag_id":"ckhc3grwg000vooa65pch4lvd","_id":"ckhc3gs6a0080ooa6ebveai2s"},{"post_id":"ckhc3gs440057ooa6cx6e76zo","tag_id":"ckhc3gs5g006jooa60bgz5x69","_id":"ckhc3gs6b0084ooa6c7lycnz4"},{"post_id":"ckhc3gs46005aooa64tgg31fh","tag_id":"ckhc3gs69007xooa624jvh6mm","_id":"ckhc3gs6b0086ooa6dnrmcm6m"},{"post_id":"ckhc3gs4f005eooa6d9xnd50z","tag_id":"ckhc3gs5g006jooa60bgz5x69","_id":"ckhc3gs6c008booa6g24cfl21"},{"post_id":"ckhc3gs4g005hooa67n7g4m9s","tag_id":"ckhc3gs6c0089ooa65n2m00ip","_id":"ckhc3gs6f008gooa67niz5pef"},{"post_id":"ckhc3gs4i005kooa6c9gqdm39","tag_id":"ckhc3gs5g006jooa60bgz5x69","_id":"ckhc3gs6g008looa6djk26li1"},{"post_id":"ckhc3gs4k005nooa60pem7zwf","tag_id":"ckhc3gs5g006jooa60bgz5x69","_id":"ckhc3gs6h008oooa63mhy23s1"},{"post_id":"ckhc3gs4l005qooa678b78hv3","tag_id":"ckhc3gs5g006jooa60bgz5x69","_id":"ckhc3gs6l008sooa66aadfmcn"},{"post_id":"ckhc3gs4o005uooa68e4f8nqa","tag_id":"ckhc3gs6i008rooa60gil0cnm","_id":"ckhc3gs6o008wooa68g3ral47"},{"post_id":"ckhc3gs4w005yooa65yny1gn7","tag_id":"ckhc3gs6n008vooa612680nsz","_id":"ckhc3gs6r0094ooa6fhqcejly"},{"post_id":"ckhc3gs4w005yooa65yny1gn7","tag_id":"ckhc3gs6p008yooa6c6f08hb2","_id":"ckhc3gs6s0095ooa6du6qbp5h"},{"post_id":"ckhc3gs4w005yooa65yny1gn7","tag_id":"ckhc3gs6q0090ooa6buhs4byv","_id":"ckhc3gs6s0098ooa6fzqh6efv"},{"post_id":"ckhc3gs500065ooa6edincbxr","tag_id":"ckhc3gs6r0092ooa6e8crg6ay","_id":"ckhc3gs6t0099ooa606285udz"},{"post_id":"ckhc3gs510069ooa64ccba9ht","tag_id":"ckhc3gs6s0096ooa66wg8ghqp","_id":"ckhc3gs6u009cooa6b2iog77m"},{"post_id":"ckhc3gs53006cooa6ejcz7q1o","tag_id":"ckhc3gs6t009aooa63jb2f9fq","_id":"ckhc3gs6w009jooa6acbx2nrq"},{"post_id":"ckhc3gs53006cooa6ejcz7q1o","tag_id":"ckhc3gs6u009eooa60ymb2nq3","_id":"ckhc3gs6w009looa6dbnn3zas"},{"post_id":"ckhc3gs53006cooa6ejcz7q1o","tag_id":"ckhc3gs6v009gooa62v76800z","_id":"ckhc3gs6x009nooa6a8hkddkm"},{"post_id":"ckhc3gs54006gooa6bsveadfu","tag_id":"ckhc3gs6w009iooa6gh5ub2y9","_id":"ckhc3gs6x009pooa6axiu2xlh"},{"post_id":"ckhc3gs56006iooa66p1g71r9","tag_id":"ckhc3gs6w009mooa6hm2x98zt","_id":"ckhc3gs6y009rooa6c78r1t1v"},{"post_id":"ckhc3gs5h006nooa6gpvv4doz","tag_id":"ckhc3gs6w009iooa6gh5ub2y9","_id":"ckhc3gs78009wooa6f67yakeo"},{"post_id":"ckhc3gs5h006nooa6gpvv4doz","tag_id":"ckhc3gs73009tooa68ewx7jke","_id":"ckhc3gs78009zooa6hjpfcjkf"},{"post_id":"ckhc3gs5i006pooa6g5c6cv9c","tag_id":"ckhc3gs76009vooa68zi23yld","_id":"ckhc3gs7a00a5ooa6a8q5b1ra"},{"post_id":"ckhc3gs5i006pooa6g5c6cv9c","tag_id":"ckhc3gs7800a0ooa6fuyp3zo4","_id":"ckhc3gs7a00a7ooa6ekoecp87"},{"post_id":"ckhc3gs5k006sooa64gjff191","tag_id":"ckhc3gs6i008rooa60gil0cnm","_id":"ckhc3gs7b00a9ooa652muguta"},{"post_id":"ckhc3gs5o006zooa6h3wte3fh","tag_id":"ckhc3gs6i008rooa60gil0cnm","_id":"ckhc3gs7d00adooa65wwldbyt"},{"post_id":"ckhc3gs5s0073ooa65ovkgt5b","tag_id":"ckhc3gs7c00acooa6b3wn9wmj","_id":"ckhc3gs7e00agooa688eohssf"},{"post_id":"ckhc3gs5u0077ooa6ekb9a86p","tag_id":"ckhc3gs6w009mooa6hm2x98zt","_id":"ckhc3gs7f00akooa663rl75ab"},{"post_id":"ckhc3gs5w007booa63m0q6ggg","tag_id":"ckhc3gs7f00ajooa60ck06pc5","_id":"ckhc3gs7g00aoooa6hblbaanh"},{"post_id":"ckhc3gs5z007iooa674dbf19j","tag_id":"ckhc3gs7g00anooa635nk3ofs","_id":"ckhc3gs7i00atooa648pe75nf"},{"post_id":"ckhc3gs60007looa6ce69gv5r","tag_id":"ckhc3gs7h00arooa6bqjbb7pv","_id":"ckhc3gs7n00axooa6a4tj68x4"},{"post_id":"ckhc3gs60007looa6ce69gv5r","tag_id":"ckhc3gs4z0064ooa6ez1391g0","_id":"ckhc3gs7n00ayooa6cakj26mh"},{"post_id":"ckhc3gs62007pooa62v7i6n7a","tag_id":"ckhc3gs7l00avooa6hbymc7v4","_id":"ckhc3gs7n00b1ooa60556filu"},{"post_id":"ckhc3gs9m00d0ooa69xl4997y","tag_id":"ckhc3gs9t00d1ooa64ogahc9j","_id":"ckhc3gsa000d4ooa6gvn636lp"},{"post_id":"ckhc3gs9m00d0ooa69xl4997y","tag_id":"ckhc3gs9z00d3ooa62xyj233b","_id":"ckhc3gsa000d5ooa60o5qcynm"},{"post_id":"ckhc3gs9m00d0ooa69xl4997y","tag_id":"ckhc3gs6i008rooa60gil0cnm","_id":"ckhc3gsa000d6ooa61ynwbvex"}],"Tag":[{"name":"打包","_id":"ckhc3grv60007ooa632gvhtln"},{"name":"CSS技巧","_id":"ckhc3grvb000cooa62ngkgrp3"},{"name":"es6","_id":"ckhc3grw0000iooa60ig93f5o"},{"name":"面试","_id":"ckhc3grw9000oooa60v5i7xt5"},{"name":"知识点","_id":"ckhc3grwg000vooa65pch4lvd"},{"name":"网络安全","_id":"ckhc3gryg0029ooa6829oh9lx"},{"name":"工具分享","_id":"ckhc3gryk002hooa60haf0mnk"},{"name":"Git","_id":"ckhc3gs08002qooa65w755xi4"},{"name":"年终总结","_id":"ckhc3gs0c002zooa67y7w14q8"},{"name":"vue","_id":"ckhc3gs0o0037ooa69zzs4ty6"},{"name":"设计模式","_id":"ckhc3gs0s003hooa68lzt7ofd"},{"name":"同构","_id":"ckhc3gs16003qooa6hler63qd"},{"name":"服务端渲染","_id":"ckhc3gs2s003yooa63md11ylv"},{"name":"HomeBrew","_id":"ckhc3gs320045ooa6ghjsc5o3"},{"name":"Mac","_id":"ckhc3gs3b004eooa61et5d5ua"},{"name":"内存回收","_id":"ckhc3gs3k004nooa6g58f52p6"},{"name":"VSCode","_id":"ckhc3gs3p004vooa62r922pow"},{"name":"VUE","_id":"ckhc3gs3x0053ooa644bu0cic"},{"name":"插件","_id":"ckhc3gs4h005iooa69txxhq51"},{"name":"经验之谈","_id":"ckhc3gs4v005xooa64pi72e9p"},{"name":"兼容性问题","_id":"ckhc3gs4z0064ooa6ez1391g0"},{"name":"脚手架","_id":"ckhc3gs52006booa6fm1f5aj6"},{"name":"自己动手实现系列","_id":"ckhc3gs5g006jooa60bgz5x69"},{"name":"jsonp","_id":"ckhc3gs69007xooa624jvh6mm"},{"name":"promise","_id":"ckhc3gs6c0089ooa65n2m00ip"},{"name":"Hexo","_id":"ckhc3gs6i008rooa60gil0cnm"},{"name":"GitLab","_id":"ckhc3gs6n008vooa612680nsz"},{"name":"CI/CD","_id":"ckhc3gs6p008yooa6c6f08hb2"},{"name":"自动构建","_id":"ckhc3gs6q0090ooa6buhs4byv"},{"name":"sass","_id":"ckhc3gs6r0092ooa6e8crg6ay"},{"name":"Cordova","_id":"ckhc3gs6s0096ooa66wg8ghqp"},{"name":"npm","_id":"ckhc3gs6t009aooa63jb2f9fq"},{"name":"node","_id":"ckhc3gs6u009eooa60ymb2nq3"},{"name":"rnpm","_id":"ckhc3gs6v009gooa62v76800z"},{"name":"Nodejs","_id":"ckhc3gs6w009iooa6gh5ub2y9"},{"name":"奇怪问题","_id":"ckhc3gs6w009mooa6hm2x98zt"},{"name":"RESTful","_id":"ckhc3gs73009tooa68ewx7jke"},{"name":"ajax","_id":"ckhc3gs76009vooa68zi23yld"},{"name":"get","_id":"ckhc3gs7800a0ooa6fuyp3zo4"},{"name":"源码解析","_id":"ckhc3gs7c00acooa6b3wn9wmj"},{"name":"UglifyJsPlugin","_id":"ckhc3gs7f00ajooa60ck06pc5"},{"name":"Webpack","_id":"ckhc3gs7g00anooa635nk3ofs"},{"name":"微信","_id":"ckhc3gs7h00arooa6bqjbb7pv"},{"name":"npx","_id":"ckhc3gs7l00avooa6hbymc7v4"},{"name":"Github","_id":"ckhc3gs9t00d1ooa64ogahc9j"},{"name":"Actions","_id":"ckhc3gs9z00d3ooa62xyj233b"}]}}