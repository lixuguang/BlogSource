{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1577114025143},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1577114025143},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1577114025143},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1577114025143},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1577114025144},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1577114025152},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1577114018840},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1577114025144},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1577114025144},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1577114025144},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1577114025145},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1577114025145},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1577114025145},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1577114025145},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1577114025145},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1577114025145},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1577114025146},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1577114025146},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1577114025146},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1577114025151},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1577114025151},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1577114025151},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1577114025151},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1577114025151},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1577114025152},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1577114025152},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1577114025153},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1577114025146},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1577114025146},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1577114025147},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1577114025147},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1577114025147},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1577114025147},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1577114025147},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1577114025148},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1577114025147},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1577114025148},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1577114025150},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1577114025150},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1577114025150},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1577114025150},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1577114025150},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1577114025151},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1577114025153},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1577114025157},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1577114025165},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1577114025166},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1577114025166},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1577114025167},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1577114025166},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1577114025167},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1577114025167},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1577114025169},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1577114025170},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1577114025171},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1577114025171},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1577114025148},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1577114025149},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1577114025149},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1577114025149},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1577114025149},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1577114025150},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1577114025154},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1577114025154},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1577114025154},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1577114025154},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1577114025155},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1577114025155},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1577114025155},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1577114025155},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1577114025156},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1577114025156},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1577114025156},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1577114025156},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1577114025158},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1577114025158},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1577114025162},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1577114025167},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1577114025168},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1577114025168},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1577114025168},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1577114025168},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1577114025169},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1577114025161},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1577114025160},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1577114025165},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1577114533913},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1577114533914},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1577114533914},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1577114533922},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1577114533922},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1577114533923},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1577114533923},{"_id":"themes/next/_config.yml","hash":"4af3ae590c000c07211a48a76f2ab43cf1f641dd","modified":1577448490654},{"_id":"themes/next/README.md","hash":"dc026053a4d9fb97a58dbc3e9060e480f6852b23","modified":1577114533923},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1577114533925},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1577114533936},{"_id":"themes/next/package.json","hash":"61aa2ac422e92ad435d1bfedea8d41824f5fe85e","modified":1577114533972},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1577114533915},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ef63f34bd3b6bd4d7304d48ce5e0e3e2bead385","modified":1577114533915},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"715dcf9b0429a4a4c7107d6d1d00a34e4cf9aa99","modified":1577114533918},{"_id":"themes/next/.github/config.yml","hash":"e4f4b9afe59bc508c4f7634895b33d7d460a7cb1","modified":1577114533919},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1577114533919},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1577114533919},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1577114533920},{"_id":"themes/next/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1577114533921},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1577114533920},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1577114533921},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1577114533926},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1577114533926},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1577114533927},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1577114533927},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1577114533928},{"_id":"themes/next/docs/DATA-FILES.md","hash":"af95594c3cfd92bc1dfdd5368b06b97d202e765e","modified":1577114533927},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1577114533928},{"_id":"themes/next/docs/MATH.md","hash":"f520b336f16665e164d6edf075bdcc6aa17b31bc","modified":1577114533929},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"682937d48bf5d243842a76190921322e26c75247","modified":1577114533930},{"_id":"themes/next/languages/de.yml","hash":"285b294b1dd2ce49b0694beb4fd75ed05dc20ccb","modified":1577114533936},{"_id":"themes/next/languages/default.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1577114533937},{"_id":"themes/next/languages/en.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1577114533937},{"_id":"themes/next/languages/es.yml","hash":"3bd0977225a9b9dc3cdc856161b3a77e5993ac4a","modified":1577114533937},{"_id":"themes/next/languages/fa.yml","hash":"35468531ad0236df5b188f28bd1b4bb0c0537faf","modified":1577114533938},{"_id":"themes/next/languages/fr.yml","hash":"5fe560d14824c71ea90b2a76d0c17b2332b9d08a","modified":1577114533938},{"_id":"themes/next/languages/hu.yml","hash":"dd9e4cd2873ed9a9ae7cb89962eeff911de396b4","modified":1577114533938},{"_id":"themes/next/languages/id.yml","hash":"80c3db4c2dbbea0703f6c8f1191218f692899507","modified":1577114533939},{"_id":"themes/next/languages/it.yml","hash":"68ac5a0aa361210f51915e101c842ed1c9464889","modified":1577114533939},{"_id":"themes/next/languages/ja.yml","hash":"e61529ddf80426a5362ed07642216027615bd740","modified":1577114533939},{"_id":"themes/next/languages/ko.yml","hash":"14a162509dc71bb364335c20281d3bccbd2a51f3","modified":1577114533939},{"_id":"themes/next/languages/nl.yml","hash":"4d9b09aff03648cbbbfeb0c51a2d1214320b5ec6","modified":1577114533940},{"_id":"themes/next/languages/pt-BR.yml","hash":"024dcdeb30c93e57cd1ba4cd707f8988dcad2468","modified":1577114533940},{"_id":"themes/next/languages/pt.yml","hash":"88fb58e537a949c013a2adcdaebcbe09543c0bd2","modified":1577114533940},{"_id":"themes/next/languages/ru.yml","hash":"f7d5efd6289845f2375bbee8fe883813de745767","modified":1577114533941},{"_id":"themes/next/languages/tr.yml","hash":"e08d8d6ee9507a7c7d4450bc1c76b435470a3739","modified":1577114533941},{"_id":"themes/next/languages/uk.yml","hash":"e58393cf726401bf50a772392e23507d9e11049e","modified":1577114533941},{"_id":"themes/next/languages/vi.yml","hash":"0c0890ccffcb5cca0893de63ebad66e3ce740707","modified":1577114533942},{"_id":"themes/next/languages/zh-CN.yml","hash":"4b36a51556e87d236c6ac6ee6975de1beb95724c","modified":1577114533942},{"_id":"themes/next/languages/zh-HK.yml","hash":"6d83daf9df1811e3ae6cde5ad778c888d8027b13","modified":1577114533942},{"_id":"themes/next/languages/zh-TW.yml","hash":"5e395cb492a0b6284f8d2ffdd93f7380db31486f","modified":1577114533943},{"_id":"themes/next/layout/_layout.swig","hash":"29ee038b0d5ffdb45327598733ea968588367769","modified":1577114533944},{"_id":"themes/next/layout/archive.swig","hash":"26526c09a4334099e2141456697696fcd1f9783f","modified":1577114533970},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1577114533970},{"_id":"themes/next/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1577114533970},{"_id":"themes/next/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1577114533971},{"_id":"themes/next/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1577114533971},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1577114533971},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1577114533981},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"5e55946ee51cf5b20f5a77510a2ea16c26e40642","modified":1577114533916},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"ddc1f18952151f3c90f3b9043f2c5dddda857af2","modified":1577114533916},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"c9bb152643af4692af65b93c4a00690e61131c89","modified":1577114533917},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"a5c007b5aa6007cb6cd4a669cf3b59c3e6628fc1","modified":1577114533917},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"86ed18d428189bf47978eaa21deb4648f99390f3","modified":1577114533931},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1577114533931},{"_id":"themes/next/docs/ru/README.md","hash":"41b1bef32fb991410ebf559b4c45022549f95215","modified":1577114533932},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1577114533932},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1577114533933},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1577114533933},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"17d7203e85a8ce9760c42a853dee0f26a8f7ee4e","modified":1577114533934},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"69ce4e0fe171d008b10f4f3f5eb0c3957cbecc2a","modified":1577114533934},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1577114533934},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"0b0b9ec6ec4a89e701a3b91f8d7d95752d3e241b","modified":1577114533935},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"f0ffb74de522749c9f2fda46970a61bdafbfbc24","modified":1577114533935},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"7f37327bbcae7ed7d04d187fd5e9bc6bbf14926a","modified":1577114533935},{"_id":"themes/next/docs/zh-CN/README.md","hash":"b6a3611d40863c12804c5846994786119ce3b79f","modified":1577114533935},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1577114533944},{"_id":"themes/next/layout/_macro/post.swig","hash":"049caf88e2cb8dde780b0c6196db984c7bc3a4cc","modified":1577114533945},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1577114533945},{"_id":"themes/next/layout/_partials/comments.swig","hash":"0c4914a5fd08f15beec71940218c814ad9a89f3f","modified":1577114533945},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1ee6335c12773dc43f8b92136770cb10d460c25c","modified":1577114533946},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1577114533950},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1577114533954},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1577114533954},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1577114533955},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"9675acc599ffa546f05a60375c1637b0327be4fd","modified":1577114533956},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1577114533957},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1577114533958},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1577114533960},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1577114533964},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1577114533966},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1577114533966},{"_id":"themes/next/scripts/events/index.js","hash":"9047d8ae2670e43429b16a7919a08a0a0a81afe0","modified":1577114533973},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1577114533976},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1577114533977},{"_id":"themes/next/scripts/filters/locals.js","hash":"5bbfdc1c373542159660b7a68ed0b57ca18ad10b","modified":1577114533977},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1577114533977},{"_id":"themes/next/scripts/filters/post.js","hash":"5e5035372b3d94a65309334c93303c858e072012","modified":1577114533978},{"_id":"themes/next/scripts/helpers/engine.js","hash":"c8c8afde59df587f883dd9b47a3c629042bc4c6e","modified":1577114533979},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1577114533980},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1577114533980},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1577114533981},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1577114533982},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1577114533982},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1577114533983},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1577114533983},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1577114533983},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1577114533983},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1577114533984},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1577114533984},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1577114533984},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1577114534016},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1577114534016},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1577114534016},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1577114534017},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1577114534017},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1577114534017},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1577114534018},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1577114534018},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1577114534018},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1577114534019},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1577114534019},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1577114534019},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1577114534020},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1577114534020},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1577114534020},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1577114534020},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1577114534021},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1577114534021},{"_id":"themes/next/source/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1577114534022},{"_id":"themes/next/source/js/motion.js","hash":"09f8be6bcc6920546bb06e3f8c0181ec62c70b90","modified":1577114534022},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1577114534022},{"_id":"themes/next/source/js/utils.js","hash":"41fa3f7cc18e028263b6fa524a3a95fc93b1b81e","modified":1577114534024},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1577114534024},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577114534007},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577114534007},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"1638483d2d2dad1da4c841a6fb9f6ee96b850187","modified":1577114533947},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"0172055d118d1d7f4c8379c8495c1ee1aa50c7d9","modified":1577114533947},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1577114533948},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1577114533948},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"e6076865dba066c5f0008e22217efb850d5af69c","modified":1577114533948},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"bbf0c8e42491fac70f4f8165224f1d7d92a040d7","modified":1577114533949},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1577114533950},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"54ba9508a901c295a02c8e34e9cece7c7dcad518","modified":1577114533949},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1577114533950},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1577114533952},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1577114533951},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1577114533952},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"78cb2077f50bc3b81130a516ffc04bc1fcea5834","modified":1577114533952},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1577114533953},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1577114533953},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1577114533953},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"716b78cd90addc4216413719554721cb362b0c18","modified":1577114533954},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"d5a5f45ef0b41332cad069d263df2c449e2f1e7e","modified":1577114533955},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1577114533956},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1577114533957},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1577114533956},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1577114533957},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1577114533959},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1577114533959},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1577114533959},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1577114533959},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1577114533960},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1577114533960},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1577114533961},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1ef172bc041d6f6b6c8c642ea64496a188d79029","modified":1577114533961},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"d3dc3e051e6816cdd576d00cc70b18b8a4c6a495","modified":1577114533961},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"0992d51dff4b8f4f4e69834c8cd1604593536c5d","modified":1577114533962},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1577114533963},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4d6f9e09ca4056ff6a5d4923e202126a75242183","modified":1577114533963},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1577114533964},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1577114533965},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1577114533965},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1577114533966},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1577114533967},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1577114533967},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1577114533968},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1577114533967},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"0ea0bac09b0747bc16fde852164c0eaab2efe02c","modified":1577114533968},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1577114533968},{"_id":"themes/next/scripts/events/lib/config.js","hash":"436c5597dc7dae91ed20e3f4134db94d91c84b49","modified":1577114533973},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1577114533969},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"4a7207c6f9ab0e56ea8f59aca3ed4c2cb2fb7450","modified":1577114533969},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1577114533969},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1577114533973},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1577114533974},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1577114533974},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1577114533974},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1577114533975},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"5ba0480c2dbb0626501c90c920be85ce2308103c","modified":1577114533975},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1577114533975},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1577114533976},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1577114533976},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"e24c4dd78f6e4adee0e7c15eb8bca12eb92452e4","modified":1577114533976},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1577114534007},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1577114534007},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1577114534008},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1577114534014},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1577114534014},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1577114534015},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1577114534015},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d4e817e2b238ace5d7ac568ce0c5380196a6d039","modified":1577114534015},{"_id":"themes/next/source/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1577114534023},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"52d139e6f3bc212c8c9b71bc9e57e931920434a6","modified":1577114534023},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1577114534025},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1577114534025},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1577114534025},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1577114534025},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1577114534026},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1577114534033},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1577114534032},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1577114533985},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1577114533985},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"41c7cd1b63d49476ed5fbdd26ab9411d8f44bd05","modified":1577114533991},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1577114533985},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1577114533991},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1577114533998},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1577114533998},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4f7879a50d4608c46cc2061c725a2564597a45bd","modified":1577114534001},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1577114534002},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1577114534002},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1577114534004},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1577114534004},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1577114534003},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"2b52b0eb4c66e06762cf115450da0ca1dd435e75","modified":1577114534004},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1577114534007},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"1693ec6b53758ac15d2c7798c789d6ae8af913ea","modified":1577114534008},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4fb385d8533877678440c8faa08b68fa793cb1a2","modified":1577114534009},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1577114534009},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1577114534009},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1577114534010},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1577114534010},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1577114534010},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1577114534011},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1577114534011},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c6905c694c6fbbf372b53456a0d219701010a110","modified":1577114534011},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1577114534011},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1577114534012},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d7587df06b30042091316d8b1cc58ba361211492","modified":1577114534013},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f5abb2ea7746586738fb4e82107fceed041708ee","modified":1577114534012},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"71a3d7f2242706f7a6b79933a67ef3664cca3a24","modified":1577114534013},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1577114534012},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1577114534013},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1577114534014},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1577114534026},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1577114534027},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1577114534027},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1577114534032},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1577114533985},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1577114533986},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1577114533986},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1577114533986},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1577114533986},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"98227b4de364b48b11e21efcf4f1beb2ed3ab329","modified":1577114533987},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1577114533987},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1577114533987},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"5d5c022aa3b2f89c2f2a178212338bb64804dd75","modified":1577114533988},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1577114533989},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1577114533988},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"bcba503e956e4b737b062faa66341bd880f16c10","modified":1577114533989},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1577114533989},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9df5ba77e6cf36129bddc270407215c23c60ff38","modified":1577114533989},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1577114533990},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"284249dcfa3b49c5d76210bbb0f74f65fc2f12ea","modified":1577114533991},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1577114533990},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1577114533992},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1577114533992},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1577114533993},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2d9d68a431a334626d463bb1bdfbcd2ea8242e94","modified":1577114533993},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f5821481440a0624c8aec5fc85f093de1527095f","modified":1577114533994},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1577114533993},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1577114533995},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1577114533995},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1577114533995},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1577114533996},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1577114533997},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1577114533997},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"c27b3056d5e22d3c66d8a152a23634314d5c4a60","modified":1577114533997},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1577114533999},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1577114533998},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1577114533999},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1577114533999},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1577114533999},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"1db4ce981fe9fcb9ee4279395c29553efbb43947","modified":1577114533999},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"e2ad7ccf1865a45548e3f31c70fac2c65d6ef534","modified":1577114534000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1577114534000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1577114534001},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"c83d750238d6ac13b65869a909465fe621c464c3","modified":1577114534000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"b492a45422773ab2af06ee345d527ba4c6bbc608","modified":1577114534002},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"b4923515ca8e44aa62e839ce948f759cfd1f896f","modified":1577114534003},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1577114534002},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1577114534003},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1577114534005},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1577114534005},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"1a14c1b92d8a4dd8aabb5949333ac0ac79094c6c","modified":1577114534006},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1577114534006},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1577114534006},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1577114534005},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"d2f0f2171722533bba308f944a2ec727b083582c","modified":1577114534006},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1577114534031},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1577114534030},{"_id":"source/_posts/VSCode-ESLint.md","hash":"3b871f73824c12019dc610f9c44253aa0c0a2d1d","modified":1576810212394},{"_id":"source/_posts/Vue-VSCode-Snippets.md","hash":"7481557cf4b2c5a62bd48b73b0d458c74bb7f441","modified":1576810212395},{"_id":"source/_posts/Vue-basic.md","hash":"30d20698df059bd3c4acd373176c776e20428244","modified":1576810212395},{"_id":"source/_posts/browser-incompatibility problem-solution.md","hash":"de55ac3e68b1968e7128ab683b77e1038015c7b0","modified":1576810212395},{"_id":"source/_posts/npm-source.md","hash":"41d158c9087dc85af66d1962c8faad083456abc7","modified":1576810212395},{"_id":"source/_posts/read1.md","hash":"5737662cf5d20498dd207f2583c5f2739720847c","modified":1577454383017},{"_id":"source/_posts/us-gitment.md","hash":"47c61240680284bb5ca906566840e80159e2296d","modified":1576810212395},{"_id":"source/_posts/use-GitHub-Hexo-Next-make-blog.md","hash":"19c0afc7f4e345b46ca77e59107019037a0834e9","modified":1576810212396},{"_id":"public/2019/12/23/hello-world/index.html","hash":"fefba804aee2c2a04e391269f41bf393c16dfdaf","modified":1577446033279},{"_id":"public/2017/08/30/Vue-VSCode-Snippets/index.html","hash":"6a1f66f716b6d8fd88e4c36533f4f57290e2c747","modified":1577456306181},{"_id":"public/tags/VUE/index.html","hash":"120a658513a94b707a06ec98f3d4246eaa9f549d","modified":1577456306181},{"_id":"public/tags/blog-hexo-next-npm/index.html","hash":"844093be2622ab0337304422d813113b6b6faa15","modified":1577456306181},{"_id":"public/tags/VSCode/index.html","hash":"d49a3073ce19f1c3b503274445058bc8385802c9","modified":1577456306181},{"_id":"public/tags/前端类/index.html","hash":"9b1b42738ac85ebd18f4f76e22eee7dc5a7e86ab","modified":1577456306181},{"_id":"public/tags/blog/index.html","hash":"41459e714174cc6572dab2de8faddf56505637c1","modified":1577456306181},{"_id":"public/tags/hexo/index.html","hash":"0b08a870ec66945df77c0195f35b537f3f840346","modified":1577456306181},{"_id":"public/tags/next/index.html","hash":"1adf2c817b149a92f553bb14a64cbc024086be4c","modified":1577456306181},{"_id":"public/tags/npm/index.html","hash":"a47bb64a533bdbfef92735a1e769daa44d0b88f2","modified":1577456306181},{"_id":"public/tags/node/index.html","hash":"55c9808ea3733e21105fb44baf8807a998a4d2a0","modified":1577456306181},{"_id":"public/tags/rnpm/index.html","hash":"0ab212a4c4dd9776716d843421e143e5fc46e468","modified":1577456306181},{"_id":"public/tags/浏览器兼容问题/index.html","hash":"623fd28cbe6f81708bdaef3f288422c7e5bd1491","modified":1577456306181},{"_id":"public/archives/index.html","hash":"eee55d35d946d0b60901bcb8f8aec1e9a91828d8","modified":1577456306181},{"_id":"public/archives/2017/index.html","hash":"ff2e95293470dd1279809f89a667428965b01c56","modified":1577456306181},{"_id":"public/archives/2017/08/index.html","hash":"1123245d59f64ea978bdc4ca3b98ea02ab5f090f","modified":1577456306181},{"_id":"public/archives/2017/10/index.html","hash":"6c1e850db0d29658e228d42ca317419733b3fdd7","modified":1577456306181},{"_id":"public/archives/2019/index.html","hash":"5a3880478089a77d499df05524848d728f9b9f04","modified":1577446033279},{"_id":"public/archives/2019/12/index.html","hash":"bcc461f7414edfb4ed511943e8b17c13b7fedd39","modified":1577446033279},{"_id":"public/categories/VUE/index.html","hash":"6c361088d0be161b24a949f4d3522853d34c9f21","modified":1577456306181},{"_id":"public/categories/前端技术/index.html","hash":"5dce451d4b327308616fb2ca4e1782d0f2ae340e","modified":1577456306181},{"_id":"public/categories/VSCode/index.html","hash":"1206975abdebebe94fa1d1f97b6ea496e3fa937b","modified":1577456306181},{"_id":"public/categories/读书笔记/index.html","hash":"72b295e53d79209037bf68c047727a3750baf332","modified":1577456306181},{"_id":"public/categories/node/index.html","hash":"d1d1f79cd1cba6e2327f3cba740981aef5782d25","modified":1577456306181},{"_id":"public/categories/node/npm/index.html","hash":"bd76528e716c8d1a8284cd74184370accb9d9cb5","modified":1577456306181},{"_id":"public/categories/IE兼容性问题/index.html","hash":"1398abeb3a244beccfbbb6e1bf0f0ee9db73acc9","modified":1577456306181},{"_id":"public/2017/10/12/read1/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577454570861},{"_id":"public/2017/10/12/VSCode-ESLint/index.html","hash":"f69a453e0c4fd32fdeb0755972b0b50c84b0e117","modified":1577456306181},{"_id":"public/2017/10/12/us-gitment/index.html","hash":"0c28a66672aaf68195a74c2d095d5f048b107492","modified":1577456306181},{"_id":"public/2017/10/11/use-GitHub-Hexo-Next-make-blog/index.html","hash":"eb9c3d3d5d437c1f3783fbb0540385b1e80833d7","modified":1577456306181},{"_id":"public/2017/08/30/Vue-basic/index.html","hash":"d77bbc0e6191bfda9206f1259047448fdd08e188","modified":1577456306181},{"_id":"public/2017/08/30/npm-source/index.html","hash":"4ea7d3beb55d22df311516d4b038f51623e23860","modified":1577456306181},{"_id":"public/2017/08/29/browser-incompatibility problem-solution/index.html","hash":"1ce480e03b0c01999226eafe6ac46a473870dff1","modified":1577456306181},{"_id":"public/index.html","hash":"44bfbe4f9dd8ec2424aa765af9f1e340b40eae62","modified":1577456306181},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1577446033279},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1577446033279},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1577446033279},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1577446033279},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1577446033279},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1577446033279},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1577446033279},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1577446033279},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1577446033279},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1577115004662},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1577115004662},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1577115004662},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1577115004662},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1577115004662},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1577115004662},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1577115004662},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1577115004662},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1577115004662},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1577115004662},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1577115004662},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1577115004662},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1577115004662},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1577115004662},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1577115004662},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1577115004662},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1577115004662},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1577446033279},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1577446033279},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1577115004662},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1577115004662},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1577446033279},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1577446033279},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1577446033279},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1577446033279},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1577446033279},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1577446033279},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1577446033279},{"_id":"public/js/motion.js","hash":"09f8be6bcc6920546bb06e3f8c0181ec62c70b90","modified":1577115004662},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1577115004662},{"_id":"public/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1577115004662},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1577115004662},{"_id":"public/js/schemes/pisces.js","hash":"52d139e6f3bc212c8c9b71bc9e57e931920434a6","modified":1577115004662},{"_id":"public/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1577115004662},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1577115004662},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1577446033279},{"_id":"public/css/main.css","hash":"b036657f3f1ae459ea7ccfc3bd243e6a33b40de7","modified":1577115004662},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1577115004662},{"_id":"public/js/utils.js","hash":"41fa3f7cc18e028263b6fa524a3a95fc93b1b81e","modified":1577115004662},{"_id":"public/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1577115004662},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1577115004662},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1577446033279},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1577446033279},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1577446033279},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1577115004662},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1577115004662},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1577115004662},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1577115004662},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1577446033279},{"_id":"source/about/index.md","hash":"cba2a6db134451d2fd2455a9b180e7d505f5fcde","modified":1577441744356},{"_id":"source/categories/index.md","hash":"213bdff66bf9db012149beef7a58c0be29322a84","modified":1577442543348},{"_id":"source/tags/index.md","hash":"aa97b1e3dac0a5f54012c7e9b1bc3b24e7839ab4","modified":1577442557041},{"_id":"source/uploads/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1577442569190},{"_id":"source/uploads/avatar.jpg","hash":"1f8e687244a5c866f683afeeef95a9a07ae9f0b1","modified":1577442569191},{"_id":"source/.DS_Store","hash":"a2d72813e742ff2e626eb989525431d83f1b56f8","modified":1577442771941},{"_id":"themes/next/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1577442700912},{"_id":"themes/next/source/images/avatar.jpg","hash":"1f8e687244a5c866f683afeeef95a9a07ae9f0b1","modified":1577442784537},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"e728120f6a79dc89775f7859be255ee58ed4c7a6","modified":1577443455623},{"_id":"public/categories/index.html","hash":"d2c0a073247d29653d4e6b4c3c1561712f9291b7","modified":1577456306181},{"_id":"public/tags/index.html","hash":"b8e85e95476705eb8248a34eaae772ee63eee2df","modified":1577456306181},{"_id":"public/about/index.html","hash":"8e21f67a9e8f92029aefbed713cd421b700e2b85","modified":1577456306181},{"_id":"source/_posts/Actions.md","hash":"d1ee52d73e433379c6f2551f3db39b406db4e4aa","modified":1577714259185},{"_id":"public/2017/10/12/Actions/index.html","hash":"ba4582159e1f82e10f41103c267e0ddec3a938a8","modified":1577456306181},{"_id":"source/_posts/web-quanzhan.md","hash":"49e03dcf60ec3acb8e120014a0e1fc86e25468ce","modified":1577714259424},{"_id":"public/2017/10/12/web-quanzhan/index.html","hash":"598e69449e2a3211e8caa06f4e5ca94165238ecf","modified":1577456306181},{"_id":"source/_posts/CSS-Triangle-Circle.md","hash":"2d8b00f147dcc4543357a31bcd129b5149d341e3","modified":1577786905756},{"_id":"source/_posts/Git-Shell.md","hash":"5d8087821916ca944377acf6f71994ffe7c790e0","modified":1577788737467},{"_id":"source/_posts/Read-High-Performance-JavaScript.md","hash":"d96fa431f067de96bcbf907a2fb83c74ae4dc053","modified":1577785308041},{"_id":"source/_posts/GoodBye-2019.md","hash":"89c6152ffdcc88b912b475bf9d8f8d43022406ea","modified":1577800795506},{"_id":"source/_posts/Read-Let-your-boss-promote-you.md","hash":"39aa0fab9b27b43497b8d7a0d534a7524924078c","modified":1577790700745},{"_id":"source/_posts/Read-The-miracle-of-the-morning-journal.md","hash":"545ba398325a9d156921e6567affc74d7c342054","modified":1577788057522},{"_id":"source/_posts/Vue-Component-Communication.md","hash":"7cbc98b2e74c227933eb5b9cd17171f960f21da9","modified":1577714259185},{"_id":"source/_posts/begin-learn-java.md","hash":"11a2ea660b1bb6cfa9a4115ad905a25bad7035be","modified":1577714241761},{"_id":"source/_posts/gitlab-cicd.md","hash":"f05948102b0051b5ceaad8dcc512a081b1c848f4","modified":1577781828358},{"_id":"source/_posts/weichat-h5-compatibility.md","hash":"6887ae1b834283b005aa8868ae02cff2cb4a7b51","modified":1577774800220}],"Category":[{"name":"VUE","_id":"ck4ilitrt00021ka64tuxaqnt"},{"name":"前端技术","_id":"ck4ilits3000a1ka6d7r5322f"},{"name":"VSCode","_id":"ck4ilits6000f1ka6ewvb0pkw"},{"name":"读书笔记","_id":"ck4ilits8000j1ka60u7d3yua"},{"name":"node","_id":"ck4ilitsi00101ka6f4edf847"},{"name":"npm","parent":"ck4ilitsi00101ka6f4edf847","_id":"ck4ilitsk00131ka6e78lbg1h"},{"name":"IE兼容性问题","_id":"ck4ilitsn001a1ka6h0zqgkld"},{"name":"CSS技巧","_id":"ck4tzdeva0002v0a6ciarb5cj"},{"name":"Vue基础","_id":"ck4tzdevt000fv0a68uey21hc"},{"name":"日常记录","_id":"ck4tzdevv000lv0a63e174f6o"},{"name":"前端开发","_id":"ck4tzdevw000pv0a65g15eha7"},{"name":"年终总结","_id":"ck4tzdex80018v0a60k8b78t6"},{"name":"前端工程化","_id":"ck4tzdext001av0a6c3ay5bhp"},{"name":"博客技巧","_id":"ck4tzdey2001ev0a6a7xq1v0d"}],"Data":[],"Page":[{"title":"about","date":"2019-04-15T01:00:00.000Z","_content":"# 李旭光\n> 华宇（大连）信息服务有限公司\n> 前端开发工程师 8年\n> 手机: 15641181846\n> 邮箱: lixuguang316@foxmail.com\n> github: https://github.com/lixuguang\n> 技术博客: https://lixuguang.github.io\n> 住址: 大连沙河口区黄河路852号\n## 技能掌握\n- 熟练使用Html/Css/Javascript/Jq，响应式开发，移动端Web开发\n- 熟练使用VUE/vuex/axios/vue-router/element-ui等vue全家桶完成项目/组件开发\n- 熟练进行前后端分离开发，前后端接口联调，基于git的版本管理，CICD开发等。\n- 熟练使用chrome-dev对项目进行前端代码调试/调优\n- 掌握Nodejs/Electron/React/less/sass/bootstrap等开发\n- 掌握webpack基本配置，npm包管理等前端工程化开发方式\n- 掌握前端架构方法，对前端规范性要求非常熟悉，能够根据产品/项目需求给出最优技术选型方案。\n- 熟练使用svn/git等代码版本管理工具及gitflow管理方式进行代码管理\n\n- 8年前端开发经验，参与过100+的项目开发。\n- 善于团队协作，自我驱动，持续学习，热爱工作，责任心强。\n## 工作经历\n> 华宇（大连）信息服务有限公司：主要面向政府、公检法机关及互联网市场大客户。\n> 2014.5-至今\n> 资深前端开发工程师 团队规模：30人 公司规模：600人\n> 主要职责: \n- 编写代码\n  - 完成正常项目任务\n    - 累计完成项目超过150个\n    - 参与项目类型包括pcWeb、padWeb、手机Web、微信Web、触摸屏、指挥控制大屏\n    - 业务类型涉及政府、公检法各个领域\n    - 使用技术包含HTML4/5、CSS2/3、ES5/6、bootstrap、framework7、Angular、Vue以及Artery框架等\n  - 极短时间内完成任务\n    - 竞标项目如：\n      - 5天60个页面带领一个初级前端和一个中级前端完成。\n      - 3天完成一个问卷调查包含各种交互的特效。\n      - 封闭1星期同3位开发共同完成canvas画板功能，支持检察官记录员实现档案卷宗实时编辑。\n    - 演示项目如：\n      - 1个月带领一个初级前端一个初级开发完成整个系统包含业务逻辑除后台的所有功能，实现超高保真原型。\n    - 救火任务如：\n      - 上线前2天解决其他人无法解决的问题，此类情况居多。\n      - 项目工期提前，顶着压力加班完成任务。如1天13个页面。\n  - 新技术框架研究应用\n    - 前后端分离技术\n      - 组织前端团队学习前后端分离思想，研究前后端分离所要学习的新技能知识，面向对象的思想以及面向接口的思想等。\n    - 前端自动化构建、自动检测\n      - 组织前端团队学习前端自动化构建如：npm包管理工具、各种cli工具使用、eslint、stylint等自动化检查工具，以及webpack和gulp等打包工具使用。\n    - MVVM框架等新技术\n      - 组织学习研究Angular2、Vue2等数据驱动的MVVM框架，并在实际项目中使用VUE框架。\n  - 组织构建基础服务\n    - 前端通用组件库\n    - Vue组件库\n    - 前端题库\n    - ...\n- 制定规范\n  - 前端编码规范\n    - 包括HTML规范、CSS规范、JS规范、Vue规范、通用规范等。\n  - 团队协作制度\n    - 包括代码管理制度、团队协作规范制度。\n  - 代码审查规范\n    - 人工审核\n    - 自动化检测工具审核\n  - 知识考核规范\n    - 前端知识点地图\n    - 前端技能栈思维导图\n    - 前端考试平台\n- 团队建设\n  - 面试官\n    - 从原来的2人前端团队发展至16人前端团队，4年流失率仅为3人。\n  - 组织师傅帮带\n    - 组织先进带后进，高级带初级，建立前端梯队，组织共同学习。\n  - 前端兴趣小组\n    - 每周二组织前端兴趣小组，了解当下最新的前端知识，组织分享活动。\n  - 前端培训\n    - 不定期组织学习公司将要使用的新技术以及开发过程中遇到的问题解决方案\n    - 定期组织基础知识、中级知识、高级知识、实践应用四个层面的培训。\n- 人才培养\n  - 人员考核\n    - 根据建立的知识点地图建立考点地图，建立试卷进行考评，关系到员工晋升。\n  - 建立人才档案，定期谈话\n    - 根据不同人的特点建立对应的人才档案，通过季度谈话的方式了解员工最新动态，根据员工特点设立学习方向和目标，引导员工成长。\n  - 参与人才晋升考官\n    - 参与员工晋升考核，给出努力方向。\n---\n> 大连新桥科技发展有限公司：面向教育系统提供整体服务。\n> 2013.1-2014.1\n> 用户体验团队负责人 团队规模：6人 公司规模：50人\n> 主要职责：\n- 接访客户\n  - 去客户现场或客户到工作现场，负责接待客户，了解客户需求。\n- 设计、编写代码\n  - 根据客户或领导需求完成需求分析、视觉设计、代码编写等任务。涉及pcWeb、padWeb、手机Web等。\n- 团队管理\n  - 根据任务量分配工作，协调团队资源。\n---\n> 百维数元信息科技（北京）有限公司：一斑网在线调研平台。\n> 2011.9-2012.12\n> 开发工程师 团队规模：3人 公司规模：8人\n> 主要职责：\n- 设计、前后台代码编写、运营、客服\n  - 初创公司，开发运营团队3人，主要负责设计工作、前端开发、部分后端开发、运营、客服等工作。\n## 教育经历\n> 大连外国语大学\n> 2008.9-2012.6\n> 信息系统与信息管理（日英双语强化）\n> 本科\n> 主要职务：\n  - 计算机部部长\n    - 组织计算机竞赛、考级\n  - 团支书\n    - 组织班级党员发展、思想工作。\n  - 网络协会核心成员\n    - 为在校生提供vod服务，翻译日英影音资料供大家学习。\n> 主要荣誉：\n  - 学习标兵\n  - 优秀团支书\n  - 优秀毕业生\n  - 每一季度奖学金（一、二、三等均获得过）\n## 项目经历\n- ERP系统\n  - 法院执行线索分析系统v2.1-v2.2\n  - 数据质量检查系统v2.0-v2.3\n  - 法官办案辅助系统\n  - 量刑规范化服务系统\n  - 裁判文书上网直报系统V2.0\n  - 律师阅卷管理系统\n  - ... 100+\n- CMS网站\n  - 诉讼服务网系列 50+\n  - 法院官网 20+\n  - ... 30+\n- pad、手机、触控屏系统\n  - 信息引导侦查系列产品\n  - 远程视频会见系统2.1\n  - 领导驾驶舱\n  - 移动办案APP\n  - ... 30+\n- 普通网站\n  - 企业官网、政府官网 10+\n  \n> 涉及技术包含：\n**语言：**\nHTML4/5、CSS2/3、ES5/6、JSP...\n**框架：**\nJQ、bootstarp、mui、framework7、VUE...\n**理论：**\n前后端分离(面向对象OOB + 异步请求ajax + 面向接口api)\n## 自我介绍\n从2011年算起我已经从事前端开发8年、设计2年（重叠）、团队管理4年（重叠），参与各类大小项目200+，涉及各个业务领域包括公检法政、教育、调研，覆盖目前主流的前端技术（游戏向不包含）。基础能力扎实，能够解决绝大多数普通问题和部分棘手问题，从小在军营成长让我对团队纪律与制度有着深刻的认识，知道规范与制度的重要性，这为我建立高效优质的团队提供了良好土壤。谦逊使我可以与团队中以及团队之间有着良好的沟通，好学让我不断逃出舒适区，让自己不断的学习进步。有着个人荣誉感与集体荣誉感，让我对工作和团队认真负责。抗压能力强，让领导放心把最紧急最重要的工作交给我做，加班也毫无怨言。工作久了让我总结了一些工作中常见的问题，我会讲这些分享给他人，让大家一同进步，将问题扼杀在摇篮里。愿意组织活动参加活动，喜欢阅读，跑步，骑行，篮球。","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-04-15 09:00:00\n---\n# 李旭光\n> 华宇（大连）信息服务有限公司\n> 前端开发工程师 8年\n> 手机: 15641181846\n> 邮箱: lixuguang316@foxmail.com\n> github: https://github.com/lixuguang\n> 技术博客: https://lixuguang.github.io\n> 住址: 大连沙河口区黄河路852号\n## 技能掌握\n- 熟练使用Html/Css/Javascript/Jq，响应式开发，移动端Web开发\n- 熟练使用VUE/vuex/axios/vue-router/element-ui等vue全家桶完成项目/组件开发\n- 熟练进行前后端分离开发，前后端接口联调，基于git的版本管理，CICD开发等。\n- 熟练使用chrome-dev对项目进行前端代码调试/调优\n- 掌握Nodejs/Electron/React/less/sass/bootstrap等开发\n- 掌握webpack基本配置，npm包管理等前端工程化开发方式\n- 掌握前端架构方法，对前端规范性要求非常熟悉，能够根据产品/项目需求给出最优技术选型方案。\n- 熟练使用svn/git等代码版本管理工具及gitflow管理方式进行代码管理\n\n- 8年前端开发经验，参与过100+的项目开发。\n- 善于团队协作，自我驱动，持续学习，热爱工作，责任心强。\n## 工作经历\n> 华宇（大连）信息服务有限公司：主要面向政府、公检法机关及互联网市场大客户。\n> 2014.5-至今\n> 资深前端开发工程师 团队规模：30人 公司规模：600人\n> 主要职责: \n- 编写代码\n  - 完成正常项目任务\n    - 累计完成项目超过150个\n    - 参与项目类型包括pcWeb、padWeb、手机Web、微信Web、触摸屏、指挥控制大屏\n    - 业务类型涉及政府、公检法各个领域\n    - 使用技术包含HTML4/5、CSS2/3、ES5/6、bootstrap、framework7、Angular、Vue以及Artery框架等\n  - 极短时间内完成任务\n    - 竞标项目如：\n      - 5天60个页面带领一个初级前端和一个中级前端完成。\n      - 3天完成一个问卷调查包含各种交互的特效。\n      - 封闭1星期同3位开发共同完成canvas画板功能，支持检察官记录员实现档案卷宗实时编辑。\n    - 演示项目如：\n      - 1个月带领一个初级前端一个初级开发完成整个系统包含业务逻辑除后台的所有功能，实现超高保真原型。\n    - 救火任务如：\n      - 上线前2天解决其他人无法解决的问题，此类情况居多。\n      - 项目工期提前，顶着压力加班完成任务。如1天13个页面。\n  - 新技术框架研究应用\n    - 前后端分离技术\n      - 组织前端团队学习前后端分离思想，研究前后端分离所要学习的新技能知识，面向对象的思想以及面向接口的思想等。\n    - 前端自动化构建、自动检测\n      - 组织前端团队学习前端自动化构建如：npm包管理工具、各种cli工具使用、eslint、stylint等自动化检查工具，以及webpack和gulp等打包工具使用。\n    - MVVM框架等新技术\n      - 组织学习研究Angular2、Vue2等数据驱动的MVVM框架，并在实际项目中使用VUE框架。\n  - 组织构建基础服务\n    - 前端通用组件库\n    - Vue组件库\n    - 前端题库\n    - ...\n- 制定规范\n  - 前端编码规范\n    - 包括HTML规范、CSS规范、JS规范、Vue规范、通用规范等。\n  - 团队协作制度\n    - 包括代码管理制度、团队协作规范制度。\n  - 代码审查规范\n    - 人工审核\n    - 自动化检测工具审核\n  - 知识考核规范\n    - 前端知识点地图\n    - 前端技能栈思维导图\n    - 前端考试平台\n- 团队建设\n  - 面试官\n    - 从原来的2人前端团队发展至16人前端团队，4年流失率仅为3人。\n  - 组织师傅帮带\n    - 组织先进带后进，高级带初级，建立前端梯队，组织共同学习。\n  - 前端兴趣小组\n    - 每周二组织前端兴趣小组，了解当下最新的前端知识，组织分享活动。\n  - 前端培训\n    - 不定期组织学习公司将要使用的新技术以及开发过程中遇到的问题解决方案\n    - 定期组织基础知识、中级知识、高级知识、实践应用四个层面的培训。\n- 人才培养\n  - 人员考核\n    - 根据建立的知识点地图建立考点地图，建立试卷进行考评，关系到员工晋升。\n  - 建立人才档案，定期谈话\n    - 根据不同人的特点建立对应的人才档案，通过季度谈话的方式了解员工最新动态，根据员工特点设立学习方向和目标，引导员工成长。\n  - 参与人才晋升考官\n    - 参与员工晋升考核，给出努力方向。\n---\n> 大连新桥科技发展有限公司：面向教育系统提供整体服务。\n> 2013.1-2014.1\n> 用户体验团队负责人 团队规模：6人 公司规模：50人\n> 主要职责：\n- 接访客户\n  - 去客户现场或客户到工作现场，负责接待客户，了解客户需求。\n- 设计、编写代码\n  - 根据客户或领导需求完成需求分析、视觉设计、代码编写等任务。涉及pcWeb、padWeb、手机Web等。\n- 团队管理\n  - 根据任务量分配工作，协调团队资源。\n---\n> 百维数元信息科技（北京）有限公司：一斑网在线调研平台。\n> 2011.9-2012.12\n> 开发工程师 团队规模：3人 公司规模：8人\n> 主要职责：\n- 设计、前后台代码编写、运营、客服\n  - 初创公司，开发运营团队3人，主要负责设计工作、前端开发、部分后端开发、运营、客服等工作。\n## 教育经历\n> 大连外国语大学\n> 2008.9-2012.6\n> 信息系统与信息管理（日英双语强化）\n> 本科\n> 主要职务：\n  - 计算机部部长\n    - 组织计算机竞赛、考级\n  - 团支书\n    - 组织班级党员发展、思想工作。\n  - 网络协会核心成员\n    - 为在校生提供vod服务，翻译日英影音资料供大家学习。\n> 主要荣誉：\n  - 学习标兵\n  - 优秀团支书\n  - 优秀毕业生\n  - 每一季度奖学金（一、二、三等均获得过）\n## 项目经历\n- ERP系统\n  - 法院执行线索分析系统v2.1-v2.2\n  - 数据质量检查系统v2.0-v2.3\n  - 法官办案辅助系统\n  - 量刑规范化服务系统\n  - 裁判文书上网直报系统V2.0\n  - 律师阅卷管理系统\n  - ... 100+\n- CMS网站\n  - 诉讼服务网系列 50+\n  - 法院官网 20+\n  - ... 30+\n- pad、手机、触控屏系统\n  - 信息引导侦查系列产品\n  - 远程视频会见系统2.1\n  - 领导驾驶舱\n  - 移动办案APP\n  - ... 30+\n- 普通网站\n  - 企业官网、政府官网 10+\n  \n> 涉及技术包含：\n**语言：**\nHTML4/5、CSS2/3、ES5/6、JSP...\n**框架：**\nJQ、bootstarp、mui、framework7、VUE...\n**理论：**\n前后端分离(面向对象OOB + 异步请求ajax + 面向接口api)\n## 自我介绍\n从2011年算起我已经从事前端开发8年、设计2年（重叠）、团队管理4年（重叠），参与各类大小项目200+，涉及各个业务领域包括公检法政、教育、调研，覆盖目前主流的前端技术（游戏向不包含）。基础能力扎实，能够解决绝大多数普通问题和部分棘手问题，从小在军营成长让我对团队纪律与制度有着深刻的认识，知道规范与制度的重要性，这为我建立高效优质的团队提供了良好土壤。谦逊使我可以与团队中以及团队之间有着良好的沟通，好学让我不断逃出舒适区，让自己不断的学习进步。有着个人荣誉感与集体荣誉感，让我对工作和团队认真负责。抗压能力强，让领导放心把最紧急最重要的工作交给我做，加班也毫无怨言。工作久了让我总结了一些工作中常见的问题，我会讲这些分享给他人，让大家一同进步，将问题扼杀在摇篮里。愿意组织活动参加活动，喜欢阅读，跑步，骑行，篮球。","updated":"2019-12-27T10:15:44.356Z","path":"about/index.html","_id":"ck4o0h4co0000we2b9npehj7s","comments":1,"layout":"page","content":"<h1 id=\"李旭光\"><a href=\"#李旭光\" class=\"headerlink\" title=\"李旭光\"></a>李旭光</h1><blockquote>\n<p>华宇（大连）信息服务有限公司<br>前端开发工程师 8年<br>手机: 15641181846<br>邮箱: <a href=\"mailto:lixuguang316@foxmail.com\">lixuguang316@foxmail.com</a><br>github: <a href=\"https://github.com/lixuguang\" target=\"_blank\" rel=\"noopener\">https://github.com/lixuguang</a><br>技术博客: <a href=\"https://lixuguang.github.io\">https://lixuguang.github.io</a><br>住址: 大连沙河口区黄河路852号</p>\n</blockquote>\n<h2 id=\"技能掌握\"><a href=\"#技能掌握\" class=\"headerlink\" title=\"技能掌握\"></a>技能掌握</h2><ul>\n<li><p>熟练使用Html/Css/Javascript/Jq，响应式开发，移动端Web开发</p>\n</li>\n<li><p>熟练使用VUE/vuex/axios/vue-router/element-ui等vue全家桶完成项目/组件开发</p>\n</li>\n<li><p>熟练进行前后端分离开发，前后端接口联调，基于git的版本管理，CICD开发等。</p>\n</li>\n<li><p>熟练使用chrome-dev对项目进行前端代码调试/调优</p>\n</li>\n<li><p>掌握Nodejs/Electron/React/less/sass/bootstrap等开发</p>\n</li>\n<li><p>掌握webpack基本配置，npm包管理等前端工程化开发方式</p>\n</li>\n<li><p>掌握前端架构方法，对前端规范性要求非常熟悉，能够根据产品/项目需求给出最优技术选型方案。</p>\n</li>\n<li><p>熟练使用svn/git等代码版本管理工具及gitflow管理方式进行代码管理</p>\n</li>\n<li><p>8年前端开发经验，参与过100+的项目开发。</p>\n</li>\n<li><p>善于团队协作，自我驱动，持续学习，热爱工作，责任心强。</p>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><blockquote>\n<p>华宇（大连）信息服务有限公司：主要面向政府、公检法机关及互联网市场大客户。<br>2014.5-至今<br>资深前端开发工程师 团队规模：30人 公司规模：600人<br>主要职责: </p>\n</blockquote>\n</li>\n<li><p>编写代码</p>\n<ul>\n<li>完成正常项目任务<ul>\n<li>累计完成项目超过150个</li>\n<li>参与项目类型包括pcWeb、padWeb、手机Web、微信Web、触摸屏、指挥控制大屏</li>\n<li>业务类型涉及政府、公检法各个领域</li>\n<li>使用技术包含HTML4/5、CSS2/3、ES5/6、bootstrap、framework7、Angular、Vue以及Artery框架等</li>\n</ul>\n</li>\n<li>极短时间内完成任务<ul>\n<li>竞标项目如：<ul>\n<li>5天60个页面带领一个初级前端和一个中级前端完成。</li>\n<li>3天完成一个问卷调查包含各种交互的特效。</li>\n<li>封闭1星期同3位开发共同完成canvas画板功能，支持检察官记录员实现档案卷宗实时编辑。</li>\n</ul>\n</li>\n<li>演示项目如：<ul>\n<li>1个月带领一个初级前端一个初级开发完成整个系统包含业务逻辑除后台的所有功能，实现超高保真原型。</li>\n</ul>\n</li>\n<li>救火任务如：<ul>\n<li>上线前2天解决其他人无法解决的问题，此类情况居多。</li>\n<li>项目工期提前，顶着压力加班完成任务。如1天13个页面。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>新技术框架研究应用<ul>\n<li>前后端分离技术<ul>\n<li>组织前端团队学习前后端分离思想，研究前后端分离所要学习的新技能知识，面向对象的思想以及面向接口的思想等。</li>\n</ul>\n</li>\n<li>前端自动化构建、自动检测<ul>\n<li>组织前端团队学习前端自动化构建如：npm包管理工具、各种cli工具使用、eslint、stylint等自动化检查工具，以及webpack和gulp等打包工具使用。</li>\n</ul>\n</li>\n<li>MVVM框架等新技术<ul>\n<li>组织学习研究Angular2、Vue2等数据驱动的MVVM框架，并在实际项目中使用VUE框架。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>组织构建基础服务<ul>\n<li>前端通用组件库</li>\n<li>Vue组件库</li>\n<li>前端题库</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>制定规范</p>\n<ul>\n<li>前端编码规范<ul>\n<li>包括HTML规范、CSS规范、JS规范、Vue规范、通用规范等。</li>\n</ul>\n</li>\n<li>团队协作制度<ul>\n<li>包括代码管理制度、团队协作规范制度。</li>\n</ul>\n</li>\n<li>代码审查规范<ul>\n<li>人工审核</li>\n<li>自动化检测工具审核</li>\n</ul>\n</li>\n<li>知识考核规范<ul>\n<li>前端知识点地图</li>\n<li>前端技能栈思维导图</li>\n<li>前端考试平台</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>团队建设</p>\n<ul>\n<li>面试官<ul>\n<li>从原来的2人前端团队发展至16人前端团队，4年流失率仅为3人。</li>\n</ul>\n</li>\n<li>组织师傅帮带<ul>\n<li>组织先进带后进，高级带初级，建立前端梯队，组织共同学习。</li>\n</ul>\n</li>\n<li>前端兴趣小组<ul>\n<li>每周二组织前端兴趣小组，了解当下最新的前端知识，组织分享活动。</li>\n</ul>\n</li>\n<li>前端培训<ul>\n<li>不定期组织学习公司将要使用的新技术以及开发过程中遇到的问题解决方案</li>\n<li>定期组织基础知识、中级知识、高级知识、实践应用四个层面的培训。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>人才培养</p>\n<ul>\n<li>人员考核<ul>\n<li>根据建立的知识点地图建立考点地图，建立试卷进行考评，关系到员工晋升。</li>\n</ul>\n</li>\n<li>建立人才档案，定期谈话<ul>\n<li>根据不同人的特点建立对应的人才档案，通过季度谈话的方式了解员工最新动态，根据员工特点设立学习方向和目标，引导员工成长。</li>\n</ul>\n</li>\n<li>参与人才晋升考官<ul>\n<li>参与员工晋升考核，给出努力方向。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<blockquote>\n<p>大连新桥科技发展有限公司：面向教育系统提供整体服务。<br>2013.1-2014.1<br>用户体验团队负责人 团队规模：6人 公司规模：50人<br>主要职责：</p>\n</blockquote>\n<ul>\n<li>接访客户<ul>\n<li>去客户现场或客户到工作现场，负责接待客户，了解客户需求。</li>\n</ul>\n</li>\n<li>设计、编写代码<ul>\n<li>根据客户或领导需求完成需求分析、视觉设计、代码编写等任务。涉及pcWeb、padWeb、手机Web等。</li>\n</ul>\n</li>\n<li>团队管理<ul>\n<li>根据任务量分配工作，协调团队资源。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<blockquote>\n<p>百维数元信息科技（北京）有限公司：一斑网在线调研平台。<br>2011.9-2012.12<br>开发工程师 团队规模：3人 公司规模：8人<br>主要职责：</p>\n</blockquote>\n<ul>\n<li>设计、前后台代码编写、运营、客服<ul>\n<li>初创公司，开发运营团队3人，主要负责设计工作、前端开发、部分后端开发、运营、客服等工作。<h2 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h2><blockquote>\n<p>大连外国语大学<br>2008.9-2012.6<br>信息系统与信息管理（日英双语强化）<br>本科<br>主要职务：</p>\n</blockquote>\n</li>\n<li>计算机部部长<ul>\n<li>组织计算机竞赛、考级</li>\n</ul>\n</li>\n<li>团支书<ul>\n<li>组织班级党员发展、思想工作。</li>\n</ul>\n</li>\n<li>网络协会核心成员<ul>\n<li>为在校生提供vod服务，翻译日英影音资料供大家学习。<blockquote>\n<p>主要荣誉：</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>学习标兵</li>\n<li>优秀团支书</li>\n<li>优秀毕业生</li>\n<li>每一季度奖学金（一、二、三等均获得过）<h2 id=\"项目经历\"><a href=\"#项目经历\" class=\"headerlink\" title=\"项目经历\"></a>项目经历</h2></li>\n</ul>\n</li>\n<li>ERP系统<ul>\n<li>法院执行线索分析系统v2.1-v2.2</li>\n<li>数据质量检查系统v2.0-v2.3</li>\n<li>法官办案辅助系统</li>\n<li>量刑规范化服务系统</li>\n<li>裁判文书上网直报系统V2.0</li>\n<li>律师阅卷管理系统</li>\n<li>… 100+</li>\n</ul>\n</li>\n<li>CMS网站<ul>\n<li>诉讼服务网系列 50+</li>\n<li>法院官网 20+</li>\n<li>… 30+</li>\n</ul>\n</li>\n<li>pad、手机、触控屏系统<ul>\n<li>信息引导侦查系列产品</li>\n<li>远程视频会见系统2.1</li>\n<li>领导驾驶舱</li>\n<li>移动办案APP</li>\n<li>… 30+</li>\n</ul>\n</li>\n<li>普通网站<ul>\n<li>企业官网、政府官网 10+</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>涉及技术包含：<br><strong>语言：</strong><br>HTML4/5、CSS2/3、ES5/6、JSP…<br><strong>框架：</strong><br>JQ、bootstarp、mui、framework7、VUE…<br><strong>理论：</strong><br>前后端分离(面向对象OOB + 异步请求ajax + 面向接口api)</p>\n</blockquote>\n<h2 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h2><p>从2011年算起我已经从事前端开发8年、设计2年（重叠）、团队管理4年（重叠），参与各类大小项目200+，涉及各个业务领域包括公检法政、教育、调研，覆盖目前主流的前端技术（游戏向不包含）。基础能力扎实，能够解决绝大多数普通问题和部分棘手问题，从小在军营成长让我对团队纪律与制度有着深刻的认识，知道规范与制度的重要性，这为我建立高效优质的团队提供了良好土壤。谦逊使我可以与团队中以及团队之间有着良好的沟通，好学让我不断逃出舒适区，让自己不断的学习进步。有着个人荣誉感与集体荣誉感，让我对工作和团队认真负责。抗压能力强，让领导放心把最紧急最重要的工作交给我做，加班也毫无怨言。工作久了让我总结了一些工作中常见的问题，我会讲这些分享给他人，让大家一同进步，将问题扼杀在摇篮里。愿意组织活动参加活动，喜欢阅读，跑步，骑行，篮球。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"李旭光\"><a href=\"#李旭光\" class=\"headerlink\" title=\"李旭光\"></a>李旭光</h1><blockquote>\n<p>华宇（大连）信息服务有限公司<br>前端开发工程师 8年<br>手机: 15641181846<br>邮箱: <a href=\"mailto:lixuguang316@foxmail.com\">lixuguang316@foxmail.com</a><br>github: <a href=\"https://github.com/lixuguang\" target=\"_blank\" rel=\"noopener\">https://github.com/lixuguang</a><br>技术博客: <a href=\"https://lixuguang.github.io\">https://lixuguang.github.io</a><br>住址: 大连沙河口区黄河路852号</p>\n</blockquote>\n<h2 id=\"技能掌握\"><a href=\"#技能掌握\" class=\"headerlink\" title=\"技能掌握\"></a>技能掌握</h2><ul>\n<li><p>熟练使用Html/Css/Javascript/Jq，响应式开发，移动端Web开发</p>\n</li>\n<li><p>熟练使用VUE/vuex/axios/vue-router/element-ui等vue全家桶完成项目/组件开发</p>\n</li>\n<li><p>熟练进行前后端分离开发，前后端接口联调，基于git的版本管理，CICD开发等。</p>\n</li>\n<li><p>熟练使用chrome-dev对项目进行前端代码调试/调优</p>\n</li>\n<li><p>掌握Nodejs/Electron/React/less/sass/bootstrap等开发</p>\n</li>\n<li><p>掌握webpack基本配置，npm包管理等前端工程化开发方式</p>\n</li>\n<li><p>掌握前端架构方法，对前端规范性要求非常熟悉，能够根据产品/项目需求给出最优技术选型方案。</p>\n</li>\n<li><p>熟练使用svn/git等代码版本管理工具及gitflow管理方式进行代码管理</p>\n</li>\n<li><p>8年前端开发经验，参与过100+的项目开发。</p>\n</li>\n<li><p>善于团队协作，自我驱动，持续学习，热爱工作，责任心强。</p>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><blockquote>\n<p>华宇（大连）信息服务有限公司：主要面向政府、公检法机关及互联网市场大客户。<br>2014.5-至今<br>资深前端开发工程师 团队规模：30人 公司规模：600人<br>主要职责: </p>\n</blockquote>\n</li>\n<li><p>编写代码</p>\n<ul>\n<li>完成正常项目任务<ul>\n<li>累计完成项目超过150个</li>\n<li>参与项目类型包括pcWeb、padWeb、手机Web、微信Web、触摸屏、指挥控制大屏</li>\n<li>业务类型涉及政府、公检法各个领域</li>\n<li>使用技术包含HTML4/5、CSS2/3、ES5/6、bootstrap、framework7、Angular、Vue以及Artery框架等</li>\n</ul>\n</li>\n<li>极短时间内完成任务<ul>\n<li>竞标项目如：<ul>\n<li>5天60个页面带领一个初级前端和一个中级前端完成。</li>\n<li>3天完成一个问卷调查包含各种交互的特效。</li>\n<li>封闭1星期同3位开发共同完成canvas画板功能，支持检察官记录员实现档案卷宗实时编辑。</li>\n</ul>\n</li>\n<li>演示项目如：<ul>\n<li>1个月带领一个初级前端一个初级开发完成整个系统包含业务逻辑除后台的所有功能，实现超高保真原型。</li>\n</ul>\n</li>\n<li>救火任务如：<ul>\n<li>上线前2天解决其他人无法解决的问题，此类情况居多。</li>\n<li>项目工期提前，顶着压力加班完成任务。如1天13个页面。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>新技术框架研究应用<ul>\n<li>前后端分离技术<ul>\n<li>组织前端团队学习前后端分离思想，研究前后端分离所要学习的新技能知识，面向对象的思想以及面向接口的思想等。</li>\n</ul>\n</li>\n<li>前端自动化构建、自动检测<ul>\n<li>组织前端团队学习前端自动化构建如：npm包管理工具、各种cli工具使用、eslint、stylint等自动化检查工具，以及webpack和gulp等打包工具使用。</li>\n</ul>\n</li>\n<li>MVVM框架等新技术<ul>\n<li>组织学习研究Angular2、Vue2等数据驱动的MVVM框架，并在实际项目中使用VUE框架。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>组织构建基础服务<ul>\n<li>前端通用组件库</li>\n<li>Vue组件库</li>\n<li>前端题库</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>制定规范</p>\n<ul>\n<li>前端编码规范<ul>\n<li>包括HTML规范、CSS规范、JS规范、Vue规范、通用规范等。</li>\n</ul>\n</li>\n<li>团队协作制度<ul>\n<li>包括代码管理制度、团队协作规范制度。</li>\n</ul>\n</li>\n<li>代码审查规范<ul>\n<li>人工审核</li>\n<li>自动化检测工具审核</li>\n</ul>\n</li>\n<li>知识考核规范<ul>\n<li>前端知识点地图</li>\n<li>前端技能栈思维导图</li>\n<li>前端考试平台</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>团队建设</p>\n<ul>\n<li>面试官<ul>\n<li>从原来的2人前端团队发展至16人前端团队，4年流失率仅为3人。</li>\n</ul>\n</li>\n<li>组织师傅帮带<ul>\n<li>组织先进带后进，高级带初级，建立前端梯队，组织共同学习。</li>\n</ul>\n</li>\n<li>前端兴趣小组<ul>\n<li>每周二组织前端兴趣小组，了解当下最新的前端知识，组织分享活动。</li>\n</ul>\n</li>\n<li>前端培训<ul>\n<li>不定期组织学习公司将要使用的新技术以及开发过程中遇到的问题解决方案</li>\n<li>定期组织基础知识、中级知识、高级知识、实践应用四个层面的培训。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>人才培养</p>\n<ul>\n<li>人员考核<ul>\n<li>根据建立的知识点地图建立考点地图，建立试卷进行考评，关系到员工晋升。</li>\n</ul>\n</li>\n<li>建立人才档案，定期谈话<ul>\n<li>根据不同人的特点建立对应的人才档案，通过季度谈话的方式了解员工最新动态，根据员工特点设立学习方向和目标，引导员工成长。</li>\n</ul>\n</li>\n<li>参与人才晋升考官<ul>\n<li>参与员工晋升考核，给出努力方向。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<blockquote>\n<p>大连新桥科技发展有限公司：面向教育系统提供整体服务。<br>2013.1-2014.1<br>用户体验团队负责人 团队规模：6人 公司规模：50人<br>主要职责：</p>\n</blockquote>\n<ul>\n<li>接访客户<ul>\n<li>去客户现场或客户到工作现场，负责接待客户，了解客户需求。</li>\n</ul>\n</li>\n<li>设计、编写代码<ul>\n<li>根据客户或领导需求完成需求分析、视觉设计、代码编写等任务。涉及pcWeb、padWeb、手机Web等。</li>\n</ul>\n</li>\n<li>团队管理<ul>\n<li>根据任务量分配工作，协调团队资源。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<blockquote>\n<p>百维数元信息科技（北京）有限公司：一斑网在线调研平台。<br>2011.9-2012.12<br>开发工程师 团队规模：3人 公司规模：8人<br>主要职责：</p>\n</blockquote>\n<ul>\n<li>设计、前后台代码编写、运营、客服<ul>\n<li>初创公司，开发运营团队3人，主要负责设计工作、前端开发、部分后端开发、运营、客服等工作。<h2 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h2><blockquote>\n<p>大连外国语大学<br>2008.9-2012.6<br>信息系统与信息管理（日英双语强化）<br>本科<br>主要职务：</p>\n</blockquote>\n</li>\n<li>计算机部部长<ul>\n<li>组织计算机竞赛、考级</li>\n</ul>\n</li>\n<li>团支书<ul>\n<li>组织班级党员发展、思想工作。</li>\n</ul>\n</li>\n<li>网络协会核心成员<ul>\n<li>为在校生提供vod服务，翻译日英影音资料供大家学习。<blockquote>\n<p>主要荣誉：</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>学习标兵</li>\n<li>优秀团支书</li>\n<li>优秀毕业生</li>\n<li>每一季度奖学金（一、二、三等均获得过）<h2 id=\"项目经历\"><a href=\"#项目经历\" class=\"headerlink\" title=\"项目经历\"></a>项目经历</h2></li>\n</ul>\n</li>\n<li>ERP系统<ul>\n<li>法院执行线索分析系统v2.1-v2.2</li>\n<li>数据质量检查系统v2.0-v2.3</li>\n<li>法官办案辅助系统</li>\n<li>量刑规范化服务系统</li>\n<li>裁判文书上网直报系统V2.0</li>\n<li>律师阅卷管理系统</li>\n<li>… 100+</li>\n</ul>\n</li>\n<li>CMS网站<ul>\n<li>诉讼服务网系列 50+</li>\n<li>法院官网 20+</li>\n<li>… 30+</li>\n</ul>\n</li>\n<li>pad、手机、触控屏系统<ul>\n<li>信息引导侦查系列产品</li>\n<li>远程视频会见系统2.1</li>\n<li>领导驾驶舱</li>\n<li>移动办案APP</li>\n<li>… 30+</li>\n</ul>\n</li>\n<li>普通网站<ul>\n<li>企业官网、政府官网 10+</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>涉及技术包含：<br><strong>语言：</strong><br>HTML4/5、CSS2/3、ES5/6、JSP…<br><strong>框架：</strong><br>JQ、bootstarp、mui、framework7、VUE…<br><strong>理论：</strong><br>前后端分离(面向对象OOB + 异步请求ajax + 面向接口api)</p>\n</blockquote>\n<h2 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h2><p>从2011年算起我已经从事前端开发8年、设计2年（重叠）、团队管理4年（重叠），参与各类大小项目200+，涉及各个业务领域包括公检法政、教育、调研，覆盖目前主流的前端技术（游戏向不包含）。基础能力扎实，能够解决绝大多数普通问题和部分棘手问题，从小在军营成长让我对团队纪律与制度有着深刻的认识，知道规范与制度的重要性，这为我建立高效优质的团队提供了良好土壤。谦逊使我可以与团队中以及团队之间有着良好的沟通，好学让我不断逃出舒适区，让自己不断的学习进步。有着个人荣誉感与集体荣誉感，让我对工作和团队认真负责。抗压能力强，让领导放心把最紧急最重要的工作交给我做，加班也毫无怨言。工作久了让我总结了一些工作中常见的问题，我会讲这些分享给他人，让大家一同进步，将问题扼杀在摇篮里。愿意组织活动参加活动，喜欢阅读，跑步，骑行，篮球。</p>\n"},{"title":"分类","date":"2017-08-29T09:40:17.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-08-29 17:40:17\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-12-27T10:29:03.348Z","path":"categories/index.html","_id":"ck4o0k8gc0001we2b6p1ma45r","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-08-29T09:59:00.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-08-29 17:59:00\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-12-27T10:29:17.041Z","path":"tags/index.html","_id":"ck4o0kixx0002we2bgq3e1vi4","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Vue VSCode Snippets 自动生成Vue代码片段的VSCode扩展","date":"2017-08-30T08:23:17.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n现代化的IDE已经把开发者变得越来越懒，但是我觉得这样挺好的，让工具完成手工反复重复的工作，提高工作效率的同时降低开发者的疲劳感，Vue VSCode Snippets就是这样一个VSC插件，它可以用简单的几个字母就敲出一整块代码片段，在学习和做VUE项目时可以极大地提高工作效率，下面就介绍一下插件的常见命令。\n<!-- more -->\n\n此插件可用比较简单的写法生成代码片段，非常适合开发工作，减少代码工作量。\n\nScript\n\n\nSnippet | Purpose\n---|---\nvbase | Single file component base\nvbase|\tSingle file component base\nvdata|\tComponent data as a function\nvmethod|\tVue method\nvcomputed|\tVue computed property\nvwatcher|\tVue watcher with new and old value args\nvprops|\tProps with type and default\nvimport\t|Import one component into another\nvimport-c|\tImport one component into another within the export statement\nvimport-export|\tImport one component into another and use it within the export statement\nvfilter\t|Vue filter\nvmixin|\tCreate a Vue Mixin\nvmixin-use|\tBring a mixin into a component to use\nvc-direct|\tVue create a custom directive\nvimport-lib\t|Import a library\nvimport-gsap|\tImport GreenSock with Timeline and Eases\nvanimhook-js|\tUsing the Transition component JS hooks in methods\n<!-- more -->\nTemplate\n\nSnippet | Purpose\n---|---\nvfor|\tv-for directive\nvmodel|\tSemantic v-model directive\nvmodel-num|\tSemantic v-model number directive\nvon\t|v-on click handler with arguments\nvel-props|\tComponent element with props\nvsrc|\tImage src binding\nvstyle|\tInline style binding\nvstyle-obj|\tInline style binding with objects\nvclass|\tClass binding\nvclass-obj|\tClass binding with objects\nvclass-obj-mult\t|Multiple conditional class bindings\nvanim|\tTransition component with JS hooks\n\nVuex\n\nSnippet | Purpose\n---|---\nvstore|\tBase for Vuex store.js\nvgetters|\tVuex Getter\nvmutation|\tVuex Mutation\nvaction|\tVuex Action\nvstore-import|\tImport vuex store into main.js\n\nExtra (plaintext)\n\nSnippet | Purpose\n---|---\ngitignore|\t.gitignore file presets\nvinc|\tincrementer\nvdec|\tdecrementer","source":"_posts/Vue-VSCode-Snippets.md","raw":"---\ntitle: Vue VSCode Snippets 自动生成Vue代码片段的VSCode扩展\ndate: 2017-08-30 16:23:17\ncategories: \n\t- VUE\ntags: \n\t- VUE\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n现代化的IDE已经把开发者变得越来越懒，但是我觉得这样挺好的，让工具完成手工反复重复的工作，提高工作效率的同时降低开发者的疲劳感，Vue VSCode Snippets就是这样一个VSC插件，它可以用简单的几个字母就敲出一整块代码片段，在学习和做VUE项目时可以极大地提高工作效率，下面就介绍一下插件的常见命令。\n<!-- more -->\n\n此插件可用比较简单的写法生成代码片段，非常适合开发工作，减少代码工作量。\n\nScript\n\n\nSnippet | Purpose\n---|---\nvbase | Single file component base\nvbase|\tSingle file component base\nvdata|\tComponent data as a function\nvmethod|\tVue method\nvcomputed|\tVue computed property\nvwatcher|\tVue watcher with new and old value args\nvprops|\tProps with type and default\nvimport\t|Import one component into another\nvimport-c|\tImport one component into another within the export statement\nvimport-export|\tImport one component into another and use it within the export statement\nvfilter\t|Vue filter\nvmixin|\tCreate a Vue Mixin\nvmixin-use|\tBring a mixin into a component to use\nvc-direct|\tVue create a custom directive\nvimport-lib\t|Import a library\nvimport-gsap|\tImport GreenSock with Timeline and Eases\nvanimhook-js|\tUsing the Transition component JS hooks in methods\n<!-- more -->\nTemplate\n\nSnippet | Purpose\n---|---\nvfor|\tv-for directive\nvmodel|\tSemantic v-model directive\nvmodel-num|\tSemantic v-model number directive\nvon\t|v-on click handler with arguments\nvel-props|\tComponent element with props\nvsrc|\tImage src binding\nvstyle|\tInline style binding\nvstyle-obj|\tInline style binding with objects\nvclass|\tClass binding\nvclass-obj|\tClass binding with objects\nvclass-obj-mult\t|Multiple conditional class bindings\nvanim|\tTransition component with JS hooks\n\nVuex\n\nSnippet | Purpose\n---|---\nvstore|\tBase for Vuex store.js\nvgetters|\tVuex Getter\nvmutation|\tVuex Mutation\nvaction|\tVuex Action\nvstore-import|\tImport vuex store into main.js\n\nExtra (plaintext)\n\nSnippet | Purpose\n---|---\ngitignore|\t.gitignore file presets\nvinc|\tincrementer\nvdec|\tdecrementer","slug":"Vue-VSCode-Snippets","published":1,"updated":"2019-12-20T02:50:12.395Z","_id":"ck4ilitrm00001ka6274nad72","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>现代化的IDE已经把开发者变得越来越懒，但是我觉得这样挺好的，让工具完成手工反复重复的工作，提高工作效率的同时降低开发者的疲劳感，Vue VSCode Snippets就是这样一个VSC插件，它可以用简单的几个字母就敲出一整块代码片段，在学习和做VUE项目时可以极大地提高工作效率，下面就介绍一下插件的常见命令。</p>\n<a id=\"more\"></a>\n\n<p>此插件可用比较简单的写法生成代码片段，非常适合开发工作，减少代码工作量。</p>\n<p>Script</p>\n<table>\n<thead>\n<tr>\n<th>Snippet</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>vbase</td>\n<td>Single file component base</td>\n</tr>\n<tr>\n<td>vbase</td>\n<td>Single file component base</td>\n</tr>\n<tr>\n<td>vdata</td>\n<td>Component data as a function</td>\n</tr>\n<tr>\n<td>vmethod</td>\n<td>Vue method</td>\n</tr>\n<tr>\n<td>vcomputed</td>\n<td>Vue computed property</td>\n</tr>\n<tr>\n<td>vwatcher</td>\n<td>Vue watcher with new and old value args</td>\n</tr>\n<tr>\n<td>vprops</td>\n<td>Props with type and default</td>\n</tr>\n<tr>\n<td>vimport</td>\n<td>Import one component into another</td>\n</tr>\n<tr>\n<td>vimport-c</td>\n<td>Import one component into another within the export statement</td>\n</tr>\n<tr>\n<td>vimport-export</td>\n<td>Import one component into another and use it within the export statement</td>\n</tr>\n<tr>\n<td>vfilter</td>\n<td>Vue filter</td>\n</tr>\n<tr>\n<td>vmixin</td>\n<td>Create a Vue Mixin</td>\n</tr>\n<tr>\n<td>vmixin-use</td>\n<td>Bring a mixin into a component to use</td>\n</tr>\n<tr>\n<td>vc-direct</td>\n<td>Vue create a custom directive</td>\n</tr>\n<tr>\n<td>vimport-lib</td>\n<td>Import a library</td>\n</tr>\n<tr>\n<td>vimport-gsap</td>\n<td>Import GreenSock with Timeline and Eases</td>\n</tr>\n<tr>\n<td>vanimhook-js</td>\n<td>Using the Transition component JS hooks in methods</td>\n</tr>\n<tr>\n<td><!-- more --></td>\n<td></td>\n</tr>\n<tr>\n<td>Template</td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Snippet</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>vfor</td>\n<td>v-for directive</td>\n</tr>\n<tr>\n<td>vmodel</td>\n<td>Semantic v-model directive</td>\n</tr>\n<tr>\n<td>vmodel-num</td>\n<td>Semantic v-model number directive</td>\n</tr>\n<tr>\n<td>von</td>\n<td>v-on click handler with arguments</td>\n</tr>\n<tr>\n<td>vel-props</td>\n<td>Component element with props</td>\n</tr>\n<tr>\n<td>vsrc</td>\n<td>Image src binding</td>\n</tr>\n<tr>\n<td>vstyle</td>\n<td>Inline style binding</td>\n</tr>\n<tr>\n<td>vstyle-obj</td>\n<td>Inline style binding with objects</td>\n</tr>\n<tr>\n<td>vclass</td>\n<td>Class binding</td>\n</tr>\n<tr>\n<td>vclass-obj</td>\n<td>Class binding with objects</td>\n</tr>\n<tr>\n<td>vclass-obj-mult</td>\n<td>Multiple conditional class bindings</td>\n</tr>\n<tr>\n<td>vanim</td>\n<td>Transition component with JS hooks</td>\n</tr>\n</tbody></table>\n<p>Vuex</p>\n<table>\n<thead>\n<tr>\n<th>Snippet</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>vstore</td>\n<td>Base for Vuex store.js</td>\n</tr>\n<tr>\n<td>vgetters</td>\n<td>Vuex Getter</td>\n</tr>\n<tr>\n<td>vmutation</td>\n<td>Vuex Mutation</td>\n</tr>\n<tr>\n<td>vaction</td>\n<td>Vuex Action</td>\n</tr>\n<tr>\n<td>vstore-import</td>\n<td>Import vuex store into main.js</td>\n</tr>\n</tbody></table>\n<p>Extra (plaintext)</p>\n<table>\n<thead>\n<tr>\n<th>Snippet</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gitignore</td>\n<td>.gitignore file presets</td>\n</tr>\n<tr>\n<td>vinc</td>\n<td>incrementer</td>\n</tr>\n<tr>\n<td>vdec</td>\n<td>decrementer</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>现代化的IDE已经把开发者变得越来越懒，但是我觉得这样挺好的，让工具完成手工反复重复的工作，提高工作效率的同时降低开发者的疲劳感，Vue VSCode Snippets就是这样一个VSC插件，它可以用简单的几个字母就敲出一整块代码片段，在学习和做VUE项目时可以极大地提高工作效率，下面就介绍一下插件的常见命令。</p>","more":"<p>此插件可用比较简单的写法生成代码片段，非常适合开发工作，减少代码工作量。</p>\n<p>Script</p>\n<table>\n<thead>\n<tr>\n<th>Snippet</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>vbase</td>\n<td>Single file component base</td>\n</tr>\n<tr>\n<td>vbase</td>\n<td>Single file component base</td>\n</tr>\n<tr>\n<td>vdata</td>\n<td>Component data as a function</td>\n</tr>\n<tr>\n<td>vmethod</td>\n<td>Vue method</td>\n</tr>\n<tr>\n<td>vcomputed</td>\n<td>Vue computed property</td>\n</tr>\n<tr>\n<td>vwatcher</td>\n<td>Vue watcher with new and old value args</td>\n</tr>\n<tr>\n<td>vprops</td>\n<td>Props with type and default</td>\n</tr>\n<tr>\n<td>vimport</td>\n<td>Import one component into another</td>\n</tr>\n<tr>\n<td>vimport-c</td>\n<td>Import one component into another within the export statement</td>\n</tr>\n<tr>\n<td>vimport-export</td>\n<td>Import one component into another and use it within the export statement</td>\n</tr>\n<tr>\n<td>vfilter</td>\n<td>Vue filter</td>\n</tr>\n<tr>\n<td>vmixin</td>\n<td>Create a Vue Mixin</td>\n</tr>\n<tr>\n<td>vmixin-use</td>\n<td>Bring a mixin into a component to use</td>\n</tr>\n<tr>\n<td>vc-direct</td>\n<td>Vue create a custom directive</td>\n</tr>\n<tr>\n<td>vimport-lib</td>\n<td>Import a library</td>\n</tr>\n<tr>\n<td>vimport-gsap</td>\n<td>Import GreenSock with Timeline and Eases</td>\n</tr>\n<tr>\n<td>vanimhook-js</td>\n<td>Using the Transition component JS hooks in methods</td>\n</tr>\n<tr>\n<td><!-- more --></td>\n<td></td>\n</tr>\n<tr>\n<td>Template</td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Snippet</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>vfor</td>\n<td>v-for directive</td>\n</tr>\n<tr>\n<td>vmodel</td>\n<td>Semantic v-model directive</td>\n</tr>\n<tr>\n<td>vmodel-num</td>\n<td>Semantic v-model number directive</td>\n</tr>\n<tr>\n<td>von</td>\n<td>v-on click handler with arguments</td>\n</tr>\n<tr>\n<td>vel-props</td>\n<td>Component element with props</td>\n</tr>\n<tr>\n<td>vsrc</td>\n<td>Image src binding</td>\n</tr>\n<tr>\n<td>vstyle</td>\n<td>Inline style binding</td>\n</tr>\n<tr>\n<td>vstyle-obj</td>\n<td>Inline style binding with objects</td>\n</tr>\n<tr>\n<td>vclass</td>\n<td>Class binding</td>\n</tr>\n<tr>\n<td>vclass-obj</td>\n<td>Class binding with objects</td>\n</tr>\n<tr>\n<td>vclass-obj-mult</td>\n<td>Multiple conditional class bindings</td>\n</tr>\n<tr>\n<td>vanim</td>\n<td>Transition component with JS hooks</td>\n</tr>\n</tbody></table>\n<p>Vuex</p>\n<table>\n<thead>\n<tr>\n<th>Snippet</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>vstore</td>\n<td>Base for Vuex store.js</td>\n</tr>\n<tr>\n<td>vgetters</td>\n<td>Vuex Getter</td>\n</tr>\n<tr>\n<td>vmutation</td>\n<td>Vuex Mutation</td>\n</tr>\n<tr>\n<td>vaction</td>\n<td>Vuex Action</td>\n</tr>\n<tr>\n<td>vstore-import</td>\n<td>Import vuex store into main.js</td>\n</tr>\n</tbody></table>\n<p>Extra (plaintext)</p>\n<table>\n<thead>\n<tr>\n<th>Snippet</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gitignore</td>\n<td>.gitignore file presets</td>\n</tr>\n<tr>\n<td>vinc</td>\n<td>incrementer</td>\n</tr>\n<tr>\n<td>vdec</td>\n<td>decrementer</td>\n</tr>\n</tbody></table>"},{"title":"Vue基础","date":"2017-08-30T09:03:05.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n最近公司技术选型选择了VUE，下面就记录一下在学习Vue中遇到的一些知识点，有些在官方手册里已经讲的很详细了，这里就简单带过，主要对cli产生的以及自行添加的一些项目目录进行一下解释，希望对正在学习Vue的同学提供一点帮助，如果本文有谬误之处还请各位指出，谢谢各位支持。\n\n<!-- more -->\n### 搭建项目\n\n```\nnpm install --global vue-cli\nvue init webpack my-project\ncd my-project\nnpm install（推荐用cnpm install）\n如果没有cnpm ，先安装cnpm镜像\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\nnpm run dev\n```\n### 目录讲解\n> - build和config ：项目开发和打包时候的相关配置；\n> - node_modules ：项目所需要的依赖文件；\n> - src ：主应用/页面相关文件；\n>    - assets ： 静态资源文件；\n>    - components ：组件；\n>    - res：资源\n>      - css： 公共css或是css预处理文件；\n>      - js：   公共js文件\n>      - img：公共图片\n>    - router ：路由配置文件；\n>    - views ： 视图文件，其实也是vue组件。按照业务功能划分模块；\n>    - vuex : 状态管理的配置文件；\n>    - App.vue : 主组件；\n>    - main.js： 入口文件，初始化vue实例并使用需要的插件\n> - index.html ： 主html页面；\n> - dist：webpack打包生成的文件；\n> - package.json：记录依赖相关信息\n\n### 文件的加载顺序:\n当我们执行命令 `npm run dev`的时候根据配置文件`dev-server.js`里的相关配置去加载`webpack`的相关配置文件 在`webpack.base.conf`里面`entry`入口文件就配置了`app：'./src/main.js'` \n\n所以当我们在运行`npm run dev`的时候就开始通过`main.js`执行了。`main.js` 初始化vue实例并且加载相关配置插件，然后通过`app.vue`文件去访问各个组件\n\n### Build/dev-server.js主要完成以下几件事情：\n1. 检查node和npm的版本；\n1. 引入相关插件和配置；\n1. 创建express服务器和webpack编译器；\n1. 配置开发中间件（webpack-dev-middleware）和热重载中间件（webpack-hot-middleware）；\n1. 挂载代理服务和中间件；\n1. 配置静态资源；\n1. 启动服务器监听特定端口（8080）；\n1. 自动打开浏览器并打开特定网址（localhost:8080）；\n\n### Build/huild.js主要完成以下几件事情：\n1. loading动画；\n1. 删除创建目标文件夹；\n1. webpack编译；\n1. 输出信息\n\n### 配置文件\n#### .babelrc \n设置转码的规则和插件（使用es6语法必须安装插件）\n\n```\nnpm install babel-preset-es2015\n```\n\npresets 字段是用来设定转码规则;\n\n#### .editorconfig \n配置文件编码格式的文件\n- indent_style:  设置缩进风格，tab或者空格;\n- indent_size:  缩进的宽度;\n- tab_width:   设置tab的列数。默认是indent_size;\n- end_of_line： 换行符，lf、cr和crlf;\n- charset：  编码;\n- trim_trailing_whitespace： 设为true表示会除去换行行首的任意空白字符;\n- insert_final_newline:   设为true表明使文件以一个空白行结尾;\n- root: 表明是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件;\n\n#### .eslintignore  \n忽略不符合eslint规范的文件, （一般会忽略掉第三方引用的插件）\n\n#### .eslintrc.js \n定义代码规则\n\n#### .gitignore  \n配置文件，用于配置不需要加入版本管理的文件\n\n### .VUE 文件解释\n- template： 展示模板\n- import ： 导入组件已经js文件\n- export default： \n  - data：数据源；\n  - methods：方法； \t\t       \n  - mounted：页面加载之后执行的方法；\t\n  - created：页面生成时加载的方法；\n- style：  样式代码  其中scoped表示样式作用范围为本vue文件\n\n\n\n### 网络访问\n#### axios\n1. 发送请求：\n\n```\naxios#request(config)；\naxios#get(url[, config])；\naxios#delete(url[, config])；\naxios#head(url[, config])；\naxios#post(url[, data[, config]])；\naxios#put(url[, data[, config]])；\naxios#patch(url[, data[, config]])；\n```\n\n2. 处理响应：\n- Promise语法；\n- 处理结果：then；\n- 处理异常：catch；\n3. 拦截器（use/reject）：\n\n```\naxios.interceptors.response.use；\naxios.interceptors.rquest.use；\nreject(移除请求拦截)\n```\n\n4. 参数：\n- json（默认）；\n- qs；\n\n### 组件通信\n- Prpos：父组件对子组件；\n- 自定义事件：子组件对父组件；\n- 消息总线：任意两个组件；\n- 状态管理：Vuex（适用于大型单页面开发）\n\n### 路由\n\n1. 配置\n\n```\nVue.use(Router)\n\nexport default new Router({\n  routes: [\n    {\n      path: '/',\n      name: 'Hello',\n      component: Hello\n    }\n  ]\n})\n\nnew Vue({\n  el: '#app',\n  router,\n  template: '<App/>',\n  components: { App }\n})\n```\n\n2. 导航\n- push\n- replace\n- go\n3. 参数传递\n- RESTful url参数\n- 参数查询 query\n- 锚点  hash: '#data'\n4. 嵌套路由\n- Children\n5. 钩子\n- beforeRouteEnter\n- beforeRouteLeave\n\n### 状态管理\n> Vuex是什么？\n> \n> Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n\n- state里面就是存放的我们所要用到的状态；\n- mutations就是存放如何更改状态的方法 ，同步操作；\n- getters就是从state中派生出状态，比如将state中的某个状态进行过滤然后获取新的状态。\n- actions就是mutation的加强版，它可以通过commit\n- mutations中的方法来改变状态，最重要的是它可以进行异步操作。 \n- modules顾名思义，就是当用这个容器来装这些状态还是显得混乱的时候，我们就可以把容器分成几块，把状态和管理规则分类来装。这和我们创建js模块是一个目的，让代码结构更清晰。\n","source":"_posts/Vue-basic.md","raw":"---\ntitle: Vue基础\ndate: 2017-08-30 17:03:05\ncategories: \n\t- VUE\ntags: \n\t- VUE\n---\n> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n最近公司技术选型选择了VUE，下面就记录一下在学习Vue中遇到的一些知识点，有些在官方手册里已经讲的很详细了，这里就简单带过，主要对cli产生的以及自行添加的一些项目目录进行一下解释，希望对正在学习Vue的同学提供一点帮助，如果本文有谬误之处还请各位指出，谢谢各位支持。\n\n<!-- more -->\n### 搭建项目\n\n```\nnpm install --global vue-cli\nvue init webpack my-project\ncd my-project\nnpm install（推荐用cnpm install）\n如果没有cnpm ，先安装cnpm镜像\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\nnpm run dev\n```\n### 目录讲解\n> - build和config ：项目开发和打包时候的相关配置；\n> - node_modules ：项目所需要的依赖文件；\n> - src ：主应用/页面相关文件；\n>    - assets ： 静态资源文件；\n>    - components ：组件；\n>    - res：资源\n>      - css： 公共css或是css预处理文件；\n>      - js：   公共js文件\n>      - img：公共图片\n>    - router ：路由配置文件；\n>    - views ： 视图文件，其实也是vue组件。按照业务功能划分模块；\n>    - vuex : 状态管理的配置文件；\n>    - App.vue : 主组件；\n>    - main.js： 入口文件，初始化vue实例并使用需要的插件\n> - index.html ： 主html页面；\n> - dist：webpack打包生成的文件；\n> - package.json：记录依赖相关信息\n\n### 文件的加载顺序:\n当我们执行命令 `npm run dev`的时候根据配置文件`dev-server.js`里的相关配置去加载`webpack`的相关配置文件 在`webpack.base.conf`里面`entry`入口文件就配置了`app：'./src/main.js'` \n\n所以当我们在运行`npm run dev`的时候就开始通过`main.js`执行了。`main.js` 初始化vue实例并且加载相关配置插件，然后通过`app.vue`文件去访问各个组件\n\n### Build/dev-server.js主要完成以下几件事情：\n1. 检查node和npm的版本；\n1. 引入相关插件和配置；\n1. 创建express服务器和webpack编译器；\n1. 配置开发中间件（webpack-dev-middleware）和热重载中间件（webpack-hot-middleware）；\n1. 挂载代理服务和中间件；\n1. 配置静态资源；\n1. 启动服务器监听特定端口（8080）；\n1. 自动打开浏览器并打开特定网址（localhost:8080）；\n\n### Build/huild.js主要完成以下几件事情：\n1. loading动画；\n1. 删除创建目标文件夹；\n1. webpack编译；\n1. 输出信息\n\n### 配置文件\n#### .babelrc \n设置转码的规则和插件（使用es6语法必须安装插件）\n\n```\nnpm install babel-preset-es2015\n```\n\npresets 字段是用来设定转码规则;\n\n#### .editorconfig \n配置文件编码格式的文件\n- indent_style:  设置缩进风格，tab或者空格;\n- indent_size:  缩进的宽度;\n- tab_width:   设置tab的列数。默认是indent_size;\n- end_of_line： 换行符，lf、cr和crlf;\n- charset：  编码;\n- trim_trailing_whitespace： 设为true表示会除去换行行首的任意空白字符;\n- insert_final_newline:   设为true表明使文件以一个空白行结尾;\n- root: 表明是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件;\n\n#### .eslintignore  \n忽略不符合eslint规范的文件, （一般会忽略掉第三方引用的插件）\n\n#### .eslintrc.js \n定义代码规则\n\n#### .gitignore  \n配置文件，用于配置不需要加入版本管理的文件\n\n### .VUE 文件解释\n- template： 展示模板\n- import ： 导入组件已经js文件\n- export default： \n  - data：数据源；\n  - methods：方法； \t\t       \n  - mounted：页面加载之后执行的方法；\t\n  - created：页面生成时加载的方法；\n- style：  样式代码  其中scoped表示样式作用范围为本vue文件\n\n\n\n### 网络访问\n#### axios\n1. 发送请求：\n\n```\naxios#request(config)；\naxios#get(url[, config])；\naxios#delete(url[, config])；\naxios#head(url[, config])；\naxios#post(url[, data[, config]])；\naxios#put(url[, data[, config]])；\naxios#patch(url[, data[, config]])；\n```\n\n2. 处理响应：\n- Promise语法；\n- 处理结果：then；\n- 处理异常：catch；\n3. 拦截器（use/reject）：\n\n```\naxios.interceptors.response.use；\naxios.interceptors.rquest.use；\nreject(移除请求拦截)\n```\n\n4. 参数：\n- json（默认）；\n- qs；\n\n### 组件通信\n- Prpos：父组件对子组件；\n- 自定义事件：子组件对父组件；\n- 消息总线：任意两个组件；\n- 状态管理：Vuex（适用于大型单页面开发）\n\n### 路由\n\n1. 配置\n\n```\nVue.use(Router)\n\nexport default new Router({\n  routes: [\n    {\n      path: '/',\n      name: 'Hello',\n      component: Hello\n    }\n  ]\n})\n\nnew Vue({\n  el: '#app',\n  router,\n  template: '<App/>',\n  components: { App }\n})\n```\n\n2. 导航\n- push\n- replace\n- go\n3. 参数传递\n- RESTful url参数\n- 参数查询 query\n- 锚点  hash: '#data'\n4. 嵌套路由\n- Children\n5. 钩子\n- beforeRouteEnter\n- beforeRouteLeave\n\n### 状态管理\n> Vuex是什么？\n> \n> Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n\n- state里面就是存放的我们所要用到的状态；\n- mutations就是存放如何更改状态的方法 ，同步操作；\n- getters就是从state中派生出状态，比如将state中的某个状态进行过滤然后获取新的状态。\n- actions就是mutation的加强版，它可以通过commit\n- mutations中的方法来改变状态，最重要的是它可以进行异步操作。 \n- modules顾名思义，就是当用这个容器来装这些状态还是显得混乱的时候，我们就可以把容器分成几块，把状态和管理规则分类来装。这和我们创建js模块是一个目的，让代码结构更清晰。\n","slug":"Vue-basic","published":1,"updated":"2019-12-20T02:50:12.395Z","_id":"ck4ilitrq00011ka6heczcr92","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近公司技术选型选择了VUE，下面就记录一下在学习Vue中遇到的一些知识点，有些在官方手册里已经讲的很详细了，这里就简单带过，主要对cli产生的以及自行添加的一些项目目录进行一下解释，希望对正在学习Vue的同学提供一点帮助，如果本文有谬误之处还请各位指出，谢谢各位支持。</p>\n<a id=\"more\"></a>\n<h3 id=\"搭建项目\"><a href=\"#搭建项目\" class=\"headerlink\" title=\"搭建项目\"></a>搭建项目</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --global vue-cli</span><br><span class=\"line\">vue init webpack my-project</span><br><span class=\"line\">cd my-project</span><br><span class=\"line\">npm install（推荐用cnpm install）</span><br><span class=\"line\">如果没有cnpm ，先安装cnpm镜像</span><br><span class=\"line\">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"目录讲解\"><a href=\"#目录讲解\" class=\"headerlink\" title=\"目录讲解\"></a>目录讲解</h3><blockquote>\n<ul>\n<li>build和config ：项目开发和打包时候的相关配置；</li>\n<li>node_modules ：项目所需要的依赖文件；</li>\n<li>src ：主应用/页面相关文件；<ul>\n<li>assets ： 静态资源文件；</li>\n<li>components ：组件；</li>\n<li>res：资源<ul>\n<li>css： 公共css或是css预处理文件；</li>\n<li>js：   公共js文件</li>\n<li>img：公共图片</li>\n</ul>\n</li>\n<li>router ：路由配置文件；</li>\n<li>views ： 视图文件，其实也是vue组件。按照业务功能划分模块；</li>\n<li>vuex : 状态管理的配置文件；</li>\n<li>App.vue : 主组件；</li>\n<li>main.js： 入口文件，初始化vue实例并使用需要的插件</li>\n</ul>\n</li>\n<li>index.html ： 主html页面；</li>\n<li>dist：webpack打包生成的文件；</li>\n<li>package.json：记录依赖相关信息</li>\n</ul>\n</blockquote>\n<h3 id=\"文件的加载顺序\"><a href=\"#文件的加载顺序\" class=\"headerlink\" title=\"文件的加载顺序:\"></a>文件的加载顺序:</h3><p>当我们执行命令 <code>npm run dev</code>的时候根据配置文件<code>dev-server.js</code>里的相关配置去加载<code>webpack</code>的相关配置文件 在<code>webpack.base.conf</code>里面<code>entry</code>入口文件就配置了<code>app：&#39;./src/main.js&#39;</code> </p>\n<p>所以当我们在运行<code>npm run dev</code>的时候就开始通过<code>main.js</code>执行了。<code>main.js</code> 初始化vue实例并且加载相关配置插件，然后通过<code>app.vue</code>文件去访问各个组件</p>\n<h3 id=\"Build-dev-server-js主要完成以下几件事情：\"><a href=\"#Build-dev-server-js主要完成以下几件事情：\" class=\"headerlink\" title=\"Build/dev-server.js主要完成以下几件事情：\"></a>Build/dev-server.js主要完成以下几件事情：</h3><ol>\n<li>检查node和npm的版本；</li>\n<li>引入相关插件和配置；</li>\n<li>创建express服务器和webpack编译器；</li>\n<li>配置开发中间件（webpack-dev-middleware）和热重载中间件（webpack-hot-middleware）；</li>\n<li>挂载代理服务和中间件；</li>\n<li>配置静态资源；</li>\n<li>启动服务器监听特定端口（8080）；</li>\n<li>自动打开浏览器并打开特定网址（localhost:8080）；</li>\n</ol>\n<h3 id=\"Build-huild-js主要完成以下几件事情：\"><a href=\"#Build-huild-js主要完成以下几件事情：\" class=\"headerlink\" title=\"Build/huild.js主要完成以下几件事情：\"></a>Build/huild.js主要完成以下几件事情：</h3><ol>\n<li>loading动画；</li>\n<li>删除创建目标文件夹；</li>\n<li>webpack编译；</li>\n<li>输出信息</li>\n</ol>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><h4 id=\"babelrc\"><a href=\"#babelrc\" class=\"headerlink\" title=\".babelrc\"></a>.babelrc</h4><p>设置转码的规则和插件（使用es6语法必须安装插件）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-preset-es2015</span><br></pre></td></tr></table></figure>\n\n<p>presets 字段是用来设定转码规则;</p>\n<h4 id=\"editorconfig\"><a href=\"#editorconfig\" class=\"headerlink\" title=\".editorconfig\"></a>.editorconfig</h4><p>配置文件编码格式的文件</p>\n<ul>\n<li>indent_style:  设置缩进风格，tab或者空格;</li>\n<li>indent_size:  缩进的宽度;</li>\n<li>tab_width:   设置tab的列数。默认是indent_size;</li>\n<li>end_of_line： 换行符，lf、cr和crlf;</li>\n<li>charset：  编码;</li>\n<li>trim_trailing_whitespace： 设为true表示会除去换行行首的任意空白字符;</li>\n<li>insert_final_newline:   设为true表明使文件以一个空白行结尾;</li>\n<li>root: 表明是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件;</li>\n</ul>\n<h4 id=\"eslintignore\"><a href=\"#eslintignore\" class=\"headerlink\" title=\".eslintignore\"></a>.eslintignore</h4><p>忽略不符合eslint规范的文件, （一般会忽略掉第三方引用的插件）</p>\n<h4 id=\"eslintrc-js\"><a href=\"#eslintrc-js\" class=\"headerlink\" title=\".eslintrc.js\"></a>.eslintrc.js</h4><p>定义代码规则</p>\n<h4 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\".gitignore\"></a>.gitignore</h4><p>配置文件，用于配置不需要加入版本管理的文件</p>\n<h3 id=\"VUE-文件解释\"><a href=\"#VUE-文件解释\" class=\"headerlink\" title=\".VUE 文件解释\"></a>.VUE 文件解释</h3><ul>\n<li>template： 展示模板</li>\n<li>import ： 导入组件已经js文件</li>\n<li>export default： <ul>\n<li>data：数据源；</li>\n<li>methods：方法；                </li>\n<li>mounted：页面加载之后执行的方法；    </li>\n<li>created：页面生成时加载的方法；</li>\n</ul>\n</li>\n<li>style：  样式代码  其中scoped表示样式作用范围为本vue文件</li>\n</ul>\n<h3 id=\"网络访问\"><a href=\"#网络访问\" class=\"headerlink\" title=\"网络访问\"></a>网络访问</h3><h4 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h4><ol>\n<li>发送请求：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios#request(config)；</span><br><span class=\"line\">axios#get(url[, config])；</span><br><span class=\"line\">axios#delete(url[, config])；</span><br><span class=\"line\">axios#head(url[, config])；</span><br><span class=\"line\">axios#post(url[, data[, config]])；</span><br><span class=\"line\">axios#put(url[, data[, config]])；</span><br><span class=\"line\">axios#patch(url[, data[, config]])；</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>处理响应：</li>\n</ol>\n<ul>\n<li>Promise语法；</li>\n<li>处理结果：then；</li>\n<li>处理异常：catch；</li>\n</ul>\n<ol start=\"3\">\n<li>拦截器（use/reject）：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.interceptors.response.use；</span><br><span class=\"line\">axios.interceptors.rquest.use；</span><br><span class=\"line\">reject(移除请求拦截)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>参数：</li>\n</ol>\n<ul>\n<li>json（默认）；</li>\n<li>qs；</li>\n</ul>\n<h3 id=\"组件通信\"><a href=\"#组件通信\" class=\"headerlink\" title=\"组件通信\"></a>组件通信</h3><ul>\n<li>Prpos：父组件对子组件；</li>\n<li>自定义事件：子组件对父组件；</li>\n<li>消息总线：任意两个组件；</li>\n<li>状态管理：Vuex（适用于大型单页面开发）</li>\n</ul>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><ol>\n<li>配置</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.use(Router)</span><br><span class=\"line\"></span><br><span class=\"line\">export default new Router(&#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: &#39;&#x2F;&#39;,</span><br><span class=\"line\">      name: &#39;Hello&#39;,</span><br><span class=\"line\">      component: Hello</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  template: &#39;&lt;App&#x2F;&gt;&#39;,</span><br><span class=\"line\">  components: &#123; App &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>导航</li>\n</ol>\n<ul>\n<li>push</li>\n<li>replace</li>\n<li>go</li>\n</ul>\n<ol start=\"3\">\n<li>参数传递</li>\n</ol>\n<ul>\n<li>RESTful url参数</li>\n<li>参数查询 query</li>\n<li>锚点  hash: ‘#data’</li>\n</ul>\n<ol start=\"4\">\n<li>嵌套路由</li>\n</ol>\n<ul>\n<li>Children</li>\n</ul>\n<ol start=\"5\">\n<li>钩子</li>\n</ol>\n<ul>\n<li>beforeRouteEnter</li>\n<li>beforeRouteLeave</li>\n</ul>\n<h3 id=\"状态管理\"><a href=\"#状态管理\" class=\"headerlink\" title=\"状态管理\"></a>状态管理</h3><blockquote>\n<p>Vuex是什么？</p>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n</blockquote>\n<ul>\n<li>state里面就是存放的我们所要用到的状态；</li>\n<li>mutations就是存放如何更改状态的方法 ，同步操作；</li>\n<li>getters就是从state中派生出状态，比如将state中的某个状态进行过滤然后获取新的状态。</li>\n<li>actions就是mutation的加强版，它可以通过commit</li>\n<li>mutations中的方法来改变状态，最重要的是它可以进行异步操作。 </li>\n<li>modules顾名思义，就是当用这个容器来装这些状态还是显得混乱的时候，我们就可以把容器分成几块，把状态和管理规则分类来装。这和我们创建js模块是一个目的，让代码结构更清晰。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近公司技术选型选择了VUE，下面就记录一下在学习Vue中遇到的一些知识点，有些在官方手册里已经讲的很详细了，这里就简单带过，主要对cli产生的以及自行添加的一些项目目录进行一下解释，希望对正在学习Vue的同学提供一点帮助，如果本文有谬误之处还请各位指出，谢谢各位支持。</p>","more":"<h3 id=\"搭建项目\"><a href=\"#搭建项目\" class=\"headerlink\" title=\"搭建项目\"></a>搭建项目</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --global vue-cli</span><br><span class=\"line\">vue init webpack my-project</span><br><span class=\"line\">cd my-project</span><br><span class=\"line\">npm install（推荐用cnpm install）</span><br><span class=\"line\">如果没有cnpm ，先安装cnpm镜像</span><br><span class=\"line\">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"目录讲解\"><a href=\"#目录讲解\" class=\"headerlink\" title=\"目录讲解\"></a>目录讲解</h3><blockquote>\n<ul>\n<li>build和config ：项目开发和打包时候的相关配置；</li>\n<li>node_modules ：项目所需要的依赖文件；</li>\n<li>src ：主应用/页面相关文件；<ul>\n<li>assets ： 静态资源文件；</li>\n<li>components ：组件；</li>\n<li>res：资源<ul>\n<li>css： 公共css或是css预处理文件；</li>\n<li>js：   公共js文件</li>\n<li>img：公共图片</li>\n</ul>\n</li>\n<li>router ：路由配置文件；</li>\n<li>views ： 视图文件，其实也是vue组件。按照业务功能划分模块；</li>\n<li>vuex : 状态管理的配置文件；</li>\n<li>App.vue : 主组件；</li>\n<li>main.js： 入口文件，初始化vue实例并使用需要的插件</li>\n</ul>\n</li>\n<li>index.html ： 主html页面；</li>\n<li>dist：webpack打包生成的文件；</li>\n<li>package.json：记录依赖相关信息</li>\n</ul>\n</blockquote>\n<h3 id=\"文件的加载顺序\"><a href=\"#文件的加载顺序\" class=\"headerlink\" title=\"文件的加载顺序:\"></a>文件的加载顺序:</h3><p>当我们执行命令 <code>npm run dev</code>的时候根据配置文件<code>dev-server.js</code>里的相关配置去加载<code>webpack</code>的相关配置文件 在<code>webpack.base.conf</code>里面<code>entry</code>入口文件就配置了<code>app：&#39;./src/main.js&#39;</code> </p>\n<p>所以当我们在运行<code>npm run dev</code>的时候就开始通过<code>main.js</code>执行了。<code>main.js</code> 初始化vue实例并且加载相关配置插件，然后通过<code>app.vue</code>文件去访问各个组件</p>\n<h3 id=\"Build-dev-server-js主要完成以下几件事情：\"><a href=\"#Build-dev-server-js主要完成以下几件事情：\" class=\"headerlink\" title=\"Build/dev-server.js主要完成以下几件事情：\"></a>Build/dev-server.js主要完成以下几件事情：</h3><ol>\n<li>检查node和npm的版本；</li>\n<li>引入相关插件和配置；</li>\n<li>创建express服务器和webpack编译器；</li>\n<li>配置开发中间件（webpack-dev-middleware）和热重载中间件（webpack-hot-middleware）；</li>\n<li>挂载代理服务和中间件；</li>\n<li>配置静态资源；</li>\n<li>启动服务器监听特定端口（8080）；</li>\n<li>自动打开浏览器并打开特定网址（localhost:8080）；</li>\n</ol>\n<h3 id=\"Build-huild-js主要完成以下几件事情：\"><a href=\"#Build-huild-js主要完成以下几件事情：\" class=\"headerlink\" title=\"Build/huild.js主要完成以下几件事情：\"></a>Build/huild.js主要完成以下几件事情：</h3><ol>\n<li>loading动画；</li>\n<li>删除创建目标文件夹；</li>\n<li>webpack编译；</li>\n<li>输出信息</li>\n</ol>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><h4 id=\"babelrc\"><a href=\"#babelrc\" class=\"headerlink\" title=\".babelrc\"></a>.babelrc</h4><p>设置转码的规则和插件（使用es6语法必须安装插件）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-preset-es2015</span><br></pre></td></tr></table></figure>\n\n<p>presets 字段是用来设定转码规则;</p>\n<h4 id=\"editorconfig\"><a href=\"#editorconfig\" class=\"headerlink\" title=\".editorconfig\"></a>.editorconfig</h4><p>配置文件编码格式的文件</p>\n<ul>\n<li>indent_style:  设置缩进风格，tab或者空格;</li>\n<li>indent_size:  缩进的宽度;</li>\n<li>tab_width:   设置tab的列数。默认是indent_size;</li>\n<li>end_of_line： 换行符，lf、cr和crlf;</li>\n<li>charset：  编码;</li>\n<li>trim_trailing_whitespace： 设为true表示会除去换行行首的任意空白字符;</li>\n<li>insert_final_newline:   设为true表明使文件以一个空白行结尾;</li>\n<li>root: 表明是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件;</li>\n</ul>\n<h4 id=\"eslintignore\"><a href=\"#eslintignore\" class=\"headerlink\" title=\".eslintignore\"></a>.eslintignore</h4><p>忽略不符合eslint规范的文件, （一般会忽略掉第三方引用的插件）</p>\n<h4 id=\"eslintrc-js\"><a href=\"#eslintrc-js\" class=\"headerlink\" title=\".eslintrc.js\"></a>.eslintrc.js</h4><p>定义代码规则</p>\n<h4 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\".gitignore\"></a>.gitignore</h4><p>配置文件，用于配置不需要加入版本管理的文件</p>\n<h3 id=\"VUE-文件解释\"><a href=\"#VUE-文件解释\" class=\"headerlink\" title=\".VUE 文件解释\"></a>.VUE 文件解释</h3><ul>\n<li>template： 展示模板</li>\n<li>import ： 导入组件已经js文件</li>\n<li>export default： <ul>\n<li>data：数据源；</li>\n<li>methods：方法；                </li>\n<li>mounted：页面加载之后执行的方法；    </li>\n<li>created：页面生成时加载的方法；</li>\n</ul>\n</li>\n<li>style：  样式代码  其中scoped表示样式作用范围为本vue文件</li>\n</ul>\n<h3 id=\"网络访问\"><a href=\"#网络访问\" class=\"headerlink\" title=\"网络访问\"></a>网络访问</h3><h4 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h4><ol>\n<li>发送请求：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios#request(config)；</span><br><span class=\"line\">axios#get(url[, config])；</span><br><span class=\"line\">axios#delete(url[, config])；</span><br><span class=\"line\">axios#head(url[, config])；</span><br><span class=\"line\">axios#post(url[, data[, config]])；</span><br><span class=\"line\">axios#put(url[, data[, config]])；</span><br><span class=\"line\">axios#patch(url[, data[, config]])；</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>处理响应：</li>\n</ol>\n<ul>\n<li>Promise语法；</li>\n<li>处理结果：then；</li>\n<li>处理异常：catch；</li>\n</ul>\n<ol start=\"3\">\n<li>拦截器（use/reject）：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.interceptors.response.use；</span><br><span class=\"line\">axios.interceptors.rquest.use；</span><br><span class=\"line\">reject(移除请求拦截)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>参数：</li>\n</ol>\n<ul>\n<li>json（默认）；</li>\n<li>qs；</li>\n</ul>\n<h3 id=\"组件通信\"><a href=\"#组件通信\" class=\"headerlink\" title=\"组件通信\"></a>组件通信</h3><ul>\n<li>Prpos：父组件对子组件；</li>\n<li>自定义事件：子组件对父组件；</li>\n<li>消息总线：任意两个组件；</li>\n<li>状态管理：Vuex（适用于大型单页面开发）</li>\n</ul>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><ol>\n<li>配置</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.use(Router)</span><br><span class=\"line\"></span><br><span class=\"line\">export default new Router(&#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: &#39;&#x2F;&#39;,</span><br><span class=\"line\">      name: &#39;Hello&#39;,</span><br><span class=\"line\">      component: Hello</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  template: &#39;&lt;App&#x2F;&gt;&#39;,</span><br><span class=\"line\">  components: &#123; App &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>导航</li>\n</ol>\n<ul>\n<li>push</li>\n<li>replace</li>\n<li>go</li>\n</ul>\n<ol start=\"3\">\n<li>参数传递</li>\n</ol>\n<ul>\n<li>RESTful url参数</li>\n<li>参数查询 query</li>\n<li>锚点  hash: ‘#data’</li>\n</ul>\n<ol start=\"4\">\n<li>嵌套路由</li>\n</ol>\n<ul>\n<li>Children</li>\n</ul>\n<ol start=\"5\">\n<li>钩子</li>\n</ol>\n<ul>\n<li>beforeRouteEnter</li>\n<li>beforeRouteLeave</li>\n</ul>\n<h3 id=\"状态管理\"><a href=\"#状态管理\" class=\"headerlink\" title=\"状态管理\"></a>状态管理</h3><blockquote>\n<p>Vuex是什么？</p>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n</blockquote>\n<ul>\n<li>state里面就是存放的我们所要用到的状态；</li>\n<li>mutations就是存放如何更改状态的方法 ，同步操作；</li>\n<li>getters就是从state中派生出状态，比如将state中的某个状态进行过滤然后获取新的状态。</li>\n<li>actions就是mutation的加强版，它可以通过commit</li>\n<li>mutations中的方法来改变状态，最重要的是它可以进行异步操作。 </li>\n<li>modules顾名思义，就是当用这个容器来装这些状态还是显得混乱的时候，我们就可以把容器分成几块，把状态和管理规则分类来装。这和我们创建js模块是一个目的，让代码结构更清晰。</li>\n</ul>"},{"title":"给博客添加基于github-issue的评论系统","date":"2017-10-12T02:50:21.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n上篇文章介绍了[如何利用github+hexo+next制作一个博客系统](https://lixuguang.github.io/2017/10/11/use-GitHub-Hexo-Next-make-blog/)，但是由于这个博客系统是基于静态页面的，所以无法完成评论功能，博客怎么可以没有评论功能呢，当然next主题提供了几个选项，但是国内你知道的，提供的几个评论功能都不是太好用，于是就上网找了好多资料，功夫不负有心人，让我找到了一个名曰gitment的基于github-issue的评论插件，下面就介绍大家如何使用这个插件。\n<!-- more -->\n## 第一步 注册一个小程序（OAuth Application）\n点击[https://github.com/settings/applications/new](https://github.com/settings/applications/new)注册\n- Application name 应用名称 这里随便写，我写的就是gitment\n- Homepage URL 主页地址，你可以写你的博客地址，我写的是https://lixuguang.github.io/\n- Application description 应用描述，这里随便写点什么，反正是自己用。\n- Authorization callback URL 这个比较重要，请填写你的博客地址，我的是https://lixuguang.github.io/\n\n点击确定以后你会获得两个关键信息，下一步配置时会用到\n- Client ID\n- Client Secret\n\n## 第二步 修改主题配置文件，添加gitment评论功能\n因为用的是next主题，所以配置文件地址如下：\n**themes/next/_config.yml**\n\n### 1、在其中添加:\n\n\n```\n# Gitment\n# Introduction: https://imsun.net/posts/gitment-introduction/\ngitment:\n  enable: true\n  githubID: yourid // 我的是lixuguang\n  repo: yourrepo // 我的是lixuguang.github.io 必须跟githubID保持一致的用户名\n  ClientID: yourid // 上面开通程序获得的ClientID\n  ClientSecret: yoursecret // 上面开通程序获得的Client Secret\n  lazy: false //是否需要点击展开评论才能可见评论，一般设置为false\n```\n**一定要注意空格，不然会报错的，别问我咋知道的**\n\n### 2、然后在主题的配置语言环境的文件添加一句话\n`en.yml`增加:\n\n```\ngitmentbutton: Show comments from Gitment\n```\n\n`zh-Hans.yml`增加:\n\n\n```\ngitmentbutton: 显示 Gitment 评论\n```\n如果是中文网站英文配置也可以不用写。\n### 3、添加新的Dom结构\n**修改主题layout/_partials/comments.swig**\n在最后一个elseif分支后添加一个elseif分支：\n\n```\n{% elseif theme.gitment.enable %}\n       {% if theme.gitment.lazy %}\n         <div onclick=\"ShowGitment()\" id=\"gitment-display-button\">{{  __('gitmentbutton') }}</div>\n         <div id=\"gitment-container\" style=\"display:none\"></div>\n       {% else %}\n         <div id=\"gitment-container\"></div>\n       {% endif %}\n```\n### 4、 在主题下layout/_third-party/comments/目录下中添加文件gitment.swig\n\n\n```\n{% if theme.gitment.enable %}\n   {% set owner = theme.gitment.githubID %}\n   {% set repo = theme.gitment.repo %}\n   {% set cid = theme.gitment.ClientID %}\n   {% set cs = theme.gitment.ClientSecret %}\n   <link rel=\"stylesheet\" href=\"https://imsun.github.io/gitment/style/default.css\">\n   <script src=\"https://imsun.github.io/gitment/dist/gitment.browser.js\"></script>\n   {% if not theme.gitment.lazy %}\n       <script type=\"text/javascript\">\n           var gitment = new Gitment({\n               id: window.location.pathname, \n               owner: '{{owner}}',\n               repo: '{{repo}}',\n               oauth: {\n                   client_id: '{{cid}}',\n                   client_secret: '{{cs}}',\n               }});\n           gitment.render('gitment-container');\n       </script>\n   {% else %}\n       <script type=\"text/javascript\">\n           function ShowGitment(){\n               document.getElementById(\"gitment-display-button\").style.display = \"none\";\n               document.getElementById(\"gitment-container\").style.display = \"block\";\n               var gitment = new Gitment({\n                   id: document.location.href, \n                   owner: '{{owner}}',\n                   repo: '{{repo}}',\n                   oauth: {\n                       client_id: '{{cid}}',\n                       client_secret: '{{cs}}',\n                   }});\n               gitment.render('gitment-container');\n           }\n       </script>\n   {% endif %}\n{% endif %}\n```\n然后在主题下layout/_third-party/comments/index.swig文件中引入gitment.swig文件：\n\n```\n{% include 'gitment.swig' %}\n```\n### 在主题下source/css/_common/components/third-party/目录下添加gitment.styl文件\n此配置文件为gitment的样式文件，需要修改样式可以在这里进行书写，这里修改一下按钮样式，另外将聊天框于文章框样式统一\n\n```\n#gitment-display-button{\n     display: inline-block;\n     padding: 0 15px;\n     color: #0a9caf;\n     cursor: pointer;\n     font-size: 14px;\n     border: 1px solid #0a9caf;\n     border-radius: 4px;\n }\n #gitment-display-button:hover{\n     color: #fff;\n     background: #0a9caf;\n }\n  #comments {\n    margin: 0;\n    padding: 40px;\n    background: #fff;\n    box-shadow: 0 2px 2px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n}\n```\n然后在主题下source/css/_common/components/third-party/third-party.styl文件中引入相应的CSS样式即可:\n\n```\n@import \"gitment\";\n```\n经过以上操作，gitment就被引入到你的博客里了。\n\n现在就可以让大家对你写的文章进行评论啦，怎么样是不是又学到啦，喜欢我的文章就请关注我的github吧。","source":"_posts/us-gitment.md","raw":"---\ntitle: 给博客添加基于github-issue的评论系统\ndate: 2017-10-12 10:50:21\ncategories: \n\t- 前端技术\ntags: \n\t- blog\n    - hexo \n    - next \n    - npm \n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n上篇文章介绍了[如何利用github+hexo+next制作一个博客系统](https://lixuguang.github.io/2017/10/11/use-GitHub-Hexo-Next-make-blog/)，但是由于这个博客系统是基于静态页面的，所以无法完成评论功能，博客怎么可以没有评论功能呢，当然next主题提供了几个选项，但是国内你知道的，提供的几个评论功能都不是太好用，于是就上网找了好多资料，功夫不负有心人，让我找到了一个名曰gitment的基于github-issue的评论插件，下面就介绍大家如何使用这个插件。\n<!-- more -->\n## 第一步 注册一个小程序（OAuth Application）\n点击[https://github.com/settings/applications/new](https://github.com/settings/applications/new)注册\n- Application name 应用名称 这里随便写，我写的就是gitment\n- Homepage URL 主页地址，你可以写你的博客地址，我写的是https://lixuguang.github.io/\n- Application description 应用描述，这里随便写点什么，反正是自己用。\n- Authorization callback URL 这个比较重要，请填写你的博客地址，我的是https://lixuguang.github.io/\n\n点击确定以后你会获得两个关键信息，下一步配置时会用到\n- Client ID\n- Client Secret\n\n## 第二步 修改主题配置文件，添加gitment评论功能\n因为用的是next主题，所以配置文件地址如下：\n**themes/next/_config.yml**\n\n### 1、在其中添加:\n\n\n```\n# Gitment\n# Introduction: https://imsun.net/posts/gitment-introduction/\ngitment:\n  enable: true\n  githubID: yourid // 我的是lixuguang\n  repo: yourrepo // 我的是lixuguang.github.io 必须跟githubID保持一致的用户名\n  ClientID: yourid // 上面开通程序获得的ClientID\n  ClientSecret: yoursecret // 上面开通程序获得的Client Secret\n  lazy: false //是否需要点击展开评论才能可见评论，一般设置为false\n```\n**一定要注意空格，不然会报错的，别问我咋知道的**\n\n### 2、然后在主题的配置语言环境的文件添加一句话\n`en.yml`增加:\n\n```\ngitmentbutton: Show comments from Gitment\n```\n\n`zh-Hans.yml`增加:\n\n\n```\ngitmentbutton: 显示 Gitment 评论\n```\n如果是中文网站英文配置也可以不用写。\n### 3、添加新的Dom结构\n**修改主题layout/_partials/comments.swig**\n在最后一个elseif分支后添加一个elseif分支：\n\n```\n{% elseif theme.gitment.enable %}\n       {% if theme.gitment.lazy %}\n         <div onclick=\"ShowGitment()\" id=\"gitment-display-button\">{{  __('gitmentbutton') }}</div>\n         <div id=\"gitment-container\" style=\"display:none\"></div>\n       {% else %}\n         <div id=\"gitment-container\"></div>\n       {% endif %}\n```\n### 4、 在主题下layout/_third-party/comments/目录下中添加文件gitment.swig\n\n\n```\n{% if theme.gitment.enable %}\n   {% set owner = theme.gitment.githubID %}\n   {% set repo = theme.gitment.repo %}\n   {% set cid = theme.gitment.ClientID %}\n   {% set cs = theme.gitment.ClientSecret %}\n   <link rel=\"stylesheet\" href=\"https://imsun.github.io/gitment/style/default.css\">\n   <script src=\"https://imsun.github.io/gitment/dist/gitment.browser.js\"></script>\n   {% if not theme.gitment.lazy %}\n       <script type=\"text/javascript\">\n           var gitment = new Gitment({\n               id: window.location.pathname, \n               owner: '{{owner}}',\n               repo: '{{repo}}',\n               oauth: {\n                   client_id: '{{cid}}',\n                   client_secret: '{{cs}}',\n               }});\n           gitment.render('gitment-container');\n       </script>\n   {% else %}\n       <script type=\"text/javascript\">\n           function ShowGitment(){\n               document.getElementById(\"gitment-display-button\").style.display = \"none\";\n               document.getElementById(\"gitment-container\").style.display = \"block\";\n               var gitment = new Gitment({\n                   id: document.location.href, \n                   owner: '{{owner}}',\n                   repo: '{{repo}}',\n                   oauth: {\n                       client_id: '{{cid}}',\n                       client_secret: '{{cs}}',\n                   }});\n               gitment.render('gitment-container');\n           }\n       </script>\n   {% endif %}\n{% endif %}\n```\n然后在主题下layout/_third-party/comments/index.swig文件中引入gitment.swig文件：\n\n```\n{% include 'gitment.swig' %}\n```\n### 在主题下source/css/_common/components/third-party/目录下添加gitment.styl文件\n此配置文件为gitment的样式文件，需要修改样式可以在这里进行书写，这里修改一下按钮样式，另外将聊天框于文章框样式统一\n\n```\n#gitment-display-button{\n     display: inline-block;\n     padding: 0 15px;\n     color: #0a9caf;\n     cursor: pointer;\n     font-size: 14px;\n     border: 1px solid #0a9caf;\n     border-radius: 4px;\n }\n #gitment-display-button:hover{\n     color: #fff;\n     background: #0a9caf;\n }\n  #comments {\n    margin: 0;\n    padding: 40px;\n    background: #fff;\n    box-shadow: 0 2px 2px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n}\n```\n然后在主题下source/css/_common/components/third-party/third-party.styl文件中引入相应的CSS样式即可:\n\n```\n@import \"gitment\";\n```\n经过以上操作，gitment就被引入到你的博客里了。\n\n现在就可以让大家对你写的文章进行评论啦，怎么样是不是又学到啦，喜欢我的文章就请关注我的github吧。","slug":"us-gitment","published":1,"updated":"2019-12-20T02:50:12.395Z","_id":"ck4ilitrv00041ka6a7a60fgq","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>上篇文章介绍了<a href=\"https://lixuguang.github.io/2017/10/11/use-GitHub-Hexo-Next-make-blog/\">如何利用github+hexo+next制作一个博客系统</a>，但是由于这个博客系统是基于静态页面的，所以无法完成评论功能，博客怎么可以没有评论功能呢，当然next主题提供了几个选项，但是国内你知道的，提供的几个评论功能都不是太好用，于是就上网找了好多资料，功夫不负有心人，让我找到了一个名曰gitment的基于github-issue的评论插件，下面就介绍大家如何使用这个插件。</p>\n<a id=\"more\"></a>\n<h2 id=\"第一步-注册一个小程序（OAuth-Application）\"><a href=\"#第一步-注册一个小程序（OAuth-Application）\" class=\"headerlink\" title=\"第一步 注册一个小程序（OAuth Application）\"></a>第一步 注册一个小程序（OAuth Application）</h2><p>点击<a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/applications/new</a>注册</p>\n<ul>\n<li>Application name 应用名称 这里随便写，我写的就是gitment</li>\n<li>Homepage URL 主页地址，你可以写你的博客地址，我写的是<a href=\"https://lixuguang.github.io/\">https://lixuguang.github.io/</a></li>\n<li>Application description 应用描述，这里随便写点什么，反正是自己用。</li>\n<li>Authorization callback URL 这个比较重要，请填写你的博客地址，我的是<a href=\"https://lixuguang.github.io/\">https://lixuguang.github.io/</a></li>\n</ul>\n<p>点击确定以后你会获得两个关键信息，下一步配置时会用到</p>\n<ul>\n<li>Client ID</li>\n<li>Client Secret</li>\n</ul>\n<h2 id=\"第二步-修改主题配置文件，添加gitment评论功能\"><a href=\"#第二步-修改主题配置文件，添加gitment评论功能\" class=\"headerlink\" title=\"第二步 修改主题配置文件，添加gitment评论功能\"></a>第二步 修改主题配置文件，添加gitment评论功能</h2><p>因为用的是next主题，所以配置文件地址如下：<br><strong>themes/next/_config.yml</strong></p>\n<h3 id=\"1、在其中添加\"><a href=\"#1、在其中添加\" class=\"headerlink\" title=\"1、在其中添加:\"></a>1、在其中添加:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Gitment</span><br><span class=\"line\"># Introduction: https:&#x2F;&#x2F;imsun.net&#x2F;posts&#x2F;gitment-introduction&#x2F;</span><br><span class=\"line\">gitment:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  githubID: yourid &#x2F;&#x2F; 我的是lixuguang</span><br><span class=\"line\">  repo: yourrepo &#x2F;&#x2F; 我的是lixuguang.github.io 必须跟githubID保持一致的用户名</span><br><span class=\"line\">  ClientID: yourid &#x2F;&#x2F; 上面开通程序获得的ClientID</span><br><span class=\"line\">  ClientSecret: yoursecret &#x2F;&#x2F; 上面开通程序获得的Client Secret</span><br><span class=\"line\">  lazy: false &#x2F;&#x2F;是否需要点击展开评论才能可见评论，一般设置为false</span><br></pre></td></tr></table></figure>\n<p><strong>一定要注意空格，不然会报错的，别问我咋知道的</strong></p>\n<h3 id=\"2、然后在主题的配置语言环境的文件添加一句话\"><a href=\"#2、然后在主题的配置语言环境的文件添加一句话\" class=\"headerlink\" title=\"2、然后在主题的配置语言环境的文件添加一句话\"></a>2、然后在主题的配置语言环境的文件添加一句话</h3><p><code>en.yml</code>增加:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitmentbutton: Show comments from Gitment</span><br></pre></td></tr></table></figure>\n\n<p><code>zh-Hans.yml</code>增加:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitmentbutton: 显示 Gitment 评论</span><br></pre></td></tr></table></figure>\n<p>如果是中文网站英文配置也可以不用写。</p>\n<h3 id=\"3、添加新的Dom结构\"><a href=\"#3、添加新的Dom结构\" class=\"headerlink\" title=\"3、添加新的Dom结构\"></a>3、添加新的Dom结构</h3><p><strong>修改主题layout/_partials/comments.swig</strong><br>在最后一个elseif分支后添加一个elseif分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% elseif theme.gitment.enable %&#125;</span><br><span class=\"line\">       &#123;% if theme.gitment.lazy %&#125;</span><br><span class=\"line\">         &lt;div onclick&#x3D;&quot;ShowGitment()&quot; id&#x3D;&quot;gitment-display-button&quot;&gt;&#123;&#123;  __(&#39;gitmentbutton&#39;) &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\">         &lt;div id&#x3D;&quot;gitment-container&quot; style&#x3D;&quot;display:none&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">       &#123;% else %&#125;</span><br><span class=\"line\">         &lt;div id&#x3D;&quot;gitment-container&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">       &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、-在主题下layout-third-party-comments-目录下中添加文件gitment-swig\"><a href=\"#4、-在主题下layout-third-party-comments-目录下中添加文件gitment-swig\" class=\"headerlink\" title=\"4、 在主题下layout/_third-party/comments/目录下中添加文件gitment.swig\"></a>4、 在主题下layout/_third-party/comments/目录下中添加文件gitment.swig</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if theme.gitment.enable %&#125;</span><br><span class=\"line\">   &#123;% set owner &#x3D; theme.gitment.githubID %&#125;</span><br><span class=\"line\">   &#123;% set repo &#x3D; theme.gitment.repo %&#125;</span><br><span class=\"line\">   &#123;% set cid &#x3D; theme.gitment.ClientID %&#125;</span><br><span class=\"line\">   &#123;% set cs &#x3D; theme.gitment.ClientSecret %&#125;</span><br><span class=\"line\">   &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;imsun.github.io&#x2F;gitment&#x2F;style&#x2F;default.css&quot;&gt;</span><br><span class=\"line\">   &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;imsun.github.io&#x2F;gitment&#x2F;dist&#x2F;gitment.browser.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">   &#123;% if not theme.gitment.lazy %&#125;</span><br><span class=\"line\">       &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">           var gitment &#x3D; new Gitment(&#123;</span><br><span class=\"line\">               id: window.location.pathname, </span><br><span class=\"line\">               owner: &#39;&#123;&#123;owner&#125;&#125;&#39;,</span><br><span class=\"line\">               repo: &#39;&#123;&#123;repo&#125;&#125;&#39;,</span><br><span class=\"line\">               oauth: &#123;</span><br><span class=\"line\">                   client_id: &#39;&#123;&#123;cid&#125;&#125;&#39;,</span><br><span class=\"line\">                   client_secret: &#39;&#123;&#123;cs&#125;&#125;&#39;,</span><br><span class=\"line\">               &#125;&#125;);</span><br><span class=\"line\">           gitment.render(&#39;gitment-container&#39;);</span><br><span class=\"line\">       &lt;&#x2F;script&gt;</span><br><span class=\"line\">   &#123;% else %&#125;</span><br><span class=\"line\">       &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">           function ShowGitment()&#123;</span><br><span class=\"line\">               document.getElementById(&quot;gitment-display-button&quot;).style.display &#x3D; &quot;none&quot;;</span><br><span class=\"line\">               document.getElementById(&quot;gitment-container&quot;).style.display &#x3D; &quot;block&quot;;</span><br><span class=\"line\">               var gitment &#x3D; new Gitment(&#123;</span><br><span class=\"line\">                   id: document.location.href, </span><br><span class=\"line\">                   owner: &#39;&#123;&#123;owner&#125;&#125;&#39;,</span><br><span class=\"line\">                   repo: &#39;&#123;&#123;repo&#125;&#125;&#39;,</span><br><span class=\"line\">                   oauth: &#123;</span><br><span class=\"line\">                       client_id: &#39;&#123;&#123;cid&#125;&#125;&#39;,</span><br><span class=\"line\">                       client_secret: &#39;&#123;&#123;cs&#125;&#125;&#39;,</span><br><span class=\"line\">                   &#125;&#125;);</span><br><span class=\"line\">               gitment.render(&#39;gitment-container&#39;);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &lt;&#x2F;script&gt;</span><br><span class=\"line\">   &#123;% endif %&#125;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在主题下layout/_third-party/comments/index.swig文件中引入gitment.swig文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include &#39;gitment.swig&#39; %&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在主题下source-css-common-components-third-party-目录下添加gitment-styl文件\"><a href=\"#在主题下source-css-common-components-third-party-目录下添加gitment-styl文件\" class=\"headerlink\" title=\"在主题下source/css/_common/components/third-party/目录下添加gitment.styl文件\"></a>在主题下source/css/_common/components/third-party/目录下添加gitment.styl文件</h3><p>此配置文件为gitment的样式文件，需要修改样式可以在这里进行书写，这里修改一下按钮样式，另外将聊天框于文章框样式统一</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#gitment-display-button&#123;</span><br><span class=\"line\">     display: inline-block;</span><br><span class=\"line\">     padding: 0 15px;</span><br><span class=\"line\">     color: #0a9caf;</span><br><span class=\"line\">     cursor: pointer;</span><br><span class=\"line\">     font-size: 14px;</span><br><span class=\"line\">     border: 1px solid #0a9caf;</span><br><span class=\"line\">     border-radius: 4px;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> #gitment-display-button:hover&#123;</span><br><span class=\"line\">     color: #fff;</span><br><span class=\"line\">     background: #0a9caf;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">  #comments &#123;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">    padding: 40px;</span><br><span class=\"line\">    background: #fff;</span><br><span class=\"line\">    box-shadow: 0 2px 2px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在主题下source/css/_common/components/third-party/third-party.styl文件中引入相应的CSS样式即可:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import &quot;gitment&quot;;</span><br></pre></td></tr></table></figure>\n<p>经过以上操作，gitment就被引入到你的博客里了。</p>\n<p>现在就可以让大家对你写的文章进行评论啦，怎么样是不是又学到啦，喜欢我的文章就请关注我的github吧。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>上篇文章介绍了<a href=\"https://lixuguang.github.io/2017/10/11/use-GitHub-Hexo-Next-make-blog/\">如何利用github+hexo+next制作一个博客系统</a>，但是由于这个博客系统是基于静态页面的，所以无法完成评论功能，博客怎么可以没有评论功能呢，当然next主题提供了几个选项，但是国内你知道的，提供的几个评论功能都不是太好用，于是就上网找了好多资料，功夫不负有心人，让我找到了一个名曰gitment的基于github-issue的评论插件，下面就介绍大家如何使用这个插件。</p>","more":"<h2 id=\"第一步-注册一个小程序（OAuth-Application）\"><a href=\"#第一步-注册一个小程序（OAuth-Application）\" class=\"headerlink\" title=\"第一步 注册一个小程序（OAuth Application）\"></a>第一步 注册一个小程序（OAuth Application）</h2><p>点击<a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/applications/new</a>注册</p>\n<ul>\n<li>Application name 应用名称 这里随便写，我写的就是gitment</li>\n<li>Homepage URL 主页地址，你可以写你的博客地址，我写的是<a href=\"https://lixuguang.github.io/\">https://lixuguang.github.io/</a></li>\n<li>Application description 应用描述，这里随便写点什么，反正是自己用。</li>\n<li>Authorization callback URL 这个比较重要，请填写你的博客地址，我的是<a href=\"https://lixuguang.github.io/\">https://lixuguang.github.io/</a></li>\n</ul>\n<p>点击确定以后你会获得两个关键信息，下一步配置时会用到</p>\n<ul>\n<li>Client ID</li>\n<li>Client Secret</li>\n</ul>\n<h2 id=\"第二步-修改主题配置文件，添加gitment评论功能\"><a href=\"#第二步-修改主题配置文件，添加gitment评论功能\" class=\"headerlink\" title=\"第二步 修改主题配置文件，添加gitment评论功能\"></a>第二步 修改主题配置文件，添加gitment评论功能</h2><p>因为用的是next主题，所以配置文件地址如下：<br><strong>themes/next/_config.yml</strong></p>\n<h3 id=\"1、在其中添加\"><a href=\"#1、在其中添加\" class=\"headerlink\" title=\"1、在其中添加:\"></a>1、在其中添加:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Gitment</span><br><span class=\"line\"># Introduction: https:&#x2F;&#x2F;imsun.net&#x2F;posts&#x2F;gitment-introduction&#x2F;</span><br><span class=\"line\">gitment:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  githubID: yourid &#x2F;&#x2F; 我的是lixuguang</span><br><span class=\"line\">  repo: yourrepo &#x2F;&#x2F; 我的是lixuguang.github.io 必须跟githubID保持一致的用户名</span><br><span class=\"line\">  ClientID: yourid &#x2F;&#x2F; 上面开通程序获得的ClientID</span><br><span class=\"line\">  ClientSecret: yoursecret &#x2F;&#x2F; 上面开通程序获得的Client Secret</span><br><span class=\"line\">  lazy: false &#x2F;&#x2F;是否需要点击展开评论才能可见评论，一般设置为false</span><br></pre></td></tr></table></figure>\n<p><strong>一定要注意空格，不然会报错的，别问我咋知道的</strong></p>\n<h3 id=\"2、然后在主题的配置语言环境的文件添加一句话\"><a href=\"#2、然后在主题的配置语言环境的文件添加一句话\" class=\"headerlink\" title=\"2、然后在主题的配置语言环境的文件添加一句话\"></a>2、然后在主题的配置语言环境的文件添加一句话</h3><p><code>en.yml</code>增加:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitmentbutton: Show comments from Gitment</span><br></pre></td></tr></table></figure>\n\n<p><code>zh-Hans.yml</code>增加:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitmentbutton: 显示 Gitment 评论</span><br></pre></td></tr></table></figure>\n<p>如果是中文网站英文配置也可以不用写。</p>\n<h3 id=\"3、添加新的Dom结构\"><a href=\"#3、添加新的Dom结构\" class=\"headerlink\" title=\"3、添加新的Dom结构\"></a>3、添加新的Dom结构</h3><p><strong>修改主题layout/_partials/comments.swig</strong><br>在最后一个elseif分支后添加一个elseif分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% elseif theme.gitment.enable %&#125;</span><br><span class=\"line\">       &#123;% if theme.gitment.lazy %&#125;</span><br><span class=\"line\">         &lt;div onclick&#x3D;&quot;ShowGitment()&quot; id&#x3D;&quot;gitment-display-button&quot;&gt;&#123;&#123;  __(&#39;gitmentbutton&#39;) &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\">         &lt;div id&#x3D;&quot;gitment-container&quot; style&#x3D;&quot;display:none&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">       &#123;% else %&#125;</span><br><span class=\"line\">         &lt;div id&#x3D;&quot;gitment-container&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">       &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、-在主题下layout-third-party-comments-目录下中添加文件gitment-swig\"><a href=\"#4、-在主题下layout-third-party-comments-目录下中添加文件gitment-swig\" class=\"headerlink\" title=\"4、 在主题下layout/_third-party/comments/目录下中添加文件gitment.swig\"></a>4、 在主题下layout/_third-party/comments/目录下中添加文件gitment.swig</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if theme.gitment.enable %&#125;</span><br><span class=\"line\">   &#123;% set owner &#x3D; theme.gitment.githubID %&#125;</span><br><span class=\"line\">   &#123;% set repo &#x3D; theme.gitment.repo %&#125;</span><br><span class=\"line\">   &#123;% set cid &#x3D; theme.gitment.ClientID %&#125;</span><br><span class=\"line\">   &#123;% set cs &#x3D; theme.gitment.ClientSecret %&#125;</span><br><span class=\"line\">   &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;imsun.github.io&#x2F;gitment&#x2F;style&#x2F;default.css&quot;&gt;</span><br><span class=\"line\">   &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;imsun.github.io&#x2F;gitment&#x2F;dist&#x2F;gitment.browser.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">   &#123;% if not theme.gitment.lazy %&#125;</span><br><span class=\"line\">       &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">           var gitment &#x3D; new Gitment(&#123;</span><br><span class=\"line\">               id: window.location.pathname, </span><br><span class=\"line\">               owner: &#39;&#123;&#123;owner&#125;&#125;&#39;,</span><br><span class=\"line\">               repo: &#39;&#123;&#123;repo&#125;&#125;&#39;,</span><br><span class=\"line\">               oauth: &#123;</span><br><span class=\"line\">                   client_id: &#39;&#123;&#123;cid&#125;&#125;&#39;,</span><br><span class=\"line\">                   client_secret: &#39;&#123;&#123;cs&#125;&#125;&#39;,</span><br><span class=\"line\">               &#125;&#125;);</span><br><span class=\"line\">           gitment.render(&#39;gitment-container&#39;);</span><br><span class=\"line\">       &lt;&#x2F;script&gt;</span><br><span class=\"line\">   &#123;% else %&#125;</span><br><span class=\"line\">       &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">           function ShowGitment()&#123;</span><br><span class=\"line\">               document.getElementById(&quot;gitment-display-button&quot;).style.display &#x3D; &quot;none&quot;;</span><br><span class=\"line\">               document.getElementById(&quot;gitment-container&quot;).style.display &#x3D; &quot;block&quot;;</span><br><span class=\"line\">               var gitment &#x3D; new Gitment(&#123;</span><br><span class=\"line\">                   id: document.location.href, </span><br><span class=\"line\">                   owner: &#39;&#123;&#123;owner&#125;&#125;&#39;,</span><br><span class=\"line\">                   repo: &#39;&#123;&#123;repo&#125;&#125;&#39;,</span><br><span class=\"line\">                   oauth: &#123;</span><br><span class=\"line\">                       client_id: &#39;&#123;&#123;cid&#125;&#125;&#39;,</span><br><span class=\"line\">                       client_secret: &#39;&#123;&#123;cs&#125;&#125;&#39;,</span><br><span class=\"line\">                   &#125;&#125;);</span><br><span class=\"line\">               gitment.render(&#39;gitment-container&#39;);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &lt;&#x2F;script&gt;</span><br><span class=\"line\">   &#123;% endif %&#125;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在主题下layout/_third-party/comments/index.swig文件中引入gitment.swig文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include &#39;gitment.swig&#39; %&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在主题下source-css-common-components-third-party-目录下添加gitment-styl文件\"><a href=\"#在主题下source-css-common-components-third-party-目录下添加gitment-styl文件\" class=\"headerlink\" title=\"在主题下source/css/_common/components/third-party/目录下添加gitment.styl文件\"></a>在主题下source/css/_common/components/third-party/目录下添加gitment.styl文件</h3><p>此配置文件为gitment的样式文件，需要修改样式可以在这里进行书写，这里修改一下按钮样式，另外将聊天框于文章框样式统一</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#gitment-display-button&#123;</span><br><span class=\"line\">     display: inline-block;</span><br><span class=\"line\">     padding: 0 15px;</span><br><span class=\"line\">     color: #0a9caf;</span><br><span class=\"line\">     cursor: pointer;</span><br><span class=\"line\">     font-size: 14px;</span><br><span class=\"line\">     border: 1px solid #0a9caf;</span><br><span class=\"line\">     border-radius: 4px;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> #gitment-display-button:hover&#123;</span><br><span class=\"line\">     color: #fff;</span><br><span class=\"line\">     background: #0a9caf;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">  #comments &#123;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">    padding: 40px;</span><br><span class=\"line\">    background: #fff;</span><br><span class=\"line\">    box-shadow: 0 2px 2px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在主题下source/css/_common/components/third-party/third-party.styl文件中引入相应的CSS样式即可:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import &quot;gitment&quot;;</span><br></pre></td></tr></table></figure>\n<p>经过以上操作，gitment就被引入到你的博客里了。</p>\n<p>现在就可以让大家对你写的文章进行评论啦，怎么样是不是又学到啦，喜欢我的文章就请关注我的github吧。</p>"},{"title":"VSCode ESLint JS代码静态检测工具","date":"2017-10-12T06:42:52.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\nVSCode是新一代IDE，方便灵活的插件安装方式让它强大无比，对前端友好，让它成为了越来越多前端开发者的首选IDE，编辑器虽好，但是要自己安装符合自己需求的插件才行，下面介绍一款插件，名叫ESLint，是用来静态检测js代码的工具，让你的js代码在编辑过程中就能找到错误，提高代码质量，好了废话不多说下面介绍如何安装和配置这款插件。\n<!-- more -->\n# 安装ESLint插件\n打开VSCode编辑器，在左侧右下角有一个安装插件的图标，点击后就可以打开插件市场，输入ESLint，就会有个黄色的图标出现在你面前，不用犹豫双击它，稍等一会它就安装完了，是不是超简单。\n# 安装NPM依赖\nESLint插件运行需要一些依赖，对于用过npm包管理工具的人来讲小意思啦，我把代码放到下面，需要的直接粘贴运行就好。\n\n```\n//全局安装eslint\nnpm i eslint -g\n\n//如果用到html中的js校验\nnpm i eslint-plugin-html -g\n\n//如果用到es2015语法\nnpm i babel-eslint -g\n```\n# 配置eslint配置文件到项目根目录\n配置文件名称如下：\n**eslintrc.json**\n内容为：\n\n```\n{\n        \"plugins\": [\n                // \"react\",\n                \"html\"\n        ],\n        \"env\": {\n                \"node\": true,\n                \"jquery\": true,\n                \"es6\": true,\n                \"browser\": true\n        },\n        \"globals\": {\n                \"angular\": false\n        },\n        \"parser\": \"babel-eslint\",\n        \"rules\": {\n                //官方文档 http://eslint.org/docs/rules/\n                //参数：0 关闭，1 警告，2 错误\n                // \"quotes\": [0, \"single\"],                  //建议使用单引号\n                // \"no-inner-declarations\": [0, \"both\"],     //不建议在{}代码块内部声明变量或函数\n                \"no-extra-boolean-cast\": 1, //多余的感叹号转布尔型\n                \"no-extra-semi\": 1, //多余的分号\n                \"no-extra-parens\": 0, //多余的括号\n                \"no-empty\": 1, //空代码块\n \n                //使用前未定义\n                \"no-use-before-define\": [\n                        0,\n                        \"nofunc\"\n                ],\n \n                \"complexity\": [0, 10], //圈复杂度大于*\n \n                //定义数组或对象最后多余的逗号\n                \"comma-dangle\": [\n                        0,\n                        \"never\"\n                ],\n \n                // 不允许对全局变量赋值,如 window = 'abc'\n                \"no-global-assign\": [\"error\", {\n                        // 定义例外\n                        // \"exceptions\": [\"Object\"]\n                }],\n                \"no-var\": 0, //用let或const替代var\n                \"no-const-assign\": 2, //不允许const重新赋值\n                \"no-class-assign\": 2, //不允许对class重新赋值\n                \"no-debugger\": 1, //debugger 调试代码未删除\n                \"no-console\": 0, //console 未删除\n                \"no-constant-condition\": 2, //常量作为条件\n                \"no-dupe-args\": 2, //参数重复\n                \"no-dupe-keys\": 2, //对象属性重复\n                \"no-duplicate-case\": 2, //case重复\n                \"no-empty-character-class\": 2, //正则无法匹配任何值\n                \"no-invalid-regexp\": 2, //无效的正则\n                \"no-func-assign\": 2, //函数被赋值\n                \"valid-typeof\": 1, //无效的类型判断\n                \"no-unreachable\": 2, //不可能执行到的代码\n                \"no-unexpected-multiline\": 2, //行尾缺少分号可能导致一些意外情况\n                \"no-sparse-arrays\": 1, //数组中多出逗号\n                \"no-shadow-restricted-names\": 2, //关键词与命名冲突\n                \"no-undef\": 1, //变量未定义\n                \"no-unused-vars\": 1, //变量定义后未使用\n                \"no-cond-assign\": 2, //条件语句中禁止赋值操作\n                \"no-native-reassign\": 2, //禁止覆盖原生对象\n                \"no-mixed-spaces-and-tabs\": 0,\n \n \n \n                //代码风格优化 --------------------------------------\n                \"no-irregular-whitespace\": 0,\n                \"no-else-return\": 0, //在else代码块中return，else是多余的\n                \"no-multi-spaces\": 0, //不允许多个空格\n \n                //object直接量建议写法 : 后一个空格前面不留空格\n                \"key-spacing\": [\n                        0,\n                        {\n                                \"beforeColon\": false,\n                                \"afterColon\": true\n                        }\n                ],\n \n                \"block-scoped-var\": 1, //变量应在外部上下文中声明，不应在{}代码块中\n                \"consistent-return\": 1, //函数返回值可能是不同类型\n                \"accessor-pairs\": 1, //object getter/setter方法需要成对出现\n \n                //换行调用对象方法  点操作符应写在行首\n                \"dot-location\": [\n                        1,\n                        \"property\"\n                ],\n                \"no-lone-blocks\": 1, //多余的{}嵌套\n                \"no-labels\": 1, //无用的标记\n                \"no-extend-native\": 1, //禁止扩展原生对象\n                \"no-floating-decimal\": 1, //浮点型需要写全 禁止.1 或 2.写法\n                \"no-loop-func\": 1, //禁止在循环体中定义函数\n                \"no-new-func\": 1, //禁止new Function(...) 写法\n                \"no-self-compare\": 1, //不允与自己比较作为条件\n                \"no-sequences\": 1, //禁止可能导致结果不明确的逗号操作符\n                \"no-throw-literal\": 1, //禁止抛出一个直接量 应是Error对象\n \n                //不允return时有赋值操作\n                \"no-return-assign\": [\n                        1,\n                        \"always\"\n                ],\n \n                //不允许重复声明\n                \"no-redeclare\": [\n                        1,\n                        {\n                                \"builtinGlobals\": true\n                        }\n                ],\n \n                //不执行的表达式\n                \"no-unused-expressions\": [\n                        0,\n                        {\n                                \"allowShortCircuit\": true,\n                                \"allowTernary\": true\n                        }\n                ],\n                \"no-useless-call\": 1, //无意义的函数call或apply\n                \"no-useless-concat\": 1, //无意义的string concat\n                \"no-void\": 1, //禁用void\n                \"no-with\": 1, //禁用with\n                \"space-infix-ops\": 0, //操作符前后空格\n \n                //jsdoc\n                \"valid-jsdoc\": [\n                        0,\n                        {\n                                \"requireParamDescription\": true,\n                                \"requireReturnDescription\": true\n                        }\n                ],\n \n                //标记未写注释\n                \"no-warning-comments\": [\n                        1,\n                        {\n                                \"terms\": [\n                                        \"todo\",\n                                        \"fixme\",\n                                        \"any other term\"\n                                ],\n                                \"location\": \"anywhere\"\n                        }\n                ],\n                \"curly\": 0 //if、else、while、for代码块用{}包围\n        }\n}\n```\neslint就是根据这个配置表来进行js语法校验的。\n# 最后重启VSCode完成插件安装\n重启后控制台显示ESLint server is running说明插件已经生效，好啦接下来就愉快的写代码吧。","source":"_posts/VSCode-ESLint.md","raw":"---\ntitle: VSCode ESLint JS代码静态检测工具\ndate: 2017-10-12 14:42:52\ncategories: \n\t- VSCode\ntags: \n\t- VSCode\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\nVSCode是新一代IDE，方便灵活的插件安装方式让它强大无比，对前端友好，让它成为了越来越多前端开发者的首选IDE，编辑器虽好，但是要自己安装符合自己需求的插件才行，下面介绍一款插件，名叫ESLint，是用来静态检测js代码的工具，让你的js代码在编辑过程中就能找到错误，提高代码质量，好了废话不多说下面介绍如何安装和配置这款插件。\n<!-- more -->\n# 安装ESLint插件\n打开VSCode编辑器，在左侧右下角有一个安装插件的图标，点击后就可以打开插件市场，输入ESLint，就会有个黄色的图标出现在你面前，不用犹豫双击它，稍等一会它就安装完了，是不是超简单。\n# 安装NPM依赖\nESLint插件运行需要一些依赖，对于用过npm包管理工具的人来讲小意思啦，我把代码放到下面，需要的直接粘贴运行就好。\n\n```\n//全局安装eslint\nnpm i eslint -g\n\n//如果用到html中的js校验\nnpm i eslint-plugin-html -g\n\n//如果用到es2015语法\nnpm i babel-eslint -g\n```\n# 配置eslint配置文件到项目根目录\n配置文件名称如下：\n**eslintrc.json**\n内容为：\n\n```\n{\n        \"plugins\": [\n                // \"react\",\n                \"html\"\n        ],\n        \"env\": {\n                \"node\": true,\n                \"jquery\": true,\n                \"es6\": true,\n                \"browser\": true\n        },\n        \"globals\": {\n                \"angular\": false\n        },\n        \"parser\": \"babel-eslint\",\n        \"rules\": {\n                //官方文档 http://eslint.org/docs/rules/\n                //参数：0 关闭，1 警告，2 错误\n                // \"quotes\": [0, \"single\"],                  //建议使用单引号\n                // \"no-inner-declarations\": [0, \"both\"],     //不建议在{}代码块内部声明变量或函数\n                \"no-extra-boolean-cast\": 1, //多余的感叹号转布尔型\n                \"no-extra-semi\": 1, //多余的分号\n                \"no-extra-parens\": 0, //多余的括号\n                \"no-empty\": 1, //空代码块\n \n                //使用前未定义\n                \"no-use-before-define\": [\n                        0,\n                        \"nofunc\"\n                ],\n \n                \"complexity\": [0, 10], //圈复杂度大于*\n \n                //定义数组或对象最后多余的逗号\n                \"comma-dangle\": [\n                        0,\n                        \"never\"\n                ],\n \n                // 不允许对全局变量赋值,如 window = 'abc'\n                \"no-global-assign\": [\"error\", {\n                        // 定义例外\n                        // \"exceptions\": [\"Object\"]\n                }],\n                \"no-var\": 0, //用let或const替代var\n                \"no-const-assign\": 2, //不允许const重新赋值\n                \"no-class-assign\": 2, //不允许对class重新赋值\n                \"no-debugger\": 1, //debugger 调试代码未删除\n                \"no-console\": 0, //console 未删除\n                \"no-constant-condition\": 2, //常量作为条件\n                \"no-dupe-args\": 2, //参数重复\n                \"no-dupe-keys\": 2, //对象属性重复\n                \"no-duplicate-case\": 2, //case重复\n                \"no-empty-character-class\": 2, //正则无法匹配任何值\n                \"no-invalid-regexp\": 2, //无效的正则\n                \"no-func-assign\": 2, //函数被赋值\n                \"valid-typeof\": 1, //无效的类型判断\n                \"no-unreachable\": 2, //不可能执行到的代码\n                \"no-unexpected-multiline\": 2, //行尾缺少分号可能导致一些意外情况\n                \"no-sparse-arrays\": 1, //数组中多出逗号\n                \"no-shadow-restricted-names\": 2, //关键词与命名冲突\n                \"no-undef\": 1, //变量未定义\n                \"no-unused-vars\": 1, //变量定义后未使用\n                \"no-cond-assign\": 2, //条件语句中禁止赋值操作\n                \"no-native-reassign\": 2, //禁止覆盖原生对象\n                \"no-mixed-spaces-and-tabs\": 0,\n \n \n \n                //代码风格优化 --------------------------------------\n                \"no-irregular-whitespace\": 0,\n                \"no-else-return\": 0, //在else代码块中return，else是多余的\n                \"no-multi-spaces\": 0, //不允许多个空格\n \n                //object直接量建议写法 : 后一个空格前面不留空格\n                \"key-spacing\": [\n                        0,\n                        {\n                                \"beforeColon\": false,\n                                \"afterColon\": true\n                        }\n                ],\n \n                \"block-scoped-var\": 1, //变量应在外部上下文中声明，不应在{}代码块中\n                \"consistent-return\": 1, //函数返回值可能是不同类型\n                \"accessor-pairs\": 1, //object getter/setter方法需要成对出现\n \n                //换行调用对象方法  点操作符应写在行首\n                \"dot-location\": [\n                        1,\n                        \"property\"\n                ],\n                \"no-lone-blocks\": 1, //多余的{}嵌套\n                \"no-labels\": 1, //无用的标记\n                \"no-extend-native\": 1, //禁止扩展原生对象\n                \"no-floating-decimal\": 1, //浮点型需要写全 禁止.1 或 2.写法\n                \"no-loop-func\": 1, //禁止在循环体中定义函数\n                \"no-new-func\": 1, //禁止new Function(...) 写法\n                \"no-self-compare\": 1, //不允与自己比较作为条件\n                \"no-sequences\": 1, //禁止可能导致结果不明确的逗号操作符\n                \"no-throw-literal\": 1, //禁止抛出一个直接量 应是Error对象\n \n                //不允return时有赋值操作\n                \"no-return-assign\": [\n                        1,\n                        \"always\"\n                ],\n \n                //不允许重复声明\n                \"no-redeclare\": [\n                        1,\n                        {\n                                \"builtinGlobals\": true\n                        }\n                ],\n \n                //不执行的表达式\n                \"no-unused-expressions\": [\n                        0,\n                        {\n                                \"allowShortCircuit\": true,\n                                \"allowTernary\": true\n                        }\n                ],\n                \"no-useless-call\": 1, //无意义的函数call或apply\n                \"no-useless-concat\": 1, //无意义的string concat\n                \"no-void\": 1, //禁用void\n                \"no-with\": 1, //禁用with\n                \"space-infix-ops\": 0, //操作符前后空格\n \n                //jsdoc\n                \"valid-jsdoc\": [\n                        0,\n                        {\n                                \"requireParamDescription\": true,\n                                \"requireReturnDescription\": true\n                        }\n                ],\n \n                //标记未写注释\n                \"no-warning-comments\": [\n                        1,\n                        {\n                                \"terms\": [\n                                        \"todo\",\n                                        \"fixme\",\n                                        \"any other term\"\n                                ],\n                                \"location\": \"anywhere\"\n                        }\n                ],\n                \"curly\": 0 //if、else、while、for代码块用{}包围\n        }\n}\n```\neslint就是根据这个配置表来进行js语法校验的。\n# 最后重启VSCode完成插件安装\n重启后控制台显示ESLint server is running说明插件已经生效，好啦接下来就愉快的写代码吧。","slug":"VSCode-ESLint","published":1,"updated":"2019-12-20T02:50:12.394Z","_id":"ck4ilitrw00051ka61onudslf","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>VSCode是新一代IDE，方便灵活的插件安装方式让它强大无比，对前端友好，让它成为了越来越多前端开发者的首选IDE，编辑器虽好，但是要自己安装符合自己需求的插件才行，下面介绍一款插件，名叫ESLint，是用来静态检测js代码的工具，让你的js代码在编辑过程中就能找到错误，提高代码质量，好了废话不多说下面介绍如何安装和配置这款插件。</p>\n<a id=\"more\"></a>\n<h1 id=\"安装ESLint插件\"><a href=\"#安装ESLint插件\" class=\"headerlink\" title=\"安装ESLint插件\"></a>安装ESLint插件</h1><p>打开VSCode编辑器，在左侧右下角有一个安装插件的图标，点击后就可以打开插件市场，输入ESLint，就会有个黄色的图标出现在你面前，不用犹豫双击它，稍等一会它就安装完了，是不是超简单。</p>\n<h1 id=\"安装NPM依赖\"><a href=\"#安装NPM依赖\" class=\"headerlink\" title=\"安装NPM依赖\"></a>安装NPM依赖</h1><p>ESLint插件运行需要一些依赖，对于用过npm包管理工具的人来讲小意思啦，我把代码放到下面，需要的直接粘贴运行就好。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;全局安装eslint</span><br><span class=\"line\">npm i eslint -g</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;如果用到html中的js校验</span><br><span class=\"line\">npm i eslint-plugin-html -g</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;如果用到es2015语法</span><br><span class=\"line\">npm i babel-eslint -g</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置eslint配置文件到项目根目录\"><a href=\"#配置eslint配置文件到项目根目录\" class=\"headerlink\" title=\"配置eslint配置文件到项目根目录\"></a>配置eslint配置文件到项目根目录</h1><p>配置文件名称如下：<br><strong>eslintrc.json</strong><br>内容为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;plugins&quot;: [</span><br><span class=\"line\">                &#x2F;&#x2F; &quot;react&quot;,</span><br><span class=\"line\">                &quot;html&quot;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;env&quot;: &#123;</span><br><span class=\"line\">                &quot;node&quot;: true,</span><br><span class=\"line\">                &quot;jquery&quot;: true,</span><br><span class=\"line\">                &quot;es6&quot;: true,</span><br><span class=\"line\">                &quot;browser&quot;: true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;globals&quot;: &#123;</span><br><span class=\"line\">                &quot;angular&quot;: false</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;parser&quot;: &quot;babel-eslint&quot;,</span><br><span class=\"line\">        &quot;rules&quot;: &#123;</span><br><span class=\"line\">                &#x2F;&#x2F;官方文档 http:&#x2F;&#x2F;eslint.org&#x2F;docs&#x2F;rules&#x2F;</span><br><span class=\"line\">                &#x2F;&#x2F;参数：0 关闭，1 警告，2 错误</span><br><span class=\"line\">                &#x2F;&#x2F; &quot;quotes&quot;: [0, &quot;single&quot;],                  &#x2F;&#x2F;建议使用单引号</span><br><span class=\"line\">                &#x2F;&#x2F; &quot;no-inner-declarations&quot;: [0, &quot;both&quot;],     &#x2F;&#x2F;不建议在&#123;&#125;代码块内部声明变量或函数</span><br><span class=\"line\">                &quot;no-extra-boolean-cast&quot;: 1, &#x2F;&#x2F;多余的感叹号转布尔型</span><br><span class=\"line\">                &quot;no-extra-semi&quot;: 1, &#x2F;&#x2F;多余的分号</span><br><span class=\"line\">                &quot;no-extra-parens&quot;: 0, &#x2F;&#x2F;多余的括号</span><br><span class=\"line\">                &quot;no-empty&quot;: 1, &#x2F;&#x2F;空代码块</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;使用前未定义</span><br><span class=\"line\">                &quot;no-use-before-define&quot;: [</span><br><span class=\"line\">                        0,</span><br><span class=\"line\">                        &quot;nofunc&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &quot;complexity&quot;: [0, 10], &#x2F;&#x2F;圈复杂度大于*</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;定义数组或对象最后多余的逗号</span><br><span class=\"line\">                &quot;comma-dangle&quot;: [</span><br><span class=\"line\">                        0,</span><br><span class=\"line\">                        &quot;never&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F; 不允许对全局变量赋值,如 window &#x3D; &#39;abc&#39;</span><br><span class=\"line\">                &quot;no-global-assign&quot;: [&quot;error&quot;, &#123;</span><br><span class=\"line\">                        &#x2F;&#x2F; 定义例外</span><br><span class=\"line\">                        &#x2F;&#x2F; &quot;exceptions&quot;: [&quot;Object&quot;]</span><br><span class=\"line\">                &#125;],</span><br><span class=\"line\">                &quot;no-var&quot;: 0, &#x2F;&#x2F;用let或const替代var</span><br><span class=\"line\">                &quot;no-const-assign&quot;: 2, &#x2F;&#x2F;不允许const重新赋值</span><br><span class=\"line\">                &quot;no-class-assign&quot;: 2, &#x2F;&#x2F;不允许对class重新赋值</span><br><span class=\"line\">                &quot;no-debugger&quot;: 1, &#x2F;&#x2F;debugger 调试代码未删除</span><br><span class=\"line\">                &quot;no-console&quot;: 0, &#x2F;&#x2F;console 未删除</span><br><span class=\"line\">                &quot;no-constant-condition&quot;: 2, &#x2F;&#x2F;常量作为条件</span><br><span class=\"line\">                &quot;no-dupe-args&quot;: 2, &#x2F;&#x2F;参数重复</span><br><span class=\"line\">                &quot;no-dupe-keys&quot;: 2, &#x2F;&#x2F;对象属性重复</span><br><span class=\"line\">                &quot;no-duplicate-case&quot;: 2, &#x2F;&#x2F;case重复</span><br><span class=\"line\">                &quot;no-empty-character-class&quot;: 2, &#x2F;&#x2F;正则无法匹配任何值</span><br><span class=\"line\">                &quot;no-invalid-regexp&quot;: 2, &#x2F;&#x2F;无效的正则</span><br><span class=\"line\">                &quot;no-func-assign&quot;: 2, &#x2F;&#x2F;函数被赋值</span><br><span class=\"line\">                &quot;valid-typeof&quot;: 1, &#x2F;&#x2F;无效的类型判断</span><br><span class=\"line\">                &quot;no-unreachable&quot;: 2, &#x2F;&#x2F;不可能执行到的代码</span><br><span class=\"line\">                &quot;no-unexpected-multiline&quot;: 2, &#x2F;&#x2F;行尾缺少分号可能导致一些意外情况</span><br><span class=\"line\">                &quot;no-sparse-arrays&quot;: 1, &#x2F;&#x2F;数组中多出逗号</span><br><span class=\"line\">                &quot;no-shadow-restricted-names&quot;: 2, &#x2F;&#x2F;关键词与命名冲突</span><br><span class=\"line\">                &quot;no-undef&quot;: 1, &#x2F;&#x2F;变量未定义</span><br><span class=\"line\">                &quot;no-unused-vars&quot;: 1, &#x2F;&#x2F;变量定义后未使用</span><br><span class=\"line\">                &quot;no-cond-assign&quot;: 2, &#x2F;&#x2F;条件语句中禁止赋值操作</span><br><span class=\"line\">                &quot;no-native-reassign&quot;: 2, &#x2F;&#x2F;禁止覆盖原生对象</span><br><span class=\"line\">                &quot;no-mixed-spaces-and-tabs&quot;: 0,</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;代码风格优化 --------------------------------------</span><br><span class=\"line\">                &quot;no-irregular-whitespace&quot;: 0,</span><br><span class=\"line\">                &quot;no-else-return&quot;: 0, &#x2F;&#x2F;在else代码块中return，else是多余的</span><br><span class=\"line\">                &quot;no-multi-spaces&quot;: 0, &#x2F;&#x2F;不允许多个空格</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;object直接量建议写法 : 后一个空格前面不留空格</span><br><span class=\"line\">                &quot;key-spacing&quot;: [</span><br><span class=\"line\">                        0,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                &quot;beforeColon&quot;: false,</span><br><span class=\"line\">                                &quot;afterColon&quot;: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &quot;block-scoped-var&quot;: 1, &#x2F;&#x2F;变量应在外部上下文中声明，不应在&#123;&#125;代码块中</span><br><span class=\"line\">                &quot;consistent-return&quot;: 1, &#x2F;&#x2F;函数返回值可能是不同类型</span><br><span class=\"line\">                &quot;accessor-pairs&quot;: 1, &#x2F;&#x2F;object getter&#x2F;setter方法需要成对出现</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;换行调用对象方法  点操作符应写在行首</span><br><span class=\"line\">                &quot;dot-location&quot;: [</span><br><span class=\"line\">                        1,</span><br><span class=\"line\">                        &quot;property&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;no-lone-blocks&quot;: 1, &#x2F;&#x2F;多余的&#123;&#125;嵌套</span><br><span class=\"line\">                &quot;no-labels&quot;: 1, &#x2F;&#x2F;无用的标记</span><br><span class=\"line\">                &quot;no-extend-native&quot;: 1, &#x2F;&#x2F;禁止扩展原生对象</span><br><span class=\"line\">                &quot;no-floating-decimal&quot;: 1, &#x2F;&#x2F;浮点型需要写全 禁止.1 或 2.写法</span><br><span class=\"line\">                &quot;no-loop-func&quot;: 1, &#x2F;&#x2F;禁止在循环体中定义函数</span><br><span class=\"line\">                &quot;no-new-func&quot;: 1, &#x2F;&#x2F;禁止new Function(...) 写法</span><br><span class=\"line\">                &quot;no-self-compare&quot;: 1, &#x2F;&#x2F;不允与自己比较作为条件</span><br><span class=\"line\">                &quot;no-sequences&quot;: 1, &#x2F;&#x2F;禁止可能导致结果不明确的逗号操作符</span><br><span class=\"line\">                &quot;no-throw-literal&quot;: 1, &#x2F;&#x2F;禁止抛出一个直接量 应是Error对象</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;不允return时有赋值操作</span><br><span class=\"line\">                &quot;no-return-assign&quot;: [</span><br><span class=\"line\">                        1,</span><br><span class=\"line\">                        &quot;always&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;不允许重复声明</span><br><span class=\"line\">                &quot;no-redeclare&quot;: [</span><br><span class=\"line\">                        1,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                &quot;builtinGlobals&quot;: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;不执行的表达式</span><br><span class=\"line\">                &quot;no-unused-expressions&quot;: [</span><br><span class=\"line\">                        0,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                &quot;allowShortCircuit&quot;: true,</span><br><span class=\"line\">                                &quot;allowTernary&quot;: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;no-useless-call&quot;: 1, &#x2F;&#x2F;无意义的函数call或apply</span><br><span class=\"line\">                &quot;no-useless-concat&quot;: 1, &#x2F;&#x2F;无意义的string concat</span><br><span class=\"line\">                &quot;no-void&quot;: 1, &#x2F;&#x2F;禁用void</span><br><span class=\"line\">                &quot;no-with&quot;: 1, &#x2F;&#x2F;禁用with</span><br><span class=\"line\">                &quot;space-infix-ops&quot;: 0, &#x2F;&#x2F;操作符前后空格</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;jsdoc</span><br><span class=\"line\">                &quot;valid-jsdoc&quot;: [</span><br><span class=\"line\">                        0,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                &quot;requireParamDescription&quot;: true,</span><br><span class=\"line\">                                &quot;requireReturnDescription&quot;: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;标记未写注释</span><br><span class=\"line\">                &quot;no-warning-comments&quot;: [</span><br><span class=\"line\">                        1,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                &quot;terms&quot;: [</span><br><span class=\"line\">                                        &quot;todo&quot;,</span><br><span class=\"line\">                                        &quot;fixme&quot;,</span><br><span class=\"line\">                                        &quot;any other term&quot;</span><br><span class=\"line\">                                ],</span><br><span class=\"line\">                                &quot;location&quot;: &quot;anywhere&quot;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;curly&quot;: 0 &#x2F;&#x2F;if、else、while、for代码块用&#123;&#125;包围</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>eslint就是根据这个配置表来进行js语法校验的。</p>\n<h1 id=\"最后重启VSCode完成插件安装\"><a href=\"#最后重启VSCode完成插件安装\" class=\"headerlink\" title=\"最后重启VSCode完成插件安装\"></a>最后重启VSCode完成插件安装</h1><p>重启后控制台显示ESLint server is running说明插件已经生效，好啦接下来就愉快的写代码吧。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>VSCode是新一代IDE，方便灵活的插件安装方式让它强大无比，对前端友好，让它成为了越来越多前端开发者的首选IDE，编辑器虽好，但是要自己安装符合自己需求的插件才行，下面介绍一款插件，名叫ESLint，是用来静态检测js代码的工具，让你的js代码在编辑过程中就能找到错误，提高代码质量，好了废话不多说下面介绍如何安装和配置这款插件。</p>","more":"<h1 id=\"安装ESLint插件\"><a href=\"#安装ESLint插件\" class=\"headerlink\" title=\"安装ESLint插件\"></a>安装ESLint插件</h1><p>打开VSCode编辑器，在左侧右下角有一个安装插件的图标，点击后就可以打开插件市场，输入ESLint，就会有个黄色的图标出现在你面前，不用犹豫双击它，稍等一会它就安装完了，是不是超简单。</p>\n<h1 id=\"安装NPM依赖\"><a href=\"#安装NPM依赖\" class=\"headerlink\" title=\"安装NPM依赖\"></a>安装NPM依赖</h1><p>ESLint插件运行需要一些依赖，对于用过npm包管理工具的人来讲小意思啦，我把代码放到下面，需要的直接粘贴运行就好。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;全局安装eslint</span><br><span class=\"line\">npm i eslint -g</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;如果用到html中的js校验</span><br><span class=\"line\">npm i eslint-plugin-html -g</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;如果用到es2015语法</span><br><span class=\"line\">npm i babel-eslint -g</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置eslint配置文件到项目根目录\"><a href=\"#配置eslint配置文件到项目根目录\" class=\"headerlink\" title=\"配置eslint配置文件到项目根目录\"></a>配置eslint配置文件到项目根目录</h1><p>配置文件名称如下：<br><strong>eslintrc.json</strong><br>内容为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;plugins&quot;: [</span><br><span class=\"line\">                &#x2F;&#x2F; &quot;react&quot;,</span><br><span class=\"line\">                &quot;html&quot;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;env&quot;: &#123;</span><br><span class=\"line\">                &quot;node&quot;: true,</span><br><span class=\"line\">                &quot;jquery&quot;: true,</span><br><span class=\"line\">                &quot;es6&quot;: true,</span><br><span class=\"line\">                &quot;browser&quot;: true</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;globals&quot;: &#123;</span><br><span class=\"line\">                &quot;angular&quot;: false</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;parser&quot;: &quot;babel-eslint&quot;,</span><br><span class=\"line\">        &quot;rules&quot;: &#123;</span><br><span class=\"line\">                &#x2F;&#x2F;官方文档 http:&#x2F;&#x2F;eslint.org&#x2F;docs&#x2F;rules&#x2F;</span><br><span class=\"line\">                &#x2F;&#x2F;参数：0 关闭，1 警告，2 错误</span><br><span class=\"line\">                &#x2F;&#x2F; &quot;quotes&quot;: [0, &quot;single&quot;],                  &#x2F;&#x2F;建议使用单引号</span><br><span class=\"line\">                &#x2F;&#x2F; &quot;no-inner-declarations&quot;: [0, &quot;both&quot;],     &#x2F;&#x2F;不建议在&#123;&#125;代码块内部声明变量或函数</span><br><span class=\"line\">                &quot;no-extra-boolean-cast&quot;: 1, &#x2F;&#x2F;多余的感叹号转布尔型</span><br><span class=\"line\">                &quot;no-extra-semi&quot;: 1, &#x2F;&#x2F;多余的分号</span><br><span class=\"line\">                &quot;no-extra-parens&quot;: 0, &#x2F;&#x2F;多余的括号</span><br><span class=\"line\">                &quot;no-empty&quot;: 1, &#x2F;&#x2F;空代码块</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;使用前未定义</span><br><span class=\"line\">                &quot;no-use-before-define&quot;: [</span><br><span class=\"line\">                        0,</span><br><span class=\"line\">                        &quot;nofunc&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &quot;complexity&quot;: [0, 10], &#x2F;&#x2F;圈复杂度大于*</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;定义数组或对象最后多余的逗号</span><br><span class=\"line\">                &quot;comma-dangle&quot;: [</span><br><span class=\"line\">                        0,</span><br><span class=\"line\">                        &quot;never&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F; 不允许对全局变量赋值,如 window &#x3D; &#39;abc&#39;</span><br><span class=\"line\">                &quot;no-global-assign&quot;: [&quot;error&quot;, &#123;</span><br><span class=\"line\">                        &#x2F;&#x2F; 定义例外</span><br><span class=\"line\">                        &#x2F;&#x2F; &quot;exceptions&quot;: [&quot;Object&quot;]</span><br><span class=\"line\">                &#125;],</span><br><span class=\"line\">                &quot;no-var&quot;: 0, &#x2F;&#x2F;用let或const替代var</span><br><span class=\"line\">                &quot;no-const-assign&quot;: 2, &#x2F;&#x2F;不允许const重新赋值</span><br><span class=\"line\">                &quot;no-class-assign&quot;: 2, &#x2F;&#x2F;不允许对class重新赋值</span><br><span class=\"line\">                &quot;no-debugger&quot;: 1, &#x2F;&#x2F;debugger 调试代码未删除</span><br><span class=\"line\">                &quot;no-console&quot;: 0, &#x2F;&#x2F;console 未删除</span><br><span class=\"line\">                &quot;no-constant-condition&quot;: 2, &#x2F;&#x2F;常量作为条件</span><br><span class=\"line\">                &quot;no-dupe-args&quot;: 2, &#x2F;&#x2F;参数重复</span><br><span class=\"line\">                &quot;no-dupe-keys&quot;: 2, &#x2F;&#x2F;对象属性重复</span><br><span class=\"line\">                &quot;no-duplicate-case&quot;: 2, &#x2F;&#x2F;case重复</span><br><span class=\"line\">                &quot;no-empty-character-class&quot;: 2, &#x2F;&#x2F;正则无法匹配任何值</span><br><span class=\"line\">                &quot;no-invalid-regexp&quot;: 2, &#x2F;&#x2F;无效的正则</span><br><span class=\"line\">                &quot;no-func-assign&quot;: 2, &#x2F;&#x2F;函数被赋值</span><br><span class=\"line\">                &quot;valid-typeof&quot;: 1, &#x2F;&#x2F;无效的类型判断</span><br><span class=\"line\">                &quot;no-unreachable&quot;: 2, &#x2F;&#x2F;不可能执行到的代码</span><br><span class=\"line\">                &quot;no-unexpected-multiline&quot;: 2, &#x2F;&#x2F;行尾缺少分号可能导致一些意外情况</span><br><span class=\"line\">                &quot;no-sparse-arrays&quot;: 1, &#x2F;&#x2F;数组中多出逗号</span><br><span class=\"line\">                &quot;no-shadow-restricted-names&quot;: 2, &#x2F;&#x2F;关键词与命名冲突</span><br><span class=\"line\">                &quot;no-undef&quot;: 1, &#x2F;&#x2F;变量未定义</span><br><span class=\"line\">                &quot;no-unused-vars&quot;: 1, &#x2F;&#x2F;变量定义后未使用</span><br><span class=\"line\">                &quot;no-cond-assign&quot;: 2, &#x2F;&#x2F;条件语句中禁止赋值操作</span><br><span class=\"line\">                &quot;no-native-reassign&quot;: 2, &#x2F;&#x2F;禁止覆盖原生对象</span><br><span class=\"line\">                &quot;no-mixed-spaces-and-tabs&quot;: 0,</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;代码风格优化 --------------------------------------</span><br><span class=\"line\">                &quot;no-irregular-whitespace&quot;: 0,</span><br><span class=\"line\">                &quot;no-else-return&quot;: 0, &#x2F;&#x2F;在else代码块中return，else是多余的</span><br><span class=\"line\">                &quot;no-multi-spaces&quot;: 0, &#x2F;&#x2F;不允许多个空格</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;object直接量建议写法 : 后一个空格前面不留空格</span><br><span class=\"line\">                &quot;key-spacing&quot;: [</span><br><span class=\"line\">                        0,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                &quot;beforeColon&quot;: false,</span><br><span class=\"line\">                                &quot;afterColon&quot;: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &quot;block-scoped-var&quot;: 1, &#x2F;&#x2F;变量应在外部上下文中声明，不应在&#123;&#125;代码块中</span><br><span class=\"line\">                &quot;consistent-return&quot;: 1, &#x2F;&#x2F;函数返回值可能是不同类型</span><br><span class=\"line\">                &quot;accessor-pairs&quot;: 1, &#x2F;&#x2F;object getter&#x2F;setter方法需要成对出现</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;换行调用对象方法  点操作符应写在行首</span><br><span class=\"line\">                &quot;dot-location&quot;: [</span><br><span class=\"line\">                        1,</span><br><span class=\"line\">                        &quot;property&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;no-lone-blocks&quot;: 1, &#x2F;&#x2F;多余的&#123;&#125;嵌套</span><br><span class=\"line\">                &quot;no-labels&quot;: 1, &#x2F;&#x2F;无用的标记</span><br><span class=\"line\">                &quot;no-extend-native&quot;: 1, &#x2F;&#x2F;禁止扩展原生对象</span><br><span class=\"line\">                &quot;no-floating-decimal&quot;: 1, &#x2F;&#x2F;浮点型需要写全 禁止.1 或 2.写法</span><br><span class=\"line\">                &quot;no-loop-func&quot;: 1, &#x2F;&#x2F;禁止在循环体中定义函数</span><br><span class=\"line\">                &quot;no-new-func&quot;: 1, &#x2F;&#x2F;禁止new Function(...) 写法</span><br><span class=\"line\">                &quot;no-self-compare&quot;: 1, &#x2F;&#x2F;不允与自己比较作为条件</span><br><span class=\"line\">                &quot;no-sequences&quot;: 1, &#x2F;&#x2F;禁止可能导致结果不明确的逗号操作符</span><br><span class=\"line\">                &quot;no-throw-literal&quot;: 1, &#x2F;&#x2F;禁止抛出一个直接量 应是Error对象</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;不允return时有赋值操作</span><br><span class=\"line\">                &quot;no-return-assign&quot;: [</span><br><span class=\"line\">                        1,</span><br><span class=\"line\">                        &quot;always&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;不允许重复声明</span><br><span class=\"line\">                &quot;no-redeclare&quot;: [</span><br><span class=\"line\">                        1,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                &quot;builtinGlobals&quot;: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;不执行的表达式</span><br><span class=\"line\">                &quot;no-unused-expressions&quot;: [</span><br><span class=\"line\">                        0,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                &quot;allowShortCircuit&quot;: true,</span><br><span class=\"line\">                                &quot;allowTernary&quot;: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;no-useless-call&quot;: 1, &#x2F;&#x2F;无意义的函数call或apply</span><br><span class=\"line\">                &quot;no-useless-concat&quot;: 1, &#x2F;&#x2F;无意义的string concat</span><br><span class=\"line\">                &quot;no-void&quot;: 1, &#x2F;&#x2F;禁用void</span><br><span class=\"line\">                &quot;no-with&quot;: 1, &#x2F;&#x2F;禁用with</span><br><span class=\"line\">                &quot;space-infix-ops&quot;: 0, &#x2F;&#x2F;操作符前后空格</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;jsdoc</span><br><span class=\"line\">                &quot;valid-jsdoc&quot;: [</span><br><span class=\"line\">                        0,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                &quot;requireParamDescription&quot;: true,</span><br><span class=\"line\">                                &quot;requireReturnDescription&quot;: true</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\"> </span><br><span class=\"line\">                &#x2F;&#x2F;标记未写注释</span><br><span class=\"line\">                &quot;no-warning-comments&quot;: [</span><br><span class=\"line\">                        1,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                &quot;terms&quot;: [</span><br><span class=\"line\">                                        &quot;todo&quot;,</span><br><span class=\"line\">                                        &quot;fixme&quot;,</span><br><span class=\"line\">                                        &quot;any other term&quot;</span><br><span class=\"line\">                                ],</span><br><span class=\"line\">                                &quot;location&quot;: &quot;anywhere&quot;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;curly&quot;: 0 &#x2F;&#x2F;if、else、while、for代码块用&#123;&#125;包围</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>eslint就是根据这个配置表来进行js语法校验的。</p>\n<h1 id=\"最后重启VSCode完成插件安装\"><a href=\"#最后重启VSCode完成插件安装\" class=\"headerlink\" title=\"最后重启VSCode完成插件安装\"></a>最后重启VSCode完成插件安装</h1><p>重启后控制台显示ESLint server is running说明插件已经生效，好啦接下来就愉快的写代码吧。</p>"},{"title":"如何利用GitHub-Hexo-Next搭建一个漂亮的技术博客","date":"2017-10-11T08:18:48.000Z","_content":"\n> 作者：李旭光\n> 引用请标明出处\n\n## 前言\n> 开博客貌似并不是一件难事，现在有很多的方式开博客，而且现在博客貌似也不再流行，但是作为一个开发者，维护一个技术博客对自己的发展是很有好处的，出名者如阮一峰等，所以还是想要做一个技术博客的。\n\n> 开博客可以选择网上现有的博客系统如博客园以及其他各大公司提供的博客系统，也可以选择如wordpress等博客程序自行搭建博客系统，前者省事，但可自定义设置不足不符合一个爱折腾的人的性格，后者复杂些，爱折腾的可以学着搭建，但是服务器域名是个让人头疼的事，还有数据库等操作，着实麻烦，如今又有了另外一个选择，那就是利用GitHub和一些静态的博客系统搭建一个纯静态的博客系统，不花钱又能折腾，而且还是命令行下的，装B感觉棒棒的，另外搭配时下流行的MarkDown语法，做笔记正合我意。\n\n<!-- more -->\n\n## 技术栈选型\n> 这里说是技术栈选型可能并不是很恰当，但又找不到合适的描述，就是把需要的技术介绍一下，如果还不会的，可以自行学习，或者看看我的其他文章。\n- node（npm），现在node这么火，没用过都不好意思出门，但是如果你还不回的话，就先自行学习安装一下吧。\n- Hexo 静态博客程序，其实还有很多，只不过这个比较新，而且搭配Next非常漂亮，就选了它。\n- Next 可以说是Hexo的定制系统，不仅仅是做了个皮肤，简洁美观的配置项和官网说明深得我心。\n\n## 搭建步骤（安装步骤）\n### 安装Hexo [Hexo官网](https://hexo.io/)\n\n```\n$ npm install hexo-cli -g // 安装hexo的脚手架工具\n$ hexo init blog // 初始化博客\n$ cd blog // 返回博客目录\n$ npm install // 安装依赖\n$ hexo server // 启动博客\n```\n> 怎么样五行代码就生成并运行了一个博客是不是超简单。\n下面我们看一下生成的博客的目录\n\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n`_config.yml`这是博客的配置文件，比如博客名称，副标题，作者等信息都在这个文件里设置。\n\n`package.json`这是博客的依赖文件可以忽略\n\n`scaffolds`这是博客的模板目录，当你要写一篇文章时，这里会有文章的默认类型。\n\n`source`这是博客的网站资源，包括发布的文章（`_posts`）、关于、分类还有上传文件等。\n\n`themes`这是博客的皮肤。\n\n更多配置信息请查阅官网手册\n\n### 安装Next主题 [Next官网](http://theme-next.iissnan.com/)\n\n\n```\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n然后到`_config.yml`配置文件将主题配置改成next就可以使用next的皮肤了\n\n```\ntheme: next\n```\n皮肤也有配置文件，为跟Hexo进行区分Hexo的配置文件称为`站点配置文件`， 皮肤配置文件称为`主题配置文件`。\n\n对两个配置文件进行简单配置后，符合需求的博客就搭建而成了，这里有个友好的建议，配置文件如果配置不正确将不能正确运行博客，所以在配置前务必保留好原始配置文件，注意配置时不要缺了空格，不要问我为什么知道这个。\n\n### 更新博客主题\nhttps://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md\n\n## 写博客\n博客已经搭建好了，接下来就是写博客了，那么如何开始写博客呢，超级简单一行命令足以：\n\n```\nhexo new [layout] <title>  \n// layout 为模板类型可以省略，title为文章标题，通常可以简写为如下\nhexo new title\n\n```\n新建命令执行后在`_posts`的目录下就会生成一个你刚才命名的md后缀的文件，这就是一个MarkDown语法的文件，（如果不了解MarkDown语法的可以去学一下，很简单的符号语言，或者像我一样用支持MarkDown语法的编辑器来写文章。新建的文章打开内容如下\n\n```\n---\ntitle: new-post\ndate: 2017-10-11 15:01:09\ntags:\n---\n\n```\n非常好理解，title就是标题，date为创建时间，tags是标签方便分类，但是这些并不全，还有些常用的分类没有写上，下面我将常用的进行补充\n\n```\n---\ntitle: new-post\ndate: 2017-10-11 15:01:09\ncategories: \n\t- node\n\t- npm\ntags:\n\t- npm\n\t- node\n\t- rnpm\n---\n```\n这样补充后就有了常见博客的分类和标签的功能，是不是很简单。\n\n写完文章以后还要执行下面命令，生成静态页面\n\n```\n$ hexo generate // 将md后缀文件生成成静态html文件\n\n```\n\n\n这样我们就完成了博客的搭建和博客的书写，到现在我们就已经有了一个本地的博客，那么如何将博客上传到GitHub上呢？\n## 将Blog上传至GitHub\ngithub是一个代码托管的平台，为了方便描述代码功能，它提供了README.md文件进行说明，但是为了更好的展现，也提供了gitpage的功能，博客是基于这个功能进行的扩展，那么如何用gitpage的功能来实现博客系统呢？\n### 创建仓库\n创建一个以你的GitHub账号为开头命名的仓库，格式如下\n\n```\nGitHub账号名称.github.io\n// 如\nlixuguang.github.io\n```\n然后到blog系统的配置文件`_config.yml`里配置一下上传路径\n\n```\ndeploy:\n  type: git\n  repo: <repository url>\n  \n// 我的实例\ndeploy:\n  type: git\n  repo: git@github.com:lixuguang/lixuguang.github.io.git\n  branch: master\n\n```\n配置好就可以进行部署了，部署也很简单，只需要执行一下下面的命令。\n\n```\n$ npm install hexo-deployer-git --save // 安装上传工具\n\n$ hexo deploy\n\n```\n稍等一会，如果没有出现什么错误信息，那么你的部署就成功了。之后你就可以访问你的博客了，博客地址如下：\nhttps://你的github账号.github.io/\n我的如下：\nhttps://lixuguang.github.io/\n\n现在你是不是已经学会如何利用github搭建一个静态的博客系统了呢，如果你还没有一个自己的技术博客，快来试试吧。\n\n## 技巧\n是不是觉得命令行还是挺麻烦的，要敲那么一大串字母，哈哈实际上这些常用命令是有缩写方式的，下面给大家介绍一下缩写方式。\n\n\n```\n$ hexo server\n// 简写\n$ hexo s\n\n$ hexo generate\n// 简写\n$ hexo g\n\n$ hexo deploy\n// 简写\n$ hexo d\n\n$ hexo new\n// 简写\n$ hexo n\n```\n\n另外每次发布之前最好执行以下命令，清理当前内容\n\n```\n$ hexo clean\n\n```\n以防出现冲突的情况，具体动作如下\n\n```\n$ hexo clean\n$ hexo g -d // 文件生成后立即部署网站\n$ hexo d -g // 部署之前预先生成静态文件\n\n```\n\n## 常见问题\n1. SSH问题\n\n```\n$ ssh-keygen -t rsa -C \"lixuguang316@gmail.com\"\n// 填写你自己的github邮箱\n\n```\n敲三下回车，之后会在\n\n```\nC:\\Users\\Administrator\\.ssh // windows下\nopen ~/.ssh // Mac下打开ssh文件  \n```\n文件夹下生成两个文件`id_rsa`（私钥）、`id_rsa.pub`（公钥），在github上的SSH处添加新的ssh，然后将`公钥`内容贴到上面起个名字可以叫hexo，保存，然后在git bash下敲击\n\n```\n$ ssh git@github.com\n```\n然后敲`yes`就可以上传blog代码了\n怎么样会了么？更多高阶玩法请阅读官方说明文档，文章如有谬误之处请各位指出，如果觉得文章对你有所帮助我将十分开心，如果你喜欢我的文章可以到我的github上点个`fork`，谢谢你的阅读。\n","source":"_posts/use-GitHub-Hexo-Next-make-blog.md","raw":"---\ntitle: 如何利用GitHub-Hexo-Next搭建一个漂亮的技术博客\ndate: 2017-10-11 16:18:48\ncategories: \n  - 前端技术\ntags: \n  - blog\n  - hexo \n  - next \n  - npm \n---\n\n> 作者：李旭光\n> 引用请标明出处\n\n## 前言\n> 开博客貌似并不是一件难事，现在有很多的方式开博客，而且现在博客貌似也不再流行，但是作为一个开发者，维护一个技术博客对自己的发展是很有好处的，出名者如阮一峰等，所以还是想要做一个技术博客的。\n\n> 开博客可以选择网上现有的博客系统如博客园以及其他各大公司提供的博客系统，也可以选择如wordpress等博客程序自行搭建博客系统，前者省事，但可自定义设置不足不符合一个爱折腾的人的性格，后者复杂些，爱折腾的可以学着搭建，但是服务器域名是个让人头疼的事，还有数据库等操作，着实麻烦，如今又有了另外一个选择，那就是利用GitHub和一些静态的博客系统搭建一个纯静态的博客系统，不花钱又能折腾，而且还是命令行下的，装B感觉棒棒的，另外搭配时下流行的MarkDown语法，做笔记正合我意。\n\n<!-- more -->\n\n## 技术栈选型\n> 这里说是技术栈选型可能并不是很恰当，但又找不到合适的描述，就是把需要的技术介绍一下，如果还不会的，可以自行学习，或者看看我的其他文章。\n- node（npm），现在node这么火，没用过都不好意思出门，但是如果你还不回的话，就先自行学习安装一下吧。\n- Hexo 静态博客程序，其实还有很多，只不过这个比较新，而且搭配Next非常漂亮，就选了它。\n- Next 可以说是Hexo的定制系统，不仅仅是做了个皮肤，简洁美观的配置项和官网说明深得我心。\n\n## 搭建步骤（安装步骤）\n### 安装Hexo [Hexo官网](https://hexo.io/)\n\n```\n$ npm install hexo-cli -g // 安装hexo的脚手架工具\n$ hexo init blog // 初始化博客\n$ cd blog // 返回博客目录\n$ npm install // 安装依赖\n$ hexo server // 启动博客\n```\n> 怎么样五行代码就生成并运行了一个博客是不是超简单。\n下面我们看一下生成的博客的目录\n\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n`_config.yml`这是博客的配置文件，比如博客名称，副标题，作者等信息都在这个文件里设置。\n\n`package.json`这是博客的依赖文件可以忽略\n\n`scaffolds`这是博客的模板目录，当你要写一篇文章时，这里会有文章的默认类型。\n\n`source`这是博客的网站资源，包括发布的文章（`_posts`）、关于、分类还有上传文件等。\n\n`themes`这是博客的皮肤。\n\n更多配置信息请查阅官网手册\n\n### 安装Next主题 [Next官网](http://theme-next.iissnan.com/)\n\n\n```\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n然后到`_config.yml`配置文件将主题配置改成next就可以使用next的皮肤了\n\n```\ntheme: next\n```\n皮肤也有配置文件，为跟Hexo进行区分Hexo的配置文件称为`站点配置文件`， 皮肤配置文件称为`主题配置文件`。\n\n对两个配置文件进行简单配置后，符合需求的博客就搭建而成了，这里有个友好的建议，配置文件如果配置不正确将不能正确运行博客，所以在配置前务必保留好原始配置文件，注意配置时不要缺了空格，不要问我为什么知道这个。\n\n### 更新博客主题\nhttps://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md\n\n## 写博客\n博客已经搭建好了，接下来就是写博客了，那么如何开始写博客呢，超级简单一行命令足以：\n\n```\nhexo new [layout] <title>  \n// layout 为模板类型可以省略，title为文章标题，通常可以简写为如下\nhexo new title\n\n```\n新建命令执行后在`_posts`的目录下就会生成一个你刚才命名的md后缀的文件，这就是一个MarkDown语法的文件，（如果不了解MarkDown语法的可以去学一下，很简单的符号语言，或者像我一样用支持MarkDown语法的编辑器来写文章。新建的文章打开内容如下\n\n```\n---\ntitle: new-post\ndate: 2017-10-11 15:01:09\ntags:\n---\n\n```\n非常好理解，title就是标题，date为创建时间，tags是标签方便分类，但是这些并不全，还有些常用的分类没有写上，下面我将常用的进行补充\n\n```\n---\ntitle: new-post\ndate: 2017-10-11 15:01:09\ncategories: \n\t- node\n\t- npm\ntags:\n\t- npm\n\t- node\n\t- rnpm\n---\n```\n这样补充后就有了常见博客的分类和标签的功能，是不是很简单。\n\n写完文章以后还要执行下面命令，生成静态页面\n\n```\n$ hexo generate // 将md后缀文件生成成静态html文件\n\n```\n\n\n这样我们就完成了博客的搭建和博客的书写，到现在我们就已经有了一个本地的博客，那么如何将博客上传到GitHub上呢？\n## 将Blog上传至GitHub\ngithub是一个代码托管的平台，为了方便描述代码功能，它提供了README.md文件进行说明，但是为了更好的展现，也提供了gitpage的功能，博客是基于这个功能进行的扩展，那么如何用gitpage的功能来实现博客系统呢？\n### 创建仓库\n创建一个以你的GitHub账号为开头命名的仓库，格式如下\n\n```\nGitHub账号名称.github.io\n// 如\nlixuguang.github.io\n```\n然后到blog系统的配置文件`_config.yml`里配置一下上传路径\n\n```\ndeploy:\n  type: git\n  repo: <repository url>\n  \n// 我的实例\ndeploy:\n  type: git\n  repo: git@github.com:lixuguang/lixuguang.github.io.git\n  branch: master\n\n```\n配置好就可以进行部署了，部署也很简单，只需要执行一下下面的命令。\n\n```\n$ npm install hexo-deployer-git --save // 安装上传工具\n\n$ hexo deploy\n\n```\n稍等一会，如果没有出现什么错误信息，那么你的部署就成功了。之后你就可以访问你的博客了，博客地址如下：\nhttps://你的github账号.github.io/\n我的如下：\nhttps://lixuguang.github.io/\n\n现在你是不是已经学会如何利用github搭建一个静态的博客系统了呢，如果你还没有一个自己的技术博客，快来试试吧。\n\n## 技巧\n是不是觉得命令行还是挺麻烦的，要敲那么一大串字母，哈哈实际上这些常用命令是有缩写方式的，下面给大家介绍一下缩写方式。\n\n\n```\n$ hexo server\n// 简写\n$ hexo s\n\n$ hexo generate\n// 简写\n$ hexo g\n\n$ hexo deploy\n// 简写\n$ hexo d\n\n$ hexo new\n// 简写\n$ hexo n\n```\n\n另外每次发布之前最好执行以下命令，清理当前内容\n\n```\n$ hexo clean\n\n```\n以防出现冲突的情况，具体动作如下\n\n```\n$ hexo clean\n$ hexo g -d // 文件生成后立即部署网站\n$ hexo d -g // 部署之前预先生成静态文件\n\n```\n\n## 常见问题\n1. SSH问题\n\n```\n$ ssh-keygen -t rsa -C \"lixuguang316@gmail.com\"\n// 填写你自己的github邮箱\n\n```\n敲三下回车，之后会在\n\n```\nC:\\Users\\Administrator\\.ssh // windows下\nopen ~/.ssh // Mac下打开ssh文件  \n```\n文件夹下生成两个文件`id_rsa`（私钥）、`id_rsa.pub`（公钥），在github上的SSH处添加新的ssh，然后将`公钥`内容贴到上面起个名字可以叫hexo，保存，然后在git bash下敲击\n\n```\n$ ssh git@github.com\n```\n然后敲`yes`就可以上传blog代码了\n怎么样会了么？更多高阶玩法请阅读官方说明文档，文章如有谬误之处请各位指出，如果觉得文章对你有所帮助我将十分开心，如果你喜欢我的文章可以到我的github上点个`fork`，谢谢你的阅读。\n","slug":"use-GitHub-Hexo-Next-make-blog","published":1,"updated":"2019-12-20T02:50:12.396Z","_id":"ck4ilitsb000p1ka6ehg3hbas","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>开博客貌似并不是一件难事，现在有很多的方式开博客，而且现在博客貌似也不再流行，但是作为一个开发者，维护一个技术博客对自己的发展是很有好处的，出名者如阮一峰等，所以还是想要做一个技术博客的。</p>\n</blockquote>\n<blockquote>\n<p>开博客可以选择网上现有的博客系统如博客园以及其他各大公司提供的博客系统，也可以选择如wordpress等博客程序自行搭建博客系统，前者省事，但可自定义设置不足不符合一个爱折腾的人的性格，后者复杂些，爱折腾的可以学着搭建，但是服务器域名是个让人头疼的事，还有数据库等操作，着实麻烦，如今又有了另外一个选择，那就是利用GitHub和一些静态的博客系统搭建一个纯静态的博客系统，不花钱又能折腾，而且还是命令行下的，装B感觉棒棒的，另外搭配时下流行的MarkDown语法，做笔记正合我意。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"技术栈选型\"><a href=\"#技术栈选型\" class=\"headerlink\" title=\"技术栈选型\"></a>技术栈选型</h2><blockquote>\n<p>这里说是技术栈选型可能并不是很恰当，但又找不到合适的描述，就是把需要的技术介绍一下，如果还不会的，可以自行学习，或者看看我的其他文章。</p>\n</blockquote>\n<ul>\n<li>node（npm），现在node这么火，没用过都不好意思出门，但是如果你还不回的话，就先自行学习安装一下吧。</li>\n<li>Hexo 静态博客程序，其实还有很多，只不过这个比较新，而且搭配Next非常漂亮，就选了它。</li>\n<li>Next 可以说是Hexo的定制系统，不仅仅是做了个皮肤，简洁美观的配置项和官网说明深得我心。</li>\n</ul>\n<h2 id=\"搭建步骤（安装步骤）\"><a href=\"#搭建步骤（安装步骤）\" class=\"headerlink\" title=\"搭建步骤（安装步骤）\"></a>搭建步骤（安装步骤）</h2><h3 id=\"安装Hexo-Hexo官网\"><a href=\"#安装Hexo-Hexo官网\" class=\"headerlink\" title=\"安装Hexo Hexo官网\"></a>安装Hexo <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo官网</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g &#x2F;&#x2F; 安装hexo的脚手架工具</span><br><span class=\"line\">$ hexo init blog &#x2F;&#x2F; 初始化博客</span><br><span class=\"line\">$ cd blog &#x2F;&#x2F; 返回博客目录</span><br><span class=\"line\">$ npm install &#x2F;&#x2F; 安装依赖</span><br><span class=\"line\">$ hexo server &#x2F;&#x2F; 启动博客</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>怎么样五行代码就生成并运行了一个博客是不是超简单。<br>下面我们看一下生成的博客的目录</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n<p><code>_config.yml</code>这是博客的配置文件，比如博客名称，副标题，作者等信息都在这个文件里设置。</p>\n<p><code>package.json</code>这是博客的依赖文件可以忽略</p>\n<p><code>scaffolds</code>这是博客的模板目录，当你要写一篇文章时，这里会有文章的默认类型。</p>\n<p><code>source</code>这是博客的网站资源，包括发布的文章（<code>_posts</code>）、关于、分类还有上传文件等。</p>\n<p><code>themes</code>这是博客的皮肤。</p>\n<p>更多配置信息请查阅官网手册</p>\n<h3 id=\"安装Next主题-Next官网\"><a href=\"#安装Next主题-Next官网\" class=\"headerlink\" title=\"安装Next主题 Next官网\"></a>安装Next主题 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">Next官网</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd your-hexo-site</span><br><span class=\"line\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>\n\n<p>然后到<code>_config.yml</code>配置文件将主题配置改成next就可以使用next的皮肤了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n<p>皮肤也有配置文件，为跟Hexo进行区分Hexo的配置文件称为<code>站点配置文件</code>， 皮肤配置文件称为<code>主题配置文件</code>。</p>\n<p>对两个配置文件进行简单配置后，符合需求的博客就搭建而成了，这里有个友好的建议，配置文件如果配置不正确将不能正确运行博客，所以在配置前务必保留好原始配置文件，注意配置时不要缺了空格，不要问我为什么知道这个。</p>\n<h3 id=\"更新博客主题\"><a href=\"#更新博客主题\" class=\"headerlink\" title=\"更新博客主题\"></a>更新博客主题</h3><p><a href=\"https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md\" target=\"_blank\" rel=\"noopener\">https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md</a></p>\n<h2 id=\"写博客\"><a href=\"#写博客\" class=\"headerlink\" title=\"写博客\"></a>写博客</h2><p>博客已经搭建好了，接下来就是写博客了，那么如何开始写博客呢，超级简单一行命令足以：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new [layout] &lt;title&gt;  </span><br><span class=\"line\">&#x2F;&#x2F; layout 为模板类型可以省略，title为文章标题，通常可以简写为如下</span><br><span class=\"line\">hexo new title</span><br></pre></td></tr></table></figure>\n<p>新建命令执行后在<code>_posts</code>的目录下就会生成一个你刚才命名的md后缀的文件，这就是一个MarkDown语法的文件，（如果不了解MarkDown语法的可以去学一下，很简单的符号语言，或者像我一样用支持MarkDown语法的编辑器来写文章。新建的文章打开内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: new-post</span><br><span class=\"line\">date: 2017-10-11 15:01:09</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>非常好理解，title就是标题，date为创建时间，tags是标签方便分类，但是这些并不全，还有些常用的分类没有写上，下面我将常用的进行补充</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: new-post</span><br><span class=\"line\">date: 2017-10-11 15:01:09</span><br><span class=\"line\">categories: </span><br><span class=\"line\">\t- node</span><br><span class=\"line\">\t- npm</span><br><span class=\"line\">tags:</span><br><span class=\"line\">\t- npm</span><br><span class=\"line\">\t- node</span><br><span class=\"line\">\t- rnpm</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>这样补充后就有了常见博客的分类和标签的功能，是不是很简单。</p>\n<p>写完文章以后还要执行下面命令，生成静态页面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate &#x2F;&#x2F; 将md后缀文件生成成静态html文件</span><br></pre></td></tr></table></figure>\n\n\n<p>这样我们就完成了博客的搭建和博客的书写，到现在我们就已经有了一个本地的博客，那么如何将博客上传到GitHub上呢？</p>\n<h2 id=\"将Blog上传至GitHub\"><a href=\"#将Blog上传至GitHub\" class=\"headerlink\" title=\"将Blog上传至GitHub\"></a>将Blog上传至GitHub</h2><p>github是一个代码托管的平台，为了方便描述代码功能，它提供了README.md文件进行说明，但是为了更好的展现，也提供了gitpage的功能，博客是基于这个功能进行的扩展，那么如何用gitpage的功能来实现博客系统呢？</p>\n<h3 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h3><p>创建一个以你的GitHub账号为开头命名的仓库，格式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GitHub账号名称.github.io</span><br><span class=\"line\">&#x2F;&#x2F; 如</span><br><span class=\"line\">lixuguang.github.io</span><br></pre></td></tr></table></figure>\n<p>然后到blog系统的配置文件<code>_config.yml</code>里配置一下上传路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: &lt;repository url&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#x2F;&#x2F; 我的实例</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:lixuguang&#x2F;lixuguang.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>配置好就可以进行部署了，部署也很简单，只需要执行一下下面的命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save &#x2F;&#x2F; 安装上传工具</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>稍等一会，如果没有出现什么错误信息，那么你的部署就成功了。之后你就可以访问你的博客了，博客地址如下：<br>https://你的github账号.github.io/<br>我的如下：<br><a href=\"https://lixuguang.github.io/\">https://lixuguang.github.io/</a></p>\n<p>现在你是不是已经学会如何利用github搭建一个静态的博客系统了呢，如果你还没有一个自己的技术博客，快来试试吧。</p>\n<h2 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h2><p>是不是觉得命令行还是挺麻烦的，要敲那么一大串字母，哈哈实际上这些常用命令是有缩写方式的，下面给大家介绍一下缩写方式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br><span class=\"line\">&#x2F;&#x2F; 简写</span><br><span class=\"line\">$ hexo s</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo generate</span><br><span class=\"line\">&#x2F;&#x2F; 简写</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo deploy</span><br><span class=\"line\">&#x2F;&#x2F; 简写</span><br><span class=\"line\">$ hexo d</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo new</span><br><span class=\"line\">&#x2F;&#x2F; 简写</span><br><span class=\"line\">$ hexo n</span><br></pre></td></tr></table></figure>\n\n<p>另外每次发布之前最好执行以下命令，清理当前内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<p>以防出现冲突的情况，具体动作如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g -d &#x2F;&#x2F; 文件生成后立即部署网站</span><br><span class=\"line\">$ hexo d -g &#x2F;&#x2F; 部署之前预先生成静态文件</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><ol>\n<li>SSH问题</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C &quot;lixuguang316@gmail.com&quot;</span><br><span class=\"line\">&#x2F;&#x2F; 填写你自己的github邮箱</span><br></pre></td></tr></table></figure>\n<p>敲三下回车，之后会在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Administrator\\.ssh &#x2F;&#x2F; windows下</span><br><span class=\"line\">open ~&#x2F;.ssh &#x2F;&#x2F; Mac下打开ssh文件</span><br></pre></td></tr></table></figure>\n<p>文件夹下生成两个文件<code>id_rsa</code>（私钥）、<code>id_rsa.pub</code>（公钥），在github上的SSH处添加新的ssh，然后将<code>公钥</code>内容贴到上面起个名字可以叫hexo，保存，然后在git bash下敲击</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh git@github.com</span><br></pre></td></tr></table></figure>\n<p>然后敲<code>yes</code>就可以上传blog代码了<br>怎么样会了么？更多高阶玩法请阅读官方说明文档，文章如有谬误之处请各位指出，如果觉得文章对你有所帮助我将十分开心，如果你喜欢我的文章可以到我的github上点个<code>fork</code>，谢谢你的阅读。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>开博客貌似并不是一件难事，现在有很多的方式开博客，而且现在博客貌似也不再流行，但是作为一个开发者，维护一个技术博客对自己的发展是很有好处的，出名者如阮一峰等，所以还是想要做一个技术博客的。</p>\n</blockquote>\n<blockquote>\n<p>开博客可以选择网上现有的博客系统如博客园以及其他各大公司提供的博客系统，也可以选择如wordpress等博客程序自行搭建博客系统，前者省事，但可自定义设置不足不符合一个爱折腾的人的性格，后者复杂些，爱折腾的可以学着搭建，但是服务器域名是个让人头疼的事，还有数据库等操作，着实麻烦，如今又有了另外一个选择，那就是利用GitHub和一些静态的博客系统搭建一个纯静态的博客系统，不花钱又能折腾，而且还是命令行下的，装B感觉棒棒的，另外搭配时下流行的MarkDown语法，做笔记正合我意。</p>\n</blockquote>","more":"<h2 id=\"技术栈选型\"><a href=\"#技术栈选型\" class=\"headerlink\" title=\"技术栈选型\"></a>技术栈选型</h2><blockquote>\n<p>这里说是技术栈选型可能并不是很恰当，但又找不到合适的描述，就是把需要的技术介绍一下，如果还不会的，可以自行学习，或者看看我的其他文章。</p>\n</blockquote>\n<ul>\n<li>node（npm），现在node这么火，没用过都不好意思出门，但是如果你还不回的话，就先自行学习安装一下吧。</li>\n<li>Hexo 静态博客程序，其实还有很多，只不过这个比较新，而且搭配Next非常漂亮，就选了它。</li>\n<li>Next 可以说是Hexo的定制系统，不仅仅是做了个皮肤，简洁美观的配置项和官网说明深得我心。</li>\n</ul>\n<h2 id=\"搭建步骤（安装步骤）\"><a href=\"#搭建步骤（安装步骤）\" class=\"headerlink\" title=\"搭建步骤（安装步骤）\"></a>搭建步骤（安装步骤）</h2><h3 id=\"安装Hexo-Hexo官网\"><a href=\"#安装Hexo-Hexo官网\" class=\"headerlink\" title=\"安装Hexo Hexo官网\"></a>安装Hexo <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo官网</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g &#x2F;&#x2F; 安装hexo的脚手架工具</span><br><span class=\"line\">$ hexo init blog &#x2F;&#x2F; 初始化博客</span><br><span class=\"line\">$ cd blog &#x2F;&#x2F; 返回博客目录</span><br><span class=\"line\">$ npm install &#x2F;&#x2F; 安装依赖</span><br><span class=\"line\">$ hexo server &#x2F;&#x2F; 启动博客</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>怎么样五行代码就生成并运行了一个博客是不是超简单。<br>下面我们看一下生成的博客的目录</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n<p><code>_config.yml</code>这是博客的配置文件，比如博客名称，副标题，作者等信息都在这个文件里设置。</p>\n<p><code>package.json</code>这是博客的依赖文件可以忽略</p>\n<p><code>scaffolds</code>这是博客的模板目录，当你要写一篇文章时，这里会有文章的默认类型。</p>\n<p><code>source</code>这是博客的网站资源，包括发布的文章（<code>_posts</code>）、关于、分类还有上传文件等。</p>\n<p><code>themes</code>这是博客的皮肤。</p>\n<p>更多配置信息请查阅官网手册</p>\n<h3 id=\"安装Next主题-Next官网\"><a href=\"#安装Next主题-Next官网\" class=\"headerlink\" title=\"安装Next主题 Next官网\"></a>安装Next主题 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">Next官网</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd your-hexo-site</span><br><span class=\"line\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>\n\n<p>然后到<code>_config.yml</code>配置文件将主题配置改成next就可以使用next的皮肤了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n<p>皮肤也有配置文件，为跟Hexo进行区分Hexo的配置文件称为<code>站点配置文件</code>， 皮肤配置文件称为<code>主题配置文件</code>。</p>\n<p>对两个配置文件进行简单配置后，符合需求的博客就搭建而成了，这里有个友好的建议，配置文件如果配置不正确将不能正确运行博客，所以在配置前务必保留好原始配置文件，注意配置时不要缺了空格，不要问我为什么知道这个。</p>\n<h3 id=\"更新博客主题\"><a href=\"#更新博客主题\" class=\"headerlink\" title=\"更新博客主题\"></a>更新博客主题</h3><p><a href=\"https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md\" target=\"_blank\" rel=\"noopener\">https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md</a></p>\n<h2 id=\"写博客\"><a href=\"#写博客\" class=\"headerlink\" title=\"写博客\"></a>写博客</h2><p>博客已经搭建好了，接下来就是写博客了，那么如何开始写博客呢，超级简单一行命令足以：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new [layout] &lt;title&gt;  </span><br><span class=\"line\">&#x2F;&#x2F; layout 为模板类型可以省略，title为文章标题，通常可以简写为如下</span><br><span class=\"line\">hexo new title</span><br></pre></td></tr></table></figure>\n<p>新建命令执行后在<code>_posts</code>的目录下就会生成一个你刚才命名的md后缀的文件，这就是一个MarkDown语法的文件，（如果不了解MarkDown语法的可以去学一下，很简单的符号语言，或者像我一样用支持MarkDown语法的编辑器来写文章。新建的文章打开内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: new-post</span><br><span class=\"line\">date: 2017-10-11 15:01:09</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>非常好理解，title就是标题，date为创建时间，tags是标签方便分类，但是这些并不全，还有些常用的分类没有写上，下面我将常用的进行补充</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: new-post</span><br><span class=\"line\">date: 2017-10-11 15:01:09</span><br><span class=\"line\">categories: </span><br><span class=\"line\">\t- node</span><br><span class=\"line\">\t- npm</span><br><span class=\"line\">tags:</span><br><span class=\"line\">\t- npm</span><br><span class=\"line\">\t- node</span><br><span class=\"line\">\t- rnpm</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>这样补充后就有了常见博客的分类和标签的功能，是不是很简单。</p>\n<p>写完文章以后还要执行下面命令，生成静态页面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate &#x2F;&#x2F; 将md后缀文件生成成静态html文件</span><br></pre></td></tr></table></figure>\n\n\n<p>这样我们就完成了博客的搭建和博客的书写，到现在我们就已经有了一个本地的博客，那么如何将博客上传到GitHub上呢？</p>\n<h2 id=\"将Blog上传至GitHub\"><a href=\"#将Blog上传至GitHub\" class=\"headerlink\" title=\"将Blog上传至GitHub\"></a>将Blog上传至GitHub</h2><p>github是一个代码托管的平台，为了方便描述代码功能，它提供了README.md文件进行说明，但是为了更好的展现，也提供了gitpage的功能，博客是基于这个功能进行的扩展，那么如何用gitpage的功能来实现博客系统呢？</p>\n<h3 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h3><p>创建一个以你的GitHub账号为开头命名的仓库，格式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GitHub账号名称.github.io</span><br><span class=\"line\">&#x2F;&#x2F; 如</span><br><span class=\"line\">lixuguang.github.io</span><br></pre></td></tr></table></figure>\n<p>然后到blog系统的配置文件<code>_config.yml</code>里配置一下上传路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: &lt;repository url&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#x2F;&#x2F; 我的实例</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:lixuguang&#x2F;lixuguang.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>配置好就可以进行部署了，部署也很简单，只需要执行一下下面的命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save &#x2F;&#x2F; 安装上传工具</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>稍等一会，如果没有出现什么错误信息，那么你的部署就成功了。之后你就可以访问你的博客了，博客地址如下：<br>https://你的github账号.github.io/<br>我的如下：<br><a href=\"https://lixuguang.github.io/\">https://lixuguang.github.io/</a></p>\n<p>现在你是不是已经学会如何利用github搭建一个静态的博客系统了呢，如果你还没有一个自己的技术博客，快来试试吧。</p>\n<h2 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h2><p>是不是觉得命令行还是挺麻烦的，要敲那么一大串字母，哈哈实际上这些常用命令是有缩写方式的，下面给大家介绍一下缩写方式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br><span class=\"line\">&#x2F;&#x2F; 简写</span><br><span class=\"line\">$ hexo s</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo generate</span><br><span class=\"line\">&#x2F;&#x2F; 简写</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo deploy</span><br><span class=\"line\">&#x2F;&#x2F; 简写</span><br><span class=\"line\">$ hexo d</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo new</span><br><span class=\"line\">&#x2F;&#x2F; 简写</span><br><span class=\"line\">$ hexo n</span><br></pre></td></tr></table></figure>\n\n<p>另外每次发布之前最好执行以下命令，清理当前内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<p>以防出现冲突的情况，具体动作如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g -d &#x2F;&#x2F; 文件生成后立即部署网站</span><br><span class=\"line\">$ hexo d -g &#x2F;&#x2F; 部署之前预先生成静态文件</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><ol>\n<li>SSH问题</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C &quot;lixuguang316@gmail.com&quot;</span><br><span class=\"line\">&#x2F;&#x2F; 填写你自己的github邮箱</span><br></pre></td></tr></table></figure>\n<p>敲三下回车，之后会在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\Administrator\\.ssh &#x2F;&#x2F; windows下</span><br><span class=\"line\">open ~&#x2F;.ssh &#x2F;&#x2F; Mac下打开ssh文件</span><br></pre></td></tr></table></figure>\n<p>文件夹下生成两个文件<code>id_rsa</code>（私钥）、<code>id_rsa.pub</code>（公钥），在github上的SSH处添加新的ssh，然后将<code>公钥</code>内容贴到上面起个名字可以叫hexo，保存，然后在git bash下敲击</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh git@github.com</span><br></pre></td></tr></table></figure>\n<p>然后敲<code>yes</code>就可以上传blog代码了<br>怎么样会了么？更多高阶玩法请阅读官方说明文档，文章如有谬误之处请各位指出，如果觉得文章对你有所帮助我将十分开心，如果你喜欢我的文章可以到我的github上点个<code>fork</code>，谢谢你的阅读。</p>"},{"title":"npm相关资料","date":"2017-08-30T04:24:49.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n近两年前端突然呈爆发增长之势，node的出现起了重要的作用，而node之中有一个重要的功能就是npm包管理工具，下面就记录一下我学习npm之中遇到的一些问题及解决方案，仅供各位参考。\n<!-- more -->\n\n> npm全称Node Package Manager，是node.js的模块依赖管理工具。由于npm的源在国外，所以国内用户使用起来各种不方便。下面整理出了一部分国内优秀的npm镜像资源，国内用户可以选择使用。\n\n## 国内优秀npm镜像\n\n### 淘宝npm镜像\n- 搜索地址：http://npm.taobao.org/\n- registry地址：http://registry.npm.taobao.org/\n\n### cnpmjs镜像\n- 搜索地址：http://cnpmjs.org/\n- registry地址：http://r.cnpmjs.org/\n\n## 如何使用\n有很多方法来配置npm的registry地址，下面根据不同情境列出几种比较常用的方法。以淘宝npm镜像举例：\n\n### 1.临时使用\n```\nnpm --registry https://registry.npm.taobao.org install express\n```\n### 2.持久使用\n\n```\nnpm config set registry https://registry.npm.taobao.org\n\n// 配置后可通过下面方式来验证是否成功\nnpm config get registry\n// 或\nnpm info express\n```\n### 3.通过cnpm使用\n\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n// 使用\ncnpm install express\n```\n","source":"_posts/npm-source.md","raw":"---\ntitle: npm相关资料\ndate: 2017-08-30 12:24:49\ncategories: \n\t- node\n\t- npm\ntags:\n\t- npm\n\t- node\n\t- rnpm\n---\n> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n近两年前端突然呈爆发增长之势，node的出现起了重要的作用，而node之中有一个重要的功能就是npm包管理工具，下面就记录一下我学习npm之中遇到的一些问题及解决方案，仅供各位参考。\n<!-- more -->\n\n> npm全称Node Package Manager，是node.js的模块依赖管理工具。由于npm的源在国外，所以国内用户使用起来各种不方便。下面整理出了一部分国内优秀的npm镜像资源，国内用户可以选择使用。\n\n## 国内优秀npm镜像\n\n### 淘宝npm镜像\n- 搜索地址：http://npm.taobao.org/\n- registry地址：http://registry.npm.taobao.org/\n\n### cnpmjs镜像\n- 搜索地址：http://cnpmjs.org/\n- registry地址：http://r.cnpmjs.org/\n\n## 如何使用\n有很多方法来配置npm的registry地址，下面根据不同情境列出几种比较常用的方法。以淘宝npm镜像举例：\n\n### 1.临时使用\n```\nnpm --registry https://registry.npm.taobao.org install express\n```\n### 2.持久使用\n\n```\nnpm config set registry https://registry.npm.taobao.org\n\n// 配置后可通过下面方式来验证是否成功\nnpm config get registry\n// 或\nnpm info express\n```\n### 3.通过cnpm使用\n\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n// 使用\ncnpm install express\n```\n","slug":"npm-source","published":1,"updated":"2019-12-20T02:50:12.395Z","_id":"ck4ilitsh000z1ka616ke5ctz","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>近两年前端突然呈爆发增长之势，node的出现起了重要的作用，而node之中有一个重要的功能就是npm包管理工具，下面就记录一下我学习npm之中遇到的一些问题及解决方案，仅供各位参考。</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>npm全称Node Package Manager，是node.js的模块依赖管理工具。由于npm的源在国外，所以国内用户使用起来各种不方便。下面整理出了一部分国内优秀的npm镜像资源，国内用户可以选择使用。</p>\n</blockquote>\n<h2 id=\"国内优秀npm镜像\"><a href=\"#国内优秀npm镜像\" class=\"headerlink\" title=\"国内优秀npm镜像\"></a>国内优秀npm镜像</h2><h3 id=\"淘宝npm镜像\"><a href=\"#淘宝npm镜像\" class=\"headerlink\" title=\"淘宝npm镜像\"></a>淘宝npm镜像</h3><ul>\n<li>搜索地址：<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">http://npm.taobao.org/</a></li>\n<li>registry地址：<a href=\"http://registry.npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">http://registry.npm.taobao.org/</a></li>\n</ul>\n<h3 id=\"cnpmjs镜像\"><a href=\"#cnpmjs镜像\" class=\"headerlink\" title=\"cnpmjs镜像\"></a>cnpmjs镜像</h3><ul>\n<li>搜索地址：<a href=\"http://cnpmjs.org/\" target=\"_blank\" rel=\"noopener\">http://cnpmjs.org/</a></li>\n<li>registry地址：<a href=\"http://r.cnpmjs.org/\" target=\"_blank\" rel=\"noopener\">http://r.cnpmjs.org/</a></li>\n</ul>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>有很多方法来配置npm的registry地址，下面根据不同情境列出几种比较常用的方法。以淘宝npm镜像举例：</p>\n<h3 id=\"1-临时使用\"><a href=\"#1-临时使用\" class=\"headerlink\" title=\"1.临时使用\"></a>1.临时使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm --registry https:&#x2F;&#x2F;registry.npm.taobao.org install express</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-持久使用\"><a href=\"#2-持久使用\" class=\"headerlink\" title=\"2.持久使用\"></a>2.持久使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 配置后可通过下面方式来验证是否成功</span><br><span class=\"line\">npm config get registry</span><br><span class=\"line\">&#x2F;&#x2F; 或</span><br><span class=\"line\">npm info express</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-通过cnpm使用\"><a href=\"#3-通过cnpm使用\" class=\"headerlink\" title=\"3.通过cnpm使用\"></a>3.通过cnpm使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 使用</span><br><span class=\"line\">cnpm install express</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>近两年前端突然呈爆发增长之势，node的出现起了重要的作用，而node之中有一个重要的功能就是npm包管理工具，下面就记录一下我学习npm之中遇到的一些问题及解决方案，仅供各位参考。</p>","more":"<blockquote>\n<p>npm全称Node Package Manager，是node.js的模块依赖管理工具。由于npm的源在国外，所以国内用户使用起来各种不方便。下面整理出了一部分国内优秀的npm镜像资源，国内用户可以选择使用。</p>\n</blockquote>\n<h2 id=\"国内优秀npm镜像\"><a href=\"#国内优秀npm镜像\" class=\"headerlink\" title=\"国内优秀npm镜像\"></a>国内优秀npm镜像</h2><h3 id=\"淘宝npm镜像\"><a href=\"#淘宝npm镜像\" class=\"headerlink\" title=\"淘宝npm镜像\"></a>淘宝npm镜像</h3><ul>\n<li>搜索地址：<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">http://npm.taobao.org/</a></li>\n<li>registry地址：<a href=\"http://registry.npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">http://registry.npm.taobao.org/</a></li>\n</ul>\n<h3 id=\"cnpmjs镜像\"><a href=\"#cnpmjs镜像\" class=\"headerlink\" title=\"cnpmjs镜像\"></a>cnpmjs镜像</h3><ul>\n<li>搜索地址：<a href=\"http://cnpmjs.org/\" target=\"_blank\" rel=\"noopener\">http://cnpmjs.org/</a></li>\n<li>registry地址：<a href=\"http://r.cnpmjs.org/\" target=\"_blank\" rel=\"noopener\">http://r.cnpmjs.org/</a></li>\n</ul>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>有很多方法来配置npm的registry地址，下面根据不同情境列出几种比较常用的方法。以淘宝npm镜像举例：</p>\n<h3 id=\"1-临时使用\"><a href=\"#1-临时使用\" class=\"headerlink\" title=\"1.临时使用\"></a>1.临时使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm --registry https:&#x2F;&#x2F;registry.npm.taobao.org install express</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-持久使用\"><a href=\"#2-持久使用\" class=\"headerlink\" title=\"2.持久使用\"></a>2.持久使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 配置后可通过下面方式来验证是否成功</span><br><span class=\"line\">npm config get registry</span><br><span class=\"line\">&#x2F;&#x2F; 或</span><br><span class=\"line\">npm info express</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-通过cnpm使用\"><a href=\"#3-通过cnpm使用\" class=\"headerlink\" title=\"3.通过cnpm使用\"></a>3.通过cnpm使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 使用</span><br><span class=\"line\">cnpm install express</span><br></pre></td></tr></table></figure>"},{"title":"浏览器兼容性问题解决方案","date":"2017-08-29T09:04:31.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n作为前端，浏览器就是你的战场，而不同的浏览器就是不同的敌人，敌人有相同之处，也各有特点，这不同的特点就是不同浏览器的兼容性，下面就聊聊浏览器的兼容问题，如何解决不同浏览器的兼容性。\n<!-- more -->\n**普及**：浏览器的兼容性问题，往往是个别浏览器（没错，就是那个与众不同的浏览器）对于一些标准的定义不一致导致的。俗话说：没有IE就没有伤害。\n\n**贴士**：内容都是自己总结的，不免会出现错误或者bug，欢迎更正和补充，本帖也会不断更新。\n\n#### Normalize.css\n不同浏览器的默认样式存在差异，可以使用 `Normalize.css`抹平这些差异。当然，你也可以定制属于自己业务的 `reset.css`\n\n```\n<link href=\"https://cdn.bootcss.com/normalize/7.0.0/normalize.min.css\" rel=\"stylesheet\">\n```\n简单粗暴法\n\n```\n* { margin: 0; padding: 0; }\n```\n#### html5shiv.js\n解决 ie9 以下浏览器对 html5 新增标签不识别的问题。\n\n```\n<!--[if lt IE 9]>\n  <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/html5shiv/3.7.3/html5shiv.min.js\"></script>\n<![endif]-->\n```\n<!-- more -->\n#### respond.js\n解决 ie9 以下浏览器不支持 CSS3 Media Query 的问题。\n\n```\n<script src=\"https://cdn.bootcss.com/picturefill/3.0.3/picturefill.min.js\"></script>\n```\n#### IE 条件注释\nIE 的条件注释仅仅针对IE浏览器，对其他浏览器无效\n![image](https://user-gold-cdn.xitu.io/2017/8/28/31714eaf3a9bc272c50dbf1e1279f14b?imageView2/0/w/1280/h/960)\n\n#### IE 属性过滤器（较为常用的hack方法）\n针对不同的 IE 浏览器，可以使用不同的字符来对特定的版本的 IE 浏览器进行样式控制\n![image](https://user-gold-cdn.xitu.io/2017/8/28/e8c1a14cca725798b5aaa88bf5d23de8?imageView2/0/w/1280/h/960)\n![image](https://user-gold-cdn.xitu.io/2017/8/28/ad406608b75744baa6f89ae3c26ba69d?imageView2/0/w/1280/h/960)\n\n#### 浏览器 CSS 兼容前缀\n\n```\n-o-transform:rotate(7deg); // Opera\n\n-ms-transform:rotate(7deg); // IE\n\n-moz-transform:rotate(7deg); // Firefox\n\n-webkit-transform:rotate(7deg); // Chrome\n\ntransform:rotate(7deg); // 统一标识语句\n```\n\n#### a 标签的几种 CSS 状态的顺序\n很多新人在写 a 标签的样式，会疑惑为什么写的样式没有效果，或者点击超链接后，hover、active 样式没有效果，其实只是写的样式被覆盖了。\n\n正确的a标签顺序应该是：`==love hate==`\n\n1. link:平常的状态\n2. visited:被访问过之后\n3. hover:鼠标放到链接上的时候\n4. active:链接被按下的时候\n\n\n#### 完美解决 `Placeholder`\n\n```\n<input type=\"text\" value=\"Name *\" onFocus=\"this.value = '';\" onBlur=\"if (this.value == '') {this.value = 'Name *';}\">\n```\n\n#### 清除浮动 最佳实践\n\n```\n.fl { float: left; }\n.fr { float: right; }\n.clearfix:after { display: block; clear: both; content: \"\"; visibility: hidden; height: 0; }\n.clearfix { zoom: 1; }\n```\n\n#### BFC 解决边距重叠问题\n当相邻元素都设置了 margin 边距时，margin 将取最大值，舍弃小值。为了不让边距重叠，可以给子元素加一个父元素，并设置该父元素为 BFC：`overflow: hidden`;\n\n<div class=\"box\" id=\"box\">\n  <p>Lorem ipsum dolor sit.</p>\n\n  <div style=\"overflow: hidden;\">\n    <p>Lorem ipsum dolor sit.</p>\n  </div>\n\n  <p>Lorem ipsum dolor sit.</p>\n</div>\n\n#### IE6 双倍边距的问题\n设置 ie6 中设置浮动，同时又设置 `margin`，会出现双倍边距的问题\n\n\n```\ndisplay: inline;\n```\n#### 解决 IE9 以下浏览器不能使用 opacity\n\n```\nopacity: 0.5;\nfilter: alpha(opacity = 50);\nfilter: progid:DXImageTransform.Microsoft.Alpha(style = 0, opacity = 50);\n```\n#### 解决 IE6 不支持 fixed 绝对定位以及IE6下被绝对定位的元素在滚动的时候会闪动的问题\n\n```\n/* IE6 hack */\n*html, *html body {\n  background-image: url(about:blank);\n  background-attachment: fixed;\n}\n*html #menu {\n  position: absolute;\n  top: expression(((e=document.documentElement.scrollTop) ? e : document.body.scrollTop) + 100 + 'px');\n}\n```\n#### IE6 背景闪烁的问题\n问题：链接、按钮用 CSSsprites 作为背景，在 ie6 下会有背景图闪烁的现象。原因是 IE6 没有将背景图缓存，每次触发 hover 的时候都会重新加载\n\n解决：可以用 JavaScript 设置 ie6 缓存这些图片：\n\n\n```\ndocument.execCommand(\"BackgroundImageCache\", false, true);\n```\n#### 解决在 IE6 下，列表与日期错位的问题\n\n日期<span> 标签放在标题 <a> 标签之前即可\n![image](https://user-gold-cdn.xitu.io/2017/8/28/6797c276197029d941ee577d877d6be3?imageView2/0/w/1280/h/960)\n#### 解决 IE6 不支持 min-height 属性的问题\n\n```\nmin-height: 350px;\n_height: 350px;\n```\n\n#### 让 IE7 IE8 支持 CSS3 background-size属性\n由于 background-size 是 CSS3 新增的属性，所以 IE 低版本自然就不支持了，但是老外写了一个 htc 文件，名叫 background-size polyfill，使用该文件能够让 IE7、IE8 支持 background-size 属性。其原理是创建一个 img 元素插入到容器中，并重新计算宽度、高度、left、top 等值，模拟 background-size 的效果。\n\n```\nhtml {\n  height: 100%;\n}\nbody {\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  background-image: url('img/37.png');\n  background-repeat: no-repeat;\n  background-size: cover;\n  -ms-behavior: url('css/backgroundsize.min.htc');\n  behavior: url('css/backgroundsize.min.htc');\n}\n```\n#### IE6-7 line-height 失效的问题\n\n问题：在ie 中 img 与文字放一起时，line-height 不起作用\n\n解决：都设置成 float\n\n#### td 自动换行的问题\n问题：table 宽度固定，td 自动换行\n\n解决：设置 `Tabl`e 为 `table-layout: fixed`，`td` 为 `word-wrap: break-word`\n\n#### 让层显示在 FLASH 之上\n想让层的内容显示在 flash 上，把 FLASH 设置透明即可\n\n```\n1、<param name=\" wmode \" value=\"transparent\" />\n2、<param name=\"wmode\" value=\"opaque\"/>\n```\n#### 键盘事件 keyCode 兼容性写法\n\n\n```\nvar inp = document.getElementById('inp')\nvar result = document.getElementById('result')\n\nfunction getKeyCode(e) {\n  e = e ? e : (window.event ? window.event : \"\")\n  return e.keyCode ? e.keyCode : e.which\n}\n\ninp.onkeypress = function(e) {\n  result.innerHTML = getKeyCode(e)\n}\n```\n\n#### 求窗口大小的兼容写法\n\n```\n// 浏览器窗口可视区域大小（不包括工具栏和滚动条等边线）\n// 1600 * 525\nvar client_w = document.documentElement.clientWidth || document.body.clientWidth;\nvar client_h = document.documentElement.clientHeight || document.body.clientHeight;\n\n// 网页内容实际宽高（包括工具栏和滚动条等边线）\n// 1600 * 8\nvar scroll_w = document.documentElement.scrollWidth || document.body.scrollWidth;\nvar scroll_h = document.documentElement.scrollHeight || document.body.scrollHeight;\n\n// 网页内容实际宽高 (不包括工具栏和滚动条等边线）\n// 1600 * 8\nvar offset_w = document.documentElement.offsetWidth || document.body.offsetWidth;\nvar offset_h = document.documentElement.offsetHeight || document.body.offsetHeight;\n\n// 滚动的高度\nvar scroll_Top = document.documentElement.scrollTop||document.body.scrollTop;\n```\n#### DOM 事件处理程序的兼容写法（能力检测）\n\n\n```\nvar eventshiv = {\n    // event兼容\n    getEvent: function(event) {\n        return event ? event : window.event;\n    },\n\n    // type兼容\n    getType: function(event) {\n        return event.type;\n    },\n\n    // target兼容\n    getTarget: function(event) {\n        return event.target ? event.target : event.srcelem;\n    },\n\n    // 添加事件句柄\n    addHandler: function(elem, type, listener) {\n        if (elem.addEventListener) {\n            elem.addEventListener(type, listener, false);\n        } else if (elem.attachEvent) {\n            elem.attachEvent('on' + type, listener);\n        } else {\n            // 在这里由于.与'on'字符串不能链接，只能用 []\n            elem['on' + type] = listener;\n        }\n    },\n\n    // 移除事件句柄\n    removeHandler: function(elem, type, listener) {\n        if (elem.removeEventListener) {\n            elem.removeEventListener(type, listener, false);\n        } else if (elem.detachEvent) {\n            elem.detachEvent('on' + type, listener);\n        } else {\n            elem['on' + type] = null;\n        }\n    },\n\n    // 添加事件代理\n    addAgent: function (elem, type, agent, listener) {\n        elem.addEventListener(type, function (e) {\n            if (e.target.matches(agent)) {\n                listener.call(e.target, e); // this 指向 e.target\n            }\n        });\n    },\n\n    // 取消默认行为\n    preventDefault: function(event) {\n        if (event.preventDefault) {\n            event.preventDefault();\n        } else {\n            event.returnValue = false;\n        }\n    },\n\n    // 阻止事件冒泡\n    stopPropagation: function(event) {\n        if (event.stopPropagation) {\n            event.stopPropagation();\n        } else {\n            event.cancelBubble = true;\n        }\n    }\n};\n```\n","source":"_posts/browser-incompatibility problem-solution.md","raw":"---\ntitle: 浏览器兼容性问题解决方案\ndate: 2017-08-29 17:04:31\ncategories: IE兼容性问题\ntags: \n\t- 浏览器兼容问题\n---\n> 作者：李旭光\n> 引用请标明出处\n\n# 前言\n作为前端，浏览器就是你的战场，而不同的浏览器就是不同的敌人，敌人有相同之处，也各有特点，这不同的特点就是不同浏览器的兼容性，下面就聊聊浏览器的兼容问题，如何解决不同浏览器的兼容性。\n<!-- more -->\n**普及**：浏览器的兼容性问题，往往是个别浏览器（没错，就是那个与众不同的浏览器）对于一些标准的定义不一致导致的。俗话说：没有IE就没有伤害。\n\n**贴士**：内容都是自己总结的，不免会出现错误或者bug，欢迎更正和补充，本帖也会不断更新。\n\n#### Normalize.css\n不同浏览器的默认样式存在差异，可以使用 `Normalize.css`抹平这些差异。当然，你也可以定制属于自己业务的 `reset.css`\n\n```\n<link href=\"https://cdn.bootcss.com/normalize/7.0.0/normalize.min.css\" rel=\"stylesheet\">\n```\n简单粗暴法\n\n```\n* { margin: 0; padding: 0; }\n```\n#### html5shiv.js\n解决 ie9 以下浏览器对 html5 新增标签不识别的问题。\n\n```\n<!--[if lt IE 9]>\n  <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/html5shiv/3.7.3/html5shiv.min.js\"></script>\n<![endif]-->\n```\n<!-- more -->\n#### respond.js\n解决 ie9 以下浏览器不支持 CSS3 Media Query 的问题。\n\n```\n<script src=\"https://cdn.bootcss.com/picturefill/3.0.3/picturefill.min.js\"></script>\n```\n#### IE 条件注释\nIE 的条件注释仅仅针对IE浏览器，对其他浏览器无效\n![image](https://user-gold-cdn.xitu.io/2017/8/28/31714eaf3a9bc272c50dbf1e1279f14b?imageView2/0/w/1280/h/960)\n\n#### IE 属性过滤器（较为常用的hack方法）\n针对不同的 IE 浏览器，可以使用不同的字符来对特定的版本的 IE 浏览器进行样式控制\n![image](https://user-gold-cdn.xitu.io/2017/8/28/e8c1a14cca725798b5aaa88bf5d23de8?imageView2/0/w/1280/h/960)\n![image](https://user-gold-cdn.xitu.io/2017/8/28/ad406608b75744baa6f89ae3c26ba69d?imageView2/0/w/1280/h/960)\n\n#### 浏览器 CSS 兼容前缀\n\n```\n-o-transform:rotate(7deg); // Opera\n\n-ms-transform:rotate(7deg); // IE\n\n-moz-transform:rotate(7deg); // Firefox\n\n-webkit-transform:rotate(7deg); // Chrome\n\ntransform:rotate(7deg); // 统一标识语句\n```\n\n#### a 标签的几种 CSS 状态的顺序\n很多新人在写 a 标签的样式，会疑惑为什么写的样式没有效果，或者点击超链接后，hover、active 样式没有效果，其实只是写的样式被覆盖了。\n\n正确的a标签顺序应该是：`==love hate==`\n\n1. link:平常的状态\n2. visited:被访问过之后\n3. hover:鼠标放到链接上的时候\n4. active:链接被按下的时候\n\n\n#### 完美解决 `Placeholder`\n\n```\n<input type=\"text\" value=\"Name *\" onFocus=\"this.value = '';\" onBlur=\"if (this.value == '') {this.value = 'Name *';}\">\n```\n\n#### 清除浮动 最佳实践\n\n```\n.fl { float: left; }\n.fr { float: right; }\n.clearfix:after { display: block; clear: both; content: \"\"; visibility: hidden; height: 0; }\n.clearfix { zoom: 1; }\n```\n\n#### BFC 解决边距重叠问题\n当相邻元素都设置了 margin 边距时，margin 将取最大值，舍弃小值。为了不让边距重叠，可以给子元素加一个父元素，并设置该父元素为 BFC：`overflow: hidden`;\n\n<div class=\"box\" id=\"box\">\n  <p>Lorem ipsum dolor sit.</p>\n\n  <div style=\"overflow: hidden;\">\n    <p>Lorem ipsum dolor sit.</p>\n  </div>\n\n  <p>Lorem ipsum dolor sit.</p>\n</div>\n\n#### IE6 双倍边距的问题\n设置 ie6 中设置浮动，同时又设置 `margin`，会出现双倍边距的问题\n\n\n```\ndisplay: inline;\n```\n#### 解决 IE9 以下浏览器不能使用 opacity\n\n```\nopacity: 0.5;\nfilter: alpha(opacity = 50);\nfilter: progid:DXImageTransform.Microsoft.Alpha(style = 0, opacity = 50);\n```\n#### 解决 IE6 不支持 fixed 绝对定位以及IE6下被绝对定位的元素在滚动的时候会闪动的问题\n\n```\n/* IE6 hack */\n*html, *html body {\n  background-image: url(about:blank);\n  background-attachment: fixed;\n}\n*html #menu {\n  position: absolute;\n  top: expression(((e=document.documentElement.scrollTop) ? e : document.body.scrollTop) + 100 + 'px');\n}\n```\n#### IE6 背景闪烁的问题\n问题：链接、按钮用 CSSsprites 作为背景，在 ie6 下会有背景图闪烁的现象。原因是 IE6 没有将背景图缓存，每次触发 hover 的时候都会重新加载\n\n解决：可以用 JavaScript 设置 ie6 缓存这些图片：\n\n\n```\ndocument.execCommand(\"BackgroundImageCache\", false, true);\n```\n#### 解决在 IE6 下，列表与日期错位的问题\n\n日期<span> 标签放在标题 <a> 标签之前即可\n![image](https://user-gold-cdn.xitu.io/2017/8/28/6797c276197029d941ee577d877d6be3?imageView2/0/w/1280/h/960)\n#### 解决 IE6 不支持 min-height 属性的问题\n\n```\nmin-height: 350px;\n_height: 350px;\n```\n\n#### 让 IE7 IE8 支持 CSS3 background-size属性\n由于 background-size 是 CSS3 新增的属性，所以 IE 低版本自然就不支持了，但是老外写了一个 htc 文件，名叫 background-size polyfill，使用该文件能够让 IE7、IE8 支持 background-size 属性。其原理是创建一个 img 元素插入到容器中，并重新计算宽度、高度、left、top 等值，模拟 background-size 的效果。\n\n```\nhtml {\n  height: 100%;\n}\nbody {\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  background-image: url('img/37.png');\n  background-repeat: no-repeat;\n  background-size: cover;\n  -ms-behavior: url('css/backgroundsize.min.htc');\n  behavior: url('css/backgroundsize.min.htc');\n}\n```\n#### IE6-7 line-height 失效的问题\n\n问题：在ie 中 img 与文字放一起时，line-height 不起作用\n\n解决：都设置成 float\n\n#### td 自动换行的问题\n问题：table 宽度固定，td 自动换行\n\n解决：设置 `Tabl`e 为 `table-layout: fixed`，`td` 为 `word-wrap: break-word`\n\n#### 让层显示在 FLASH 之上\n想让层的内容显示在 flash 上，把 FLASH 设置透明即可\n\n```\n1、<param name=\" wmode \" value=\"transparent\" />\n2、<param name=\"wmode\" value=\"opaque\"/>\n```\n#### 键盘事件 keyCode 兼容性写法\n\n\n```\nvar inp = document.getElementById('inp')\nvar result = document.getElementById('result')\n\nfunction getKeyCode(e) {\n  e = e ? e : (window.event ? window.event : \"\")\n  return e.keyCode ? e.keyCode : e.which\n}\n\ninp.onkeypress = function(e) {\n  result.innerHTML = getKeyCode(e)\n}\n```\n\n#### 求窗口大小的兼容写法\n\n```\n// 浏览器窗口可视区域大小（不包括工具栏和滚动条等边线）\n// 1600 * 525\nvar client_w = document.documentElement.clientWidth || document.body.clientWidth;\nvar client_h = document.documentElement.clientHeight || document.body.clientHeight;\n\n// 网页内容实际宽高（包括工具栏和滚动条等边线）\n// 1600 * 8\nvar scroll_w = document.documentElement.scrollWidth || document.body.scrollWidth;\nvar scroll_h = document.documentElement.scrollHeight || document.body.scrollHeight;\n\n// 网页内容实际宽高 (不包括工具栏和滚动条等边线）\n// 1600 * 8\nvar offset_w = document.documentElement.offsetWidth || document.body.offsetWidth;\nvar offset_h = document.documentElement.offsetHeight || document.body.offsetHeight;\n\n// 滚动的高度\nvar scroll_Top = document.documentElement.scrollTop||document.body.scrollTop;\n```\n#### DOM 事件处理程序的兼容写法（能力检测）\n\n\n```\nvar eventshiv = {\n    // event兼容\n    getEvent: function(event) {\n        return event ? event : window.event;\n    },\n\n    // type兼容\n    getType: function(event) {\n        return event.type;\n    },\n\n    // target兼容\n    getTarget: function(event) {\n        return event.target ? event.target : event.srcelem;\n    },\n\n    // 添加事件句柄\n    addHandler: function(elem, type, listener) {\n        if (elem.addEventListener) {\n            elem.addEventListener(type, listener, false);\n        } else if (elem.attachEvent) {\n            elem.attachEvent('on' + type, listener);\n        } else {\n            // 在这里由于.与'on'字符串不能链接，只能用 []\n            elem['on' + type] = listener;\n        }\n    },\n\n    // 移除事件句柄\n    removeHandler: function(elem, type, listener) {\n        if (elem.removeEventListener) {\n            elem.removeEventListener(type, listener, false);\n        } else if (elem.detachEvent) {\n            elem.detachEvent('on' + type, listener);\n        } else {\n            elem['on' + type] = null;\n        }\n    },\n\n    // 添加事件代理\n    addAgent: function (elem, type, agent, listener) {\n        elem.addEventListener(type, function (e) {\n            if (e.target.matches(agent)) {\n                listener.call(e.target, e); // this 指向 e.target\n            }\n        });\n    },\n\n    // 取消默认行为\n    preventDefault: function(event) {\n        if (event.preventDefault) {\n            event.preventDefault();\n        } else {\n            event.returnValue = false;\n        }\n    },\n\n    // 阻止事件冒泡\n    stopPropagation: function(event) {\n        if (event.stopPropagation) {\n            event.stopPropagation();\n        } else {\n            event.cancelBubble = true;\n        }\n    }\n};\n```\n","slug":"browser-incompatibility problem-solution","published":1,"updated":"2019-12-20T02:50:12.395Z","_id":"ck4ilitsl00191ka6f57odgac","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>作为前端，浏览器就是你的战场，而不同的浏览器就是不同的敌人，敌人有相同之处，也各有特点，这不同的特点就是不同浏览器的兼容性，下面就聊聊浏览器的兼容问题，如何解决不同浏览器的兼容性。</p>\n<a id=\"more\"></a>\n<p><strong>普及</strong>：浏览器的兼容性问题，往往是个别浏览器（没错，就是那个与众不同的浏览器）对于一些标准的定义不一致导致的。俗话说：没有IE就没有伤害。</p>\n<p><strong>贴士</strong>：内容都是自己总结的，不免会出现错误或者bug，欢迎更正和补充，本帖也会不断更新。</p>\n<h4 id=\"Normalize-css\"><a href=\"#Normalize-css\" class=\"headerlink\" title=\"Normalize.css\"></a>Normalize.css</h4><p>不同浏览器的默认样式存在差异，可以使用 <code>Normalize.css</code>抹平这些差异。当然，你也可以定制属于自己业务的 <code>reset.css</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;normalize&#x2F;7.0.0&#x2F;normalize.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>简单粗暴法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123; margin: 0; padding: 0; &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"html5shiv-js\"><a href=\"#html5shiv-js\" class=\"headerlink\" title=\"html5shiv.js\"></a>html5shiv.js</h4><p>解决 ie9 以下浏览器对 html5 新增标签不识别的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--[if lt IE 9]&gt;</span><br><span class=\"line\">  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;html5shiv&#x2F;3.7.3&#x2F;html5shiv.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure>\n<!-- more -->\n<h4 id=\"respond-js\"><a href=\"#respond-js\" class=\"headerlink\" title=\"respond.js\"></a>respond.js</h4><p>解决 ie9 以下浏览器不支持 CSS3 Media Query 的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;picturefill&#x2F;3.0.3&#x2F;picturefill.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"IE-条件注释\"><a href=\"#IE-条件注释\" class=\"headerlink\" title=\"IE 条件注释\"></a>IE 条件注释</h4><p>IE 的条件注释仅仅针对IE浏览器，对其他浏览器无效<br><img src=\"https://user-gold-cdn.xitu.io/2017/8/28/31714eaf3a9bc272c50dbf1e1279f14b?imageView2/0/w/1280/h/960\" alt=\"image\"></p>\n<h4 id=\"IE-属性过滤器（较为常用的hack方法）\"><a href=\"#IE-属性过滤器（较为常用的hack方法）\" class=\"headerlink\" title=\"IE 属性过滤器（较为常用的hack方法）\"></a>IE 属性过滤器（较为常用的hack方法）</h4><p>针对不同的 IE 浏览器，可以使用不同的字符来对特定的版本的 IE 浏览器进行样式控制<br><img src=\"https://user-gold-cdn.xitu.io/2017/8/28/e8c1a14cca725798b5aaa88bf5d23de8?imageView2/0/w/1280/h/960\" alt=\"image\"><br><img src=\"https://user-gold-cdn.xitu.io/2017/8/28/ad406608b75744baa6f89ae3c26ba69d?imageView2/0/w/1280/h/960\" alt=\"image\"></p>\n<h4 id=\"浏览器-CSS-兼容前缀\"><a href=\"#浏览器-CSS-兼容前缀\" class=\"headerlink\" title=\"浏览器 CSS 兼容前缀\"></a>浏览器 CSS 兼容前缀</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-o-transform:rotate(7deg); &#x2F;&#x2F; Opera</span><br><span class=\"line\"></span><br><span class=\"line\">-ms-transform:rotate(7deg); &#x2F;&#x2F; IE</span><br><span class=\"line\"></span><br><span class=\"line\">-moz-transform:rotate(7deg); &#x2F;&#x2F; Firefox</span><br><span class=\"line\"></span><br><span class=\"line\">-webkit-transform:rotate(7deg); &#x2F;&#x2F; Chrome</span><br><span class=\"line\"></span><br><span class=\"line\">transform:rotate(7deg); &#x2F;&#x2F; 统一标识语句</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"a-标签的几种-CSS-状态的顺序\"><a href=\"#a-标签的几种-CSS-状态的顺序\" class=\"headerlink\" title=\"a 标签的几种 CSS 状态的顺序\"></a>a 标签的几种 CSS 状态的顺序</h4><p>很多新人在写 a 标签的样式，会疑惑为什么写的样式没有效果，或者点击超链接后，hover、active 样式没有效果，其实只是写的样式被覆盖了。</p>\n<p>正确的a标签顺序应该是：<code>==love hate==</code></p>\n<ol>\n<li>link:平常的状态</li>\n<li>visited:被访问过之后</li>\n<li>hover:鼠标放到链接上的时候</li>\n<li>active:链接被按下的时候</li>\n</ol>\n<h4 id=\"完美解决-Placeholder\"><a href=\"#完美解决-Placeholder\" class=\"headerlink\" title=\"完美解决 Placeholder\"></a>完美解决 <code>Placeholder</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; value&#x3D;&quot;Name *&quot; onFocus&#x3D;&quot;this.value &#x3D; &#39;&#39;;&quot; onBlur&#x3D;&quot;if (this.value &#x3D;&#x3D; &#39;&#39;) &#123;this.value &#x3D; &#39;Name *&#39;;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"清除浮动-最佳实践\"><a href=\"#清除浮动-最佳实践\" class=\"headerlink\" title=\"清除浮动 最佳实践\"></a>清除浮动 最佳实践</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.fl &#123; float: left; &#125;</span><br><span class=\"line\">.fr &#123; float: right; &#125;</span><br><span class=\"line\">.clearfix:after &#123; display: block; clear: both; content: &quot;&quot;; visibility: hidden; height: 0; &#125;</span><br><span class=\"line\">.clearfix &#123; zoom: 1; &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"BFC-解决边距重叠问题\"><a href=\"#BFC-解决边距重叠问题\" class=\"headerlink\" title=\"BFC 解决边距重叠问题\"></a>BFC 解决边距重叠问题</h4><p>当相邻元素都设置了 margin 边距时，margin 将取最大值，舍弃小值。为了不让边距重叠，可以给子元素加一个父元素，并设置该父元素为 BFC：<code>overflow: hidden</code>;</p>\n<div class=\"box\" id=\"box\">\n  <p>Lorem ipsum dolor sit.</p>\n\n  <div style=\"overflow: hidden;\">\n    <p>Lorem ipsum dolor sit.</p>\n  </div>\n\n  <p>Lorem ipsum dolor sit.</p>\n</div>\n\n<h4 id=\"IE6-双倍边距的问题\"><a href=\"#IE6-双倍边距的问题\" class=\"headerlink\" title=\"IE6 双倍边距的问题\"></a>IE6 双倍边距的问题</h4><p>设置 ie6 中设置浮动，同时又设置 <code>margin</code>，会出现双倍边距的问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: inline;</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决-IE9-以下浏览器不能使用-opacity\"><a href=\"#解决-IE9-以下浏览器不能使用-opacity\" class=\"headerlink\" title=\"解决 IE9 以下浏览器不能使用 opacity\"></a>解决 IE9 以下浏览器不能使用 opacity</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opacity: 0.5;</span><br><span class=\"line\">filter: alpha(opacity &#x3D; 50);</span><br><span class=\"line\">filter: progid:DXImageTransform.Microsoft.Alpha(style &#x3D; 0, opacity &#x3D; 50);</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决-IE6-不支持-fixed-绝对定位以及IE6下被绝对定位的元素在滚动的时候会闪动的问题\"><a href=\"#解决-IE6-不支持-fixed-绝对定位以及IE6下被绝对定位的元素在滚动的时候会闪动的问题\" class=\"headerlink\" title=\"解决 IE6 不支持 fixed 绝对定位以及IE6下被绝对定位的元素在滚动的时候会闪动的问题\"></a>解决 IE6 不支持 fixed 绝对定位以及IE6下被绝对定位的元素在滚动的时候会闪动的问题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;* IE6 hack *&#x2F;</span><br><span class=\"line\">*html, *html body &#123;</span><br><span class=\"line\">  background-image: url(about:blank);</span><br><span class=\"line\">  background-attachment: fixed;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*html #menu &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  top: expression(((e&#x3D;document.documentElement.scrollTop) ? e : document.body.scrollTop) + 100 + &#39;px&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"IE6-背景闪烁的问题\"><a href=\"#IE6-背景闪烁的问题\" class=\"headerlink\" title=\"IE6 背景闪烁的问题\"></a>IE6 背景闪烁的问题</h4><p>问题：链接、按钮用 CSSsprites 作为背景，在 ie6 下会有背景图闪烁的现象。原因是 IE6 没有将背景图缓存，每次触发 hover 的时候都会重新加载</p>\n<p>解决：可以用 JavaScript 设置 ie6 缓存这些图片：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.execCommand(&quot;BackgroundImageCache&quot;, false, true);</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决在-IE6-下，列表与日期错位的问题\"><a href=\"#解决在-IE6-下，列表与日期错位的问题\" class=\"headerlink\" title=\"解决在 IE6 下，列表与日期错位的问题\"></a>解决在 IE6 下，列表与日期错位的问题</h4><p>日期<span> 标签放在标题 <a> 标签之前即可<br><img src=\"https://user-gold-cdn.xitu.io/2017/8/28/6797c276197029d941ee577d877d6be3?imageView2/0/w/1280/h/960\" alt=\"image\"></p>\n<h4 id=\"解决-IE6-不支持-min-height-属性的问题\"><a href=\"#解决-IE6-不支持-min-height-属性的问题\" class=\"headerlink\" title=\"解决 IE6 不支持 min-height 属性的问题\"></a>解决 IE6 不支持 min-height 属性的问题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">min-height: 350px;</span><br><span class=\"line\">_height: 350px;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"让-IE7-IE8-支持-CSS3-background-size属性\"><a href=\"#让-IE7-IE8-支持-CSS3-background-size属性\" class=\"headerlink\" title=\"让 IE7 IE8 支持 CSS3 background-size属性\"></a>让 IE7 IE8 支持 CSS3 background-size属性</h4><p>由于 background-size 是 CSS3 新增的属性，所以 IE 低版本自然就不支持了，但是老外写了一个 htc 文件，名叫 background-size polyfill，使用该文件能够让 IE7、IE8 支持 background-size 属性。其原理是创建一个 img 元素插入到容器中，并重新计算宽度、高度、left、top 等值，模拟 background-size 的效果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html &#123;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">  padding: 0;</span><br><span class=\"line\">  background-image: url(&#39;img&#x2F;37.png&#39;);</span><br><span class=\"line\">  background-repeat: no-repeat;</span><br><span class=\"line\">  background-size: cover;</span><br><span class=\"line\">  -ms-behavior: url(&#39;css&#x2F;backgroundsize.min.htc&#39;);</span><br><span class=\"line\">  behavior: url(&#39;css&#x2F;backgroundsize.min.htc&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"IE6-7-line-height-失效的问题\"><a href=\"#IE6-7-line-height-失效的问题\" class=\"headerlink\" title=\"IE6-7 line-height 失效的问题\"></a>IE6-7 line-height 失效的问题</h4><p>问题：在ie 中 img 与文字放一起时，line-height 不起作用</p>\n<p>解决：都设置成 float</p>\n<h4 id=\"td-自动换行的问题\"><a href=\"#td-自动换行的问题\" class=\"headerlink\" title=\"td 自动换行的问题\"></a>td 自动换行的问题</h4><p>问题：table 宽度固定，td 自动换行</p>\n<p>解决：设置 <code>Tabl</code>e 为 <code>table-layout: fixed</code>，<code>td</code> 为 <code>word-wrap: break-word</code></p>\n<h4 id=\"让层显示在-FLASH-之上\"><a href=\"#让层显示在-FLASH-之上\" class=\"headerlink\" title=\"让层显示在 FLASH 之上\"></a>让层显示在 FLASH 之上</h4><p>想让层的内容显示在 flash 上，把 FLASH 设置透明即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、&lt;param name&#x3D;&quot; wmode &quot; value&#x3D;&quot;transparent&quot; &#x2F;&gt;</span><br><span class=\"line\">2、&lt;param name&#x3D;&quot;wmode&quot; value&#x3D;&quot;opaque&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"键盘事件-keyCode-兼容性写法\"><a href=\"#键盘事件-keyCode-兼容性写法\" class=\"headerlink\" title=\"键盘事件 keyCode 兼容性写法\"></a>键盘事件 keyCode 兼容性写法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var inp &#x3D; document.getElementById(&#39;inp&#39;)</span><br><span class=\"line\">var result &#x3D; document.getElementById(&#39;result&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">function getKeyCode(e) &#123;</span><br><span class=\"line\">  e &#x3D; e ? e : (window.event ? window.event : &quot;&quot;)</span><br><span class=\"line\">  return e.keyCode ? e.keyCode : e.which</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">inp.onkeypress &#x3D; function(e) &#123;</span><br><span class=\"line\">  result.innerHTML &#x3D; getKeyCode(e)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"求窗口大小的兼容写法\"><a href=\"#求窗口大小的兼容写法\" class=\"headerlink\" title=\"求窗口大小的兼容写法\"></a>求窗口大小的兼容写法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 浏览器窗口可视区域大小（不包括工具栏和滚动条等边线）</span><br><span class=\"line\">&#x2F;&#x2F; 1600 * 525</span><br><span class=\"line\">var client_w &#x3D; document.documentElement.clientWidth || document.body.clientWidth;</span><br><span class=\"line\">var client_h &#x3D; document.documentElement.clientHeight || document.body.clientHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 网页内容实际宽高（包括工具栏和滚动条等边线）</span><br><span class=\"line\">&#x2F;&#x2F; 1600 * 8</span><br><span class=\"line\">var scroll_w &#x3D; document.documentElement.scrollWidth || document.body.scrollWidth;</span><br><span class=\"line\">var scroll_h &#x3D; document.documentElement.scrollHeight || document.body.scrollHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 网页内容实际宽高 (不包括工具栏和滚动条等边线）</span><br><span class=\"line\">&#x2F;&#x2F; 1600 * 8</span><br><span class=\"line\">var offset_w &#x3D; document.documentElement.offsetWidth || document.body.offsetWidth;</span><br><span class=\"line\">var offset_h &#x3D; document.documentElement.offsetHeight || document.body.offsetHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 滚动的高度</span><br><span class=\"line\">var scroll_Top &#x3D; document.documentElement.scrollTop||document.body.scrollTop;</span><br></pre></td></tr></table></figure>\n<h4 id=\"DOM-事件处理程序的兼容写法（能力检测）\"><a href=\"#DOM-事件处理程序的兼容写法（能力检测）\" class=\"headerlink\" title=\"DOM 事件处理程序的兼容写法（能力检测）\"></a>DOM 事件处理程序的兼容写法（能力检测）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var eventshiv &#x3D; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; event兼容</span><br><span class=\"line\">    getEvent: function(event) &#123;</span><br><span class=\"line\">        return event ? event : window.event;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; type兼容</span><br><span class=\"line\">    getType: function(event) &#123;</span><br><span class=\"line\">        return event.type;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; target兼容</span><br><span class=\"line\">    getTarget: function(event) &#123;</span><br><span class=\"line\">        return event.target ? event.target : event.srcelem;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 添加事件句柄</span><br><span class=\"line\">    addHandler: function(elem, type, listener) &#123;</span><br><span class=\"line\">        if (elem.addEventListener) &#123;</span><br><span class=\"line\">            elem.addEventListener(type, listener, false);</span><br><span class=\"line\">        &#125; else if (elem.attachEvent) &#123;</span><br><span class=\"line\">            elem.attachEvent(&#39;on&#39; + type, listener);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 在这里由于.与&#39;on&#39;字符串不能链接，只能用 []</span><br><span class=\"line\">            elem[&#39;on&#39; + type] &#x3D; listener;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 移除事件句柄</span><br><span class=\"line\">    removeHandler: function(elem, type, listener) &#123;</span><br><span class=\"line\">        if (elem.removeEventListener) &#123;</span><br><span class=\"line\">            elem.removeEventListener(type, listener, false);</span><br><span class=\"line\">        &#125; else if (elem.detachEvent) &#123;</span><br><span class=\"line\">            elem.detachEvent(&#39;on&#39; + type, listener);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            elem[&#39;on&#39; + type] &#x3D; null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 添加事件代理</span><br><span class=\"line\">    addAgent: function (elem, type, agent, listener) &#123;</span><br><span class=\"line\">        elem.addEventListener(type, function (e) &#123;</span><br><span class=\"line\">            if (e.target.matches(agent)) &#123;</span><br><span class=\"line\">                listener.call(e.target, e); &#x2F;&#x2F; this 指向 e.target</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 取消默认行为</span><br><span class=\"line\">    preventDefault: function(event) &#123;</span><br><span class=\"line\">        if (event.preventDefault) &#123;</span><br><span class=\"line\">            event.preventDefault();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            event.returnValue &#x3D; false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 阻止事件冒泡</span><br><span class=\"line\">    stopPropagation: function(event) &#123;</span><br><span class=\"line\">        if (event.stopPropagation) &#123;</span><br><span class=\"line\">            event.stopPropagation();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            event.cancelBubble &#x3D; true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>作为前端，浏览器就是你的战场，而不同的浏览器就是不同的敌人，敌人有相同之处，也各有特点，这不同的特点就是不同浏览器的兼容性，下面就聊聊浏览器的兼容问题，如何解决不同浏览器的兼容性。</p>","more":"<p><strong>普及</strong>：浏览器的兼容性问题，往往是个别浏览器（没错，就是那个与众不同的浏览器）对于一些标准的定义不一致导致的。俗话说：没有IE就没有伤害。</p>\n<p><strong>贴士</strong>：内容都是自己总结的，不免会出现错误或者bug，欢迎更正和补充，本帖也会不断更新。</p>\n<h4 id=\"Normalize-css\"><a href=\"#Normalize-css\" class=\"headerlink\" title=\"Normalize.css\"></a>Normalize.css</h4><p>不同浏览器的默认样式存在差异，可以使用 <code>Normalize.css</code>抹平这些差异。当然，你也可以定制属于自己业务的 <code>reset.css</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;normalize&#x2F;7.0.0&#x2F;normalize.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>简单粗暴法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123; margin: 0; padding: 0; &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"html5shiv-js\"><a href=\"#html5shiv-js\" class=\"headerlink\" title=\"html5shiv.js\"></a>html5shiv.js</h4><p>解决 ie9 以下浏览器对 html5 新增标签不识别的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--[if lt IE 9]&gt;</span><br><span class=\"line\">  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;html5shiv&#x2F;3.7.3&#x2F;html5shiv.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure>\n<!-- more -->\n<h4 id=\"respond-js\"><a href=\"#respond-js\" class=\"headerlink\" title=\"respond.js\"></a>respond.js</h4><p>解决 ie9 以下浏览器不支持 CSS3 Media Query 的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;picturefill&#x2F;3.0.3&#x2F;picturefill.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"IE-条件注释\"><a href=\"#IE-条件注释\" class=\"headerlink\" title=\"IE 条件注释\"></a>IE 条件注释</h4><p>IE 的条件注释仅仅针对IE浏览器，对其他浏览器无效<br><img src=\"https://user-gold-cdn.xitu.io/2017/8/28/31714eaf3a9bc272c50dbf1e1279f14b?imageView2/0/w/1280/h/960\" alt=\"image\"></p>\n<h4 id=\"IE-属性过滤器（较为常用的hack方法）\"><a href=\"#IE-属性过滤器（较为常用的hack方法）\" class=\"headerlink\" title=\"IE 属性过滤器（较为常用的hack方法）\"></a>IE 属性过滤器（较为常用的hack方法）</h4><p>针对不同的 IE 浏览器，可以使用不同的字符来对特定的版本的 IE 浏览器进行样式控制<br><img src=\"https://user-gold-cdn.xitu.io/2017/8/28/e8c1a14cca725798b5aaa88bf5d23de8?imageView2/0/w/1280/h/960\" alt=\"image\"><br><img src=\"https://user-gold-cdn.xitu.io/2017/8/28/ad406608b75744baa6f89ae3c26ba69d?imageView2/0/w/1280/h/960\" alt=\"image\"></p>\n<h4 id=\"浏览器-CSS-兼容前缀\"><a href=\"#浏览器-CSS-兼容前缀\" class=\"headerlink\" title=\"浏览器 CSS 兼容前缀\"></a>浏览器 CSS 兼容前缀</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-o-transform:rotate(7deg); &#x2F;&#x2F; Opera</span><br><span class=\"line\"></span><br><span class=\"line\">-ms-transform:rotate(7deg); &#x2F;&#x2F; IE</span><br><span class=\"line\"></span><br><span class=\"line\">-moz-transform:rotate(7deg); &#x2F;&#x2F; Firefox</span><br><span class=\"line\"></span><br><span class=\"line\">-webkit-transform:rotate(7deg); &#x2F;&#x2F; Chrome</span><br><span class=\"line\"></span><br><span class=\"line\">transform:rotate(7deg); &#x2F;&#x2F; 统一标识语句</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"a-标签的几种-CSS-状态的顺序\"><a href=\"#a-标签的几种-CSS-状态的顺序\" class=\"headerlink\" title=\"a 标签的几种 CSS 状态的顺序\"></a>a 标签的几种 CSS 状态的顺序</h4><p>很多新人在写 a 标签的样式，会疑惑为什么写的样式没有效果，或者点击超链接后，hover、active 样式没有效果，其实只是写的样式被覆盖了。</p>\n<p>正确的a标签顺序应该是：<code>==love hate==</code></p>\n<ol>\n<li>link:平常的状态</li>\n<li>visited:被访问过之后</li>\n<li>hover:鼠标放到链接上的时候</li>\n<li>active:链接被按下的时候</li>\n</ol>\n<h4 id=\"完美解决-Placeholder\"><a href=\"#完美解决-Placeholder\" class=\"headerlink\" title=\"完美解决 Placeholder\"></a>完美解决 <code>Placeholder</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; value&#x3D;&quot;Name *&quot; onFocus&#x3D;&quot;this.value &#x3D; &#39;&#39;;&quot; onBlur&#x3D;&quot;if (this.value &#x3D;&#x3D; &#39;&#39;) &#123;this.value &#x3D; &#39;Name *&#39;;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"清除浮动-最佳实践\"><a href=\"#清除浮动-最佳实践\" class=\"headerlink\" title=\"清除浮动 最佳实践\"></a>清除浮动 最佳实践</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.fl &#123; float: left; &#125;</span><br><span class=\"line\">.fr &#123; float: right; &#125;</span><br><span class=\"line\">.clearfix:after &#123; display: block; clear: both; content: &quot;&quot;; visibility: hidden; height: 0; &#125;</span><br><span class=\"line\">.clearfix &#123; zoom: 1; &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"BFC-解决边距重叠问题\"><a href=\"#BFC-解决边距重叠问题\" class=\"headerlink\" title=\"BFC 解决边距重叠问题\"></a>BFC 解决边距重叠问题</h4><p>当相邻元素都设置了 margin 边距时，margin 将取最大值，舍弃小值。为了不让边距重叠，可以给子元素加一个父元素，并设置该父元素为 BFC：<code>overflow: hidden</code>;</p>\n<div class=\"box\" id=\"box\">\n  <p>Lorem ipsum dolor sit.</p>\n\n  <div style=\"overflow: hidden;\">\n    <p>Lorem ipsum dolor sit.</p>\n  </div>\n\n  <p>Lorem ipsum dolor sit.</p>\n</div>\n\n<h4 id=\"IE6-双倍边距的问题\"><a href=\"#IE6-双倍边距的问题\" class=\"headerlink\" title=\"IE6 双倍边距的问题\"></a>IE6 双倍边距的问题</h4><p>设置 ie6 中设置浮动，同时又设置 <code>margin</code>，会出现双倍边距的问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: inline;</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决-IE9-以下浏览器不能使用-opacity\"><a href=\"#解决-IE9-以下浏览器不能使用-opacity\" class=\"headerlink\" title=\"解决 IE9 以下浏览器不能使用 opacity\"></a>解决 IE9 以下浏览器不能使用 opacity</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opacity: 0.5;</span><br><span class=\"line\">filter: alpha(opacity &#x3D; 50);</span><br><span class=\"line\">filter: progid:DXImageTransform.Microsoft.Alpha(style &#x3D; 0, opacity &#x3D; 50);</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决-IE6-不支持-fixed-绝对定位以及IE6下被绝对定位的元素在滚动的时候会闪动的问题\"><a href=\"#解决-IE6-不支持-fixed-绝对定位以及IE6下被绝对定位的元素在滚动的时候会闪动的问题\" class=\"headerlink\" title=\"解决 IE6 不支持 fixed 绝对定位以及IE6下被绝对定位的元素在滚动的时候会闪动的问题\"></a>解决 IE6 不支持 fixed 绝对定位以及IE6下被绝对定位的元素在滚动的时候会闪动的问题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;* IE6 hack *&#x2F;</span><br><span class=\"line\">*html, *html body &#123;</span><br><span class=\"line\">  background-image: url(about:blank);</span><br><span class=\"line\">  background-attachment: fixed;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*html #menu &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  top: expression(((e&#x3D;document.documentElement.scrollTop) ? e : document.body.scrollTop) + 100 + &#39;px&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"IE6-背景闪烁的问题\"><a href=\"#IE6-背景闪烁的问题\" class=\"headerlink\" title=\"IE6 背景闪烁的问题\"></a>IE6 背景闪烁的问题</h4><p>问题：链接、按钮用 CSSsprites 作为背景，在 ie6 下会有背景图闪烁的现象。原因是 IE6 没有将背景图缓存，每次触发 hover 的时候都会重新加载</p>\n<p>解决：可以用 JavaScript 设置 ie6 缓存这些图片：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.execCommand(&quot;BackgroundImageCache&quot;, false, true);</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决在-IE6-下，列表与日期错位的问题\"><a href=\"#解决在-IE6-下，列表与日期错位的问题\" class=\"headerlink\" title=\"解决在 IE6 下，列表与日期错位的问题\"></a>解决在 IE6 下，列表与日期错位的问题</h4><p>日期<span> 标签放在标题 <a> 标签之前即可<br><img src=\"https://user-gold-cdn.xitu.io/2017/8/28/6797c276197029d941ee577d877d6be3?imageView2/0/w/1280/h/960\" alt=\"image\"></p>\n<h4 id=\"解决-IE6-不支持-min-height-属性的问题\"><a href=\"#解决-IE6-不支持-min-height-属性的问题\" class=\"headerlink\" title=\"解决 IE6 不支持 min-height 属性的问题\"></a>解决 IE6 不支持 min-height 属性的问题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">min-height: 350px;</span><br><span class=\"line\">_height: 350px;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"让-IE7-IE8-支持-CSS3-background-size属性\"><a href=\"#让-IE7-IE8-支持-CSS3-background-size属性\" class=\"headerlink\" title=\"让 IE7 IE8 支持 CSS3 background-size属性\"></a>让 IE7 IE8 支持 CSS3 background-size属性</h4><p>由于 background-size 是 CSS3 新增的属性，所以 IE 低版本自然就不支持了，但是老外写了一个 htc 文件，名叫 background-size polyfill，使用该文件能够让 IE7、IE8 支持 background-size 属性。其原理是创建一个 img 元素插入到容器中，并重新计算宽度、高度、left、top 等值，模拟 background-size 的效果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html &#123;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">  padding: 0;</span><br><span class=\"line\">  background-image: url(&#39;img&#x2F;37.png&#39;);</span><br><span class=\"line\">  background-repeat: no-repeat;</span><br><span class=\"line\">  background-size: cover;</span><br><span class=\"line\">  -ms-behavior: url(&#39;css&#x2F;backgroundsize.min.htc&#39;);</span><br><span class=\"line\">  behavior: url(&#39;css&#x2F;backgroundsize.min.htc&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"IE6-7-line-height-失效的问题\"><a href=\"#IE6-7-line-height-失效的问题\" class=\"headerlink\" title=\"IE6-7 line-height 失效的问题\"></a>IE6-7 line-height 失效的问题</h4><p>问题：在ie 中 img 与文字放一起时，line-height 不起作用</p>\n<p>解决：都设置成 float</p>\n<h4 id=\"td-自动换行的问题\"><a href=\"#td-自动换行的问题\" class=\"headerlink\" title=\"td 自动换行的问题\"></a>td 自动换行的问题</h4><p>问题：table 宽度固定，td 自动换行</p>\n<p>解决：设置 <code>Tabl</code>e 为 <code>table-layout: fixed</code>，<code>td</code> 为 <code>word-wrap: break-word</code></p>\n<h4 id=\"让层显示在-FLASH-之上\"><a href=\"#让层显示在-FLASH-之上\" class=\"headerlink\" title=\"让层显示在 FLASH 之上\"></a>让层显示在 FLASH 之上</h4><p>想让层的内容显示在 flash 上，把 FLASH 设置透明即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、&lt;param name&#x3D;&quot; wmode &quot; value&#x3D;&quot;transparent&quot; &#x2F;&gt;</span><br><span class=\"line\">2、&lt;param name&#x3D;&quot;wmode&quot; value&#x3D;&quot;opaque&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"键盘事件-keyCode-兼容性写法\"><a href=\"#键盘事件-keyCode-兼容性写法\" class=\"headerlink\" title=\"键盘事件 keyCode 兼容性写法\"></a>键盘事件 keyCode 兼容性写法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var inp &#x3D; document.getElementById(&#39;inp&#39;)</span><br><span class=\"line\">var result &#x3D; document.getElementById(&#39;result&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">function getKeyCode(e) &#123;</span><br><span class=\"line\">  e &#x3D; e ? e : (window.event ? window.event : &quot;&quot;)</span><br><span class=\"line\">  return e.keyCode ? e.keyCode : e.which</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">inp.onkeypress &#x3D; function(e) &#123;</span><br><span class=\"line\">  result.innerHTML &#x3D; getKeyCode(e)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"求窗口大小的兼容写法\"><a href=\"#求窗口大小的兼容写法\" class=\"headerlink\" title=\"求窗口大小的兼容写法\"></a>求窗口大小的兼容写法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 浏览器窗口可视区域大小（不包括工具栏和滚动条等边线）</span><br><span class=\"line\">&#x2F;&#x2F; 1600 * 525</span><br><span class=\"line\">var client_w &#x3D; document.documentElement.clientWidth || document.body.clientWidth;</span><br><span class=\"line\">var client_h &#x3D; document.documentElement.clientHeight || document.body.clientHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 网页内容实际宽高（包括工具栏和滚动条等边线）</span><br><span class=\"line\">&#x2F;&#x2F; 1600 * 8</span><br><span class=\"line\">var scroll_w &#x3D; document.documentElement.scrollWidth || document.body.scrollWidth;</span><br><span class=\"line\">var scroll_h &#x3D; document.documentElement.scrollHeight || document.body.scrollHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 网页内容实际宽高 (不包括工具栏和滚动条等边线）</span><br><span class=\"line\">&#x2F;&#x2F; 1600 * 8</span><br><span class=\"line\">var offset_w &#x3D; document.documentElement.offsetWidth || document.body.offsetWidth;</span><br><span class=\"line\">var offset_h &#x3D; document.documentElement.offsetHeight || document.body.offsetHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 滚动的高度</span><br><span class=\"line\">var scroll_Top &#x3D; document.documentElement.scrollTop||document.body.scrollTop;</span><br></pre></td></tr></table></figure>\n<h4 id=\"DOM-事件处理程序的兼容写法（能力检测）\"><a href=\"#DOM-事件处理程序的兼容写法（能力检测）\" class=\"headerlink\" title=\"DOM 事件处理程序的兼容写法（能力检测）\"></a>DOM 事件处理程序的兼容写法（能力检测）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var eventshiv &#x3D; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; event兼容</span><br><span class=\"line\">    getEvent: function(event) &#123;</span><br><span class=\"line\">        return event ? event : window.event;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; type兼容</span><br><span class=\"line\">    getType: function(event) &#123;</span><br><span class=\"line\">        return event.type;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; target兼容</span><br><span class=\"line\">    getTarget: function(event) &#123;</span><br><span class=\"line\">        return event.target ? event.target : event.srcelem;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 添加事件句柄</span><br><span class=\"line\">    addHandler: function(elem, type, listener) &#123;</span><br><span class=\"line\">        if (elem.addEventListener) &#123;</span><br><span class=\"line\">            elem.addEventListener(type, listener, false);</span><br><span class=\"line\">        &#125; else if (elem.attachEvent) &#123;</span><br><span class=\"line\">            elem.attachEvent(&#39;on&#39; + type, listener);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 在这里由于.与&#39;on&#39;字符串不能链接，只能用 []</span><br><span class=\"line\">            elem[&#39;on&#39; + type] &#x3D; listener;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 移除事件句柄</span><br><span class=\"line\">    removeHandler: function(elem, type, listener) &#123;</span><br><span class=\"line\">        if (elem.removeEventListener) &#123;</span><br><span class=\"line\">            elem.removeEventListener(type, listener, false);</span><br><span class=\"line\">        &#125; else if (elem.detachEvent) &#123;</span><br><span class=\"line\">            elem.detachEvent(&#39;on&#39; + type, listener);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            elem[&#39;on&#39; + type] &#x3D; null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 添加事件代理</span><br><span class=\"line\">    addAgent: function (elem, type, agent, listener) &#123;</span><br><span class=\"line\">        elem.addEventListener(type, function (e) &#123;</span><br><span class=\"line\">            if (e.target.matches(agent)) &#123;</span><br><span class=\"line\">                listener.call(e.target, e); &#x2F;&#x2F; this 指向 e.target</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 取消默认行为</span><br><span class=\"line\">    preventDefault: function(event) &#123;</span><br><span class=\"line\">        if (event.preventDefault) &#123;</span><br><span class=\"line\">            event.preventDefault();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            event.returnValue &#x3D; false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 阻止事件冒泡</span><br><span class=\"line\">    stopPropagation: function(event) &#123;</span><br><span class=\"line\">        if (event.stopPropagation) &#123;</span><br><span class=\"line\">            event.stopPropagation();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            event.cancelBubble &#x3D; true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"巧妙利用Acitons进行博客的自动构建","date":"2019-12-27T14:22:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n忙活了很久很久，终于不那么忙了，也终于想起来我还有个博客没有运行，哎，虽然用Hexo可以享受Github提供的免费的空间和域名，但是命令行敲代码的方式实现博客编写还是有些不方便，尤其是需要编程环境的时候，最近公司在用CICD的方式对代码进行构建，我就在想有没有一种方式让博客也可以变成这样，于是我就在网上搜`Github` `Hexo` `自动构建` 这些个词，还真让我搜到了一种方法而且还是Github自己提供的，下面隆重请出 `GitHub Actions`。\n<!-- more -->\n\n## GitHub Actions 是什么\nGitHub Actions 由 GitHub 官方推出的工作流工具。典型的应用场景应该是 CI/CD，类似 Travis 的用法。如果不知道 CI/CD&Travis 感兴趣的建议去了解一下，下面不展开说明，直接说怎么用就好。\n\n## 前期准备\n在使用 `GitHub Actions` 之前我们先来看看我们有什么；\n首先我们有一个放博客程序的地方，我这里是叫做 `blog-source` ，另外呢有一个通过 hexo g 创建出来的静态网站，为了存放它而建的另一个仓库，我这里是叫做`lixuguang.github.io`,也就是说我们现在是有这样两个仓库。\n|仓库|作用|\n|-|-|\n|blog-source|放博客源代码|\n|lixuguang.github.io|放博客生成代码|\n\n## 生成密钥\n因为 `GitHub Actions` 它需要访问我的 `blog-source` 仓库的代码所以必须要有密钥，密钥大家应该熟悉了，创建博客的时候也是创建了一个公钥和私钥用来在本地往 `lixuguang.github.io` 这个仓库提交代码\n这里呢我们用下面的命令生成密钥。\n```\nssh-keygen -t ed25519 -f ~/.ssh/github-actions-deploy # 连按三次回车即刻\n```\n命令执行完成后，我们会得到两个文件 `github-actions-deploy` 和 `github-actions-deploy.pub` 两个文件，第一个是私钥，第二个是公钥。\n|名称|解释|\n|-|-|\n|github-actions-deploy|私钥|\n|github-actions-deploy.pub|公钥|\n\n接下来的步骤一定要好好看，因为我在这个地方被卡住好多次，就是因为有的文章说的并不正确，或者至少是讲的不够仔细，这里我会仔细地说明一下。\n\n## 配置 GitHub 仓库\n### 配置博客源代码仓库\n我这里的源代码是放在 `blog-source` 中，所以我现在要给源代码仓库配置`私钥`，配置过程如下：\n打开 `blog-source` 仓库，选择 `settings`，然后选中 `secrets` ， 再点击 `Add new secrets`，照着下面填写内容\n|字段|值|\n|-|-|\n|Name|HEXO_DEPLOY_PRI（名称自动构建时有用）|\n|Value|github-actions-deploy|\n\n### 配置博客源代码仓库\n我这里生成的博客静态代码是放在 `lixuguang.github.io` 中，所以我现在要给静态代码仓库配置`公钥`，配置过程如下：\n打开 `lixuguang.github.io`，选择 `settings`，然后选中 `keys`，再点击 `Add deploy key`，照着下面填写内容\n|字段|值|\n|-|-|\n|Title|HEXO_DEPLOY_PUB|\n|Key|github-actions-deploy.pub|\n\n## 编写 Actions 脚本\n\n经过上面一系列的准备操作，终于来到了编写自动构建脚本的环节，构建脚本如下，如果按照上面我做的操作一步步来的话，那么这一步你可以直接copy啦\n```\nname: Deploy Blog\n\non: [push] # 当有新push时运行\n\njobs:\n  build: # 一项叫做build的任务\n\n    runs-on: ubuntu-latest # 在最新版的Ubuntu系统下运行\n    \n    steps:\n    - name: Checkout # 将仓库内master分支的内容下载到工作目录\n      uses: actions/checkout@v1 # 脚本来自 https://github.com/actions/checkout\n      \n    - name: Use Node.js 10.x # 配置Node环境\n      uses: actions/setup-node@v1 # 配置脚本来自 https://github.com/actions/setup-node\n      with:\n        node-version: \"10.x\"\n    \n    - name: Setup Hexo env\n      env:\n        HEXO_DEPLOY_PRI: ${{ secrets.HEXO_DEPLOY_PRI }} # 这里是上面配置的私钥名称\n      run: |\n        # set up private key for deploy\n        mkdir -p ~/.ssh/\n        echo \"$HEXO_DEPLOY_PRI\" | tr -d '\\r' > ~/.ssh/id_rsa # 配置秘钥\n        chmod 600 ~/.ssh/id_rsa\n        ssh-keyscan github.com >> ~/.ssh/known_hosts\n        # set git infomation\n        git config --global user.name 'lixuguang' # 换成你自己的名字\n        git config --global user.email 'lixuguang@gmail.com' # 换成你自己的邮箱\n        # install dependencies\n        npm i -g hexo-cli # 安装hexo\n        npm i\n  \n    - name: Deploy\n      run: |\n        # publish\n        rm -rf .deploy_git # 如果上次构建失败这句命令会清除上次失败的代码\n        hexo generate && hexo deploy # 执行部署程序\n\n\n```\n\n---\n\n通过以上这些步骤的操作，如果没什么意外的话，博客的自动构建就完成了，之后只要你提交新的文章到博客源代码仓库，它将自动帮你生成并发送到博客的静态代码仓库，再也不用执行hexo g -d啦，如果这篇文章对你有用，欢迎follow我或打赏一下这篇文章，感谢阅读。\n\nps：这里有个小坑需要注意一下，因为博客的皮肤也是另外一个git仓库，如果你在本地构建好用但是线上构建博客不显示了，需要注意下是不是皮肤没有上传到博客源码仓库，这里我遇到了，希望你不会因此困扰，拜拜~","source":"_posts/Actions.md","raw":"---\ntitle: 巧妙利用Acitons进行博客的自动构建\ndate: 2019-12-27 22:22:22\ncategories: \n\t- 博客技巧\ntags: \n\t- Github\n\t- Actions\n\t- Hexo\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n忙活了很久很久，终于不那么忙了，也终于想起来我还有个博客没有运行，哎，虽然用Hexo可以享受Github提供的免费的空间和域名，但是命令行敲代码的方式实现博客编写还是有些不方便，尤其是需要编程环境的时候，最近公司在用CICD的方式对代码进行构建，我就在想有没有一种方式让博客也可以变成这样，于是我就在网上搜`Github` `Hexo` `自动构建` 这些个词，还真让我搜到了一种方法而且还是Github自己提供的，下面隆重请出 `GitHub Actions`。\n<!-- more -->\n\n## GitHub Actions 是什么\nGitHub Actions 由 GitHub 官方推出的工作流工具。典型的应用场景应该是 CI/CD，类似 Travis 的用法。如果不知道 CI/CD&Travis 感兴趣的建议去了解一下，下面不展开说明，直接说怎么用就好。\n\n## 前期准备\n在使用 `GitHub Actions` 之前我们先来看看我们有什么；\n首先我们有一个放博客程序的地方，我这里是叫做 `blog-source` ，另外呢有一个通过 hexo g 创建出来的静态网站，为了存放它而建的另一个仓库，我这里是叫做`lixuguang.github.io`,也就是说我们现在是有这样两个仓库。\n|仓库|作用|\n|-|-|\n|blog-source|放博客源代码|\n|lixuguang.github.io|放博客生成代码|\n\n## 生成密钥\n因为 `GitHub Actions` 它需要访问我的 `blog-source` 仓库的代码所以必须要有密钥，密钥大家应该熟悉了，创建博客的时候也是创建了一个公钥和私钥用来在本地往 `lixuguang.github.io` 这个仓库提交代码\n这里呢我们用下面的命令生成密钥。\n```\nssh-keygen -t ed25519 -f ~/.ssh/github-actions-deploy # 连按三次回车即刻\n```\n命令执行完成后，我们会得到两个文件 `github-actions-deploy` 和 `github-actions-deploy.pub` 两个文件，第一个是私钥，第二个是公钥。\n|名称|解释|\n|-|-|\n|github-actions-deploy|私钥|\n|github-actions-deploy.pub|公钥|\n\n接下来的步骤一定要好好看，因为我在这个地方被卡住好多次，就是因为有的文章说的并不正确，或者至少是讲的不够仔细，这里我会仔细地说明一下。\n\n## 配置 GitHub 仓库\n### 配置博客源代码仓库\n我这里的源代码是放在 `blog-source` 中，所以我现在要给源代码仓库配置`私钥`，配置过程如下：\n打开 `blog-source` 仓库，选择 `settings`，然后选中 `secrets` ， 再点击 `Add new secrets`，照着下面填写内容\n|字段|值|\n|-|-|\n|Name|HEXO_DEPLOY_PRI（名称自动构建时有用）|\n|Value|github-actions-deploy|\n\n### 配置博客源代码仓库\n我这里生成的博客静态代码是放在 `lixuguang.github.io` 中，所以我现在要给静态代码仓库配置`公钥`，配置过程如下：\n打开 `lixuguang.github.io`，选择 `settings`，然后选中 `keys`，再点击 `Add deploy key`，照着下面填写内容\n|字段|值|\n|-|-|\n|Title|HEXO_DEPLOY_PUB|\n|Key|github-actions-deploy.pub|\n\n## 编写 Actions 脚本\n\n经过上面一系列的准备操作，终于来到了编写自动构建脚本的环节，构建脚本如下，如果按照上面我做的操作一步步来的话，那么这一步你可以直接copy啦\n```\nname: Deploy Blog\n\non: [push] # 当有新push时运行\n\njobs:\n  build: # 一项叫做build的任务\n\n    runs-on: ubuntu-latest # 在最新版的Ubuntu系统下运行\n    \n    steps:\n    - name: Checkout # 将仓库内master分支的内容下载到工作目录\n      uses: actions/checkout@v1 # 脚本来自 https://github.com/actions/checkout\n      \n    - name: Use Node.js 10.x # 配置Node环境\n      uses: actions/setup-node@v1 # 配置脚本来自 https://github.com/actions/setup-node\n      with:\n        node-version: \"10.x\"\n    \n    - name: Setup Hexo env\n      env:\n        HEXO_DEPLOY_PRI: ${{ secrets.HEXO_DEPLOY_PRI }} # 这里是上面配置的私钥名称\n      run: |\n        # set up private key for deploy\n        mkdir -p ~/.ssh/\n        echo \"$HEXO_DEPLOY_PRI\" | tr -d '\\r' > ~/.ssh/id_rsa # 配置秘钥\n        chmod 600 ~/.ssh/id_rsa\n        ssh-keyscan github.com >> ~/.ssh/known_hosts\n        # set git infomation\n        git config --global user.name 'lixuguang' # 换成你自己的名字\n        git config --global user.email 'lixuguang@gmail.com' # 换成你自己的邮箱\n        # install dependencies\n        npm i -g hexo-cli # 安装hexo\n        npm i\n  \n    - name: Deploy\n      run: |\n        # publish\n        rm -rf .deploy_git # 如果上次构建失败这句命令会清除上次失败的代码\n        hexo generate && hexo deploy # 执行部署程序\n\n\n```\n\n---\n\n通过以上这些步骤的操作，如果没什么意外的话，博客的自动构建就完成了，之后只要你提交新的文章到博客源代码仓库，它将自动帮你生成并发送到博客的静态代码仓库，再也不用执行hexo g -d啦，如果这篇文章对你有用，欢迎follow我或打赏一下这篇文章，感谢阅读。\n\nps：这里有个小坑需要注意一下，因为博客的皮肤也是另外一个git仓库，如果你在本地构建好用但是线上构建博客不显示了，需要注意下是不是皮肤没有上传到博客源码仓库，这里我遇到了，希望你不会因此困扰，拜拜~","slug":"Actions","published":1,"updated":"2019-12-30T13:57:39.185Z","_id":"ck4o6ny7500007i2bdfxq4sqf","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>忙活了很久很久，终于不那么忙了，也终于想起来我还有个博客没有运行，哎，虽然用Hexo可以享受Github提供的免费的空间和域名，但是命令行敲代码的方式实现博客编写还是有些不方便，尤其是需要编程环境的时候，最近公司在用CICD的方式对代码进行构建，我就在想有没有一种方式让博客也可以变成这样，于是我就在网上搜<code>Github</code> <code>Hexo</code> <code>自动构建</code> 这些个词，还真让我搜到了一种方法而且还是Github自己提供的，下面隆重请出 <code>GitHub Actions</code>。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"GitHub-Actions-是什么\"><a href=\"#GitHub-Actions-是什么\" class=\"headerlink\" title=\"GitHub Actions 是什么\"></a>GitHub Actions 是什么</h2><p>GitHub Actions 由 GitHub 官方推出的工作流工具。典型的应用场景应该是 CI/CD，类似 Travis 的用法。如果不知道 CI/CD&amp;Travis 感兴趣的建议去了解一下，下面不展开说明，直接说怎么用就好。</p>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>在使用 <code>GitHub Actions</code> 之前我们先来看看我们有什么；<br>首先我们有一个放博客程序的地方，我这里是叫做 <code>blog-source</code> ，另外呢有一个通过 hexo g 创建出来的静态网站，为了存放它而建的另一个仓库，我这里是叫做<code>lixuguang.github.io</code>,也就是说我们现在是有这样两个仓库。<br>|仓库|作用|<br>|-|-|<br>|blog-source|放博客源代码|<br>|lixuguang.github.io|放博客生成代码|</p>\n<h2 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h2><p>因为 <code>GitHub Actions</code> 它需要访问我的 <code>blog-source</code> 仓库的代码所以必须要有密钥，密钥大家应该熟悉了，创建博客的时候也是创建了一个公钥和私钥用来在本地往 <code>lixuguang.github.io</code> 这个仓库提交代码<br>这里呢我们用下面的命令生成密钥。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t ed25519 -f ~&#x2F;.ssh&#x2F;github-actions-deploy # 连按三次回车即刻</span><br></pre></td></tr></table></figure>\n<p>命令执行完成后，我们会得到两个文件 <code>github-actions-deploy</code> 和 <code>github-actions-deploy.pub</code> 两个文件，第一个是私钥，第二个是公钥。<br>|名称|解释|<br>|-|-|<br>|github-actions-deploy|私钥|<br>|github-actions-deploy.pub|公钥|</p>\n<p>接下来的步骤一定要好好看，因为我在这个地方被卡住好多次，就是因为有的文章说的并不正确，或者至少是讲的不够仔细，这里我会仔细地说明一下。</p>\n<h2 id=\"配置-GitHub-仓库\"><a href=\"#配置-GitHub-仓库\" class=\"headerlink\" title=\"配置 GitHub 仓库\"></a>配置 GitHub 仓库</h2><h3 id=\"配置博客源代码仓库\"><a href=\"#配置博客源代码仓库\" class=\"headerlink\" title=\"配置博客源代码仓库\"></a>配置博客源代码仓库</h3><p>我这里的源代码是放在 <code>blog-source</code> 中，所以我现在要给源代码仓库配置<code>私钥</code>，配置过程如下：<br>打开 <code>blog-source</code> 仓库，选择 <code>settings</code>，然后选中 <code>secrets</code> ， 再点击 <code>Add new secrets</code>，照着下面填写内容<br>|字段|值|<br>|-|-|<br>|Name|HEXO_DEPLOY_PRI（名称自动构建时有用）|<br>|Value|github-actions-deploy|</p>\n<h3 id=\"配置博客源代码仓库-1\"><a href=\"#配置博客源代码仓库-1\" class=\"headerlink\" title=\"配置博客源代码仓库\"></a>配置博客源代码仓库</h3><p>我这里生成的博客静态代码是放在 <code>lixuguang.github.io</code> 中，所以我现在要给静态代码仓库配置<code>公钥</code>，配置过程如下：<br>打开 <code>lixuguang.github.io</code>，选择 <code>settings</code>，然后选中 <code>keys</code>，再点击 <code>Add deploy key</code>，照着下面填写内容<br>|字段|值|<br>|-|-|<br>|Title|HEXO_DEPLOY_PUB|<br>|Key|github-actions-deploy.pub|</p>\n<h2 id=\"编写-Actions-脚本\"><a href=\"#编写-Actions-脚本\" class=\"headerlink\" title=\"编写 Actions 脚本\"></a>编写 Actions 脚本</h2><p>经过上面一系列的准备操作，终于来到了编写自动构建脚本的环节，构建脚本如下，如果按照上面我做的操作一步步来的话，那么这一步你可以直接copy啦</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: Deploy Blog</span><br><span class=\"line\"></span><br><span class=\"line\">on: [push] # 当有新push时运行</span><br><span class=\"line\"></span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  build: # 一项叫做build的任务</span><br><span class=\"line\"></span><br><span class=\"line\">    runs-on: ubuntu-latest # 在最新版的Ubuntu系统下运行</span><br><span class=\"line\">    </span><br><span class=\"line\">    steps:</span><br><span class=\"line\">    - name: Checkout # 将仓库内master分支的内容下载到工作目录</span><br><span class=\"line\">      uses: actions&#x2F;checkout@v1 # 脚本来自 https:&#x2F;&#x2F;github.com&#x2F;actions&#x2F;checkout</span><br><span class=\"line\">      </span><br><span class=\"line\">    - name: Use Node.js 10.x # 配置Node环境</span><br><span class=\"line\">      uses: actions&#x2F;setup-node@v1 # 配置脚本来自 https:&#x2F;&#x2F;github.com&#x2F;actions&#x2F;setup-node</span><br><span class=\"line\">      with:</span><br><span class=\"line\">        node-version: &quot;10.x&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    - name: Setup Hexo env</span><br><span class=\"line\">      env:</span><br><span class=\"line\">        HEXO_DEPLOY_PRI: $&#123;&#123; secrets.HEXO_DEPLOY_PRI &#125;&#125; # 这里是上面配置的私钥名称</span><br><span class=\"line\">      run: |</span><br><span class=\"line\">        # set up private key for deploy</span><br><span class=\"line\">        mkdir -p ~&#x2F;.ssh&#x2F;</span><br><span class=\"line\">        echo &quot;$HEXO_DEPLOY_PRI&quot; | tr -d &#39;\\r&#39; &gt; ~&#x2F;.ssh&#x2F;id_rsa # 配置秘钥</span><br><span class=\"line\">        chmod 600 ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class=\"line\">        ssh-keyscan github.com &gt;&gt; ~&#x2F;.ssh&#x2F;known_hosts</span><br><span class=\"line\">        # set git infomation</span><br><span class=\"line\">        git config --global user.name &#39;lixuguang&#39; # 换成你自己的名字</span><br><span class=\"line\">        git config --global user.email &#39;lixuguang@gmail.com&#39; # 换成你自己的邮箱</span><br><span class=\"line\">        # install dependencies</span><br><span class=\"line\">        npm i -g hexo-cli # 安装hexo</span><br><span class=\"line\">        npm i</span><br><span class=\"line\">  </span><br><span class=\"line\">    - name: Deploy</span><br><span class=\"line\">      run: |</span><br><span class=\"line\">        # publish</span><br><span class=\"line\">        rm -rf .deploy_git # 如果上次构建失败这句命令会清除上次失败的代码</span><br><span class=\"line\">        hexo generate &amp;&amp; hexo deploy # 执行部署程序</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>通过以上这些步骤的操作，如果没什么意外的话，博客的自动构建就完成了，之后只要你提交新的文章到博客源代码仓库，它将自动帮你生成并发送到博客的静态代码仓库，再也不用执行hexo g -d啦，如果这篇文章对你有用，欢迎follow我或打赏一下这篇文章，感谢阅读。</p>\n<p>ps：这里有个小坑需要注意一下，因为博客的皮肤也是另外一个git仓库，如果你在本地构建好用但是线上构建博客不显示了，需要注意下是不是皮肤没有上传到博客源码仓库，这里我遇到了，希望你不会因此困扰，拜拜~</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>忙活了很久很久，终于不那么忙了，也终于想起来我还有个博客没有运行，哎，虽然用Hexo可以享受Github提供的免费的空间和域名，但是命令行敲代码的方式实现博客编写还是有些不方便，尤其是需要编程环境的时候，最近公司在用CICD的方式对代码进行构建，我就在想有没有一种方式让博客也可以变成这样，于是我就在网上搜<code>Github</code> <code>Hexo</code> <code>自动构建</code> 这些个词，还真让我搜到了一种方法而且还是Github自己提供的，下面隆重请出 <code>GitHub Actions</code>。</p>","more":"<h2 id=\"GitHub-Actions-是什么\"><a href=\"#GitHub-Actions-是什么\" class=\"headerlink\" title=\"GitHub Actions 是什么\"></a>GitHub Actions 是什么</h2><p>GitHub Actions 由 GitHub 官方推出的工作流工具。典型的应用场景应该是 CI/CD，类似 Travis 的用法。如果不知道 CI/CD&amp;Travis 感兴趣的建议去了解一下，下面不展开说明，直接说怎么用就好。</p>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>在使用 <code>GitHub Actions</code> 之前我们先来看看我们有什么；<br>首先我们有一个放博客程序的地方，我这里是叫做 <code>blog-source</code> ，另外呢有一个通过 hexo g 创建出来的静态网站，为了存放它而建的另一个仓库，我这里是叫做<code>lixuguang.github.io</code>,也就是说我们现在是有这样两个仓库。<br>|仓库|作用|<br>|-|-|<br>|blog-source|放博客源代码|<br>|lixuguang.github.io|放博客生成代码|</p>\n<h2 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h2><p>因为 <code>GitHub Actions</code> 它需要访问我的 <code>blog-source</code> 仓库的代码所以必须要有密钥，密钥大家应该熟悉了，创建博客的时候也是创建了一个公钥和私钥用来在本地往 <code>lixuguang.github.io</code> 这个仓库提交代码<br>这里呢我们用下面的命令生成密钥。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t ed25519 -f ~&#x2F;.ssh&#x2F;github-actions-deploy # 连按三次回车即刻</span><br></pre></td></tr></table></figure>\n<p>命令执行完成后，我们会得到两个文件 <code>github-actions-deploy</code> 和 <code>github-actions-deploy.pub</code> 两个文件，第一个是私钥，第二个是公钥。<br>|名称|解释|<br>|-|-|<br>|github-actions-deploy|私钥|<br>|github-actions-deploy.pub|公钥|</p>\n<p>接下来的步骤一定要好好看，因为我在这个地方被卡住好多次，就是因为有的文章说的并不正确，或者至少是讲的不够仔细，这里我会仔细地说明一下。</p>\n<h2 id=\"配置-GitHub-仓库\"><a href=\"#配置-GitHub-仓库\" class=\"headerlink\" title=\"配置 GitHub 仓库\"></a>配置 GitHub 仓库</h2><h3 id=\"配置博客源代码仓库\"><a href=\"#配置博客源代码仓库\" class=\"headerlink\" title=\"配置博客源代码仓库\"></a>配置博客源代码仓库</h3><p>我这里的源代码是放在 <code>blog-source</code> 中，所以我现在要给源代码仓库配置<code>私钥</code>，配置过程如下：<br>打开 <code>blog-source</code> 仓库，选择 <code>settings</code>，然后选中 <code>secrets</code> ， 再点击 <code>Add new secrets</code>，照着下面填写内容<br>|字段|值|<br>|-|-|<br>|Name|HEXO_DEPLOY_PRI（名称自动构建时有用）|<br>|Value|github-actions-deploy|</p>\n<h3 id=\"配置博客源代码仓库-1\"><a href=\"#配置博客源代码仓库-1\" class=\"headerlink\" title=\"配置博客源代码仓库\"></a>配置博客源代码仓库</h3><p>我这里生成的博客静态代码是放在 <code>lixuguang.github.io</code> 中，所以我现在要给静态代码仓库配置<code>公钥</code>，配置过程如下：<br>打开 <code>lixuguang.github.io</code>，选择 <code>settings</code>，然后选中 <code>keys</code>，再点击 <code>Add deploy key</code>，照着下面填写内容<br>|字段|值|<br>|-|-|<br>|Title|HEXO_DEPLOY_PUB|<br>|Key|github-actions-deploy.pub|</p>\n<h2 id=\"编写-Actions-脚本\"><a href=\"#编写-Actions-脚本\" class=\"headerlink\" title=\"编写 Actions 脚本\"></a>编写 Actions 脚本</h2><p>经过上面一系列的准备操作，终于来到了编写自动构建脚本的环节，构建脚本如下，如果按照上面我做的操作一步步来的话，那么这一步你可以直接copy啦</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: Deploy Blog</span><br><span class=\"line\"></span><br><span class=\"line\">on: [push] # 当有新push时运行</span><br><span class=\"line\"></span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  build: # 一项叫做build的任务</span><br><span class=\"line\"></span><br><span class=\"line\">    runs-on: ubuntu-latest # 在最新版的Ubuntu系统下运行</span><br><span class=\"line\">    </span><br><span class=\"line\">    steps:</span><br><span class=\"line\">    - name: Checkout # 将仓库内master分支的内容下载到工作目录</span><br><span class=\"line\">      uses: actions&#x2F;checkout@v1 # 脚本来自 https:&#x2F;&#x2F;github.com&#x2F;actions&#x2F;checkout</span><br><span class=\"line\">      </span><br><span class=\"line\">    - name: Use Node.js 10.x # 配置Node环境</span><br><span class=\"line\">      uses: actions&#x2F;setup-node@v1 # 配置脚本来自 https:&#x2F;&#x2F;github.com&#x2F;actions&#x2F;setup-node</span><br><span class=\"line\">      with:</span><br><span class=\"line\">        node-version: &quot;10.x&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    - name: Setup Hexo env</span><br><span class=\"line\">      env:</span><br><span class=\"line\">        HEXO_DEPLOY_PRI: $&#123;&#123; secrets.HEXO_DEPLOY_PRI &#125;&#125; # 这里是上面配置的私钥名称</span><br><span class=\"line\">      run: |</span><br><span class=\"line\">        # set up private key for deploy</span><br><span class=\"line\">        mkdir -p ~&#x2F;.ssh&#x2F;</span><br><span class=\"line\">        echo &quot;$HEXO_DEPLOY_PRI&quot; | tr -d &#39;\\r&#39; &gt; ~&#x2F;.ssh&#x2F;id_rsa # 配置秘钥</span><br><span class=\"line\">        chmod 600 ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class=\"line\">        ssh-keyscan github.com &gt;&gt; ~&#x2F;.ssh&#x2F;known_hosts</span><br><span class=\"line\">        # set git infomation</span><br><span class=\"line\">        git config --global user.name &#39;lixuguang&#39; # 换成你自己的名字</span><br><span class=\"line\">        git config --global user.email &#39;lixuguang@gmail.com&#39; # 换成你自己的邮箱</span><br><span class=\"line\">        # install dependencies</span><br><span class=\"line\">        npm i -g hexo-cli # 安装hexo</span><br><span class=\"line\">        npm i</span><br><span class=\"line\">  </span><br><span class=\"line\">    - name: Deploy</span><br><span class=\"line\">      run: |</span><br><span class=\"line\">        # publish</span><br><span class=\"line\">        rm -rf .deploy_git # 如果上次构建失败这句命令会清除上次失败的代码</span><br><span class=\"line\">        hexo generate &amp;&amp; hexo deploy # 执行部署程序</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>通过以上这些步骤的操作，如果没什么意外的话，博客的自动构建就完成了，之后只要你提交新的文章到博客源代码仓库，它将自动帮你生成并发送到博客的静态代码仓库，再也不用执行hexo g -d啦，如果这篇文章对你有用，欢迎follow我或打赏一下这篇文章，感谢阅读。</p>\n<p>ps：这里有个小坑需要注意一下，因为博客的皮肤也是另外一个git仓库，如果你在本地构建好用但是线上构建博客不显示了，需要注意下是不是皮肤没有上传到博客源码仓库，这里我遇到了，希望你不会因此困扰，拜拜~</p>"},{"title":"《Web全栈工程师的自我修养》读书笔记","date":"2017-10-12T09:37:07.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n近日工作不是那么忙，所以有时间看看书，这本书之前就已经读过一遍，隔了一段时间已经有所忘记，所以再次拾起，重新回顾一下。.\n<!-- more -->\n\n## 什么是全栈\n“全栈”是个外来词，翻译自英文full-stack，此处的栈指的是为了完成项目而使用的一系列技术的合集，不是堆栈概念中的栈。\n\n“全端”工程师是指能够完成pc端、移动端等多终端设备适配的情况\n\n## 什么是全栈工程师\n> 全栈工程师是指一个能够处理数据库、服务器、系统工程、客户端等所有工作的的工程师，根据项目不同，可能是移动栈、Web栈，或者原生应用程序栈。\n\n简单来说全栈工程师就是一个人能搞定一个项目，全能大神一样的人物。\n\n## 一个Web产品典型的技术栈\n> 服务器+数据库+服务器端编程语言+前端编程语言\n\n> 全栈工程师技术的兴起有两个重要原因：技术的发展和PaaS（Platform as a Service，平台即服务）服务的平台越来越多。\n\n### 全栈框架———MEAN\n> MongoDB-Express-AngularJs-Node.js\n前后端采用一种编程语言JavaScript\n\n## 全栈工程师的要求\n### 一专多长\n在一个领域里至少达到高级的级别，然后再去向上游或者下游延伸\n### 关注商业目标\n公司聘请你是为了让你产生利润，并不关心你会什么，所以选择技术栈时要考虑的是如何降低公司的成本或者提高收入。\n### 关注用户体验\n产品的最终目标是满足客户的需求，所以作为全栈工程师必须要关注用户体验。\n\n---\n\n这是一些作为全栈工程师我整理出来的干货，这本书本身并不是一本技术性很强的书，倒像是一位过来人介绍些经验，适合刚入职场或者进入职场不久的人，在前端领域比较迷茫时看一看，书中介绍了作者读过的一些书，很有参考性，推荐大家阅读。","source":"_posts/web-quanzhan.md","raw":"---\ntitle: 《Web全栈工程师的自我修养》读书笔记\ndate: 2017-10-12 17:37:07\ncategories: \n\t- 读书笔记\ntags: \n\t- 前端类\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n近日工作不是那么忙，所以有时间看看书，这本书之前就已经读过一遍，隔了一段时间已经有所忘记，所以再次拾起，重新回顾一下。.\n<!-- more -->\n\n## 什么是全栈\n“全栈”是个外来词，翻译自英文full-stack，此处的栈指的是为了完成项目而使用的一系列技术的合集，不是堆栈概念中的栈。\n\n“全端”工程师是指能够完成pc端、移动端等多终端设备适配的情况\n\n## 什么是全栈工程师\n> 全栈工程师是指一个能够处理数据库、服务器、系统工程、客户端等所有工作的的工程师，根据项目不同，可能是移动栈、Web栈，或者原生应用程序栈。\n\n简单来说全栈工程师就是一个人能搞定一个项目，全能大神一样的人物。\n\n## 一个Web产品典型的技术栈\n> 服务器+数据库+服务器端编程语言+前端编程语言\n\n> 全栈工程师技术的兴起有两个重要原因：技术的发展和PaaS（Platform as a Service，平台即服务）服务的平台越来越多。\n\n### 全栈框架———MEAN\n> MongoDB-Express-AngularJs-Node.js\n前后端采用一种编程语言JavaScript\n\n## 全栈工程师的要求\n### 一专多长\n在一个领域里至少达到高级的级别，然后再去向上游或者下游延伸\n### 关注商业目标\n公司聘请你是为了让你产生利润，并不关心你会什么，所以选择技术栈时要考虑的是如何降低公司的成本或者提高收入。\n### 关注用户体验\n产品的最终目标是满足客户的需求，所以作为全栈工程师必须要关注用户体验。\n\n---\n\n这是一些作为全栈工程师我整理出来的干货，这本书本身并不是一本技术性很强的书，倒像是一位过来人介绍些经验，适合刚入职场或者进入职场不久的人，在前端领域比较迷茫时看一看，书中介绍了作者读过的一些书，很有参考性，推荐大家阅读。","slug":"web-quanzhan","published":1,"updated":"2019-12-30T13:57:39.424Z","_id":"ck4o8np9l0000msvqcsy851ub","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>近日工作不是那么忙，所以有时间看看书，这本书之前就已经读过一遍，隔了一段时间已经有所忘记，所以再次拾起，重新回顾一下。.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"什么是全栈\"><a href=\"#什么是全栈\" class=\"headerlink\" title=\"什么是全栈\"></a>什么是全栈</h2><p>“全栈”是个外来词，翻译自英文full-stack，此处的栈指的是为了完成项目而使用的一系列技术的合集，不是堆栈概念中的栈。</p>\n<p>“全端”工程师是指能够完成pc端、移动端等多终端设备适配的情况</p>\n<h2 id=\"什么是全栈工程师\"><a href=\"#什么是全栈工程师\" class=\"headerlink\" title=\"什么是全栈工程师\"></a>什么是全栈工程师</h2><blockquote>\n<p>全栈工程师是指一个能够处理数据库、服务器、系统工程、客户端等所有工作的的工程师，根据项目不同，可能是移动栈、Web栈，或者原生应用程序栈。</p>\n</blockquote>\n<p>简单来说全栈工程师就是一个人能搞定一个项目，全能大神一样的人物。</p>\n<h2 id=\"一个Web产品典型的技术栈\"><a href=\"#一个Web产品典型的技术栈\" class=\"headerlink\" title=\"一个Web产品典型的技术栈\"></a>一个Web产品典型的技术栈</h2><blockquote>\n<p>服务器+数据库+服务器端编程语言+前端编程语言</p>\n</blockquote>\n<blockquote>\n<p>全栈工程师技术的兴起有两个重要原因：技术的发展和PaaS（Platform as a Service，平台即服务）服务的平台越来越多。</p>\n</blockquote>\n<h3 id=\"全栈框架———MEAN\"><a href=\"#全栈框架———MEAN\" class=\"headerlink\" title=\"全栈框架———MEAN\"></a>全栈框架———MEAN</h3><blockquote>\n<p>MongoDB-Express-AngularJs-Node.js<br>前后端采用一种编程语言JavaScript</p>\n</blockquote>\n<h2 id=\"全栈工程师的要求\"><a href=\"#全栈工程师的要求\" class=\"headerlink\" title=\"全栈工程师的要求\"></a>全栈工程师的要求</h2><h3 id=\"一专多长\"><a href=\"#一专多长\" class=\"headerlink\" title=\"一专多长\"></a>一专多长</h3><p>在一个领域里至少达到高级的级别，然后再去向上游或者下游延伸</p>\n<h3 id=\"关注商业目标\"><a href=\"#关注商业目标\" class=\"headerlink\" title=\"关注商业目标\"></a>关注商业目标</h3><p>公司聘请你是为了让你产生利润，并不关心你会什么，所以选择技术栈时要考虑的是如何降低公司的成本或者提高收入。</p>\n<h3 id=\"关注用户体验\"><a href=\"#关注用户体验\" class=\"headerlink\" title=\"关注用户体验\"></a>关注用户体验</h3><p>产品的最终目标是满足客户的需求，所以作为全栈工程师必须要关注用户体验。</p>\n<hr>\n<p>这是一些作为全栈工程师我整理出来的干货，这本书本身并不是一本技术性很强的书，倒像是一位过来人介绍些经验，适合刚入职场或者进入职场不久的人，在前端领域比较迷茫时看一看，书中介绍了作者读过的一些书，很有参考性，推荐大家阅读。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>近日工作不是那么忙，所以有时间看看书，这本书之前就已经读过一遍，隔了一段时间已经有所忘记，所以再次拾起，重新回顾一下。.</p>","more":"<h2 id=\"什么是全栈\"><a href=\"#什么是全栈\" class=\"headerlink\" title=\"什么是全栈\"></a>什么是全栈</h2><p>“全栈”是个外来词，翻译自英文full-stack，此处的栈指的是为了完成项目而使用的一系列技术的合集，不是堆栈概念中的栈。</p>\n<p>“全端”工程师是指能够完成pc端、移动端等多终端设备适配的情况</p>\n<h2 id=\"什么是全栈工程师\"><a href=\"#什么是全栈工程师\" class=\"headerlink\" title=\"什么是全栈工程师\"></a>什么是全栈工程师</h2><blockquote>\n<p>全栈工程师是指一个能够处理数据库、服务器、系统工程、客户端等所有工作的的工程师，根据项目不同，可能是移动栈、Web栈，或者原生应用程序栈。</p>\n</blockquote>\n<p>简单来说全栈工程师就是一个人能搞定一个项目，全能大神一样的人物。</p>\n<h2 id=\"一个Web产品典型的技术栈\"><a href=\"#一个Web产品典型的技术栈\" class=\"headerlink\" title=\"一个Web产品典型的技术栈\"></a>一个Web产品典型的技术栈</h2><blockquote>\n<p>服务器+数据库+服务器端编程语言+前端编程语言</p>\n</blockquote>\n<blockquote>\n<p>全栈工程师技术的兴起有两个重要原因：技术的发展和PaaS（Platform as a Service，平台即服务）服务的平台越来越多。</p>\n</blockquote>\n<h3 id=\"全栈框架———MEAN\"><a href=\"#全栈框架———MEAN\" class=\"headerlink\" title=\"全栈框架———MEAN\"></a>全栈框架———MEAN</h3><blockquote>\n<p>MongoDB-Express-AngularJs-Node.js<br>前后端采用一种编程语言JavaScript</p>\n</blockquote>\n<h2 id=\"全栈工程师的要求\"><a href=\"#全栈工程师的要求\" class=\"headerlink\" title=\"全栈工程师的要求\"></a>全栈工程师的要求</h2><h3 id=\"一专多长\"><a href=\"#一专多长\" class=\"headerlink\" title=\"一专多长\"></a>一专多长</h3><p>在一个领域里至少达到高级的级别，然后再去向上游或者下游延伸</p>\n<h3 id=\"关注商业目标\"><a href=\"#关注商业目标\" class=\"headerlink\" title=\"关注商业目标\"></a>关注商业目标</h3><p>公司聘请你是为了让你产生利润，并不关心你会什么，所以选择技术栈时要考虑的是如何降低公司的成本或者提高收入。</p>\n<h3 id=\"关注用户体验\"><a href=\"#关注用户体验\" class=\"headerlink\" title=\"关注用户体验\"></a>关注用户体验</h3><p>产品的最终目标是满足客户的需求，所以作为全栈工程师必须要关注用户体验。</p>\n<hr>\n<p>这是一些作为全栈工程师我整理出来的干货，这本书本身并不是一本技术性很强的书，倒像是一位过来人介绍些经验，适合刚入职场或者进入职场不久的人，在前端领域比较迷茫时看一看，书中介绍了作者读过的一些书，很有参考性，推荐大家阅读。</p>"},{"title":"CSS border三角、圆角图形生成技术详解","date":"2013-06-26T14:22:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n利用CSS的border属性可以生成一些图形，例如三角或是圆角。纯粹的CSS2的内容，没有兼容性的问题，我之前在纯CSS实现各类气球泡泡对话框效果一文中算是比较详细的讲述了CSS border属性生成三角的原理，以及实例。我觉得此技术相当实用的，故本文再次简单叙述一下，另外，本文还将展示可能并不为众人所知的CSS border圆角生成技术。好了，裹脚布的话就不说了，直接进入正题。\n<!-- more -->\n\n# CSS border生成三角技术简介\n## 效果抢鲜\n下图为使用CSS的border属性实现的三角效果：\n```\n// css 代码\n.test{\n  width: 0; \n  height: 0; \n  border-width: 20px 10px; \n  border-style: solid; \n  border-color: #ff3300 #ff3300 #ffffff #ffffff;\n}\n```\n如何实现的，为何会有这样的效果，不急，take it easy!\n## 梯形图案\n看下面这段样式：\n```\n.test{\n  width: 10px; \n  height: 10px; \n  border: 10px solid; \n  border-color: #ff3300 #0000ff #339966 #00ff00\n}\n```\n当某个div应用了上面这个样式后，结果会如何？见下图（截自Firefox3.5，IE浏览器有细节上的差异）：\n## 更进一步 – 部分边框透明\n现在，设想一下，如果我们现在只保留一个一个上边框，其余边框均transparent透明（或与背景色同色），那么是不是就只显示一个上面红色的边框了，我们测试下，与上面类似的代码，只是修改下其余三个边框的颜色。\n```\n.test{\n  width:10px; \n  height:10px; \n  border:10px solid; \n  border-color:#ff3300 #ffffff #ffffff #ffffff;\n}\n```\n结果如下图（截自Firefox3.5）：\n## 从梯形到三角\n上面的是梯形，我要想得到一个三角图案该怎么办呢？显然，很简单，把div的高宽都变成0，只留一边，不就是三角了吗？如下代码：\n\n```\n.test{\n  width: 0; \n  height: 0; \n  border: 10px solid; \n  border-color: #ff3300 #ffffff #ffffff #ffffff;}\n```\n结果如下（依旧截图自Firefox3.5）：\n## 从等腰直角三角形到普通等腰三角\n上图为等腰直角三角形，之所以为等腰直角，是因为所有的边框宽度是一样的，如果我们将边框宽度设置为不同，那会怎样？则会形成等腰三角形。如下代码：\n```\n.test{\n  width: 0; \n  height: 0; \n  border-width: 20px 10px; \n  border-style: solid; \n  border-color: #ff3300 #ffffff #ffffff #ffffff;}\n```\n得到的结果如下图：\n## 从等腰到不等腰\n我们可以不局限于保留一条边框，我们可以保留两条，于是我们可以告别等腰，得到更加锐利的三角，正如一开始所展示的那个三角：\n```\n.test{\n  width: 0; \n  height: 0; \n  border-width: 20px 10px; \n  border-style: solid; \n  border-color: #ff3300 #ff3300 #ffffff #ffffff;}\n```\n## 实际的应用\n关于应用，不多说，直接看图：\n说明：\n以上的测试代码纯粹为了说明原理，所以使用#ffffff白色边框，通过于背景融合来隐藏边框。在实际的操作中，应该使用transparent透明属性，例如border-color:#ff3300 #ff3300 transparent transparent;，这同样会有问题，IE6浏览器不支持transparent透明属性，不过没有关系，就border生成三角技术而言，直接设置对应的透明边框的border-style属性为dotted或是dashed即可解决这一问题，为什么使用dotted和dashed可以修复此问题呢？您有兴趣可以参见默尘的这篇文章Dotted&Dashed终极分析及IE6透明边框。\n\n# CSS border圆角生成技术简介\n## 我看圆角\n一提到圆角，我脑中闪过的词就是“定位”，“嵌套”，“模拟”，“渐进增强”，“滥用”。\n- 定位，也就是切四个角上下左右定位，这是淘宝首页的做法，但是面对IE6的奇偶bug只能当作看客；\n- 使用“嵌套”则不会有此问题，“嵌套”分图片背景嵌套和CSS边框嵌套，使用图片嵌套则图片的重用性，大小优化有待加强，边框嵌套则技术实现上有些难度；\n- 或使用“渐进增强”，CSS3 border-radius属性，而不要去鸟IE这类自我感觉良好的浏览器；\n- 或是学习Google使用CSS模拟，而一般的CSS模拟都是使用左右边框+背景色的方式1像素1像素的拼合成的。这类方法各有优缺点，需根据实际情况采用。对于满眼圆角的设计图我是很不喜欢的，该用则用，切勿为了圆角而圆角。\n\n## border圆角图案生成法\n这里介绍的实现圆角的得到与上面提到的都是不一样的，虽然也属于CSS模拟的范畴，但是其高效的程度确实相当惊人的，可谓最佳实践之一。\n我们先看看效果，见下图，截自Firefox3.6：\n上述效果的实现仅仅使用了三个标签，如下代码：\n```\n// html 代码\n<div class=\"box\">\n  <div class=\"top\"></div>\n  <div class=\"center\">我是一只小小鸟、小小鸟！</div>\n  <div class=\"bot\"></div>\n</div>\n\n// css 代码\n.box{\n  width:500px;\n}\n.top{\n  border-bottom:3px solid; \n  border-top-color:#cc0000; \n  border-bottom-color:#cc0000; \n  border-left:3px dotted transparent; \n  border-right:3px dotted transparent;\n}\n.center{\n  padding:10px 20px; \n  color:white; \n  font-size:14px; \n  background:#cc0000;\n}\n.bot{\n  border-top:3px solid; \n  border-top-color:#cc0000; \n  border-bottom-color:#cccccc; \n  border-left:3px dotted transparent; \n  border-right:3px dotted transparent;\n}\n```\n我们看看这段代码在IE6下的效果：\n\n这里的高效在于，仅仅使用了一层标签就模拟了3像素的圆角，按照曾经我对CSS圆角模拟的理解，模拟1像素的圆角需要一层标签(background+borderLeft+borderRight)，两像素的需要两层标签，三像素的需要三层标签。\n\n有点神奇，但是就像看刘谦的魔术一样，说穿了也就那么回事，其实这里的圆角模拟在本文的上面已经展示了，就是这样图片：\n\n您可能会疑问，是不是搞错图片啦，这显然不是一个模样的，非也非也，就本质上而言，圆角的实现与上面的梯形图就是同样的东西。现在，盯着上面这张图，我们想象一下，用力的想象，用想花姑娘的那番劲头想象——上面的梯形宽度越来越宽（不是拉伸），一直宽到500像素，是不是与上面实现的圆角的下边缘一致啊？\n\n也就是说，那个含有“我是一只小小鸟……”文字的圆角图形是有一个上梯形+矩形+下梯形组成的。参见下面的分离效果图：\n您可以狠狠地点击这里：CSS border圆角生成demo\n\n## 局限性\n人无完人，金无足赤，此方法虽然简洁高效，兼容性上佳，但是依然有局限性，在实现实色背景的圆角效果时，此方法可谓首选；如果是纯粹的圆角边框，此方法也可以实现，需要用到边框重叠，但是标签数几乎要翻倍，其权衡效用将大打折扣，反不如其他圆角方法来的实在。\n\n# 结语\n如果在web制作中，需要用的一些直接可以使用CSS+单标签模拟的图片，我的建议是“毫不犹豫使用CSS模拟”，例如实色的三角，或是实现实色的圆角效果，这可以说是最高效，最利于扩展维护的前端实现方法了。我们需要开阔的思维，而不要仅仅局限于眼前的技术，武侠中所谓的“无招胜有招”还是有着一定的哲学道理的，长远来看，意识与海纳百川的心态比当下的一点技术更来得重要。\n","source":"_posts/CSS-Triangle-Circle.md","raw":"---\ntitle: CSS border三角、圆角图形生成技术详解\ndate: 2013-06-26 22:22:22\ncategories: \n\t- CSS技巧\ntags: \n\t- CSS\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n利用CSS的border属性可以生成一些图形，例如三角或是圆角。纯粹的CSS2的内容，没有兼容性的问题，我之前在纯CSS实现各类气球泡泡对话框效果一文中算是比较详细的讲述了CSS border属性生成三角的原理，以及实例。我觉得此技术相当实用的，故本文再次简单叙述一下，另外，本文还将展示可能并不为众人所知的CSS border圆角生成技术。好了，裹脚布的话就不说了，直接进入正题。\n<!-- more -->\n\n# CSS border生成三角技术简介\n## 效果抢鲜\n下图为使用CSS的border属性实现的三角效果：\n```\n// css 代码\n.test{\n  width: 0; \n  height: 0; \n  border-width: 20px 10px; \n  border-style: solid; \n  border-color: #ff3300 #ff3300 #ffffff #ffffff;\n}\n```\n如何实现的，为何会有这样的效果，不急，take it easy!\n## 梯形图案\n看下面这段样式：\n```\n.test{\n  width: 10px; \n  height: 10px; \n  border: 10px solid; \n  border-color: #ff3300 #0000ff #339966 #00ff00\n}\n```\n当某个div应用了上面这个样式后，结果会如何？见下图（截自Firefox3.5，IE浏览器有细节上的差异）：\n## 更进一步 – 部分边框透明\n现在，设想一下，如果我们现在只保留一个一个上边框，其余边框均transparent透明（或与背景色同色），那么是不是就只显示一个上面红色的边框了，我们测试下，与上面类似的代码，只是修改下其余三个边框的颜色。\n```\n.test{\n  width:10px; \n  height:10px; \n  border:10px solid; \n  border-color:#ff3300 #ffffff #ffffff #ffffff;\n}\n```\n结果如下图（截自Firefox3.5）：\n## 从梯形到三角\n上面的是梯形，我要想得到一个三角图案该怎么办呢？显然，很简单，把div的高宽都变成0，只留一边，不就是三角了吗？如下代码：\n\n```\n.test{\n  width: 0; \n  height: 0; \n  border: 10px solid; \n  border-color: #ff3300 #ffffff #ffffff #ffffff;}\n```\n结果如下（依旧截图自Firefox3.5）：\n## 从等腰直角三角形到普通等腰三角\n上图为等腰直角三角形，之所以为等腰直角，是因为所有的边框宽度是一样的，如果我们将边框宽度设置为不同，那会怎样？则会形成等腰三角形。如下代码：\n```\n.test{\n  width: 0; \n  height: 0; \n  border-width: 20px 10px; \n  border-style: solid; \n  border-color: #ff3300 #ffffff #ffffff #ffffff;}\n```\n得到的结果如下图：\n## 从等腰到不等腰\n我们可以不局限于保留一条边框，我们可以保留两条，于是我们可以告别等腰，得到更加锐利的三角，正如一开始所展示的那个三角：\n```\n.test{\n  width: 0; \n  height: 0; \n  border-width: 20px 10px; \n  border-style: solid; \n  border-color: #ff3300 #ff3300 #ffffff #ffffff;}\n```\n## 实际的应用\n关于应用，不多说，直接看图：\n说明：\n以上的测试代码纯粹为了说明原理，所以使用#ffffff白色边框，通过于背景融合来隐藏边框。在实际的操作中，应该使用transparent透明属性，例如border-color:#ff3300 #ff3300 transparent transparent;，这同样会有问题，IE6浏览器不支持transparent透明属性，不过没有关系，就border生成三角技术而言，直接设置对应的透明边框的border-style属性为dotted或是dashed即可解决这一问题，为什么使用dotted和dashed可以修复此问题呢？您有兴趣可以参见默尘的这篇文章Dotted&Dashed终极分析及IE6透明边框。\n\n# CSS border圆角生成技术简介\n## 我看圆角\n一提到圆角，我脑中闪过的词就是“定位”，“嵌套”，“模拟”，“渐进增强”，“滥用”。\n- 定位，也就是切四个角上下左右定位，这是淘宝首页的做法，但是面对IE6的奇偶bug只能当作看客；\n- 使用“嵌套”则不会有此问题，“嵌套”分图片背景嵌套和CSS边框嵌套，使用图片嵌套则图片的重用性，大小优化有待加强，边框嵌套则技术实现上有些难度；\n- 或使用“渐进增强”，CSS3 border-radius属性，而不要去鸟IE这类自我感觉良好的浏览器；\n- 或是学习Google使用CSS模拟，而一般的CSS模拟都是使用左右边框+背景色的方式1像素1像素的拼合成的。这类方法各有优缺点，需根据实际情况采用。对于满眼圆角的设计图我是很不喜欢的，该用则用，切勿为了圆角而圆角。\n\n## border圆角图案生成法\n这里介绍的实现圆角的得到与上面提到的都是不一样的，虽然也属于CSS模拟的范畴，但是其高效的程度确实相当惊人的，可谓最佳实践之一。\n我们先看看效果，见下图，截自Firefox3.6：\n上述效果的实现仅仅使用了三个标签，如下代码：\n```\n// html 代码\n<div class=\"box\">\n  <div class=\"top\"></div>\n  <div class=\"center\">我是一只小小鸟、小小鸟！</div>\n  <div class=\"bot\"></div>\n</div>\n\n// css 代码\n.box{\n  width:500px;\n}\n.top{\n  border-bottom:3px solid; \n  border-top-color:#cc0000; \n  border-bottom-color:#cc0000; \n  border-left:3px dotted transparent; \n  border-right:3px dotted transparent;\n}\n.center{\n  padding:10px 20px; \n  color:white; \n  font-size:14px; \n  background:#cc0000;\n}\n.bot{\n  border-top:3px solid; \n  border-top-color:#cc0000; \n  border-bottom-color:#cccccc; \n  border-left:3px dotted transparent; \n  border-right:3px dotted transparent;\n}\n```\n我们看看这段代码在IE6下的效果：\n\n这里的高效在于，仅仅使用了一层标签就模拟了3像素的圆角，按照曾经我对CSS圆角模拟的理解，模拟1像素的圆角需要一层标签(background+borderLeft+borderRight)，两像素的需要两层标签，三像素的需要三层标签。\n\n有点神奇，但是就像看刘谦的魔术一样，说穿了也就那么回事，其实这里的圆角模拟在本文的上面已经展示了，就是这样图片：\n\n您可能会疑问，是不是搞错图片啦，这显然不是一个模样的，非也非也，就本质上而言，圆角的实现与上面的梯形图就是同样的东西。现在，盯着上面这张图，我们想象一下，用力的想象，用想花姑娘的那番劲头想象——上面的梯形宽度越来越宽（不是拉伸），一直宽到500像素，是不是与上面实现的圆角的下边缘一致啊？\n\n也就是说，那个含有“我是一只小小鸟……”文字的圆角图形是有一个上梯形+矩形+下梯形组成的。参见下面的分离效果图：\n您可以狠狠地点击这里：CSS border圆角生成demo\n\n## 局限性\n人无完人，金无足赤，此方法虽然简洁高效，兼容性上佳，但是依然有局限性，在实现实色背景的圆角效果时，此方法可谓首选；如果是纯粹的圆角边框，此方法也可以实现，需要用到边框重叠，但是标签数几乎要翻倍，其权衡效用将大打折扣，反不如其他圆角方法来的实在。\n\n# 结语\n如果在web制作中，需要用的一些直接可以使用CSS+单标签模拟的图片，我的建议是“毫不犹豫使用CSS模拟”，例如实色的三角，或是实现实色的圆角效果，这可以说是最高效，最利于扩展维护的前端实现方法了。我们需要开阔的思维，而不要仅仅局限于眼前的技术，武侠中所谓的“无招胜有招”还是有着一定的哲学道理的，长远来看，意识与海纳百川的心态比当下的一点技术更来得重要。\n","slug":"CSS-Triangle-Circle","published":1,"updated":"2019-12-31T10:08:25.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4tzdeui0000v0a6asmpb8bm","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>利用CSS的border属性可以生成一些图形，例如三角或是圆角。纯粹的CSS2的内容，没有兼容性的问题，我之前在纯CSS实现各类气球泡泡对话框效果一文中算是比较详细的讲述了CSS border属性生成三角的原理，以及实例。我觉得此技术相当实用的，故本文再次简单叙述一下，另外，本文还将展示可能并不为众人所知的CSS border圆角生成技术。好了，裹脚布的话就不说了，直接进入正题。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"CSS-border生成三角技术简介\"><a href=\"#CSS-border生成三角技术简介\" class=\"headerlink\" title=\"CSS border生成三角技术简介\"></a>CSS border生成三角技术简介</h1><h2 id=\"效果抢鲜\"><a href=\"#效果抢鲜\" class=\"headerlink\" title=\"效果抢鲜\"></a>效果抢鲜</h2><p>下图为使用CSS的border属性实现的三角效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; css 代码</span><br><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width: 0; </span><br><span class=\"line\">  height: 0; </span><br><span class=\"line\">  border-width: 20px 10px; </span><br><span class=\"line\">  border-style: solid; </span><br><span class=\"line\">  border-color: #ff3300 #ff3300 #ffffff #ffffff;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何实现的，为何会有这样的效果，不急，take it easy!</p>\n<h2 id=\"梯形图案\"><a href=\"#梯形图案\" class=\"headerlink\" title=\"梯形图案\"></a>梯形图案</h2><p>看下面这段样式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width: 10px; </span><br><span class=\"line\">  height: 10px; </span><br><span class=\"line\">  border: 10px solid; </span><br><span class=\"line\">  border-color: #ff3300 #0000ff #339966 #00ff00</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当某个div应用了上面这个样式后，结果会如何？见下图（截自Firefox3.5，IE浏览器有细节上的差异）：</p>\n<h2 id=\"更进一步-–-部分边框透明\"><a href=\"#更进一步-–-部分边框透明\" class=\"headerlink\" title=\"更进一步 – 部分边框透明\"></a>更进一步 – 部分边框透明</h2><p>现在，设想一下，如果我们现在只保留一个一个上边框，其余边框均transparent透明（或与背景色同色），那么是不是就只显示一个上面红色的边框了，我们测试下，与上面类似的代码，只是修改下其余三个边框的颜色。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width:10px; </span><br><span class=\"line\">  height:10px; </span><br><span class=\"line\">  border:10px solid; </span><br><span class=\"line\">  border-color:#ff3300 #ffffff #ffffff #ffffff;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下图（截自Firefox3.5）：</p>\n<h2 id=\"从梯形到三角\"><a href=\"#从梯形到三角\" class=\"headerlink\" title=\"从梯形到三角\"></a>从梯形到三角</h2><p>上面的是梯形，我要想得到一个三角图案该怎么办呢？显然，很简单，把div的高宽都变成0，只留一边，不就是三角了吗？如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width: 0; </span><br><span class=\"line\">  height: 0; </span><br><span class=\"line\">  border: 10px solid; </span><br><span class=\"line\">  border-color: #ff3300 #ffffff #ffffff #ffffff;&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下（依旧截图自Firefox3.5）：</p>\n<h2 id=\"从等腰直角三角形到普通等腰三角\"><a href=\"#从等腰直角三角形到普通等腰三角\" class=\"headerlink\" title=\"从等腰直角三角形到普通等腰三角\"></a>从等腰直角三角形到普通等腰三角</h2><p>上图为等腰直角三角形，之所以为等腰直角，是因为所有的边框宽度是一样的，如果我们将边框宽度设置为不同，那会怎样？则会形成等腰三角形。如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width: 0; </span><br><span class=\"line\">  height: 0; </span><br><span class=\"line\">  border-width: 20px 10px; </span><br><span class=\"line\">  border-style: solid; </span><br><span class=\"line\">  border-color: #ff3300 #ffffff #ffffff #ffffff;&#125;</span><br></pre></td></tr></table></figure>\n<p>得到的结果如下图：</p>\n<h2 id=\"从等腰到不等腰\"><a href=\"#从等腰到不等腰\" class=\"headerlink\" title=\"从等腰到不等腰\"></a>从等腰到不等腰</h2><p>我们可以不局限于保留一条边框，我们可以保留两条，于是我们可以告别等腰，得到更加锐利的三角，正如一开始所展示的那个三角：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width: 0; </span><br><span class=\"line\">  height: 0; </span><br><span class=\"line\">  border-width: 20px 10px; </span><br><span class=\"line\">  border-style: solid; </span><br><span class=\"line\">  border-color: #ff3300 #ff3300 #ffffff #ffffff;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实际的应用\"><a href=\"#实际的应用\" class=\"headerlink\" title=\"实际的应用\"></a>实际的应用</h2><p>关于应用，不多说，直接看图：<br>说明：<br>以上的测试代码纯粹为了说明原理，所以使用#ffffff白色边框，通过于背景融合来隐藏边框。在实际的操作中，应该使用transparent透明属性，例如border-color:#ff3300 #ff3300 transparent transparent;，这同样会有问题，IE6浏览器不支持transparent透明属性，不过没有关系，就border生成三角技术而言，直接设置对应的透明边框的border-style属性为dotted或是dashed即可解决这一问题，为什么使用dotted和dashed可以修复此问题呢？您有兴趣可以参见默尘的这篇文章Dotted&amp;Dashed终极分析及IE6透明边框。</p>\n<h1 id=\"CSS-border圆角生成技术简介\"><a href=\"#CSS-border圆角生成技术简介\" class=\"headerlink\" title=\"CSS border圆角生成技术简介\"></a>CSS border圆角生成技术简介</h1><h2 id=\"我看圆角\"><a href=\"#我看圆角\" class=\"headerlink\" title=\"我看圆角\"></a>我看圆角</h2><p>一提到圆角，我脑中闪过的词就是“定位”，“嵌套”，“模拟”，“渐进增强”，“滥用”。</p>\n<ul>\n<li>定位，也就是切四个角上下左右定位，这是淘宝首页的做法，但是面对IE6的奇偶bug只能当作看客；</li>\n<li>使用“嵌套”则不会有此问题，“嵌套”分图片背景嵌套和CSS边框嵌套，使用图片嵌套则图片的重用性，大小优化有待加强，边框嵌套则技术实现上有些难度；</li>\n<li>或使用“渐进增强”，CSS3 border-radius属性，而不要去鸟IE这类自我感觉良好的浏览器；</li>\n<li>或是学习Google使用CSS模拟，而一般的CSS模拟都是使用左右边框+背景色的方式1像素1像素的拼合成的。这类方法各有优缺点，需根据实际情况采用。对于满眼圆角的设计图我是很不喜欢的，该用则用，切勿为了圆角而圆角。</li>\n</ul>\n<h2 id=\"border圆角图案生成法\"><a href=\"#border圆角图案生成法\" class=\"headerlink\" title=\"border圆角图案生成法\"></a>border圆角图案生成法</h2><p>这里介绍的实现圆角的得到与上面提到的都是不一样的，虽然也属于CSS模拟的范畴，但是其高效的程度确实相当惊人的，可谓最佳实践之一。<br>我们先看看效果，见下图，截自Firefox3.6：<br>上述效果的实现仅仅使用了三个标签，如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; html 代码</span><br><span class=\"line\">&lt;div class&#x3D;&quot;box&quot;&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;top&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;center&quot;&gt;我是一只小小鸟、小小鸟！&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;bot&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; css 代码</span><br><span class=\"line\">.box&#123;</span><br><span class=\"line\">  width:500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.top&#123;</span><br><span class=\"line\">  border-bottom:3px solid; </span><br><span class=\"line\">  border-top-color:#cc0000; </span><br><span class=\"line\">  border-bottom-color:#cc0000; </span><br><span class=\"line\">  border-left:3px dotted transparent; </span><br><span class=\"line\">  border-right:3px dotted transparent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.center&#123;</span><br><span class=\"line\">  padding:10px 20px; </span><br><span class=\"line\">  color:white; </span><br><span class=\"line\">  font-size:14px; </span><br><span class=\"line\">  background:#cc0000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.bot&#123;</span><br><span class=\"line\">  border-top:3px solid; </span><br><span class=\"line\">  border-top-color:#cc0000; </span><br><span class=\"line\">  border-bottom-color:#cccccc; </span><br><span class=\"line\">  border-left:3px dotted transparent; </span><br><span class=\"line\">  border-right:3px dotted transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们看看这段代码在IE6下的效果：</p>\n<p>这里的高效在于，仅仅使用了一层标签就模拟了3像素的圆角，按照曾经我对CSS圆角模拟的理解，模拟1像素的圆角需要一层标签(background+borderLeft+borderRight)，两像素的需要两层标签，三像素的需要三层标签。</p>\n<p>有点神奇，但是就像看刘谦的魔术一样，说穿了也就那么回事，其实这里的圆角模拟在本文的上面已经展示了，就是这样图片：</p>\n<p>您可能会疑问，是不是搞错图片啦，这显然不是一个模样的，非也非也，就本质上而言，圆角的实现与上面的梯形图就是同样的东西。现在，盯着上面这张图，我们想象一下，用力的想象，用想花姑娘的那番劲头想象——上面的梯形宽度越来越宽（不是拉伸），一直宽到500像素，是不是与上面实现的圆角的下边缘一致啊？</p>\n<p>也就是说，那个含有“我是一只小小鸟……”文字的圆角图形是有一个上梯形+矩形+下梯形组成的。参见下面的分离效果图：<br>您可以狠狠地点击这里：CSS border圆角生成demo</p>\n<h2 id=\"局限性\"><a href=\"#局限性\" class=\"headerlink\" title=\"局限性\"></a>局限性</h2><p>人无完人，金无足赤，此方法虽然简洁高效，兼容性上佳，但是依然有局限性，在实现实色背景的圆角效果时，此方法可谓首选；如果是纯粹的圆角边框，此方法也可以实现，需要用到边框重叠，但是标签数几乎要翻倍，其权衡效用将大打折扣，反不如其他圆角方法来的实在。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>如果在web制作中，需要用的一些直接可以使用CSS+单标签模拟的图片，我的建议是“毫不犹豫使用CSS模拟”，例如实色的三角，或是实现实色的圆角效果，这可以说是最高效，最利于扩展维护的前端实现方法了。我们需要开阔的思维，而不要仅仅局限于眼前的技术，武侠中所谓的“无招胜有招”还是有着一定的哲学道理的，长远来看，意识与海纳百川的心态比当下的一点技术更来得重要。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>利用CSS的border属性可以生成一些图形，例如三角或是圆角。纯粹的CSS2的内容，没有兼容性的问题，我之前在纯CSS实现各类气球泡泡对话框效果一文中算是比较详细的讲述了CSS border属性生成三角的原理，以及实例。我觉得此技术相当实用的，故本文再次简单叙述一下，另外，本文还将展示可能并不为众人所知的CSS border圆角生成技术。好了，裹脚布的话就不说了，直接进入正题。</p>","more":"<h1 id=\"CSS-border生成三角技术简介\"><a href=\"#CSS-border生成三角技术简介\" class=\"headerlink\" title=\"CSS border生成三角技术简介\"></a>CSS border生成三角技术简介</h1><h2 id=\"效果抢鲜\"><a href=\"#效果抢鲜\" class=\"headerlink\" title=\"效果抢鲜\"></a>效果抢鲜</h2><p>下图为使用CSS的border属性实现的三角效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; css 代码</span><br><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width: 0; </span><br><span class=\"line\">  height: 0; </span><br><span class=\"line\">  border-width: 20px 10px; </span><br><span class=\"line\">  border-style: solid; </span><br><span class=\"line\">  border-color: #ff3300 #ff3300 #ffffff #ffffff;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何实现的，为何会有这样的效果，不急，take it easy!</p>\n<h2 id=\"梯形图案\"><a href=\"#梯形图案\" class=\"headerlink\" title=\"梯形图案\"></a>梯形图案</h2><p>看下面这段样式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width: 10px; </span><br><span class=\"line\">  height: 10px; </span><br><span class=\"line\">  border: 10px solid; </span><br><span class=\"line\">  border-color: #ff3300 #0000ff #339966 #00ff00</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当某个div应用了上面这个样式后，结果会如何？见下图（截自Firefox3.5，IE浏览器有细节上的差异）：</p>\n<h2 id=\"更进一步-–-部分边框透明\"><a href=\"#更进一步-–-部分边框透明\" class=\"headerlink\" title=\"更进一步 – 部分边框透明\"></a>更进一步 – 部分边框透明</h2><p>现在，设想一下，如果我们现在只保留一个一个上边框，其余边框均transparent透明（或与背景色同色），那么是不是就只显示一个上面红色的边框了，我们测试下，与上面类似的代码，只是修改下其余三个边框的颜色。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width:10px; </span><br><span class=\"line\">  height:10px; </span><br><span class=\"line\">  border:10px solid; </span><br><span class=\"line\">  border-color:#ff3300 #ffffff #ffffff #ffffff;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下图（截自Firefox3.5）：</p>\n<h2 id=\"从梯形到三角\"><a href=\"#从梯形到三角\" class=\"headerlink\" title=\"从梯形到三角\"></a>从梯形到三角</h2><p>上面的是梯形，我要想得到一个三角图案该怎么办呢？显然，很简单，把div的高宽都变成0，只留一边，不就是三角了吗？如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width: 0; </span><br><span class=\"line\">  height: 0; </span><br><span class=\"line\">  border: 10px solid; </span><br><span class=\"line\">  border-color: #ff3300 #ffffff #ffffff #ffffff;&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下（依旧截图自Firefox3.5）：</p>\n<h2 id=\"从等腰直角三角形到普通等腰三角\"><a href=\"#从等腰直角三角形到普通等腰三角\" class=\"headerlink\" title=\"从等腰直角三角形到普通等腰三角\"></a>从等腰直角三角形到普通等腰三角</h2><p>上图为等腰直角三角形，之所以为等腰直角，是因为所有的边框宽度是一样的，如果我们将边框宽度设置为不同，那会怎样？则会形成等腰三角形。如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width: 0; </span><br><span class=\"line\">  height: 0; </span><br><span class=\"line\">  border-width: 20px 10px; </span><br><span class=\"line\">  border-style: solid; </span><br><span class=\"line\">  border-color: #ff3300 #ffffff #ffffff #ffffff;&#125;</span><br></pre></td></tr></table></figure>\n<p>得到的结果如下图：</p>\n<h2 id=\"从等腰到不等腰\"><a href=\"#从等腰到不等腰\" class=\"headerlink\" title=\"从等腰到不等腰\"></a>从等腰到不等腰</h2><p>我们可以不局限于保留一条边框，我们可以保留两条，于是我们可以告别等腰，得到更加锐利的三角，正如一开始所展示的那个三角：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test&#123;</span><br><span class=\"line\">  width: 0; </span><br><span class=\"line\">  height: 0; </span><br><span class=\"line\">  border-width: 20px 10px; </span><br><span class=\"line\">  border-style: solid; </span><br><span class=\"line\">  border-color: #ff3300 #ff3300 #ffffff #ffffff;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实际的应用\"><a href=\"#实际的应用\" class=\"headerlink\" title=\"实际的应用\"></a>实际的应用</h2><p>关于应用，不多说，直接看图：<br>说明：<br>以上的测试代码纯粹为了说明原理，所以使用#ffffff白色边框，通过于背景融合来隐藏边框。在实际的操作中，应该使用transparent透明属性，例如border-color:#ff3300 #ff3300 transparent transparent;，这同样会有问题，IE6浏览器不支持transparent透明属性，不过没有关系，就border生成三角技术而言，直接设置对应的透明边框的border-style属性为dotted或是dashed即可解决这一问题，为什么使用dotted和dashed可以修复此问题呢？您有兴趣可以参见默尘的这篇文章Dotted&amp;Dashed终极分析及IE6透明边框。</p>\n<h1 id=\"CSS-border圆角生成技术简介\"><a href=\"#CSS-border圆角生成技术简介\" class=\"headerlink\" title=\"CSS border圆角生成技术简介\"></a>CSS border圆角生成技术简介</h1><h2 id=\"我看圆角\"><a href=\"#我看圆角\" class=\"headerlink\" title=\"我看圆角\"></a>我看圆角</h2><p>一提到圆角，我脑中闪过的词就是“定位”，“嵌套”，“模拟”，“渐进增强”，“滥用”。</p>\n<ul>\n<li>定位，也就是切四个角上下左右定位，这是淘宝首页的做法，但是面对IE6的奇偶bug只能当作看客；</li>\n<li>使用“嵌套”则不会有此问题，“嵌套”分图片背景嵌套和CSS边框嵌套，使用图片嵌套则图片的重用性，大小优化有待加强，边框嵌套则技术实现上有些难度；</li>\n<li>或使用“渐进增强”，CSS3 border-radius属性，而不要去鸟IE这类自我感觉良好的浏览器；</li>\n<li>或是学习Google使用CSS模拟，而一般的CSS模拟都是使用左右边框+背景色的方式1像素1像素的拼合成的。这类方法各有优缺点，需根据实际情况采用。对于满眼圆角的设计图我是很不喜欢的，该用则用，切勿为了圆角而圆角。</li>\n</ul>\n<h2 id=\"border圆角图案生成法\"><a href=\"#border圆角图案生成法\" class=\"headerlink\" title=\"border圆角图案生成法\"></a>border圆角图案生成法</h2><p>这里介绍的实现圆角的得到与上面提到的都是不一样的，虽然也属于CSS模拟的范畴，但是其高效的程度确实相当惊人的，可谓最佳实践之一。<br>我们先看看效果，见下图，截自Firefox3.6：<br>上述效果的实现仅仅使用了三个标签，如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; html 代码</span><br><span class=\"line\">&lt;div class&#x3D;&quot;box&quot;&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;top&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;center&quot;&gt;我是一只小小鸟、小小鸟！&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;bot&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; css 代码</span><br><span class=\"line\">.box&#123;</span><br><span class=\"line\">  width:500px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.top&#123;</span><br><span class=\"line\">  border-bottom:3px solid; </span><br><span class=\"line\">  border-top-color:#cc0000; </span><br><span class=\"line\">  border-bottom-color:#cc0000; </span><br><span class=\"line\">  border-left:3px dotted transparent; </span><br><span class=\"line\">  border-right:3px dotted transparent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.center&#123;</span><br><span class=\"line\">  padding:10px 20px; </span><br><span class=\"line\">  color:white; </span><br><span class=\"line\">  font-size:14px; </span><br><span class=\"line\">  background:#cc0000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.bot&#123;</span><br><span class=\"line\">  border-top:3px solid; </span><br><span class=\"line\">  border-top-color:#cc0000; </span><br><span class=\"line\">  border-bottom-color:#cccccc; </span><br><span class=\"line\">  border-left:3px dotted transparent; </span><br><span class=\"line\">  border-right:3px dotted transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们看看这段代码在IE6下的效果：</p>\n<p>这里的高效在于，仅仅使用了一层标签就模拟了3像素的圆角，按照曾经我对CSS圆角模拟的理解，模拟1像素的圆角需要一层标签(background+borderLeft+borderRight)，两像素的需要两层标签，三像素的需要三层标签。</p>\n<p>有点神奇，但是就像看刘谦的魔术一样，说穿了也就那么回事，其实这里的圆角模拟在本文的上面已经展示了，就是这样图片：</p>\n<p>您可能会疑问，是不是搞错图片啦，这显然不是一个模样的，非也非也，就本质上而言，圆角的实现与上面的梯形图就是同样的东西。现在，盯着上面这张图，我们想象一下，用力的想象，用想花姑娘的那番劲头想象——上面的梯形宽度越来越宽（不是拉伸），一直宽到500像素，是不是与上面实现的圆角的下边缘一致啊？</p>\n<p>也就是说，那个含有“我是一只小小鸟……”文字的圆角图形是有一个上梯形+矩形+下梯形组成的。参见下面的分离效果图：<br>您可以狠狠地点击这里：CSS border圆角生成demo</p>\n<h2 id=\"局限性\"><a href=\"#局限性\" class=\"headerlink\" title=\"局限性\"></a>局限性</h2><p>人无完人，金无足赤，此方法虽然简洁高效，兼容性上佳，但是依然有局限性，在实现实色背景的圆角效果时，此方法可谓首选；如果是纯粹的圆角边框，此方法也可以实现，需要用到边框重叠，但是标签数几乎要翻倍，其权衡效用将大打折扣，反不如其他圆角方法来的实在。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>如果在web制作中，需要用的一些直接可以使用CSS+单标签模拟的图片，我的建议是“毫不犹豫使用CSS模拟”，例如实色的三角，或是实现实色的圆角效果，这可以说是最高效，最利于扩展维护的前端实现方法了。我们需要开阔的思维，而不要仅仅局限于眼前的技术，武侠中所谓的“无招胜有招”还是有着一定的哲学道理的，长远来看，意识与海纳百川的心态比当下的一点技术更来得重要。</p>"},{"title":"Git的常用命令","date":"2017-12-12T12:20:20.000Z","_content":"\n> 作者：李旭光\n> 引用请标明出处\n\n## 指令表\n\n| 指令                                   | 含义                        | 备注      |\n| -------------------------------------- | --------------------------- | --------- |\n| git add .                              | 提示增加文件                | .代表所有 |\n| git commit -m                          | \"说明内容\" 提交到本地服务器 |           |\n| git status                             | 显示修改信息                |           |\n| git pull                               | 从网络服务器拉 更新最新版本 |           |\n| git push                               | 上传最新版本                |           |\n| git branch                             | 查看当前分支                |           |\n| git checkout develop                   | 切换到develop模式           |           |\n| git merge master                       | 从master合并过来            |           |\n| git push origin develop                | 提交                        |           |\n| git clone git@192.168.2.10:bat-web.git | 从服务器克隆                |           |\n","source":"_posts/Git-Shell.md","raw":"---\ntitle: Git的常用命令\ndate: 2017-12-12 20:20:20\ncategories: \n  - 前端技术\ntags: \n  - Git\n---\n\n> 作者：李旭光\n> 引用请标明出处\n\n## 指令表\n\n| 指令                                   | 含义                        | 备注      |\n| -------------------------------------- | --------------------------- | --------- |\n| git add .                              | 提示增加文件                | .代表所有 |\n| git commit -m                          | \"说明内容\" 提交到本地服务器 |           |\n| git status                             | 显示修改信息                |           |\n| git pull                               | 从网络服务器拉 更新最新版本 |           |\n| git push                               | 上传最新版本                |           |\n| git branch                             | 查看当前分支                |           |\n| git checkout develop                   | 切换到develop模式           |           |\n| git merge master                       | 从master合并过来            |           |\n| git push origin develop                | 提交                        |           |\n| git clone git@192.168.2.10:bat-web.git | 从服务器克隆                |           |\n","slug":"Git-Shell","published":1,"updated":"2019-12-31T10:38:57.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4tzdev70001v0a6hcpz8g42","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h2 id=\"指令表\"><a href=\"#指令表\" class=\"headerlink\" title=\"指令表\"></a>指令表</h2><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>含义</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git add .</td>\n<td>提示增加文件</td>\n<td>.代表所有</td>\n</tr>\n<tr>\n<td>git commit -m</td>\n<td>“说明内容” 提交到本地服务器</td>\n<td></td>\n</tr>\n<tr>\n<td>git status</td>\n<td>显示修改信息</td>\n<td></td>\n</tr>\n<tr>\n<td>git pull</td>\n<td>从网络服务器拉 更新最新版本</td>\n<td></td>\n</tr>\n<tr>\n<td>git push</td>\n<td>上传最新版本</td>\n<td></td>\n</tr>\n<tr>\n<td>git branch</td>\n<td>查看当前分支</td>\n<td></td>\n</tr>\n<tr>\n<td>git checkout develop</td>\n<td>切换到develop模式</td>\n<td></td>\n</tr>\n<tr>\n<td>git merge master</td>\n<td>从master合并过来</td>\n<td></td>\n</tr>\n<tr>\n<td>git push origin develop</td>\n<td>提交</td>\n<td></td>\n</tr>\n<tr>\n<td>git clone <a href=\"mailto:git@192.168.2.10\">git@192.168.2.10</a>:bat-web.git</td>\n<td>从服务器克隆</td>\n<td></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h2 id=\"指令表\"><a href=\"#指令表\" class=\"headerlink\" title=\"指令表\"></a>指令表</h2><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>含义</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git add .</td>\n<td>提示增加文件</td>\n<td>.代表所有</td>\n</tr>\n<tr>\n<td>git commit -m</td>\n<td>“说明内容” 提交到本地服务器</td>\n<td></td>\n</tr>\n<tr>\n<td>git status</td>\n<td>显示修改信息</td>\n<td></td>\n</tr>\n<tr>\n<td>git pull</td>\n<td>从网络服务器拉 更新最新版本</td>\n<td></td>\n</tr>\n<tr>\n<td>git push</td>\n<td>上传最新版本</td>\n<td></td>\n</tr>\n<tr>\n<td>git branch</td>\n<td>查看当前分支</td>\n<td></td>\n</tr>\n<tr>\n<td>git checkout develop</td>\n<td>切换到develop模式</td>\n<td></td>\n</tr>\n<tr>\n<td>git merge master</td>\n<td>从master合并过来</td>\n<td></td>\n</tr>\n<tr>\n<td>git push origin develop</td>\n<td>提交</td>\n<td></td>\n</tr>\n<tr>\n<td>git clone <a href=\"mailto:git@192.168.2.10\">git@192.168.2.10</a>:bat-web.git</td>\n<td>从服务器克隆</td>\n<td></td>\n</tr>\n</tbody></table>\n"},{"title":"《高性能JAVASCRIPT》读书笔记","date":"2013-06-17T14:22:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n最近读了《高性能JAVASCRIPT》，下面将书中觉得有用的内容进行摘抄，放在下方。\n# 如何从小事提升JAVASCRIPT性能。\n1. 将`<script>`标签写在`</body>`之前——将脚本放在底部。\n2. 尽量少的`<script>`标签，减少页面中的外链数量，减少请求次数。\n3. 使用打包工具如：Yahoo！combo handler\n4. 使用动态延迟加载技术如：LazyLoad类库,LABjs\n```\n// js代码\n<script type=\"text/javascript\" src=\"lazyload-min.js\"></script>\n<script type=\"text/javascript\">\n  LazyLoad.js([],function(){\n    Application.init();\n  })\n</script>\n```\n5. 在javascript中存储位置十分重要，尽量用局部变量代替对象成员的访问。\n6. 集合变数组提高查询效率\n```\n// js代码\nfunction toArray(coll){\n  for(var i = 0, a=[], len=coll.length; i<len; i++){\n    a[i]=col[i];\n  }\n  return a;\n}\n```\n7. 使用局部变量缓存访问多次的成员\n当便利一个集合时，首要优化原则是把集合存储在局部变量中，并把length缓存在循环外部，然后使用局部变量访问这些需要多次访问的元素。\n8. 使用原生DOM方法querySelectorAll（）遍历查找元素。\n\n9. 让元素脱离动画流，页面重排次数越多，程序响应越慢，要尽量减少重拍\n方法：\n  9.1. 使用绝对定位使元素脱离文档流\n\n10. IE：hover\n在大量元素使用：hover这个伪css选择器时，程序会降低响应速率，在大表格或列表的情况下","source":"_posts/Read-High-Performance-JavaScript.md","raw":"---\ntitle: 《高性能JAVASCRIPT》读书笔记\ndate: 2013-06-17 22:22:22\ncategories: \n\t- 读书笔记\ntags: \n\t- JavaScript\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n最近读了《高性能JAVASCRIPT》，下面将书中觉得有用的内容进行摘抄，放在下方。\n# 如何从小事提升JAVASCRIPT性能。\n1. 将`<script>`标签写在`</body>`之前——将脚本放在底部。\n2. 尽量少的`<script>`标签，减少页面中的外链数量，减少请求次数。\n3. 使用打包工具如：Yahoo！combo handler\n4. 使用动态延迟加载技术如：LazyLoad类库,LABjs\n```\n// js代码\n<script type=\"text/javascript\" src=\"lazyload-min.js\"></script>\n<script type=\"text/javascript\">\n  LazyLoad.js([],function(){\n    Application.init();\n  })\n</script>\n```\n5. 在javascript中存储位置十分重要，尽量用局部变量代替对象成员的访问。\n6. 集合变数组提高查询效率\n```\n// js代码\nfunction toArray(coll){\n  for(var i = 0, a=[], len=coll.length; i<len; i++){\n    a[i]=col[i];\n  }\n  return a;\n}\n```\n7. 使用局部变量缓存访问多次的成员\n当便利一个集合时，首要优化原则是把集合存储在局部变量中，并把length缓存在循环外部，然后使用局部变量访问这些需要多次访问的元素。\n8. 使用原生DOM方法querySelectorAll（）遍历查找元素。\n\n9. 让元素脱离动画流，页面重排次数越多，程序响应越慢，要尽量减少重拍\n方法：\n  9.1. 使用绝对定位使元素脱离文档流\n\n10. IE：hover\n在大量元素使用：hover这个伪css选择器时，程序会降低响应速率，在大表格或列表的情况下","slug":"Read-High-Performance-JavaScript","published":1,"updated":"2019-12-31T09:41:48.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4tzdevf0004v0a693f4a7tn","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近读了《高性能JAVASCRIPT》，下面将书中觉得有用的内容进行摘抄，放在下方。</p>\n<h1 id=\"如何从小事提升JAVASCRIPT性能。\"><a href=\"#如何从小事提升JAVASCRIPT性能。\" class=\"headerlink\" title=\"如何从小事提升JAVASCRIPT性能。\"></a>如何从小事提升JAVASCRIPT性能。</h1><ol>\n<li><p>将<code>&lt;script&gt;</code>标签写在<code>&lt;/body&gt;</code>之前——将脚本放在底部。</p>\n</li>\n<li><p>尽量少的<code>&lt;script&gt;</code>标签，减少页面中的外链数量，减少请求次数。</p>\n</li>\n<li><p>使用打包工具如：Yahoo！combo handler</p>\n</li>\n<li><p>使用动态延迟加载技术如：LazyLoad类库,LABjs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;lazyload-min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">  LazyLoad.js([],function()&#123;</span><br><span class=\"line\">    Application.init();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>在javascript中存储位置十分重要，尽量用局部变量代替对象成员的访问。</p>\n</li>\n<li><p>集合变数组提高查询效率</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">function toArray(coll)&#123;</span><br><span class=\"line\">  for(var i &#x3D; 0, a&#x3D;[], len&#x3D;coll.length; i&lt;len; i++)&#123;</span><br><span class=\"line\">    a[i]&#x3D;col[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用局部变量缓存访问多次的成员<br>当便利一个集合时，首要优化原则是把集合存储在局部变量中，并把length缓存在循环外部，然后使用局部变量访问这些需要多次访问的元素。</p>\n</li>\n<li><p>使用原生DOM方法querySelectorAll（）遍历查找元素。</p>\n</li>\n<li><p>让元素脱离动画流，页面重排次数越多，程序响应越慢，要尽量减少重拍<br>方法：<br>9.1. 使用绝对定位使元素脱离文档流</p>\n</li>\n<li><p>IE：hover<br>在大量元素使用：hover这个伪css选择器时，程序会降低响应速率，在大表格或列表的情况下</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近读了《高性能JAVASCRIPT》，下面将书中觉得有用的内容进行摘抄，放在下方。</p>\n<h1 id=\"如何从小事提升JAVASCRIPT性能。\"><a href=\"#如何从小事提升JAVASCRIPT性能。\" class=\"headerlink\" title=\"如何从小事提升JAVASCRIPT性能。\"></a>如何从小事提升JAVASCRIPT性能。</h1><ol>\n<li><p>将<code>&lt;script&gt;</code>标签写在<code>&lt;/body&gt;</code>之前——将脚本放在底部。</p>\n</li>\n<li><p>尽量少的<code>&lt;script&gt;</code>标签，减少页面中的外链数量，减少请求次数。</p>\n</li>\n<li><p>使用打包工具如：Yahoo！combo handler</p>\n</li>\n<li><p>使用动态延迟加载技术如：LazyLoad类库,LABjs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;lazyload-min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">  LazyLoad.js([],function()&#123;</span><br><span class=\"line\">    Application.init();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>在javascript中存储位置十分重要，尽量用局部变量代替对象成员的访问。</p>\n</li>\n<li><p>集合变数组提高查询效率</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">function toArray(coll)&#123;</span><br><span class=\"line\">  for(var i &#x3D; 0, a&#x3D;[], len&#x3D;coll.length; i&lt;len; i++)&#123;</span><br><span class=\"line\">    a[i]&#x3D;col[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用局部变量缓存访问多次的成员<br>当便利一个集合时，首要优化原则是把集合存储在局部变量中，并把length缓存在循环外部，然后使用局部变量访问这些需要多次访问的元素。</p>\n</li>\n<li><p>使用原生DOM方法querySelectorAll（）遍历查找元素。</p>\n</li>\n<li><p>让元素脱离动画流，页面重排次数越多，程序响应越慢，要尽量减少重拍<br>方法：<br>9.1. 使用绝对定位使元素脱离文档流</p>\n</li>\n<li><p>IE：hover<br>在大量元素使用：hover这个伪css选择器时，程序会降低响应速率，在大表格或列表的情况下</p>\n</li>\n</ol>\n"},{"title":"《让老板提拔你》读书笔记","date":"2015-12-31T14:22:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n最近读了《让老板提拔你》，下面将书中觉得有用的内容进行摘抄，放在下方。\n# 定位自己\n正确认识自己，确定社会定位、职业定位。 定位-决定-定价\n## 要素\n***核心竞争力*** 与 ***职位*** ***契合度*** 是高薪关键所在\n### 契合度\n- 技能、专长、经历与职位要求的契合度\n- 专业资质和等级与职位要求的契合度\n- 综合素质与职位要求的契合度\n### 七大秘诀\n- 了解同行业薪酬的平均水平\n- 赢得未来单位的心\n- 先让对方开口\n- 勇敢地开口要求\n- 不要轻言放弃\n- 把握时机很重要\n- 说实话，别撒谎\n### 如何谈薪资\n- 商洽薪酬的关键在于把握好谈话时机，切勿开门见山。\n> 只要有发展机会，我愿意接受贵单位的薪酬标准，不知道按规定这个工作岗位的薪酬标准是多少。\n\n### 将知识卖个好价钱\n推销自己既推销自己所掌握的知识即智慧，正确认识自己的价值是关键。\n\n### 高薪是因为“物有所值”\n- 用业绩、用能力说话，是人才坦然面对高薪的心态。\n- 高薪人才的求职方式 ---- 圈内朋友引见、定向投简历、行业论坛、交流活动等。\n- 高级人才不能经常跳槽要保持相对的职业稳定。---- 在一家公司少则3年多则6年 ---- 接受挑战，把握机会。\n\n### 失败丰富走向成功经验\n强调在失败中吸取的经验，在未来中可以避免的损失。\n\n### 能为企业带来丰厚的利润才是人才\n企业招聘员工的唯一目的：追求公司业绩最大化、利润最大化。\n\n# 高质高效工作全攻略\n- 进行正确的自我评价\n- 做最擅长做的事\n  - 三个经济原则 ---- 发挥人才优势。\n    1. 比较利益原则-----自己的专长对自己才是最有利的，勿与他人作比较。\n    2. 机会成本原则-----选择一份工作放弃其他工作就是机会成本。\n    3. 效率原则--------工作的成功不在于时间有多长，而在于成效有多少，附加值有多少。\n- 马上行动\n- 做事情要雷厉风行 --------- 成功属于踏实肯干的人\n- 有条不紊地开展工作 ------- 制定时间计划\n- 善于利用现代办公工具\n- 给自己最大的工作空间\n- 建立高效有序的办公环境\n- 不要忘记最初想去的方向\n- “聪明”的向上级提出建议\n- 专心做事，避免浮躁\n- 多而不专，一事难成\n- “专”才有高质工作--------人才主要指专才--某个领域的高精尖人才--勿做全才，一专多能\n- 做事要有条理\n\n# 不要只把自己当成一个打工仔\n> 要把工作当成事业\n- 工作不仅仅是为了钱\n- 对工作要有明确的价值取向\n  1. 认清人生的方向\n  2. 开始学会醉卧探索和认知\n  3. 认清工作价值与成就的关系\n  4. 长期的工作规划\n  5. 在生命的天平上衡量自身的价值\n- 巧妙应对与上司看法向左时的三条准则\n  1. 遇事考虑全局\n  2. 辩证地看待问题\n  3. 切记感情用事\n- 把单位的事当成自家的事\n- 认真负责地用心工作\n- 珍惜岗位，热爱自己的职业\n- 永远是在为自己工作\n- 敬重自己的工作\n- 不要轻视薪水微薄的工作\n- 永远对工作充满激情\n- 以自己的工作为荣\n- 不要被他人的观点所束缚\n- 暂时的胜负并不会决定人生的最后走向\n- 将弱势转化为优势\n- 全力以赴做好每一天的工作\n- 和优秀的人士在一起---见贤思齐、借梯爬楼\n  - 如何争取跟优秀的人在一起\n    1. 不断的抛头露面\n    2. 帮助可以帮助自己成就事业的人做事\n    3. 与上司和比自己优秀的人士一起合作\n 1. 尊重对方，严谨有致\n 2. 切记奉承，要不卑不亢\n 3. 态度自然，不必拘谨\n 4. 陪衬得当，不可狂妄\n 5. 主动真诚，做出姿态\n 6. 求助求教，接受呵护\n- 挑战自我，承担责任\n  - 三条忠告\n    1. 全心全意工作\n    2. 把自己视为合伙人\n    3. 迎接变革的需求\n- 自信独立，不随波逐流\n- 敢于显示自己很重要\n- 千万不能只知道抱怨上司\n- 保持严谨认真的做事习惯\n- 自主地做好手中的工作\n- 踏踏实实地做好本职工作\n- 丢掉工作散漫的坏习惯\n- 不要让浮躁的性格困扰自己\n- 不推诿，勇于承担责任\n- 无论如何都不要拖延工作\n- 糊弄工作只能是在糊弄自己\n- 逊色的工作只会淘汰自己\n- 千万别丢掉“得宠”之资\n- “一步登天”只会摔疼自己\n- 别让“差不多”贻误了自己\n- 能完成100%，就决不做99%\n\n# 与上司相处\n- 不要做上司的“心腹”\n- 适时恰当的赞美上司\n  - 赞美上司，还要善于选择适当的场合\n  - 赞美上司，要学会巧借公众语言称赞\n  - 赞美上司，还要善于赞美不得志的上司\n- 主动与领导沟通\n- 主动和上司保持联系 \n- 用“心机”主动接近上司\n  - 尽可能详细的了解上司\n  - 选择一个与领导尽可能近的位置\n  - 赢得上司青睐的方法 \n- 更有效的和上司沟通\n  - 与上司沟通要简洁\n  - 与上司沟通要大度大气大方\n  - 与上司沟通，就要把自己先放一边 -------- 说话对事不对人\n- 四种和上司进行沟通的方法\n  1. 开诚布公式---------提出问题，说出自己的理解认识，给出解决方案，寻求领导意思，执行领导的命令\n  2. 先斩后奏式---------因主客观原因导致的没有先汇报而是先解决的事，事后要将问题的分析方法，解决方法，实施方案以及结果做一份详尽的总结报告上交给领导\n  3. “含情脉脉”式-------通过交流一些工作上的问题来含蓄表达出个人的建议、需要\n  4. 巧设比喻式---------通过典型案例来暗示自己的意见和要求\n- 把话说到上司的心坎上\n- 巧妙地为领导拾遗补缺\n  1. 诠释领导讲话的难点\n  2. 强调领导的才干\n  3. 化严肃为幽默\n  4. 稳定情绪，委婉暗示\n- 工作中勤于请示汇报\n  1. 听懂上司的意图\n  2. 探讨、磨合，达成共识\n  3. 制定尽可能详尽的工作计划\n  4. 随时向上司汇报任务的关键点\n  5. 总结汇报\n- 用成功赢得上司的信任\n- 工作中不要冲撞上司\n- 处理好同上司之间的分歧\n  1. 圆融协调------领导不懂，下达了错误的指令\n     1. 私下向上司陈述意见，帮助上司做出正确的决策\n     2. 如果上司采纳了下属的建议或意见，该下属有责任长期保守秘密\n     3. 如果上司固执己见，那么无条件服从\n  2. 装聋作哑------不涉及到原则问题\n  3. 棘手难题多权衡\n     1. 立刻插话纠正\n     2. 提醒上司\n     3. 暗示\n     4. 事后补救\n     5. 事后提醒\n- 正确对待上司的批评\n- 要善于服从自己的上司\n- 正确化解来自上司的压力\n\n# 写在最后\n博观约取，多读书读好书，丰富自己，变得睿智。","source":"_posts/Read-Let-your-boss-promote-you.md","raw":"---\ntitle: 《让老板提拔你》读书笔记\ndate: 2015-12-31 22:22:22\ncategories: \n\t- 读书笔记\ntags: \n\t- 职场\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n最近读了《让老板提拔你》，下面将书中觉得有用的内容进行摘抄，放在下方。\n# 定位自己\n正确认识自己，确定社会定位、职业定位。 定位-决定-定价\n## 要素\n***核心竞争力*** 与 ***职位*** ***契合度*** 是高薪关键所在\n### 契合度\n- 技能、专长、经历与职位要求的契合度\n- 专业资质和等级与职位要求的契合度\n- 综合素质与职位要求的契合度\n### 七大秘诀\n- 了解同行业薪酬的平均水平\n- 赢得未来单位的心\n- 先让对方开口\n- 勇敢地开口要求\n- 不要轻言放弃\n- 把握时机很重要\n- 说实话，别撒谎\n### 如何谈薪资\n- 商洽薪酬的关键在于把握好谈话时机，切勿开门见山。\n> 只要有发展机会，我愿意接受贵单位的薪酬标准，不知道按规定这个工作岗位的薪酬标准是多少。\n\n### 将知识卖个好价钱\n推销自己既推销自己所掌握的知识即智慧，正确认识自己的价值是关键。\n\n### 高薪是因为“物有所值”\n- 用业绩、用能力说话，是人才坦然面对高薪的心态。\n- 高薪人才的求职方式 ---- 圈内朋友引见、定向投简历、行业论坛、交流活动等。\n- 高级人才不能经常跳槽要保持相对的职业稳定。---- 在一家公司少则3年多则6年 ---- 接受挑战，把握机会。\n\n### 失败丰富走向成功经验\n强调在失败中吸取的经验，在未来中可以避免的损失。\n\n### 能为企业带来丰厚的利润才是人才\n企业招聘员工的唯一目的：追求公司业绩最大化、利润最大化。\n\n# 高质高效工作全攻略\n- 进行正确的自我评价\n- 做最擅长做的事\n  - 三个经济原则 ---- 发挥人才优势。\n    1. 比较利益原则-----自己的专长对自己才是最有利的，勿与他人作比较。\n    2. 机会成本原则-----选择一份工作放弃其他工作就是机会成本。\n    3. 效率原则--------工作的成功不在于时间有多长，而在于成效有多少，附加值有多少。\n- 马上行动\n- 做事情要雷厉风行 --------- 成功属于踏实肯干的人\n- 有条不紊地开展工作 ------- 制定时间计划\n- 善于利用现代办公工具\n- 给自己最大的工作空间\n- 建立高效有序的办公环境\n- 不要忘记最初想去的方向\n- “聪明”的向上级提出建议\n- 专心做事，避免浮躁\n- 多而不专，一事难成\n- “专”才有高质工作--------人才主要指专才--某个领域的高精尖人才--勿做全才，一专多能\n- 做事要有条理\n\n# 不要只把自己当成一个打工仔\n> 要把工作当成事业\n- 工作不仅仅是为了钱\n- 对工作要有明确的价值取向\n  1. 认清人生的方向\n  2. 开始学会醉卧探索和认知\n  3. 认清工作价值与成就的关系\n  4. 长期的工作规划\n  5. 在生命的天平上衡量自身的价值\n- 巧妙应对与上司看法向左时的三条准则\n  1. 遇事考虑全局\n  2. 辩证地看待问题\n  3. 切记感情用事\n- 把单位的事当成自家的事\n- 认真负责地用心工作\n- 珍惜岗位，热爱自己的职业\n- 永远是在为自己工作\n- 敬重自己的工作\n- 不要轻视薪水微薄的工作\n- 永远对工作充满激情\n- 以自己的工作为荣\n- 不要被他人的观点所束缚\n- 暂时的胜负并不会决定人生的最后走向\n- 将弱势转化为优势\n- 全力以赴做好每一天的工作\n- 和优秀的人士在一起---见贤思齐、借梯爬楼\n  - 如何争取跟优秀的人在一起\n    1. 不断的抛头露面\n    2. 帮助可以帮助自己成就事业的人做事\n    3. 与上司和比自己优秀的人士一起合作\n 1. 尊重对方，严谨有致\n 2. 切记奉承，要不卑不亢\n 3. 态度自然，不必拘谨\n 4. 陪衬得当，不可狂妄\n 5. 主动真诚，做出姿态\n 6. 求助求教，接受呵护\n- 挑战自我，承担责任\n  - 三条忠告\n    1. 全心全意工作\n    2. 把自己视为合伙人\n    3. 迎接变革的需求\n- 自信独立，不随波逐流\n- 敢于显示自己很重要\n- 千万不能只知道抱怨上司\n- 保持严谨认真的做事习惯\n- 自主地做好手中的工作\n- 踏踏实实地做好本职工作\n- 丢掉工作散漫的坏习惯\n- 不要让浮躁的性格困扰自己\n- 不推诿，勇于承担责任\n- 无论如何都不要拖延工作\n- 糊弄工作只能是在糊弄自己\n- 逊色的工作只会淘汰自己\n- 千万别丢掉“得宠”之资\n- “一步登天”只会摔疼自己\n- 别让“差不多”贻误了自己\n- 能完成100%，就决不做99%\n\n# 与上司相处\n- 不要做上司的“心腹”\n- 适时恰当的赞美上司\n  - 赞美上司，还要善于选择适当的场合\n  - 赞美上司，要学会巧借公众语言称赞\n  - 赞美上司，还要善于赞美不得志的上司\n- 主动与领导沟通\n- 主动和上司保持联系 \n- 用“心机”主动接近上司\n  - 尽可能详细的了解上司\n  - 选择一个与领导尽可能近的位置\n  - 赢得上司青睐的方法 \n- 更有效的和上司沟通\n  - 与上司沟通要简洁\n  - 与上司沟通要大度大气大方\n  - 与上司沟通，就要把自己先放一边 -------- 说话对事不对人\n- 四种和上司进行沟通的方法\n  1. 开诚布公式---------提出问题，说出自己的理解认识，给出解决方案，寻求领导意思，执行领导的命令\n  2. 先斩后奏式---------因主客观原因导致的没有先汇报而是先解决的事，事后要将问题的分析方法，解决方法，实施方案以及结果做一份详尽的总结报告上交给领导\n  3. “含情脉脉”式-------通过交流一些工作上的问题来含蓄表达出个人的建议、需要\n  4. 巧设比喻式---------通过典型案例来暗示自己的意见和要求\n- 把话说到上司的心坎上\n- 巧妙地为领导拾遗补缺\n  1. 诠释领导讲话的难点\n  2. 强调领导的才干\n  3. 化严肃为幽默\n  4. 稳定情绪，委婉暗示\n- 工作中勤于请示汇报\n  1. 听懂上司的意图\n  2. 探讨、磨合，达成共识\n  3. 制定尽可能详尽的工作计划\n  4. 随时向上司汇报任务的关键点\n  5. 总结汇报\n- 用成功赢得上司的信任\n- 工作中不要冲撞上司\n- 处理好同上司之间的分歧\n  1. 圆融协调------领导不懂，下达了错误的指令\n     1. 私下向上司陈述意见，帮助上司做出正确的决策\n     2. 如果上司采纳了下属的建议或意见，该下属有责任长期保守秘密\n     3. 如果上司固执己见，那么无条件服从\n  2. 装聋作哑------不涉及到原则问题\n  3. 棘手难题多权衡\n     1. 立刻插话纠正\n     2. 提醒上司\n     3. 暗示\n     4. 事后补救\n     5. 事后提醒\n- 正确对待上司的批评\n- 要善于服从自己的上司\n- 正确化解来自上司的压力\n\n# 写在最后\n博观约取，多读书读好书，丰富自己，变得睿智。","slug":"Read-Let-your-boss-promote-you","published":1,"updated":"2019-12-31T11:11:40.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4tzdevg0005v0a6h87k5gp2","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近读了《让老板提拔你》，下面将书中觉得有用的内容进行摘抄，放在下方。</p>\n<h1 id=\"定位自己\"><a href=\"#定位自己\" class=\"headerlink\" title=\"定位自己\"></a>定位自己</h1><p>正确认识自己，确定社会定位、职业定位。 定位-决定-定价</p>\n<h2 id=\"要素\"><a href=\"#要素\" class=\"headerlink\" title=\"要素\"></a>要素</h2><p><strong><em>核心竞争力</em></strong> 与 <strong><em>职位</em></strong> <strong><em>契合度</em></strong> 是高薪关键所在</p>\n<h3 id=\"契合度\"><a href=\"#契合度\" class=\"headerlink\" title=\"契合度\"></a>契合度</h3><ul>\n<li>技能、专长、经历与职位要求的契合度</li>\n<li>专业资质和等级与职位要求的契合度</li>\n<li>综合素质与职位要求的契合度<h3 id=\"七大秘诀\"><a href=\"#七大秘诀\" class=\"headerlink\" title=\"七大秘诀\"></a>七大秘诀</h3></li>\n<li>了解同行业薪酬的平均水平</li>\n<li>赢得未来单位的心</li>\n<li>先让对方开口</li>\n<li>勇敢地开口要求</li>\n<li>不要轻言放弃</li>\n<li>把握时机很重要</li>\n<li>说实话，别撒谎<h3 id=\"如何谈薪资\"><a href=\"#如何谈薪资\" class=\"headerlink\" title=\"如何谈薪资\"></a>如何谈薪资</h3></li>\n<li>商洽薪酬的关键在于把握好谈话时机，切勿开门见山。<blockquote>\n<p>只要有发展机会，我愿意接受贵单位的薪酬标准，不知道按规定这个工作岗位的薪酬标准是多少。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"将知识卖个好价钱\"><a href=\"#将知识卖个好价钱\" class=\"headerlink\" title=\"将知识卖个好价钱\"></a>将知识卖个好价钱</h3><p>推销自己既推销自己所掌握的知识即智慧，正确认识自己的价值是关键。</p>\n<h3 id=\"高薪是因为“物有所值”\"><a href=\"#高薪是因为“物有所值”\" class=\"headerlink\" title=\"高薪是因为“物有所值”\"></a>高薪是因为“物有所值”</h3><ul>\n<li>用业绩、用能力说话，是人才坦然面对高薪的心态。</li>\n<li>高薪人才的求职方式 —- 圈内朋友引见、定向投简历、行业论坛、交流活动等。</li>\n<li>高级人才不能经常跳槽要保持相对的职业稳定。—- 在一家公司少则3年多则6年 —- 接受挑战，把握机会。</li>\n</ul>\n<h3 id=\"失败丰富走向成功经验\"><a href=\"#失败丰富走向成功经验\" class=\"headerlink\" title=\"失败丰富走向成功经验\"></a>失败丰富走向成功经验</h3><p>强调在失败中吸取的经验，在未来中可以避免的损失。</p>\n<h3 id=\"能为企业带来丰厚的利润才是人才\"><a href=\"#能为企业带来丰厚的利润才是人才\" class=\"headerlink\" title=\"能为企业带来丰厚的利润才是人才\"></a>能为企业带来丰厚的利润才是人才</h3><p>企业招聘员工的唯一目的：追求公司业绩最大化、利润最大化。</p>\n<h1 id=\"高质高效工作全攻略\"><a href=\"#高质高效工作全攻略\" class=\"headerlink\" title=\"高质高效工作全攻略\"></a>高质高效工作全攻略</h1><ul>\n<li>进行正确的自我评价</li>\n<li>做最擅长做的事<ul>\n<li>三个经济原则 —- 发挥人才优势。<ol>\n<li>比较利益原则—–自己的专长对自己才是最有利的，勿与他人作比较。</li>\n<li>机会成本原则—–选择一份工作放弃其他工作就是机会成本。</li>\n<li>效率原则——–工作的成功不在于时间有多长，而在于成效有多少，附加值有多少。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>马上行动</li>\n<li>做事情要雷厉风行 ——— 成功属于踏实肯干的人</li>\n<li>有条不紊地开展工作 ——- 制定时间计划</li>\n<li>善于利用现代办公工具</li>\n<li>给自己最大的工作空间</li>\n<li>建立高效有序的办公环境</li>\n<li>不要忘记最初想去的方向</li>\n<li>“聪明”的向上级提出建议</li>\n<li>专心做事，避免浮躁</li>\n<li>多而不专，一事难成</li>\n<li>“专”才有高质工作——–人才主要指专才–某个领域的高精尖人才–勿做全才，一专多能</li>\n<li>做事要有条理</li>\n</ul>\n<h1 id=\"不要只把自己当成一个打工仔\"><a href=\"#不要只把自己当成一个打工仔\" class=\"headerlink\" title=\"不要只把自己当成一个打工仔\"></a>不要只把自己当成一个打工仔</h1><blockquote>\n<p>要把工作当成事业</p>\n</blockquote>\n<ul>\n<li>工作不仅仅是为了钱</li>\n<li>对工作要有明确的价值取向<ol>\n<li>认清人生的方向</li>\n<li>开始学会醉卧探索和认知</li>\n<li>认清工作价值与成就的关系</li>\n<li>长期的工作规划</li>\n<li>在生命的天平上衡量自身的价值</li>\n</ol>\n</li>\n<li>巧妙应对与上司看法向左时的三条准则<ol>\n<li>遇事考虑全局</li>\n<li>辩证地看待问题</li>\n<li>切记感情用事</li>\n</ol>\n</li>\n<li>把单位的事当成自家的事</li>\n<li>认真负责地用心工作</li>\n<li>珍惜岗位，热爱自己的职业</li>\n<li>永远是在为自己工作</li>\n<li>敬重自己的工作</li>\n<li>不要轻视薪水微薄的工作</li>\n<li>永远对工作充满激情</li>\n<li>以自己的工作为荣</li>\n<li>不要被他人的观点所束缚</li>\n<li>暂时的胜负并不会决定人生的最后走向</li>\n<li>将弱势转化为优势</li>\n<li>全力以赴做好每一天的工作</li>\n<li>和优秀的人士在一起—见贤思齐、借梯爬楼<ul>\n<li>如何争取跟优秀的人在一起<ol>\n<li>不断的抛头露面</li>\n<li>帮助可以帮助自己成就事业的人做事</li>\n<li>与上司和比自己优秀的人士一起合作</li>\n</ol>\n</li>\n</ul>\n<ol>\n<li>尊重对方，严谨有致</li>\n<li>切记奉承，要不卑不亢</li>\n<li>态度自然，不必拘谨</li>\n<li>陪衬得当，不可狂妄</li>\n<li>主动真诚，做出姿态</li>\n<li>求助求教，接受呵护</li>\n</ol>\n</li>\n<li>挑战自我，承担责任<ul>\n<li>三条忠告<ol>\n<li>全心全意工作</li>\n<li>把自己视为合伙人</li>\n<li>迎接变革的需求</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>自信独立，不随波逐流</li>\n<li>敢于显示自己很重要</li>\n<li>千万不能只知道抱怨上司</li>\n<li>保持严谨认真的做事习惯</li>\n<li>自主地做好手中的工作</li>\n<li>踏踏实实地做好本职工作</li>\n<li>丢掉工作散漫的坏习惯</li>\n<li>不要让浮躁的性格困扰自己</li>\n<li>不推诿，勇于承担责任</li>\n<li>无论如何都不要拖延工作</li>\n<li>糊弄工作只能是在糊弄自己</li>\n<li>逊色的工作只会淘汰自己</li>\n<li>千万别丢掉“得宠”之资</li>\n<li>“一步登天”只会摔疼自己</li>\n<li>别让“差不多”贻误了自己</li>\n<li>能完成100%，就决不做99%</li>\n</ul>\n<h1 id=\"与上司相处\"><a href=\"#与上司相处\" class=\"headerlink\" title=\"与上司相处\"></a>与上司相处</h1><ul>\n<li>不要做上司的“心腹”</li>\n<li>适时恰当的赞美上司<ul>\n<li>赞美上司，还要善于选择适当的场合</li>\n<li>赞美上司，要学会巧借公众语言称赞</li>\n<li>赞美上司，还要善于赞美不得志的上司</li>\n</ul>\n</li>\n<li>主动与领导沟通</li>\n<li>主动和上司保持联系 </li>\n<li>用“心机”主动接近上司<ul>\n<li>尽可能详细的了解上司</li>\n<li>选择一个与领导尽可能近的位置</li>\n<li>赢得上司青睐的方法 </li>\n</ul>\n</li>\n<li>更有效的和上司沟通<ul>\n<li>与上司沟通要简洁</li>\n<li>与上司沟通要大度大气大方</li>\n<li>与上司沟通，就要把自己先放一边 ——– 说话对事不对人</li>\n</ul>\n</li>\n<li>四种和上司进行沟通的方法<ol>\n<li>开诚布公式———提出问题，说出自己的理解认识，给出解决方案，寻求领导意思，执行领导的命令</li>\n<li>先斩后奏式———因主客观原因导致的没有先汇报而是先解决的事，事后要将问题的分析方法，解决方法，实施方案以及结果做一份详尽的总结报告上交给领导</li>\n<li>“含情脉脉”式——-通过交流一些工作上的问题来含蓄表达出个人的建议、需要</li>\n<li>巧设比喻式———通过典型案例来暗示自己的意见和要求</li>\n</ol>\n</li>\n<li>把话说到上司的心坎上</li>\n<li>巧妙地为领导拾遗补缺<ol>\n<li>诠释领导讲话的难点</li>\n<li>强调领导的才干</li>\n<li>化严肃为幽默</li>\n<li>稳定情绪，委婉暗示</li>\n</ol>\n</li>\n<li>工作中勤于请示汇报<ol>\n<li>听懂上司的意图</li>\n<li>探讨、磨合，达成共识</li>\n<li>制定尽可能详尽的工作计划</li>\n<li>随时向上司汇报任务的关键点</li>\n<li>总结汇报</li>\n</ol>\n</li>\n<li>用成功赢得上司的信任</li>\n<li>工作中不要冲撞上司</li>\n<li>处理好同上司之间的分歧<ol>\n<li>圆融协调——领导不懂，下达了错误的指令<ol>\n<li>私下向上司陈述意见，帮助上司做出正确的决策</li>\n<li>如果上司采纳了下属的建议或意见，该下属有责任长期保守秘密</li>\n<li>如果上司固执己见，那么无条件服从</li>\n</ol>\n</li>\n<li>装聋作哑——不涉及到原则问题</li>\n<li>棘手难题多权衡<ol>\n<li>立刻插话纠正</li>\n<li>提醒上司</li>\n<li>暗示</li>\n<li>事后补救</li>\n<li>事后提醒</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>正确对待上司的批评</li>\n<li>要善于服从自己的上司</li>\n<li>正确化解来自上司的压力</li>\n</ul>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>博观约取，多读书读好书，丰富自己，变得睿智。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近读了《让老板提拔你》，下面将书中觉得有用的内容进行摘抄，放在下方。</p>\n<h1 id=\"定位自己\"><a href=\"#定位自己\" class=\"headerlink\" title=\"定位自己\"></a>定位自己</h1><p>正确认识自己，确定社会定位、职业定位。 定位-决定-定价</p>\n<h2 id=\"要素\"><a href=\"#要素\" class=\"headerlink\" title=\"要素\"></a>要素</h2><p><strong><em>核心竞争力</em></strong> 与 <strong><em>职位</em></strong> <strong><em>契合度</em></strong> 是高薪关键所在</p>\n<h3 id=\"契合度\"><a href=\"#契合度\" class=\"headerlink\" title=\"契合度\"></a>契合度</h3><ul>\n<li>技能、专长、经历与职位要求的契合度</li>\n<li>专业资质和等级与职位要求的契合度</li>\n<li>综合素质与职位要求的契合度<h3 id=\"七大秘诀\"><a href=\"#七大秘诀\" class=\"headerlink\" title=\"七大秘诀\"></a>七大秘诀</h3></li>\n<li>了解同行业薪酬的平均水平</li>\n<li>赢得未来单位的心</li>\n<li>先让对方开口</li>\n<li>勇敢地开口要求</li>\n<li>不要轻言放弃</li>\n<li>把握时机很重要</li>\n<li>说实话，别撒谎<h3 id=\"如何谈薪资\"><a href=\"#如何谈薪资\" class=\"headerlink\" title=\"如何谈薪资\"></a>如何谈薪资</h3></li>\n<li>商洽薪酬的关键在于把握好谈话时机，切勿开门见山。<blockquote>\n<p>只要有发展机会，我愿意接受贵单位的薪酬标准，不知道按规定这个工作岗位的薪酬标准是多少。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"将知识卖个好价钱\"><a href=\"#将知识卖个好价钱\" class=\"headerlink\" title=\"将知识卖个好价钱\"></a>将知识卖个好价钱</h3><p>推销自己既推销自己所掌握的知识即智慧，正确认识自己的价值是关键。</p>\n<h3 id=\"高薪是因为“物有所值”\"><a href=\"#高薪是因为“物有所值”\" class=\"headerlink\" title=\"高薪是因为“物有所值”\"></a>高薪是因为“物有所值”</h3><ul>\n<li>用业绩、用能力说话，是人才坦然面对高薪的心态。</li>\n<li>高薪人才的求职方式 —- 圈内朋友引见、定向投简历、行业论坛、交流活动等。</li>\n<li>高级人才不能经常跳槽要保持相对的职业稳定。—- 在一家公司少则3年多则6年 —- 接受挑战，把握机会。</li>\n</ul>\n<h3 id=\"失败丰富走向成功经验\"><a href=\"#失败丰富走向成功经验\" class=\"headerlink\" title=\"失败丰富走向成功经验\"></a>失败丰富走向成功经验</h3><p>强调在失败中吸取的经验，在未来中可以避免的损失。</p>\n<h3 id=\"能为企业带来丰厚的利润才是人才\"><a href=\"#能为企业带来丰厚的利润才是人才\" class=\"headerlink\" title=\"能为企业带来丰厚的利润才是人才\"></a>能为企业带来丰厚的利润才是人才</h3><p>企业招聘员工的唯一目的：追求公司业绩最大化、利润最大化。</p>\n<h1 id=\"高质高效工作全攻略\"><a href=\"#高质高效工作全攻略\" class=\"headerlink\" title=\"高质高效工作全攻略\"></a>高质高效工作全攻略</h1><ul>\n<li>进行正确的自我评价</li>\n<li>做最擅长做的事<ul>\n<li>三个经济原则 —- 发挥人才优势。<ol>\n<li>比较利益原则—–自己的专长对自己才是最有利的，勿与他人作比较。</li>\n<li>机会成本原则—–选择一份工作放弃其他工作就是机会成本。</li>\n<li>效率原则——–工作的成功不在于时间有多长，而在于成效有多少，附加值有多少。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>马上行动</li>\n<li>做事情要雷厉风行 ——— 成功属于踏实肯干的人</li>\n<li>有条不紊地开展工作 ——- 制定时间计划</li>\n<li>善于利用现代办公工具</li>\n<li>给自己最大的工作空间</li>\n<li>建立高效有序的办公环境</li>\n<li>不要忘记最初想去的方向</li>\n<li>“聪明”的向上级提出建议</li>\n<li>专心做事，避免浮躁</li>\n<li>多而不专，一事难成</li>\n<li>“专”才有高质工作——–人才主要指专才–某个领域的高精尖人才–勿做全才，一专多能</li>\n<li>做事要有条理</li>\n</ul>\n<h1 id=\"不要只把自己当成一个打工仔\"><a href=\"#不要只把自己当成一个打工仔\" class=\"headerlink\" title=\"不要只把自己当成一个打工仔\"></a>不要只把自己当成一个打工仔</h1><blockquote>\n<p>要把工作当成事业</p>\n</blockquote>\n<ul>\n<li>工作不仅仅是为了钱</li>\n<li>对工作要有明确的价值取向<ol>\n<li>认清人生的方向</li>\n<li>开始学会醉卧探索和认知</li>\n<li>认清工作价值与成就的关系</li>\n<li>长期的工作规划</li>\n<li>在生命的天平上衡量自身的价值</li>\n</ol>\n</li>\n<li>巧妙应对与上司看法向左时的三条准则<ol>\n<li>遇事考虑全局</li>\n<li>辩证地看待问题</li>\n<li>切记感情用事</li>\n</ol>\n</li>\n<li>把单位的事当成自家的事</li>\n<li>认真负责地用心工作</li>\n<li>珍惜岗位，热爱自己的职业</li>\n<li>永远是在为自己工作</li>\n<li>敬重自己的工作</li>\n<li>不要轻视薪水微薄的工作</li>\n<li>永远对工作充满激情</li>\n<li>以自己的工作为荣</li>\n<li>不要被他人的观点所束缚</li>\n<li>暂时的胜负并不会决定人生的最后走向</li>\n<li>将弱势转化为优势</li>\n<li>全力以赴做好每一天的工作</li>\n<li>和优秀的人士在一起—见贤思齐、借梯爬楼<ul>\n<li>如何争取跟优秀的人在一起<ol>\n<li>不断的抛头露面</li>\n<li>帮助可以帮助自己成就事业的人做事</li>\n<li>与上司和比自己优秀的人士一起合作</li>\n</ol>\n</li>\n</ul>\n<ol>\n<li>尊重对方，严谨有致</li>\n<li>切记奉承，要不卑不亢</li>\n<li>态度自然，不必拘谨</li>\n<li>陪衬得当，不可狂妄</li>\n<li>主动真诚，做出姿态</li>\n<li>求助求教，接受呵护</li>\n</ol>\n</li>\n<li>挑战自我，承担责任<ul>\n<li>三条忠告<ol>\n<li>全心全意工作</li>\n<li>把自己视为合伙人</li>\n<li>迎接变革的需求</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>自信独立，不随波逐流</li>\n<li>敢于显示自己很重要</li>\n<li>千万不能只知道抱怨上司</li>\n<li>保持严谨认真的做事习惯</li>\n<li>自主地做好手中的工作</li>\n<li>踏踏实实地做好本职工作</li>\n<li>丢掉工作散漫的坏习惯</li>\n<li>不要让浮躁的性格困扰自己</li>\n<li>不推诿，勇于承担责任</li>\n<li>无论如何都不要拖延工作</li>\n<li>糊弄工作只能是在糊弄自己</li>\n<li>逊色的工作只会淘汰自己</li>\n<li>千万别丢掉“得宠”之资</li>\n<li>“一步登天”只会摔疼自己</li>\n<li>别让“差不多”贻误了自己</li>\n<li>能完成100%，就决不做99%</li>\n</ul>\n<h1 id=\"与上司相处\"><a href=\"#与上司相处\" class=\"headerlink\" title=\"与上司相处\"></a>与上司相处</h1><ul>\n<li>不要做上司的“心腹”</li>\n<li>适时恰当的赞美上司<ul>\n<li>赞美上司，还要善于选择适当的场合</li>\n<li>赞美上司，要学会巧借公众语言称赞</li>\n<li>赞美上司，还要善于赞美不得志的上司</li>\n</ul>\n</li>\n<li>主动与领导沟通</li>\n<li>主动和上司保持联系 </li>\n<li>用“心机”主动接近上司<ul>\n<li>尽可能详细的了解上司</li>\n<li>选择一个与领导尽可能近的位置</li>\n<li>赢得上司青睐的方法 </li>\n</ul>\n</li>\n<li>更有效的和上司沟通<ul>\n<li>与上司沟通要简洁</li>\n<li>与上司沟通要大度大气大方</li>\n<li>与上司沟通，就要把自己先放一边 ——– 说话对事不对人</li>\n</ul>\n</li>\n<li>四种和上司进行沟通的方法<ol>\n<li>开诚布公式———提出问题，说出自己的理解认识，给出解决方案，寻求领导意思，执行领导的命令</li>\n<li>先斩后奏式———因主客观原因导致的没有先汇报而是先解决的事，事后要将问题的分析方法，解决方法，实施方案以及结果做一份详尽的总结报告上交给领导</li>\n<li>“含情脉脉”式——-通过交流一些工作上的问题来含蓄表达出个人的建议、需要</li>\n<li>巧设比喻式———通过典型案例来暗示自己的意见和要求</li>\n</ol>\n</li>\n<li>把话说到上司的心坎上</li>\n<li>巧妙地为领导拾遗补缺<ol>\n<li>诠释领导讲话的难点</li>\n<li>强调领导的才干</li>\n<li>化严肃为幽默</li>\n<li>稳定情绪，委婉暗示</li>\n</ol>\n</li>\n<li>工作中勤于请示汇报<ol>\n<li>听懂上司的意图</li>\n<li>探讨、磨合，达成共识</li>\n<li>制定尽可能详尽的工作计划</li>\n<li>随时向上司汇报任务的关键点</li>\n<li>总结汇报</li>\n</ol>\n</li>\n<li>用成功赢得上司的信任</li>\n<li>工作中不要冲撞上司</li>\n<li>处理好同上司之间的分歧<ol>\n<li>圆融协调——领导不懂，下达了错误的指令<ol>\n<li>私下向上司陈述意见，帮助上司做出正确的决策</li>\n<li>如果上司采纳了下属的建议或意见，该下属有责任长期保守秘密</li>\n<li>如果上司固执己见，那么无条件服从</li>\n</ol>\n</li>\n<li>装聋作哑——不涉及到原则问题</li>\n<li>棘手难题多权衡<ol>\n<li>立刻插话纠正</li>\n<li>提醒上司</li>\n<li>暗示</li>\n<li>事后补救</li>\n<li>事后提醒</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>正确对待上司的批评</li>\n<li>要善于服从自己的上司</li>\n<li>正确化解来自上司的压力</li>\n</ul>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>博观约取，多读书读好书，丰富自己，变得睿智。</p>\n"},{"title":"《晨间日记的奇迹》读书笔记","date":"2016-10-27T14:22:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n昨天花了1天的时间读了《晨间日记的奇迹》，感觉整个人的认识发生了一些变化，下面把重要内容做一下摘抄总结。\n# 早上写日记的好处 —— 提升效率\n- 可以做好一天的准备 — 计划性\n- 可以正确的写出昨天发生的事 — 效率性&忠诚性\n- 可以中立的看待昨天 — 中立性\n- 相对自由的时间 — 持续性\n- 总结经验 — 活用性\n\n# 注意事项\n日记 不等于 日志\n日记 要记录 时间 天气 心情 --- 因为这些有助于回忆和记录\n不要投入过长时间 — 3分钟 — 日记私密性\n晨间日记前7天只写好事 --- 反省固然重要，但是成长更重要，持续性很重要 --- 巴普洛夫的狗\n\n# 晨间日记2部分\n## Part1 \n客观记录已经发生的事（昨天）— 经验智慧\n## Part2 \n- 今天应做的事 — 具体行动（来自昨天的总结\n- 今天一定要做的事（紧急重要的事）— 变得更积极更主动\n- 未来要做的事 — 不紧急但重要的事\n- 连用日记 — 历史上的今天（过去一年同一天的事）\n\n# 夜晚日记 VS 晨间日记\n受当天情绪影响 — 更冷静\n\n# 梦想成真表\n|      | 过去        | 未来            |\n| ---- | ----------- | --------------- |\n| 事实 | IQ 智慧指数 | NQ 人际关系指数 |\n| 感情 | EQ 情感指数 | DQ 梦想指数     |\n\n- IQ — 晨间日记冷静回忆分析 — 提高决策正确性 IQ up\n- EQ — 冷静记录昨日的情绪／自省 — 变积极 EQ up\n- NQ — 总结昨天给今天设立“对／为XXX做某事” 很重要 NQ up\n- DQ — 不能只有眼前的事 每天都要确定一下自己的梦想 脸皮厚点没关系 重复或只有一句话也没关系 铭记于心最重要\n\n“忙碌”只是借口！“决心”才是问题！ 对未来充满期待的人才有行动力\n\n# 如何早起\n- 设定起床音乐／用气味（精油）刺激起床／光线-电动窗帘早起自动拉开\n- 早起后淋浴 — 配合音乐／冥想／呐喊 — 让自己充满动力保持清醒\n\n# 写日记的五大好处\n- 提升写作能力\n- 谈话题材源源不断\n- 提高贵人运\n- 返现自我肉体和精神的状态与模式\n- 在自己身上挖宝，彻底改变人生\n\n# 记录的日记要常拿出来看看\n记录日记时 — 问问自己的灵魂 然后写下真心话 — 灵魂日记\n`六度空间理论`\n\n# 七种成功者的习惯\n- 习惯之一：积极主动别指望谁能推你走 — 主动行动，迈出第一步\n- 习惯之二：以终为始忠于自己的人生计划。— 设立人生目标并坚持\n- 习惯之三：要事第一选择当前该做的事\n- 习惯之四：追求双赢远离角斗场\n- 习惯之五：善于沟通换位思考的原则\n- 习惯之六：统合综效 1+1可以大于2\n- 习惯之七：不断更新全方位平衡自我\n\n早睡是为了身体，早起是为了我们的内心。— sugiponn\n\n# 晨间日记的格式\n晨间日记必须要设立的栏目 — 工作／金钱／健康／人际关系\n要记下当日的日期／天气／温度／湿度\n\n纬度标签\n工作方面：\n* 能力开发／经营／管理／进货／工作人员／学习／资格／活动／企划案／想法／推广\n金钱方面：\n* 收入／指出／购入／股票／资产／储蓄／家用\n健康方面：\n* 饮食／运动／性／减肥／身体状况／锻炼身体／体重／脂肪\n人际关系方面：\n* 父母／家人／小孩／亲戚／情人／工作伙伴／朋友／熟人／联络事项／人脉网络\n兴趣方面以及其他：\n* 义工活动／阅读／运动／打扮／电影／音乐／游戏／喜欢的物品／今天必须要注意的事／美容／开心的事／购物\n\n劳动 — 职业 — 工作 — *乐趣*\n\n# 三大原则和七大作战守则\n* 原则1:时间不超过3分钟 — 减少养成习惯的成本\n* 原则2:决定好写晨间日记的地方 — 为了养成习惯\n* 原则3:只写一个字也没关系 — 不要有压力\n\n* 作战守则1:开心写日记 — 反省固然重要，鼓励更有作用 — 开始写晨间日记前七天只写好事\n* 作战守则2:ONE-TWO作战 — 把动作分布容易养成习惯 — 形成固定动作\n* 作战守则3:巴普洛夫的狗 — 开始写日记时候要有一个仪式 — 心理暗示\n* 作战守则4:奖励自己 — 当习惯养成并坚持到一定时间，给自己一个奖励\n* 作战守则5:宣告天下 — 借由他人的鼓励或压力形成动力／也可找到同志\n* 作战守则6:一千日作战法 — 不管什么样的习惯坚持1000日就会成为永远的习惯 — 具体做法为记录 第XXX篇 晨间日记\n* 作战守则7:为了别人 — 写晨间日记不只是为了自己，而且更是为了别人，身边人的幸福最终会影响到自己\n\n# 应该先肯定自己，给自己打100分\n* “总之，先… 病” 没有目标／没有梦想 — 回顾时一定会后悔！\n* “假如…，应该 病” 无法满足／没有动力 — 焦躁不安\n* 共同点：失落感／空虚／\n\n## 解决办法— 设立一个情境\n例：我要建立一个幸福的家庭 —> 因此我要创造很多快乐的回忆 —> 为了制造很多快乐的回忆 —> 我必须要到很多的地方去看看 —> 为了去很多地方看看，我觉得有辆车会更方便 —> 买车 —> 考驾照\n\n不要总想自己哪里欠缺，要想自己想要得到什么，并且为了目标努力，你就会变的更完美。\n拥有一个敢于大声喊出的梦想，不要羞涩，要为了梦想一步步的前进，最终达到梦想。\n\n# 提到的另外的书\n《培育梦想种子》《日记的力量》《成功人士的七个习惯》\n","source":"_posts/Read-The-miracle-of-the-morning-journal.md","raw":"---\ntitle: 《晨间日记的奇迹》读书笔记\ndate: 2016-10-27 22:22:22\ncategories: \n\t- 读书笔记\ntags: \n\t- 成长\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n昨天花了1天的时间读了《晨间日记的奇迹》，感觉整个人的认识发生了一些变化，下面把重要内容做一下摘抄总结。\n# 早上写日记的好处 —— 提升效率\n- 可以做好一天的准备 — 计划性\n- 可以正确的写出昨天发生的事 — 效率性&忠诚性\n- 可以中立的看待昨天 — 中立性\n- 相对自由的时间 — 持续性\n- 总结经验 — 活用性\n\n# 注意事项\n日记 不等于 日志\n日记 要记录 时间 天气 心情 --- 因为这些有助于回忆和记录\n不要投入过长时间 — 3分钟 — 日记私密性\n晨间日记前7天只写好事 --- 反省固然重要，但是成长更重要，持续性很重要 --- 巴普洛夫的狗\n\n# 晨间日记2部分\n## Part1 \n客观记录已经发生的事（昨天）— 经验智慧\n## Part2 \n- 今天应做的事 — 具体行动（来自昨天的总结\n- 今天一定要做的事（紧急重要的事）— 变得更积极更主动\n- 未来要做的事 — 不紧急但重要的事\n- 连用日记 — 历史上的今天（过去一年同一天的事）\n\n# 夜晚日记 VS 晨间日记\n受当天情绪影响 — 更冷静\n\n# 梦想成真表\n|      | 过去        | 未来            |\n| ---- | ----------- | --------------- |\n| 事实 | IQ 智慧指数 | NQ 人际关系指数 |\n| 感情 | EQ 情感指数 | DQ 梦想指数     |\n\n- IQ — 晨间日记冷静回忆分析 — 提高决策正确性 IQ up\n- EQ — 冷静记录昨日的情绪／自省 — 变积极 EQ up\n- NQ — 总结昨天给今天设立“对／为XXX做某事” 很重要 NQ up\n- DQ — 不能只有眼前的事 每天都要确定一下自己的梦想 脸皮厚点没关系 重复或只有一句话也没关系 铭记于心最重要\n\n“忙碌”只是借口！“决心”才是问题！ 对未来充满期待的人才有行动力\n\n# 如何早起\n- 设定起床音乐／用气味（精油）刺激起床／光线-电动窗帘早起自动拉开\n- 早起后淋浴 — 配合音乐／冥想／呐喊 — 让自己充满动力保持清醒\n\n# 写日记的五大好处\n- 提升写作能力\n- 谈话题材源源不断\n- 提高贵人运\n- 返现自我肉体和精神的状态与模式\n- 在自己身上挖宝，彻底改变人生\n\n# 记录的日记要常拿出来看看\n记录日记时 — 问问自己的灵魂 然后写下真心话 — 灵魂日记\n`六度空间理论`\n\n# 七种成功者的习惯\n- 习惯之一：积极主动别指望谁能推你走 — 主动行动，迈出第一步\n- 习惯之二：以终为始忠于自己的人生计划。— 设立人生目标并坚持\n- 习惯之三：要事第一选择当前该做的事\n- 习惯之四：追求双赢远离角斗场\n- 习惯之五：善于沟通换位思考的原则\n- 习惯之六：统合综效 1+1可以大于2\n- 习惯之七：不断更新全方位平衡自我\n\n早睡是为了身体，早起是为了我们的内心。— sugiponn\n\n# 晨间日记的格式\n晨间日记必须要设立的栏目 — 工作／金钱／健康／人际关系\n要记下当日的日期／天气／温度／湿度\n\n纬度标签\n工作方面：\n* 能力开发／经营／管理／进货／工作人员／学习／资格／活动／企划案／想法／推广\n金钱方面：\n* 收入／指出／购入／股票／资产／储蓄／家用\n健康方面：\n* 饮食／运动／性／减肥／身体状况／锻炼身体／体重／脂肪\n人际关系方面：\n* 父母／家人／小孩／亲戚／情人／工作伙伴／朋友／熟人／联络事项／人脉网络\n兴趣方面以及其他：\n* 义工活动／阅读／运动／打扮／电影／音乐／游戏／喜欢的物品／今天必须要注意的事／美容／开心的事／购物\n\n劳动 — 职业 — 工作 — *乐趣*\n\n# 三大原则和七大作战守则\n* 原则1:时间不超过3分钟 — 减少养成习惯的成本\n* 原则2:决定好写晨间日记的地方 — 为了养成习惯\n* 原则3:只写一个字也没关系 — 不要有压力\n\n* 作战守则1:开心写日记 — 反省固然重要，鼓励更有作用 — 开始写晨间日记前七天只写好事\n* 作战守则2:ONE-TWO作战 — 把动作分布容易养成习惯 — 形成固定动作\n* 作战守则3:巴普洛夫的狗 — 开始写日记时候要有一个仪式 — 心理暗示\n* 作战守则4:奖励自己 — 当习惯养成并坚持到一定时间，给自己一个奖励\n* 作战守则5:宣告天下 — 借由他人的鼓励或压力形成动力／也可找到同志\n* 作战守则6:一千日作战法 — 不管什么样的习惯坚持1000日就会成为永远的习惯 — 具体做法为记录 第XXX篇 晨间日记\n* 作战守则7:为了别人 — 写晨间日记不只是为了自己，而且更是为了别人，身边人的幸福最终会影响到自己\n\n# 应该先肯定自己，给自己打100分\n* “总之，先… 病” 没有目标／没有梦想 — 回顾时一定会后悔！\n* “假如…，应该 病” 无法满足／没有动力 — 焦躁不安\n* 共同点：失落感／空虚／\n\n## 解决办法— 设立一个情境\n例：我要建立一个幸福的家庭 —> 因此我要创造很多快乐的回忆 —> 为了制造很多快乐的回忆 —> 我必须要到很多的地方去看看 —> 为了去很多地方看看，我觉得有辆车会更方便 —> 买车 —> 考驾照\n\n不要总想自己哪里欠缺，要想自己想要得到什么，并且为了目标努力，你就会变的更完美。\n拥有一个敢于大声喊出的梦想，不要羞涩，要为了梦想一步步的前进，最终达到梦想。\n\n# 提到的另外的书\n《培育梦想种子》《日记的力量》《成功人士的七个习惯》\n","slug":"Read-The-miracle-of-the-morning-journal","published":1,"updated":"2019-12-31T10:27:37.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4tzdevi0006v0a6fcua0ikl","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>昨天花了1天的时间读了《晨间日记的奇迹》，感觉整个人的认识发生了一些变化，下面把重要内容做一下摘抄总结。</p>\n<h1 id=\"早上写日记的好处-——-提升效率\"><a href=\"#早上写日记的好处-——-提升效率\" class=\"headerlink\" title=\"早上写日记的好处 —— 提升效率\"></a>早上写日记的好处 —— 提升效率</h1><ul>\n<li>可以做好一天的准备 — 计划性</li>\n<li>可以正确的写出昨天发生的事 — 效率性&amp;忠诚性</li>\n<li>可以中立的看待昨天 — 中立性</li>\n<li>相对自由的时间 — 持续性</li>\n<li>总结经验 — 活用性</li>\n</ul>\n<h1 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h1><p>日记 不等于 日志<br>日记 要记录 时间 天气 心情 — 因为这些有助于回忆和记录<br>不要投入过长时间 — 3分钟 — 日记私密性<br>晨间日记前7天只写好事 — 反省固然重要，但是成长更重要，持续性很重要 — 巴普洛夫的狗</p>\n<h1 id=\"晨间日记2部分\"><a href=\"#晨间日记2部分\" class=\"headerlink\" title=\"晨间日记2部分\"></a>晨间日记2部分</h1><h2 id=\"Part1\"><a href=\"#Part1\" class=\"headerlink\" title=\"Part1\"></a>Part1</h2><p>客观记录已经发生的事（昨天）— 经验智慧</p>\n<h2 id=\"Part2\"><a href=\"#Part2\" class=\"headerlink\" title=\"Part2\"></a>Part2</h2><ul>\n<li>今天应做的事 — 具体行动（来自昨天的总结</li>\n<li>今天一定要做的事（紧急重要的事）— 变得更积极更主动</li>\n<li>未来要做的事 — 不紧急但重要的事</li>\n<li>连用日记 — 历史上的今天（过去一年同一天的事）</li>\n</ul>\n<h1 id=\"夜晚日记-VS-晨间日记\"><a href=\"#夜晚日记-VS-晨间日记\" class=\"headerlink\" title=\"夜晚日记 VS 晨间日记\"></a>夜晚日记 VS 晨间日记</h1><p>受当天情绪影响 — 更冷静</p>\n<h1 id=\"梦想成真表\"><a href=\"#梦想成真表\" class=\"headerlink\" title=\"梦想成真表\"></a>梦想成真表</h1><table>\n<thead>\n<tr>\n<th></th>\n<th>过去</th>\n<th>未来</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>事实</td>\n<td>IQ 智慧指数</td>\n<td>NQ 人际关系指数</td>\n</tr>\n<tr>\n<td>感情</td>\n<td>EQ 情感指数</td>\n<td>DQ 梦想指数</td>\n</tr>\n</tbody></table>\n<ul>\n<li>IQ — 晨间日记冷静回忆分析 — 提高决策正确性 IQ up</li>\n<li>EQ — 冷静记录昨日的情绪／自省 — 变积极 EQ up</li>\n<li>NQ — 总结昨天给今天设立“对／为XXX做某事” 很重要 NQ up</li>\n<li>DQ — 不能只有眼前的事 每天都要确定一下自己的梦想 脸皮厚点没关系 重复或只有一句话也没关系 铭记于心最重要</li>\n</ul>\n<p>“忙碌”只是借口！“决心”才是问题！ 对未来充满期待的人才有行动力</p>\n<h1 id=\"如何早起\"><a href=\"#如何早起\" class=\"headerlink\" title=\"如何早起\"></a>如何早起</h1><ul>\n<li>设定起床音乐／用气味（精油）刺激起床／光线-电动窗帘早起自动拉开</li>\n<li>早起后淋浴 — 配合音乐／冥想／呐喊 — 让自己充满动力保持清醒</li>\n</ul>\n<h1 id=\"写日记的五大好处\"><a href=\"#写日记的五大好处\" class=\"headerlink\" title=\"写日记的五大好处\"></a>写日记的五大好处</h1><ul>\n<li>提升写作能力</li>\n<li>谈话题材源源不断</li>\n<li>提高贵人运</li>\n<li>返现自我肉体和精神的状态与模式</li>\n<li>在自己身上挖宝，彻底改变人生</li>\n</ul>\n<h1 id=\"记录的日记要常拿出来看看\"><a href=\"#记录的日记要常拿出来看看\" class=\"headerlink\" title=\"记录的日记要常拿出来看看\"></a>记录的日记要常拿出来看看</h1><p>记录日记时 — 问问自己的灵魂 然后写下真心话 — 灵魂日记<br><code>六度空间理论</code></p>\n<h1 id=\"七种成功者的习惯\"><a href=\"#七种成功者的习惯\" class=\"headerlink\" title=\"七种成功者的习惯\"></a>七种成功者的习惯</h1><ul>\n<li>习惯之一：积极主动别指望谁能推你走 — 主动行动，迈出第一步</li>\n<li>习惯之二：以终为始忠于自己的人生计划。— 设立人生目标并坚持</li>\n<li>习惯之三：要事第一选择当前该做的事</li>\n<li>习惯之四：追求双赢远离角斗场</li>\n<li>习惯之五：善于沟通换位思考的原则</li>\n<li>习惯之六：统合综效 1+1可以大于2</li>\n<li>习惯之七：不断更新全方位平衡自我</li>\n</ul>\n<p>早睡是为了身体，早起是为了我们的内心。— sugiponn</p>\n<h1 id=\"晨间日记的格式\"><a href=\"#晨间日记的格式\" class=\"headerlink\" title=\"晨间日记的格式\"></a>晨间日记的格式</h1><p>晨间日记必须要设立的栏目 — 工作／金钱／健康／人际关系<br>要记下当日的日期／天气／温度／湿度</p>\n<p>纬度标签<br>工作方面：</p>\n<ul>\n<li>能力开发／经营／管理／进货／工作人员／学习／资格／活动／企划案／想法／推广<br>金钱方面：</li>\n<li>收入／指出／购入／股票／资产／储蓄／家用<br>健康方面：</li>\n<li>饮食／运动／性／减肥／身体状况／锻炼身体／体重／脂肪<br>人际关系方面：</li>\n<li>父母／家人／小孩／亲戚／情人／工作伙伴／朋友／熟人／联络事项／人脉网络<br>兴趣方面以及其他：</li>\n<li>义工活动／阅读／运动／打扮／电影／音乐／游戏／喜欢的物品／今天必须要注意的事／美容／开心的事／购物</li>\n</ul>\n<p>劳动 — 职业 — 工作 — <em>乐趣</em></p>\n<h1 id=\"三大原则和七大作战守则\"><a href=\"#三大原则和七大作战守则\" class=\"headerlink\" title=\"三大原则和七大作战守则\"></a>三大原则和七大作战守则</h1><ul>\n<li><p>原则1:时间不超过3分钟 — 减少养成习惯的成本</p>\n</li>\n<li><p>原则2:决定好写晨间日记的地方 — 为了养成习惯</p>\n</li>\n<li><p>原则3:只写一个字也没关系 — 不要有压力</p>\n</li>\n<li><p>作战守则1:开心写日记 — 反省固然重要，鼓励更有作用 — 开始写晨间日记前七天只写好事</p>\n</li>\n<li><p>作战守则2:ONE-TWO作战 — 把动作分布容易养成习惯 — 形成固定动作</p>\n</li>\n<li><p>作战守则3:巴普洛夫的狗 — 开始写日记时候要有一个仪式 — 心理暗示</p>\n</li>\n<li><p>作战守则4:奖励自己 — 当习惯养成并坚持到一定时间，给自己一个奖励</p>\n</li>\n<li><p>作战守则5:宣告天下 — 借由他人的鼓励或压力形成动力／也可找到同志</p>\n</li>\n<li><p>作战守则6:一千日作战法 — 不管什么样的习惯坚持1000日就会成为永远的习惯 — 具体做法为记录 第XXX篇 晨间日记</p>\n</li>\n<li><p>作战守则7:为了别人 — 写晨间日记不只是为了自己，而且更是为了别人，身边人的幸福最终会影响到自己</p>\n</li>\n</ul>\n<h1 id=\"应该先肯定自己，给自己打100分\"><a href=\"#应该先肯定自己，给自己打100分\" class=\"headerlink\" title=\"应该先肯定自己，给自己打100分\"></a>应该先肯定自己，给自己打100分</h1><ul>\n<li>“总之，先… 病” 没有目标／没有梦想 — 回顾时一定会后悔！</li>\n<li>“假如…，应该 病” 无法满足／没有动力 — 焦躁不安</li>\n<li>共同点：失落感／空虚／</li>\n</ul>\n<h2 id=\"解决办法—-设立一个情境\"><a href=\"#解决办法—-设立一个情境\" class=\"headerlink\" title=\"解决办法— 设立一个情境\"></a>解决办法— 设立一个情境</h2><p>例：我要建立一个幸福的家庭 —&gt; 因此我要创造很多快乐的回忆 —&gt; 为了制造很多快乐的回忆 —&gt; 我必须要到很多的地方去看看 —&gt; 为了去很多地方看看，我觉得有辆车会更方便 —&gt; 买车 —&gt; 考驾照</p>\n<p>不要总想自己哪里欠缺，要想自己想要得到什么，并且为了目标努力，你就会变的更完美。<br>拥有一个敢于大声喊出的梦想，不要羞涩，要为了梦想一步步的前进，最终达到梦想。</p>\n<h1 id=\"提到的另外的书\"><a href=\"#提到的另外的书\" class=\"headerlink\" title=\"提到的另外的书\"></a>提到的另外的书</h1><p>《培育梦想种子》《日记的力量》《成功人士的七个习惯》</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>昨天花了1天的时间读了《晨间日记的奇迹》，感觉整个人的认识发生了一些变化，下面把重要内容做一下摘抄总结。</p>\n<h1 id=\"早上写日记的好处-——-提升效率\"><a href=\"#早上写日记的好处-——-提升效率\" class=\"headerlink\" title=\"早上写日记的好处 —— 提升效率\"></a>早上写日记的好处 —— 提升效率</h1><ul>\n<li>可以做好一天的准备 — 计划性</li>\n<li>可以正确的写出昨天发生的事 — 效率性&amp;忠诚性</li>\n<li>可以中立的看待昨天 — 中立性</li>\n<li>相对自由的时间 — 持续性</li>\n<li>总结经验 — 活用性</li>\n</ul>\n<h1 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h1><p>日记 不等于 日志<br>日记 要记录 时间 天气 心情 — 因为这些有助于回忆和记录<br>不要投入过长时间 — 3分钟 — 日记私密性<br>晨间日记前7天只写好事 — 反省固然重要，但是成长更重要，持续性很重要 — 巴普洛夫的狗</p>\n<h1 id=\"晨间日记2部分\"><a href=\"#晨间日记2部分\" class=\"headerlink\" title=\"晨间日记2部分\"></a>晨间日记2部分</h1><h2 id=\"Part1\"><a href=\"#Part1\" class=\"headerlink\" title=\"Part1\"></a>Part1</h2><p>客观记录已经发生的事（昨天）— 经验智慧</p>\n<h2 id=\"Part2\"><a href=\"#Part2\" class=\"headerlink\" title=\"Part2\"></a>Part2</h2><ul>\n<li>今天应做的事 — 具体行动（来自昨天的总结</li>\n<li>今天一定要做的事（紧急重要的事）— 变得更积极更主动</li>\n<li>未来要做的事 — 不紧急但重要的事</li>\n<li>连用日记 — 历史上的今天（过去一年同一天的事）</li>\n</ul>\n<h1 id=\"夜晚日记-VS-晨间日记\"><a href=\"#夜晚日记-VS-晨间日记\" class=\"headerlink\" title=\"夜晚日记 VS 晨间日记\"></a>夜晚日记 VS 晨间日记</h1><p>受当天情绪影响 — 更冷静</p>\n<h1 id=\"梦想成真表\"><a href=\"#梦想成真表\" class=\"headerlink\" title=\"梦想成真表\"></a>梦想成真表</h1><table>\n<thead>\n<tr>\n<th></th>\n<th>过去</th>\n<th>未来</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>事实</td>\n<td>IQ 智慧指数</td>\n<td>NQ 人际关系指数</td>\n</tr>\n<tr>\n<td>感情</td>\n<td>EQ 情感指数</td>\n<td>DQ 梦想指数</td>\n</tr>\n</tbody></table>\n<ul>\n<li>IQ — 晨间日记冷静回忆分析 — 提高决策正确性 IQ up</li>\n<li>EQ — 冷静记录昨日的情绪／自省 — 变积极 EQ up</li>\n<li>NQ — 总结昨天给今天设立“对／为XXX做某事” 很重要 NQ up</li>\n<li>DQ — 不能只有眼前的事 每天都要确定一下自己的梦想 脸皮厚点没关系 重复或只有一句话也没关系 铭记于心最重要</li>\n</ul>\n<p>“忙碌”只是借口！“决心”才是问题！ 对未来充满期待的人才有行动力</p>\n<h1 id=\"如何早起\"><a href=\"#如何早起\" class=\"headerlink\" title=\"如何早起\"></a>如何早起</h1><ul>\n<li>设定起床音乐／用气味（精油）刺激起床／光线-电动窗帘早起自动拉开</li>\n<li>早起后淋浴 — 配合音乐／冥想／呐喊 — 让自己充满动力保持清醒</li>\n</ul>\n<h1 id=\"写日记的五大好处\"><a href=\"#写日记的五大好处\" class=\"headerlink\" title=\"写日记的五大好处\"></a>写日记的五大好处</h1><ul>\n<li>提升写作能力</li>\n<li>谈话题材源源不断</li>\n<li>提高贵人运</li>\n<li>返现自我肉体和精神的状态与模式</li>\n<li>在自己身上挖宝，彻底改变人生</li>\n</ul>\n<h1 id=\"记录的日记要常拿出来看看\"><a href=\"#记录的日记要常拿出来看看\" class=\"headerlink\" title=\"记录的日记要常拿出来看看\"></a>记录的日记要常拿出来看看</h1><p>记录日记时 — 问问自己的灵魂 然后写下真心话 — 灵魂日记<br><code>六度空间理论</code></p>\n<h1 id=\"七种成功者的习惯\"><a href=\"#七种成功者的习惯\" class=\"headerlink\" title=\"七种成功者的习惯\"></a>七种成功者的习惯</h1><ul>\n<li>习惯之一：积极主动别指望谁能推你走 — 主动行动，迈出第一步</li>\n<li>习惯之二：以终为始忠于自己的人生计划。— 设立人生目标并坚持</li>\n<li>习惯之三：要事第一选择当前该做的事</li>\n<li>习惯之四：追求双赢远离角斗场</li>\n<li>习惯之五：善于沟通换位思考的原则</li>\n<li>习惯之六：统合综效 1+1可以大于2</li>\n<li>习惯之七：不断更新全方位平衡自我</li>\n</ul>\n<p>早睡是为了身体，早起是为了我们的内心。— sugiponn</p>\n<h1 id=\"晨间日记的格式\"><a href=\"#晨间日记的格式\" class=\"headerlink\" title=\"晨间日记的格式\"></a>晨间日记的格式</h1><p>晨间日记必须要设立的栏目 — 工作／金钱／健康／人际关系<br>要记下当日的日期／天气／温度／湿度</p>\n<p>纬度标签<br>工作方面：</p>\n<ul>\n<li>能力开发／经营／管理／进货／工作人员／学习／资格／活动／企划案／想法／推广<br>金钱方面：</li>\n<li>收入／指出／购入／股票／资产／储蓄／家用<br>健康方面：</li>\n<li>饮食／运动／性／减肥／身体状况／锻炼身体／体重／脂肪<br>人际关系方面：</li>\n<li>父母／家人／小孩／亲戚／情人／工作伙伴／朋友／熟人／联络事项／人脉网络<br>兴趣方面以及其他：</li>\n<li>义工活动／阅读／运动／打扮／电影／音乐／游戏／喜欢的物品／今天必须要注意的事／美容／开心的事／购物</li>\n</ul>\n<p>劳动 — 职业 — 工作 — <em>乐趣</em></p>\n<h1 id=\"三大原则和七大作战守则\"><a href=\"#三大原则和七大作战守则\" class=\"headerlink\" title=\"三大原则和七大作战守则\"></a>三大原则和七大作战守则</h1><ul>\n<li><p>原则1:时间不超过3分钟 — 减少养成习惯的成本</p>\n</li>\n<li><p>原则2:决定好写晨间日记的地方 — 为了养成习惯</p>\n</li>\n<li><p>原则3:只写一个字也没关系 — 不要有压力</p>\n</li>\n<li><p>作战守则1:开心写日记 — 反省固然重要，鼓励更有作用 — 开始写晨间日记前七天只写好事</p>\n</li>\n<li><p>作战守则2:ONE-TWO作战 — 把动作分布容易养成习惯 — 形成固定动作</p>\n</li>\n<li><p>作战守则3:巴普洛夫的狗 — 开始写日记时候要有一个仪式 — 心理暗示</p>\n</li>\n<li><p>作战守则4:奖励自己 — 当习惯养成并坚持到一定时间，给自己一个奖励</p>\n</li>\n<li><p>作战守则5:宣告天下 — 借由他人的鼓励或压力形成动力／也可找到同志</p>\n</li>\n<li><p>作战守则6:一千日作战法 — 不管什么样的习惯坚持1000日就会成为永远的习惯 — 具体做法为记录 第XXX篇 晨间日记</p>\n</li>\n<li><p>作战守则7:为了别人 — 写晨间日记不只是为了自己，而且更是为了别人，身边人的幸福最终会影响到自己</p>\n</li>\n</ul>\n<h1 id=\"应该先肯定自己，给自己打100分\"><a href=\"#应该先肯定自己，给自己打100分\" class=\"headerlink\" title=\"应该先肯定自己，给自己打100分\"></a>应该先肯定自己，给自己打100分</h1><ul>\n<li>“总之，先… 病” 没有目标／没有梦想 — 回顾时一定会后悔！</li>\n<li>“假如…，应该 病” 无法满足／没有动力 — 焦躁不安</li>\n<li>共同点：失落感／空虚／</li>\n</ul>\n<h2 id=\"解决办法—-设立一个情境\"><a href=\"#解决办法—-设立一个情境\" class=\"headerlink\" title=\"解决办法— 设立一个情境\"></a>解决办法— 设立一个情境</h2><p>例：我要建立一个幸福的家庭 —&gt; 因此我要创造很多快乐的回忆 —&gt; 为了制造很多快乐的回忆 —&gt; 我必须要到很多的地方去看看 —&gt; 为了去很多地方看看，我觉得有辆车会更方便 —&gt; 买车 —&gt; 考驾照</p>\n<p>不要总想自己哪里欠缺，要想自己想要得到什么，并且为了目标努力，你就会变的更完美。<br>拥有一个敢于大声喊出的梦想，不要羞涩，要为了梦想一步步的前进，最终达到梦想。</p>\n<h1 id=\"提到的另外的书\"><a href=\"#提到的另外的书\" class=\"headerlink\" title=\"提到的另外的书\"></a>提到的另外的书</h1><p>《培育梦想种子》《日记的力量》《成功人士的七个习惯》</p>\n"},{"title":"前端面试Vue篇：Vue组件通信的几种方式","date":"2019-12-27T14:22:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n公司这两年兴起了前后端分离的热潮，在选用三大技术框架时，vue凭借其学习曲线低深受公司程序员的喜爱，因此我们也就走上了vue学习的不归路，在招聘招揽小伙伴时有那么一些问题经常被问起，vue组件间通信就是其中之一，下面我们来聊一聊vue组件通信有哪些方式。\n<!-- more -->\n\n## `props`和`$emit`\n啥也不了解的小伙伴应该也知道这种方式吧，这是最最基础的通信方式了，父子组件通信基本都用它。父组件向子组件传递数据的时候通过prop传参，子组件中通过$emit传递给父组件，父组件在触发子组件$emit方法时得到子组件数据。实例如下：\n\n```\n// 父组件 parent.vue\n\nVue.compinent('parent', {\n    template: `\n    <div>\n    <p>父组件</p>\n    <child :message=\"message\" @getChildrenData=\"getChildrenData\"></child>\n    </div>`,\n    data() {\n        return {\n            message:'Hello lixuguang'\n        }\n    },\n    methods: {\n        /**\n        * 执行子组件触发的事件方法 \n        */\n        getChildrenData(data){\n            console.log(data)\n        }\n    }\n})\n\n// 子组件 child.vue\n\nVue.component('child', {\n    props:['message'], // 得到父组件传过来的数据\n    data() {\n        return {\n            childMessage: this.message\n        }\n    },\n    template:`\n    <div>\n    <input type=\"text\" v-model=\"childMessage\" @input=\"emitParentData(childMessage)\">\n    </div>\n    `,\n    methods: {\n        emitParentData(data) {\n            this.$emit('getChildrenData', data) // 父组件触发时给父组件传值\n        }\n    }\n})\n\n// App.vue\nvar app = new Vue({\n    el: \"#app\",\n    template: `\n    <div>\n    <parent></parent>\n    </div>\n    `\n})\n```\n**解析代码：**\n1. 父组件通过`message`属性将数据传递给子组件，并且通过`getChildrenData`事件来监听子组件出发的事件；\n2. 子组件通过`props`获得父组件传过来的数据，并且通过`this.$emit`触发了`getChildrenData`事件;\n\n## `$attrs`和`$listeners`\n前一种方法我们完成了父子组件的数据通信，那你有没有想过如果有多层嵌套的数据最上层要往最下层传值怎么办，前一种方法只能一层一层的往下传，可是这样太麻烦了，那么有没有什么方法能够一次传到你想要传到的位置呢，当然是有的，那就是接下来要说到的`$attrs`和`$listeners`。\n假设我们现在有三层包含关系的组件，分别是level1/level2/level3，level1 > level2 > level3, `>` 表示包含关系。\n```\n// level3.vue\n\nVue.component('level3', {\n    template:`\n    <div>\n    <input type=\"text\" v-model=\"$attrs.level3Message\" @input=\"emitLevel3Data($attrs.level3Message)\">\n    </div>\n    `,\n    methods: {\n        emitLevel3Data(data) {\n            this.$emit('getLevel3Data', data)\n        }\n    }\n})\n\n// level2.vue\n\nVue.component('level2', {\n    props:['level2Message'],\n    data(){\n        return {\n            level2Message:this.level2Message\n        }\n    },\n    template:`\n    <div>\n    <input type=\"text\" v-model=\"level2Message\" @input=\"emitLevel2Data(level2Message)\">\n    <level3 v-bind='$attrs' v-on='$listenrs'></level3>\n    </div>\n    `,\n    methods: {\n        emitLevel2Data(data) {\n            this.$emit('getLevel2Data', data) \n        }\n    }\n})\n\n// level1.vue\n\nVue.component('level1', {\n    data(){\n        return {\n            level3Message:\"I am Level3\",\n            level2Message:\"I am Level2\"\n        }\n    },\n    template:`\n    <div>\n    <h1>这是level1中的内容</h1>\n    <level2 :level2Message=\"level2Message\" \n            :level3Message=\"level3Message\"\n            @getLevel2Data=\"getLevel2Data()\"\n            @getLevel3Data=\"getLevel3Data()\"\n            ></level2>\n    </div>\n    `,\n    methods: {\n        getLevel2Data(data) {\n            console.log('这是来自level2的数据', data)\n        },\n        getLevel3Data(data) {\n            console.log('这是来自level3的数据', data)\n        }\n    }\n})\n\n// App.vue\n\nvar app = new Vue({\n    el: \"#app\",\n    template: `\n    <div>\n    <level1></level1>\n    </div>\n    `\n})\n```\n**解析代码：**\n1. level3组件能直接触发`getLevel3Data`是因为level2组件在调用level3组件时使用v-on绑定了$listeners属性；\n2. 通过v-bind绑定了$attrs属性，level3组件可以直接获取到从level1传下来的props;\n\n## v-model\n父组件通过v-model传递值给子组件时，会自动传递一个value的props户型，在子组件中可以通过this.$emit('input',val)自动修改v-model绑定的值。\n```\n\n未完待续~","source":"_posts/Vue-Component-Communication.md","raw":"---\ntitle: 前端面试Vue篇：Vue组件通信的几种方式\ndate: 2019-12-27 22:22:22\ncategories: \n\t- Vue基础\ntags: \n\t- vue\n\t- 面试\n\t- 组件通信\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n公司这两年兴起了前后端分离的热潮，在选用三大技术框架时，vue凭借其学习曲线低深受公司程序员的喜爱，因此我们也就走上了vue学习的不归路，在招聘招揽小伙伴时有那么一些问题经常被问起，vue组件间通信就是其中之一，下面我们来聊一聊vue组件通信有哪些方式。\n<!-- more -->\n\n## `props`和`$emit`\n啥也不了解的小伙伴应该也知道这种方式吧，这是最最基础的通信方式了，父子组件通信基本都用它。父组件向子组件传递数据的时候通过prop传参，子组件中通过$emit传递给父组件，父组件在触发子组件$emit方法时得到子组件数据。实例如下：\n\n```\n// 父组件 parent.vue\n\nVue.compinent('parent', {\n    template: `\n    <div>\n    <p>父组件</p>\n    <child :message=\"message\" @getChildrenData=\"getChildrenData\"></child>\n    </div>`,\n    data() {\n        return {\n            message:'Hello lixuguang'\n        }\n    },\n    methods: {\n        /**\n        * 执行子组件触发的事件方法 \n        */\n        getChildrenData(data){\n            console.log(data)\n        }\n    }\n})\n\n// 子组件 child.vue\n\nVue.component('child', {\n    props:['message'], // 得到父组件传过来的数据\n    data() {\n        return {\n            childMessage: this.message\n        }\n    },\n    template:`\n    <div>\n    <input type=\"text\" v-model=\"childMessage\" @input=\"emitParentData(childMessage)\">\n    </div>\n    `,\n    methods: {\n        emitParentData(data) {\n            this.$emit('getChildrenData', data) // 父组件触发时给父组件传值\n        }\n    }\n})\n\n// App.vue\nvar app = new Vue({\n    el: \"#app\",\n    template: `\n    <div>\n    <parent></parent>\n    </div>\n    `\n})\n```\n**解析代码：**\n1. 父组件通过`message`属性将数据传递给子组件，并且通过`getChildrenData`事件来监听子组件出发的事件；\n2. 子组件通过`props`获得父组件传过来的数据，并且通过`this.$emit`触发了`getChildrenData`事件;\n\n## `$attrs`和`$listeners`\n前一种方法我们完成了父子组件的数据通信，那你有没有想过如果有多层嵌套的数据最上层要往最下层传值怎么办，前一种方法只能一层一层的往下传，可是这样太麻烦了，那么有没有什么方法能够一次传到你想要传到的位置呢，当然是有的，那就是接下来要说到的`$attrs`和`$listeners`。\n假设我们现在有三层包含关系的组件，分别是level1/level2/level3，level1 > level2 > level3, `>` 表示包含关系。\n```\n// level3.vue\n\nVue.component('level3', {\n    template:`\n    <div>\n    <input type=\"text\" v-model=\"$attrs.level3Message\" @input=\"emitLevel3Data($attrs.level3Message)\">\n    </div>\n    `,\n    methods: {\n        emitLevel3Data(data) {\n            this.$emit('getLevel3Data', data)\n        }\n    }\n})\n\n// level2.vue\n\nVue.component('level2', {\n    props:['level2Message'],\n    data(){\n        return {\n            level2Message:this.level2Message\n        }\n    },\n    template:`\n    <div>\n    <input type=\"text\" v-model=\"level2Message\" @input=\"emitLevel2Data(level2Message)\">\n    <level3 v-bind='$attrs' v-on='$listenrs'></level3>\n    </div>\n    `,\n    methods: {\n        emitLevel2Data(data) {\n            this.$emit('getLevel2Data', data) \n        }\n    }\n})\n\n// level1.vue\n\nVue.component('level1', {\n    data(){\n        return {\n            level3Message:\"I am Level3\",\n            level2Message:\"I am Level2\"\n        }\n    },\n    template:`\n    <div>\n    <h1>这是level1中的内容</h1>\n    <level2 :level2Message=\"level2Message\" \n            :level3Message=\"level3Message\"\n            @getLevel2Data=\"getLevel2Data()\"\n            @getLevel3Data=\"getLevel3Data()\"\n            ></level2>\n    </div>\n    `,\n    methods: {\n        getLevel2Data(data) {\n            console.log('这是来自level2的数据', data)\n        },\n        getLevel3Data(data) {\n            console.log('这是来自level3的数据', data)\n        }\n    }\n})\n\n// App.vue\n\nvar app = new Vue({\n    el: \"#app\",\n    template: `\n    <div>\n    <level1></level1>\n    </div>\n    `\n})\n```\n**解析代码：**\n1. level3组件能直接触发`getLevel3Data`是因为level2组件在调用level3组件时使用v-on绑定了$listeners属性；\n2. 通过v-bind绑定了$attrs属性，level3组件可以直接获取到从level1传下来的props;\n\n## v-model\n父组件通过v-model传递值给子组件时，会自动传递一个value的props户型，在子组件中可以通过this.$emit('input',val)自动修改v-model绑定的值。\n```\n\n未完待续~","slug":"Vue-Component-Communication","published":1,"updated":"2019-12-30T13:57:39.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4tzdevn000av0a61rjr292n","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>公司这两年兴起了前后端分离的热潮，在选用三大技术框架时，vue凭借其学习曲线低深受公司程序员的喜爱，因此我们也就走上了vue学习的不归路，在招聘招揽小伙伴时有那么一些问题经常被问起，vue组件间通信就是其中之一，下面我们来聊一聊vue组件通信有哪些方式。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"props和-emit\"><a href=\"#props和-emit\" class=\"headerlink\" title=\"props和$emit\"></a><code>props</code>和<code>$emit</code></h2><p>啥也不了解的小伙伴应该也知道这种方式吧，这是最最基础的通信方式了，父子组件通信基本都用它。父组件向子组件传递数据的时候通过prop传参，子组件中通过$emit传递给父组件，父组件在触发子组件$emit方法时得到子组件数据。实例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 父组件 parent.vue</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.compinent(&#39;parent&#39;, &#123;</span><br><span class=\"line\">    template: &#96;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    &lt;p&gt;父组件&lt;&#x2F;p&gt;</span><br><span class=\"line\">    &lt;child :message&#x3D;&quot;message&quot; @getChildrenData&#x3D;&quot;getChildrenData&quot;&gt;&lt;&#x2F;child&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            message:&#39;Hello lixuguang&#39;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        &#x2F;**</span><br><span class=\"line\">        * 执行子组件触发的事件方法 </span><br><span class=\"line\">        *&#x2F;</span><br><span class=\"line\">        getChildrenData(data)&#123;</span><br><span class=\"line\">            console.log(data)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 子组件 child.vue</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(&#39;child&#39;, &#123;</span><br><span class=\"line\">    props:[&#39;message&#39;], &#x2F;&#x2F; 得到父组件传过来的数据</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            childMessage: this.message</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    template:&#96;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;childMessage&quot; @input&#x3D;&quot;emitParentData(childMessage)&quot;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &#96;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        emitParentData(data) &#123;</span><br><span class=\"line\">            this.$emit(&#39;getChildrenData&#39;, data) &#x2F;&#x2F; 父组件触发时给父组件传值</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; App.vue</span><br><span class=\"line\">var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    template: &#96;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    &lt;parent&gt;&lt;&#x2F;parent&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &#96;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>解析代码：</strong></p>\n<ol>\n<li>父组件通过<code>message</code>属性将数据传递给子组件，并且通过<code>getChildrenData</code>事件来监听子组件出发的事件；</li>\n<li>子组件通过<code>props</code>获得父组件传过来的数据，并且通过<code>this.$emit</code>触发了<code>getChildrenData</code>事件;</li>\n</ol>\n<h2 id=\"attrs和-listeners\"><a href=\"#attrs和-listeners\" class=\"headerlink\" title=\"$attrs和$listeners\"></a><code>$attrs</code>和<code>$listeners</code></h2><p>前一种方法我们完成了父子组件的数据通信，那你有没有想过如果有多层嵌套的数据最上层要往最下层传值怎么办，前一种方法只能一层一层的往下传，可是这样太麻烦了，那么有没有什么方法能够一次传到你想要传到的位置呢，当然是有的，那就是接下来要说到的<code>$attrs</code>和<code>$listeners</code>。<br>假设我们现在有三层包含关系的组件，分别是level1/level2/level3，level1 &gt; level2 &gt; level3, <code>&gt;</code> 表示包含关系。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; level3.vue</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(&#39;level3&#39;, &#123;</span><br><span class=\"line\">    template:&#96;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;$attrs.level3Message&quot; @input&#x3D;&quot;emitLevel3Data($attrs.level3Message)&quot;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &#96;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        emitLevel3Data(data) &#123;</span><br><span class=\"line\">            this.$emit(&#39;getLevel3Data&#39;, data)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; level2.vue</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(&#39;level2&#39;, &#123;</span><br><span class=\"line\">    props:[&#39;level2Message&#39;],</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            level2Message:this.level2Message</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    template:&#96;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;level2Message&quot; @input&#x3D;&quot;emitLevel2Data(level2Message)&quot;&gt;</span><br><span class=\"line\">    &lt;level3 v-bind&#x3D;&#39;$attrs&#39; v-on&#x3D;&#39;$listenrs&#39;&gt;&lt;&#x2F;level3&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &#96;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        emitLevel2Data(data) &#123;</span><br><span class=\"line\">            this.$emit(&#39;getLevel2Data&#39;, data) </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; level1.vue</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(&#39;level1&#39;, &#123;</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            level3Message:&quot;I am Level3&quot;,</span><br><span class=\"line\">            level2Message:&quot;I am Level2&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    template:&#96;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;这是level1中的内容&lt;&#x2F;h1&gt;</span><br><span class=\"line\">    &lt;level2 :level2Message&#x3D;&quot;level2Message&quot; </span><br><span class=\"line\">            :level3Message&#x3D;&quot;level3Message&quot;</span><br><span class=\"line\">            @getLevel2Data&#x3D;&quot;getLevel2Data()&quot;</span><br><span class=\"line\">            @getLevel3Data&#x3D;&quot;getLevel3Data()&quot;</span><br><span class=\"line\">            &gt;&lt;&#x2F;level2&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &#96;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        getLevel2Data(data) &#123;</span><br><span class=\"line\">            console.log(&#39;这是来自level2的数据&#39;, data)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        getLevel3Data(data) &#123;</span><br><span class=\"line\">            console.log(&#39;这是来自level3的数据&#39;, data)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; App.vue</span><br><span class=\"line\"></span><br><span class=\"line\">var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    template: &#96;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    &lt;level1&gt;&lt;&#x2F;level1&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &#96;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>解析代码：</strong></p>\n<ol>\n<li>level3组件能直接触发<code>getLevel3Data</code>是因为level2组件在调用level3组件时使用v-on绑定了$listeners属性；</li>\n<li>通过v-bind绑定了$attrs属性，level3组件可以直接获取到从level1传下来的props;</li>\n</ol>\n<h2 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h2><p>父组件通过v-model传递值给子组件时，会自动传递一个value的props户型，在子组件中可以通过this.$emit(‘input’,val)自动修改v-model绑定的值。</p>\n<p>```</p>\n<p>未完待续~</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>公司这两年兴起了前后端分离的热潮，在选用三大技术框架时，vue凭借其学习曲线低深受公司程序员的喜爱，因此我们也就走上了vue学习的不归路，在招聘招揽小伙伴时有那么一些问题经常被问起，vue组件间通信就是其中之一，下面我们来聊一聊vue组件通信有哪些方式。</p>","more":"<h2 id=\"props和-emit\"><a href=\"#props和-emit\" class=\"headerlink\" title=\"props和$emit\"></a><code>props</code>和<code>$emit</code></h2><p>啥也不了解的小伙伴应该也知道这种方式吧，这是最最基础的通信方式了，父子组件通信基本都用它。父组件向子组件传递数据的时候通过prop传参，子组件中通过$emit传递给父组件，父组件在触发子组件$emit方法时得到子组件数据。实例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 父组件 parent.vue</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.compinent(&#39;parent&#39;, &#123;</span><br><span class=\"line\">    template: &#96;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    &lt;p&gt;父组件&lt;&#x2F;p&gt;</span><br><span class=\"line\">    &lt;child :message&#x3D;&quot;message&quot; @getChildrenData&#x3D;&quot;getChildrenData&quot;&gt;&lt;&#x2F;child&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            message:&#39;Hello lixuguang&#39;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        &#x2F;**</span><br><span class=\"line\">        * 执行子组件触发的事件方法 </span><br><span class=\"line\">        *&#x2F;</span><br><span class=\"line\">        getChildrenData(data)&#123;</span><br><span class=\"line\">            console.log(data)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 子组件 child.vue</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(&#39;child&#39;, &#123;</span><br><span class=\"line\">    props:[&#39;message&#39;], &#x2F;&#x2F; 得到父组件传过来的数据</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            childMessage: this.message</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    template:&#96;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;childMessage&quot; @input&#x3D;&quot;emitParentData(childMessage)&quot;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &#96;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        emitParentData(data) &#123;</span><br><span class=\"line\">            this.$emit(&#39;getChildrenData&#39;, data) &#x2F;&#x2F; 父组件触发时给父组件传值</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; App.vue</span><br><span class=\"line\">var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    template: &#96;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    &lt;parent&gt;&lt;&#x2F;parent&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &#96;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>解析代码：</strong></p>\n<ol>\n<li>父组件通过<code>message</code>属性将数据传递给子组件，并且通过<code>getChildrenData</code>事件来监听子组件出发的事件；</li>\n<li>子组件通过<code>props</code>获得父组件传过来的数据，并且通过<code>this.$emit</code>触发了<code>getChildrenData</code>事件;</li>\n</ol>\n<h2 id=\"attrs和-listeners\"><a href=\"#attrs和-listeners\" class=\"headerlink\" title=\"$attrs和$listeners\"></a><code>$attrs</code>和<code>$listeners</code></h2><p>前一种方法我们完成了父子组件的数据通信，那你有没有想过如果有多层嵌套的数据最上层要往最下层传值怎么办，前一种方法只能一层一层的往下传，可是这样太麻烦了，那么有没有什么方法能够一次传到你想要传到的位置呢，当然是有的，那就是接下来要说到的<code>$attrs</code>和<code>$listeners</code>。<br>假设我们现在有三层包含关系的组件，分别是level1/level2/level3，level1 &gt; level2 &gt; level3, <code>&gt;</code> 表示包含关系。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; level3.vue</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(&#39;level3&#39;, &#123;</span><br><span class=\"line\">    template:&#96;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;$attrs.level3Message&quot; @input&#x3D;&quot;emitLevel3Data($attrs.level3Message)&quot;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &#96;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        emitLevel3Data(data) &#123;</span><br><span class=\"line\">            this.$emit(&#39;getLevel3Data&#39;, data)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; level2.vue</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(&#39;level2&#39;, &#123;</span><br><span class=\"line\">    props:[&#39;level2Message&#39;],</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            level2Message:this.level2Message</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    template:&#96;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;level2Message&quot; @input&#x3D;&quot;emitLevel2Data(level2Message)&quot;&gt;</span><br><span class=\"line\">    &lt;level3 v-bind&#x3D;&#39;$attrs&#39; v-on&#x3D;&#39;$listenrs&#39;&gt;&lt;&#x2F;level3&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &#96;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        emitLevel2Data(data) &#123;</span><br><span class=\"line\">            this.$emit(&#39;getLevel2Data&#39;, data) </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; level1.vue</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(&#39;level1&#39;, &#123;</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            level3Message:&quot;I am Level3&quot;,</span><br><span class=\"line\">            level2Message:&quot;I am Level2&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    template:&#96;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;这是level1中的内容&lt;&#x2F;h1&gt;</span><br><span class=\"line\">    &lt;level2 :level2Message&#x3D;&quot;level2Message&quot; </span><br><span class=\"line\">            :level3Message&#x3D;&quot;level3Message&quot;</span><br><span class=\"line\">            @getLevel2Data&#x3D;&quot;getLevel2Data()&quot;</span><br><span class=\"line\">            @getLevel3Data&#x3D;&quot;getLevel3Data()&quot;</span><br><span class=\"line\">            &gt;&lt;&#x2F;level2&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &#96;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        getLevel2Data(data) &#123;</span><br><span class=\"line\">            console.log(&#39;这是来自level2的数据&#39;, data)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        getLevel3Data(data) &#123;</span><br><span class=\"line\">            console.log(&#39;这是来自level3的数据&#39;, data)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; App.vue</span><br><span class=\"line\"></span><br><span class=\"line\">var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    template: &#96;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    &lt;level1&gt;&lt;&#x2F;level1&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &#96;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>解析代码：</strong></p>\n<ol>\n<li>level3组件能直接触发<code>getLevel3Data</code>是因为level2组件在调用level3组件时使用v-on绑定了$listeners属性；</li>\n<li>通过v-bind绑定了$attrs属性，level3组件可以直接获取到从level1传下来的props;</li>\n</ol>\n<h2 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h2><p>父组件通过v-model传递值给子组件时，会自动传递一个value的props户型，在子组件中可以通过this.$emit(‘input’,val)自动修改v-model绑定的值。</p>\n<p>```</p>\n<p>未完待续~</p>"},{"title":"重拾java开发技能","date":"2019-12-30T13:37:07.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n最近愈发觉得越想往上走，越不能局限在前端开发的领域，再往上走前后端都是通的，最近在知乎上看到一句话，说是到了架构师甚至专家的层面以后，就没有什么前端架构师或者前端专家和后端架构师、后端专家了，只有前端出身的技术专家，和后端出身的技术专家，越往上越注重人的综合能力，当一个人能够解决一个项目的技术选型、架构等工作后，对于公司或者团队来说，那就是个巨大的宝藏。\n<!-- more -->\n\n## 公司这一年\n最近对于自己的发展有一些迷茫，这一年公司前端的发展可以说是几经转折，我自己呢也一直在摇摆到底是做管理还是做技术，也参加了公司组织的部门经理的答辩，在部门前端的管理工作中也切实的了解到自己在为人处事方面不够圆润。所以目前也算是断了从事管理的念头，更希望能在技术上更进一步，前端目前看来已经不算是我的短板，而我的短板就是只会前端，一直在前端周围打转，其实如果不是看了那篇帖子，以及公司对专家岗位的要求，我可能还会更进一步在前端方向深入研究，但目前看更紧急的应该是补充一下后端的开发知识了，于是上周末开始我就开始了java的学习\n\n## 为什么选择java\n为什么选择java作为后端入门，实话讲好多前端开发应该都会问这个问题，明明有更熟悉的nodejs可以作为后端技能进行扩展，我这里的理由是目前大多数公司的包括外面公司的开发人员大都还是以java作为主要语言作为后端编写的选择，另外前端js中好多的设计也是借鉴或者照搬了java中的一些思想，可以说在学习java过程中也会自然而然的提高对js的理解，更重要的是，java相对于其他语言来说资料也更多，上手也更容易，因为这些因素吧，最终我选择了java作为后端的主要学习目标。\n\n## 怎么学习java\njava上大学的时候实际有系统的学过的，只是实习之后就再也没有使用过，如今9年过去了，java对于我可能也只剩下些零星的记忆，说实话刚一开始怎么学，从哪里学让我都有点无从下手，这里还要感谢一下我后端的开发伙伴，给了我很多很好的建议，看书的话大都是基础的太基础，实战的又经常忽略基础，最终我打算还是以视频教程2.5倍速快速过一遍java基础，然后再深入学习一下springboot框架，最后再进行实战，以此掌握java开发技能。\n\n### 开始学习java\n最终我选择了在B站上看黑马的java基础+实战课程的教学视频，说实话黑马的教学视频还是讲的很仔细的，老师讲的也很有趣，只是一节课10多分钟，只有一个知识点，对于我来说还是有些慢，所以我就开了2.5倍速加快进就这么着看，上周末两天时间，看了130多课，今天的内容记忆不太深刻，趁着不是那么忙又看了30多课，感觉收获还是满满的，接下来的每一天都会看上30课左右，希望自己能在3个月的时间完全上手java开发，相信我可以做到。\n\n## 立个Flag\n从今天起，每天都要把自己学习的进度做个总结，看看这一天自己收获了多少，希望30岁这年我重新起步，迈向更高更好的未来。","source":"_posts/begin-learn-java.md","raw":"---\ntitle: 重拾java开发技能\ndate: 2019-12-30 21:37:07\ncategories: \n\t- 日常记录\ntags: \n\t- java\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n最近愈发觉得越想往上走，越不能局限在前端开发的领域，再往上走前后端都是通的，最近在知乎上看到一句话，说是到了架构师甚至专家的层面以后，就没有什么前端架构师或者前端专家和后端架构师、后端专家了，只有前端出身的技术专家，和后端出身的技术专家，越往上越注重人的综合能力，当一个人能够解决一个项目的技术选型、架构等工作后，对于公司或者团队来说，那就是个巨大的宝藏。\n<!-- more -->\n\n## 公司这一年\n最近对于自己的发展有一些迷茫，这一年公司前端的发展可以说是几经转折，我自己呢也一直在摇摆到底是做管理还是做技术，也参加了公司组织的部门经理的答辩，在部门前端的管理工作中也切实的了解到自己在为人处事方面不够圆润。所以目前也算是断了从事管理的念头，更希望能在技术上更进一步，前端目前看来已经不算是我的短板，而我的短板就是只会前端，一直在前端周围打转，其实如果不是看了那篇帖子，以及公司对专家岗位的要求，我可能还会更进一步在前端方向深入研究，但目前看更紧急的应该是补充一下后端的开发知识了，于是上周末开始我就开始了java的学习\n\n## 为什么选择java\n为什么选择java作为后端入门，实话讲好多前端开发应该都会问这个问题，明明有更熟悉的nodejs可以作为后端技能进行扩展，我这里的理由是目前大多数公司的包括外面公司的开发人员大都还是以java作为主要语言作为后端编写的选择，另外前端js中好多的设计也是借鉴或者照搬了java中的一些思想，可以说在学习java过程中也会自然而然的提高对js的理解，更重要的是，java相对于其他语言来说资料也更多，上手也更容易，因为这些因素吧，最终我选择了java作为后端的主要学习目标。\n\n## 怎么学习java\njava上大学的时候实际有系统的学过的，只是实习之后就再也没有使用过，如今9年过去了，java对于我可能也只剩下些零星的记忆，说实话刚一开始怎么学，从哪里学让我都有点无从下手，这里还要感谢一下我后端的开发伙伴，给了我很多很好的建议，看书的话大都是基础的太基础，实战的又经常忽略基础，最终我打算还是以视频教程2.5倍速快速过一遍java基础，然后再深入学习一下springboot框架，最后再进行实战，以此掌握java开发技能。\n\n### 开始学习java\n最终我选择了在B站上看黑马的java基础+实战课程的教学视频，说实话黑马的教学视频还是讲的很仔细的，老师讲的也很有趣，只是一节课10多分钟，只有一个知识点，对于我来说还是有些慢，所以我就开了2.5倍速加快进就这么着看，上周末两天时间，看了130多课，今天的内容记忆不太深刻，趁着不是那么忙又看了30多课，感觉收获还是满满的，接下来的每一天都会看上30课左右，希望自己能在3个月的时间完全上手java开发，相信我可以做到。\n\n## 立个Flag\n从今天起，每天都要把自己学习的进度做个总结，看看这一天自己收获了多少，希望30岁这年我重新起步，迈向更高更好的未来。","slug":"begin-learn-java","published":1,"updated":"2019-12-30T13:57:21.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4tzdevq000cv0a68q360w2x","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近愈发觉得越想往上走，越不能局限在前端开发的领域，再往上走前后端都是通的，最近在知乎上看到一句话，说是到了架构师甚至专家的层面以后，就没有什么前端架构师或者前端专家和后端架构师、后端专家了，只有前端出身的技术专家，和后端出身的技术专家，越往上越注重人的综合能力，当一个人能够解决一个项目的技术选型、架构等工作后，对于公司或者团队来说，那就是个巨大的宝藏。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"公司这一年\"><a href=\"#公司这一年\" class=\"headerlink\" title=\"公司这一年\"></a>公司这一年</h2><p>最近对于自己的发展有一些迷茫，这一年公司前端的发展可以说是几经转折，我自己呢也一直在摇摆到底是做管理还是做技术，也参加了公司组织的部门经理的答辩，在部门前端的管理工作中也切实的了解到自己在为人处事方面不够圆润。所以目前也算是断了从事管理的念头，更希望能在技术上更进一步，前端目前看来已经不算是我的短板，而我的短板就是只会前端，一直在前端周围打转，其实如果不是看了那篇帖子，以及公司对专家岗位的要求，我可能还会更进一步在前端方向深入研究，但目前看更紧急的应该是补充一下后端的开发知识了，于是上周末开始我就开始了java的学习</p>\n<h2 id=\"为什么选择java\"><a href=\"#为什么选择java\" class=\"headerlink\" title=\"为什么选择java\"></a>为什么选择java</h2><p>为什么选择java作为后端入门，实话讲好多前端开发应该都会问这个问题，明明有更熟悉的nodejs可以作为后端技能进行扩展，我这里的理由是目前大多数公司的包括外面公司的开发人员大都还是以java作为主要语言作为后端编写的选择，另外前端js中好多的设计也是借鉴或者照搬了java中的一些思想，可以说在学习java过程中也会自然而然的提高对js的理解，更重要的是，java相对于其他语言来说资料也更多，上手也更容易，因为这些因素吧，最终我选择了java作为后端的主要学习目标。</p>\n<h2 id=\"怎么学习java\"><a href=\"#怎么学习java\" class=\"headerlink\" title=\"怎么学习java\"></a>怎么学习java</h2><p>java上大学的时候实际有系统的学过的，只是实习之后就再也没有使用过，如今9年过去了，java对于我可能也只剩下些零星的记忆，说实话刚一开始怎么学，从哪里学让我都有点无从下手，这里还要感谢一下我后端的开发伙伴，给了我很多很好的建议，看书的话大都是基础的太基础，实战的又经常忽略基础，最终我打算还是以视频教程2.5倍速快速过一遍java基础，然后再深入学习一下springboot框架，最后再进行实战，以此掌握java开发技能。</p>\n<h3 id=\"开始学习java\"><a href=\"#开始学习java\" class=\"headerlink\" title=\"开始学习java\"></a>开始学习java</h3><p>最终我选择了在B站上看黑马的java基础+实战课程的教学视频，说实话黑马的教学视频还是讲的很仔细的，老师讲的也很有趣，只是一节课10多分钟，只有一个知识点，对于我来说还是有些慢，所以我就开了2.5倍速加快进就这么着看，上周末两天时间，看了130多课，今天的内容记忆不太深刻，趁着不是那么忙又看了30多课，感觉收获还是满满的，接下来的每一天都会看上30课左右，希望自己能在3个月的时间完全上手java开发，相信我可以做到。</p>\n<h2 id=\"立个Flag\"><a href=\"#立个Flag\" class=\"headerlink\" title=\"立个Flag\"></a>立个Flag</h2><p>从今天起，每天都要把自己学习的进度做个总结，看看这一天自己收获了多少，希望30岁这年我重新起步，迈向更高更好的未来。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近愈发觉得越想往上走，越不能局限在前端开发的领域，再往上走前后端都是通的，最近在知乎上看到一句话，说是到了架构师甚至专家的层面以后，就没有什么前端架构师或者前端专家和后端架构师、后端专家了，只有前端出身的技术专家，和后端出身的技术专家，越往上越注重人的综合能力，当一个人能够解决一个项目的技术选型、架构等工作后，对于公司或者团队来说，那就是个巨大的宝藏。</p>","more":"<h2 id=\"公司这一年\"><a href=\"#公司这一年\" class=\"headerlink\" title=\"公司这一年\"></a>公司这一年</h2><p>最近对于自己的发展有一些迷茫，这一年公司前端的发展可以说是几经转折，我自己呢也一直在摇摆到底是做管理还是做技术，也参加了公司组织的部门经理的答辩，在部门前端的管理工作中也切实的了解到自己在为人处事方面不够圆润。所以目前也算是断了从事管理的念头，更希望能在技术上更进一步，前端目前看来已经不算是我的短板，而我的短板就是只会前端，一直在前端周围打转，其实如果不是看了那篇帖子，以及公司对专家岗位的要求，我可能还会更进一步在前端方向深入研究，但目前看更紧急的应该是补充一下后端的开发知识了，于是上周末开始我就开始了java的学习</p>\n<h2 id=\"为什么选择java\"><a href=\"#为什么选择java\" class=\"headerlink\" title=\"为什么选择java\"></a>为什么选择java</h2><p>为什么选择java作为后端入门，实话讲好多前端开发应该都会问这个问题，明明有更熟悉的nodejs可以作为后端技能进行扩展，我这里的理由是目前大多数公司的包括外面公司的开发人员大都还是以java作为主要语言作为后端编写的选择，另外前端js中好多的设计也是借鉴或者照搬了java中的一些思想，可以说在学习java过程中也会自然而然的提高对js的理解，更重要的是，java相对于其他语言来说资料也更多，上手也更容易，因为这些因素吧，最终我选择了java作为后端的主要学习目标。</p>\n<h2 id=\"怎么学习java\"><a href=\"#怎么学习java\" class=\"headerlink\" title=\"怎么学习java\"></a>怎么学习java</h2><p>java上大学的时候实际有系统的学过的，只是实习之后就再也没有使用过，如今9年过去了，java对于我可能也只剩下些零星的记忆，说实话刚一开始怎么学，从哪里学让我都有点无从下手，这里还要感谢一下我后端的开发伙伴，给了我很多很好的建议，看书的话大都是基础的太基础，实战的又经常忽略基础，最终我打算还是以视频教程2.5倍速快速过一遍java基础，然后再深入学习一下springboot框架，最后再进行实战，以此掌握java开发技能。</p>\n<h3 id=\"开始学习java\"><a href=\"#开始学习java\" class=\"headerlink\" title=\"开始学习java\"></a>开始学习java</h3><p>最终我选择了在B站上看黑马的java基础+实战课程的教学视频，说实话黑马的教学视频还是讲的很仔细的，老师讲的也很有趣，只是一节课10多分钟，只有一个知识点，对于我来说还是有些慢，所以我就开了2.5倍速加快进就这么着看，上周末两天时间，看了130多课，今天的内容记忆不太深刻，趁着不是那么忙又看了30多课，感觉收获还是满满的，接下来的每一天都会看上30课左右，希望自己能在3个月的时间完全上手java开发，相信我可以做到。</p>\n<h2 id=\"立个Flag\"><a href=\"#立个Flag\" class=\"headerlink\" title=\"立个Flag\"></a>立个Flag</h2><p>从今天起，每天都要把自己学习的进度做个总结，看看这一天自己收获了多少，希望30岁这年我重新起步，迈向更高更好的未来。</p>"},{"title":"微信的H5兼容方案","date":"2019-12-30T17:37:08.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n最近被公司新来的前端问到了一些微信页面的兼容性问题，因为我做微信开发的经验比较少，被问到了真是感到很尴尬，所以在搜到了解决方案告诉了他之后，我又深入的再网上找了一些微信开发中遇到的兼容问题，特此整理，以留后用。\n<!-- more -->\n\n## 1、ios端兼容input光标的高度\n***bug描述：***\n这个问题只出现在苹果手机上，在安卓手机上显示没有问题，可以说是非常诡异，简单描述一下就是在input输入框聚焦时，光标大小应该跟字号一直，但是在苹果手机上当点击输入的时候，光标的高度和父盒子的高度一样。\n***分析：***\n说来主要是习惯导致的问题，通常我们习惯将height和line-height设置成一样的值，这个时候input光标就会整个变得很大。\n***解决：***\n实际上解决方案也很简单，就是不设置行高，通过padding来控制输入内容与外框的距离。\n```\n// less代码\n.input-x{\n\theight:40px;\n\t// line-height:40px; // 此行注释掉\n\t.input-inline{\n\t\tpadding: 10px 0;\n\t}\n}\n```\n这样做问题就解决了。\n\n## 2、ios端微信h5页面上下滑动会卡顿，页面会有缺失\n***bug描述：***\n没错又是ios端，当页面高度超过一屏，那么上下滑动时就会出现页面卡顿的情况，而且时有伴随内容不能全部显示的情况。\n***分析：***\n这里实际上是浏览器内核解析不同导致的问题，在Andriod设备上，微信调用的是Webkit内核，而ios中是使用了Safari的内核，Safari对于滚动事件（overflow-scrolling）会使用原生的控件。而webkit内核则会创建一个UIScrollView来提供给子layer用以渲染。\n***解决：***\n在做样式重置时，加上下面这句话就能解决这个问题。\n```\n// css代码\n*{\n\t-webkit-overflow-scrolling: touch;\n}\n```\n但是这个方案也有缺陷，就是页面中不能有使用absolute定位的元素，不然布局就错乱了。\n***延伸：***\n-webkit-overflow-scrolling 属性控制元素在移动设备上是否使用滚动回弹效果.\n- auto: 使用普通滚动, 当手指从触摸屏上移开，滚动会立即停止。\n- touch: 使用具有回弹效果的滚动, 当手指从触摸屏上移开，内容会继续保持一段时间的滚动效果。继续滚动的速度和持续的时间和滚动手势的强烈程度成正比。同时也会创建一个新的堆栈上下文。\n\n## 3、ios键盘唤起再收起，页面不会恢复原位\n***bug描述：***\n哎，对的还是ios，问题标题描述的比较清晰了，就是键盘弹出时，页面内容会整体上移，但是收起键盘时本应回归原位的不回去了。—_—|||\n***分析：***\n固定定位的元素，如果元素内input框聚焦的时候会弹出软键盘，软键盘会占用屏幕面积，失去焦点时软键盘消失，但是仍会占用，页面就会不能恢复原状，也就导致input框不能再次输入了。\n***解决：***\n在input失去焦点键盘收起时，写一个监听事件，事例代码如下：\n```\n// vue代码\n<input @blur=\"changeBlur()\"/>\n\n// js代码\nchangeBlur(){\n\tlet ua = navigator.userAgent; // 获取用户代理\n\tlet app = navigator.appVersion; // 获取客户端版本信息\n\tlet isIos = ua.match(/i[^;]+;( U;)? CPU.+Mac OS X/); // 判断是否是Ios设备\n\tif(isIos){\n\t\tsetTimeout(()=>{\n\t\t\tconst scrollHeight = document.documentElement.scrollTop || document.body.scrollTop || 0\n\t\t\twindow.scrollTop(0,Math.max(scrollHeight - 1), 0)\n\t\t},100)\n\t}\n}\n```\n***延伸：***\n在iso的微信开发中，页面元素如果用到了position: fixed进行定位，那么键盘收起时，就会被顶上去，第三方输入法也不例外。\n\n## 4、Android弹出键盘遮挡文本输入框\n***bug描述：***\n刚才说的问题都是Ios端的，实际上Android上也有挺多坑，上面讲到Ios上输入框弹出键盘的问题后，Android中实际也有，只是现象不同；Andriod中弹出键盘后页面不会向上滑动，但是如果输入框在底部的话会直接被挡住。。。\n***分析：***\n很坑，因为Andriod中输入框focus后，并不会向上滑动，如果靠下就会被挡住。。\n***解决：***\n实际上跟Ios上处理差不多的方案，代码如下：\n```\n// vue代码\n<input @blur=\"changeBlur()\"/>\n\n// js代码\nchangeFocus(){\n   let ua = navigator.userAgent;\n\t let app = navigator.appVersion;\n   let isAndroid = u.indexOf('Android') > -1 || u.indexOf('Linux') > -1;\n   if(isAndroid){\n      setTimeout(function() {\n      document.activeElement.scrollIntoViewIfNeeded();\n      document.activeElement.scrollIntoView();\n      }, 500);\n   }\n}\n```\n***扩展***\nElement.scrollIntoView()方法让当前的元素滚动到浏览器窗口的可视区域内。而Element.scrollIntoViewIfNeeded()方法也是用来将不在浏览器窗口的可见区域内的元素滚动到浏览器窗口的可见区域。但如果该元素已经在浏览器窗口的可见区域内，则不会发生滚动\n\n## 5、Vue中路由使用hash模式，分享时Android可分享成功，Ios端分享失败\n***bug描述：***\nIos的问题真的挺多的。。。\n- 在分享页面给A时，没问题，A把链接分享给B的时候就跳转到首页了；\n- 使用Vue-router跳转到第二个页面在分享时候，分享失败；\n以上两个问题在Android上均没有问题。\n***分析：***\njssdk是后端进行签署，前端校验，但是有时跨域，ios是分享以后会自动带上 from=singlemessage&isappinstalled=0 以及其他参数，分享朋友圈参数还不一样，貌似系统不一样参数也不一样，但是每次获取url并不能获取后面这些参数\n***解决：***\n- 可以使用改页面this.$router.push跳转，为window.location.href去跳转，而不使用路由跳转，这样可以使地址栏的地址与当前页的地址一样，可以分享成功\n- 把入口地址保存在本地，等需要获取签名的时候再取出来，注意：sessionStorage.setItem(‘href’,href); 只在刚进入单应用的时候保存！（还没测试，有点low）\n\n## 写在最后\n虽然微信H5方式开发想对来说成本比较低，但是有时候坑开始挺多的，但是微信原生开发又增加了成本，很矛盾，目前能做的就是尽量把踩过的坑都记下来，下次别再跳进去了。","source":"_posts/weichat-h5-compatibility.md","raw":"---\ntitle: 微信的H5兼容方案\ndate: 2019-12-31 1:37:08\ncategories: \n\t- 前端开发\ntags: \n\t- 微信\n\t- 兼容\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n最近被公司新来的前端问到了一些微信页面的兼容性问题，因为我做微信开发的经验比较少，被问到了真是感到很尴尬，所以在搜到了解决方案告诉了他之后，我又深入的再网上找了一些微信开发中遇到的兼容问题，特此整理，以留后用。\n<!-- more -->\n\n## 1、ios端兼容input光标的高度\n***bug描述：***\n这个问题只出现在苹果手机上，在安卓手机上显示没有问题，可以说是非常诡异，简单描述一下就是在input输入框聚焦时，光标大小应该跟字号一直，但是在苹果手机上当点击输入的时候，光标的高度和父盒子的高度一样。\n***分析：***\n说来主要是习惯导致的问题，通常我们习惯将height和line-height设置成一样的值，这个时候input光标就会整个变得很大。\n***解决：***\n实际上解决方案也很简单，就是不设置行高，通过padding来控制输入内容与外框的距离。\n```\n// less代码\n.input-x{\n\theight:40px;\n\t// line-height:40px; // 此行注释掉\n\t.input-inline{\n\t\tpadding: 10px 0;\n\t}\n}\n```\n这样做问题就解决了。\n\n## 2、ios端微信h5页面上下滑动会卡顿，页面会有缺失\n***bug描述：***\n没错又是ios端，当页面高度超过一屏，那么上下滑动时就会出现页面卡顿的情况，而且时有伴随内容不能全部显示的情况。\n***分析：***\n这里实际上是浏览器内核解析不同导致的问题，在Andriod设备上，微信调用的是Webkit内核，而ios中是使用了Safari的内核，Safari对于滚动事件（overflow-scrolling）会使用原生的控件。而webkit内核则会创建一个UIScrollView来提供给子layer用以渲染。\n***解决：***\n在做样式重置时，加上下面这句话就能解决这个问题。\n```\n// css代码\n*{\n\t-webkit-overflow-scrolling: touch;\n}\n```\n但是这个方案也有缺陷，就是页面中不能有使用absolute定位的元素，不然布局就错乱了。\n***延伸：***\n-webkit-overflow-scrolling 属性控制元素在移动设备上是否使用滚动回弹效果.\n- auto: 使用普通滚动, 当手指从触摸屏上移开，滚动会立即停止。\n- touch: 使用具有回弹效果的滚动, 当手指从触摸屏上移开，内容会继续保持一段时间的滚动效果。继续滚动的速度和持续的时间和滚动手势的强烈程度成正比。同时也会创建一个新的堆栈上下文。\n\n## 3、ios键盘唤起再收起，页面不会恢复原位\n***bug描述：***\n哎，对的还是ios，问题标题描述的比较清晰了，就是键盘弹出时，页面内容会整体上移，但是收起键盘时本应回归原位的不回去了。—_—|||\n***分析：***\n固定定位的元素，如果元素内input框聚焦的时候会弹出软键盘，软键盘会占用屏幕面积，失去焦点时软键盘消失，但是仍会占用，页面就会不能恢复原状，也就导致input框不能再次输入了。\n***解决：***\n在input失去焦点键盘收起时，写一个监听事件，事例代码如下：\n```\n// vue代码\n<input @blur=\"changeBlur()\"/>\n\n// js代码\nchangeBlur(){\n\tlet ua = navigator.userAgent; // 获取用户代理\n\tlet app = navigator.appVersion; // 获取客户端版本信息\n\tlet isIos = ua.match(/i[^;]+;( U;)? CPU.+Mac OS X/); // 判断是否是Ios设备\n\tif(isIos){\n\t\tsetTimeout(()=>{\n\t\t\tconst scrollHeight = document.documentElement.scrollTop || document.body.scrollTop || 0\n\t\t\twindow.scrollTop(0,Math.max(scrollHeight - 1), 0)\n\t\t},100)\n\t}\n}\n```\n***延伸：***\n在iso的微信开发中，页面元素如果用到了position: fixed进行定位，那么键盘收起时，就会被顶上去，第三方输入法也不例外。\n\n## 4、Android弹出键盘遮挡文本输入框\n***bug描述：***\n刚才说的问题都是Ios端的，实际上Android上也有挺多坑，上面讲到Ios上输入框弹出键盘的问题后，Android中实际也有，只是现象不同；Andriod中弹出键盘后页面不会向上滑动，但是如果输入框在底部的话会直接被挡住。。。\n***分析：***\n很坑，因为Andriod中输入框focus后，并不会向上滑动，如果靠下就会被挡住。。\n***解决：***\n实际上跟Ios上处理差不多的方案，代码如下：\n```\n// vue代码\n<input @blur=\"changeBlur()\"/>\n\n// js代码\nchangeFocus(){\n   let ua = navigator.userAgent;\n\t let app = navigator.appVersion;\n   let isAndroid = u.indexOf('Android') > -1 || u.indexOf('Linux') > -1;\n   if(isAndroid){\n      setTimeout(function() {\n      document.activeElement.scrollIntoViewIfNeeded();\n      document.activeElement.scrollIntoView();\n      }, 500);\n   }\n}\n```\n***扩展***\nElement.scrollIntoView()方法让当前的元素滚动到浏览器窗口的可视区域内。而Element.scrollIntoViewIfNeeded()方法也是用来将不在浏览器窗口的可见区域内的元素滚动到浏览器窗口的可见区域。但如果该元素已经在浏览器窗口的可见区域内，则不会发生滚动\n\n## 5、Vue中路由使用hash模式，分享时Android可分享成功，Ios端分享失败\n***bug描述：***\nIos的问题真的挺多的。。。\n- 在分享页面给A时，没问题，A把链接分享给B的时候就跳转到首页了；\n- 使用Vue-router跳转到第二个页面在分享时候，分享失败；\n以上两个问题在Android上均没有问题。\n***分析：***\njssdk是后端进行签署，前端校验，但是有时跨域，ios是分享以后会自动带上 from=singlemessage&isappinstalled=0 以及其他参数，分享朋友圈参数还不一样，貌似系统不一样参数也不一样，但是每次获取url并不能获取后面这些参数\n***解决：***\n- 可以使用改页面this.$router.push跳转，为window.location.href去跳转，而不使用路由跳转，这样可以使地址栏的地址与当前页的地址一样，可以分享成功\n- 把入口地址保存在本地，等需要获取签名的时候再取出来，注意：sessionStorage.setItem(‘href’,href); 只在刚进入单应用的时候保存！（还没测试，有点low）\n\n## 写在最后\n虽然微信H5方式开发想对来说成本比较低，但是有时候坑开始挺多的，但是微信原生开发又增加了成本，很矛盾，目前能做的就是尽量把踩过的坑都记下来，下次别再跳进去了。","slug":"weichat-h5-compatibility","published":1,"updated":"2019-12-31T06:46:40.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4tzdevt000gv0a6661hcusg","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近被公司新来的前端问到了一些微信页面的兼容性问题，因为我做微信开发的经验比较少，被问到了真是感到很尴尬，所以在搜到了解决方案告诉了他之后，我又深入的再网上找了一些微信开发中遇到的兼容问题，特此整理，以留后用。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"1、ios端兼容input光标的高度\"><a href=\"#1、ios端兼容input光标的高度\" class=\"headerlink\" title=\"1、ios端兼容input光标的高度\"></a>1、ios端兼容input光标的高度</h2><p><strong><em>bug描述：</em></strong><br>这个问题只出现在苹果手机上，在安卓手机上显示没有问题，可以说是非常诡异，简单描述一下就是在input输入框聚焦时，光标大小应该跟字号一直，但是在苹果手机上当点击输入的时候，光标的高度和父盒子的高度一样。<br><strong><em>分析：</em></strong><br>说来主要是习惯导致的问题，通常我们习惯将height和line-height设置成一样的值，这个时候input光标就会整个变得很大。<br><strong><em>解决：</em></strong><br>实际上解决方案也很简单，就是不设置行高，通过padding来控制输入内容与外框的距离。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; less代码</span><br><span class=\"line\">.input-x&#123;</span><br><span class=\"line\">\theight:40px;</span><br><span class=\"line\">\t&#x2F;&#x2F; line-height:40px; &#x2F;&#x2F; 此行注释掉</span><br><span class=\"line\">\t.input-inline&#123;</span><br><span class=\"line\">\t\tpadding: 10px 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样做问题就解决了。</p>\n<h2 id=\"2、ios端微信h5页面上下滑动会卡顿，页面会有缺失\"><a href=\"#2、ios端微信h5页面上下滑动会卡顿，页面会有缺失\" class=\"headerlink\" title=\"2、ios端微信h5页面上下滑动会卡顿，页面会有缺失\"></a>2、ios端微信h5页面上下滑动会卡顿，页面会有缺失</h2><p><strong><em>bug描述：</em></strong><br>没错又是ios端，当页面高度超过一屏，那么上下滑动时就会出现页面卡顿的情况，而且时有伴随内容不能全部显示的情况。<br><strong><em>分析：</em></strong><br>这里实际上是浏览器内核解析不同导致的问题，在Andriod设备上，微信调用的是Webkit内核，而ios中是使用了Safari的内核，Safari对于滚动事件（overflow-scrolling）会使用原生的控件。而webkit内核则会创建一个UIScrollView来提供给子layer用以渲染。<br><strong><em>解决：</em></strong><br>在做样式重置时，加上下面这句话就能解决这个问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; css代码</span><br><span class=\"line\">*&#123;</span><br><span class=\"line\">\t-webkit-overflow-scrolling: touch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这个方案也有缺陷，就是页面中不能有使用absolute定位的元素，不然布局就错乱了。<br><strong><em>延伸：</em></strong><br>-webkit-overflow-scrolling 属性控制元素在移动设备上是否使用滚动回弹效果.</p>\n<ul>\n<li>auto: 使用普通滚动, 当手指从触摸屏上移开，滚动会立即停止。</li>\n<li>touch: 使用具有回弹效果的滚动, 当手指从触摸屏上移开，内容会继续保持一段时间的滚动效果。继续滚动的速度和持续的时间和滚动手势的强烈程度成正比。同时也会创建一个新的堆栈上下文。</li>\n</ul>\n<h2 id=\"3、ios键盘唤起再收起，页面不会恢复原位\"><a href=\"#3、ios键盘唤起再收起，页面不会恢复原位\" class=\"headerlink\" title=\"3、ios键盘唤起再收起，页面不会恢复原位\"></a>3、ios键盘唤起再收起，页面不会恢复原位</h2><p><strong><em>bug描述：</em></strong><br>哎，对的还是ios，问题标题描述的比较清晰了，就是键盘弹出时，页面内容会整体上移，但是收起键盘时本应回归原位的不回去了。—_—|||<br><strong><em>分析：</em></strong><br>固定定位的元素，如果元素内input框聚焦的时候会弹出软键盘，软键盘会占用屏幕面积，失去焦点时软键盘消失，但是仍会占用，页面就会不能恢复原状，也就导致input框不能再次输入了。<br><strong><em>解决：</em></strong><br>在input失去焦点键盘收起时，写一个监听事件，事例代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; vue代码</span><br><span class=\"line\">&lt;input @blur&#x3D;&quot;changeBlur()&quot;&#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">changeBlur()&#123;</span><br><span class=\"line\">\tlet ua &#x3D; navigator.userAgent; &#x2F;&#x2F; 获取用户代理</span><br><span class=\"line\">\tlet app &#x3D; navigator.appVersion; &#x2F;&#x2F; 获取客户端版本信息</span><br><span class=\"line\">\tlet isIos &#x3D; ua.match(&#x2F;i[^;]+;( U;)? CPU.+Mac OS X&#x2F;); &#x2F;&#x2F; 判断是否是Ios设备</span><br><span class=\"line\">\tif(isIos)&#123;</span><br><span class=\"line\">\t\tsetTimeout(()&#x3D;&gt;&#123;</span><br><span class=\"line\">\t\t\tconst scrollHeight &#x3D; document.documentElement.scrollTop || document.body.scrollTop || 0</span><br><span class=\"line\">\t\t\twindow.scrollTop(0,Math.max(scrollHeight - 1), 0)</span><br><span class=\"line\">\t\t&#125;,100)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>延伸：</em></strong><br>在iso的微信开发中，页面元素如果用到了position: fixed进行定位，那么键盘收起时，就会被顶上去，第三方输入法也不例外。</p>\n<h2 id=\"4、Android弹出键盘遮挡文本输入框\"><a href=\"#4、Android弹出键盘遮挡文本输入框\" class=\"headerlink\" title=\"4、Android弹出键盘遮挡文本输入框\"></a>4、Android弹出键盘遮挡文本输入框</h2><p><strong><em>bug描述：</em></strong><br>刚才说的问题都是Ios端的，实际上Android上也有挺多坑，上面讲到Ios上输入框弹出键盘的问题后，Android中实际也有，只是现象不同；Andriod中弹出键盘后页面不会向上滑动，但是如果输入框在底部的话会直接被挡住。。。<br><strong><em>分析：</em></strong><br>很坑，因为Andriod中输入框focus后，并不会向上滑动，如果靠下就会被挡住。。<br><strong><em>解决：</em></strong><br>实际上跟Ios上处理差不多的方案，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; vue代码</span><br><span class=\"line\">&lt;input @blur&#x3D;&quot;changeBlur()&quot;&#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">changeFocus()&#123;</span><br><span class=\"line\">   let ua &#x3D; navigator.userAgent;</span><br><span class=\"line\">\t let app &#x3D; navigator.appVersion;</span><br><span class=\"line\">   let isAndroid &#x3D; u.indexOf(&#39;Android&#39;) &gt; -1 || u.indexOf(&#39;Linux&#39;) &gt; -1;</span><br><span class=\"line\">   if(isAndroid)&#123;</span><br><span class=\"line\">      setTimeout(function() &#123;</span><br><span class=\"line\">      document.activeElement.scrollIntoViewIfNeeded();</span><br><span class=\"line\">      document.activeElement.scrollIntoView();</span><br><span class=\"line\">      &#125;, 500);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>扩展</em></strong><br>Element.scrollIntoView()方法让当前的元素滚动到浏览器窗口的可视区域内。而Element.scrollIntoViewIfNeeded()方法也是用来将不在浏览器窗口的可见区域内的元素滚动到浏览器窗口的可见区域。但如果该元素已经在浏览器窗口的可见区域内，则不会发生滚动</p>\n<h2 id=\"5、Vue中路由使用hash模式，分享时Android可分享成功，Ios端分享失败\"><a href=\"#5、Vue中路由使用hash模式，分享时Android可分享成功，Ios端分享失败\" class=\"headerlink\" title=\"5、Vue中路由使用hash模式，分享时Android可分享成功，Ios端分享失败\"></a>5、Vue中路由使用hash模式，分享时Android可分享成功，Ios端分享失败</h2><p><strong><em>bug描述：</em></strong><br>Ios的问题真的挺多的。。。</p>\n<ul>\n<li>在分享页面给A时，没问题，A把链接分享给B的时候就跳转到首页了；</li>\n<li>使用Vue-router跳转到第二个页面在分享时候，分享失败；<br>以上两个问题在Android上均没有问题。</li>\n</ul>\n<p><strong><em>分析：</em></strong><br>jssdk是后端进行签署，前端校验，但是有时跨域，ios是分享以后会自动带上 from=singlemessage&amp;isappinstalled=0 以及其他参数，分享朋友圈参数还不一样，貌似系统不一样参数也不一样，但是每次获取url并不能获取后面这些参数<br><strong><em>解决：</em></strong></p>\n<ul>\n<li>可以使用改页面this.$router.push跳转，为window.location.href去跳转，而不使用路由跳转，这样可以使地址栏的地址与当前页的地址一样，可以分享成功</li>\n<li>把入口地址保存在本地，等需要获取签名的时候再取出来，注意：sessionStorage.setItem(‘href’,href); 只在刚进入单应用的时候保存！（还没测试，有点low）</li>\n</ul>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>虽然微信H5方式开发想对来说成本比较低，但是有时候坑开始挺多的，但是微信原生开发又增加了成本，很矛盾，目前能做的就是尽量把踩过的坑都记下来，下次别再跳进去了。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近被公司新来的前端问到了一些微信页面的兼容性问题，因为我做微信开发的经验比较少，被问到了真是感到很尴尬，所以在搜到了解决方案告诉了他之后，我又深入的再网上找了一些微信开发中遇到的兼容问题，特此整理，以留后用。</p>","more":"<h2 id=\"1、ios端兼容input光标的高度\"><a href=\"#1、ios端兼容input光标的高度\" class=\"headerlink\" title=\"1、ios端兼容input光标的高度\"></a>1、ios端兼容input光标的高度</h2><p><strong><em>bug描述：</em></strong><br>这个问题只出现在苹果手机上，在安卓手机上显示没有问题，可以说是非常诡异，简单描述一下就是在input输入框聚焦时，光标大小应该跟字号一直，但是在苹果手机上当点击输入的时候，光标的高度和父盒子的高度一样。<br><strong><em>分析：</em></strong><br>说来主要是习惯导致的问题，通常我们习惯将height和line-height设置成一样的值，这个时候input光标就会整个变得很大。<br><strong><em>解决：</em></strong><br>实际上解决方案也很简单，就是不设置行高，通过padding来控制输入内容与外框的距离。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; less代码</span><br><span class=\"line\">.input-x&#123;</span><br><span class=\"line\">\theight:40px;</span><br><span class=\"line\">\t&#x2F;&#x2F; line-height:40px; &#x2F;&#x2F; 此行注释掉</span><br><span class=\"line\">\t.input-inline&#123;</span><br><span class=\"line\">\t\tpadding: 10px 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样做问题就解决了。</p>\n<h2 id=\"2、ios端微信h5页面上下滑动会卡顿，页面会有缺失\"><a href=\"#2、ios端微信h5页面上下滑动会卡顿，页面会有缺失\" class=\"headerlink\" title=\"2、ios端微信h5页面上下滑动会卡顿，页面会有缺失\"></a>2、ios端微信h5页面上下滑动会卡顿，页面会有缺失</h2><p><strong><em>bug描述：</em></strong><br>没错又是ios端，当页面高度超过一屏，那么上下滑动时就会出现页面卡顿的情况，而且时有伴随内容不能全部显示的情况。<br><strong><em>分析：</em></strong><br>这里实际上是浏览器内核解析不同导致的问题，在Andriod设备上，微信调用的是Webkit内核，而ios中是使用了Safari的内核，Safari对于滚动事件（overflow-scrolling）会使用原生的控件。而webkit内核则会创建一个UIScrollView来提供给子layer用以渲染。<br><strong><em>解决：</em></strong><br>在做样式重置时，加上下面这句话就能解决这个问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; css代码</span><br><span class=\"line\">*&#123;</span><br><span class=\"line\">\t-webkit-overflow-scrolling: touch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这个方案也有缺陷，就是页面中不能有使用absolute定位的元素，不然布局就错乱了。<br><strong><em>延伸：</em></strong><br>-webkit-overflow-scrolling 属性控制元素在移动设备上是否使用滚动回弹效果.</p>\n<ul>\n<li>auto: 使用普通滚动, 当手指从触摸屏上移开，滚动会立即停止。</li>\n<li>touch: 使用具有回弹效果的滚动, 当手指从触摸屏上移开，内容会继续保持一段时间的滚动效果。继续滚动的速度和持续的时间和滚动手势的强烈程度成正比。同时也会创建一个新的堆栈上下文。</li>\n</ul>\n<h2 id=\"3、ios键盘唤起再收起，页面不会恢复原位\"><a href=\"#3、ios键盘唤起再收起，页面不会恢复原位\" class=\"headerlink\" title=\"3、ios键盘唤起再收起，页面不会恢复原位\"></a>3、ios键盘唤起再收起，页面不会恢复原位</h2><p><strong><em>bug描述：</em></strong><br>哎，对的还是ios，问题标题描述的比较清晰了，就是键盘弹出时，页面内容会整体上移，但是收起键盘时本应回归原位的不回去了。—_—|||<br><strong><em>分析：</em></strong><br>固定定位的元素，如果元素内input框聚焦的时候会弹出软键盘，软键盘会占用屏幕面积，失去焦点时软键盘消失，但是仍会占用，页面就会不能恢复原状，也就导致input框不能再次输入了。<br><strong><em>解决：</em></strong><br>在input失去焦点键盘收起时，写一个监听事件，事例代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; vue代码</span><br><span class=\"line\">&lt;input @blur&#x3D;&quot;changeBlur()&quot;&#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">changeBlur()&#123;</span><br><span class=\"line\">\tlet ua &#x3D; navigator.userAgent; &#x2F;&#x2F; 获取用户代理</span><br><span class=\"line\">\tlet app &#x3D; navigator.appVersion; &#x2F;&#x2F; 获取客户端版本信息</span><br><span class=\"line\">\tlet isIos &#x3D; ua.match(&#x2F;i[^;]+;( U;)? CPU.+Mac OS X&#x2F;); &#x2F;&#x2F; 判断是否是Ios设备</span><br><span class=\"line\">\tif(isIos)&#123;</span><br><span class=\"line\">\t\tsetTimeout(()&#x3D;&gt;&#123;</span><br><span class=\"line\">\t\t\tconst scrollHeight &#x3D; document.documentElement.scrollTop || document.body.scrollTop || 0</span><br><span class=\"line\">\t\t\twindow.scrollTop(0,Math.max(scrollHeight - 1), 0)</span><br><span class=\"line\">\t\t&#125;,100)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>延伸：</em></strong><br>在iso的微信开发中，页面元素如果用到了position: fixed进行定位，那么键盘收起时，就会被顶上去，第三方输入法也不例外。</p>\n<h2 id=\"4、Android弹出键盘遮挡文本输入框\"><a href=\"#4、Android弹出键盘遮挡文本输入框\" class=\"headerlink\" title=\"4、Android弹出键盘遮挡文本输入框\"></a>4、Android弹出键盘遮挡文本输入框</h2><p><strong><em>bug描述：</em></strong><br>刚才说的问题都是Ios端的，实际上Android上也有挺多坑，上面讲到Ios上输入框弹出键盘的问题后，Android中实际也有，只是现象不同；Andriod中弹出键盘后页面不会向上滑动，但是如果输入框在底部的话会直接被挡住。。。<br><strong><em>分析：</em></strong><br>很坑，因为Andriod中输入框focus后，并不会向上滑动，如果靠下就会被挡住。。<br><strong><em>解决：</em></strong><br>实际上跟Ios上处理差不多的方案，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; vue代码</span><br><span class=\"line\">&lt;input @blur&#x3D;&quot;changeBlur()&quot;&#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; js代码</span><br><span class=\"line\">changeFocus()&#123;</span><br><span class=\"line\">   let ua &#x3D; navigator.userAgent;</span><br><span class=\"line\">\t let app &#x3D; navigator.appVersion;</span><br><span class=\"line\">   let isAndroid &#x3D; u.indexOf(&#39;Android&#39;) &gt; -1 || u.indexOf(&#39;Linux&#39;) &gt; -1;</span><br><span class=\"line\">   if(isAndroid)&#123;</span><br><span class=\"line\">      setTimeout(function() &#123;</span><br><span class=\"line\">      document.activeElement.scrollIntoViewIfNeeded();</span><br><span class=\"line\">      document.activeElement.scrollIntoView();</span><br><span class=\"line\">      &#125;, 500);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>扩展</em></strong><br>Element.scrollIntoView()方法让当前的元素滚动到浏览器窗口的可视区域内。而Element.scrollIntoViewIfNeeded()方法也是用来将不在浏览器窗口的可见区域内的元素滚动到浏览器窗口的可见区域。但如果该元素已经在浏览器窗口的可见区域内，则不会发生滚动</p>\n<h2 id=\"5、Vue中路由使用hash模式，分享时Android可分享成功，Ios端分享失败\"><a href=\"#5、Vue中路由使用hash模式，分享时Android可分享成功，Ios端分享失败\" class=\"headerlink\" title=\"5、Vue中路由使用hash模式，分享时Android可分享成功，Ios端分享失败\"></a>5、Vue中路由使用hash模式，分享时Android可分享成功，Ios端分享失败</h2><p><strong><em>bug描述：</em></strong><br>Ios的问题真的挺多的。。。</p>\n<ul>\n<li>在分享页面给A时，没问题，A把链接分享给B的时候就跳转到首页了；</li>\n<li>使用Vue-router跳转到第二个页面在分享时候，分享失败；<br>以上两个问题在Android上均没有问题。</li>\n</ul>\n<p><strong><em>分析：</em></strong><br>jssdk是后端进行签署，前端校验，但是有时跨域，ios是分享以后会自动带上 from=singlemessage&amp;isappinstalled=0 以及其他参数，分享朋友圈参数还不一样，貌似系统不一样参数也不一样，但是每次获取url并不能获取后面这些参数<br><strong><em>解决：</em></strong></p>\n<ul>\n<li>可以使用改页面this.$router.push跳转，为window.location.href去跳转，而不使用路由跳转，这样可以使地址栏的地址与当前页的地址一样，可以分享成功</li>\n<li>把入口地址保存在本地，等需要获取签名的时候再取出来，注意：sessionStorage.setItem(‘href’,href); 只在刚进入单应用的时候保存！（还没测试，有点low）</li>\n</ul>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>虽然微信H5方式开发想对来说成本比较低，但是有时候坑开始挺多的，但是微信原生开发又增加了成本，很矛盾，目前能做的就是尽量把踩过的坑都记下来，下次别再跳进去了。</p>"},{"title":"再见2019","date":"2019-12-31T15:50:59.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n不知不觉又是一年，今天是2019年的最后一天，也是我30岁的最后一天，回顾这一年有收获有遗憾。翻出了18年的总结，看到了18年底对于自己19年的规划，现在回过头来看看哪些完成了。\n# 18年底定的计划\n## 学习技术\n### 1. 深入学习客户端开发（全年）\n18年客户端的项目也做了几个，Electron的开发能力经验更多了，之前只是用html+css+js做前端页面的开发，今年又增加了跟vue框架的结合，成功在多个项目中实践，只是一直没有形成规范感觉还是少了一环，原来一直在犹豫Electron到底算不算前端的技术栈之一，后来也算是想明白了，大前端范畴，只要是面向用户的都算是前端该做的范畴，所以Electron当然也算是前端应该掌握的技术栈，20年会继续学习客户端技术，把公司相关规范制定和落地。\n\n### 2. 学习前端自动化测试相关知识（2019年3月前）\n18年关注了前端自动化测试相关的知识，本打算19年好好学习一下，在公司项目中实践，但是今年前后端工作量大增，前端人员的精力有限，加之成本的考虑，并没有开展起来，不过这方面的技能储备已经具备了，年底两次关于前端自动化的测试也将前端自动化的思想普及到了公司前端的团队里，20年是公司强调质量的一年，相信20年前端自动化测试将有机会在公司一些项目中落地\n\n### 3. 学习并掌握TS  （2019年5月前）\n18年就看到了TS将会成为一门比较活的开发语言，目前来说已经具备了做TS开发的技能，只是TS更适合大型的长期的项目，将更好的保障项目的代码质量，快速迭代和小型项目并不是很适合。前端团队里没有开花，没想到居然在开发团队里见到了曙光，感谢开发的小伙伴愿意接受这门前端新技术，相信有一个点采用后看到了优势，后续普及工作将会更好开展。\n\n### 4. 学习并掌握React（2019年7月前）\n18年Vue已经在公司前端全面普及开来，但是市场上React仍然是占据更多的份额，而且RN还能做App开发，所以还是一门必须要掌握的技术，今年看了一本React相关的书，也看了一些相关的视频教程，还参加了公司同事开展的React分享，虽然没有在项目中实际使用过，但是理论知识已经掌握了，可以进行小的Demo开发，20年要用React写一个开源的项目，做到学有所用，学以致用。\n\n### 5. 学习前端持续集成的相关知识（2019年9月前）\n19年公司强调了代码必须走线上构建的要求，前端工程化和自动构建持续集成的工作可以说是工作所迫，这方面的技能已经Get到了，另外令我感到高兴的是，通过对Github-Actions的配置，我的博客可以像提交代码一样提交文章了，而且也实践了自动构建的相关技术，很开心。\n\n### 6. 学习Docker虚拟化技术（ 2019年10月前）\n这个任务没有达成，原本是希望能够通过Docker统一前端开发环境，不过Docker的适用场景还是以部署环境为主，Docker今年貌似热度也降下来了，今年K8s越来越火，不管怎样，持续关注新技术。\n\n## 整理计划\n### 1. 养成写博客的习惯，至少2天一篇，可以是技术博客，也可以是其他。\n今年实在是太忙了，别说两天一篇文章，就连一个月一篇的量都没能达成，不过在年底我终于把博客又重新激活了，希望自己20年能够把博客坚持写下来，很简单，积累自己，打造个人品牌。\n\n### 2. 将常用的方法和功能做成插件，开源给公司使用\n今年4月开始，更多的精力都投在了部门的前端管理工作，说实话也迷茫也难过，这份迷茫终于在19年年底解开了，没能在技能层面有更高的提升，以及在代码层面给公司带来价值我觉得还是有些遗憾，20年希望自己能够在技术上有更大的进步，技术深度上/广度上/架构层面/后端技能都能有长足的进步。\n\n## 读书计划\n### 1. 每周读完一本书，并写一篇读后感\n2019年读了25本书，每读完一本都会写一篇读后感，虽然没能保证每周读一本书，但是基本保证了每两周读完一本书，算是完成了50%的目标吧。20年继续努力，读书使人聪明，因为不聪明所以更要多读书。\n\n## 部门前端计划\n### 加强各设计组前端之间的交流\n> 设计组的出现导致前端交流不畅，2019年加强与各设计组前端的交流，掌握各位前端的技术能力。\n\n没想到一语成第，设计组居然在4月份将前端整个拿出来构成了一个前端组，由我来带，更没想到的是居然在19年年底又解散到项目团队了，这9个月的时间可以说有苦有泪也有甜，前端小伙伴们为了同一个目标，共同努力，尽最大的努力完成公司的业务，可以说为了这个目标，这一年我付出了很多很多，在这方面愧对了家人孩子，虽然最后前端还是拆分了，可以说我能力有限，但是我心里可以说是无愧，希望尽到项目团队里的小伙伴们也能开心工作，迅速成长，虽然不再在一个团队里，但是，我仍是你们的光妈。\n### 前端俱乐部推动\n> 继续每周2小时的兴趣交流，交流形式不限于ppt，要求各自建立技术博客做笔记。\n\n俱乐部的活动最后还是没能坚持下来，大家工作比较忙也好，我自己的原因也好，确实没能坚持下来，20年还是希望能够将俱乐部活动组织起来，算是大家交流的机会也好，帮助大家开阔眼界也好，20年一定要再做起来！\n### 进行梯队划分建设\n> 前端今年人数明显增多，但各层级职责并没有区分，19年抽时间进行梯队建设。\n\n19年前端从14人增加到了34人，可以说人数上翻翻了，随着负责人制的执行，梯队建设的工作算是完成了50%，但是能力提升的工作可以说还是做的不到位，应该有机会成长为高工的小伙伴没能升上去，这我有一定的责任，20年虽然团队不再，但是希望你们都坚持努力学习，迈向更高的台阶。\n### 引入前端工程化工具和思想\n> 目前前端工程化已经非常成熟，希望能将成熟的技术和工具引入。\n\n19年，随着Vue的普及和熟练，模块化开发组件化开发的思想已经深入到每一个前端的心中，现在大家都知道该如何使用这些技术和工具，希望大家能不仅仅局限在用也能了解了解其中原理，至少对常用的配置有所了解。\n### 提升整体前端开发的能力\n> 目前整体前端开发能力还相对较弱，19年通过培训等方式提升整体前端开发的能力\n\n19年能力提升的工作做的太少了，没什么好说的，希望20年这方面工作能够投入更多的精力，让更多的小伙伴成长起来，让我们一起加油吧。\n\n## 生活目标\n### 每天陪孩子读书一小时\n跟上面的工作和个人目标比起来，这个任务可以说完成度0%，这也是我觉得愧对家人的地方，为了工作，对家人的关注少了很多很多，以至于桐桐晚上都不愿意跟我一起睡觉，20年我要好好对她，做个好的爸爸，孩子明年就三岁了，去到幼儿园会认识更多的朋友，希望她会跟她的小伙伴说，我有个爱我的爸爸。\n### 减肥\n减肥这件事可以说是真的对我来说太难了，看着自己马上破三位数（kg）的体重，心里无限难过，每次媳妇儿问我啥时候去健身，我都感到像被闪电击中了似的，办了健身卡被人嘲笑成了洗澡卡，20年，减不到150斤我就。。。。\n\n# 写在最后\n19年太多的遗憾，太多的后悔莫及，当然也有一些成绩和自我肯定，19年已经过去了，希望在20年，能够成为一个更优秀的人。\n![WechatIMG6.jpeg](https://i.loli.net/2019/12/31/jMlO5sPxFyhIkai.jpg)\n感谢我可爱的同事，年底收到了礼物真的很开心。","source":"_posts/GoodBye-2019.md","raw":"---\ntitle: 再见2019\ndate: 2019-12-31 23:50:59\ncategories: \n\t- 年终总结\ntags: \n\t- 总结\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n不知不觉又是一年，今天是2019年的最后一天，也是我30岁的最后一天，回顾这一年有收获有遗憾。翻出了18年的总结，看到了18年底对于自己19年的规划，现在回过头来看看哪些完成了。\n# 18年底定的计划\n## 学习技术\n### 1. 深入学习客户端开发（全年）\n18年客户端的项目也做了几个，Electron的开发能力经验更多了，之前只是用html+css+js做前端页面的开发，今年又增加了跟vue框架的结合，成功在多个项目中实践，只是一直没有形成规范感觉还是少了一环，原来一直在犹豫Electron到底算不算前端的技术栈之一，后来也算是想明白了，大前端范畴，只要是面向用户的都算是前端该做的范畴，所以Electron当然也算是前端应该掌握的技术栈，20年会继续学习客户端技术，把公司相关规范制定和落地。\n\n### 2. 学习前端自动化测试相关知识（2019年3月前）\n18年关注了前端自动化测试相关的知识，本打算19年好好学习一下，在公司项目中实践，但是今年前后端工作量大增，前端人员的精力有限，加之成本的考虑，并没有开展起来，不过这方面的技能储备已经具备了，年底两次关于前端自动化的测试也将前端自动化的思想普及到了公司前端的团队里，20年是公司强调质量的一年，相信20年前端自动化测试将有机会在公司一些项目中落地\n\n### 3. 学习并掌握TS  （2019年5月前）\n18年就看到了TS将会成为一门比较活的开发语言，目前来说已经具备了做TS开发的技能，只是TS更适合大型的长期的项目，将更好的保障项目的代码质量，快速迭代和小型项目并不是很适合。前端团队里没有开花，没想到居然在开发团队里见到了曙光，感谢开发的小伙伴愿意接受这门前端新技术，相信有一个点采用后看到了优势，后续普及工作将会更好开展。\n\n### 4. 学习并掌握React（2019年7月前）\n18年Vue已经在公司前端全面普及开来，但是市场上React仍然是占据更多的份额，而且RN还能做App开发，所以还是一门必须要掌握的技术，今年看了一本React相关的书，也看了一些相关的视频教程，还参加了公司同事开展的React分享，虽然没有在项目中实际使用过，但是理论知识已经掌握了，可以进行小的Demo开发，20年要用React写一个开源的项目，做到学有所用，学以致用。\n\n### 5. 学习前端持续集成的相关知识（2019年9月前）\n19年公司强调了代码必须走线上构建的要求，前端工程化和自动构建持续集成的工作可以说是工作所迫，这方面的技能已经Get到了，另外令我感到高兴的是，通过对Github-Actions的配置，我的博客可以像提交代码一样提交文章了，而且也实践了自动构建的相关技术，很开心。\n\n### 6. 学习Docker虚拟化技术（ 2019年10月前）\n这个任务没有达成，原本是希望能够通过Docker统一前端开发环境，不过Docker的适用场景还是以部署环境为主，Docker今年貌似热度也降下来了，今年K8s越来越火，不管怎样，持续关注新技术。\n\n## 整理计划\n### 1. 养成写博客的习惯，至少2天一篇，可以是技术博客，也可以是其他。\n今年实在是太忙了，别说两天一篇文章，就连一个月一篇的量都没能达成，不过在年底我终于把博客又重新激活了，希望自己20年能够把博客坚持写下来，很简单，积累自己，打造个人品牌。\n\n### 2. 将常用的方法和功能做成插件，开源给公司使用\n今年4月开始，更多的精力都投在了部门的前端管理工作，说实话也迷茫也难过，这份迷茫终于在19年年底解开了，没能在技能层面有更高的提升，以及在代码层面给公司带来价值我觉得还是有些遗憾，20年希望自己能够在技术上有更大的进步，技术深度上/广度上/架构层面/后端技能都能有长足的进步。\n\n## 读书计划\n### 1. 每周读完一本书，并写一篇读后感\n2019年读了25本书，每读完一本都会写一篇读后感，虽然没能保证每周读一本书，但是基本保证了每两周读完一本书，算是完成了50%的目标吧。20年继续努力，读书使人聪明，因为不聪明所以更要多读书。\n\n## 部门前端计划\n### 加强各设计组前端之间的交流\n> 设计组的出现导致前端交流不畅，2019年加强与各设计组前端的交流，掌握各位前端的技术能力。\n\n没想到一语成第，设计组居然在4月份将前端整个拿出来构成了一个前端组，由我来带，更没想到的是居然在19年年底又解散到项目团队了，这9个月的时间可以说有苦有泪也有甜，前端小伙伴们为了同一个目标，共同努力，尽最大的努力完成公司的业务，可以说为了这个目标，这一年我付出了很多很多，在这方面愧对了家人孩子，虽然最后前端还是拆分了，可以说我能力有限，但是我心里可以说是无愧，希望尽到项目团队里的小伙伴们也能开心工作，迅速成长，虽然不再在一个团队里，但是，我仍是你们的光妈。\n### 前端俱乐部推动\n> 继续每周2小时的兴趣交流，交流形式不限于ppt，要求各自建立技术博客做笔记。\n\n俱乐部的活动最后还是没能坚持下来，大家工作比较忙也好，我自己的原因也好，确实没能坚持下来，20年还是希望能够将俱乐部活动组织起来，算是大家交流的机会也好，帮助大家开阔眼界也好，20年一定要再做起来！\n### 进行梯队划分建设\n> 前端今年人数明显增多，但各层级职责并没有区分，19年抽时间进行梯队建设。\n\n19年前端从14人增加到了34人，可以说人数上翻翻了，随着负责人制的执行，梯队建设的工作算是完成了50%，但是能力提升的工作可以说还是做的不到位，应该有机会成长为高工的小伙伴没能升上去，这我有一定的责任，20年虽然团队不再，但是希望你们都坚持努力学习，迈向更高的台阶。\n### 引入前端工程化工具和思想\n> 目前前端工程化已经非常成熟，希望能将成熟的技术和工具引入。\n\n19年，随着Vue的普及和熟练，模块化开发组件化开发的思想已经深入到每一个前端的心中，现在大家都知道该如何使用这些技术和工具，希望大家能不仅仅局限在用也能了解了解其中原理，至少对常用的配置有所了解。\n### 提升整体前端开发的能力\n> 目前整体前端开发能力还相对较弱，19年通过培训等方式提升整体前端开发的能力\n\n19年能力提升的工作做的太少了，没什么好说的，希望20年这方面工作能够投入更多的精力，让更多的小伙伴成长起来，让我们一起加油吧。\n\n## 生活目标\n### 每天陪孩子读书一小时\n跟上面的工作和个人目标比起来，这个任务可以说完成度0%，这也是我觉得愧对家人的地方，为了工作，对家人的关注少了很多很多，以至于桐桐晚上都不愿意跟我一起睡觉，20年我要好好对她，做个好的爸爸，孩子明年就三岁了，去到幼儿园会认识更多的朋友，希望她会跟她的小伙伴说，我有个爱我的爸爸。\n### 减肥\n减肥这件事可以说是真的对我来说太难了，看着自己马上破三位数（kg）的体重，心里无限难过，每次媳妇儿问我啥时候去健身，我都感到像被闪电击中了似的，办了健身卡被人嘲笑成了洗澡卡，20年，减不到150斤我就。。。。\n\n# 写在最后\n19年太多的遗憾，太多的后悔莫及，当然也有一些成绩和自我肯定，19年已经过去了，希望在20年，能够成为一个更优秀的人。\n![WechatIMG6.jpeg](https://i.loli.net/2019/12/31/jMlO5sPxFyhIkai.jpg)\n感谢我可爱的同事，年底收到了礼物真的很开心。","slug":"GoodBye-2019","published":1,"updated":"2019-12-31T13:59:55.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4tzdewu0016v0a6hxmy5ap5","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>不知不觉又是一年，今天是2019年的最后一天，也是我30岁的最后一天，回顾这一年有收获有遗憾。翻出了18年的总结，看到了18年底对于自己19年的规划，现在回过头来看看哪些完成了。</p>\n<h1 id=\"18年底定的计划\"><a href=\"#18年底定的计划\" class=\"headerlink\" title=\"18年底定的计划\"></a>18年底定的计划</h1><h2 id=\"学习技术\"><a href=\"#学习技术\" class=\"headerlink\" title=\"学习技术\"></a>学习技术</h2><h3 id=\"1-深入学习客户端开发（全年）\"><a href=\"#1-深入学习客户端开发（全年）\" class=\"headerlink\" title=\"1. 深入学习客户端开发（全年）\"></a>1. 深入学习客户端开发（全年）</h3><p>18年客户端的项目也做了几个，Electron的开发能力经验更多了，之前只是用html+css+js做前端页面的开发，今年又增加了跟vue框架的结合，成功在多个项目中实践，只是一直没有形成规范感觉还是少了一环，原来一直在犹豫Electron到底算不算前端的技术栈之一，后来也算是想明白了，大前端范畴，只要是面向用户的都算是前端该做的范畴，所以Electron当然也算是前端应该掌握的技术栈，20年会继续学习客户端技术，把公司相关规范制定和落地。</p>\n<h3 id=\"2-学习前端自动化测试相关知识（2019年3月前）\"><a href=\"#2-学习前端自动化测试相关知识（2019年3月前）\" class=\"headerlink\" title=\"2. 学习前端自动化测试相关知识（2019年3月前）\"></a>2. 学习前端自动化测试相关知识（2019年3月前）</h3><p>18年关注了前端自动化测试相关的知识，本打算19年好好学习一下，在公司项目中实践，但是今年前后端工作量大增，前端人员的精力有限，加之成本的考虑，并没有开展起来，不过这方面的技能储备已经具备了，年底两次关于前端自动化的测试也将前端自动化的思想普及到了公司前端的团队里，20年是公司强调质量的一年，相信20年前端自动化测试将有机会在公司一些项目中落地</p>\n<h3 id=\"3-学习并掌握TS-（2019年5月前）\"><a href=\"#3-学习并掌握TS-（2019年5月前）\" class=\"headerlink\" title=\"3. 学习并掌握TS  （2019年5月前）\"></a>3. 学习并掌握TS  （2019年5月前）</h3><p>18年就看到了TS将会成为一门比较活的开发语言，目前来说已经具备了做TS开发的技能，只是TS更适合大型的长期的项目，将更好的保障项目的代码质量，快速迭代和小型项目并不是很适合。前端团队里没有开花，没想到居然在开发团队里见到了曙光，感谢开发的小伙伴愿意接受这门前端新技术，相信有一个点采用后看到了优势，后续普及工作将会更好开展。</p>\n<h3 id=\"4-学习并掌握React（2019年7月前）\"><a href=\"#4-学习并掌握React（2019年7月前）\" class=\"headerlink\" title=\"4. 学习并掌握React（2019年7月前）\"></a>4. 学习并掌握React（2019年7月前）</h3><p>18年Vue已经在公司前端全面普及开来，但是市场上React仍然是占据更多的份额，而且RN还能做App开发，所以还是一门必须要掌握的技术，今年看了一本React相关的书，也看了一些相关的视频教程，还参加了公司同事开展的React分享，虽然没有在项目中实际使用过，但是理论知识已经掌握了，可以进行小的Demo开发，20年要用React写一个开源的项目，做到学有所用，学以致用。</p>\n<h3 id=\"5-学习前端持续集成的相关知识（2019年9月前）\"><a href=\"#5-学习前端持续集成的相关知识（2019年9月前）\" class=\"headerlink\" title=\"5. 学习前端持续集成的相关知识（2019年9月前）\"></a>5. 学习前端持续集成的相关知识（2019年9月前）</h3><p>19年公司强调了代码必须走线上构建的要求，前端工程化和自动构建持续集成的工作可以说是工作所迫，这方面的技能已经Get到了，另外令我感到高兴的是，通过对Github-Actions的配置，我的博客可以像提交代码一样提交文章了，而且也实践了自动构建的相关技术，很开心。</p>\n<h3 id=\"6-学习Docker虚拟化技术（-2019年10月前）\"><a href=\"#6-学习Docker虚拟化技术（-2019年10月前）\" class=\"headerlink\" title=\"6. 学习Docker虚拟化技术（ 2019年10月前）\"></a>6. 学习Docker虚拟化技术（ 2019年10月前）</h3><p>这个任务没有达成，原本是希望能够通过Docker统一前端开发环境，不过Docker的适用场景还是以部署环境为主，Docker今年貌似热度也降下来了，今年K8s越来越火，不管怎样，持续关注新技术。</p>\n<h2 id=\"整理计划\"><a href=\"#整理计划\" class=\"headerlink\" title=\"整理计划\"></a>整理计划</h2><h3 id=\"1-养成写博客的习惯，至少2天一篇，可以是技术博客，也可以是其他。\"><a href=\"#1-养成写博客的习惯，至少2天一篇，可以是技术博客，也可以是其他。\" class=\"headerlink\" title=\"1. 养成写博客的习惯，至少2天一篇，可以是技术博客，也可以是其他。\"></a>1. 养成写博客的习惯，至少2天一篇，可以是技术博客，也可以是其他。</h3><p>今年实在是太忙了，别说两天一篇文章，就连一个月一篇的量都没能达成，不过在年底我终于把博客又重新激活了，希望自己20年能够把博客坚持写下来，很简单，积累自己，打造个人品牌。</p>\n<h3 id=\"2-将常用的方法和功能做成插件，开源给公司使用\"><a href=\"#2-将常用的方法和功能做成插件，开源给公司使用\" class=\"headerlink\" title=\"2. 将常用的方法和功能做成插件，开源给公司使用\"></a>2. 将常用的方法和功能做成插件，开源给公司使用</h3><p>今年4月开始，更多的精力都投在了部门的前端管理工作，说实话也迷茫也难过，这份迷茫终于在19年年底解开了，没能在技能层面有更高的提升，以及在代码层面给公司带来价值我觉得还是有些遗憾，20年希望自己能够在技术上有更大的进步，技术深度上/广度上/架构层面/后端技能都能有长足的进步。</p>\n<h2 id=\"读书计划\"><a href=\"#读书计划\" class=\"headerlink\" title=\"读书计划\"></a>读书计划</h2><h3 id=\"1-每周读完一本书，并写一篇读后感\"><a href=\"#1-每周读完一本书，并写一篇读后感\" class=\"headerlink\" title=\"1. 每周读完一本书，并写一篇读后感\"></a>1. 每周读完一本书，并写一篇读后感</h3><p>2019年读了25本书，每读完一本都会写一篇读后感，虽然没能保证每周读一本书，但是基本保证了每两周读完一本书，算是完成了50%的目标吧。20年继续努力，读书使人聪明，因为不聪明所以更要多读书。</p>\n<h2 id=\"部门前端计划\"><a href=\"#部门前端计划\" class=\"headerlink\" title=\"部门前端计划\"></a>部门前端计划</h2><h3 id=\"加强各设计组前端之间的交流\"><a href=\"#加强各设计组前端之间的交流\" class=\"headerlink\" title=\"加强各设计组前端之间的交流\"></a>加强各设计组前端之间的交流</h3><blockquote>\n<p>设计组的出现导致前端交流不畅，2019年加强与各设计组前端的交流，掌握各位前端的技术能力。</p>\n</blockquote>\n<p>没想到一语成第，设计组居然在4月份将前端整个拿出来构成了一个前端组，由我来带，更没想到的是居然在19年年底又解散到项目团队了，这9个月的时间可以说有苦有泪也有甜，前端小伙伴们为了同一个目标，共同努力，尽最大的努力完成公司的业务，可以说为了这个目标，这一年我付出了很多很多，在这方面愧对了家人孩子，虽然最后前端还是拆分了，可以说我能力有限，但是我心里可以说是无愧，希望尽到项目团队里的小伙伴们也能开心工作，迅速成长，虽然不再在一个团队里，但是，我仍是你们的光妈。</p>\n<h3 id=\"前端俱乐部推动\"><a href=\"#前端俱乐部推动\" class=\"headerlink\" title=\"前端俱乐部推动\"></a>前端俱乐部推动</h3><blockquote>\n<p>继续每周2小时的兴趣交流，交流形式不限于ppt，要求各自建立技术博客做笔记。</p>\n</blockquote>\n<p>俱乐部的活动最后还是没能坚持下来，大家工作比较忙也好，我自己的原因也好，确实没能坚持下来，20年还是希望能够将俱乐部活动组织起来，算是大家交流的机会也好，帮助大家开阔眼界也好，20年一定要再做起来！</p>\n<h3 id=\"进行梯队划分建设\"><a href=\"#进行梯队划分建设\" class=\"headerlink\" title=\"进行梯队划分建设\"></a>进行梯队划分建设</h3><blockquote>\n<p>前端今年人数明显增多，但各层级职责并没有区分，19年抽时间进行梯队建设。</p>\n</blockquote>\n<p>19年前端从14人增加到了34人，可以说人数上翻翻了，随着负责人制的执行，梯队建设的工作算是完成了50%，但是能力提升的工作可以说还是做的不到位，应该有机会成长为高工的小伙伴没能升上去，这我有一定的责任，20年虽然团队不再，但是希望你们都坚持努力学习，迈向更高的台阶。</p>\n<h3 id=\"引入前端工程化工具和思想\"><a href=\"#引入前端工程化工具和思想\" class=\"headerlink\" title=\"引入前端工程化工具和思想\"></a>引入前端工程化工具和思想</h3><blockquote>\n<p>目前前端工程化已经非常成熟，希望能将成熟的技术和工具引入。</p>\n</blockquote>\n<p>19年，随着Vue的普及和熟练，模块化开发组件化开发的思想已经深入到每一个前端的心中，现在大家都知道该如何使用这些技术和工具，希望大家能不仅仅局限在用也能了解了解其中原理，至少对常用的配置有所了解。</p>\n<h3 id=\"提升整体前端开发的能力\"><a href=\"#提升整体前端开发的能力\" class=\"headerlink\" title=\"提升整体前端开发的能力\"></a>提升整体前端开发的能力</h3><blockquote>\n<p>目前整体前端开发能力还相对较弱，19年通过培训等方式提升整体前端开发的能力</p>\n</blockquote>\n<p>19年能力提升的工作做的太少了，没什么好说的，希望20年这方面工作能够投入更多的精力，让更多的小伙伴成长起来，让我们一起加油吧。</p>\n<h2 id=\"生活目标\"><a href=\"#生活目标\" class=\"headerlink\" title=\"生活目标\"></a>生活目标</h2><h3 id=\"每天陪孩子读书一小时\"><a href=\"#每天陪孩子读书一小时\" class=\"headerlink\" title=\"每天陪孩子读书一小时\"></a>每天陪孩子读书一小时</h3><p>跟上面的工作和个人目标比起来，这个任务可以说完成度0%，这也是我觉得愧对家人的地方，为了工作，对家人的关注少了很多很多，以至于桐桐晚上都不愿意跟我一起睡觉，20年我要好好对她，做个好的爸爸，孩子明年就三岁了，去到幼儿园会认识更多的朋友，希望她会跟她的小伙伴说，我有个爱我的爸爸。</p>\n<h3 id=\"减肥\"><a href=\"#减肥\" class=\"headerlink\" title=\"减肥\"></a>减肥</h3><p>减肥这件事可以说是真的对我来说太难了，看着自己马上破三位数（kg）的体重，心里无限难过，每次媳妇儿问我啥时候去健身，我都感到像被闪电击中了似的，办了健身卡被人嘲笑成了洗澡卡，20年，减不到150斤我就。。。。</p>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>19年太多的遗憾，太多的后悔莫及，当然也有一些成绩和自我肯定，19年已经过去了，希望在20年，能够成为一个更优秀的人。<br><img src=\"https://i.loli.net/2019/12/31/jMlO5sPxFyhIkai.jpg\" alt=\"WechatIMG6.jpeg\"><br>感谢我可爱的同事，年底收到了礼物真的很开心。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>不知不觉又是一年，今天是2019年的最后一天，也是我30岁的最后一天，回顾这一年有收获有遗憾。翻出了18年的总结，看到了18年底对于自己19年的规划，现在回过头来看看哪些完成了。</p>\n<h1 id=\"18年底定的计划\"><a href=\"#18年底定的计划\" class=\"headerlink\" title=\"18年底定的计划\"></a>18年底定的计划</h1><h2 id=\"学习技术\"><a href=\"#学习技术\" class=\"headerlink\" title=\"学习技术\"></a>学习技术</h2><h3 id=\"1-深入学习客户端开发（全年）\"><a href=\"#1-深入学习客户端开发（全年）\" class=\"headerlink\" title=\"1. 深入学习客户端开发（全年）\"></a>1. 深入学习客户端开发（全年）</h3><p>18年客户端的项目也做了几个，Electron的开发能力经验更多了，之前只是用html+css+js做前端页面的开发，今年又增加了跟vue框架的结合，成功在多个项目中实践，只是一直没有形成规范感觉还是少了一环，原来一直在犹豫Electron到底算不算前端的技术栈之一，后来也算是想明白了，大前端范畴，只要是面向用户的都算是前端该做的范畴，所以Electron当然也算是前端应该掌握的技术栈，20年会继续学习客户端技术，把公司相关规范制定和落地。</p>\n<h3 id=\"2-学习前端自动化测试相关知识（2019年3月前）\"><a href=\"#2-学习前端自动化测试相关知识（2019年3月前）\" class=\"headerlink\" title=\"2. 学习前端自动化测试相关知识（2019年3月前）\"></a>2. 学习前端自动化测试相关知识（2019年3月前）</h3><p>18年关注了前端自动化测试相关的知识，本打算19年好好学习一下，在公司项目中实践，但是今年前后端工作量大增，前端人员的精力有限，加之成本的考虑，并没有开展起来，不过这方面的技能储备已经具备了，年底两次关于前端自动化的测试也将前端自动化的思想普及到了公司前端的团队里，20年是公司强调质量的一年，相信20年前端自动化测试将有机会在公司一些项目中落地</p>\n<h3 id=\"3-学习并掌握TS-（2019年5月前）\"><a href=\"#3-学习并掌握TS-（2019年5月前）\" class=\"headerlink\" title=\"3. 学习并掌握TS  （2019年5月前）\"></a>3. 学习并掌握TS  （2019年5月前）</h3><p>18年就看到了TS将会成为一门比较活的开发语言，目前来说已经具备了做TS开发的技能，只是TS更适合大型的长期的项目，将更好的保障项目的代码质量，快速迭代和小型项目并不是很适合。前端团队里没有开花，没想到居然在开发团队里见到了曙光，感谢开发的小伙伴愿意接受这门前端新技术，相信有一个点采用后看到了优势，后续普及工作将会更好开展。</p>\n<h3 id=\"4-学习并掌握React（2019年7月前）\"><a href=\"#4-学习并掌握React（2019年7月前）\" class=\"headerlink\" title=\"4. 学习并掌握React（2019年7月前）\"></a>4. 学习并掌握React（2019年7月前）</h3><p>18年Vue已经在公司前端全面普及开来，但是市场上React仍然是占据更多的份额，而且RN还能做App开发，所以还是一门必须要掌握的技术，今年看了一本React相关的书，也看了一些相关的视频教程，还参加了公司同事开展的React分享，虽然没有在项目中实际使用过，但是理论知识已经掌握了，可以进行小的Demo开发，20年要用React写一个开源的项目，做到学有所用，学以致用。</p>\n<h3 id=\"5-学习前端持续集成的相关知识（2019年9月前）\"><a href=\"#5-学习前端持续集成的相关知识（2019年9月前）\" class=\"headerlink\" title=\"5. 学习前端持续集成的相关知识（2019年9月前）\"></a>5. 学习前端持续集成的相关知识（2019年9月前）</h3><p>19年公司强调了代码必须走线上构建的要求，前端工程化和自动构建持续集成的工作可以说是工作所迫，这方面的技能已经Get到了，另外令我感到高兴的是，通过对Github-Actions的配置，我的博客可以像提交代码一样提交文章了，而且也实践了自动构建的相关技术，很开心。</p>\n<h3 id=\"6-学习Docker虚拟化技术（-2019年10月前）\"><a href=\"#6-学习Docker虚拟化技术（-2019年10月前）\" class=\"headerlink\" title=\"6. 学习Docker虚拟化技术（ 2019年10月前）\"></a>6. 学习Docker虚拟化技术（ 2019年10月前）</h3><p>这个任务没有达成，原本是希望能够通过Docker统一前端开发环境，不过Docker的适用场景还是以部署环境为主，Docker今年貌似热度也降下来了，今年K8s越来越火，不管怎样，持续关注新技术。</p>\n<h2 id=\"整理计划\"><a href=\"#整理计划\" class=\"headerlink\" title=\"整理计划\"></a>整理计划</h2><h3 id=\"1-养成写博客的习惯，至少2天一篇，可以是技术博客，也可以是其他。\"><a href=\"#1-养成写博客的习惯，至少2天一篇，可以是技术博客，也可以是其他。\" class=\"headerlink\" title=\"1. 养成写博客的习惯，至少2天一篇，可以是技术博客，也可以是其他。\"></a>1. 养成写博客的习惯，至少2天一篇，可以是技术博客，也可以是其他。</h3><p>今年实在是太忙了，别说两天一篇文章，就连一个月一篇的量都没能达成，不过在年底我终于把博客又重新激活了，希望自己20年能够把博客坚持写下来，很简单，积累自己，打造个人品牌。</p>\n<h3 id=\"2-将常用的方法和功能做成插件，开源给公司使用\"><a href=\"#2-将常用的方法和功能做成插件，开源给公司使用\" class=\"headerlink\" title=\"2. 将常用的方法和功能做成插件，开源给公司使用\"></a>2. 将常用的方法和功能做成插件，开源给公司使用</h3><p>今年4月开始，更多的精力都投在了部门的前端管理工作，说实话也迷茫也难过，这份迷茫终于在19年年底解开了，没能在技能层面有更高的提升，以及在代码层面给公司带来价值我觉得还是有些遗憾，20年希望自己能够在技术上有更大的进步，技术深度上/广度上/架构层面/后端技能都能有长足的进步。</p>\n<h2 id=\"读书计划\"><a href=\"#读书计划\" class=\"headerlink\" title=\"读书计划\"></a>读书计划</h2><h3 id=\"1-每周读完一本书，并写一篇读后感\"><a href=\"#1-每周读完一本书，并写一篇读后感\" class=\"headerlink\" title=\"1. 每周读完一本书，并写一篇读后感\"></a>1. 每周读完一本书，并写一篇读后感</h3><p>2019年读了25本书，每读完一本都会写一篇读后感，虽然没能保证每周读一本书，但是基本保证了每两周读完一本书，算是完成了50%的目标吧。20年继续努力，读书使人聪明，因为不聪明所以更要多读书。</p>\n<h2 id=\"部门前端计划\"><a href=\"#部门前端计划\" class=\"headerlink\" title=\"部门前端计划\"></a>部门前端计划</h2><h3 id=\"加强各设计组前端之间的交流\"><a href=\"#加强各设计组前端之间的交流\" class=\"headerlink\" title=\"加强各设计组前端之间的交流\"></a>加强各设计组前端之间的交流</h3><blockquote>\n<p>设计组的出现导致前端交流不畅，2019年加强与各设计组前端的交流，掌握各位前端的技术能力。</p>\n</blockquote>\n<p>没想到一语成第，设计组居然在4月份将前端整个拿出来构成了一个前端组，由我来带，更没想到的是居然在19年年底又解散到项目团队了，这9个月的时间可以说有苦有泪也有甜，前端小伙伴们为了同一个目标，共同努力，尽最大的努力完成公司的业务，可以说为了这个目标，这一年我付出了很多很多，在这方面愧对了家人孩子，虽然最后前端还是拆分了，可以说我能力有限，但是我心里可以说是无愧，希望尽到项目团队里的小伙伴们也能开心工作，迅速成长，虽然不再在一个团队里，但是，我仍是你们的光妈。</p>\n<h3 id=\"前端俱乐部推动\"><a href=\"#前端俱乐部推动\" class=\"headerlink\" title=\"前端俱乐部推动\"></a>前端俱乐部推动</h3><blockquote>\n<p>继续每周2小时的兴趣交流，交流形式不限于ppt，要求各自建立技术博客做笔记。</p>\n</blockquote>\n<p>俱乐部的活动最后还是没能坚持下来，大家工作比较忙也好，我自己的原因也好，确实没能坚持下来，20年还是希望能够将俱乐部活动组织起来，算是大家交流的机会也好，帮助大家开阔眼界也好，20年一定要再做起来！</p>\n<h3 id=\"进行梯队划分建设\"><a href=\"#进行梯队划分建设\" class=\"headerlink\" title=\"进行梯队划分建设\"></a>进行梯队划分建设</h3><blockquote>\n<p>前端今年人数明显增多，但各层级职责并没有区分，19年抽时间进行梯队建设。</p>\n</blockquote>\n<p>19年前端从14人增加到了34人，可以说人数上翻翻了，随着负责人制的执行，梯队建设的工作算是完成了50%，但是能力提升的工作可以说还是做的不到位，应该有机会成长为高工的小伙伴没能升上去，这我有一定的责任，20年虽然团队不再，但是希望你们都坚持努力学习，迈向更高的台阶。</p>\n<h3 id=\"引入前端工程化工具和思想\"><a href=\"#引入前端工程化工具和思想\" class=\"headerlink\" title=\"引入前端工程化工具和思想\"></a>引入前端工程化工具和思想</h3><blockquote>\n<p>目前前端工程化已经非常成熟，希望能将成熟的技术和工具引入。</p>\n</blockquote>\n<p>19年，随着Vue的普及和熟练，模块化开发组件化开发的思想已经深入到每一个前端的心中，现在大家都知道该如何使用这些技术和工具，希望大家能不仅仅局限在用也能了解了解其中原理，至少对常用的配置有所了解。</p>\n<h3 id=\"提升整体前端开发的能力\"><a href=\"#提升整体前端开发的能力\" class=\"headerlink\" title=\"提升整体前端开发的能力\"></a>提升整体前端开发的能力</h3><blockquote>\n<p>目前整体前端开发能力还相对较弱，19年通过培训等方式提升整体前端开发的能力</p>\n</blockquote>\n<p>19年能力提升的工作做的太少了，没什么好说的，希望20年这方面工作能够投入更多的精力，让更多的小伙伴成长起来，让我们一起加油吧。</p>\n<h2 id=\"生活目标\"><a href=\"#生活目标\" class=\"headerlink\" title=\"生活目标\"></a>生活目标</h2><h3 id=\"每天陪孩子读书一小时\"><a href=\"#每天陪孩子读书一小时\" class=\"headerlink\" title=\"每天陪孩子读书一小时\"></a>每天陪孩子读书一小时</h3><p>跟上面的工作和个人目标比起来，这个任务可以说完成度0%，这也是我觉得愧对家人的地方，为了工作，对家人的关注少了很多很多，以至于桐桐晚上都不愿意跟我一起睡觉，20年我要好好对她，做个好的爸爸，孩子明年就三岁了，去到幼儿园会认识更多的朋友，希望她会跟她的小伙伴说，我有个爱我的爸爸。</p>\n<h3 id=\"减肥\"><a href=\"#减肥\" class=\"headerlink\" title=\"减肥\"></a>减肥</h3><p>减肥这件事可以说是真的对我来说太难了，看着自己马上破三位数（kg）的体重，心里无限难过，每次媳妇儿问我啥时候去健身，我都感到像被闪电击中了似的，办了健身卡被人嘲笑成了洗澡卡，20年，减不到150斤我就。。。。</p>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>19年太多的遗憾，太多的后悔莫及，当然也有一些成绩和自我肯定，19年已经过去了，希望在20年，能够成为一个更优秀的人。<br><img src=\"https://i.loli.net/2019/12/31/jMlO5sPxFyhIkai.jpg\" alt=\"WechatIMG6.jpeg\"><br>感谢我可爱的同事，年底收到了礼物真的很开心。</p>\n"},{"title":"基于 GitLab CI/CD 的自动化构建、发布实践","date":"2019-12-31T08:22:22.000Z","_content":"> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n公司于去年开始代码版本管理从SVN迁移到了Git，采用的GitLab程序做管理，但是自动构建采用的是Jekins，最近在给博客做自动构建的时候了解到的了Github的Actions，我就在想，是不是GitLab也有自己的自动构建能力，因为之前在参与项目的时候也看到GitLab上有CI/CD相关的内容，但是没有仔细的去看，趁这次机会就一起研究一下。\n<!-- more -->\n\n## 说一下目前公司的构建和发布流程\n1、***手动构建时代***：开发人员在测试需要验证环境的时候，在本地执行打包构建命令，然后将包放到服务器上，整个过程30分钟左右。\n2、***自动构建时代***目前公司的构建是要在Jekins中，首先是在Jekins中配置拉去代码的仓库地址和代码分支，写好构建的脚本，在需要构建时候进行构建，一次配置后构建全程只需要点一下构建时间长度跟项目代码需要下载的依赖时间有关，通常不超过5分钟，需要注意的是要在构建前同步一下代码版本\n***划重点***\n在原来的手动构建时代，代码是以开发本地的代码为准，代码版本很可能跟最新的代码有出入，而且依赖于开发的电脑设备，如果他请假了，那么就GG了；另外通过一次配置后整个构建的时间从30分钟降到了5分钟，一次节省25分钟，那么一个项目周期下节省的工时就非常可观了。\n\n## 为什要使用GitLab CI/CD进行构建\n这里实际上没有太大的必要将公司的Jekins替换为GitLab的CI/CD进行自动构建，但是呢，因为公司本身采用的就是GitLab作为代码仓库管理代码，它本身又提供了CI/CD的功能，本着多学一点是一点的原则，我就花点时间研究一下它。\n\n## 什么是 GitLab CI/CD\n下面我就要开始把我了解到的GitLab CI/CD的使用方式说一下，从零开始搭建GitLab CI/CD。\n### 1. 简要介绍 GitLab CI/CD\n代码提交到GitLab上后，满足指定条件之后会触发pipeline进行自动化构建、发布。\n***pipeline***可以理解为构建任务，里面可以包含多个流程，比如下载依赖、运行测试、编译、部署。\n那么pipeline什么时候触发，分为几个流程，每个流程做什么，需要在项目的***.gitlab-ci.yml***文件中的定义。\n这点呢跟Jekins里面实际上做的也是同样的事，在线下开发做构建时候也是做这些事，只是通过脚本之后这些事都可以交给计算机做了。\n\n### 2. GitLab CI/CD 整体流程\n- GitLab CI/CD 的 pipeline 具体流程和操作在 .gitlab-ci.yml 文件中申明。\n- 触发 pipeline 后，由 GitLab Runner 根据  .gitlab-ci.yml 文件运行。\n- 运行结束后将返回至 GitLab 系统。\n\n#### 2.1 .gitlab-ci.yml 文件\n.gitlab-ci.yml 文件是一个申明式文件，用于定义 GitLab CI/CD 流程分为几个阶段，每个阶段分别干什么。\n\n关于具体干什么、怎么干，主要使用命令行和脚本操作，稍后会在实践部分做细致的介绍。\n\n如果涉及一些逻辑的话，会使用脚本（shell）。\n\n#### 2.2 GitLab Runner\nGitLab Runner 是 CI 的执行环境，负责执行 gitlab-ci.yml 文件，并将结果返回给 GitLab 系统。Runner 具体可以有多种形式，docker、虚拟机或 shell，在注册 runner 时选定方式。实际上就是运行脚本的容器环境。\n\n## 3. 从零搭建一个 GitLab CI/CD 的基本步骤\n上面介绍了一些GitLab构建的主要环节和名词概念，接下来我将给大家介绍一下如何从零搭建一个GitLab CI/CD，一起体验一把GitLab CI/CD的整个流程。\n### 3.1 新建一个 GitLab 项目\n我这用的是公司的自有仓库，各位可以在开源GitLab上创建自己的项目\n### 3.2 配置Runner\nGitLab 提供了一些共享的Runner，我们可以不处理Runner，这里可以理解为，它提供了一些现成的脚本运行环境，不需要我们从头配置运行环境，so sweet～\n### 3.3 新建 .gitlab-ci.yml 文件\n1. 拉取项目到本地\n2. 在项目根目录新建 .gitlab-ci.yml 文件\n3. 提交 .gitlab-ci.yml 文件\n4. 在项目的 CI/CD 中，可以看到 CI/CD 的运行情况\n这个过程应该没人不会吧，没技术含量的我们简单一提，实际上最重要的就是.gitlab-ci.yml文件中要怎么去写，示例说明文件如下：\n```\n// .gitlab-ci.yml 示例说明\n\nimage: node\n# 定义 stages\nstages:\n  - build\n  - test\n# 定义 job\n build 阶段:\n  stage: build\n  script:\n    - echo \"build stage\"\n# 定义 job\n发布到测试环境:\n  stage: test\n  script:\n    - echo \"test stage\"\n```\n\n## GitLab CI/CD 实践\n在实践部分，这里着重介绍 GitLab Runner 和 .gitlab-ci.yml 文件，主要的流程及遇到的问题和解决方案包含在 .gitlab-ci.yml 文件的介绍过程中。\n\n### 1. GitLab Runner\nGitLab Runner 一般由 GitLab 系统维护者管理，配置后，同类项目可以共享，一般不需要进行修改。这里不进行具体介绍，主要介绍下使用过程中的注意点，具体使用可参考 GitLab Runner 文档。（https://docs.gitlab.com.cn/runner/）\n\n#### 1.1 GitLab Runner 使用流程\n1. 下载 GitLab Runner\n2. 注册 GitLab Runner\n3. 使用 GitLab Runner\n\n#### 1.2 GitLab Runner 注意点\n在使用 Runner 的过程中，我们遇到了一些问题，下面简要介绍问题及解决方案，不做具体介绍。\n\n##### 1.2.1 配置 Runner 后，push 代码，出发了 pipeline，但一直处于Pending状态\n\n错误信息是：\n```\nThis job is stuck, because you don’t have any active runners that can run this job\n```\n注册的 Runner，默认情况下，不会运用没有 `tag` 的 job，可以在 Settings→CI/CD→Runners Settings，去掉 Runner untagged jobs 即可。\n\n##### 1.2.2 GitLab Runner 的类型\n有三种类型的 Runner，\n- Shared Runners 在整个系统所有项目都可以使用\n- Group Runners 注册后，同一个项目下的不同代码库共享\n- Specific Runners 需要给项目单独配置，使用 Specific Runners 注意考虑是否需要关闭 Shared Runners、和 Group Runners。\n\n##### 1.2.3 在 GitLab CI 中使用 docker\n如果部署使用的是docker方式，那么在部署时需要在 GitLab CI/CD 中使用 docker 打镜像发布。可以参考 Building Docker images with GitLab CI/CD（https://docs.gitlab.com/ee/ci/docker/using_docker_build.html）\n\n##### 1.2.4 在 GitLab CI/CD 中访问 Runner 宿主机目录\n我们使用的 Runner executor 是 Dokcer，在 Dokcer volumes 中配置需要访问的目录。\n\n### 2. .gitlab-ci.yml 文件\n.gitlab-ci.yml 详细的用法，可参考 GitLab CI/CD Pipeline Configuration Reference 文档（https://docs.gitlab.com/ee/ci/yaml/README.html）\n\n#### 2.1 .gitlab-ci.yml 文件结构介绍\n- `image` 是执行 CI/CD 依赖的 Docker 基础镜像。镜像中有 Node、Yarn、Dalp（内部 rsync 工具）。\n- `stages` 中定义了我们的 pipeline 分为以下几个过程:\n  1. 下载依赖阶段 pre_build\n  2. 构建阶段 build\n  3. 发布阶段 deploy\n- `stage` 申明当前的阶段，在 stages 中使用\n- `variables` 用于定义变量\n- `before_script` 执行 script 前的操作\n- `script` 当前 stage 需要执行的操作\n- `changes` 指定 stage 触发条件\n- `refs` 指定 stage 触发的分支\n\n下面具体看一下我们这个.gitlab-ci.yml文件实际的样子\n```\nimage: registry.thunisoft.com/gitlab-ci/node:v1.8\n\nvariables:\n  # $CI_PROJECT_PATH  ：项目id,用于项目唯一区分本项目与其它项目\n  # $CI_PROJECT_DIR   ：本地项目路径\n  # $PROCESS_PATH     ：临时文件目录(包括日志和一些临时文件)\n  NODE_MODULES_PATH: /runner-cache/frontend/$CI_PROJECT_PATH/$CI_BUILD_REF_NAME/node_modules\n\nstages:\n  - pre_build # 下载依赖阶段\n  - build # 构建阶段\n  - deploy # 测试发布阶段\n\n# 下载依赖:\n  before_script: # 下载依赖前准备脚本\n    # 无 node_modules 文件时，新建 node_modules 文件\n    - /bin/bash ./ci/mkdir.sh $NODE_MODULES_PATH\n    # 软链 node_modules 到宿主机\n    - ln -s $NODE_MODULES_PATH .\n    - cd webpack@lixuguang-project\n\n  stage: pre_build\n  script:\n    - echo \"npm install\"\n    - npm install  --network-timeout 60000 # 安装依赖\n  only:\n    changes:\n      - webpack@lixuguang-project/package.json\n    refs:\n      - master\n      - ci\n\n# 构建:\n  stage: build\n  variables:\n    CI_COMMIT_BEFORE_SHA_PATH: /mnt/gv0/gitlab-runner-cache/$CI_PROJECT_PATH\n    CI_COMMIT_BEFORE_SHA_FILE_NAME: $CI_BUILD_REF_NAME.sh\n    CI_COMMIT_BEFORE_SHA_FILE: /mnt/gv0/gitlab-runner-cache/$CI_PROJECT_PATH/$CI_BUILD_REF_NAME.sh\n  before_script:\n    # 建存此次 CI CI_COMMIT_SHA 的文件\n    - /bin/bash ./ci/mkfile.sh $CI_COMMIT_BEFORE_SHA_PATH $CI_COMMIT_BEFORE_SHA_FILE_NAME\n    # 软链 node_modules 到宿主机\n    - ln -s $NODE_MODULES_PATH .\n    - rm -rf web/share/*\n    - cd webpack@lixuguang-projects\n  script:\n    # 缓存上次ci\n    - source $CI_COMMIT_BEFORE_SHA_FILE\n    - echo \"CI_COMMIT_BEFORE_SHA=$CI_COMMIT_SHA\" > $CI_COMMIT_BEFORE_SHA_FILE\n    - python3 ../ci/build.py   # 编译\n    - /bin/bash ../ci/commit.sh   # 提交编译结果\n  only:\n    changes:\n      - www_src/**/*\n    refs:\n      - master\n      - ci\n\n# 测试发布:\n  stage: deploy\n  variables:\n    PROCESS_PATH: /mnt/gv0/gitlab-runner-cache/deploy/process/$CI_JOB_ID  # 目录不要换，用于日志服务器获取日志展示\n  script:\n    - mkdir $PROCESS_PATH # 建立发布临时路径，存放发布配置中间文件和结果日志用\n    - dplt $CI_PROJECT_DIR/.deploy_test.yml $CI_PROJECT_PATH $CI_PROJECT_DIR/web/ $PROCESS_PATH\n    # dplt 发布yml配置\n    - echo \"发布完成，错误日志查看http://172.18.78.11:8089/log?path=\"$PROCESS_PATH\n    - echo `ls $PROCESS_PATH/*.log`\n  only:\n    changes:\n      - web/**/*\n    refs:\n      - test\n```\n\n#### 2.2 下载依赖阶段（pre_build stage）\n下载依赖的方案是：当 package.json 文件发生变化时，触发 pre_build stage，执行 npm install。下载的 node_modules 放在宿主机下，执行时通过软链获取依赖。\n\n#### 2.3 构建阶段（build stage）\n构建阶段，分为 3 部分\n1. diff 文件变化\n2. 前端 build\n3. commit build 后结果\n\n##### 2.3.1 diff 文件变化\n每次 CI 时，将当前 CI commit SHA（CI_COMMIT_SHA 变量）存在文件中，存为 CI_COMMIT_BEFORE_SHA 变量， diff 时，git diff 当前 CI 与上次 commit SHA 的变化。\n\n##### 2.3.2 前端 build\n根据 git diff 的变化情况，确定本次需要打包的内容。\n\n##### 2.3.3 commit 打包后生成的 HTML 文件\n在 GitLab CI/CD 提交代码时，使用 Git 凭证存储，提交打包后的 HTML 文件。Git 凭证存储细节可参考凭证存储文档(https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8)\n\n#### 2.4 发布阶段（deploy stage）\n发布阶段，使用内部的 rsync 工具 dplt 将打包后的 HTML 文件部署。dplt 可配置集群、机器列表。\n\n## 写在最后\n以上就是GitLab CI/CD的整个理论到实践的全部过程，实现之后你就可以解放双手了，是不是超爽。\n\n## 参考资料\n持续集成是什么？(http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html)\n\n什么是 CI/CD？(https://www.redhat.com/zh/topics/devops/what-is-ci-cd)\n\nGitLab Docs(https://docs.gitlab.com/)\n\nIntroduction to CI/CD with GitLab(https://docs.gitlab.com/ee/ci/introduction/)\n\n用 GitLab CI 进行持续集成(https://scarletsky.github.io/2016/07/29/use-gitlab-ci-for-continuous-integration/)\n\n如何实现前端工程的持续集成与持续部署？(https://www.zhihu.com/question/60194439)\n\n基于 GitLab CI 的前端工程CI/CD实践(https://github.com/giscafer/front-end-manual/issues/27)","source":"_posts/gitlab-cicd.md","raw":"---\ntitle: 基于 GitLab CI/CD 的自动化构建、发布实践\ndate: 2019-12-31 16:22:22\ncategories: \n\t- 前端工程化\ntags: \n\t- GitLab\n\t- CI/CD\n\t- 自动构建\n---\n> 作者：李旭光\n> 引用请标明出处\n\n\n# 前言\n\n公司于去年开始代码版本管理从SVN迁移到了Git，采用的GitLab程序做管理，但是自动构建采用的是Jekins，最近在给博客做自动构建的时候了解到的了Github的Actions，我就在想，是不是GitLab也有自己的自动构建能力，因为之前在参与项目的时候也看到GitLab上有CI/CD相关的内容，但是没有仔细的去看，趁这次机会就一起研究一下。\n<!-- more -->\n\n## 说一下目前公司的构建和发布流程\n1、***手动构建时代***：开发人员在测试需要验证环境的时候，在本地执行打包构建命令，然后将包放到服务器上，整个过程30分钟左右。\n2、***自动构建时代***目前公司的构建是要在Jekins中，首先是在Jekins中配置拉去代码的仓库地址和代码分支，写好构建的脚本，在需要构建时候进行构建，一次配置后构建全程只需要点一下构建时间长度跟项目代码需要下载的依赖时间有关，通常不超过5分钟，需要注意的是要在构建前同步一下代码版本\n***划重点***\n在原来的手动构建时代，代码是以开发本地的代码为准，代码版本很可能跟最新的代码有出入，而且依赖于开发的电脑设备，如果他请假了，那么就GG了；另外通过一次配置后整个构建的时间从30分钟降到了5分钟，一次节省25分钟，那么一个项目周期下节省的工时就非常可观了。\n\n## 为什要使用GitLab CI/CD进行构建\n这里实际上没有太大的必要将公司的Jekins替换为GitLab的CI/CD进行自动构建，但是呢，因为公司本身采用的就是GitLab作为代码仓库管理代码，它本身又提供了CI/CD的功能，本着多学一点是一点的原则，我就花点时间研究一下它。\n\n## 什么是 GitLab CI/CD\n下面我就要开始把我了解到的GitLab CI/CD的使用方式说一下，从零开始搭建GitLab CI/CD。\n### 1. 简要介绍 GitLab CI/CD\n代码提交到GitLab上后，满足指定条件之后会触发pipeline进行自动化构建、发布。\n***pipeline***可以理解为构建任务，里面可以包含多个流程，比如下载依赖、运行测试、编译、部署。\n那么pipeline什么时候触发，分为几个流程，每个流程做什么，需要在项目的***.gitlab-ci.yml***文件中的定义。\n这点呢跟Jekins里面实际上做的也是同样的事，在线下开发做构建时候也是做这些事，只是通过脚本之后这些事都可以交给计算机做了。\n\n### 2. GitLab CI/CD 整体流程\n- GitLab CI/CD 的 pipeline 具体流程和操作在 .gitlab-ci.yml 文件中申明。\n- 触发 pipeline 后，由 GitLab Runner 根据  .gitlab-ci.yml 文件运行。\n- 运行结束后将返回至 GitLab 系统。\n\n#### 2.1 .gitlab-ci.yml 文件\n.gitlab-ci.yml 文件是一个申明式文件，用于定义 GitLab CI/CD 流程分为几个阶段，每个阶段分别干什么。\n\n关于具体干什么、怎么干，主要使用命令行和脚本操作，稍后会在实践部分做细致的介绍。\n\n如果涉及一些逻辑的话，会使用脚本（shell）。\n\n#### 2.2 GitLab Runner\nGitLab Runner 是 CI 的执行环境，负责执行 gitlab-ci.yml 文件，并将结果返回给 GitLab 系统。Runner 具体可以有多种形式，docker、虚拟机或 shell，在注册 runner 时选定方式。实际上就是运行脚本的容器环境。\n\n## 3. 从零搭建一个 GitLab CI/CD 的基本步骤\n上面介绍了一些GitLab构建的主要环节和名词概念，接下来我将给大家介绍一下如何从零搭建一个GitLab CI/CD，一起体验一把GitLab CI/CD的整个流程。\n### 3.1 新建一个 GitLab 项目\n我这用的是公司的自有仓库，各位可以在开源GitLab上创建自己的项目\n### 3.2 配置Runner\nGitLab 提供了一些共享的Runner，我们可以不处理Runner，这里可以理解为，它提供了一些现成的脚本运行环境，不需要我们从头配置运行环境，so sweet～\n### 3.3 新建 .gitlab-ci.yml 文件\n1. 拉取项目到本地\n2. 在项目根目录新建 .gitlab-ci.yml 文件\n3. 提交 .gitlab-ci.yml 文件\n4. 在项目的 CI/CD 中，可以看到 CI/CD 的运行情况\n这个过程应该没人不会吧，没技术含量的我们简单一提，实际上最重要的就是.gitlab-ci.yml文件中要怎么去写，示例说明文件如下：\n```\n// .gitlab-ci.yml 示例说明\n\nimage: node\n# 定义 stages\nstages:\n  - build\n  - test\n# 定义 job\n build 阶段:\n  stage: build\n  script:\n    - echo \"build stage\"\n# 定义 job\n发布到测试环境:\n  stage: test\n  script:\n    - echo \"test stage\"\n```\n\n## GitLab CI/CD 实践\n在实践部分，这里着重介绍 GitLab Runner 和 .gitlab-ci.yml 文件，主要的流程及遇到的问题和解决方案包含在 .gitlab-ci.yml 文件的介绍过程中。\n\n### 1. GitLab Runner\nGitLab Runner 一般由 GitLab 系统维护者管理，配置后，同类项目可以共享，一般不需要进行修改。这里不进行具体介绍，主要介绍下使用过程中的注意点，具体使用可参考 GitLab Runner 文档。（https://docs.gitlab.com.cn/runner/）\n\n#### 1.1 GitLab Runner 使用流程\n1. 下载 GitLab Runner\n2. 注册 GitLab Runner\n3. 使用 GitLab Runner\n\n#### 1.2 GitLab Runner 注意点\n在使用 Runner 的过程中，我们遇到了一些问题，下面简要介绍问题及解决方案，不做具体介绍。\n\n##### 1.2.1 配置 Runner 后，push 代码，出发了 pipeline，但一直处于Pending状态\n\n错误信息是：\n```\nThis job is stuck, because you don’t have any active runners that can run this job\n```\n注册的 Runner，默认情况下，不会运用没有 `tag` 的 job，可以在 Settings→CI/CD→Runners Settings，去掉 Runner untagged jobs 即可。\n\n##### 1.2.2 GitLab Runner 的类型\n有三种类型的 Runner，\n- Shared Runners 在整个系统所有项目都可以使用\n- Group Runners 注册后，同一个项目下的不同代码库共享\n- Specific Runners 需要给项目单独配置，使用 Specific Runners 注意考虑是否需要关闭 Shared Runners、和 Group Runners。\n\n##### 1.2.3 在 GitLab CI 中使用 docker\n如果部署使用的是docker方式，那么在部署时需要在 GitLab CI/CD 中使用 docker 打镜像发布。可以参考 Building Docker images with GitLab CI/CD（https://docs.gitlab.com/ee/ci/docker/using_docker_build.html）\n\n##### 1.2.4 在 GitLab CI/CD 中访问 Runner 宿主机目录\n我们使用的 Runner executor 是 Dokcer，在 Dokcer volumes 中配置需要访问的目录。\n\n### 2. .gitlab-ci.yml 文件\n.gitlab-ci.yml 详细的用法，可参考 GitLab CI/CD Pipeline Configuration Reference 文档（https://docs.gitlab.com/ee/ci/yaml/README.html）\n\n#### 2.1 .gitlab-ci.yml 文件结构介绍\n- `image` 是执行 CI/CD 依赖的 Docker 基础镜像。镜像中有 Node、Yarn、Dalp（内部 rsync 工具）。\n- `stages` 中定义了我们的 pipeline 分为以下几个过程:\n  1. 下载依赖阶段 pre_build\n  2. 构建阶段 build\n  3. 发布阶段 deploy\n- `stage` 申明当前的阶段，在 stages 中使用\n- `variables` 用于定义变量\n- `before_script` 执行 script 前的操作\n- `script` 当前 stage 需要执行的操作\n- `changes` 指定 stage 触发条件\n- `refs` 指定 stage 触发的分支\n\n下面具体看一下我们这个.gitlab-ci.yml文件实际的样子\n```\nimage: registry.thunisoft.com/gitlab-ci/node:v1.8\n\nvariables:\n  # $CI_PROJECT_PATH  ：项目id,用于项目唯一区分本项目与其它项目\n  # $CI_PROJECT_DIR   ：本地项目路径\n  # $PROCESS_PATH     ：临时文件目录(包括日志和一些临时文件)\n  NODE_MODULES_PATH: /runner-cache/frontend/$CI_PROJECT_PATH/$CI_BUILD_REF_NAME/node_modules\n\nstages:\n  - pre_build # 下载依赖阶段\n  - build # 构建阶段\n  - deploy # 测试发布阶段\n\n# 下载依赖:\n  before_script: # 下载依赖前准备脚本\n    # 无 node_modules 文件时，新建 node_modules 文件\n    - /bin/bash ./ci/mkdir.sh $NODE_MODULES_PATH\n    # 软链 node_modules 到宿主机\n    - ln -s $NODE_MODULES_PATH .\n    - cd webpack@lixuguang-project\n\n  stage: pre_build\n  script:\n    - echo \"npm install\"\n    - npm install  --network-timeout 60000 # 安装依赖\n  only:\n    changes:\n      - webpack@lixuguang-project/package.json\n    refs:\n      - master\n      - ci\n\n# 构建:\n  stage: build\n  variables:\n    CI_COMMIT_BEFORE_SHA_PATH: /mnt/gv0/gitlab-runner-cache/$CI_PROJECT_PATH\n    CI_COMMIT_BEFORE_SHA_FILE_NAME: $CI_BUILD_REF_NAME.sh\n    CI_COMMIT_BEFORE_SHA_FILE: /mnt/gv0/gitlab-runner-cache/$CI_PROJECT_PATH/$CI_BUILD_REF_NAME.sh\n  before_script:\n    # 建存此次 CI CI_COMMIT_SHA 的文件\n    - /bin/bash ./ci/mkfile.sh $CI_COMMIT_BEFORE_SHA_PATH $CI_COMMIT_BEFORE_SHA_FILE_NAME\n    # 软链 node_modules 到宿主机\n    - ln -s $NODE_MODULES_PATH .\n    - rm -rf web/share/*\n    - cd webpack@lixuguang-projects\n  script:\n    # 缓存上次ci\n    - source $CI_COMMIT_BEFORE_SHA_FILE\n    - echo \"CI_COMMIT_BEFORE_SHA=$CI_COMMIT_SHA\" > $CI_COMMIT_BEFORE_SHA_FILE\n    - python3 ../ci/build.py   # 编译\n    - /bin/bash ../ci/commit.sh   # 提交编译结果\n  only:\n    changes:\n      - www_src/**/*\n    refs:\n      - master\n      - ci\n\n# 测试发布:\n  stage: deploy\n  variables:\n    PROCESS_PATH: /mnt/gv0/gitlab-runner-cache/deploy/process/$CI_JOB_ID  # 目录不要换，用于日志服务器获取日志展示\n  script:\n    - mkdir $PROCESS_PATH # 建立发布临时路径，存放发布配置中间文件和结果日志用\n    - dplt $CI_PROJECT_DIR/.deploy_test.yml $CI_PROJECT_PATH $CI_PROJECT_DIR/web/ $PROCESS_PATH\n    # dplt 发布yml配置\n    - echo \"发布完成，错误日志查看http://172.18.78.11:8089/log?path=\"$PROCESS_PATH\n    - echo `ls $PROCESS_PATH/*.log`\n  only:\n    changes:\n      - web/**/*\n    refs:\n      - test\n```\n\n#### 2.2 下载依赖阶段（pre_build stage）\n下载依赖的方案是：当 package.json 文件发生变化时，触发 pre_build stage，执行 npm install。下载的 node_modules 放在宿主机下，执行时通过软链获取依赖。\n\n#### 2.3 构建阶段（build stage）\n构建阶段，分为 3 部分\n1. diff 文件变化\n2. 前端 build\n3. commit build 后结果\n\n##### 2.3.1 diff 文件变化\n每次 CI 时，将当前 CI commit SHA（CI_COMMIT_SHA 变量）存在文件中，存为 CI_COMMIT_BEFORE_SHA 变量， diff 时，git diff 当前 CI 与上次 commit SHA 的变化。\n\n##### 2.3.2 前端 build\n根据 git diff 的变化情况，确定本次需要打包的内容。\n\n##### 2.3.3 commit 打包后生成的 HTML 文件\n在 GitLab CI/CD 提交代码时，使用 Git 凭证存储，提交打包后的 HTML 文件。Git 凭证存储细节可参考凭证存储文档(https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8)\n\n#### 2.4 发布阶段（deploy stage）\n发布阶段，使用内部的 rsync 工具 dplt 将打包后的 HTML 文件部署。dplt 可配置集群、机器列表。\n\n## 写在最后\n以上就是GitLab CI/CD的整个理论到实践的全部过程，实现之后你就可以解放双手了，是不是超爽。\n\n## 参考资料\n持续集成是什么？(http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html)\n\n什么是 CI/CD？(https://www.redhat.com/zh/topics/devops/what-is-ci-cd)\n\nGitLab Docs(https://docs.gitlab.com/)\n\nIntroduction to CI/CD with GitLab(https://docs.gitlab.com/ee/ci/introduction/)\n\n用 GitLab CI 进行持续集成(https://scarletsky.github.io/2016/07/29/use-gitlab-ci-for-continuous-integration/)\n\n如何实现前端工程的持续集成与持续部署？(https://www.zhihu.com/question/60194439)\n\n基于 GitLab CI 的前端工程CI/CD实践(https://github.com/giscafer/front-end-manual/issues/27)","slug":"gitlab-cicd","published":1,"updated":"2019-12-31T08:43:48.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4tzdex00017v0a63o1bguzi","content":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>公司于去年开始代码版本管理从SVN迁移到了Git，采用的GitLab程序做管理，但是自动构建采用的是Jekins，最近在给博客做自动构建的时候了解到的了Github的Actions，我就在想，是不是GitLab也有自己的自动构建能力，因为之前在参与项目的时候也看到GitLab上有CI/CD相关的内容，但是没有仔细的去看，趁这次机会就一起研究一下。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"说一下目前公司的构建和发布流程\"><a href=\"#说一下目前公司的构建和发布流程\" class=\"headerlink\" title=\"说一下目前公司的构建和发布流程\"></a>说一下目前公司的构建和发布流程</h2><p>1、<strong><em>手动构建时代</em></strong>：开发人员在测试需要验证环境的时候，在本地执行打包构建命令，然后将包放到服务器上，整个过程30分钟左右。<br>2、<strong><em>自动构建时代</em></strong>目前公司的构建是要在Jekins中，首先是在Jekins中配置拉去代码的仓库地址和代码分支，写好构建的脚本，在需要构建时候进行构建，一次配置后构建全程只需要点一下构建时间长度跟项目代码需要下载的依赖时间有关，通常不超过5分钟，需要注意的是要在构建前同步一下代码版本<br><strong><em>划重点</em></strong><br>在原来的手动构建时代，代码是以开发本地的代码为准，代码版本很可能跟最新的代码有出入，而且依赖于开发的电脑设备，如果他请假了，那么就GG了；另外通过一次配置后整个构建的时间从30分钟降到了5分钟，一次节省25分钟，那么一个项目周期下节省的工时就非常可观了。</p>\n<h2 id=\"为什要使用GitLab-CI-CD进行构建\"><a href=\"#为什要使用GitLab-CI-CD进行构建\" class=\"headerlink\" title=\"为什要使用GitLab CI/CD进行构建\"></a>为什要使用GitLab CI/CD进行构建</h2><p>这里实际上没有太大的必要将公司的Jekins替换为GitLab的CI/CD进行自动构建，但是呢，因为公司本身采用的就是GitLab作为代码仓库管理代码，它本身又提供了CI/CD的功能，本着多学一点是一点的原则，我就花点时间研究一下它。</p>\n<h2 id=\"什么是-GitLab-CI-CD\"><a href=\"#什么是-GitLab-CI-CD\" class=\"headerlink\" title=\"什么是 GitLab CI/CD\"></a>什么是 GitLab CI/CD</h2><p>下面我就要开始把我了解到的GitLab CI/CD的使用方式说一下，从零开始搭建GitLab CI/CD。</p>\n<h3 id=\"1-简要介绍-GitLab-CI-CD\"><a href=\"#1-简要介绍-GitLab-CI-CD\" class=\"headerlink\" title=\"1. 简要介绍 GitLab CI/CD\"></a>1. 简要介绍 GitLab CI/CD</h3><p>代码提交到GitLab上后，满足指定条件之后会触发pipeline进行自动化构建、发布。<br><strong><em>pipeline</em></strong>可以理解为构建任务，里面可以包含多个流程，比如下载依赖、运行测试、编译、部署。<br>那么pipeline什么时候触发，分为几个流程，每个流程做什么，需要在项目的<strong><em>.gitlab-ci.yml</em></strong>文件中的定义。<br>这点呢跟Jekins里面实际上做的也是同样的事，在线下开发做构建时候也是做这些事，只是通过脚本之后这些事都可以交给计算机做了。</p>\n<h3 id=\"2-GitLab-CI-CD-整体流程\"><a href=\"#2-GitLab-CI-CD-整体流程\" class=\"headerlink\" title=\"2. GitLab CI/CD 整体流程\"></a>2. GitLab CI/CD 整体流程</h3><ul>\n<li>GitLab CI/CD 的 pipeline 具体流程和操作在 .gitlab-ci.yml 文件中申明。</li>\n<li>触发 pipeline 后，由 GitLab Runner 根据  .gitlab-ci.yml 文件运行。</li>\n<li>运行结束后将返回至 GitLab 系统。</li>\n</ul>\n<h4 id=\"2-1-gitlab-ci-yml-文件\"><a href=\"#2-1-gitlab-ci-yml-文件\" class=\"headerlink\" title=\"2.1 .gitlab-ci.yml 文件\"></a>2.1 .gitlab-ci.yml 文件</h4><p>.gitlab-ci.yml 文件是一个申明式文件，用于定义 GitLab CI/CD 流程分为几个阶段，每个阶段分别干什么。</p>\n<p>关于具体干什么、怎么干，主要使用命令行和脚本操作，稍后会在实践部分做细致的介绍。</p>\n<p>如果涉及一些逻辑的话，会使用脚本（shell）。</p>\n<h4 id=\"2-2-GitLab-Runner\"><a href=\"#2-2-GitLab-Runner\" class=\"headerlink\" title=\"2.2 GitLab Runner\"></a>2.2 GitLab Runner</h4><p>GitLab Runner 是 CI 的执行环境，负责执行 gitlab-ci.yml 文件，并将结果返回给 GitLab 系统。Runner 具体可以有多种形式，docker、虚拟机或 shell，在注册 runner 时选定方式。实际上就是运行脚本的容器环境。</p>\n<h2 id=\"3-从零搭建一个-GitLab-CI-CD-的基本步骤\"><a href=\"#3-从零搭建一个-GitLab-CI-CD-的基本步骤\" class=\"headerlink\" title=\"3. 从零搭建一个 GitLab CI/CD 的基本步骤\"></a>3. 从零搭建一个 GitLab CI/CD 的基本步骤</h2><p>上面介绍了一些GitLab构建的主要环节和名词概念，接下来我将给大家介绍一下如何从零搭建一个GitLab CI/CD，一起体验一把GitLab CI/CD的整个流程。</p>\n<h3 id=\"3-1-新建一个-GitLab-项目\"><a href=\"#3-1-新建一个-GitLab-项目\" class=\"headerlink\" title=\"3.1 新建一个 GitLab 项目\"></a>3.1 新建一个 GitLab 项目</h3><p>我这用的是公司的自有仓库，各位可以在开源GitLab上创建自己的项目</p>\n<h3 id=\"3-2-配置Runner\"><a href=\"#3-2-配置Runner\" class=\"headerlink\" title=\"3.2 配置Runner\"></a>3.2 配置Runner</h3><p>GitLab 提供了一些共享的Runner，我们可以不处理Runner，这里可以理解为，它提供了一些现成的脚本运行环境，不需要我们从头配置运行环境，so sweet～</p>\n<h3 id=\"3-3-新建-gitlab-ci-yml-文件\"><a href=\"#3-3-新建-gitlab-ci-yml-文件\" class=\"headerlink\" title=\"3.3 新建 .gitlab-ci.yml 文件\"></a>3.3 新建 .gitlab-ci.yml 文件</h3><ol>\n<li>拉取项目到本地</li>\n<li>在项目根目录新建 .gitlab-ci.yml 文件</li>\n<li>提交 .gitlab-ci.yml 文件</li>\n<li>在项目的 CI/CD 中，可以看到 CI/CD 的运行情况<br>这个过程应该没人不会吧，没技术含量的我们简单一提，实际上最重要的就是.gitlab-ci.yml文件中要怎么去写，示例说明文件如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; .gitlab-ci.yml 示例说明</span><br><span class=\"line\"></span><br><span class=\"line\">image: node</span><br><span class=\"line\"># 定义 stages</span><br><span class=\"line\">stages:</span><br><span class=\"line\">  - build</span><br><span class=\"line\">  - test</span><br><span class=\"line\"># 定义 job</span><br><span class=\"line\"> build 阶段:</span><br><span class=\"line\">  stage: build</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - echo &quot;build stage&quot;</span><br><span class=\"line\"># 定义 job</span><br><span class=\"line\">发布到测试环境:</span><br><span class=\"line\">  stage: test</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - echo &quot;test stage&quot;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"GitLab-CI-CD-实践\"><a href=\"#GitLab-CI-CD-实践\" class=\"headerlink\" title=\"GitLab CI/CD 实践\"></a>GitLab CI/CD 实践</h2><p>在实践部分，这里着重介绍 GitLab Runner 和 .gitlab-ci.yml 文件，主要的流程及遇到的问题和解决方案包含在 .gitlab-ci.yml 文件的介绍过程中。</p>\n<h3 id=\"1-GitLab-Runner\"><a href=\"#1-GitLab-Runner\" class=\"headerlink\" title=\"1. GitLab Runner\"></a>1. GitLab Runner</h3><p>GitLab Runner 一般由 GitLab 系统维护者管理，配置后，同类项目可以共享，一般不需要进行修改。这里不进行具体介绍，主要介绍下使用过程中的注意点，具体使用可参考 GitLab Runner 文档。（<a href=\"https://docs.gitlab.com.cn/runner/）\" target=\"_blank\" rel=\"noopener\">https://docs.gitlab.com.cn/runner/）</a></p>\n<h4 id=\"1-1-GitLab-Runner-使用流程\"><a href=\"#1-1-GitLab-Runner-使用流程\" class=\"headerlink\" title=\"1.1 GitLab Runner 使用流程\"></a>1.1 GitLab Runner 使用流程</h4><ol>\n<li>下载 GitLab Runner</li>\n<li>注册 GitLab Runner</li>\n<li>使用 GitLab Runner</li>\n</ol>\n<h4 id=\"1-2-GitLab-Runner-注意点\"><a href=\"#1-2-GitLab-Runner-注意点\" class=\"headerlink\" title=\"1.2 GitLab Runner 注意点\"></a>1.2 GitLab Runner 注意点</h4><p>在使用 Runner 的过程中，我们遇到了一些问题，下面简要介绍问题及解决方案，不做具体介绍。</p>\n<h5 id=\"1-2-1-配置-Runner-后，push-代码，出发了-pipeline，但一直处于Pending状态\"><a href=\"#1-2-1-配置-Runner-后，push-代码，出发了-pipeline，但一直处于Pending状态\" class=\"headerlink\" title=\"1.2.1 配置 Runner 后，push 代码，出发了 pipeline，但一直处于Pending状态\"></a>1.2.1 配置 Runner 后，push 代码，出发了 pipeline，但一直处于Pending状态</h5><p>错误信息是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This job is stuck, because you don’t have any active runners that can run this job</span><br></pre></td></tr></table></figure>\n<p>注册的 Runner，默认情况下，不会运用没有 <code>tag</code> 的 job，可以在 Settings→CI/CD→Runners Settings，去掉 Runner untagged jobs 即可。</p>\n<h5 id=\"1-2-2-GitLab-Runner-的类型\"><a href=\"#1-2-2-GitLab-Runner-的类型\" class=\"headerlink\" title=\"1.2.2 GitLab Runner 的类型\"></a>1.2.2 GitLab Runner 的类型</h5><p>有三种类型的 Runner，</p>\n<ul>\n<li>Shared Runners 在整个系统所有项目都可以使用</li>\n<li>Group Runners 注册后，同一个项目下的不同代码库共享</li>\n<li>Specific Runners 需要给项目单独配置，使用 Specific Runners 注意考虑是否需要关闭 Shared Runners、和 Group Runners。</li>\n</ul>\n<h5 id=\"1-2-3-在-GitLab-CI-中使用-docker\"><a href=\"#1-2-3-在-GitLab-CI-中使用-docker\" class=\"headerlink\" title=\"1.2.3 在 GitLab CI 中使用 docker\"></a>1.2.3 在 GitLab CI 中使用 docker</h5><p>如果部署使用的是docker方式，那么在部署时需要在 GitLab CI/CD 中使用 docker 打镜像发布。可以参考 Building Docker images with GitLab CI/CD（<a href=\"https://docs.gitlab.com/ee/ci/docker/using_docker_build.html）\" target=\"_blank\" rel=\"noopener\">https://docs.gitlab.com/ee/ci/docker/using_docker_build.html）</a></p>\n<h5 id=\"1-2-4-在-GitLab-CI-CD-中访问-Runner-宿主机目录\"><a href=\"#1-2-4-在-GitLab-CI-CD-中访问-Runner-宿主机目录\" class=\"headerlink\" title=\"1.2.4 在 GitLab CI/CD 中访问 Runner 宿主机目录\"></a>1.2.4 在 GitLab CI/CD 中访问 Runner 宿主机目录</h5><p>我们使用的 Runner executor 是 Dokcer，在 Dokcer volumes 中配置需要访问的目录。</p>\n<h3 id=\"2-gitlab-ci-yml-文件\"><a href=\"#2-gitlab-ci-yml-文件\" class=\"headerlink\" title=\"2. .gitlab-ci.yml 文件\"></a>2. .gitlab-ci.yml 文件</h3><p>.gitlab-ci.yml 详细的用法，可参考 GitLab CI/CD Pipeline Configuration Reference 文档（<a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html）\" target=\"_blank\" rel=\"noopener\">https://docs.gitlab.com/ee/ci/yaml/README.html）</a></p>\n<h4 id=\"2-1-gitlab-ci-yml-文件结构介绍\"><a href=\"#2-1-gitlab-ci-yml-文件结构介绍\" class=\"headerlink\" title=\"2.1 .gitlab-ci.yml 文件结构介绍\"></a>2.1 .gitlab-ci.yml 文件结构介绍</h4><ul>\n<li><code>image</code> 是执行 CI/CD 依赖的 Docker 基础镜像。镜像中有 Node、Yarn、Dalp（内部 rsync 工具）。</li>\n<li><code>stages</code> 中定义了我们的 pipeline 分为以下几个过程:<ol>\n<li>下载依赖阶段 pre_build</li>\n<li>构建阶段 build</li>\n<li>发布阶段 deploy</li>\n</ol>\n</li>\n<li><code>stage</code> 申明当前的阶段，在 stages 中使用</li>\n<li><code>variables</code> 用于定义变量</li>\n<li><code>before_script</code> 执行 script 前的操作</li>\n<li><code>script</code> 当前 stage 需要执行的操作</li>\n<li><code>changes</code> 指定 stage 触发条件</li>\n<li><code>refs</code> 指定 stage 触发的分支</li>\n</ul>\n<p>下面具体看一下我们这个.gitlab-ci.yml文件实际的样子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">image: registry.thunisoft.com&#x2F;gitlab-ci&#x2F;node:v1.8</span><br><span class=\"line\"></span><br><span class=\"line\">variables:</span><br><span class=\"line\">  # $CI_PROJECT_PATH  ：项目id,用于项目唯一区分本项目与其它项目</span><br><span class=\"line\">  # $CI_PROJECT_DIR   ：本地项目路径</span><br><span class=\"line\">  # $PROCESS_PATH     ：临时文件目录(包括日志和一些临时文件)</span><br><span class=\"line\">  NODE_MODULES_PATH: &#x2F;runner-cache&#x2F;frontend&#x2F;$CI_PROJECT_PATH&#x2F;$CI_BUILD_REF_NAME&#x2F;node_modules</span><br><span class=\"line\"></span><br><span class=\"line\">stages:</span><br><span class=\"line\">  - pre_build # 下载依赖阶段</span><br><span class=\"line\">  - build # 构建阶段</span><br><span class=\"line\">  - deploy # 测试发布阶段</span><br><span class=\"line\"></span><br><span class=\"line\"># 下载依赖:</span><br><span class=\"line\">  before_script: # 下载依赖前准备脚本</span><br><span class=\"line\">    # 无 node_modules 文件时，新建 node_modules 文件</span><br><span class=\"line\">    - &#x2F;bin&#x2F;bash .&#x2F;ci&#x2F;mkdir.sh $NODE_MODULES_PATH</span><br><span class=\"line\">    # 软链 node_modules 到宿主机</span><br><span class=\"line\">    - ln -s $NODE_MODULES_PATH .</span><br><span class=\"line\">    - cd webpack@lixuguang-project</span><br><span class=\"line\"></span><br><span class=\"line\">  stage: pre_build</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - echo &quot;npm install&quot;</span><br><span class=\"line\">    - npm install  --network-timeout 60000 # 安装依赖</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    changes:</span><br><span class=\"line\">      - webpack@lixuguang-project&#x2F;package.json</span><br><span class=\"line\">    refs:</span><br><span class=\"line\">      - master</span><br><span class=\"line\">      - ci</span><br><span class=\"line\"></span><br><span class=\"line\"># 构建:</span><br><span class=\"line\">  stage: build</span><br><span class=\"line\">  variables:</span><br><span class=\"line\">    CI_COMMIT_BEFORE_SHA_PATH: &#x2F;mnt&#x2F;gv0&#x2F;gitlab-runner-cache&#x2F;$CI_PROJECT_PATH</span><br><span class=\"line\">    CI_COMMIT_BEFORE_SHA_FILE_NAME: $CI_BUILD_REF_NAME.sh</span><br><span class=\"line\">    CI_COMMIT_BEFORE_SHA_FILE: &#x2F;mnt&#x2F;gv0&#x2F;gitlab-runner-cache&#x2F;$CI_PROJECT_PATH&#x2F;$CI_BUILD_REF_NAME.sh</span><br><span class=\"line\">  before_script:</span><br><span class=\"line\">    # 建存此次 CI CI_COMMIT_SHA 的文件</span><br><span class=\"line\">    - &#x2F;bin&#x2F;bash .&#x2F;ci&#x2F;mkfile.sh $CI_COMMIT_BEFORE_SHA_PATH $CI_COMMIT_BEFORE_SHA_FILE_NAME</span><br><span class=\"line\">    # 软链 node_modules 到宿主机</span><br><span class=\"line\">    - ln -s $NODE_MODULES_PATH .</span><br><span class=\"line\">    - rm -rf web&#x2F;share&#x2F;*</span><br><span class=\"line\">    - cd webpack@lixuguang-projects</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    # 缓存上次ci</span><br><span class=\"line\">    - source $CI_COMMIT_BEFORE_SHA_FILE</span><br><span class=\"line\">    - echo &quot;CI_COMMIT_BEFORE_SHA&#x3D;$CI_COMMIT_SHA&quot; &gt; $CI_COMMIT_BEFORE_SHA_FILE</span><br><span class=\"line\">    - python3 ..&#x2F;ci&#x2F;build.py   # 编译</span><br><span class=\"line\">    - &#x2F;bin&#x2F;bash ..&#x2F;ci&#x2F;commit.sh   # 提交编译结果</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    changes:</span><br><span class=\"line\">      - www_src&#x2F;**&#x2F;*</span><br><span class=\"line\">    refs:</span><br><span class=\"line\">      - master</span><br><span class=\"line\">      - ci</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试发布:</span><br><span class=\"line\">  stage: deploy</span><br><span class=\"line\">  variables:</span><br><span class=\"line\">    PROCESS_PATH: &#x2F;mnt&#x2F;gv0&#x2F;gitlab-runner-cache&#x2F;deploy&#x2F;process&#x2F;$CI_JOB_ID  # 目录不要换，用于日志服务器获取日志展示</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - mkdir $PROCESS_PATH # 建立发布临时路径，存放发布配置中间文件和结果日志用</span><br><span class=\"line\">    - dplt $CI_PROJECT_DIR&#x2F;.deploy_test.yml $CI_PROJECT_PATH $CI_PROJECT_DIR&#x2F;web&#x2F; $PROCESS_PATH</span><br><span class=\"line\">    # dplt 发布yml配置</span><br><span class=\"line\">    - echo &quot;发布完成，错误日志查看http:&#x2F;&#x2F;172.18.78.11:8089&#x2F;log?path&#x3D;&quot;$PROCESS_PATH</span><br><span class=\"line\">    - echo &#96;ls $PROCESS_PATH&#x2F;*.log&#96;</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    changes:</span><br><span class=\"line\">      - web&#x2F;**&#x2F;*</span><br><span class=\"line\">    refs:</span><br><span class=\"line\">      - test</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-下载依赖阶段（pre-build-stage）\"><a href=\"#2-2-下载依赖阶段（pre-build-stage）\" class=\"headerlink\" title=\"2.2 下载依赖阶段（pre_build stage）\"></a>2.2 下载依赖阶段（pre_build stage）</h4><p>下载依赖的方案是：当 package.json 文件发生变化时，触发 pre_build stage，执行 npm install。下载的 node_modules 放在宿主机下，执行时通过软链获取依赖。</p>\n<h4 id=\"2-3-构建阶段（build-stage）\"><a href=\"#2-3-构建阶段（build-stage）\" class=\"headerlink\" title=\"2.3 构建阶段（build stage）\"></a>2.3 构建阶段（build stage）</h4><p>构建阶段，分为 3 部分</p>\n<ol>\n<li>diff 文件变化</li>\n<li>前端 build</li>\n<li>commit build 后结果</li>\n</ol>\n<h5 id=\"2-3-1-diff-文件变化\"><a href=\"#2-3-1-diff-文件变化\" class=\"headerlink\" title=\"2.3.1 diff 文件变化\"></a>2.3.1 diff 文件变化</h5><p>每次 CI 时，将当前 CI commit SHA（CI_COMMIT_SHA 变量）存在文件中，存为 CI_COMMIT_BEFORE_SHA 变量， diff 时，git diff 当前 CI 与上次 commit SHA 的变化。</p>\n<h5 id=\"2-3-2-前端-build\"><a href=\"#2-3-2-前端-build\" class=\"headerlink\" title=\"2.3.2 前端 build\"></a>2.3.2 前端 build</h5><p>根据 git diff 的变化情况，确定本次需要打包的内容。</p>\n<h5 id=\"2-3-3-commit-打包后生成的-HTML-文件\"><a href=\"#2-3-3-commit-打包后生成的-HTML-文件\" class=\"headerlink\" title=\"2.3.3 commit 打包后生成的 HTML 文件\"></a>2.3.3 commit 打包后生成的 HTML 文件</h5><p>在 GitLab CI/CD 提交代码时，使用 Git 凭证存储，提交打包后的 HTML 文件。Git 凭证存储细节可参考凭证存储文档(<a href=\"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8</a>)</p>\n<h4 id=\"2-4-发布阶段（deploy-stage）\"><a href=\"#2-4-发布阶段（deploy-stage）\" class=\"headerlink\" title=\"2.4 发布阶段（deploy stage）\"></a>2.4 发布阶段（deploy stage）</h4><p>发布阶段，使用内部的 rsync 工具 dplt 将打包后的 HTML 文件部署。dplt 可配置集群、机器列表。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>以上就是GitLab CI/CD的整个理论到实践的全部过程，实现之后你就可以解放双手了，是不是超爽。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>持续集成是什么？(<a href=\"http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html</a>)</p>\n<p>什么是 CI/CD？(<a href=\"https://www.redhat.com/zh/topics/devops/what-is-ci-cd\" target=\"_blank\" rel=\"noopener\">https://www.redhat.com/zh/topics/devops/what-is-ci-cd</a>)</p>\n<p>GitLab Docs(<a href=\"https://docs.gitlab.com/\" target=\"_blank\" rel=\"noopener\">https://docs.gitlab.com/</a>)</p>\n<p>Introduction to CI/CD with GitLab(<a href=\"https://docs.gitlab.com/ee/ci/introduction/\" target=\"_blank\" rel=\"noopener\">https://docs.gitlab.com/ee/ci/introduction/</a>)</p>\n<p>用 GitLab CI 进行持续集成(<a href=\"https://scarletsky.github.io/2016/07/29/use-gitlab-ci-for-continuous-integration/\" target=\"_blank\" rel=\"noopener\">https://scarletsky.github.io/2016/07/29/use-gitlab-ci-for-continuous-integration/</a>)</p>\n<p>如何实现前端工程的持续集成与持续部署？(<a href=\"https://www.zhihu.com/question/60194439\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/60194439</a>)</p>\n<p>基于 GitLab CI 的前端工程CI/CD实践(<a href=\"https://github.com/giscafer/front-end-manual/issues/27\" target=\"_blank\" rel=\"noopener\">https://github.com/giscafer/front-end-manual/issues/27</a>)</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李旭光<br>引用请标明出处</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>公司于去年开始代码版本管理从SVN迁移到了Git，采用的GitLab程序做管理，但是自动构建采用的是Jekins，最近在给博客做自动构建的时候了解到的了Github的Actions，我就在想，是不是GitLab也有自己的自动构建能力，因为之前在参与项目的时候也看到GitLab上有CI/CD相关的内容，但是没有仔细的去看，趁这次机会就一起研究一下。</p>","more":"<h2 id=\"说一下目前公司的构建和发布流程\"><a href=\"#说一下目前公司的构建和发布流程\" class=\"headerlink\" title=\"说一下目前公司的构建和发布流程\"></a>说一下目前公司的构建和发布流程</h2><p>1、<strong><em>手动构建时代</em></strong>：开发人员在测试需要验证环境的时候，在本地执行打包构建命令，然后将包放到服务器上，整个过程30分钟左右。<br>2、<strong><em>自动构建时代</em></strong>目前公司的构建是要在Jekins中，首先是在Jekins中配置拉去代码的仓库地址和代码分支，写好构建的脚本，在需要构建时候进行构建，一次配置后构建全程只需要点一下构建时间长度跟项目代码需要下载的依赖时间有关，通常不超过5分钟，需要注意的是要在构建前同步一下代码版本<br><strong><em>划重点</em></strong><br>在原来的手动构建时代，代码是以开发本地的代码为准，代码版本很可能跟最新的代码有出入，而且依赖于开发的电脑设备，如果他请假了，那么就GG了；另外通过一次配置后整个构建的时间从30分钟降到了5分钟，一次节省25分钟，那么一个项目周期下节省的工时就非常可观了。</p>\n<h2 id=\"为什要使用GitLab-CI-CD进行构建\"><a href=\"#为什要使用GitLab-CI-CD进行构建\" class=\"headerlink\" title=\"为什要使用GitLab CI/CD进行构建\"></a>为什要使用GitLab CI/CD进行构建</h2><p>这里实际上没有太大的必要将公司的Jekins替换为GitLab的CI/CD进行自动构建，但是呢，因为公司本身采用的就是GitLab作为代码仓库管理代码，它本身又提供了CI/CD的功能，本着多学一点是一点的原则，我就花点时间研究一下它。</p>\n<h2 id=\"什么是-GitLab-CI-CD\"><a href=\"#什么是-GitLab-CI-CD\" class=\"headerlink\" title=\"什么是 GitLab CI/CD\"></a>什么是 GitLab CI/CD</h2><p>下面我就要开始把我了解到的GitLab CI/CD的使用方式说一下，从零开始搭建GitLab CI/CD。</p>\n<h3 id=\"1-简要介绍-GitLab-CI-CD\"><a href=\"#1-简要介绍-GitLab-CI-CD\" class=\"headerlink\" title=\"1. 简要介绍 GitLab CI/CD\"></a>1. 简要介绍 GitLab CI/CD</h3><p>代码提交到GitLab上后，满足指定条件之后会触发pipeline进行自动化构建、发布。<br><strong><em>pipeline</em></strong>可以理解为构建任务，里面可以包含多个流程，比如下载依赖、运行测试、编译、部署。<br>那么pipeline什么时候触发，分为几个流程，每个流程做什么，需要在项目的<strong><em>.gitlab-ci.yml</em></strong>文件中的定义。<br>这点呢跟Jekins里面实际上做的也是同样的事，在线下开发做构建时候也是做这些事，只是通过脚本之后这些事都可以交给计算机做了。</p>\n<h3 id=\"2-GitLab-CI-CD-整体流程\"><a href=\"#2-GitLab-CI-CD-整体流程\" class=\"headerlink\" title=\"2. GitLab CI/CD 整体流程\"></a>2. GitLab CI/CD 整体流程</h3><ul>\n<li>GitLab CI/CD 的 pipeline 具体流程和操作在 .gitlab-ci.yml 文件中申明。</li>\n<li>触发 pipeline 后，由 GitLab Runner 根据  .gitlab-ci.yml 文件运行。</li>\n<li>运行结束后将返回至 GitLab 系统。</li>\n</ul>\n<h4 id=\"2-1-gitlab-ci-yml-文件\"><a href=\"#2-1-gitlab-ci-yml-文件\" class=\"headerlink\" title=\"2.1 .gitlab-ci.yml 文件\"></a>2.1 .gitlab-ci.yml 文件</h4><p>.gitlab-ci.yml 文件是一个申明式文件，用于定义 GitLab CI/CD 流程分为几个阶段，每个阶段分别干什么。</p>\n<p>关于具体干什么、怎么干，主要使用命令行和脚本操作，稍后会在实践部分做细致的介绍。</p>\n<p>如果涉及一些逻辑的话，会使用脚本（shell）。</p>\n<h4 id=\"2-2-GitLab-Runner\"><a href=\"#2-2-GitLab-Runner\" class=\"headerlink\" title=\"2.2 GitLab Runner\"></a>2.2 GitLab Runner</h4><p>GitLab Runner 是 CI 的执行环境，负责执行 gitlab-ci.yml 文件，并将结果返回给 GitLab 系统。Runner 具体可以有多种形式，docker、虚拟机或 shell，在注册 runner 时选定方式。实际上就是运行脚本的容器环境。</p>\n<h2 id=\"3-从零搭建一个-GitLab-CI-CD-的基本步骤\"><a href=\"#3-从零搭建一个-GitLab-CI-CD-的基本步骤\" class=\"headerlink\" title=\"3. 从零搭建一个 GitLab CI/CD 的基本步骤\"></a>3. 从零搭建一个 GitLab CI/CD 的基本步骤</h2><p>上面介绍了一些GitLab构建的主要环节和名词概念，接下来我将给大家介绍一下如何从零搭建一个GitLab CI/CD，一起体验一把GitLab CI/CD的整个流程。</p>\n<h3 id=\"3-1-新建一个-GitLab-项目\"><a href=\"#3-1-新建一个-GitLab-项目\" class=\"headerlink\" title=\"3.1 新建一个 GitLab 项目\"></a>3.1 新建一个 GitLab 项目</h3><p>我这用的是公司的自有仓库，各位可以在开源GitLab上创建自己的项目</p>\n<h3 id=\"3-2-配置Runner\"><a href=\"#3-2-配置Runner\" class=\"headerlink\" title=\"3.2 配置Runner\"></a>3.2 配置Runner</h3><p>GitLab 提供了一些共享的Runner，我们可以不处理Runner，这里可以理解为，它提供了一些现成的脚本运行环境，不需要我们从头配置运行环境，so sweet～</p>\n<h3 id=\"3-3-新建-gitlab-ci-yml-文件\"><a href=\"#3-3-新建-gitlab-ci-yml-文件\" class=\"headerlink\" title=\"3.3 新建 .gitlab-ci.yml 文件\"></a>3.3 新建 .gitlab-ci.yml 文件</h3><ol>\n<li>拉取项目到本地</li>\n<li>在项目根目录新建 .gitlab-ci.yml 文件</li>\n<li>提交 .gitlab-ci.yml 文件</li>\n<li>在项目的 CI/CD 中，可以看到 CI/CD 的运行情况<br>这个过程应该没人不会吧，没技术含量的我们简单一提，实际上最重要的就是.gitlab-ci.yml文件中要怎么去写，示例说明文件如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; .gitlab-ci.yml 示例说明</span><br><span class=\"line\"></span><br><span class=\"line\">image: node</span><br><span class=\"line\"># 定义 stages</span><br><span class=\"line\">stages:</span><br><span class=\"line\">  - build</span><br><span class=\"line\">  - test</span><br><span class=\"line\"># 定义 job</span><br><span class=\"line\"> build 阶段:</span><br><span class=\"line\">  stage: build</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - echo &quot;build stage&quot;</span><br><span class=\"line\"># 定义 job</span><br><span class=\"line\">发布到测试环境:</span><br><span class=\"line\">  stage: test</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - echo &quot;test stage&quot;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"GitLab-CI-CD-实践\"><a href=\"#GitLab-CI-CD-实践\" class=\"headerlink\" title=\"GitLab CI/CD 实践\"></a>GitLab CI/CD 实践</h2><p>在实践部分，这里着重介绍 GitLab Runner 和 .gitlab-ci.yml 文件，主要的流程及遇到的问题和解决方案包含在 .gitlab-ci.yml 文件的介绍过程中。</p>\n<h3 id=\"1-GitLab-Runner\"><a href=\"#1-GitLab-Runner\" class=\"headerlink\" title=\"1. GitLab Runner\"></a>1. GitLab Runner</h3><p>GitLab Runner 一般由 GitLab 系统维护者管理，配置后，同类项目可以共享，一般不需要进行修改。这里不进行具体介绍，主要介绍下使用过程中的注意点，具体使用可参考 GitLab Runner 文档。（<a href=\"https://docs.gitlab.com.cn/runner/）\" target=\"_blank\" rel=\"noopener\">https://docs.gitlab.com.cn/runner/）</a></p>\n<h4 id=\"1-1-GitLab-Runner-使用流程\"><a href=\"#1-1-GitLab-Runner-使用流程\" class=\"headerlink\" title=\"1.1 GitLab Runner 使用流程\"></a>1.1 GitLab Runner 使用流程</h4><ol>\n<li>下载 GitLab Runner</li>\n<li>注册 GitLab Runner</li>\n<li>使用 GitLab Runner</li>\n</ol>\n<h4 id=\"1-2-GitLab-Runner-注意点\"><a href=\"#1-2-GitLab-Runner-注意点\" class=\"headerlink\" title=\"1.2 GitLab Runner 注意点\"></a>1.2 GitLab Runner 注意点</h4><p>在使用 Runner 的过程中，我们遇到了一些问题，下面简要介绍问题及解决方案，不做具体介绍。</p>\n<h5 id=\"1-2-1-配置-Runner-后，push-代码，出发了-pipeline，但一直处于Pending状态\"><a href=\"#1-2-1-配置-Runner-后，push-代码，出发了-pipeline，但一直处于Pending状态\" class=\"headerlink\" title=\"1.2.1 配置 Runner 后，push 代码，出发了 pipeline，但一直处于Pending状态\"></a>1.2.1 配置 Runner 后，push 代码，出发了 pipeline，但一直处于Pending状态</h5><p>错误信息是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This job is stuck, because you don’t have any active runners that can run this job</span><br></pre></td></tr></table></figure>\n<p>注册的 Runner，默认情况下，不会运用没有 <code>tag</code> 的 job，可以在 Settings→CI/CD→Runners Settings，去掉 Runner untagged jobs 即可。</p>\n<h5 id=\"1-2-2-GitLab-Runner-的类型\"><a href=\"#1-2-2-GitLab-Runner-的类型\" class=\"headerlink\" title=\"1.2.2 GitLab Runner 的类型\"></a>1.2.2 GitLab Runner 的类型</h5><p>有三种类型的 Runner，</p>\n<ul>\n<li>Shared Runners 在整个系统所有项目都可以使用</li>\n<li>Group Runners 注册后，同一个项目下的不同代码库共享</li>\n<li>Specific Runners 需要给项目单独配置，使用 Specific Runners 注意考虑是否需要关闭 Shared Runners、和 Group Runners。</li>\n</ul>\n<h5 id=\"1-2-3-在-GitLab-CI-中使用-docker\"><a href=\"#1-2-3-在-GitLab-CI-中使用-docker\" class=\"headerlink\" title=\"1.2.3 在 GitLab CI 中使用 docker\"></a>1.2.3 在 GitLab CI 中使用 docker</h5><p>如果部署使用的是docker方式，那么在部署时需要在 GitLab CI/CD 中使用 docker 打镜像发布。可以参考 Building Docker images with GitLab CI/CD（<a href=\"https://docs.gitlab.com/ee/ci/docker/using_docker_build.html）\" target=\"_blank\" rel=\"noopener\">https://docs.gitlab.com/ee/ci/docker/using_docker_build.html）</a></p>\n<h5 id=\"1-2-4-在-GitLab-CI-CD-中访问-Runner-宿主机目录\"><a href=\"#1-2-4-在-GitLab-CI-CD-中访问-Runner-宿主机目录\" class=\"headerlink\" title=\"1.2.4 在 GitLab CI/CD 中访问 Runner 宿主机目录\"></a>1.2.4 在 GitLab CI/CD 中访问 Runner 宿主机目录</h5><p>我们使用的 Runner executor 是 Dokcer，在 Dokcer volumes 中配置需要访问的目录。</p>\n<h3 id=\"2-gitlab-ci-yml-文件\"><a href=\"#2-gitlab-ci-yml-文件\" class=\"headerlink\" title=\"2. .gitlab-ci.yml 文件\"></a>2. .gitlab-ci.yml 文件</h3><p>.gitlab-ci.yml 详细的用法，可参考 GitLab CI/CD Pipeline Configuration Reference 文档（<a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html）\" target=\"_blank\" rel=\"noopener\">https://docs.gitlab.com/ee/ci/yaml/README.html）</a></p>\n<h4 id=\"2-1-gitlab-ci-yml-文件结构介绍\"><a href=\"#2-1-gitlab-ci-yml-文件结构介绍\" class=\"headerlink\" title=\"2.1 .gitlab-ci.yml 文件结构介绍\"></a>2.1 .gitlab-ci.yml 文件结构介绍</h4><ul>\n<li><code>image</code> 是执行 CI/CD 依赖的 Docker 基础镜像。镜像中有 Node、Yarn、Dalp（内部 rsync 工具）。</li>\n<li><code>stages</code> 中定义了我们的 pipeline 分为以下几个过程:<ol>\n<li>下载依赖阶段 pre_build</li>\n<li>构建阶段 build</li>\n<li>发布阶段 deploy</li>\n</ol>\n</li>\n<li><code>stage</code> 申明当前的阶段，在 stages 中使用</li>\n<li><code>variables</code> 用于定义变量</li>\n<li><code>before_script</code> 执行 script 前的操作</li>\n<li><code>script</code> 当前 stage 需要执行的操作</li>\n<li><code>changes</code> 指定 stage 触发条件</li>\n<li><code>refs</code> 指定 stage 触发的分支</li>\n</ul>\n<p>下面具体看一下我们这个.gitlab-ci.yml文件实际的样子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">image: registry.thunisoft.com&#x2F;gitlab-ci&#x2F;node:v1.8</span><br><span class=\"line\"></span><br><span class=\"line\">variables:</span><br><span class=\"line\">  # $CI_PROJECT_PATH  ：项目id,用于项目唯一区分本项目与其它项目</span><br><span class=\"line\">  # $CI_PROJECT_DIR   ：本地项目路径</span><br><span class=\"line\">  # $PROCESS_PATH     ：临时文件目录(包括日志和一些临时文件)</span><br><span class=\"line\">  NODE_MODULES_PATH: &#x2F;runner-cache&#x2F;frontend&#x2F;$CI_PROJECT_PATH&#x2F;$CI_BUILD_REF_NAME&#x2F;node_modules</span><br><span class=\"line\"></span><br><span class=\"line\">stages:</span><br><span class=\"line\">  - pre_build # 下载依赖阶段</span><br><span class=\"line\">  - build # 构建阶段</span><br><span class=\"line\">  - deploy # 测试发布阶段</span><br><span class=\"line\"></span><br><span class=\"line\"># 下载依赖:</span><br><span class=\"line\">  before_script: # 下载依赖前准备脚本</span><br><span class=\"line\">    # 无 node_modules 文件时，新建 node_modules 文件</span><br><span class=\"line\">    - &#x2F;bin&#x2F;bash .&#x2F;ci&#x2F;mkdir.sh $NODE_MODULES_PATH</span><br><span class=\"line\">    # 软链 node_modules 到宿主机</span><br><span class=\"line\">    - ln -s $NODE_MODULES_PATH .</span><br><span class=\"line\">    - cd webpack@lixuguang-project</span><br><span class=\"line\"></span><br><span class=\"line\">  stage: pre_build</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - echo &quot;npm install&quot;</span><br><span class=\"line\">    - npm install  --network-timeout 60000 # 安装依赖</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    changes:</span><br><span class=\"line\">      - webpack@lixuguang-project&#x2F;package.json</span><br><span class=\"line\">    refs:</span><br><span class=\"line\">      - master</span><br><span class=\"line\">      - ci</span><br><span class=\"line\"></span><br><span class=\"line\"># 构建:</span><br><span class=\"line\">  stage: build</span><br><span class=\"line\">  variables:</span><br><span class=\"line\">    CI_COMMIT_BEFORE_SHA_PATH: &#x2F;mnt&#x2F;gv0&#x2F;gitlab-runner-cache&#x2F;$CI_PROJECT_PATH</span><br><span class=\"line\">    CI_COMMIT_BEFORE_SHA_FILE_NAME: $CI_BUILD_REF_NAME.sh</span><br><span class=\"line\">    CI_COMMIT_BEFORE_SHA_FILE: &#x2F;mnt&#x2F;gv0&#x2F;gitlab-runner-cache&#x2F;$CI_PROJECT_PATH&#x2F;$CI_BUILD_REF_NAME.sh</span><br><span class=\"line\">  before_script:</span><br><span class=\"line\">    # 建存此次 CI CI_COMMIT_SHA 的文件</span><br><span class=\"line\">    - &#x2F;bin&#x2F;bash .&#x2F;ci&#x2F;mkfile.sh $CI_COMMIT_BEFORE_SHA_PATH $CI_COMMIT_BEFORE_SHA_FILE_NAME</span><br><span class=\"line\">    # 软链 node_modules 到宿主机</span><br><span class=\"line\">    - ln -s $NODE_MODULES_PATH .</span><br><span class=\"line\">    - rm -rf web&#x2F;share&#x2F;*</span><br><span class=\"line\">    - cd webpack@lixuguang-projects</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    # 缓存上次ci</span><br><span class=\"line\">    - source $CI_COMMIT_BEFORE_SHA_FILE</span><br><span class=\"line\">    - echo &quot;CI_COMMIT_BEFORE_SHA&#x3D;$CI_COMMIT_SHA&quot; &gt; $CI_COMMIT_BEFORE_SHA_FILE</span><br><span class=\"line\">    - python3 ..&#x2F;ci&#x2F;build.py   # 编译</span><br><span class=\"line\">    - &#x2F;bin&#x2F;bash ..&#x2F;ci&#x2F;commit.sh   # 提交编译结果</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    changes:</span><br><span class=\"line\">      - www_src&#x2F;**&#x2F;*</span><br><span class=\"line\">    refs:</span><br><span class=\"line\">      - master</span><br><span class=\"line\">      - ci</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试发布:</span><br><span class=\"line\">  stage: deploy</span><br><span class=\"line\">  variables:</span><br><span class=\"line\">    PROCESS_PATH: &#x2F;mnt&#x2F;gv0&#x2F;gitlab-runner-cache&#x2F;deploy&#x2F;process&#x2F;$CI_JOB_ID  # 目录不要换，用于日志服务器获取日志展示</span><br><span class=\"line\">  script:</span><br><span class=\"line\">    - mkdir $PROCESS_PATH # 建立发布临时路径，存放发布配置中间文件和结果日志用</span><br><span class=\"line\">    - dplt $CI_PROJECT_DIR&#x2F;.deploy_test.yml $CI_PROJECT_PATH $CI_PROJECT_DIR&#x2F;web&#x2F; $PROCESS_PATH</span><br><span class=\"line\">    # dplt 发布yml配置</span><br><span class=\"line\">    - echo &quot;发布完成，错误日志查看http:&#x2F;&#x2F;172.18.78.11:8089&#x2F;log?path&#x3D;&quot;$PROCESS_PATH</span><br><span class=\"line\">    - echo &#96;ls $PROCESS_PATH&#x2F;*.log&#96;</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    changes:</span><br><span class=\"line\">      - web&#x2F;**&#x2F;*</span><br><span class=\"line\">    refs:</span><br><span class=\"line\">      - test</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-下载依赖阶段（pre-build-stage）\"><a href=\"#2-2-下载依赖阶段（pre-build-stage）\" class=\"headerlink\" title=\"2.2 下载依赖阶段（pre_build stage）\"></a>2.2 下载依赖阶段（pre_build stage）</h4><p>下载依赖的方案是：当 package.json 文件发生变化时，触发 pre_build stage，执行 npm install。下载的 node_modules 放在宿主机下，执行时通过软链获取依赖。</p>\n<h4 id=\"2-3-构建阶段（build-stage）\"><a href=\"#2-3-构建阶段（build-stage）\" class=\"headerlink\" title=\"2.3 构建阶段（build stage）\"></a>2.3 构建阶段（build stage）</h4><p>构建阶段，分为 3 部分</p>\n<ol>\n<li>diff 文件变化</li>\n<li>前端 build</li>\n<li>commit build 后结果</li>\n</ol>\n<h5 id=\"2-3-1-diff-文件变化\"><a href=\"#2-3-1-diff-文件变化\" class=\"headerlink\" title=\"2.3.1 diff 文件变化\"></a>2.3.1 diff 文件变化</h5><p>每次 CI 时，将当前 CI commit SHA（CI_COMMIT_SHA 变量）存在文件中，存为 CI_COMMIT_BEFORE_SHA 变量， diff 时，git diff 当前 CI 与上次 commit SHA 的变化。</p>\n<h5 id=\"2-3-2-前端-build\"><a href=\"#2-3-2-前端-build\" class=\"headerlink\" title=\"2.3.2 前端 build\"></a>2.3.2 前端 build</h5><p>根据 git diff 的变化情况，确定本次需要打包的内容。</p>\n<h5 id=\"2-3-3-commit-打包后生成的-HTML-文件\"><a href=\"#2-3-3-commit-打包后生成的-HTML-文件\" class=\"headerlink\" title=\"2.3.3 commit 打包后生成的 HTML 文件\"></a>2.3.3 commit 打包后生成的 HTML 文件</h5><p>在 GitLab CI/CD 提交代码时，使用 Git 凭证存储，提交打包后的 HTML 文件。Git 凭证存储细节可参考凭证存储文档(<a href=\"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8</a>)</p>\n<h4 id=\"2-4-发布阶段（deploy-stage）\"><a href=\"#2-4-发布阶段（deploy-stage）\" class=\"headerlink\" title=\"2.4 发布阶段（deploy stage）\"></a>2.4 发布阶段（deploy stage）</h4><p>发布阶段，使用内部的 rsync 工具 dplt 将打包后的 HTML 文件部署。dplt 可配置集群、机器列表。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>以上就是GitLab CI/CD的整个理论到实践的全部过程，实现之后你就可以解放双手了，是不是超爽。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>持续集成是什么？(<a href=\"http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html</a>)</p>\n<p>什么是 CI/CD？(<a href=\"https://www.redhat.com/zh/topics/devops/what-is-ci-cd\" target=\"_blank\" rel=\"noopener\">https://www.redhat.com/zh/topics/devops/what-is-ci-cd</a>)</p>\n<p>GitLab Docs(<a href=\"https://docs.gitlab.com/\" target=\"_blank\" rel=\"noopener\">https://docs.gitlab.com/</a>)</p>\n<p>Introduction to CI/CD with GitLab(<a href=\"https://docs.gitlab.com/ee/ci/introduction/\" target=\"_blank\" rel=\"noopener\">https://docs.gitlab.com/ee/ci/introduction/</a>)</p>\n<p>用 GitLab CI 进行持续集成(<a href=\"https://scarletsky.github.io/2016/07/29/use-gitlab-ci-for-continuous-integration/\" target=\"_blank\" rel=\"noopener\">https://scarletsky.github.io/2016/07/29/use-gitlab-ci-for-continuous-integration/</a>)</p>\n<p>如何实现前端工程的持续集成与持续部署？(<a href=\"https://www.zhihu.com/question/60194439\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/60194439</a>)</p>\n<p>基于 GitLab CI 的前端工程CI/CD实践(<a href=\"https://github.com/giscafer/front-end-manual/issues/27\" target=\"_blank\" rel=\"noopener\">https://github.com/giscafer/front-end-manual/issues/27</a>)</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck4ilitrm00001ka6274nad72","category_id":"ck4ilitrt00021ka64tuxaqnt","_id":"ck4ilits4000b1ka6byho8n37"},{"post_id":"ck4ilitrq00011ka6heczcr92","category_id":"ck4ilitrt00021ka64tuxaqnt","_id":"ck4ilits6000e1ka681947f7x"},{"post_id":"ck4ilitrv00041ka6a7a60fgq","category_id":"ck4ilits3000a1ka6d7r5322f","_id":"ck4ilits8000i1ka610jcbnwa"},{"post_id":"ck4ilitrw00051ka61onudslf","category_id":"ck4ilits6000f1ka6ewvb0pkw","_id":"ck4ilits9000m1ka6gf226wi9"},{"post_id":"ck4ilitsb000p1ka6ehg3hbas","category_id":"ck4ilits3000a1ka6d7r5322f","_id":"ck4ilitse000r1ka68txe81ph"},{"post_id":"ck4ilitsh000z1ka616ke5ctz","category_id":"ck4ilitsi00101ka6f4edf847","_id":"ck4ilitsl00171ka68lqxa9ig"},{"post_id":"ck4ilitsh000z1ka616ke5ctz","category_id":"ck4ilitsk00131ka6e78lbg1h","_id":"ck4ilitsl00181ka6401iaf94"},{"post_id":"ck4ilitsl00191ka6f57odgac","category_id":"ck4ilitsn001a1ka6h0zqgkld","_id":"ck4ilitsp001d1ka683mhbkbx"},{"post_id":"ck4o8np9l0000msvqcsy851ub","category_id":"ck4ilits8000j1ka60u7d3yua","_id":"ck4o8npa10002msvqcxeu7pwb"},{"post_id":"ck4tzdev70001v0a6hcpz8g42","category_id":"ck4ilits3000a1ka6d7r5322f","_id":"ck4tzdevm0007v0a63vmy0bsl"},{"post_id":"ck4tzdevf0004v0a693f4a7tn","category_id":"ck4ilits8000j1ka60u7d3yua","_id":"ck4tzdevp000bv0a61qpg6vzx"},{"post_id":"ck4tzdevg0005v0a6h87k5gp2","category_id":"ck4ilits8000j1ka60u7d3yua","_id":"ck4tzdevr000dv0a6cwfm8u2m"},{"post_id":"ck4tzdeui0000v0a6asmpb8bm","category_id":"ck4tzdeva0002v0a6ciarb5cj","_id":"ck4tzdevu000hv0a640sw6yua"},{"post_id":"ck4tzdevi0006v0a6fcua0ikl","category_id":"ck4ilits8000j1ka60u7d3yua","_id":"ck4tzdevv000jv0a6hg09b7fj"},{"post_id":"ck4tzdevn000av0a61rjr292n","category_id":"ck4tzdevt000fv0a68uey21hc","_id":"ck4tzdevw000ov0a621r3gk9n"},{"post_id":"ck4tzdevq000cv0a68q360w2x","category_id":"ck4tzdevv000lv0a63e174f6o","_id":"ck4tzdevx000sv0a6567a1j2f"},{"post_id":"ck4tzdevt000gv0a6661hcusg","category_id":"ck4tzdevw000pv0a65g15eha7","_id":"ck4tzdevy000vv0a6bf5yf853"},{"post_id":"ck4tzdewu0016v0a6hxmy5ap5","category_id":"ck4tzdex80018v0a60k8b78t6","_id":"ck4tzdey2001dv0a6g7ur3xg6"},{"post_id":"ck4tzdex00017v0a63o1bguzi","category_id":"ck4tzdext001av0a6c3ay5bhp","_id":"ck4tzdey5001gv0a60hg1dmib"},{"post_id":"ck4o6ny7500007i2bdfxq4sqf","category_id":"ck4tzdey2001ev0a6a7xq1v0d","_id":"ck4tzdey8001iv0a63r2fd4zh"}],"PostTag":[{"post_id":"ck4ilitrm00001ka6274nad72","tag_id":"ck4ilitru00031ka68jmk28zc","_id":"ck4ilits200091ka6hox33b45"},{"post_id":"ck4ilitrq00011ka6heczcr92","tag_id":"ck4ilitru00031ka68jmk28zc","_id":"ck4ilits5000d1ka6h26pd3dy"},{"post_id":"ck4ilitrv00041ka6a7a60fgq","tag_id":"ck4ilits4000c1ka6eyrb5ycn","_id":"ck4ilits7000h1ka6hsqeemfb"},{"post_id":"ck4ilitrw00051ka61onudslf","tag_id":"ck4ilits6000g1ka691uhhpv9","_id":"ck4ilits9000l1ka6b79y1t8h"},{"post_id":"ck4ilitsb000p1ka6ehg3hbas","tag_id":"ck4ilitse000q1ka6dbv0bm07","_id":"ck4ilitsf000v1ka64ohwghz9"},{"post_id":"ck4ilitsb000p1ka6ehg3hbas","tag_id":"ck4ilitse000s1ka6f2636vt8","_id":"ck4ilitsg000w1ka67kzx4dg8"},{"post_id":"ck4ilitsb000p1ka6ehg3hbas","tag_id":"ck4ilitsf000t1ka6dyxy9c45","_id":"ck4ilitsg000x1ka6emwd835i"},{"post_id":"ck4ilitsb000p1ka6ehg3hbas","tag_id":"ck4ilitsf000u1ka6g6s86a59","_id":"ck4ilitsg000y1ka64mrr47jf"},{"post_id":"ck4ilitsh000z1ka616ke5ctz","tag_id":"ck4ilitsf000u1ka6g6s86a59","_id":"ck4ilitsk00141ka6eycx1sis"},{"post_id":"ck4ilitsh000z1ka616ke5ctz","tag_id":"ck4ilitsj00111ka65t1mgxa5","_id":"ck4ilitsk00151ka6a8fxhhna"},{"post_id":"ck4ilitsh000z1ka616ke5ctz","tag_id":"ck4ilitsj00121ka6aqathxhf","_id":"ck4ilitsk00161ka6750kf78g"},{"post_id":"ck4ilitsl00191ka6f57odgac","tag_id":"ck4ilitsn001b1ka67nawfeud","_id":"ck4ilitsp001c1ka6fejydgmd"},{"post_id":"ck4o8np9l0000msvqcsy851ub","tag_id":"ck4ilits8000k1ka6agd8408j","_id":"ck4o8npa00001msvqfumwc66j"},{"post_id":"ck4tzdeui0000v0a6asmpb8bm","tag_id":"ck4tzdeve0003v0a6ay531ryg","_id":"ck4tzdevn0009v0a6833nab5o"},{"post_id":"ck4tzdev70001v0a6hcpz8g42","tag_id":"ck4tzdevm0008v0a61z3r7e3b","_id":"ck4tzdevu000iv0a639fxalot"},{"post_id":"ck4tzdevf0004v0a693f4a7tn","tag_id":"ck4tzdevs000ev0a6c8ynblao","_id":"ck4tzdevw000mv0a6hqu1hdj3"},{"post_id":"ck4tzdevg0005v0a6h87k5gp2","tag_id":"ck4tzdevv000kv0a6c886b4gt","_id":"ck4tzdevx000qv0a62d4ddwxk"},{"post_id":"ck4tzdevi0006v0a6fcua0ikl","tag_id":"ck4tzdevw000nv0a63445hw7t","_id":"ck4tzdevy000tv0a66zf6533t"},{"post_id":"ck4tzdevn000av0a61rjr292n","tag_id":"ck4tzdevx000rv0a6azid0pdv","_id":"ck4tzdew2000yv0a61jg63326"},{"post_id":"ck4tzdevn000av0a61rjr292n","tag_id":"ck4tzdevy000uv0a6hw4maqvs","_id":"ck4tzdew2000zv0a679q95mar"},{"post_id":"ck4tzdevn000av0a61rjr292n","tag_id":"ck4tzdevy000wv0a64opo17ck","_id":"ck4tzdew20011v0a64yr7aug5"},{"post_id":"ck4tzdevq000cv0a68q360w2x","tag_id":"ck4tzdevz000xv0a6gbzf7lcm","_id":"ck4tzdew30012v0a6eu406ror"},{"post_id":"ck4tzdevt000gv0a6661hcusg","tag_id":"ck4tzdew20010v0a64xbu5dxe","_id":"ck4tzdew30014v0a6bcel2nqf"},{"post_id":"ck4tzdevt000gv0a6661hcusg","tag_id":"ck4tzdew30013v0a68lj0gqk7","_id":"ck4tzdew40015v0a6cb4k1a8q"},{"post_id":"ck4tzdewu0016v0a6hxmy5ap5","tag_id":"ck4tzdex90019v0a6dpmcfedm","_id":"ck4tzdexy001cv0a6fff1241a"},{"post_id":"ck4tzdex00017v0a63o1bguzi","tag_id":"ck4tzdexv001bv0a686a7c24h","_id":"ck4tzdeyc001kv0a6388638wi"},{"post_id":"ck4tzdex00017v0a63o1bguzi","tag_id":"ck4tzdey2001fv0a6a1qk0cun","_id":"ck4tzdeyc001lv0a68b1b1joi"},{"post_id":"ck4tzdex00017v0a63o1bguzi","tag_id":"ck4tzdey5001hv0a69xhr54t1","_id":"ck4tzdeyd001nv0a62s2t25bn"},{"post_id":"ck4o6ny7500007i2bdfxq4sqf","tag_id":"ck4tzdey9001jv0a6hyyx1kmh","_id":"ck4tzdeyf001pv0a66e582w42"},{"post_id":"ck4o6ny7500007i2bdfxq4sqf","tag_id":"ck4tzdeyd001mv0a60w7i06kk","_id":"ck4tzdeyg001qv0a62sbja3m2"},{"post_id":"ck4o6ny7500007i2bdfxq4sqf","tag_id":"ck4tzdeye001ov0a626mi37d1","_id":"ck4tzdeyg001rv0a65xam2wnk"}],"Tag":[{"name":"VUE","_id":"ck4ilitru00031ka68jmk28zc"},{"name":"blog - hexo - next - npm","_id":"ck4ilits4000c1ka6eyrb5ycn"},{"name":"VSCode","_id":"ck4ilits6000g1ka691uhhpv9"},{"name":"前端类","_id":"ck4ilits8000k1ka6agd8408j"},{"name":"blog","_id":"ck4ilitse000q1ka6dbv0bm07"},{"name":"hexo","_id":"ck4ilitse000s1ka6f2636vt8"},{"name":"next","_id":"ck4ilitsf000t1ka6dyxy9c45"},{"name":"npm","_id":"ck4ilitsf000u1ka6g6s86a59"},{"name":"node","_id":"ck4ilitsj00111ka65t1mgxa5"},{"name":"rnpm","_id":"ck4ilitsj00121ka6aqathxhf"},{"name":"浏览器兼容问题","_id":"ck4ilitsn001b1ka67nawfeud"},{"name":"CSS","_id":"ck4tzdeve0003v0a6ay531ryg"},{"name":"Git","_id":"ck4tzdevm0008v0a61z3r7e3b"},{"name":"JavaScript","_id":"ck4tzdevs000ev0a6c8ynblao"},{"name":"职场","_id":"ck4tzdevv000kv0a6c886b4gt"},{"name":"成长","_id":"ck4tzdevw000nv0a63445hw7t"},{"name":"vue","_id":"ck4tzdevx000rv0a6azid0pdv"},{"name":"面试","_id":"ck4tzdevy000uv0a6hw4maqvs"},{"name":"组件通信","_id":"ck4tzdevy000wv0a64opo17ck"},{"name":"java","_id":"ck4tzdevz000xv0a6gbzf7lcm"},{"name":"微信","_id":"ck4tzdew20010v0a64xbu5dxe"},{"name":"兼容","_id":"ck4tzdew30013v0a68lj0gqk7"},{"name":"总结","_id":"ck4tzdex90019v0a6dpmcfedm"},{"name":"GitLab","_id":"ck4tzdexv001bv0a686a7c24h"},{"name":"CI/CD","_id":"ck4tzdey2001fv0a6a1qk0cun"},{"name":"自动构建","_id":"ck4tzdey5001hv0a69xhr54t1"},{"name":"Github","_id":"ck4tzdey9001jv0a6hyyx1kmh"},{"name":"Actions","_id":"ck4tzdeyd001mv0a60w7i06kk"},{"name":"Hexo","_id":"ck4tzdeye001ov0a626mi37d1"}]}}